stages:
  - unittest
  - build
  - integrationtest
  - deploy

variables:
  GITLAB_REGISTRY: "registry.gitlab.com/${CI_PROJECT_PATH}"
  UBUNTU_BASE_IMAGE: "registry.gitlab.com/${CI_PROJECT_PATH}/base/ubuntu"
  DEBIAN_BASE_IMAGE: "registry.gitlab.com/${CI_PROJECT_PATH}/base/debian"
  UBUNTU_FLECTRA_IMAGE: "registry.gitlab.com/${CI_PROJECT_PATH}/ubuntu"
  DEBIAN_FLECTRA_IMAGE: "registry.gitlab.com/${CI_PROJECT_PATH}/debian"
  DOCKER_HOST: tcp://docker:2375
  DOCKER_DRIVER: overlay2

  # Configure postgres service (https://hub.docker.com/_/postgres/)
  POSTGRES_DB: postgres
  POSTGRES_USER: flectra
  POSTGRES_PASSWORD: flectra
  POSTGRES_HOST: postgres
  POSTGRES_PORT: "5432"

#--------------------------------------------------------------------
# Job Templates
#--------------------------------------------------------------------
.psql9:template:
  services: &psql9_definition
    - name: postgres:9-alpine
      alias: postgres9

.psql10:template:
  services: &psql10_definition
    - name: postgres:10-alpine
      alias: postgres10

.unittest:template: &unittest_definition
  image: ${UBUNTU_BASE_IMAGE}:latest
  stage: unittest
  coverage: '/^TOTAL.*\s+(\d+\%)$/'
  except:
    - schedules

.build:template: &build_definition
  services:
    - name: docker:dind
  except:
    - schedules
  image: docker:stable

.integrationtest:template: &integrationtest_definition
  stage: integrationtest
  except:
    - schedules

.build:base:template: &build_base_definition
  stage: build
  services:
    - name: docker:dind
  only:
    - schedules
  image: docker:stable

#--------------------------------------------------------------------
# Jobs of stage unittest
#--------------------------------------------------------------------
.test:pg9_base:
  <<: *unittest_definition
  services: *psql9_definition
  script:
    - su - flectra -c "cd ${CI_PROJECT_DIR} && ./setup/docker/gitlab-ci/gitlab_test_flectra.py --build=base --host=postgres9"

.test:pg9_all:
  <<: *unittest_definition
  services: *psql9_definition
  script:
    - su - flectra -c "cd ${CI_PROJECT_DIR} && ./setup/docker/gitlab-ci/gitlab_test_flectra.py --build=all --host=postgres9"

.test:pg10_base:
  <<: *unittest_definition
  services: *psql10_definition
  script:
    - su - flectra -c "cd ${CI_PROJECT_DIR} && ./setup/docker/gitlab-ci/gitlab_test_flectra.py --build=base --host=postgres10"

.test:pg10_all:
  <<: *unittest_definition
  services: *psql10_definition
  script:
    - su - flectra -c "cd ${CI_PROJECT_DIR} && ./setup/docker/gitlab-ci/gitlab_test_flectra.py --build=all --host=postgres10"

#--------------------------------------------------------------------
# Jobs of stage build
#--------------------------------------------------------------------
build:flectra_ubuntu:
  <<: *build_definition
  stage: build
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
    - docker build --build-arg BASE_IMAGE=${UBUNTU_BASE_IMAGE} -f ./setup/docker/flectra/ubuntu/Dockerfile ./setup/docker/ --tag ${UBUNTU_FLECTRA_IMAGE}:$CI_COMMIT_SHA
    - docker push ${UBUNTU_FLECTRA_IMAGE}:$CI_COMMIT_SHA

build:flectra_debian:
  <<: *build_definition
  stage: build
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
    - docker build --build-arg BASE_IMAGE=${DEBIAN_BASE_IMAGE} -f ./setup/docker/flectra/debian/Dockerfile ./setup/docker/ --tag ${DEBIAN_FLECTRA_IMAGE}:$CI_COMMIT_SHA
    - docker push ${DEBIAN_FLECTRA_IMAGE}:$CI_COMMIT_SHA

#--------------------------------------------------------------------
# Jobs of stage integrationtest
#--------------------------------------------------------------------
itest:ubuntu_pg9_all:
  <<: *integrationtest_definition
  services: *psql9_definition
  image: ${UBUNTU_FLECTRA_IMAGE}:$CI_COMMIT_SHA
  script:
    - cd ${CI_PROJECT_DIR} && ./setup/docker/gitlab-ci/gitlab_test_flectra.py --build=all --server-path=/opt/flectra/flectra --host=postgres9

itest:ubuntu_pg10_all:
  <<: *integrationtest_definition
  services: *psql10_definition
  image: ${UBUNTU_FLECTRA_IMAGE}:$CI_COMMIT_SHA
  script:
    - cd ${CI_PROJECT_DIR} && ./setup/docker/gitlab-ci/gitlab_test_flectra.py --build=all --server-path=/opt/flectra/flectra --host=postgres10

itest:debian_pg9_all:
  <<: *integrationtest_definition
  services: *psql9_definition
  image: ${DEBIAN_FLECTRA_IMAGE}:$CI_COMMIT_SHA
  script:
    - cd ${CI_PROJECT_DIR} && ./setup/docker/gitlab-ci/gitlab_test_flectra.py --build=all --server-path=/opt/flectra/flectra --host=postgres9

itest:debian_pg10_all:
  <<: *integrationtest_definition
  services: *psql10_definition
  image: ${DEBIAN_FLECTRA_IMAGE}:$CI_COMMIT_SHA
  script:
    - cd ${CI_PROJECT_DIR} && ./setup/docker/gitlab-ci/gitlab_test_flectra.py --build=all --server-path=/opt/flectra/flectra --host=postgres10

deploy:flectra_ubuntu:
  <<: *build_definition
  stage: deploy
  only:
    - tag
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
    - docker build --build-arg BASE_IMAGE=${UBUNTU_BASE_IMAGE} -f ./setup/docker/flectra/ubuntu/Dockerfile ./setup/docker/ --tag ${UBUNTU_FLECTRA_IMAGE}:$CI_COMMIT_TAG --tag ${UBUNTU_FLECTRA_IMAGE}:latest
    - docker push ${UBUNTU_FLECTRA_IMAGE}:$CI_COMMIT_TAG
    - docker push ${UBUNTU_FLECTRA_IMAGE}:latest

deploy:flectra_debian:
  <<: *build_definition
  stage: deploy
  only:
    - tag
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
    - docker build --build-arg BASE_IMAGE=${DEBIAN_BASE_IMAGE} -f ./setup/docker/flectra/ubuntu/Dockerfile ./setup/docker/ --tag ${DEBIAN_FLECTRA_IMAGE}:$CI_COMMIT_TAG --tag ${DEBIAN_FLECTRA_IMAGE}:latest
    - docker push ${DEBIAN_FLECTRA_IMAGE}:$CI_COMMIT_TAG
    - docker push ${DEBIAN_FLECTRA_IMAGE}:latest


#--------------------------------------------------------------------
# Scheduled jobs of stage build (executed by gitlab scheduler)
#--------------------------------------------------------------------

build:base_ubuntu:
  <<: *build_base_definition
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
    - docker pull ${UBUNTU_BASE_IMAGE}:latest || true
    - docker build --cache-from ${UBUNTU_BASE_IMAGE}:latest -f ./setup/docker/base/ubuntu/Dockerfile ./setup/docker/ --tag ${UBUNTU_BASE_IMAGE}:latest
    - docker push ${UBUNTU_BASE_IMAGE}:latest

build:base_debian:
  <<: *build_base_definition
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN registry.gitlab.com
    - docker pull ${DEBIAN_BASE_IMAGE}:latest || true
    - docker build --cache-from ${DEBIAN_BASE_IMAGE}:latest -f ./setup/docker/base/debian/Dockerfile ./setup/docker/ --tag ${DEBIAN_BASE_IMAGE}:latest
    - docker push ${DEBIAN_BASE_IMAGE}:latest