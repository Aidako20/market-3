#-*-coding:utf-8-*-
#PartofFlectra.SeeLICENSEfileforfullcopyrightandlicensingdetails.

fromdatetimeimportdatetime
frompytzimportUTC

fromflectraimportapi,fields,models
fromflectra.toolsimportDEFAULT_SERVER_DATETIME_FORMAT


classAdyenTransaction(models.Model):
    _name='adyen.transaction'
    _description='AdyenforPlatformsTransaction'
    _order='datedesc'

    adyen_account_id=fields.Many2one('adyen.account')
    reference=fields.Char('Reference')
    amount=fields.Float('Amount')
    currency_id=fields.Many2one('res.currency',string='Currency')
    date=fields.Datetime('Date')
    description=fields.Char('Description')
    status=fields.Selection(string='Type',selection=[
        ('PendingCredit','PendingCredit'),
        ('CreditFailed','CreditFailed'),
        ('Credited','Credited'),
        ('Converted','Converted'),
        ('PendingDebit','PendingDebit'),
        ('DebitFailed','DebitFailed'),
        ('Debited','Debited'),
        ('DebitReversedReceived','DebitReversedReceived'),
        ('DebitedReversed','DebitReversed'),
        ('ChargebackReceived','ChargebackReceived'),
        ('Chargeback','Chargeback'),
        ('ChargebackReversedReceived','ChargebackReversedReceived'),
        ('ChargebackReversed','ChargebackReversed'),
        ('Payout','Payout'),
        ('PayoutReversed','PayoutReversed'),
        ('FundTransfer','FundTransfer'),
        ('PendingFundTransfer','PendingFundTransfer'),
        ('ManualCorrected','ManualCorrected'),
    ])
    adyen_payout_id=fields.Many2one('adyen.payout')

    @api.model
    defsync_adyen_transactions(self):
        '''MethodcalledbycrontosynctransactionsfromAdyen.
            Updatesthestatusofpendingtransactionsandcreatemissingones.
        '''
        forpayout_idinself.env['adyen.payout'].search([]):
            page=1
            has_next_page=True
            new_transactions=True
            pending_statuses=['PendingCredit','PendingDebit','DebitReversedReceived','ChargebackReceived','ChargebackReversedReceived','PendingFundTransfer']
            pending_transaction_ids=payout_id.transaction_ids.filtered(lambdatr:tr.statusinpending_statuses)

            whilehas_next_pageand(new_transactionsorpending_transaction_ids):
                #Fetchnexttransactionpage
                transactions,has_next_page=payout_id._fetch_transactions(page)
                fortransactionintransactions:
                    transaction_reference=transaction.get('paymentPspReference')ortransaction.get('pspReference')
                    transaction_id=payout_id.transaction_ids.filtered(lambdatr:tr.reference==transaction_reference)
                    iftransaction_id:
                        new_transactions=False
                        iftransaction_idinpending_transaction_ids:
                            #Updatetransactionstatus
                            transaction_id.sudo().write({
                                'status':transaction['transactionStatus'],
                            })
                            pending_transaction_ids-=transaction_id
                    else:
                        currency_id=self.env['res.currency'].search([('name','=',transaction['amount']['currency'])])
                        #Newtransaction
                        self.env['adyen.transaction'].sudo().create({
                            'adyen_account_id':payout_id.adyen_account_id.id,
                            'reference':transaction_reference,
                            'amount':transaction['amount']['value']/(10**currency_id.decimal_places),
                            'currency_id':currency_id.id,
                            'date':datetime.strptime(transaction['creationDate'],'%Y-%m-%dT%H:%M:%S%z').astimezone(UTC).strftime(DEFAULT_SERVER_DATETIME_FORMAT),
                            'description':transaction.get('description'),
                            'status':transaction['transactionStatus'],
                            'adyen_payout_id':payout_id.id,
                        })
                page+=1
