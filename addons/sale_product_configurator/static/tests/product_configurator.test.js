flectra.define('sale.product.configurator.tests',function(require){
"usestrict";

varFormView=require('web.FormView');
varProductConfiguratorFormView=require('sale_product_configurator.ProductConfiguratorFormView');
vartestUtils=require('web.test_utils');
varcreateView=testUtils.createView;

vargetArch=function(){
    return'<form>'+
    '<sheet>'+
    '<fieldname="pricelist_id"widget="selection"/>'+
    '<fieldname="sale_order_line"widget="section_and_note_one2many">'+
    '<treeeditable="top"><control>'+
    '<createstring="Addaproduct"/>'+
    '<createstring="Addasection"context="{\'default_display_type\':\'line_section\'}"/>'+
    '<createstring="Addanote"context="{\'default_display_type\':\'line_note\'}"/>'+
    '</control>'+
    '<fieldname="product_id"invisible="1"/>'+
    '<fieldname="product_template_id"widget="product_configurator"/>'+
    '<fieldname="product_uom_qty"/>'+
    '<fieldname="product_custom_attribute_value_ids"invisible="1"/>'+
    '</tree>'+
    '</field>'+
    '</sheet>'+
    '</form>';
};

QUnit.module('ProductConfigurator',{
    beforeEach:function(){
        this.data={
            product_template:{
                fields:{
                    id:{type:'integer'}
                },
                records:[{
                    id:42,
                    display_name:"CustomizableDesk"
                }]
            },
            product:{
                fields:{
                    id:{type:'integer'}
                },
                records:[{
                    id:1,
                    display_name:"CustomizableDesk(1)"
                },{
                    id:2,
                    display_name:"CustomizableDesk(2)"
                }]
            },
            sale_order:{
                fields:{
                    id:{type:'integer'},
                    pricelist_id:{
                        string:'Pricelist',
                        type:'one2many',
                        relation:'pricelist'
                    },
                    sale_order_line:{
                        string:'lines',
                        type:'one2many',
                        relation:'sale_order_line'
                    },
                }
            },
            sale_order_line:{
                fields:{
                    product_template_id:{
                        string:'producttemplate',
                        type:'many2one',
                        relation:'product_template'
                    },
                    product_id:{
                        string:'product',
                        type:'many2one',
                        relation:'product'
                    },
                    product_custom_attribute_value_ids:{
                        string:'product_custom_attribute_values',
                        type:'one2many',
                        relation:'product_custom_attribute_value'
                    },
                    product_uom_qty:{type:'integer'},
                    sequence:{type:'integer'},
                }
            },
            product_custom_attribute_value:{
                fields:{
                    id:{type:'integer'},
                    sale_order_line_id:{
                        string:'saleorderline',
                        type:'many2one',
                        relation:'sale_order_line'
                    }
                }
            },
            sale_product_configurator:{
                fields:{
                    product_template_id:{
                        string:'product',
                        type:'many2one',
                        relation:'product_template'
                    },
                    product_template_attribute_value_ids:{
                        type:'many2many',
                        relation:'product_template_attribute_value'
                    },
                    product_no_variant_attribute_value_ids:{
                        type:'many2many',
                        relation:'product_template_attribute_value'
                    },
                    product_custom_attribute_value_ids:{
                        type:'many2many',
                        relation:'product_attribute_custom_value'
                    }
                },
                records:[{
                    product_template_id:42
                }]
            },
            product_template_attribute_value:{
                fields:{
                    id:{type:'integer'}
                }
            },
            product_attribute_custom_value:{
                fields:{
                    id:{type:'integer'}
                }
            },
            pricelist:{
                fields:{
                    id:{type:'integer'}
                }
            }
        };
    }
},function(){
    QUnit.test('Selectanonconfigurableproducttemplateandverifythattheproduct_idiscorrectlyset',asyncfunction(assert){
        assert.expect(2);

        varform=awaitcreateView({
            View:FormView,
            model:'sale_order',
            data:this.data,
            arch:getArch(),
            mockRPC:function(route,params){
                if(params.method==='get_single_product_variant'){
                    assert.ok(true);
                    returnPromise.resolve({product_id:2});
                }
                //FIXMEawa:thisshouldn'tbeheresincethereadisdonein'event_sale'
                //Butatthemomentthereisnoeasywaytosolvesuchcrossmodule'include'issues
                if(params.method==='read'){
                    returnPromise.resolve(false);
                }
                returnthis._super.apply(this,arguments);
            },
            intercepts:{
                do_action:function(ev){
                    if(ev.data.action==='sale_product_configurator.sale_product_configurator_action'){
                        assert.ok(false,"Shouldnotexecutetheconfigureaction");
                    }
                },
            }
        });

        awaittestUtils.dom.click(form.$("a:contains('Addaproduct')"));
        awaittestUtils.fields.many2one.searchAndClickItem("product_template_id",{item:'CustomizableDesk'});
        //checkthatproduct_idiscorrectlysetto2
        assert.strictEqual(form.renderer.state.data.sale_order_line.data[0].data.product_id.data.id,2);
        form.destroy();
    });

    QUnit.test('Selectaconfigurableproducttemplateandverifythattheproductconfiguratorisopened',asyncfunction(assert){
        assert.expect(2);

        varform=awaitcreateView({
            View:FormView,
            model:'sale_order',
            data:this.data,
            arch:getArch(),
            mockRPC:function(route,params){
                if(params.method==='get_single_product_variant'){
                    assert.ok(true);
                    returnPromise.resolve(false);
                }
                returnthis._super.apply(this,arguments);
            },
            intercepts:{
                do_action:function(ev){
                    if(ev.data.action==='sale_product_configurator.sale_product_configurator_action'){
                        assert.ok(true);
                    }
                },
            }
        });

        awaittestUtils.dom.click(form.$("a:contains('Addaproduct')"));
        awaittestUtils.fields.many2one.searchAndClickItem("product_template_id",{item:'CustomizableDesk'});
        form.destroy();
    });

    QUnit.test('trigger_upthe"add_record"eventandchecksthatrowsarecorrectlyaddedtothelist',asyncfunction(assert){
        assert.expect(1);

        varform=awaitcreateView({
            View:FormView,
            model:'sale_order',
            data:this.data,
            arch:getArch()
        });

        varlist=form.renderer.allFieldWidgets[form.handle][1];

        list.trigger_up('add_record',{
            context:[{default_product_id:1,default_product_uom_qty:2},{default_product_id:2,default_product_uom_qty:3}],
            forceEditable:"bottom",
            allowWarning:true
        });
        awaittestUtils.nextTick();

        assert.containsN(list,"tr.o_data_row",2);
        form.destroy();
    });

    QUnit.test('Selectaproductinthelistandcheckfortemplateloading',asyncfunction(assert){
        assert.expect(1);

        varproduct_configurator_form=awaitcreateView({
            View:ProductConfiguratorFormView,
            model:'sale_product_configurator',
            data:this.data,
            arch:
                '<formjs_class="product_configurator_form">'+
                    '<group>'+
                        '<fieldname="product_template_id"class="oe_product_configurator_product_template_id"/>'+
                        '<fieldname="product_template_attribute_value_ids"invisible="1"/>'+
                        '<fieldname="product_no_variant_attribute_value_ids"invisible="1"/>'+
                        '<fieldname="product_custom_attribute_value_ids"invisible="1"/>'+
                    '</group>'+
                    '<footer>'+
                        '<buttonstring="Add"class="btn-primaryo_sale_product_configurator_adddisabled"/>'+
                        '<buttonstring="Cancel"class="btn-secondary"special="cancel"/>'+
                    '</footer>'+
                '</form>',
                mockRPC:function(route){
                    if(route==='/sale_product_configurator/configure'){
                        assert.ok(true);
                        returnPromise.resolve('<div>plop</div>');
                    }
                    returnthis._super.apply(this,arguments);
                }
        });
        awaittestUtils.dom.click(product_configurator_form.$('.o_input'));
        awaittestUtils.dom.click($("ul.ui-autocompletelia:contains('CustomizableDesk')").mouseenter());
        product_configurator_form.destroy();
    });

    QUnit.test('draganddroprowscontainingproduct_configuratormany2one',asyncfunction(assert){
        assert.expect(4);

        this.data.sale_order.records=[
            {id:1,sale_order_line:[1,2]}
        ];
        this.data.sale_order_line.records=[
            {id:1,sequence:5,product_id:1},
            {id:2,sequence:15,product_id:2},
        ];

        constform=awaitcreateView({
            View:FormView,
            model:'sale_order',
            data:this.data,
            arch:`
                <form>
                    <fieldname="sale_order_line"/>
                </form>`,
            archs:{
                'sale_order_line,false,list':`
                    <treeeditable="bottom">
                        <fieldname="sequence"widget="handle"/>
                        <fieldname="product_id"widget="product_configurator"/>
                    </tree>`,
            },
            res_id:1,
            viewOptions:{
                mode:'edit',
            },
        });

        assert.containsN(form,'.o_data_row',2);
        assert.strictEqual(form.$('.o_data_row').text(),'CustomizableDesk(1)CustomizableDesk(2)');
        assert.containsN(form,'.o_data_row.o_row_handle',2);

        //movefirstrowbelowsecond
        const$firstHandle=form.$('.o_data_row:nth(0).o_row_handle');
        const$secondHandle=form.$('.o_data_row:nth(1).o_row_handle');
        awaittestUtils.dom.dragAndDrop($firstHandle,$secondHandle,{position:'bottom'});

        assert.strictEqual(form.$('.o_data_row').text(),'CustomizableDesk(2)CustomizableDesk(1)');

        form.destroy();
    });
});

});
