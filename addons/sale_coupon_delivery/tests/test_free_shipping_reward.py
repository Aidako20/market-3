#-*-coding:utf-8-*-
#PartofFlectra.SeeLICENSEfileforfullcopyrightandlicensingdetails.

fromflectra.addons.sale_coupon.tests.commonimportTestSaleCouponCommon
fromflectra.testsimportForm,tagged


@tagged('post_install','-at_install')
classTestSaleCouponProgramRules(TestSaleCouponCommon):

    @classmethod
    defsetUpClass(cls):
        super(TestSaleCouponProgramRules,cls).setUpClass()
        cls.iPadMini=cls.env['product.product'].create({'name':'LargeCabinet','list_price':320.0})
        tax_15pc_excl=cls.env['account.tax'].create({
            'name':"15%Taxexcl",
            'amount_type':'percent',
            'amount':15,
        })
        cls.product_delivery_poste=cls.env['product.product'].create({
            'name':'ThePoste',
            'type':'service',
            'categ_id':cls.env.ref('delivery.product_category_deliveries').id,
            'sale_ok':False,
            'purchase_ok':False,
            'list_price':20.0,
            'taxes_id':[(6,0,[tax_15pc_excl.id])],
        })
        cls.carrier=cls.env['delivery.carrier'].create({
            'name':'ThePoste',
            'fixed_price':20.0,
            'delivery_type':'base_on_rule',
            'product_id':cls.product_delivery_poste.id,
        })
        cls.env['delivery.price.rule'].create([{
            'carrier_id':cls.carrier.id,
            'max_value':5,
            'list_base_price':20,
        },{
            'carrier_id':cls.carrier.id,
            'operator':'>=',
            'max_value':5,
            'list_base_price':50,
        },{
            'carrier_id':cls.carrier.id,
            'operator':'>=',
            'max_value':300,
            'variable':'price',
            'list_base_price':0,
        }])


    #Testafreeshippingreward+someexpectedbehavior
    #(automaticlineadditionorremoval)

    deftest_free_shipping_reward(self):
        #Testcase1:Theminimumamountisnotreached,therewardshould
        #notbecreated
        self.immediate_promotion_program.active=False
        self.env['coupon.program'].create({
            'name':'FreeShippingifatleast100euros',
            'promo_code_usage':'no_code_needed',
            'reward_type':'free_shipping',
            'rule_minimum_amount':100.0,
            'rule_minimum_amount_tax_inclusion':'tax_included',
            'active':True,
        })

        order=self.env['sale.order'].create({
            'partner_id':self.steve.id,
        })

        #Priceoforderwillbe5*1.15=5.75(taxincluded)
        order.write({'order_line':[
            (0,False,{
                'product_id':self.product_B.id,
                'name':'ProductB',
                'product_uom':self.uom_unit.id,
                'product_uom_qty':1.0,
            })
        ]})
        order.recompute_coupon_lines()
        self.assertEqual(len(order.order_line.ids),1)

        #IadddeliverycostinSalesorder
        delivery_wizard=Form(self.env['choose.delivery.carrier'].with_context({
            'default_order_id':order.id,
            'default_carrier_id':self.env['delivery.carrier'].search([])[1]
        }))
        choose_delivery_carrier=delivery_wizard.save()
        choose_delivery_carrier.button_confirm()

        order.recompute_coupon_lines()
        self.assertEqual(len(order.order_line.ids),2)

        #TestCase1b:amountisnotreachedbutisonathreshold
        #Theamountofdeliverableproduct+theoneofthedeliveryexceedstheminimumamount
        #yettheprogramshouldn'tbeapplied
        #Orderpricewillbe5.75+81.74*1.15=99.75
        order.write({'order_line':[
            (0,False,{
                'product_id':self.product_B.id,
                'name':'Product1B',
                'product_uom':self.uom_unit.id,
                'product_uom_qty':1.0,
                'price_unit':81.74,
            })
        ]})
        order.recompute_coupon_lines()
        self.assertEqual(len(order.order_line.ids),3)

        #Testcase2:theamountissufficient,theshippingshould
        #bereimbursed
        order.write({'order_line':[
            (0,False,{
                'product_id':self.product_A.id,
                'name':'Product1',
                'product_uom':self.uom_unit.id,
                'product_uom_qty':1.0,
                'price_unit':0.30,
            })
        ]})

        order.recompute_coupon_lines()
        self.assertEqual(len(order.order_line.ids),5)

        #Testcase3:theamountisnotsufficientnow,therewardshouldberemoved
        order.write({'order_line':[
            (2,order.order_line.filtered(lambdaline:line.product_id.id==self.product_A.id).id,False)
        ]})
        order.recompute_coupon_lines()
        self.assertEqual(len(order.order_line.ids),3)

    deftest_shipping_cost(self):
        #Freedeliveryshouldnotbetakenintoaccountwhencheckingforminimumrequiredthreshold
        p_minimum_threshold_free_delivery=self.env['coupon.program'].create({
            'name':'freeshippingif>872taxexl',
            'promo_code_usage':'no_code_needed',
            'reward_type':'free_shipping',
            'program_type':'promotion_program',
            'rule_minimum_amount':872,
        })
        p_minimum_threshold_discount=self.env['coupon.program'].create({
            'name':'10%reductionif>872taxexl',
            'promo_code_usage':'no_code_needed',
            'reward_type':'discount',
            'program_type':'promotion_program',
            'discount_type':'percentage',
            'discount_percentage':10.0,
            'rule_minimum_amount':872,
        })
        order=self.empty_order
        self.iPadMini.taxes_id=self.tax_10pc_incl
        sol1=self.env['sale.order.line'].create({
            'product_id':self.iPadMini.id,
            'name':'LargeCabinet',
            'product_uom_qty':3.0,
            'order_id':order.id,
        })
        order.recompute_coupon_lines()
        self.assertEqual(len(order.order_line.ids),2,"Weshouldgetthe10%discountlinesincewebought872.73$")
        order.carrier_id=self.env['delivery.carrier'].search([])[1]

        #IadddeliverycostinSalesorder
        delivery_wizard=Form(self.env['choose.delivery.carrier'].with_context({
            'default_order_id':order.id,
            'default_carrier_id':self.env['delivery.carrier'].search([])[1]
        }))
        choose_delivery_carrier=delivery_wizard.save()
        choose_delivery_carrier.button_confirm()

        order.recompute_coupon_lines()
        self.assertEqual(len(order.order_line.ids),3,"Weshouldgetthedeliverylinebutnotthefreedeliverysincewearebelow872.73$withthe10%discount")

        p_minimum_threshold_free_delivery.sequence=10
        (order.order_line-sol1).unlink()
        #IadddeliverycostinSalesorder
        delivery_wizard=Form(self.env['choose.delivery.carrier'].with_context({
            'default_order_id':order.id,
            'default_carrier_id':self.env['delivery.carrier'].search([])[1]
        }))
        choose_delivery_carrier=delivery_wizard.save()
        choose_delivery_carrier.button_confirm()
        order.recompute_coupon_lines()
        self.assertEqual(len(order.order_line.ids),4,"Weshouldgetbothpromotionlinesincethefreedeliverywillbeappliedfirstandwon'tchangetheSOtotal")

    deftest_shipping_cost_numbers(self):
        #Freedeliveryshouldnotbetakenintoaccountwhencheckingforminimumrequiredthreshold
        p_minimum_threshold_free_delivery=self.env['coupon.program'].create({
            'name':'freeshippingif>872taxexl',
            'promo_code_usage':'code_needed',
            'promo_code':'free_shipping',
            'reward_type':'free_shipping',
            'program_type':'promotion_program',
            'rule_minimum_amount':872,
        })
        self.p2=self.env['coupon.program'].create({
            'name':'Buy4largecabinet,getoneforfree',
            'promo_code_usage':'no_code_needed',
            'reward_type':'product',
            'program_type':'promotion_program',
            'reward_product_id':self.iPadMini.id,
            'rule_min_quantity':3,
            'rule_products_domain':'[["name","ilike","largecabinet"]]',
        })
        order=self.empty_order
        self.iPadMini.taxes_id=self.tax_10pc_incl
        sol1=self.env['sale.order.line'].create({
            'product_id':self.iPadMini.id,
            'name':'LargeCabinet',
            'product_uom_qty':3.0,
            'order_id':order.id,
        })

        #IadddeliverycostinSalesorder
        delivery_wizard=Form(self.env['choose.delivery.carrier'].with_context({
            'default_order_id':order.id,
            'default_carrier_id':self.carrier.id
        }))
        choose_delivery_carrier=delivery_wizard.save()
        choose_delivery_carrier.button_confirm()
        order.recompute_coupon_lines()
        self.assertEqual(len(order.order_line.ids),2)
        self.assertEqual(order.reward_amount,0)
        #Shippingis20+15%tax
        self.assertEqual(sum([line.price_totalforlineinorder._get_no_effect_on_threshold_lines()]),23)
        self.assertEqual(order.amount_untaxed,872.73+20)

        self.env['sale.coupon.apply.code'].sudo().apply_coupon(order,'free_shipping')
        order.recompute_coupon_lines()
        self.assertEqual(len(order.order_line.ids),3,"Weshouldgetthedeliverylineandthefreedeliverysincewearebelow872.73$withthe10%discount")
        self.assertEqual(order.reward_amount,-20)
        self.assertEqual(sum([line.price_totalforlineinorder._get_no_effect_on_threshold_lines()]),0)
        self.assertEqual(order.amount_untaxed,872.73)

        sol1.product_uom_qty=4
        order.recompute_coupon_lines()
        self.assertEqual(len(order.order_line.ids),4,"WeshouldgetafreeLargeCabinet")
        self.assertEqual(order.reward_amount,-20-290.91)
        self.assertEqual(sum([line.price_totalforlineinorder._get_no_effect_on_threshold_lines()]),0)
        self.assertEqual(order.amount_untaxed,872.73)

        p_specific_product=self.env['coupon.program'].create({
            'name':'20%reductiononlargecabinetincart',
            'promo_code_usage':'no_code_needed',
            'reward_type':'discount',
            'program_type':'promotion_program',
            'discount_type':'percentage',
            'discount_percentage':20.0,
            'discount_apply_on':'cheapest_product',
        })
        p_specific_product.discount_apply_on='cheapest_product'
        order.recompute_coupon_lines()
        #872.73-(20%of1iPad)=872.73-58.18=814.55
        self.assertAlmostEqual(order.amount_untaxed,814.55,2,"Onelargecabinetshouldbediscountedby20%")
