flectra.define('portal.portal',function(require){
'usestrict';

varpublicWidget=require('web.public.widget');
constDialog=require('web.Dialog');
const{_t,qweb}=require('web.core');
constajax=require('web.ajax');

publicWidget.registry.portalDetails=publicWidget.Widget.extend({
    selector:'.o_portal_details',
    events:{
        'changeselect[name="country_id"]':'_onCountryChange',
    },

    /**
     *@override
     */
    start:function(){
        vardef=this._super.apply(this,arguments);

        this.$state=this.$('select[name="state_id"]');
        this.$stateOptions=this.$state.filter(':enabled').find('option:not(:first)');
        this._adaptAddressForm();

        returndef;
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *@private
     */
    _adaptAddressForm:function(){
        var$country=this.$('select[name="country_id"]');
        varcountryID=($country.val()||0);
        this.$stateOptions.detach();
        var$displayedState=this.$stateOptions.filter('[data-country_id='+countryID+']');
        varnb=$displayedState.appendTo(this.$state).show().length;
        this.$state.parent().toggle(nb>=1);
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *@private
     */
    _onCountryChange:function(){
        this._adaptAddressForm();
    },
});

publicWidget.registry.PortalHomeCounters=publicWidget.Widget.extend({
    selector:'.o_portal_my_home',

    /**
     *@override
     */
    start:function(){
        vardef=this._super.apply(this,arguments);
        this._updateCounters();
        returndef;
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *@private
     */
    async_updateCounters(elem){
        constnumberRpc=3;
        constneeded=this.$('[data-placeholder_count]')
                                .map((i,o)=>$(o).data('placeholder_count'))
                                .toArray();
        constcounterByRpc=Math.ceil(needed.length/numberRpc); //maxcounter,lastcanbeless

        constproms=[...Array(Math.min(numberRpc,needed.length)).keys()].map(asynci=>{
            awaitthis._rpc({
                route:"/my/counters",
                params:{
                    counters:needed.slice(i*counterByRpc,(i+1)*counterByRpc)
                },
            }).then(data=>{
                Object.keys(data).map(k=>this.$("[data-placeholder_count='"+k+"']").text(data[k]));
            });
        });
        returnPromise.all(proms);
    },
});

publicWidget.registry.portalSearchPanel=publicWidget.Widget.extend({
    selector:'.o_portal_search_panel',
    events:{
        'click.search-submit':'_onSearchSubmitClick',
        'click.dropdown-item':'_onDropdownItemClick',
        'keyupinput[name="search"]':'_onSearchInputKeyup',
    },

    /**
     *@override
     */
    start:function(){
        vardef=this._super.apply(this,arguments);
        this._adaptSearchLabel(this.$('.dropdown-item.active'));
        returndef;
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *@private
     */
    _adaptSearchLabel:function(elem){
        var$label=$(elem).clone();
        $label.find('span.nolabel').remove();
        this.$('input[name="search"]').attr('placeholder',$label.text().trim());
    },
    /**
     *@private
     */
    _search:function(){
        varsearch=$.deparam(window.location.search.substring(1));
        search['search_in']=this.$('.dropdown-item.active').attr('href').replace('#','');
        search['search']=this.$('input[name="search"]').val();
        window.location.search=$.param(search);
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *@private
     */
    _onSearchSubmitClick:function(){
        this._search();
    },
    /**
     *@private
     */
    _onDropdownItemClick:function(ev){
        ev.preventDefault();
        var$item=$(ev.currentTarget);
        $item.closest('.dropdown-menu').find('.dropdown-item').removeClass('active');
        $item.addClass('active');

        this._adaptSearchLabel(ev.currentTarget);
    },
    /**
     *@private
     */
    _onSearchInputKeyup:function(ev){
        if(ev.keyCode===$.ui.keyCode.ENTER){
            this._search();
        }
    },
});

/**
 *WrapsanRPCcallinacheckfortheresultbeinganidentitycheckaction
 *descriptor.Ifnosuchresultisfound,justreturnsthewrappedpromise's
 *resultas-is;otherwiseshowsanidentitycheckdialogandresumesthecall
 *onsuccess.
 *
 *Warning:doesnotinandofitselftriggeranidentitycheck,apromisewhich
 *nevertriggersandidentitycheckinternallywilldonothingofuse.
 *
 *@param{Function}rpcWidget#_rpcbounddothewidget
 *@param{Promise}wrappedpromisetocheckforanidentitycheckrequest
 *@returns{Promise}resultoftheoriginalcall
 */
functionhandleCheckIdentity(rpc,wrapped){
    returnwrapped.then((r)=>{
        if(!_.isMatch(r,{type:'ir.actions.act_window',res_model:'res.users.identitycheck'})){
            returnr;
        }
        constcheck_id=r.res_id;
        returnajax.loadXML('/portal/static/src/xml/portal_security.xml',qweb).then(()=>newPromise((resolve,reject)=>{
            constd=newDialog(null,{
                title:_t("SecurityControl"),
                $content:qweb.render('portal.identitycheck'),
                buttons:[{
                    text:_t("ConfirmPassword"),classes:'btnbtn-primary',
                    //nb:ifclick&close,waitsforclicktoresolvebeforeclosing
                    click(){
                        constpassword_input=this.el.querySelector('[name=password]');
                        if(!password_input.reportValidity()){
                            password_input.classList.add('is-invalid');
                            return;
                        }
                        returnrpc({
                            model:'res.users.identitycheck',
                            method:'write',
                            args:[check_id,{password:password_input.value}]
                        }).then(()=>rpc({
                            model:'res.users.identitycheck',
                            method:'run_check',
                            args:[check_id]
                        })).then((r)=>{
                            this.close();
                            resolve(r);
                        },(err)=>{
                            err.event.preventDefault();//suppresscrashmanager
                            password_input.classList.add('is-invalid');
                            password_input.setCustomValidity(_t("Checkfailed"));
                            password_input.reportValidity();
                        });
                    }
                },{
                    text:_t('Cancel'),close:true
                },{
                    text:_t('Forgotpassword?'),classes:'btnbtn-link',
                    click(){window.location.href="/web/reset_password/";}
                }]
            }).on('close',null,()=>{
                //unlinkwizardobject?
                reject();
            });
            d.opened(()=>{
                constpw=d.el.querySelector('[name="password"]');
                pw.focus();
                pw.addEventListener('input',()=>{
                    pw.classList.remove('is-invalid');
                    pw.setCustomValidity('');
                });
                d.el.addEventListener('submit',(e)=>{
                    e.preventDefault();
                    d.$footer.find('.btn-primary').click();
                });
            });
            d.open();
        }));
    });
}
return{
    handleCheckIdentity,
}
});
