flectra.define('portal.chatter',function(require){
'usestrict';

varcore=require('web.core');
constdom=require('web.dom');
varpublicWidget=require('web.public.widget');
vartime=require('web.time');
varportalComposer=require('portal.composer');

varqweb=core.qweb;
var_t=core._t;

/**
 *WidgetPortalChatter
 *
 *-Fetchmessagefroncontroller
 *-Displaychatter:pager,totalmessage,composer(accordingtoaccessright)
 *-ProviderAPItofilterdisplayedmessages
 */
varPortalChatter=publicWidget.Widget.extend({
    template:'portal.Chatter',
    xmlDependencies:['/portal/static/src/xml/portal_chatter.xml'],
    events:{
        'click.o_portal_chatter_pager_btn':'_onClickPager',
        'click.o_portal_chatter_js_is_internal':'async_onClickUpdateIsInternal',
    },

    /**
     *@constructor
     */
    init:function(parent,options){
        varself=this;
        this.options={};
        this._super.apply(this,arguments);

        //underscorizethecamelcasedoptionkeys
        _.each(options,function(val,key){
            self.options[_.str.underscored(key)]=val;
        });
        //setdefaultoptions
        this.options=_.defaults(this.options,{
            'allow_composer':true,
            'display_composer':false,
            'csrf_token':flectra.csrf_token,
            'message_count':0,
            'pager_step':10,
            'pager_scope':5,
            'pager_start':1,
            'is_user_public':true,
            'is_user_employee':false,
            'is_user_publisher':false,
            'hash':false,
            'pid':false,
            'domain':[],
        });

        this.set('messages',[]);
        this.set('message_count',this.options['message_count']);
        this.set('pager',{});
        this.set('domain',this.options['domain']);
        this._currentPage=this.options['pager_start'];
    },
    /**
     *@override
     */
    willStart:function(){
        returnPromise.all([
            this._super.apply(this,arguments),
            this._chatterInit()
        ]);
    },
    /**
     *@override
     */
    start:function(){
        //bindevents
        this.on("change:messages",this,this._renderMessages);
        this.on("change:message_count",this,function(){
            this._renderMessageCount();
            this.set('pager',this._pager(this._currentPage));
        });
        this.on("change:pager",this,this._renderPager);
        this.on("change:domain",this,this._onChangeDomain);
        //setoptionsandparameters
        this.set('message_count',this.options['message_count']);
        this.set('messages',this.preprocessMessages(this.result['messages']));


        vardefs=[];
        defs.push(this._super.apply(this,arguments));

        //instanciateandinsertcomposerwidget
        if(this.options['display_composer']){
            this._composer=newportalComposer.PortalComposer(this,this.options);
            defs.push(this._composer.replace(this.$('.o_portal_chatter_composer')));
        }

        returnPromise.all(defs);
    },

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *Fetchthemessagesandthemessagecountfromtheserverforthe
     *currentpageandcurrentdomain.
     *
     *@param{Array}domain
     *@returns{Promise}
     */
    messageFetch:function(domain){
        varself=this;
        returnthis._rpc({
            route:'/mail/chatter_fetch',
            params:self._messageFetchPrepareParams(),
        }).then(function(result){
            self.set('messages',self.preprocessMessages(result['messages']));
            self.set('message_count',result['message_count']);
        });
    },
    /**
     *Updatethemessagesformat
     *
     *@param{Array<Object>}
     *@returns{Array}
     */
    preprocessMessages:function(messages){
        _.each(messages,function(m){
            m['author_avatar_url']=_.str.sprintf('/web/image/%s/%s/author_avatar/50x50','mail.message',m.id);
            m['published_date_str']=_.str.sprintf(_t('Publishedon%s'),moment(time.str_to_datetime(m.date)).format('MMMMDoYYYY,h:mm:ssa'));
        });
        returnmessages;
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *@private
     *@returns{Deferred}
     */
    _chatterInit:function(){
        varself=this;
        returnthis._rpc({
            route:'/mail/chatter_init',
            params:this._messageFetchPrepareParams()
        }).then(function(result){
            self.result=result;
            self.options=_.extend(self.options,self.result['options']||{});
            returnresult;
        });
    },
    /**
     *Changethecurrentpagebyrefreshingcurrentdomain
     *
     *@private
     *@param{Number}page
     *@param{Array}domain
     */
    _changeCurrentPage:function(page,domain){
        this._currentPage=page;
        vard=domain?domain:_.clone(this.get('domain'));
        this.set('domain',d);//triggerfetchmessage
    },
    _messageFetchPrepareParams:function(){
        varself=this;
        vardata={
            'res_model':this.options['res_model'],
            'res_id':this.options['res_id'],
            'limit':this.options['pager_step'],
            'offset':(this._currentPage-1)*this.options['pager_step'],
            'allow_composer':this.options['allow_composer'],
        };
        //addtokenfieldtoallowtopostcommentwithoutbeinglogged
        if(self.options['token']){
            data['token']=self.options['token'];
        }
        //adddomain
        if(this.get('domain')){
            data['domain']=this.get('domain');
        }
        returndata;
    },
    /**
     *Generatethepagerdataforthegivenpagenumber
     *
     *@private
     *@param{Number}page
     *@returns{Object}
     */
    _pager:function(page){
        page=page||1;
        vartotal=this.get('message_count');
        varscope=this.options['pager_scope'];
        varstep=this.options['pager_step'];

        //ComputePager
        varpageCount=Math.ceil(parseFloat(total)/step);

        page=Math.max(1,Math.min(parseInt(page),pageCount));
        scope-=1;

        varpmin=Math.max(page-parseInt(Math.floor(scope/2)),1);
        varpmax=Math.min(pmin+scope,pageCount);

        if(pmax-scope>0){
            pmin=pmax-scope;
        }else{
            pmin=1;
        }

        varpages=[];
        _.each(_.range(pmin,pmax+1),function(index){
            pages.push(index);
        });

        return{
            "page_count":pageCount,
            "offset":(page-1)*step,
            "page":page,
            "page_start":pmin,
            "page_previous":Math.max(pmin,page-1),
            "page_next":Math.min(pmax,page+1),
            "page_end":pmax,
            "pages":pages
        };
    },
    _renderMessages:function(){
        this.$('.o_portal_chatter_messages').html(qweb.render("portal.chatter_messages",{widget:this}));
    },
    _renderMessageCount:function(){
        this.$('.o_message_counter').replaceWith(qweb.render("portal.chatter_message_count",{widget:this}));
    },
    _renderPager:function(){
        this.$('.o_portal_chatter_pager').replaceWith(qweb.render("portal.pager",{widget:this}));
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    _onChangeDomain:function(){
        varself=this;
        this.messageFetch().then(function(){
            varp=self._currentPage;
            self.set('pager',self._pager(p));
        });
    },
    /**
     *@private
     *@param{MouseEvent}event
     */
    _onClickPager:function(ev){
        ev.preventDefault();
        varpage=$(ev.currentTarget).data('page');
        this._changeCurrentPage(page);
    },

    /**
     *Toggleis_internalstateofmessage.Updatebothnodedataand
     *classestoensureDOMisupdatedaccordinglytoRPCcallresult.
     *@private
     *@returns{Promise}
     */
    _onClickUpdateIsInternal:function(ev){
        ev.preventDefault();

        var$elem=$(ev.currentTarget);
        returnthis._rpc({
            route:'/mail/update_is_internal',
            params:{
                message_id:$elem.data('message-id'),
                is_internal:!$elem.data('is-internal'),
            },
        }).then(function(result){
            $elem.data('is-internal',result);
            if(result===true){
                $elem.addClass('o_portal_message_internal_on');
                $elem.removeClass('o_portal_message_internal_off');
            }else{
                $elem.addClass('o_portal_message_internal_off');
                $elem.removeClass('o_portal_message_internal_on');
            }
        });
    },
});

publicWidget.registry.portalChatter=publicWidget.Widget.extend({
    selector:'.o_portal_chatter',

    /**
     *@override
     */
    asyncstart(){
        constproms=[this._super.apply(this,arguments)];
        constchatter=newPortalChatter(this,this.$el.data());
        proms.push(chatter.appendTo(this.$el));
        awaitPromise.all(proms);
        //scrolltotherightplaceafterchatterloaded
        if(window.location.hash===`#${this.el.id}`){
            dom.scrollTo(this.el,{duration:0});
        }
    },
});

return{
    PortalChatter:PortalChatter,
};
});
