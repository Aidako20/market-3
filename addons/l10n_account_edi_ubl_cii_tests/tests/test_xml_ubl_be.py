#-*-coding:utf-8-*-
fromflectra.addons.l10n_account_edi_ubl_cii_tests.tests.commonimportTestUBLCommon
fromflectra.testsimporttagged
importbase64

@tagged('post_install_l10n','post_install','-at_install')
classTestUBLBE(TestUBLCommon):

    @classmethod
    defsetUpClass(cls,
                   chart_template_ref="l10n_be.l10nbe_chart_template",
                   edi_format_ref="account_edi_ubl_cii.ubl_bis3",
                   ):
        super().setUpClass(chart_template_ref=chart_template_ref,edi_format_ref=edi_format_ref)

        #seller
        cls.partner_1=cls.env['res.partner'].create({
            'name':"partner_1",
            'street':"Chauss√©edeNamur40",
            'zip':"1367",
            'city':"Ramillies",
            'vat':'BE0202239951',
            'country_id':cls.env.ref('base.be').id,
            'bank_ids':[(0,0,{'acc_number':'BE15001559627230'})],
            'ref':'ref_partner_1',
        })

        #buyer
        cls.partner_2=cls.env['res.partner'].create({
            'name':"partner_2",
            'street':"RuedesBourlottes9",
            'zip':"1367",
            'city':"Ramillies",
            'vat':'BE0477472701',
            'country_id':cls.env.ref('base.be').id,
            'bank_ids':[(0,0,{'acc_number':'BE90735788866632'})],
            'ref':'ref_partner_2',
        })

        cls.tax_25=cls.env['account.tax'].create({
            'name':'tax_25',
            'amount_type':'percent',
            'amount':25,
            'type_tax_use':'purchase',
        })

        cls.tax_21=cls.env['account.tax'].create({
            'name':'tax_21',
            'amount_type':'percent',
            'amount':21,
            'type_tax_use':'sale',
            'sequence':10,
        })

        cls.tax_15=cls.env['account.tax'].create({
            'name':'tax_15',
            'amount_type':'percent',
            'amount':15,
            'type_tax_use':'sale',
        })

        cls.tax_12=cls.env['account.tax'].create({
            'name':'tax_12',
            'amount_type':'percent',
            'amount':12,
            'type_tax_use':'sale',
        })

        cls.tax_0=cls.env['account.tax'].create({
            'name':'tax_0',
            'amount_type':'percent',
            'amount':0,
            'type_tax_use':'sale',
        })

        cls.acc_bank=cls.env['res.partner.bank'].create({
            'acc_number':'BE15001559627231',
            'partner_id':cls.company_data['company'].partner_id.id,
        })

        cls.invoice=cls.env['account.move'].create({
            'move_type':'out_invoice',
            'journal_id':cls.journal.id,
            'partner_id':cls.partner_1.id,
            'partner_bank_id':cls.acc_bank,
            'invoice_date':'2017-01-01',
            'date':'2017-01-01',
            'currency_id':cls.currency_data['currency'].id,
            'invoice_line_ids':[(0,0,{
                'product_id':cls.product_a.id,
                'product_uom_id':cls.env.ref('uom.product_uom_dozen').id,
                'price_unit':275.0,
                'quantity':5,
                'discount':20.0,
                'tax_ids':[(6,0,cls.tax_21.ids)],
            })],
        })

    @classmethod
    defsetup_company_data(cls,company_name,chart_template):
        #OVERRIDE
        #toforcethecompanytobebelgian
        res=super().setup_company_data(
            company_name,
            chart_template=chart_template,
            country_id=cls.env.ref("base.be").id,
            vat="BE0246697724")
        returnres

    ####################################################
    #Testexport-import
    ####################################################

    deftest_export_import_invoice(self):
        invoice=self._generate_move(
            self.partner_1,
            self.partner_2,
            move_type='out_invoice',
            invoice_line_ids=[
                {
                    'product_id':self.product_a.id,
                    'quantity':2.0,
                    'product_uom_id':self.env.ref('uom.product_uom_dozen').id,
                    'price_unit':990.0,
                    'discount':10.0,
                    'tax_ids':[(6,0,self.tax_21.ids)],
                },
                {
                    'product_id':self.product_b.id,
                    'quantity':10.0,
                    'product_uom_id':self.env.ref('uom.product_uom_unit').id,
                    'price_unit':100.0,
                    'tax_ids':[(6,0,self.tax_12.ids)],
                },
                {
                    'product_id':self.product_b.id,
                    'quantity':-1.0,
                    'product_uom_id':self.env.ref('uom.product_uom_unit').id,
                    'price_unit':100.0,
                    'tax_ids':[(6,0,self.tax_12.ids)],
                },
            ],
        )
        xml_etree,xml_filename=self._assert_invoice_attachment(
            invoice,
            xpaths='''
                <xpathexpr="./*[local-name()='ID']"position="replace">
                    <ID>___ignore___</ID>
                </xpath>
                <xpathexpr=".//*[local-name()='InvoiceLine'][1]/*[local-name()='ID']"position="replace">
                    <ID>___ignore___</ID>
                </xpath>
                <xpathexpr=".//*[local-name()='InvoiceLine'][2]/*[local-name()='ID']"position="replace">
                    <ID>___ignore___</ID>
                </xpath>
                <xpathexpr=".//*[local-name()='InvoiceLine'][3]/*[local-name()='ID']"position="replace">
                    <ID>___ignore___</ID>
                </xpath>
                <xpathexpr=".//*[local-name()='PaymentMeans']/*[local-name()='PaymentID']"position="replace">
                    <PaymentID>___ignore___</PaymentID>
                </xpath>
            ''',
            expected_file='from_flectra/bis3_out_invoice.xml',
        )
        self.assertEqual(xml_filename[-12:],"ubl_bis3.xml") #ensurewetesttherightformat!
        self._assert_imported_invoice_from_etree(invoice,xml_etree,xml_filename)

    deftest_export_import_refund(self):
        refund=self._generate_move(
            self.partner_1,
            self.partner_2,
            move_type='out_refund',
            invoice_line_ids=[
                {
                    'product_id':self.product_a.id,
                    'quantity':2.0,
                    'product_uom_id':self.env.ref('uom.product_uom_dozen').id,
                    'price_unit':990.0,
                    'discount':10.0,
                    'tax_ids':[(6,0,self.tax_21.ids)],
                },
                {
                    'product_id':self.product_b.id,
                    'quantity':10.0,
                    'product_uom_id':self.env.ref('uom.product_uom_unit').id,
                    'price_unit':100.0,
                    'tax_ids':[(6,0,self.tax_12.ids)],
                },
                {
                    'product_id':self.product_b.id,
                    'quantity':-1.0,
                    'product_uom_id':self.env.ref('uom.product_uom_unit').id,
                    'price_unit':100.0,
                    'tax_ids':[(6,0,self.tax_12.ids)],
                },
            ],
        )
        xml_etree,xml_filename=self._assert_invoice_attachment(
            refund,
            xpaths='''
                <xpathexpr="./*[local-name()='ID']"position="replace">
                    <ID>___ignore___</ID>
                </xpath>
                <xpathexpr="./*[local-name()='PaymentMeans']/*[local-name()='PaymentID']"position="replace">
                    <PaymentID>___ignore___</PaymentID>
                </xpath>
                <xpathexpr=".//*[local-name()='CreditNoteLine'][1]/*[local-name()='ID']"position="replace">
                    <ID>___ignore___</ID>
                </xpath>
                <xpathexpr=".//*[local-name()='CreditNoteLine'][2]/*[local-name()='ID']"position="replace">
                    <ID>___ignore___</ID>
                </xpath>
                <xpathexpr=".//*[local-name()='CreditNoteLine'][3]/*[local-name()='ID']"position="replace">
                    <ID>___ignore___</ID>
                </xpath>
            ''',
            expected_file='from_flectra/bis3_out_refund.xml',
        )
        self.assertEqual(xml_filename[-12:],"ubl_bis3.xml")
        self._assert_imported_invoice_from_etree(refund,xml_etree,xml_filename)

    deftest_encoding_in_attachment_ubl(self):
        self._test_encoding_in_attachment('ubl_bis3','INV_2017_01_0002_ubl_bis3.xml')

    deftest_sending_to_public_admin(self):
        """ApublicadministrationhasnoVAT,buthasanarbitrarynumber(see:
        https://pch.gouvernement.lu/fr/peppol.html).WhenapartnerhasnoVAT,thenodePartyTaxSchemeshould
        notappear.
        NB:The`EndpointID`nodeshouldbefilledwiththisarbitrarynumber,thatiswhy`l10n_lu_peppol_id`
        modulewascreated.Howeverwecannotuseitherebecauseitwouldrequireaddingittothedependenciesof
        `l10n_account_edi_ubl_cii_tests`instable.
        """
        self.partner_2.vat=None
        invoice=self._generate_move(
            self.partner_1,
            self.partner_2,
            move_type='out_invoice',
            invoice_line_ids=[
                {
                    'product_id':self.product_a.id,
                    'quantity':2,
                    'price_unit':100,
                    'tax_ids':[(6,0,self.tax_21.ids)],
                }
            ],
        )
        self._assert_invoice_attachment(
            invoice,
            xpaths='''
                <xpathexpr="./*[local-name()='PaymentMeans']/*[local-name()='PaymentID']"position="replace">
                    <PaymentID>___ignore___</PaymentID>
                </xpath>
                <xpathexpr=".//*[local-name()='InvoiceLine'][1]/*[local-name()='ID']"position="replace">
                    <ID>___ignore___</ID>
                </xpath>
            ''',
            expected_file='from_flectra/bis3_out_invoice_public_admin.xml',
        )

    deftest_rounding_price_unit(self):
        """OpenPeppolstatesthat:
        *Alldocumentlevelamountsshallberoundedtotwodecimalsforaccounting
        *Invoicelinenetamountshallberoundedtotwodecimals
        See:https://docs.peppol.eu/poacc/billing/3.0/bis/#_rounding
        Donotroundtheunitprices.Itallowstoobtainthecorrectlineamountswhenpriceshavemorethan2
        digits.
        """
        #Settheallowednumberofdigitsfortheprice_unit
        decimal_precision=self.env['decimal.precision'].search([('name','=','ProductPrice')],limit=1)
        self.assertTrue(bool(decimal_precision),"ThedecimalprecisionforProductPriceisrequiredforthistest")
        decimal_precision.digits=4

        invoice=self._generate_move(
            self.partner_1,
            self.partner_2,
            move_type='out_invoice',
            invoice_line_ids=[
                {
                    'product_id':self.product_a.id,
                    'quantity':10000,
                    'price_unit':0.4567,
                    'tax_ids':[(6,0,self.tax_21.ids)],
                }
            ],
        )
        self._assert_invoice_attachment(invoice,None,'from_flectra/bis3_out_invoice_rounding.xml')

    deftest_export_with_fixed_taxes_case1(self):
        #CASE1:simpleinvoicewitharecupeltax
        invoice=self._generate_move(
            self.partner_1,
            self.partner_2,
            move_type='out_invoice',
            invoice_line_ids=[
                {
                    'product_id':self.product_a.id,
                    'quantity':1,
                    'price_unit':99,
                    'tax_ids':[(6,0,[self.recupel.id,self.tax_21.id])],
                }
            ],
        )
        self.assertEqual(invoice.amount_total,121)
        self._assert_invoice_attachment(invoice,None,'from_flectra/bis3_ecotaxes_case1.xml')

    deftest_export_with_fixed_taxes_case2(self):
        #CASE2:Samebutwithseveralecotaxes
        invoice=self._generate_move(
            self.partner_1,
            self.partner_2,
            move_type='out_invoice',
            invoice_line_ids=[
                {
                    'product_id':self.product_a.id,
                    'quantity':1,
                    'price_unit':98,
                    'tax_ids':[(6,0,[self.recupel.id,self.auvibel.id,self.tax_21.id])],
                }
            ],
        )
        self.assertEqual(invoice.amount_total,121)
        self._assert_invoice_attachment(invoice,None,'from_flectra/bis3_ecotaxes_case2.xml')

    deftest_export_with_fixed_taxes_case3(self):
        #CASE3:sameasCase1buttaxesarePriceIncluded
        self.recupel.price_include=True
        self.tax_21.price_include=True

        #PriceTTC=121=(99+1)*1.21
        invoice=self._generate_move(
            self.partner_1,
            self.partner_2,
            move_type='out_invoice',
            invoice_line_ids=[
                {
                    'product_id':self.product_a.id,
                    'quantity':1,
                    'price_unit':121,
                    'tax_ids':[(6,0,[self.recupel.id,self.tax_21.id])],
                }
            ],
        )
        self.assertEqual(invoice.amount_total,121)
        self._assert_invoice_attachment(invoice,None,'from_flectra/bis3_ecotaxes_case3.xml')

    deftest_export_tax_exempt(self):
        invoice=self._generate_move(
            self.partner_1,
            self.partner_2,
            move_type='out_invoice',
            invoice_line_ids=[
                {
                    'product_id':self.product_a.id,
                    'price_unit':990.0,
                    'tax_ids':[(6,0,self.tax_0.ids)],
                },
            ],
        )
        self._assert_invoice_attachment(invoice,None,'from_flectra/bis3_out_invoice_tax_exempt.xml')

    ####################################################
    #Testimport
    ####################################################

    deftest_import_partner_ubl(self):
        """
        Givenaninvoicewherepartner_1isthevendorandpartner_2isthecustomerwithanEDIattachment.
        *Uploadingtheattachmentasaninvoiceshouldcreateaninvoicewiththebuyer=partner_2.
        *Uploadingtheattachmentasavendorbillshouldcreateabillwiththevendor=partner_1.
        """
        invoice=self._generate_move(
            seller=self.partner_1,
            buyer=self.partner_2,
            move_type='out_invoice',
            invoice_line_ids=[{'product_id':self.product_a.id}],
        )
        new_invoice=self._import_invoice_attachment(invoice,'ubl_bis3',self.company_data['default_journal_sale'])
        self.assertEqual(self.partner_2,new_invoice.partner_id)

        new_invoice=self._import_invoice_attachment(invoice,'ubl_bis3',self.company_data['default_journal_purchase'])
        self.assertEqual(self.partner_1,new_invoice.partner_id)

    deftest_import_and_create_partner_ubl(self):
        """TestswhetherthepartneriscreatedatimportifnomatchisfoundwhendecodingtheEDIattachment
        """
        partner_vals={
            'name':"Buyer",
            'mail':"buyer@yahoo.com",
            'phone':"1111",
            'vat':"2222",
        }
        #assertthereisnomatchingpartner
        partner_match=self.env['account.edi.format']._retrieve_partner(**partner_vals)
        self.assertFalse(partner_match)

        #Importattachmentasaninvoice
        invoice=self.env['account.move'].create({
            'move_type':'out_invoice',
            'journal_id':self.company_data['default_journal_sale'].id,
        })
        self.update_invoice_from_file(
            module_name='l10n_account_edi_ubl_cii_tests',
            subfolder='tests/test_files/from_flectra',
            filename='ubl_test_import_partner.xml',
            invoice=invoice)

        #assertanewpartnerhasbeencreated
        partner_vals['email']=partner_vals.pop('mail')
        self.assertRecordValues(invoice.partner_id,[partner_vals])

    deftest_import_export_invoice_xml(self):
        """
        Testwhethertheelementsonlyspecifictoubl_bearecorrectlyexported
        andimportedinthexmlfile
        """
        self.invoice.action_post()
        attachment=self.invoice._get_edi_attachment(self.edi_format)
        self.assertTrue(attachment)
        xml_content=base64.b64decode(attachment.with_context(bin_size=False).datas)
        xml_etree=self.get_xml_tree_from_string(xml_content)

        self.assertEqual(
            xml_etree.find('{*}ProfileID').text,
            'urn:fdc:peppol.eu:2017:poacc:billing:01:1.0'
        )
        self.assertEqual(
            xml_etree.find('{*}CustomizationID').text,
            'urn:cen.eu:en16931:2017#compliant#urn:fdc:peppol.eu:2017:poacc:billing:3.0'
        )
        #Export:inbis3,underCountry,theNameelementshouldnotappear,butIdentificationCodestillshould
        self.assertIsNotNone(xml_etree.find('.//{*}Country/{*}IdentificationCode'))
        self.assertIsNone(xml_etree.find('.//{*}Country/{*}Name'))

        #Import:
        created_bill=self.env['account.move'].create({'move_type':'in_invoice'})
        created_bill.message_post(attachment_ids=[attachment.id])
        self.assertTrue(created_bill)

    deftest_import_invoice_xml(self):
        kwargs={
            'subfolder':'tests/test_files/from_flectra',
            'amount_total':3164.22,
            'amount_tax':482.22,
            'list_line_subtotals':[1782,1000,-100],
            'list_line_price_unit':[990,100,100],
            'list_line_discount':[10,0,0],
            'currency_id':self.currency_data['currency'].id,
        }
        self._assert_imported_invoice_from_file(filename='bis3_out_invoice.xml',**kwargs)
        #sameasthefileabove,butthe<cac:Price>aremissingintheinvoicelines
        self._assert_imported_invoice_from_file(filename='bis3_out_invoice_no_prices.xml',**kwargs)

    deftest_import_invoice_xml_open_peppol_examples(self):
        #Source:https://github.com/OpenPEPPOL/peppol-bis-invoice-3/tree/master/rules/examples
        subfolder='tests/test_files/from_peppol-bis-invoice-3_doc'
        #source:Allowance-example.xml
        self._assert_imported_invoice_from_file(subfolder=subfolder,filename='bis3_allowance.xml',amount_total=7125,
            amount_tax=1225,list_line_subtotals=[200,-200,4000,1000,900])
        #source:base-creditnote-correction.xml
        self._assert_imported_invoice_from_file(subfolder=subfolder,filename='bis3_credit_note.xml',
            amount_total=1656.25,amount_tax=331.25,list_line_subtotals=[25,2800,-1500],move_type='in_refund')
        #source:base-negative-inv-correction.xml
        self._assert_imported_invoice_from_file(subfolder=subfolder,filename='bis3_invoice_negative_amounts.xml',
            amount_total=1656.25,amount_tax=331.25,list_line_subtotals=[25,2800,-1500],move_type='in_refund')
        #source:vat-category-E.xml
        self._assert_imported_invoice_from_file(subfolder=subfolder,filename='bis3_tax_exempt_gbp.xml',
            amount_total=1200,amount_tax=0,list_line_subtotals=[1200],currency_id=self.env.ref('base.GBP').id)

    deftest_import_existing_invoice_flip_move_type(self):
        """Testswhetherthemove_typeofanexistinginvoicecanbeflippedwhenimportinganattachment
        Forinstance:withanemailaliastocreateaccount_move,firstthemoveiscreated(usingalias_defaults,
        whichcontainsmove_type='out_invoice')thentheattachmentisdecoded,ifitrepresentsacreditnote,
        themovetypeneedstobechangedto'out_refund'
        """
        invoice=self.env['account.move'].create({'move_type':'out_invoice'})
        self.update_invoice_from_file(
            'l10n_account_edi_ubl_cii_tests',
            'tests/test_files/from_flectra',
            'bis3_out_refund.xml',
            invoice,
        )
        self.assertRecordValues(invoice,[{'move_type':'out_refund','amount_total':3164.22}])

    deftest_import_fixed_taxes(self):
        """Testswhetherwecorrectlydecodethexmlattachmentscreatedusingfixedtaxes.
        Seethetestsabovetocreatethesexmlattachments('test_export_with_fixed_taxes_case_[X]').
        NB:usemove_type='out_invoice's.t.wecanretrievethetaxesusedtocreatetheinvoices.
        """
        subfolder="tests/test_files/from_flectra"
        #Thetax21%froml10n_beisretrievedsinceit'saduplicateofself.tax_21
        tax_21=self.env.ref(f'l10n_be.{self.env.company.id}_attn_VAT-OUT-21-L')
        self._assert_imported_invoice_from_file(
            subfolder=subfolder,filename='bis3_ecotaxes_case1.xml',amount_total=121,amount_tax=22,
            list_line_subtotals=[99],currency_id=self.currency_data['currency'].id,list_line_price_unit=[99],
            list_line_discount=[0],list_line_taxes=[tax_21+self.recupel],move_type='out_invoice',
        )
        self._assert_imported_invoice_from_file(
            subfolder=subfolder,filename='bis3_ecotaxes_case2.xml',amount_total=121,amount_tax=23,
            list_line_subtotals=[98],currency_id=self.currency_data['currency'].id,list_line_price_unit=[98],
            list_line_discount=[0],list_line_taxes=[tax_21+self.recupel+self.auvibel],move_type='out_invoice',
        )
        self._assert_imported_invoice_from_file(
            subfolder=subfolder,filename='bis3_ecotaxes_case3.xml',amount_total=121,amount_tax=22,
            list_line_subtotals=[99],currency_id=self.currency_data['currency'].id,list_line_price_unit=[99],
            list_line_discount=[0],list_line_taxes=[tax_21+self.recupel],move_type='out_invoice',
        )
