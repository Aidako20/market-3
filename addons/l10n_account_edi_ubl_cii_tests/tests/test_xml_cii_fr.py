#-*-coding:utf-8-*-

fromflectra.addons.l10n_account_edi_ubl_cii_tests.tests.commonimportTestUBLCommon
fromflectra.testsimporttagged

@tagged('post_install_l10n','post_install','-at_install')
classTestCIIFR(TestUBLCommon):

    @classmethod
    defsetUpClass(cls,
                   chart_template_ref="l10n_fr.l10n_fr_pcg_chart_template",
                   edi_format_ref="account_edi_facturx.edi_facturx_1_0_05",
                   ):
        """
            thistestwillfailifaccount_edi_facturxisnotinstalled.Inordernottoduplicatethe
            account.edi.formatalreadyinstalled,weusetheexistingones(comprising
            account_edi_facturx.facturx_1_0_05).
        """
        super().setUpClass(chart_template_ref=chart_template_ref,edi_format_ref=edi_format_ref)

        cls.partner_1=cls.env['res.partner'].create({
            'name':"partner_1",
            'street':"RueJeanJaurès,42",
            'zip':"75000",
            'city':"Paris",
            'vat':'FR05677404089',
            'country_id':cls.env.ref('base.fr').id,
            'bank_ids':[(0,0,{'acc_number':'FR15001559627230'})],
            'phone':'+1(650)555-0111',
            'email':"partner1@yourcompany.com",
            'ref':'ref_partner_1',
        })

        cls.partner_2=cls.env['res.partner'].create({
            'name':"partner_2",
            'street':"RueCharlesdeGaulle",
            'zip':"52330",
            'city':"Colombey-les-Deux-Églises",
            'vat':'FR35562153452',
            'country_id':cls.env.ref('base.fr').id,
            'bank_ids':[(0,0,{'acc_number':'FR90735788866632'})],
            'ref':'ref_partner_2',
        })

        cls.tax_21=cls.env['account.tax'].create({
            'name':'tax_21',
            'amount_type':'percent',
            'amount':21,
            'type_tax_use':'sale',
            'sequence':10,
        })

        cls.tax_12=cls.env['account.tax'].create({
            'name':'tax_12',
            'amount_type':'percent',
            'amount':12,
            'type_tax_use':'sale',
        })

        cls.tax_21_purchase=cls.env['account.tax'].create({
            'name':'tax_21',
            'amount_type':'percent',
            'amount':21,
            'type_tax_use':'purchase',
        })

        cls.tax_12_purchase=cls.env['account.tax'].create({
            'name':'tax_12',
            'amount_type':'percent',
            'amount':12,
            'type_tax_use':'purchase',
        })

        cls.tax_5_purchase=cls.env['account.tax'].create({
            'name':'tax_5',
            'amount_type':'percent',
            'amount':5,
            'type_tax_use':'purchase',
        })

        cls.tax_5=cls.env['account.tax'].create({
            'name':'tax_5',
            'amount_type':'percent',
            'amount':5,
            'type_tax_use':'sale',
        })

        cls.tax_5_incl=cls.env['account.tax'].create({
            'name':'tax_5_incl',
            'amount_type':'percent',
            'amount':5,
            'type_tax_use':'sale',
            'price_include':True,
        })

    @classmethod
    defsetup_company_data(cls,company_name,chart_template):
        #OVERRIDE
        #toforcethecompanytobefrench
        res=super().setup_company_data(
            company_name,
            chart_template=chart_template,
            country_id=cls.env.ref("base.fr").id,
            phone='+1(650)555-0111', #[BR-DE-6]"Sellercontacttelephonenumber"(BT-42)isrequired
            email="info@yourcompany.com", #[BR-DE-7]Theelement"Sellercontactemailaddress"(BT-43)isrequired
        )
        returnres

    ####################################################
    #Testexport-import
    ####################################################

    deftest_export_pdf(self):
        acc_bank=self.env['res.partner.bank'].create({
            'acc_number':'FR15001559627231',
            'partner_id':self.company_data['company'].partner_id.id,
        })
        invoice=self.env['account.move'].create({
            'move_type':'out_invoice',
            'journal_id':self.journal.id,
            'partner_id':self.partner_1.id,
            'partner_bank_id':acc_bank,
            'invoice_date':'2017-01-01',
            'date':'2017-01-01',
            'currency_id':self.currency_data['currency'].id,
            'invoice_line_ids':[(0,0,{
                'product_id':self.product_a.id,
                'product_uom_id':self.env.ref('uom.product_uom_dozen').id,
                'price_unit':275.0,
                'quantity':5,
                'discount':20.0,
                'tax_ids':[(6,0,self.tax_21.ids)],
            })],
        })
        invoice.action_post()
        pdf_attachment=invoice._get_edi_attachment(self.edi_format)
        self.assertEqual(pdf_attachment['name'],'factur-x.xml')

    deftest_export_import_invoice(self):
        invoice=self._generate_move(
            self.partner_1,
            self.partner_2,
            move_type='out_invoice',
            invoice_line_ids=[
                {
                    'product_id':self.product_a.id,
                    'quantity':2.0,
                    'product_uom_id':self.env.ref('uom.product_uom_dozen').id,
                    'price_unit':990.0,
                    'discount':10.0,
                    'tax_ids':[(6,0,self.tax_21.ids)],
                },
                {
                    'product_id':self.product_b.id,
                    'quantity':10.0,
                    'product_uom_id':self.env.ref('uom.product_uom_unit').id,
                    'price_unit':100.0,
                    'tax_ids':[(6,0,self.tax_12.ids)],
                },
                {
                    'product_id':self.product_b.id,
                    'quantity':-1.0,
                    'product_uom_id':self.env.ref('uom.product_uom_unit').id,
                    'price_unit':100.0,
                    'tax_ids':[(6,0,self.tax_12.ids)],
                },
            ],
        )
        xml_etree,xml_filename=self._assert_invoice_attachment(
            invoice,
            xpaths='''
                <xpathexpr="./*[local-name()='ExchangedDocument']/*[local-name()='ID']"position="replace">
                        <ID>___ignore___</ID>
                </xpath>
                <xpathexpr=".//*[local-name()='IssuerAssignedID']"position="replace">
                        <IssuerAssignedID>___ignore___</IssuerAssignedID>
                </xpath>
                <xpathexpr=".//*[local-name()='PaymentReference']"position="replace">
                        <PaymentReference>___ignore___</PaymentReference>
                </xpath>
            ''',
            expected_file='from_flectra/facturx_out_invoice.xml',
        )
        self.assertEqual(xml_filename,"factur-x.xml")
        self._assert_imported_invoice_from_etree(invoice,xml_etree,xml_filename)

    deftest_export_import_refund(self):
        refund=self._generate_move(
            self.partner_1,
            self.partner_2,
            move_type='out_refund',
            invoice_line_ids=[
                {
                    'product_id':self.product_a.id,
                    'quantity':2.0,
                    'product_uom_id':self.env.ref('uom.product_uom_dozen').id,
                    'price_unit':990.0,
                    'discount':10.0,
                    'tax_ids':[(6,0,self.tax_21.ids)],
                },
                {
                    'product_id':self.product_b.id,
                    'quantity':10.0,
                    'product_uom_id':self.env.ref('uom.product_uom_unit').id,
                    'price_unit':100.0,
                    'tax_ids':[(6,0,self.tax_12.ids)],
                },
                {
                    'product_id':self.product_b.id,
                    'quantity':-1.0,
                    'product_uom_id':self.env.ref('uom.product_uom_unit').id,
                    'price_unit':100.0,
                    'tax_ids':[(6,0,self.tax_12.ids)],
                },
            ],
        )
        xml_etree,xml_filename=self._assert_invoice_attachment(
            refund,
            xpaths='''
                <xpathexpr="./*[local-name()='ExchangedDocument']/*[local-name()='ID']"position="replace">
                        <ID>___ignore___</ID>
                </xpath>
                <xpathexpr=".//*[local-name()='IssuerAssignedID']"position="replace">
                        <IssuerAssignedID>___ignore___</IssuerAssignedID>
                </xpath>
            ''',
            expected_file='from_flectra/facturx_out_refund.xml'
        )
        self.assertEqual(xml_filename,"factur-x.xml")
        self._assert_imported_invoice_from_etree(refund,xml_etree,xml_filename)

    deftest_export_tax_included(self):
        """
        Testswhetherthetaxincludedprice_unitsarecorrectlyconvertedtotaxexcluded
        amountsintheexportedxml
        """
        invoice=self._generate_move(
            self.partner_1,
            self.partner_2,
            move_type='out_invoice',
            invoice_line_ids=[
                {
                    'product_id':self.product_a.id,
                    'quantity':1,
                    'price_unit':100,
                    'tax_ids':[(6,0,self.tax_5_incl.ids)],
                },
                {
                    'product_id':self.product_a.id,
                    'quantity':1,
                    'price_unit':100,
                    'tax_ids':[(6,0,self.tax_5.ids)],
                },
                {
                    'product_id':self.product_a.id,
                    'quantity':1,
                    'price_unit':200,
                    'discount':10,
                    'tax_ids':[(6,0,self.tax_5_incl.ids)],
                },
                {
                    'product_id':self.product_a.id,
                    'quantity':1,
                    'price_unit':200,
                    'discount':10,
                    'tax_ids':[(6,0,self.tax_5.ids)],
                },
            ],
        )
        self._assert_invoice_attachment(
            invoice,
            xpaths='''
                <xpathexpr="./*[local-name()='ExchangedDocument']/*[local-name()='ID']"position="replace">
                        <ID>___ignore___</ID>
                </xpath>
                <xpathexpr=".//*[local-name()='IssuerAssignedID']"position="replace">
                        <IssuerAssignedID>___ignore___</IssuerAssignedID>
                </xpath>
            ''',
            expected_file='from_flectra/facturx_out_invoice_tax_incl.xml'
        )

    deftest_encoding_in_attachment_facturx(self):
        self._test_encoding_in_attachment('facturx_1_0_05','factur-x.xml')

    deftest_export_with_fixed_taxes_case1(self):
        #CASE1:simpleinvoicewitharecupeltax
        invoice=self._generate_move(
            self.partner_1,
            self.partner_2,
            move_type='out_invoice',
            invoice_line_ids=[
                {
                    'product_id':self.product_a.id,
                    'quantity':1,
                    'price_unit':99,
                    'tax_ids':[(6,0,[self.recupel.id,self.tax_21.id])],
                }
            ],
        )
        self.assertEqual(invoice.amount_total,121)
        self._assert_invoice_attachment(invoice,None,'from_flectra/facturx_ecotaxes_case1.xml')

    deftest_export_with_fixed_taxes_case2(self):
        #CASE2:Samebutwithseveralecotaxes
        invoice=self._generate_move(
            self.partner_1,
            self.partner_2,
            move_type='out_invoice',
            invoice_line_ids=[
                {
                    'product_id':self.product_a.id,
                    'quantity':1,
                    'price_unit':98,
                    'tax_ids':[(6,0,[self.recupel.id,self.auvibel.id,self.tax_21.id])],
                }
            ],
        )
        self.assertEqual(invoice.amount_total,121)
        self._assert_invoice_attachment(invoice,None,'from_flectra/facturx_ecotaxes_case2.xml')

    deftest_export_with_fixed_taxes_case3(self):
        #CASE3:sameasCase1buttaxesarePriceIncluded
        self.recupel.price_include=True
        self.tax_21.price_include=True

        #PriceTTC=121=(99+1)*1.21
        invoice=self._generate_move(
            self.partner_1,
            self.partner_2,
            move_type='out_invoice',
            invoice_line_ids=[
                {
                    'product_id':self.product_a.id,
                    'quantity':1,
                    'price_unit':121,
                    'tax_ids':[(6,0,[self.recupel.id,self.tax_21.id])],
                }
            ],
        )
        self.assertEqual(invoice.amount_total,121)
        self._assert_invoice_attachment(invoice,None,'from_flectra/facturx_ecotaxes_case3.xml')

    ####################################################
    #Testimport
    ####################################################

    deftest_import_partner_facturx(self):
        """
        Givenaninvoicewherepartner_1isthevendorandpartner_2isthecustomerwithanEDIattachment.
        *Uploadingtheattachmentasaninvoiceshouldcreateaninvoicewiththebuyer=partner_2.
        *Uploadingtheattachmentasavendorbillshouldcreateabillwiththevendor=partner_1.
        """
        invoice=self._generate_move(
            seller=self.partner_1,
            buyer=self.partner_2,
            move_type='out_invoice',
            invoice_line_ids=[{'product_id':self.product_a.id}],
        )
        new_invoice=self._import_invoice_attachment(invoice,'facturx_1_0_05',self.company_data['default_journal_sale'])
        self.assertEqual(self.partner_2,new_invoice.partner_id)

        new_invoice=self._import_invoice_attachment(invoice,'facturx_1_0_05',self.company_data['default_journal_purchase'])
        self.assertEqual(self.partner_1,new_invoice.partner_id)

    deftest_import_and_create_partner_facturx(self):
        """TestswhetherthepartneriscreatedatimportifnomatchisfoundwhendecodingtheEDIattachment
        """
        partner_vals={
            'name':"Buyer",
            'mail':"buyer@yahoo.com",
            'phone':"1111",
            'vat':"2222",
        }
        #assertthereisnomatchingpartner
        partner_match=self.env['account.edi.format']._retrieve_partner(**partner_vals)
        self.assertFalse(partner_match)

        #Importattachmentasaninvoice
        invoice=self.env['account.move'].create({
            'move_type':'out_invoice',
            'journal_id':self.company_data['default_journal_sale'].id,
        })
        self.update_invoice_from_file(
            module_name='l10n_account_edi_ubl_cii_tests',
            subfolder='tests/test_files/from_flectra',
            filename='facturx_test_import_partner.xml',
            invoice=invoice)

        #assertanewpartnerhasbeencreated
        partner_vals['email']=partner_vals.pop('mail')
        self.assertRecordValues(invoice.partner_id,[partner_vals])

    deftest_import_tax_included(self):
        """
        Testswhetherthetaxincluded/taxexcludedarecorrectlydecodedwhen
        importingadocument.Theimportedxmlrepresentsthefollowinginvoice:

        Description        Quantity   UnitPrice   Disc(%)  Taxes           Amount
        --------------------------------------------------------------------------------
        ProductA                 1          100         0   5%(incl)        95.24
        ProductA                 1          100         0   5%(notincl)      100
        ProductA                 2          200        10   5%(incl)       171.43
        ProductA                 2          200        10   5%(notincl)      180
        -----------------------
        UntaxedAmount:546.67
        Taxes:27.334
        -----------------------
        Total:574.004
        """
        self._assert_imported_invoice_from_file(
            subfolder='tests/test_files/from_flectra',
            filename='facturx_out_invoice_tax_incl.xml',
            amount_total=574.004,
            amount_tax=27.334,
            list_line_subtotals=[95.24,100,171.43,180],
            #/!\Theprice_unitaredifferentfortaxeswithprice_include,becauseallamountsinFactur-Xshouldbe
            #taxexcluded.Atimport,thetaxincludedamountsarethusconvertedintotaxexcludedones.
            #Yet,thelinesubtotalsandtotalwillbethesame(ifanequivalenttaxexistwithprice_include=False)
            list_line_price_unit=[95.24,100,190.48,200],
            list_line_discount=[0,0,10,10],
            #Again,alltaxesintheimportedinvoiceareprice_include=False
            list_line_taxes=[self.tax_5_purchase]*4,
            move_type='in_invoice',
            currency_id=self.env['res.currency'].search([('name','=','USD')],limit=1).id,
        )

    deftest_import_fnfe_examples(self):
        #Source:officialdocumentationoftheFNFE(subdirectory:"5.FACTUR-X1.0.06-Examples")
        subfolder='tests/test_files/from_factur-x_doc'
        #the2followingfileshavethesamepdfbutoneislabelledasaninvoiceandtheotherasarefund
        #source:Avoir_FR_type380_EN16931.pdf
        self._assert_imported_invoice_from_file(subfolder=subfolder,filename='facturx_credit_note_type380.xml',
            amount_total=233.47,amount_tax=14.99,list_line_subtotals=[20.48,198],move_type='in_refund')
        #source:Avoir_FR_type381_EN16931.pdf
        self._assert_imported_invoice_from_file(subfolder=subfolder,filename='facturx_credit_note_type381.xml',
            amount_total=233.47,amount_tax=14.99,list_line_subtotals=[20.48,198],move_type='in_refund')
        #source:Facture_F20220024_EN_16931_basis_quantity,basisquantity!=1foroneofthelines
        self._assert_imported_invoice_from_file(subfolder=subfolder,filename='facturx_invoice_basis_quantity.xml',
            amount_total=108,amount_tax=8,list_line_subtotals=[-5,10,60,28,7])
        #source:Facture_F20220029_EN_16931_K.pdf,creditnotelabelledasaninvoicewithnegativeamounts
        self._assert_imported_invoice_from_file(subfolder=subfolder,filename='facturx_invoice_negative_amounts.xml',
            amount_total=100,amount_tax=0,list_line_subtotals=[-5,10,60,30,5],move_type='in_refund')

    deftest_import_fixed_taxes(self):
        """Testswhetherwecorrectlydecodethexmlattachmentscreatedusingfixedtaxes.
        Seethetestsabovetocreatethesexmlattachments('test_export_with_fixed_taxes_case_[X]').
        NB:usemove_type='out_invoice's.t.wecanretrievethetaxesusedtocreatetheinvoices.
        """
        subfolder="tests/test_files/from_flectra"
        self._assert_imported_invoice_from_file(
            subfolder=subfolder,filename='facturx_ecotaxes_case1.xml',amount_total=121,amount_tax=22,
            list_line_subtotals=[99],currency_id=self.currency_data['currency'].id,list_line_price_unit=[99],
            list_line_discount=[0],list_line_taxes=[self.tax_21+self.recupel],move_type='out_invoice',
        )
        self._assert_imported_invoice_from_file(
            subfolder=subfolder,filename='facturx_ecotaxes_case2.xml',amount_total=121,amount_tax=23,
            list_line_subtotals=[98],currency_id=self.currency_data['currency'].id,list_line_price_unit=[98],
            list_line_discount=[0],list_line_taxes=[self.tax_21+self.recupel+self.auvibel],move_type='out_invoice',
        )
        self._assert_imported_invoice_from_file(
            subfolder=subfolder,filename='facturx_ecotaxes_case3.xml',amount_total=121,amount_tax=22,
            list_line_subtotals=[99],currency_id=self.currency_data['currency'].id,list_line_price_unit=[99],
            list_line_discount=[0],list_line_taxes=[self.tax_21+self.recupel],move_type='out_invoice',
        )
