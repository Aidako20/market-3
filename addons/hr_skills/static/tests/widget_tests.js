flectra.define('hr_skills.field_one_to_many_group_tests',function(require){
    "usestrict";

    varFormView=require('web.FormView');
    vartestUtils=require('web.test_utils');

    varcreateView=testUtils.createView;

    QUnit.module('skills_widgets',{
        beforeEach:function(){
            this.data={
                partner:{
                    fields:{
                        display_name:{string:"Displayedname",type:"char"},
                        line_ids:{string:"one2manyfield",type:"one2many",relation:'line',relation_field:'trululu'},
                        skill_ids:{string:"one2manyfield",type:"one2many",relation:'partner_skill',relation_field:'partner_id'},
                    },
                    records:[{
                        id:1,
                        display_name:"firstrecord",
                        line_ids:[37,38,39],
                        skill_ids:[75,76,77]
                    }],
                    onchanges:{},
                },
                partner_skill:{
                    fields:{
                        skill_id:{string:"Name",type:"many2one",relation:'skill'},
                        skill_type_id:{string:"Type",type:"many2one",relation:'skill_type'},
                        skill_level_id:{string:"Level",type:"many2one",relation:'skill_level'},
                        level_progress:{string:"Progress",type:"int"},
                    },
                    records:[{
                        id:75,
                        skill_id:444,
                        skill_type_id:221,
                        skill_level_id:112,
                        level_progress:50,
                    },{
                        id:76,
                        skill_id:445,
                        skill_type_id:222,
                        skill_level_id: 111,
                        level_progress:50,
                    },{
                        id:77,
                        skill_id:446,
                        skill_type_id: 222,
                        skill_level_id: 111,
                        level_progress:70,
                    }],
                },
                skill:{
                    fields:{
                        name:{string:"Name",type:"char"},
                    },
                    records:[
                        {id:444,name:'Python'},
                        {id:445,name:'Piano'},
                        {id:446,name:'Flute'},
                    ]
                },
                skill_level:{
                    fields:{
                        name:{string:"Name",type:"char"},
                    },
                    records:[
                        {id:111,name:'L1'},
                        {id:112,name:'Intermediate'}
                    ]
                },
                skill_type:{
                    fields:{
                        name:{string:"Name",type:"char"},
                    },
                    records:[
                        {id:221,name:'Dev'},
                        {id:222,name:'Music'},
                    ]
                },
                line:{
                    fields:{
                        name:{string:"Name",type:"char"},
                        line_type_id:{string:"Type",relation:'line_type',type:"many2one"},
                        description:{string:"Description",type:"text"},
                        date_start:{string:"Datestart",type:"date"},
                        date_end:{string:"Dateend",type:"date"},
                        trululu:{string:"Trululu",type:"many2one",relation:'partner'},
                        display_type:{string:"displaytype",type:"selection"},
                    },
                    records:[{
                        id:37,
                        name:"ULB",
                        line_type_id:50,
                        date_start:"2017-01-25",
                        date_end:"2019-01-25",
                        description:'Hello',
                        trululu:1,
                        display_type:'classic',
                    },{
                        id:38,
                        name:"UCL",
                        line_type_id:50,
                        date_start:"2013-01-25",
                        date_end:"2014-01-25",
                        description:'World',
                        trululu:1,
                        display_type:'classic',
                    },{
                        id:39,
                        name:"KUL",
                        line_type_id:51,
                        date_start:"2008-01-25",
                        description:'Hi',
                        trululu:1,
                        display_type:'classic',
                    }],
                    onchanges:{},
                },
                line_type:{
                    fields:{
                        name:{string:"Name",type:"char"},
                    },
                    records:[{
                        id:50,
                        name:'AAA',
                    },{
                        id:51,
                        name:'BBB'
                    }],
                }
            };
        }
    },function(){
        QUnit.test('resuméone2manyfieldgroupbyfieldrender',asyncfunction(assert){
            assert.expect(16);
            varform=awaitcreateView({
                View:FormView,
                model:'partner',
                data:this.data,
                arch:'<formstring="Partners">'+
                    '<fieldname="line_ids"widget="hr_resume">'+
                        '<tree>'+
                            '<fieldname="name"/>'+
                            '<fieldname="line_type_id"/>'+
                            '<fieldname="description"/>'+
                            '<fieldname="date_start"/>'+
                            '<fieldname="date_end"/>'+
                            '<fieldname="display_type"/>'+
                        '</tree>'+
                    '</field>'+
                    '</form>',
                res_id:1,
            });
            var$headers=form.$('.o_resume_group_header');
            assert.strictEqual($headers.length,2,'Thereshouldbe2headers');
            assert.strictEqual($headers.find('td:contains(AAA)').length,1,"itshouldhavelinetypeAAA");
            assert.strictEqual($headers.find('td:contains(BBB)').length,1,"itshouldhavelinetypeBBB");

            vardataRows=form.$('.o_data_row');
            assert.strictEqual(dataRows.length,3,'Thereshouldbe3datarows');

            var$row=$(dataRows[0]);
            assert.strictEqual($row.find('td:contains(01/25/2017)').length,1,"itshouldhavestartdate01/25/2017");
            assert.strictEqual($row.find('td:contains(01/25/2019)').length,1,"itshouldhaveenddate01/25/2019");
            assert.strictEqual($row.find('td:contains(ULB)').length,1,"itshouldhavelinenameULB");
            assert.strictEqual($row.find('td:contains(Hello)').length,1,"itshouldhavelinedescriptionHello");

            $row=$(dataRows[1]);
            assert.strictEqual($row.find('td:contains(01/25/2013)').length,1,"itshouldhavestartdate01/25/2013");
            assert.strictEqual($row.find('td:contains(01/25/2014)').length,1,"itshouldhaveenddate01/25/2014");
            assert.strictEqual($row.find('td:contains(UCL)').length,1,"itshouldhavelinenameUCL");
            assert.strictEqual($row.find('td:contains(World)').length,1,"itshouldhavelinedescriptionWorld");

            $row=$(dataRows[2]);
            assert.strictEqual($row.find('td:contains(01/25/2008)').length,1,"itshouldhavestartdate01/25/2008");
            assert.strictEqual($row.find('td:contains(Current)').length,1,"itshouldhaveenddateCurrent");
            assert.strictEqual($row.find('td:contains(KUL)').length,1,"itshouldhavelinenameKUL");
            assert.strictEqual($row.find('td:contains(Hi)').length,1,"itshouldhavelinedescriptionHi");

            form.destroy();
        });
        QUnit.test('resuméone2manyfieldgroupbyfieldcreate',asyncfunction(assert){
            assert.expect(5);
            varform=awaitcreateView({
                View:FormView,
                model:'partner',
                data:this.data,
                arch:'<formstring="Partners">'+
                    '<fieldname="line_ids"widget="hr_resume">'+
                        '<tree>'+
                            '<fieldname="name"/>'+
                            '<fieldname="line_type_id"/>'+
                            '<fieldname="description"/>'+
                            '<fieldname="date_start"/>'+
                            '<fieldname="date_end"/>'+
                        '</tree>'+
                    '</field>'+
                    '</form>',
                archs:{
                    'line,false,form':'<form>'+
                            '<fieldname="name"/>'+
                            '<fieldname="line_type_id"/>'+
                            '<fieldname="description"/>'+
                            '<fieldname="date_start"/>'+
                            '<fieldname="date_end"/>'+
                        '</form>',
                },
                res_id:1,
                mockRPC:function(route,args){
                    varresult=this._super.apply(this,arguments);
                    if(args.method==='write'){
                        varnew_line_data=args.args[1].line_ids[3][2];
                        assert.strictEqual(new_line_data.date_end,'2030-01-01');
                        assert.strictEqual(new_line_data.date_start,'2025-01-01');
                        assert.strictEqual(new_line_data.line_type_id,50,"itshouldhavethelinetypefromcontext");
                        assert.strictEqual(new_line_data.name,'newline');
                        assert.strictEqual(new_line_data.description,'newdescription');
                    }
                    returnresult;
                },
            });

            awaittestUtils.form.clickEdit(form);
            awaittestUtils.dom.click(form.$('.o_field_x2many_list_row_adda')[0]);

            //Filllineform(typeshouldbesetfromtheaddbuttoncontext)
            awaittestUtils.fields.editInput($('input[name="name"]'),'newline');
            awaittestUtils.fields.editInput($('textarea[name="description"]'),'newdescription');
            awaittestUtils.fields.editSelect($('input[name="date_start"]'),'2025-01-01');
            awaittestUtils.fields.editSelect($('input[name="date_end"]'),'2030-01-01');
            awaittestUtils.modal.clickButton('Save&Close');

            awaittestUtils.form.clickSave(form);
            form.destroy();
        });
        QUnit.test('resuméone2manyfieldgroupbyfielddelete',asyncfunction(assert){
            assert.expect(2);
            varform=awaitcreateView({
                View:FormView,
                model:'partner',
                data:this.data,
                arch:'<formstring="Partners">'+
                    '<fieldname="line_ids"widget="hr_resume">'+
                        '<tree>'+
                            '<fieldname="name"/>'+
                            '<fieldname="line_type_id"/>'+
                            '<fieldname="description"/>'+
                            '<fieldname="date_start"/>'+
                            '<fieldname="date_end"/>'+
                        '</tree>'+
                    '</field>'+
                    '</form>',
                archs:{
                    'line,false,form':'<form>'+
                            '<fieldname="name"/>'+
                            '<fieldname="line_type_id"/>'+
                            '<fieldname="description"/>'+
                            '<fieldname="date_start"/>'+
                            '<fieldname="date_end"/>'+
                        '</form>',
                },
                res_id:1,
                mockRPC:function(route,args){
                    varresult=this._super.apply(this,arguments);
                    if(args.method==='write'){
                        varorm_cmd=args.args[1].line_ids[2][0];
                        varid=args.args[1].line_ids[2][1];
                        assert.strictEqual(orm_cmd,2,"itshoulddeleteresumeline");
                        assert.strictEqual(id,37,"itshoulddeleteresumeline#37");
                    }
                    returnresult;
                },
            });

            awaittestUtils.form.clickEdit(form);
            awaittestUtils.dom.click(form.$('.o_list_record_remove')[0]);

            awaittestUtils.form.clickSave(form);
            form.destroy();
        });

        QUnit.test('skillsone2manyfieldgroupbyfieldrender',asyncfunction(assert){
            assert.expect(13);
            varform=awaitcreateView({
                View:FormView,
                model:'partner',
                data:this.data,
                arch:'<formstring="Partners">'+
                    '<fieldname="skill_ids"widget="hr_skills">'+
                        '<tree>'+
                            '<fieldname="skill_id"/>'+
                            '<fieldname="skill_type_id"/>'+
                            '<fieldname="skill_level_id"/>'+
                            '<fieldname="level_progress"/>'+
                        '</tree>'+
                    '</field>'+
                    '</form>',
                res_id:1,
            });

            var$headers=form.$('.o_group_header');
            assert.strictEqual($headers.length,2,'Thereshouldbe2headers');
            assert.strictEqual($headers.find('td:contains(Dev)').length,1,"itshouldhaveskilltypeDev");
            assert.strictEqual($headers.find('td:contains(Music)').length,1,"itshouldhaveskilltypeMusic");

            vardataRows=form.$('.o_data_row');
            assert.strictEqual(dataRows.length,3,'Thereshouldbe3datarows');

            var$row=$(dataRows[0]);
            assert.strictEqual($row.find('td:contains(Python)').length,1,"itshouldhaveskillnamePython");
            assert.strictEqual($row.find('td:contains(Intermediate)').length,1,"itshouldhaveskillnameIntermediate");
            assert.strictEqual($row.find('td:contains(50)').length,1,"itshouldhaveskillprogress50");

            $row=$(dataRows[1]);
            assert.strictEqual($row.find('td:contains(Piano)').length,1,"itshouldhaveskillnamePiano");
            assert.strictEqual($row.find('td:contains(L1)').length,1,"itshouldhaveskilllevelL1");
            assert.strictEqual($row.find('td:contains(50)').length,1,"itshouldhaveskillprogress50");

            $row=$(dataRows[2]);
            assert.strictEqual($row.find('td:contains(Flute)').length,1,"itshouldhaveskillnameFlute");
            assert.strictEqual($row.find('td:contains(L1)').length,1,"itshouldhaveskilllevelL1");
            assert.strictEqual($row.find('td:contains(70)').length,1,"itshouldhaveskillprogress70");

            form.destroy();
        });
    });
});
