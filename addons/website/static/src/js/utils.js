flectra.define('website.utils',function(require){
'usestrict';

varajax=require('web.ajax');
varcore=require('web.core');

varqweb=core.qweb;

/**
 *Allowstoloadanchorsfromapage.
 *
 *@param{string}url
 *@returns{Deferred<string[]>}
 */
functionloadAnchors(url){
    returnnewPromise(function(resolve,reject){
        if(url===window.location.pathname||url[0]==='#'){
            resolve(document.body.outerHTML);
        }elseif(url.length&&!url.startsWith("http")){
            $.get(window.location.origin+url).then(resolve,reject);
        }else{//avoiduselessquery
            resolve();
        }
    }).then(function(response){
        constanchors=_.map($(response).find('[id][data-anchor=true]'),function(el){
            return'#'+el.id;
        });
        //Alwayssuggestthetopandthebottomofthepageasinternallink
        //anchoreveniftheheaderandthefooterarenotintheDOM.Indeed,
        //the"scrollTo"functionhandlesthescrolltowardsthoseelements
        //evenwhentheyarenotintheDOM.
        if(!anchors.includes('#top')){
            anchors.unshift('#top');
        }
        if(!anchors.includes('#bottom')){
            anchors.push('#bottom');
        }
        returnanchors;
    }).catch(error=>{
        console.debug(error);
        return[];
    });
}

/**
 *AllowsthegiveninputtoproposeexistingwebsiteURLs.
 *
 *@param{ServicesMixin|Widget}self-anelementcapabletotriggeranRPC
 *@param{jQuery}$input
 */
functionautocompleteWithPages(self,$input,options){
    $.widget("website.urlcomplete",$.ui.autocomplete,{
        options:options||{},
        _create:function(){
            this._super();
            this.widget().menu("option","items",">:not(.ui-autocomplete-category)");
        },
        _renderMenu:function(ul,items){
            constself=this;
            items.forEach(item=>{
                if(item.separator){
                    self._renderSeparator(ul,item);
                }
                else{
                    self._renderItem(ul,item);
                }
            });
        },
        _renderSeparator:function(ul,item){
            return$("<liclass='ui-autocomplete-categoryfont-weight-boldtext-capitalizep-2'>")
                   .append(`<div>${item.separator}</div>`)
                   .appendTo(ul);
        },
        _renderItem:function(ul,item){
            return$("<li>")
                   .data('ui-autocomplete-item',item)
                   .append(`<div>${item.label}</div>`)
                   .appendTo(ul);
        },
    });
    $input.urlcomplete({
        source:function(request,response){
            if(request.term[0]==='#'){
                loadAnchors(request.term).then(function(anchors){
                    response(anchors);
                });
            }elseif(request.term.startsWith('http')||request.term.length===0){
                //avoiduselesscallto/website/get_suggested_links
                response();
            }else{
                returnself._rpc({
                    route:'/website/get_suggested_links',
                    params:{
                        needle:request.term,
                        limit:15,
                    }
                }).then(function(res){
                    letchoices=res.matching_pages;
                    res.others.forEach(other=>{
                        if(other.values.length){
                            choices=choices.concat(
                                [{separator:other.title}],
                                other.values,
                            );
                        }
                    });
                    response(choices);
                });
            }
        },
        select:function(ev,ui){
            //chooseurlindropdownwitharrowchangeev.target.valuewithouttrigger_up
            //socannotcheckhereifvaluehasbeenupdated
            ev.target.value=ui.item.value;
            self.trigger_up('website_url_chosen');
            ev.preventDefault();
        },
    });
}

/**
 *@param{jQuery}$element
 *@param{jQuery}[$excluded]
 */
functiononceAllImagesLoaded($element,$excluded){
    vardefs=_.map($element.find('img').addBack('img'),function(img){
        if(img.complete||$excluded&&($excluded.is(img)||$excluded.has(img).length)){
            return;//Alreadyloaded
        }
        vardef=newPromise(function(resolve,reject){
            $(img).one('load',function(){
                resolve();
            });
        });
        returndef;
    });
    returnPromise.all(defs);
}

/**
 *@deprecated
 *@todocreateDialog.promptinsteadofthis
 */
functionprompt(options,_qweb){
    /**
     *Abootstrappedversionofprompt()albeitasynchronous
     *Thiswasbuilttoquicklyprompttheuserwithasinglefield.
     *Foranythingmorecomplex,pleaseuseeditor.Dialogclass
     *
     *UsageEx:
     *
     *website.prompt("What...isyourquest?").then(function(answer){
     *    arthur.reply(answer||"ToseektheHolyGrail.");
     *});
     *
     *website.prompt({
     *    select:"Pleasechooseyourdestiny",
     *    init:function(){
     *        return[[0,"Sub-Zero"],[1,"Robo-Ky"]];
     *    }
     *}).then(function(answer){
     *    mame_station.loadCharacter(answer);
     *});
     *
     *@param{Object|String}optionsAsetofoptionsusedtoconfigurethepromptorthetextfieldnameifstring
     *@param{String}[options.window_title='']titleofthepromptmodal
     *@param{String}[options.input]tellthemodaltouseaninputtextfield,thegivenvaluewillbethefieldtitle
     *@param{String}[options.textarea]tellthemodaltouseatextareafield,thegivenvaluewillbethefieldtitle
     *@param{String}[options.select]tellthemodaltouseaselectbox,thegivenvaluewillbethefieldtitle
     *@param{Object}[options.default='']defaultvalueofthefield
     *@param{Function}[options.init]optionalfunctionthattakesthe`field`(enhancedwithafillWith()method)andthe`dialog`asparameters[canreturnapromise]
     */
    if(typeofoptions==='string'){
        options={
            text:options
        };
    }
    varxmlDef;
    if(_.isUndefined(_qweb)){
        _qweb='website.prompt';
        xmlDef=ajax.loadXML('/website/static/src/xml/website.xml',core.qweb);
    }
    options=_.extend({
        window_title:'',
        field_name:'',
        'default':'',//dictnotationforIE<9
        init:function(){},
    },options||{});

    vartype=_.intersection(Object.keys(options),['input','textarea','select']);
    type=type.length?type[0]:'input';
    options.field_type=type;
    options.field_name=options.field_name||options[type];

    vardef=newPromise(function(resolve,reject){
        Promise.resolve(xmlDef).then(function(){
            vardialog=$(qweb.render(_qweb,options)).appendTo('body');
            options.$dialog=dialog;
            varfield=dialog.find(options.field_type).first();
            field.val(options['default']);//dictnotationforIE<9
            field.fillWith=function(data){
                if(field.is('select')){
                    varselect=field[0];
                    data.forEach(function(item){
                        select.options[select.options.length]=newwindow.Option(item[1],item[0]);
                    });
                }else{
                    field.val(data);
                }
            };
            varinit=options.init(field,dialog);
            Promise.resolve(init).then(function(fill){
                if(fill){
                    field.fillWith(fill);
                }
                dialog.modal('show');
                field.focus();
                dialog.on('click','.btn-primary',function(){
                    varbackdrop=$('.modal-backdrop');
                    resolve({val:field.val(),field:field,dialog:dialog});
                    dialog.modal('hide').remove();
                        backdrop.remove();
                });
            });
            dialog.on('hidden.bs.modal',function(){
                    varbackdrop=$('.modal-backdrop');
                reject();
                dialog.remove();
                    backdrop.remove();
            });
            if(field.is('input[type="text"],select')){
                field.keypress(function(e){
                    if(e.which===13){
                        e.preventDefault();
                        dialog.find('.btn-primary').trigger('click');
                    }
                });
            }
        });
    });

    returndef;
}

functionwebsiteDomain(self){
    varwebsiteID;
    self.trigger_up('context_get',{
        callback:function(ctx){
            websiteID=ctx['website_id'];
        },
    });
    return['|',['website_id','=',false],['website_id','=',websiteID]];
}

functionsendRequest(route,params){
    function_addInput(form,name,value){
        letparam=document.createElement('input');
        param.setAttribute('type','hidden');
        param.setAttribute('name',name);
        param.setAttribute('value',value);
        form.appendChild(param);
    }

    letform=document.createElement('form');
    form.setAttribute('action',route);
    form.setAttribute('method',params.method||'POST');

    if(core.csrf_token){
        _addInput(form,'csrf_token',core.csrf_token);
    }

    for(constkeyinparams){
        constvalue=params[key];
        if(Array.isArray(value)&&value.length){
            for(constvalofvalue){
                _addInput(form,key,val);
            }
        }else{
            _addInput(form,key,value);
        }
    }

    document.body.appendChild(form);
    form.submit();
}

/**
 *Removesthenavigation-blockingfullscreenloaderfromtheDOM
 */
functionremoveLoader(){
    const$loader=$('#o_website_page_loader');
    if($loader){
        $loader.remove();
    }
}

/**
 *Convertsabase64SVGintoabase64PNG.
 *
 *@param{string|HTMLImageElement}src-anURLtoaSVGora*loaded*image
 *     withsuchanURL.Thisallowsthecalltothismethodtobepotentially
 *     notreturnaPromise.
 *@param{boolean}[noAsync=false]Incase,thegivenfirstparameterisa
 *     loadedimage,thisparameterallowstoignoreproblematicimagesand
 *     returna(problematic)PNGresultsynchronously.
 *@returns{Promise<string>|string}abase64PNG(asresultofaPromiseornot)
 */
functionsvgToPNG(src,noAsync=false){
    functioncheckImg(imgEl){
        //FirefoxdoesnotsupportdrawingSVGtocanvasunlessithaswidth
        //andheightattributessetontheroot<svg>.
        return(imgEl.naturalHeight!==0);
    }
    functiontoPNGViaCanvas(imgEl){
        constcanvas=document.createElement('canvas');
        canvas.width=imgEl.width;
        canvas.height=imgEl.height;
        canvas.getContext('2d').drawImage(imgEl,0,0);
        returncanvas.toDataURL('image/png');
    }

    //Incasewereceivealoadedimagewiththegivensrcandthatthisimage
    //isnotproblematic,wecanconvertittoPNGsynchronously.
    if(srcinstanceofHTMLImageElement){
        constloadedImgEl=src;
        if(noAsync||checkImg(loadedImgEl)){
            returntoPNGViaCanvas(loadedImgEl);
        }
        src=loadedImgEl.src;
    }

    //Atthispoint,weeitherdidnotreceivealoadedimageorthereceived
    //loadedimageisproblematic=>wehavetodosomeasynchronouscodeand
    //thefunctionwillthusreturnaPromise.
    returnnewPromise(resolve=>{
        constimgEl=newImage();
        imgEl.onload=()=>{
            if(checkImg(imgEl)){
                resolve(imgEl);
                return;
            }

            //SetarbitraryheightonimageandattachittotheDOMtoforce
            //widthcomputation.
            imgEl.height=1000;
            imgEl.style.opacity=0;
            document.body.appendChild(imgEl);

            constrequest=newXMLHttpRequest();
            request.open('GET',imgEl.src,true);
            request.onload=()=>{
                //ConvertthedataURItoaSVGelement
                constparser=newDOMParser();
                constresult=parser.parseFromString(request.responseText,'text/xml');
                constsvgEl=result.getElementsByTagName("svg")[0];

                //AddtheattributesFirefoxneedsandremovetheimagefrom
                //theDOM.
                svgEl.setAttribute('width',imgEl.width);
                svgEl.setAttribute('height',imgEl.height);
                imgEl.remove();

                //ConverttheSVGelementtoadataURI
                constsvg64=btoa(newXMLSerializer().serializeToString(svgEl));
                constfinalImg=newImage();
                finalImg.onload=()=>{
                    resolve(finalImg);
                };
                finalImg.src=`data:image/svg+xml;base64,${svg64}`;
            };
            request.send();
        };
        imgEl.src=src;
    }).then(loadedImgEl=>toPNGViaCanvas(loadedImgEl));
}

return{
    loadAnchors:loadAnchors,
    autocompleteWithPages:autocompleteWithPages,
    onceAllImagesLoaded:onceAllImagesLoaded,
    prompt:prompt,
    sendRequest:sendRequest,
    websiteDomain:websiteDomain,
    removeLoader:removeLoader,
    svgToPNG:svgToPNG,
};
});
