flectra.define('web_editor.wysiwyg.multizone.translate',function(require){
'usestrict';

varcore=require('web.core');
varwebDialog=require('web.Dialog');
varWysiwygMultizone=require('web_editor.wysiwyg.multizone');
varrte=require('web_editor.rte');
varDialog=require('wysiwyg.widgets.Dialog');
varwebsiteNavbarData=require('website.navbar');

var_t=core._t;


varRTETranslatorWidget=rte.Class.extend({
    /**
     *Iftheelementholdsatranslation,savesit.Otherwise,fallbacktothe
     *standardsavingbutwiththelangkept.
     *
     *@override
     */
    _saveElement:function($el,context,withLang){
        varself=this;
        if($el.data('oe-translation-id')){
            returnthis._rpc({
                model:'ir.translation',
                method:'save_html',
                args:[
                    [+$el.data('oe-translation-id')],
                    this._getEscapedElement($el).html()
                ],
                context:context,
            });
        }
        returnthis._super($el,context,withLang===undefined?true:withLang);
    },
});

varAttributeTranslateDialog=Dialog.extend({
    /**
     *@constructor
     */
    init:function(parent,options,node){
        this._super(parent,_.extend({
            title:_t("TranslateAttribute"),
            buttons:[
                {text: _t("Close"),classes:'btn-primary',click:this.save}
            ],
        },options||{}));
        this.translation=$(node).data('translation');
    },
    /**
     *@override
     */
    start:function(){
        var$group=$('<div/>',{class:'form-group'}).appendTo(this.$el);
        _.each(this.translation,function(node,attr){
            var$node=$(node);
            var$label=$('<labelclass="col-form-label"></label>').text(attr);
            var$input=$('<inputclass="form-control"/>').val($node.html());
            $input.on('changekeyup',function(){
                varvalue=$input.val();
                $node.html(value).trigger('change',node);
                $node.data('$node').attr($node.data('attribute'),value).trigger('translate');
                $node.trigger('change');
            });
            $group.append($label).append($input);
        });
        returnthis._super.apply(this,arguments);
    }
});

//Usedtotranslatethetextof`<select/>`optionssinceitshouldnotbe
//possibletointeractwiththecontentof`.o_translation_select`elements.
constSelectTranslateDialog=Dialog.extend({
    /**
     *@constructor
     */
    init:function(parent,options){
        this._super(parent,{
            ...options,
            title:_t("TranslateSelectionOption"),
            buttons:[
                {text:_t("Close"),click:this.save}
            ],
        });
        this.optionEl=this.options.targetEl;
        this.translationObject=this.optionEl.closest('[data-oe-translation-id]');
    },
    /**
     *@override
     */
    start:function(){
        constinputEl=document.createElement('input');
        inputEl.className='form-controlmy-3';
        inputEl.value=this.optionEl.textContent;
        inputEl.addEventListener('keyup',()=>{
            this.optionEl.textContent=inputEl.value;
            consttranslationUpdated=inputEl.value!==this.optionEl.dataset.initialTranslationValue;
            this.translationObject.classList.toggle('o_dirty',translationUpdated);
            this.optionEl.classList.toggle('oe_translated',translationUpdated);
        });
        this.el.appendChild(inputEl);
        returnthis._super(...arguments);
    },
});

varWysiwygTranslate=WysiwygMultizone.extend({
    custom_events:_.extend({},WysiwygMultizone.prototype.custom_events||{},{
        ready_to_save:'_onSave',
        rte_change:'_onChange',
    }),

    /**
     *@override
     *@param{string}options.lang
     */
    init:function(parent,options){
        this.lang=options.lang;
        options.recordInfo=_.defaults({
                context:{lang:this.lang}
            },options.recordInfo,options);
        this._super.apply(this,arguments);
    },
    /**
     *@override
     */
    start:function(){
        varself=this;
        //Hackywaytokeepthetopeditortoolbarintranslatemodefornow
        this.$webEditorTopEdit=$('<divid="web_editor-top-edit"></div>').prependTo(document.body);
        this.options.toolbarHandler=this.$webEditorTopEdit;
        this.editor=new(this.Editor)(this,Object.assign({Editor:RTETranslatorWidget},this.options));
        this.$editor=this.editor.rte.editable();
        varpromise=this.editor.prependTo(this.$editor[0].ownerDocument.body);

        returnpromise.then(function(){
            self._relocateEditorBar();
            varattrs=['placeholder','title','alt'];
            const$editable=self._getEditableArea();
            _.each(attrs,function(attr){
                $editable.filter('['+attr+'*="data-oe-translation-id="]').filter(':empty,input,select,textarea,img').each(function(){
                    var$node=$(this);
                    vartranslation=$node.data('translation')||{};
                    vartrans=$node.attr(attr);
                    varmatch=trans.match(/<span[^>]*data-oe-translation-id="([0-9]+)"[^>]*>(.*)<\/span>/);
                    var$trans=$(trans).addClass('d-noneo_editableo_editable_translatable_attribute').appendTo('body');
                    $trans.data('$node',$node).data('attribute',attr);

                    translation[attr]=$trans[0];
                    $node.attr(attr,match[2]);

                    varselect2=$node.data('select2');
                    if(select2){
                        select2.blur();
                        $node.on('translate',function(){
                            select2.blur();
                        });
                        $node=select2.container.find('input');
                    }
                    $node.addClass('o_translatable_attribute').data('translation',translation);
                });
            });

            //Hack:weaddatemporaryelementtohandleoption'stext
            //translationsfromthelinked<select/>.Thefinalvaluesare
            //copiedtotheoriginalelementrightbeforesave.
            $editable.filter('[data-oe-translation-id]>select').each((index,select)=>{
                //Keepthedefaultwidthofthetranslation`<span/>`.
                select.parentElement.classList.remove('o_is_inline_editable');
                constselectTranslationEl=document.createElement('div');
                selectTranslationEl.className='o_translation_select';
                constoptionNames=[...select.options].map(option=>option.text);
                optionNames.forEach(option=>{
                    constoptionEl=document.createElement('div');
                    optionEl.textContent=option;
                    optionEl.dataset.initialTranslationValue=option;
                    optionEl.className='o_translation_select_option';
                    selectTranslationEl.appendChild(optionEl);
                });
                select.before(selectTranslationEl);
            });

            self.translations=[];
            self.$editables_attr=self._getEditableArea().filter('.o_translatable_attribute');
            self.$editables_attribute=$('.o_editable_translatable_attribute');

            self.$editables_attribute.on('change',function(){
                self.trigger_up('rte_change',{target:this});
            });

            self._markTranslatableNodes();
        });
    },
    /**
     *@override
     */
    destroy:function(){
        this._super(...arguments);
        this.$webEditorTopEdit.remove();
    },

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *@override
     *@returns{Boolean}
     */
    isDirty:function(){
        returnthis._super()||this.$editables_attribute.hasClass('o_dirty');
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *Returntheeditablearea.
     *
     *@override
     *@returns{JQuery}
     */
    _getEditableArea:function(){
        var$editables=this._super();
        return$editables.add(this.$editables_attribute);
    },
    /**
     *Returnanobjectdescribingthelinkedrecord.
     *
     *@override
     *@param{Object}options
     *@returns{Object}{res_id,res_model,xpath}
     */
    _getRecordInfo:function(options){
        options=options||{};
        varrecordInfo=this._super(options);
        var$editable=$(options.target).closest(this._getEditableArea());
        if(!$editable.length){
            $editable=$(this._getFocusedEditable());
        }
        recordInfo.context.lang=this.lang;
        recordInfo.translation_id=$editable.data('oe-translation-id')|0;
        returnrecordInfo;
    },
    /**
     *@override
     *@returns{Object}thesummernoteconfiguration
     */
    _editorOptions:function(){
        varoptions=this._super();
        options.toolbar=[
            //todo:hidethisfeatureforfield(data-oe-model)
            ['font',['bold','italic','underline','clear']],
            ['fontsize',['fontsize']],
            ['color',['color']],
            //keepeverytime
            ['history',['undo','redo']],
        ];
        returnoptions;
    },
    /**
     *Calledwhentextisedited->makesuretextisnotmessedupandmark
     *theelementasdirty.
     *
     *@override
     *@param{JqueryEvent}[ev]
     */
    _onChange:function(ev){
        var$node=$(ev.data.target);
        if(!$node.length){
            return;
        }
        $node.find('div,p').each(function(){//removeP,DIVelementswhichmighthavebeeninsertedbecauseofcopy-paste
            var$p=$(this);
            $p.after($p.html()).remove();
        });
        vartrans=this._getTranlationObject($node[0]);
        constupdated=trans.value!==$node.html().replace(/[\t\n\r]+/,'');
        $node.toggleClass('o_dirty',updated);
        const$target=$node.data('$node');
        if($target){
            $target.toggleClass('oe_translated',updated);
        }
    },
    /**
     *Returnsatranslationobject.
     *
     *@private
     *@param{Node}node
     *@returns{Object}
     */
    _getTranlationObject:function(node){
        var$node=$(node);
        varid=+$node.data('oe-translation-id');
        if(!id){
            id=$node.data('oe-model')+','+$node.data('oe-id')+','+$node.data('oe-field');
        }
        vartrans=_.find(this.translations,function(trans){
            returntrans.id===id;
        });
        if(!trans){
            this.translations.push(trans={'id':id});
        }
        returntrans;
    },
    /**
     *@private
     */
    _markTranslatableNodes:function(){
        varself=this;
        this._getEditableArea().each(function(){
            var$node=$(this);
            vartrans=self._getTranlationObject(this);
            trans.value=(trans.value?trans.value:$node.html()).replace(/[\t\n\r]+/,'');
        });
        this._getEditableArea().prependEvent('click.translator',function(ev){
            if(ev.ctrlKey||!$(ev.target).is(':o_editable')){
                return;
            }
            ev.preventDefault();
            ev.stopPropagation();
        });

        //attributes

        this.$editables_attr.each(function(){
            var$node=$(this);
            vartranslation=$node.data('translation');
            _.each(translation,function(node,attr){
                vartrans=self._getTranlationObject(node);
                trans.value=(trans.value?trans.value:$node.html()).replace(/[\t\n\r]+/,'');
                trans.state=node.dataset.oeTranslationState;
                $node.attr('data-oe-translation-state',(trans.state||'to_translate'));
            });
        });

        this.$editables_attr
            .add(this._getEditableArea().filter('.o_translation_select_option'))
            .prependEvent('mousedown.translatorclick.translatormouseup.translator',function(ev){
                if(ev.ctrlKey){
                    return;
                }
                ev.preventDefault();
                ev.stopPropagation();
                if(ev.type!=='mousedown'){
                    return;
                }

                consttargetEl=ev.target;
                if(targetEl.closest('.o_translation_select')){
                    newSelectTranslateDialog(self,{size:'medium',targetEl}).open();
                }else{
                    newAttributeTranslateDialog(self,{},targetEl).open();
                }
            });
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    _onSave:function(ev){
        ev.stopPropagation();
        //Adapttranslationvaluesfor`select`>`options`sandremoveall
        //temporary`.o_translation_select`elements.
        for(constoptionsElofthis.el.querySelectorAll('.o_translation_select')){
            constselectEl=optionsEl.nextElementSibling;
            consttranslatedOptions=optionsEl.children;
            constselectOptions=selectEl.tagName==='SELECT'?[...selectEl.options]:[];
            if(selectOptions.length===translatedOptions.length){
                selectOptions.map((option,i)=>{
                    option.text=translatedOptions[i].textContent;
                });
            }
            optionsEl.remove();
        }
    },
});

returnWysiwygTranslate;
});
