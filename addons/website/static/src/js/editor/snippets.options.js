flectra.define('website.editor.snippets.options',function(require){
'usestrict';

const{ColorpickerWidget}=require('web.Colorpicker');
constconfig=require('web.config');
varcore=require('web.core');
varDialog=require('web.Dialog');
constdom=require('web.dom');
constweUtils=require('web_editor.utils');
varoptions=require('web_editor.snippets.options');
constwUtils=require('website.utils');
require('website.s_popup_options');

var_t=core._t;
varqweb=core.qweb;

constInputUserValueWidget=options.userValueWidgetsRegistry['we-input'];
constSelectUserValueWidget=options.userValueWidgetsRegistry['we-select'];

constUrlPickerUserValueWidget=InputUserValueWidget.extend({
    custom_events:_.extend({},InputUserValueWidget.prototype.custom_events||{},{
        'website_url_chosen':'_onWebsiteURLChosen',
    }),
    events:_.extend({},InputUserValueWidget.prototype.events||{},{
        'click.o_we_redirect_to':'_onRedirectTo',
    }),

    /**
     *@override
     */
    start:asyncfunction(){
        awaitthis._super(...arguments);
        constlinkButton=document.createElement('we-button');
        consticon=document.createElement('i');
        icon.classList.add('fa','fa-fw','fa-external-link')
        linkButton.classList.add('o_we_redirect_to');
        linkButton.title=_t("RedirecttoURLinanewtab");
        linkButton.appendChild(icon);
        this.containerEl.appendChild(linkButton);
        this.el.classList.add('o_we_large_input');
        this.inputEl.classList.add('text-left');
        constoptions={
            position:{
                collision:'flipflipfit',
            },
            classes:{
                "ui-autocomplete":'o_website_ui_autocomplete'
            },
        };
        wUtils.autocompleteWithPages(this,$(this.inputEl),options);
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *Calledwhentheautocompletechangetheinputvalue.
     *
     *@private
     *@param{FlectraEvent}ev
     */
    _onWebsiteURLChosen:function(ev){
        this._value=this.inputEl.value;
        this._onUserValueChange(ev);
    },
    /**
     *RedirectstotheURLthewidgetcurrentlyholds.
     *
     *@private
     */
    _onRedirectTo:function(){
        if(this._value){
            window.open(this._value,'_blank');
        }
    },
});

constFontFamilyPickerUserValueWidget=SelectUserValueWidget.extend({
    xmlDependencies:(SelectUserValueWidget.prototype.xmlDependencies||[])
        .concat(['/website/static/src/xml/website.editor.xml']),
    events:_.extend({},SelectUserValueWidget.prototype.events||{},{
        'click.o_we_add_google_font_btn':'_onAddGoogleFontClick',
        'click.o_we_delete_google_font_btn':'_onDeleteGoogleFontClick',
    }),
    fontVariables:[],//Filledbyeditormenuwhenalloptionsareloaded

    /**
     *@override
     */
    start:asyncfunction(){
        conststyle=window.getComputedStyle(document.documentElement);
        constnbFonts=parseInt(weUtils.getCSSVariableValue('number-of-fonts',style));
        //Userfontsservedbygoogleserver.
        constgoogleFontsProperty=weUtils.getCSSVariableValue('google-fonts',style);
        this.googleFonts=googleFontsProperty?googleFontsProperty.split(/\s*,\s*/g):[];
        this.googleFonts=this.googleFonts.map(font=>font.substring(1,font.length-1));//Unquote
        //Localuserfonts.
        constgoogleLocalFontsProperty=weUtils.getCSSVariableValue('google-local-fonts',style);
        this.googleLocalFonts=googleLocalFontsProperty?
            googleLocalFontsProperty.slice(1,-1).split(/\s*,\s*/g):[];
        //Ifasamefontexistsbothremotelyandlocally,weremovetheremote
        //fonttoprioritizethelocalfont.Theremoteonewillneverbe
        //displayedorloadedaslongasthelocaloneexists.
        this.googleFonts=this.googleFonts.filter(font=>{
            constlocalFonts=this.googleLocalFonts.map(localFont=>localFont.split(":")[0]);
            returnlocalFonts.indexOf(`'${font}'`)===-1;
        });
        this.allFonts=[];

        awaitthis._super(...arguments);

        constfontEls=[];
        constmethodName=this.el.dataset.methodName||'customizeWebsiteVariable';
        constvariable=this.el.dataset.variable;
        constthemeFontsNb=nbFonts-(this.googleLocalFonts.length+this.googleFonts.length);
        _.times(nbFonts,fontNb=>{
            constrealFontNb=fontNb+1;
            constfontEl=document.createElement('we-button');
            fontEl.classList.add(`o_we_option_font_${realFontNb}`);
            fontEl.dataset.variable=variable;
            fontEl.dataset[methodName]=weUtils.getCSSVariableValue(`font-number-${realFontNb}`,style);
            constfont=weUtils.getCSSVariableValue(`font-number-${realFontNb}`,style);
            this.allFonts.push(font);
            fontEl.dataset[methodName]=font;
            fontEl.dataset.font=realFontNb;
            if(realFontNb<=themeFontsNb){
                //Addthe"cloud"iconnexttothetheme'sdefaultfonts
                //becausetheyareservedbyGoogle.
                fontEl.appendChild(Object.assign(document.createElement('i'),{
                    role:'button',
                    className:'text-infoml-2fafa-cloud',
                    title:_t("ThisfontishostedandservedtoyourvisitorsbyGoogleservers"),
                }));
            }
            fontEls.push(fontEl);
            this.menuEl.appendChild(fontEl);
        });

        if(this.googleLocalFonts.length){
            constgoogleLocalFontsEls=fontEls.splice(-this.googleLocalFonts.length);
            googleLocalFontsEls.forEach((el,index)=>{
                $(el).append(core.qweb.render('website.delete_google_font_btn',{
                    index:index,
                    local:true,
                }));
            });
        }

        if(this.googleFonts.length){
            constgoogleFontsEls=fontEls.splice(-this.googleFonts.length);
            googleFontsEls.forEach((el,index)=>{
                $(el).append(core.qweb.render('website.delete_google_font_btn',{
                    index:index,
                }));
            });
        }

        $(this.menuEl).append($(core.qweb.render('website.add_google_font_btn',{
            variable:variable,
        })));
    },

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *@override
     */
    asyncsetValue(){
        awaitthis._super(...arguments);

        for(constclassNameofthis.menuTogglerEl.classList){
            if(className.match(/^o_we_option_font_\d+$/)){
                this.menuTogglerEl.classList.remove(className);
            }
        }
        constactiveWidget=this._userValueWidgets.find(widget=>!widget.isPreviewed()&&widget.isActive());
        if(activeWidget){
            this.menuTogglerEl.classList.add(`o_we_option_font_${activeWidget.el.dataset.font}`);
        }
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *@private
     */
    _onAddGoogleFontClick:function(ev){
        constvariable=$(ev.currentTarget).data('variable');
        constdialog=newDialog(this,{
            title:_t("AddaGoogleFont"),
            $content:$(core.qweb.render('website.dialog.addGoogleFont')),
            buttons:[
                {
                    text:_t("Save&Reload"),
                    classes:'btn-primary',
                    click:async()=>{
                        constinputEl=dialog.el.querySelector('.o_input_google_font');
                        //iffontpagelink(whatisexpected)
                        letm=inputEl.value.match(/\bspecimen\/([\w+]+)/);
                        if(!m){
                            //ifembedcode(sothatitworksanywayiftheuserputtheembedcodeinsteadofthepagelink)
                            m=inputEl.value.match(/\bfamily=([\w+]+)/);
                            if(!m){
                                inputEl.classList.add('is-invalid');
                                return;
                            }
                        }

                        letisValidFamily=false;

                        try{
                            //Fontfamilyisanencodedqueryparameter:
                            //"Open+Sans"needstoremain"Open+Sans".
                            constresult=awaitfetch("https://fonts.googleapis.com/css?family="+m[1]+':300,300i,400,400i,700,700i',{method:'HEAD'});
                            //Googlefontsserverreturnsa400statuscodeiffamilyisnotvalid.
                            if(result.ok){
                                isValidFamily=true;
                            }
                        }catch(error){
                            console.error(error);
                        }

                        if(!isValidFamily){
                            inputEl.classList.add('is-invalid');
                            return;
                        }

                        constfont=m[1].replace(/\+/g,'');
                        constgoogleFontServe=dialog.el.querySelector('#google_font_serve').checked;
                        constfontName=`'${font}'`;
                        //Ifthefontalreadyexists,itwillonlybeaddedif
                        //theuserchoosestoadditlocallywhenitisalready
                        //importedfromtheGoogleFontsserver.
                        constfontExistsLocally=this.googleLocalFonts.some(localFont=>localFont.split(':')[0]===fontName);
                        constfontExistsOnServer=this.allFonts.includes(fontName);
                        constpreventFontAddition=fontExistsLocally||(fontExistsOnServer&&googleFontServe);
                        if(preventFontAddition){
                            inputEl.classList.add('is-invalid');
                            //Showcustomvalidityerrormessage.
                            inputEl.setCustomValidity(_t("Thisfontalreadyexists,youcanonlyadditasalocalfonttoreplacetheserverversion."));
                            inputEl.reportValidity();
                            return;
                        }
                        if(googleFontServe){
                            this.googleFonts.push(font);
                        }else{
                            this.googleLocalFonts.push(`'${font}':''`);
                        }
                        this.trigger_up('google_fonts_custo_request',{
                            values:{[variable]:`'${font}'`},
                            googleFonts:this.googleFonts,
                            googleLocalFonts:this.googleLocalFonts,
                        });
                    },
                },
                {
                    text:_t("Discard"),
                    close:true,
                },
            ],
        });
        dialog.open();
    },
    /**
     *@private
     *@param{Event}ev
     */
    _onDeleteGoogleFontClick:asyncfunction(ev){
        ev.preventDefault();
        constvalues={};

        constsave=awaitnewPromise(resolve=>{
            Dialog.confirm(this,_t("Deletingafontrequiresareloadofthepage.Thiswillsaveallyourchangesandreloadthepage,areyousureyouwanttoproceed?"),{
                confirm_callback:()=>resolve(true),
                cancel_callback:()=>resolve(false),
            });
        });
        if(!save){
            return;
        }

        //RemoveGooglefont
        constgoogleFontIndex=parseInt(ev.target.dataset.fontIndex);
        constisLocalFont=ev.target.dataset.localFont;
        letgoogleFontName;
        if(isLocalFont){
            constgoogleFont=this.googleLocalFonts[googleFontIndex].split(':');
            //Removedoublequotes
            googleFontName=googleFont[0].substring(1,googleFont[0].length-1);
            values['delete-font-attachment-id']=googleFont[1];
            this.googleLocalFonts.splice(googleFontIndex,1);
        }else{
            googleFontName=this.googleFonts[googleFontIndex];
            this.googleFonts.splice(googleFontIndex,1);
        }

        //Adaptfontvariableindexestotheremoval
        conststyle=window.getComputedStyle(document.documentElement);
        _.each(FontFamilyPickerUserValueWidget.prototype.fontVariables,variable=>{
            constvalue=weUtils.getCSSVariableValue(variable,style);
            if(value.substring(1,value.length-1)===googleFontName){
                //Ifanelementisusingthegooglefontbeingremoved,reset
                //ittothethemedefault.
                values[variable]='null';
            }
        });

        this.trigger_up('google_fonts_custo_request',{
            values:values,
            googleFonts:this.googleFonts,
            googleLocalFonts:this.googleLocalFonts,
        });
    },
});

constGPSPicker=InputUserValueWidget.extend({
    events:{//ExplicitlynotconsiderallInputUserValueWidgetevents
        'blurinput':'_onInputBlur',
    },

    /**
     *@constructor
     */
    init(){
        this._super(...arguments);
        this._gmapCacheGPSToPlace={};
    },
    /**
     *@override
     */
    asyncwillStart(){
        awaitthis._super(...arguments);
        this._gmapLoaded=awaitnewPromise(resolve=>{
            this.trigger_up('gmap_api_request',{
                editableMode:true,
                configureIfNecessary:true,
                onSuccess:key=>{
                    if(!key){
                        resolve(false);
                        return;
                    }

                    //TODOsee_notifyGMapError,thistriestotriggeranerror
                    //earlybutthisisnotconsistentwithnewgmapkeys.
                    this._nearbySearch('(50.854975,4.3753899)',!!key)
                        .then(place=>resolve(!!place));
                },
            });
        });
        if(!this._gmapLoaded&&!this._gmapErrorNotified){
            this.trigger_up('user_value_widget_critical');
            return;
        }
    },
    /**
     *@override
     */
    asyncstart(){
        awaitthis._super(...arguments);
        this.el.classList.add('o_we_large_input');
        if(!this._gmapLoaded){
            return;
        }

        this._gmapAutocomplete=newgoogle.maps.places.Autocomplete(this.inputEl,{types:['geocode']});
        google.maps.event.addListener(this._gmapAutocomplete,'place_changed',this._onPlaceChanged.bind(this));
    },

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *@override
     */
    getMethodsParams:function(methodName){
        returnObject.assign({gmapPlace:this._gmapPlace||{}},this._super(...arguments));
    },
    /**
     *@override
     */
    asyncsetValue(){
        awaitthis._super(...arguments);
        if(!this._gmapLoaded){
            return;
        }

        this._gmapPlace=awaitthis._nearbySearch(this._value);

        if(this._gmapPlace){
            this.inputEl.value=this._gmapPlace.formatted_address;
        }
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *@private
     *@param{string}gps
     *@param{boolean}[notify=true]
     *@returns{Promise}
     */
    async_nearbySearch(gps,notify=true){
        if(this._gmapCacheGPSToPlace[gps]){
            returnthis._gmapCacheGPSToPlace[gps];
        }

        constp=gps.substring(1).slice(0,-1).split(',');
        constlocation=newgoogle.maps.LatLng(p[0]||0,p[1]||0);
        returnnewPromise(resolve=>{
            constservice=newgoogle.maps.places.PlacesService(document.createElement('div'));
            service.nearbySearch({
                //Doa'nearbySearch'followedby'getDetails'toavoidusing
                //GMapGeocoderwhichtheusermaynothaveenabled...but
                //ideallyGeocodershouldbeusedtogettheexactlocationat
                //thosecoordinatesandtolimitbillingquerycount.
                location:location,
                radius:1,
            },(results,status)=>{
                constGMAP_CRITICAL_ERRORS=[google.maps.places.PlacesServiceStatus.REQUEST_DENIED,google.maps.places.PlacesServiceStatus.UNKNOWN_ERROR];
                if(status===google.maps.places.PlacesServiceStatus.OK){
                    service.getDetails({
                        placeId:results[0].place_id,
                        fields:['geometry','formatted_address'],
                    },(place,status)=>{
                        if(status===google.maps.places.PlacesServiceStatus.OK){
                            this._gmapCacheGPSToPlace[gps]=place;
                            resolve(place);
                        }elseif(GMAP_CRITICAL_ERRORS.includes(status)){
                            if(notify){
                                this._notifyGMapError();
                            }
                            resolve();
                        }
                    });
                }elseif(GMAP_CRITICAL_ERRORS.includes(status)){
                    if(notify){
                        this._notifyGMapError();
                    }
                    resolve();
                }else{
                    resolve();
                }
            });
        });
    },
    /**
     *IndicatestotheuserthereisanerrorwiththegooglemapAPIand
     *re-openstheconfigurationdialog.Forgoodmeasures,thisalsonotifies
     *acriticalerrorwhichnormallyremovestherelatedsnippetentirely.
     *
     *@private
     */
    _notifyGMapError(){
        //TODOthisshouldbebettertodetectallerrors.Thisisrandom.
        //Whenmisconfigured(wrongAPIsenabled),sometimesGooglethrow
        //errorsimmediately(whichthenreachesthiscode),sometimesit
        //throwsthemlater(whichtheninducesanerrorlogintheconsole
        //andrandombehaviors).
        if(this._gmapErrorNotified){
            return;
        }
        this._gmapErrorNotified=true;

        this.displayNotification({
            type:'danger',
            sticky:true,
            message:_t("AGoogleMaperroroccurred.Makesuretoreadthekeyconfigurationpopupcarefully."),
        });
        this.trigger_up('gmap_api_request',{
            editableMode:true,
            reconfigure:true,
            onSuccess:()=>{
                this._gmapErrorNotified=false;
            },
        });

        setTimeout(()=>this.trigger_up('user_value_widget_critical'));
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *@private
     *@param{Event}ev
     */
    _onPlaceChanged(ev){
        constgmapPlace=this._gmapAutocomplete.getPlace();
        if(gmapPlace&&gmapPlace.geometry){
            this._gmapPlace=gmapPlace;
            constlocation=this._gmapPlace.geometry.location;
            constoldValue=this._value;
            this._value=`(${location.lat()},${location.lng()})`;
            this._gmapCacheGPSToPlace[this._value]=gmapPlace;
            if(oldValue!==this._value){
                this._onUserValueChange(ev);
            }
        }
    },
    /**
     *@override
     */
    _onInputBlur(){
        //Asastablefix:donotcallthe_superasweactuallydon'twant
        //inputfocusoutmessingwiththegooglemapAPI.Becauseofthis,
        //clickingongooglemapautocompletesuggestiononFirefoxwasnot
        //workingproperly.Thisiskeptasanemptyfunctionbecauseofstable
        //policy(ensurescustocanstillextendthis).
        //TODOreviewinmaster.
    },
});

options.userValueWidgetsRegistry['we-urlpicker']=UrlPickerUserValueWidget;
options.userValueWidgetsRegistry['we-fontfamilypicker']=FontFamilyPickerUserValueWidget;
options.userValueWidgetsRegistry['we-gpspicker']=GPSPicker;

//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

options.Class.include({
    xmlDependencies:(options.Class.prototype.xmlDependencies||[])
        .concat(['/website/static/src/xml/website.editor.xml']),
    custom_events:_.extend({},options.Class.prototype.custom_events||{},{
        'google_fonts_custo_request':'_onGoogleFontsCustoRequest',
    }),

    //--------------------------------------------------------------------------
    //Options
    //--------------------------------------------------------------------------

    /**
     *@seethis.selectClassforparameters
     */
    customizeWebsiteViews:asyncfunction(previewMode,widgetValue,params){
        awaitthis._customizeWebsite(previewMode,widgetValue,params,'views');
    },
    /**
     *@seethis.selectClassforparameters
     */
    customizeWebsiteVariable:asyncfunction(previewMode,widgetValue,params){
        awaitthis._customizeWebsite(previewMode,widgetValue,params,'variable');
    },
    /**
     *@seethis.selectClassforparameters
     */
    customizeWebsiteColor:asyncfunction(previewMode,widgetValue,params){
        awaitthis._customizeWebsite(previewMode,widgetValue,params,'color');
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *@override
     */
    async_checkIfWidgetsUpdateNeedReload(widgets){
        constneedReload=awaitthis._super(...arguments);
        if(needReload){
            returnneedReload;
        }
        for(constwidgetofwidgets){
            constmethodsNames=widget.getMethodsNames();
            if(!methodsNames.includes('customizeWebsiteViews')
                    &&!methodsNames.includes('customizeWebsiteVariable')
                    &&!methodsNames.includes('customizeWebsiteColor')){
                continue;
            }
            letparamsReload=false;
            if(widget.getMethodsParams('customizeWebsiteViews').reload
                    ||widget.getMethodsParams('customizeWebsiteVariable').reload
                    ||widget.getMethodsParams('customizeWebsiteColor').reload){
                paramsReload=true;
            }
            if(paramsReload||config.isDebug('assets')){
                return(config.isDebug('assets')?_t("Itappearsyouareindebug=assetsmode,allthemecustomizationoptionsrequireapagereloadinthismode."):true);
            }
        }
        returnfalse;
    },
    /**
     *@override
     */
    _computeWidgetState:asyncfunction(methodName,params){
        switch(methodName){
            case'customizeWebsiteViews':{
                constallXmlIDs=this._getXMLIDsFromPossibleValues(params.possibleValues);
                constenabledXmlIDs=awaitthis._rpc({
                    route:'/website/theme_customize_get',
                    params:{
                        'xml_ids':allXmlIDs,
                    },
                });
                letmostXmlIDsStr='';
                letmostXmlIDsNb=0;
                for(constxmlIDsStrofparams.possibleValues){
                    constenableXmlIDs=xmlIDsStr.split(/\s*,\s*/);
                    if(enableXmlIDs.length>mostXmlIDsNb
                            &&enableXmlIDs.every(xmlID=>enabledXmlIDs.includes(xmlID))){
                        mostXmlIDsStr=xmlIDsStr;
                        mostXmlIDsNb=enableXmlIDs.length;
                    }
                }
                returnmostXmlIDsStr;//NeedtoreturntheexactsamestringasinpossibleValues
            }
            case'customizeWebsiteVariable':{
                returnweUtils.getCSSVariableValue(params.variable);
            }
            case'customizeWebsiteColor':{
                //TODOadaptinmaster
                constbugfixedValue=weUtils.getCSSVariableValue(`bugfixed-${params.color}`);
                if(bugfixedValue){
                    returnbugfixedValue;
                }
                returnweUtils.getCSSVariableValue(params.color);
            }
        }
        returnthis._super(...arguments);
    },
    /**
     *@private
     */
    _customizeWebsite:asyncfunction(previewMode,widgetValue,params,type){
        //Neverallowpreviewsforthemecustomizations
        if(previewMode){
            return;
        }

        switch(type){
            case'views':
                awaitthis._customizeWebsiteViews(widgetValue,params);
                break;
            case'variable':
                awaitthis._customizeWebsiteVariable(widgetValue,params);
                break;
            case'color':
                awaitthis._customizeWebsiteColor(widgetValue,params);
                break;
        }

        if(params.reload||config.isDebug('assets')){
            //Callerwillreloadthepage,nothingneedstobedoneanymore.
            return;
        }

        //Finally,onlyupdatethebundlesasnoreloadisrequired
        awaitthis._reloadBundles();

        //Somepublicwidgetsmaydependonthevariablesthatwere
        //customized,sowehavetorestartthem*all*.
        awaitnewPromise((resolve,reject)=>{
            this.trigger_up('widgets_start_request',{
                editableMode:true,
                onSuccess:()=>resolve(),
                onFailure:()=>reject(),
            });
        });
    },
    /**
     *@private
     */
    _customizeWebsiteColor:asyncfunction(color,params){
        constbaseURL='/website/static/src/scss/options/colors/';
        constcolorType=params.colorType?(params.colorType+'_'):'';
        consturl=`${baseURL}user_${colorType}color_palette.scss`;

        if(color){
            if(weUtils.isColorCombinationName(color)){
                color=parseInt(color);
            }elseif(!ColorpickerWidget.isCSSColor(color)){
                color=`'${color}'`;
            }
        }
        returnthis._makeSCSSCusto(url,{[params.color]:color});
    },
    /**
     *@private
     */
    _customizeWebsiteVariable:asyncfunction(value,params){
        returnthis._makeSCSSCusto('/website/static/src/scss/options/user_values.scss',{
            [params.variable]:value,
        });
    },
    /**
     *@private
     */
    _customizeWebsiteViews:asyncfunction(xmlID,params){
        constallXmlIDs=this._getXMLIDsFromPossibleValues(params.possibleValues);
        constenableXmlIDs=xmlID.split(/\s*,\s*/);
        constdisableXmlIDs=allXmlIDs.filter(xmlID=>!enableXmlIDs.includes(xmlID));

        returnthis._rpc({
            route:'/website/theme_customize',
            params:{
                'enable':enableXmlIDs,
                'disable':disableXmlIDs,
            },
        });
    },
    /**
     *@private
     */
    _getXMLIDsFromPossibleValues:function(possibleValues){
        constallXmlIDs=[];
        for(constxmlIDsStrofpossibleValues){
            allXmlIDs.push(...xmlIDsStr.split(/\s*,\s*/));
        }
        returnallXmlIDs.filter((v,i,arr)=>arr.indexOf(v)===i);
    },
    /**
     *@private
     */
    _makeSCSSCusto:asyncfunction(url,values){
        returnthis._rpc({
            route:'/website/make_scss_custo',
            params:{
                'url':url,
                'values':_.mapObject(values,v=>v||'null'),
            },
        });
    },
    /**
     *Refreshesallpublicwidgetsrelatedtothegivenelement.
     *
     *@private
     *@param{jQuery}[$el=this.$target]
     *@returns{Promise}
     */
    _refreshPublicWidgets:asyncfunction($el){
        returnnewPromise((resolve,reject)=>{
            this.trigger_up('widgets_start_request',{
                editableMode:true,
                $target:$el||this.$target,
                onSuccess:resolve,
                onFailure:reject,
            });
        });
    },
    /**
     *@private
     */
    _reloadBundles:asyncfunction(){
        constbundles=awaitthis._rpc({
            route:'/website/theme_customize_bundle_reload',
        });
        let$allLinks=$();
        constproms=_.map(bundles,(bundleURLs,bundleName)=>{
            var$links=$('link[href*="'+bundleName+'"]');
            $allLinks=$allLinks.add($links);
            var$newLinks=$();
            _.each(bundleURLs,url=>{
                $newLinks=$newLinks.add($('<link/>',{
                    type:'text/css',
                    rel:'stylesheet',
                    href:url,
                }));
            });

            constlinksLoaded=newPromise(resolve=>{
                letnbLoaded=0;
                $newLinks.on('loaderror',()=>{//Ifwehaveanerror,justignoreit
                    if(++nbLoaded>=$newLinks.length){
                        resolve();
                    }
                });
            });
            $links.last().after($newLinks);
            returnlinksLoaded;
        });
        awaitPromise.all(proms).then(()=>$allLinks.remove());
    },
    /**
     *@override
     */
    _select:asyncfunction(previewMode,widget){
        awaitthis._super(...arguments);

        if(!widget.$el.closest('[data-no-widget-refresh="true"]').length){
            //TODOtheflagshouldberetrievedthroughwidgetparamssomehow
            awaitthis._refreshPublicWidgets();
        }
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *@private
     *@param{FlectraEvent}ev
     */
    _onGoogleFontsCustoRequest:function(ev){
        constvalues=ev.data.values?_.clone(ev.data.values):{};
        constgoogleFonts=ev.data.googleFonts;
        constgoogleLocalFonts=ev.data.googleLocalFonts;
        if(googleFonts.length){
            values['google-fonts']="('"+googleFonts.join("','")+"')";
        }else{
            values['google-fonts']='null';
        }
        //checkundefined,thisisabackport,acustomightnotpassthiskey
        if(googleLocalFonts!==undefined&&googleLocalFonts.length){
            values['google-local-fonts']="("+googleLocalFonts.join(",")+")";
        }else{
            values['google-local-fonts']='null';
        }
        this.trigger_up('snippet_edition_request',{exec:async()=>{
            returnthis._makeSCSSCusto('/website/static/src/scss/options/user_values.scss',values);
        }});
        this.trigger_up('request_save',{
            reloadEditor:true,
        });
    },
});

function_getLastPreFilterLayerElement($el){
    //Makesureparallaxandvideoelementareconsideredtobebelowthe
    //colorfilters/shape
    const$bgVideo=$el.find('>.o_bg_video_container');
    if($bgVideo.length){
        return$bgVideo[0];
    }
    const$parallaxEl=$el.find('>.s_parallax_bg');
    if($parallaxEl.length){
        return$parallaxEl[0];
    }
    returnnull;
}

options.registry.BackgroundToggler.include({
    /**
     *Togglesbackgroundvideoonoroff.
     *
     *@seethis.selectClassforparameters
     */
    toggleBgVideo(previewMode,widgetValue,params){
        if(!widgetValue){
            //TODO:usesetWidgetValueinsteadofcallingbackgrounddirectlywhenpossible
            const[bgVideoWidget]=this._requestUserValueWidgets('bg_video_opt');
            constbgVideoOpt=bgVideoWidget.getParent();
            returnbgVideoOpt._setBgVideo(false,'');
        }else{
            //TODO:usetriggerinsteadofel.clickwhenpossible
            this._requestUserValueWidgets('bg_video_opt')[0].el.click();
        }
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *@override
     */
    _computeWidgetState(methodName,params){
        if(methodName==='toggleBgVideo'){
            returnthis.$target[0].classList.contains('o_background_video');
        }
        returnthis._super(...arguments);
    },
    /**
     *TODOanoverallbettermanagementofbackgroundlayersisneeded
     *
     *@override
     */
    _getLastPreFilterLayerElement(){
        constel=_getLastPreFilterLayerElement(this.$target);
        if(el){
            returnel;
        }
        returnthis._super(...arguments);
    },
});

options.registry.BackgroundShape.include({
    /**
     *TODOneedabettermanagementofbackgroundlayers
     *
     *@override
     */
    _getLastPreShapeLayerElement(){
        constel=this._super(...arguments);
        if(el){
            returnel;
        }
        return_getLastPreFilterLayerElement(this.$target);
    },
    /**
     *@override
     */
    _removeShapeEl(shapeEl){
        this.trigger_up('widgets_stop_request',{
            $target:$(shapeEl),
        });
        returnthis._super(...arguments);
    },
});

options.registry.BackgroundVideo=options.Class.extend({

    //--------------------------------------------------------------------------
    //Options
    //--------------------------------------------------------------------------

    /**
     *Setsthetarget'sbackgroundvideo.
     *
     *@seethis.selectClassforparameters
     */
    background:function(previewMode,widgetValue,params){
        if(previewMode==='reset'&&this.videoSrc){
            returnthis._setBgVideo(false,this.videoSrc);
        }
        returnthis._setBgVideo(previewMode,widgetValue);
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *@override
     */
    _computeWidgetState:function(methodName,params){
        if(methodName==='background'){
            if(this.$target[0].classList.contains('o_background_video')){
                returnthis.$('>.o_bg_video_containeriframe').attr('src');
            }
            return'';
        }
        returnthis._super(...arguments);
    },
    /**
     *Updatesthebackgroundvideousedbythesnippet.
     *
     *@private
     *@seethis.selectClassforparameters
     *@returns{Promise}
     */
    _setBgVideo:asyncfunction(previewMode,value){
        this.$('>.o_bg_video_container').toggleClass('d-none',previewMode===true);

        if(previewMode!==false){
            return;
        }

        this.videoSrc=value;
        vartarget=this.$target[0];
        target.classList.toggle('o_background_video',!!(value&&value.length));
        if(value&&value.length){
            target.dataset.bgVideoSrc=value;
        }else{
            deletetarget.dataset.bgVideoSrc;
        }
        awaitthis._refreshPublicWidgets();
    },
});

options.registry.OptionsTab=options.Class.extend({

    //--------------------------------------------------------------------------
    //Options
    //--------------------------------------------------------------------------

    /**
     *@seethis.selectClassforparameters
     */
    asyncconfigureApiKey(previewMode,widgetValue,params){
        returnnewPromise(resolve=>{
            this.trigger_up('gmap_api_key_request',{
                editableMode:true,
                reconfigure:true,
                onSuccess:()=>resolve(),
            });
        });
    },
    /**
     *@seethis.selectClassforparameters
     */
    asynccustomizeBodyBgType(previewMode,widgetValue,params){
        if(widgetValue==='NONE'){
            this.bodyImageType='image';
            returnthis.customizeBodyBg(previewMode,'',params);
        }
        //TODOimprove:hacktoclickonexternalimagepicker
        this.bodyImageType=widgetValue;
        constwidget=this._requestUserValueWidgets(params.imagepicker)[0];
        widget.enable();
    },
    /**
     *@override
     */
    asynccustomizeBodyBg(previewMode,widgetValue,params){
        //TODOimprove:customizetwovariablesatthesametime...
        awaitthis.customizeWebsiteVariable(previewMode,this.bodyImageType,{variable:'body-image-type'});
        awaitthis.customizeWebsiteVariable(previewMode,widgetValue?`'${widgetValue}'`:'',{variable:'body-image'});
    },
    /**
     *@seethis.selectClassforparameters
     */
    asyncopenCustomCodeDialog(previewMode,widgetValue,params){
        constlibsProm=this._loadLibs({
            jsLibs:[
                '/web/static/lib/ace/ace.js',
                '/web/static/lib/ace/mode-xml.js',
            ],
        });

        letwebsiteId;
        this.trigger_up('context_get',{
            callback:(ctx)=>{
                websiteId=ctx['website_id'];
            },
        });

        letwebsite;
        constdataProm=this._rpc({
            model:'website',
            method:'read',
            args:[[websiteId],['custom_code_head','custom_code_footer']],
        }).then(websites=>{
            website=websites[0];
        });

        letfieldName,title,contentText;
        if(widgetValue==='head'){
            fieldName='custom_code_head';
            title=_t('Customheadcode');
            contentText=_t('Entercodethatwillbeaddedintothe<head>ofeverypageofyoursite.');
        }else{
            fieldName='custom_code_footer';
            title=_t('Customendofbodycode');
            contentText=_t('Entercodethatwillbeaddedbeforethe</body>ofeverypageofyoursite.');
        }

        awaitPromise.all([libsProm,dataProm]);

        awaitnewPromise(resolve=>{
            const$content=$(core.qweb.render('website.custom_code_dialog_content',{
                contentText,
            }));
            constaceEditor=this._renderAceEditor($content.find('.o_ace_editor_container')[0],website[fieldName]||'');
            constdialog=newDialog(this,{
                title,
                $content,
                buttons:[
                    {
                        text:_t("Save"),
                        classes:'btn-primary',
                        click:async()=>{
                            awaitthis._rpc({
                                model:'website',
                                method:'write',
                                args:[
                                    [websiteId],
                                    {[fieldName]:aceEditor.getValue()},
                                ],
                            });
                        },
                        close:true,
                    },
                    {
                        text:_t("Discard"),
                        close:true,
                    },
                ],
            });
            dialog.on('closed',this,resolve);
            dialog.open();
        });
    },
    /**
     *@seethis.selectClassforparameters
     */
    asyncswitchTheme(previewMode,widgetValue,params){
        constsave=awaitnewPromise(resolve=>{
            Dialog.confirm(this,_t("Changingthemerequirestoleavetheeditor.Thiswillsaveallyourchanges,areyousureyouwanttoproceed?Becarefulthatchangingthethemewillresetallyourcolorcustomizations."),{
                confirm_callback:()=>resolve(true),
                cancel_callback:()=>resolve(false),
            });
        });
        if(!save){
            return;
        }
        this.trigger_up('request_save',{
            reload:false,
            onSuccess:()=>window.location.href='/web#action=website.theme_install_kanban_action',
        });
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *@override
     */
    async_checkIfWidgetsUpdateNeedWarning(widgets){
        constwarningMessage=awaitthis._super(...arguments);
        if(warningMessage){
            returnwarningMessage;
        }
        for(constwidgetofwidgets){
            if(widget.getMethodsNames().includes('customizeWebsiteVariable')
                    &&widget.getMethodsParams('customizeWebsiteVariable').variable==='color-palettes-number'){
                consthasCustomizedColors=weUtils.getCSSVariableValue('has-customized-colors');
                if(hasCustomizedColors&&hasCustomizedColors!=='false'){
                    return_t("Changingthecolorpalettewillresetallyourcolorcustomizations,areyousureyouwanttoproceed?");
                }
            }
        }
        return'';
    },
    /**
     *@override
     */
    async_computeWidgetState(methodName,params){
        if(methodName==='customizeBodyBgType'){
            constbgImage=$('#wrapwrap').css('background-image');
            if(bgImage==='none'){
                return"NONE";
            }
            returnweUtils.getCSSVariableValue('body-image-type');
        }
        returnthis._super(...arguments);
    },
    /**
     *@override
     */
    async_computeWidgetVisibility(widgetName,params){
        if(widgetName==='body_bg_image_opt'){
            returnfalse;
        }
        returnthis._super(...arguments);
    },
    /**
     *@private
     *@param{DOMElement}node
     *@param{String}contenttextoftheeditor
     *@returns{Object}
     */
    _renderAceEditor(node,content){
        constaceEditor=window.ace.edit(node);
        aceEditor.setTheme('ace/theme/monokai');
        aceEditor.setValue(content,1);
        aceEditor.setOptions({
            minLines:20,
            maxLines:Infinity,
            showPrintMargin:false,
        });
        aceEditor.renderer.setOptions({
            highlightGutterLine:true,
            showInvisibles:true,
            fontSize:14,
        });

        constaceSession=aceEditor.getSession();
        aceSession.setOptions({
            mode:"ace/mode/xml",
            useWorker:false,
        });
        returnaceEditor;
    },
    /**
     *@override
     */
    async_renderCustomXML(uiFragment){
        uiFragment.querySelectorAll('we-colorpicker').forEach(el=>{
            el.dataset.lazyPalette='true';
        });
    },
});

options.registry.ThemeColors=options.registry.OptionsTab.extend({
    /**
     *@override
     */
    asyncstart(){
        //Checksforsupportoftheoldcolorsystem
        conststyle=window.getComputedStyle(document.documentElement);
        constsupportOldColorSystem=weUtils.getCSSVariableValue('support-13-0-color-system',style)==='true';
        consthasCustomizedOldColorSystem=weUtils.getCSSVariableValue('has-customized-13-0-color-system',style)==='true';
        this._showOldColorSystemWarning=supportOldColorSystem&&hasCustomizedOldColorSystem;

        returnthis._super(...arguments);
    },

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *@override
     */
    asyncupdateUIVisibility(){
        awaitthis._super(...arguments);
        constoldColorSystemEl=this.el.querySelector('.o_old_color_system_warning');
        oldColorSystemEl.classList.toggle('d-none',!this._showOldColorSystemWarning);
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *@override
     */
    async_renderCustomXML(uiFragment){
        constpaletteSelectorEl=uiFragment.querySelector('[data-variable="color-palettes-number"]');
        conststyle=window.getComputedStyle(document.documentElement);
        constnbPalettes=parseInt(weUtils.getCSSVariableValue('number-of-color-palettes',style));
        for(leti=1;i<=nbPalettes;i++){
            constbtnEl=document.createElement('we-button');
            btnEl.classList.add('o_palette_color_preview_button');
            btnEl.dataset.customizeWebsiteVariable=i;
            for(letc=1;c<=5;c++){
                constcolorPreviewEl=document.createElement('span');
                colorPreviewEl.classList.add('o_palette_color_preview');
                constcolor=weUtils.getCSSVariableValue(`o-palette-${i}-o-color-${c}`,style);
                colorPreviewEl.style.backgroundColor=color;
                btnEl.appendChild(colorPreviewEl);
            }
            paletteSelectorEl.appendChild(btnEl);
        }

        for(leti=1;i<=5;i++){
            constcollapseEl=document.createElement('we-collapse');
            constccPreviewEl=$(qweb.render('web_editor.color.combination.preview'))[0];
            ccPreviewEl.classList.add('text-center',`o_cc${i}`);
            collapseEl.appendChild(ccPreviewEl);
            consteditionEls=$(qweb.render('website.color_combination_edition',{number:i}));
            for(constelofeditionEls){
                collapseEl.appendChild(el);
            }
            uiFragment.appendChild(collapseEl);
        }

        awaitthis._super(...arguments);
    },
});

options.registry.menu_data=options.Class.extend({
    /**
     *@override
     */
    asyncstart(){
        awaitthis._super(...arguments);
        this.isWebsiteDesigner=awaitthis._rpc({
            'model':'res.users',
            'method':'has_group',
            'args':['website.group_website_designer'],
        });
    },
    /**
     *Whentheusersselectsamenu,adialogisopenedtoaskhimifhewants
     *tofollowthelink(andleaveeditor),editthemenuordonothing.
     *
     *@override
     */
    onFocus:function(){
        varself=this;
        constbuttons=[
            {
                text:_t("GotoLink"),classes:'btn-primary',click:function(){
                    self.trigger_up('request_save',{
                        reload:false,
                        onSuccess:function(){
                            window.location.href=self.$target.attr('href');
                        },
                    });
                },
            },
        ];
        if(this.isWebsiteDesigner){
            buttons.push({
                text:_t("Editthemenu"),classes:'btn-primary',click:function(){
                    this.trigger_up('action_demand',{
                        actionName:'edit_menu',
                        params:[
                            function(){
                                varprom=newPromise(function(resolve,reject){
                                    self.trigger_up('request_save',{
                                        onSuccess:resolve,
                                        onFailure:reject,
                                    });
                                });
                                returnprom;
                            },
                        ],
                    });
                },
            });
        }
        buttons.push({text:_t("Stayonthispage"),close:true});

        (newDialog(this,{
            title:_t("Confirmation"),
            $content:$(core.qweb.render('website.leaving_current_page_edition')),
            buttons:buttons,
        })).open();
    },
});

options.registry.company_data=options.Class.extend({
    /**
     *FetchesdatatodeterminetheURLwheretheusercanedititscompany
     *data.Savestheinfointheprototypetodothisonlyonce.
     *
     *@override
     */
    start:function(){
        varproto=options.registry.company_data.prototype;
        varprom;
        varself=this;
        if(proto.__link===undefined){
            prom=this._rpc({route:'/web/session/get_session_info'}).then(function(session){
                returnself._rpc({
                    model:'res.users',
                    method:'read',
                    args:[session.uid,['company_id']],
                });
            }).then(function(res){
                proto.__link='/web#action=base.action_res_company_form&view_type=form&id='+encodeURIComponent(res&&res[0]&&res[0].company_id[0]||1);
            });
        }
        returnPromise.all([this._super.apply(this,arguments),prom]);
    },
    /**
     *Whentheusersselectscompanydata,opensadialogtoaskhimifhe
     *wantstoberedirectedtothecompanyformviewtoeditit.
     *
     *@override
     */
    onFocus:function(){
        varself=this;
        varproto=options.registry.company_data.prototype;

        Dialog.confirm(this,_t("Doyouwanttoeditthecompanydata?"),{
            confirm_callback:function(){
                self.trigger_up('request_save',{
                    reload:false,
                    onSuccess:function(){
                        window.location.href=proto.__link;
                    },
                });
            },
        });
    },
});

options.registry.Carousel=options.Class.extend({
    /**
     *@override
     */
    start:function(){
        this.$target.carousel('pause');
        this.$indicators=this.$target.find('.carousel-indicators');
        this.$controls=this.$target.find('.carousel-control-prev,.carousel-control-next,.carousel-indicators');

        //Preventenablingthecarouseloverlaywhenclickingonthecarousel
        //controls(indeedwewantittochangethecarouselslidethenenable
        //theslideoverlay)+See"CarouselItem"option.
        this.$controls.addClass('o_we_no_overlay');

        let_slideTimestamp;
        this.$target.on('slide.bs.carousel.carousel_option',()=>{
            _slideTimestamp=window.performance.now();
            setTimeout(()=>this.trigger_up('hide_overlay'));
        });
        this.$target.on('slid.bs.carousel.carousel_option',()=>{
            //slid.bs.carouselismostofthetimefiredtoosoonbybootstrap
            //sinceitemulatesthetransitionEndwithasetTimeout.Wewait
            //hereanextra20%ofthetimebeforeretargetingedition,which
            //shouldbeenough...
            const_slideDuration=(window.performance.now()-_slideTimestamp);
            setTimeout(()=>{
                this.trigger_up('activate_snippet',{
                    $snippet:this.$target.find('.carousel-item.active'),
                    ifInactiveOptions:true,
                });
                this.$target.trigger('active_slide_targeted');
            },0.2*_slideDuration);
        });

        returnthis._super.apply(this,arguments);
    },
    /**
     *@override
     */
    destroy:function(){
        this._super.apply(this,arguments);
        this.$target.off('.carousel_option');
    },
    /**
     *@override
     */
    onBuilt:function(){
        this._assignUniqueID();
    },
    /**
     *@override
     */
    onClone:function(){
        this._assignUniqueID();
    },
    /**
     *@override
     */
    cleanForSave:function(){
        const$items=this.$target.find('.carousel-item');
        $items.removeClass('nextprevleftrightactive').first().addClass('active');
        this.$indicators.find('li').removeClass('active').empty().first().addClass('active');
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *CreatesauniqueIDforthecarouselandreassigndata-attributesthat
     *dependonit.
     *
     *@private
     */
    _assignUniqueID:function(){
        constid='myCarousel'+Date.now();
        this.$target.attr('id',id);
        this.$target.find('[data-target]').attr('data-target','#'+id);
        _.each(this.$target.find('[data-slide],[data-slide-to]'),function(el){
            var$el=$(el);
            if($el.attr('data-target')){
                $el.attr('data-target','#'+id);
            }elseif($el.attr('href')){
                $el.attr('href','#'+id);
            }
        });
    },
});

options.registry.CarouselItem=options.Class.extend({
    isTopOption:true,
    forceNoDeleteButton:true,

    /**
     *@override
     */
    start:function(){
        this.$carousel=this.$target.closest('.carousel');
        this.$indicators=this.$carousel.find('.carousel-indicators');
        this.$controls=this.$carousel.find('.carousel-control-prev,.carousel-control-next,.carousel-indicators');

        varleftPanelEl=this.$overlay.data('$optionsSection')[0];
        vartitleTextEl=leftPanelEl.querySelector('we-title>span');
        this.counterEl=document.createElement('span');
        titleTextEl.appendChild(this.counterEl);

        returnthis._super(...arguments);
    },
    /**
     *@override
     */
    destroy:function(){
        this._super(...arguments);
        this.$carousel.off('.carousel_item_option');
    },

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *Updatestheslidecounter.
     *
     *@override
     */
    updateUI:asyncfunction(){
        awaitthis._super(...arguments);
        const$items=this.$carousel.find('.carousel-item');
        const$activeSlide=$items.filter('.active');
        constupdatedText=`(${$activeSlide.index()+1}/${$items.length})`;
        this.counterEl.textContent=updatedText;
    },

    //--------------------------------------------------------------------------
    //Options
    //--------------------------------------------------------------------------

    /**
     *Addsaslide.
     *
     *@seethis.selectClassforparameters
     */
    addSlide:function(previewMode){
        const$items=this.$carousel.find('.carousel-item');
        this.$controls.removeClass('d-none');
        this.$indicators.append($('<li>',{
            'data-target':'#'+this.$carousel.attr('id'),
            'data-slide-to':$items.length,
        }));
        this.$indicators.append('');
        //Needtoremoveeditordatafromtheclonesoitgetsitsown.
        const$active=$items.filter('.active');
        $active.clone(false)
            .removeClass('active')
            .insertAfter($active);
        this.$carousel.carousel('next');
    },
    /**
     *Removesthecurrentslide.
     *
     *@seethis.selectClassforparameters.
     */
    removeSlide:function(previewMode){
        const$items=this.$carousel.find('.carousel-item');
        constnewLength=$items.length-1;
        if(!this.removing&&newLength>0){
            //Theactiveindicatorisdeletedtoensurethattheother
            //indicatorswillstillworkafterthedeletion.
            const$toDelete=$items.filter('.active').add(this.$indicators.find('.active'));
            this.$carousel.one('active_slide_targeted.carousel_item_option',()=>{
                $toDelete.remove();
                //Toensuretheproperfunctioningoftheindicators,their
                //attributesmustreflectthepositionoftheslides.
                constindicatorsEls=this.$indicators[0].querySelectorAll('li');
                for(leti=0;i<indicatorsEls.length;i++){
                    indicatorsEls[i].setAttribute('data-slide-to',i);
                }
                this.$controls.toggleClass('d-none',newLength===1);
                this.$carousel.trigger('content_changed');
                this.removing=false;
            });
            this.removing=true;
            this.$carousel.carousel('prev');
        }
    },
    /**
     *Goestonextslideorpreviousslide.
     *
     *@seethis.selectClassforparameters
     */
    slide:function(previewMode,widgetValue,params){
        switch(widgetValue){
            case'left':
                this.$controls.filter('.carousel-control-prev')[0].click();
                break;
            case'right':
                this.$controls.filter('.carousel-control-next')[0].click();
                break;
        }
    },
});

options.registry.sizing_x=options.registry.sizing.extend({
    /**
     *@override
     */
    onClone:function(options){
        this._super.apply(this,arguments);
        //Belowconditionisaddedtoremoveoffsetoftargetelementonly
        //andnotitschildrentoavoiddesignalterationofacontainer/block.
        if(options.isCurrent){
            var_class=this.$target.attr('class').replace(/\s*(offset-xl-|offset-lg-)([0-9-]+)/g,'');
            this.$target.attr('class',_class);
        }
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *@override
     */
    _getSize:function(){
        varwidth=this.$target.closest('.row').width();
        vargridE=[1,2,3,4,5,6,7,8,9,10,11,12];
        vargridW=[0,1,2,3,4,5,6,7,8,9,10,11];
        this.grid={
            e:[_.map(gridE,v=>('col-lg-'+v)),_.map(gridE,v=>width/12*v),'width'],
            w:[_.map(gridW,v=>('offset-lg-'+v)),_.map(gridW,v=>width/12*v),'margin-left'],
        };
        returnthis.grid;
    },
    /**
     *@override
     */
    _onResize:function(compass,beginClass,current){
        if(compass==='w'||compass==='e'){
            constbeginOffset=Number(beginClass.match(/offset-lg-([0-9-]+)|$/)[1]||beginClass.match(/offset-xl-([0-9-]+)|$/)[1]||0);

            if(compass==='w'){
                //don'tchangetherightborderpositionwhenwechangetheoffset(replacecolsize)
                varbeginCol=Number(beginClass.match(/col-lg-([0-9]+)|$/)[1]||0);
                varoffset=Number(this.grid.w[0][current].match(/offset-lg-([0-9-]+)|$/)[1]||0);
                if(offset<0){
                    offset=0;
                }
                varcolSize=beginCol-(offset-beginOffset);
                if(colSize<=0){
                    colSize=1;
                    offset=beginOffset+beginCol-1;
                }
                this.$target.attr('class',this.$target.attr('class').replace(/\s*(offset-xl-|offset-lg-|col-lg-)([0-9-]+)/g,''));

                this.$target.addClass('col-lg-'+(colSize>12?12:colSize));
                if(offset>0){
                    this.$target.addClass('offset-lg-'+offset);
                }
            }elseif(beginOffset>0){
                constendCol=Number(this.grid.e[0][current].match(/col-lg-([0-9]+)|$/)[1]||0);
                //Avoidsoverflowingthegridtotherightifthe
                //columnsize+theoffsetexceeds12.
                if((endCol+beginOffset)>12){
                    this.$target[0].className=this.$target[0].className.replace(/\s*(col-lg-)([0-9-]+)/g,'');
                    this.$target[0].classList.add('col-lg-'+(12-beginOffset));
                }
            }
        }
        this._super.apply(this,arguments);
    },
});

options.registry.layout_column=options.Class.extend({

    //--------------------------------------------------------------------------
    //Options
    //--------------------------------------------------------------------------

    /**
     *Changesthenumberofcolumns.
     *
     *@seethis.selectClassforparameters
     */
    selectCount:asyncfunction(previewMode,widgetValue,params){
        constpreviousNbColumns=this.$('>.row').children().length;
        let$row=this.$('>.row');
        if(!$row.length){
            $row=this.$target.contents().wrapAll($('<divclass="row"><divclass="col-lg-12"/></div>')).parent().parent();
        }

        constnbColumns=parseInt(widgetValue);
        awaitthis._updateColumnCount($row,(nbColumns||1)-$row.children().length);
        //YieldUIthreadtowaitforeventtobubblebeforeactivate_snippetiscalled.
        //Inthiscasethisletstheselecthandletheclickeventbeforeweswitchsnippet.
        //TODO:makethismoregenericinactivate_snippeteventhandler.
        awaitnewPromise(resolve=>setTimeout(resolve));
        if(nbColumns===0){
            $row.contents().unwrap().contents().unwrap();
            this.trigger_up('activate_snippet',{$snippet:this.$target});
        }elseif(previousNbColumns===0){
            this.trigger_up('activate_snippet',{$snippet:this.$('>.row').children().first()});
        }
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *@override
     */
    _computeWidgetState:function(methodName,params){
        if(methodName==='selectCount'){
            returnthis.$('>.row').children().length;
        }
        returnthis._super(...arguments);
    },
    /**
     *@override
     */
    _computeWidgetVisibility(widgetName,params){
        if(widgetName==='zero_cols_opt'){
            //Note:"s_allow_columns"indicatescontainerswhichmayhave
            //barecontent(withoutcolumns)andareallowedtohavecolumns.
            //Byextension,weonlyshowthe"None"optiononelementsthat
            //weremarkedassuchastheywereallowedtohavebarecontentin
            //thefirstplace.
            returnthis.$target.is('.s_allow_columns');
        }
        returnthis._super(...arguments);
    },
    /**
     *Addsnewcolumnswhichareclonesofthelastcolumnorremovesthe
     *lastxcolumns.
     *
     *@private
     *@param{jQuery}$row-therowinwhichtoupdatethecolumns
     *@param{integer}count-positiftoadd,negativetoremove
     */
    _updateColumnCount:asyncfunction($row,count){
        if(!count){
            return;
        }

        if(count>0){
            var$lastColumn=$row.children().last();
            for(vari=0;i<count;i++){
                awaitnewPromise(resolve=>{
                    this.trigger_up('clone_snippet',{$snippet:$lastColumn,onSuccess:resolve});
                });
            }
        }else{
            varself=this;
            for(constelof$row.children().slice(count)){
                awaitnewPromise(resolve=>{
                    self.trigger_up('remove_snippet',{$snippet:$(el),onSuccess:resolve});
                });
            }
        }

        this._resizeColumns($row.children());
        this.trigger_up('cover_update');
    },
    /**
     *Resizesthecolumnssothattheyarekeptononerow.
     *
     *@private
     *@param{jQuery}$columns-thecolumnstoresize
     */
    _resizeColumns:function($columns){
        constcolsLength=$columns.length;
        varcolSize=Math.floor(12/colsLength)||1;
        varcolOffset=Math.floor((12-colSize*colsLength)/2);
        varcolClass='col-lg-'+colSize;
        _.each($columns,function(column){
            var$column=$(column);
            $column.attr('class',$column.attr('class').replace(/\b(col|offset)-lg(-\d+)?\b/g,''));
            $column.addClass(colClass);
        });
        if(colOffset){
            $columns.first().addClass('offset-lg-'+colOffset);
        }
    },
});

options.registry.Parallax=options.Class.extend({
    /**
     *@override
     */
    asyncstart(){
        this.parallaxEl=this.$target.find('>.s_parallax_bg')[0]||null;
        this._updateBackgroundOptions();

        this.$target.on('content_changed.ParallaxOption',this._onExternalUpdate.bind(this));

        returnthis._super(...arguments);
    },
    /**
     *@override
     */
    onFocus(){
        //Refreshtheparallaxanimationonfocus;atleastusefulbecause
        //theremayhavebeenchangesinthepagethatinfluencedtheparallax
        //rendering(newsnippets,...).
        //TODOmakethisautomatic.
        if(this.parallaxEl){
            this._refreshPublicWidgets();
        }
    },
    /**
     *@override
     */
    onMove(){
        this._refreshPublicWidgets();
    },
    /**
     *@override
     */
    destroy(){
        this._super(...arguments);
        this.$target.off('.ParallaxOption');
    },

    //--------------------------------------------------------------------------
    //Options
    //--------------------------------------------------------------------------

    /**
     *Build/removeparallax.
     *
     *@seethis.selectClassforparameters
     */
    asyncselectDataAttribute(previewMode,widgetValue,params){
        awaitthis._super(...arguments);
        if(params.attributeName!=='scrollBackgroundRatio'){
            return;
        }

        constisParallax=(widgetValue!=='0');
        this.$target.toggleClass('parallax',isParallax);
        this.$target.toggleClass('s_parallax_is_fixed',widgetValue==='1');
        this.$target.toggleClass('s_parallax_no_overflow_hidden',(widgetValue==='0'||widgetValue==='1'));
        if(isParallax){
            if(!this.parallaxEl){
                this.parallaxEl=document.createElement('span');
                this.parallaxEl.classList.add('s_parallax_bg');
                this.$target.prepend(this.parallaxEl);
            }
        }else{
            if(this.parallaxEl){
                this.parallaxEl.remove();
                this.parallaxEl=null;
            }
        }

        this._updateBackgroundOptions();
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *@override
     */
    async_computeVisibility(widgetName){
        return!this.$target.hasClass('o_background_video');
    },
    /**
     *@override
     */
    async_computeWidgetState(methodName,params){
        if(methodName==='selectDataAttribute'&&params.parallaxTypeOpt){
            constattrName=params.attributeName;
            constattrValue=(this.$target[0].dataset[attrName]||params.attributeDefaultValue).trim();
            switch(attrValue){
                case'0':
                case'1':{
                    returnattrValue;
                }
                default:{
                    return(attrValue.startsWith('-')?'-1.5':'1.5');
                }
            }
        }
        returnthis._super(...arguments);
    },
    /**
     *Updatesexternalbackground-relatedoptiontoworkwiththeparallax
     *elementinsteadoftheoriginaltargetwhennecessary.
     *
     *@private
     */
    _updateBackgroundOptions(){
        this.trigger_up('option_update',{
            optionNames:['BackgroundImage','BackgroundPosition','BackgroundOptimize'],
            name:'target',
            data:this.parallaxEl?$(this.parallaxEl):this.$target,
        });
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *Calledonanysnippetupdatetocheckiftheparallaxshouldstillbe
     *enabledornot.
     *
     *TODOthereisprobablyabettersystemtoimplementtosolvethisissue.
     *
     *@private
     *@param{Event}ev
     */
    _onExternalUpdate(ev){
        if(!this.parallaxEl){
            return;
        }
        constbgImage=this.parallaxEl.style.backgroundImage;
        if(!bgImage||bgImage==='none'||this.$target.hasClass('o_background_video')){
            //Theparallaxoptionwasenabledbutthebackgroundimagewas
            //removed:disabletheparallaxoption.
            constwidget=this._requestUserValueWidgets('parallax_none_opt')[0];
            widget.enable();
            widget.getParent().close();//FIXMEremovethisuglyhackasap
        }
    },
});

options.registry.collapse=options.Class.extend({
    /**
     *@override
     */
    start:function(){
        varself=this;
        this.$target.on('shown.bs.collapsehidden.bs.collapse','[role="tabpanel"]',function(){
            self.trigger_up('cover_update');
            self.$target.trigger('content_changed');
        });
        returnthis._super.apply(this,arguments);
    },
    /**
     *@override
     */
    onBuilt:function(){
        this._createIDs();
    },
    /**
     *@override
     */
    onClone:function(){
        this._createIDs();
    },
    /**
     *@override
     */
    onMove:function(){
        this._createIDs();
        var$panel=this.$target.find('.collapse').removeData('bs.collapse');
        if($panel.attr('aria-expanded')==='true'){
            $panel.closest('.accordion').find('.collapse[aria-expanded="true"]')
                .filter((i,el)=>(el!==$panel[0]))
                .collapse('hide')
                .one('hidden.bs.collapse',function(){
                    $panel.trigger('shown.bs.collapse');
                });
        }
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *Associatesuniqueidsoncollapseelements.
     *
     *@private
     */
    _createIDs:function(){
        lettime=newDate().getTime();
        const$tablist=this.$target.closest('[role="tablist"]');
        const$tab=this.$target.find('[role="tab"]');
        const$panel=this.$target.find('[role="tabpanel"]');

        constsetUniqueId=($elem,label)=>{
            letelemId=$elem.attr('id');
            if(!elemId||$('[id="'+elemId+'"]').length>1){
                do{
                    time++;
                    elemId=label+time;
                }while($('#'+elemId).length);
                $elem.attr('id',elemId);
            }
            returnelemId;
        };

        consttablistId=setUniqueId($tablist,'myCollapse');
        $panel.attr('data-parent','#'+tablistId);
        $panel.data('parent','#'+tablistId);

        constpanelId=setUniqueId($panel,'myCollapseTab');
        $tab.attr('data-target','#'+panelId);
        $tab.data('target','#'+panelId);
    },
});

options.registry.HeaderNavbar=options.Class.extend({
    /**
     *Particularcase:wewanttheoptiontobeassociatedontheheadernavbar
     *inXMLsothattherelatedoptionsonlyappearonnavbarclick(not
     *header),inadifferentsection,etc...butwestillwantthetargetto
     *betheheaderitself.
     *
     *@constructor
     */
    init(){
        this._super(...arguments);
        //Don'tusesetTarget,wewantittobesetdirectlyatinitialization.
        this.$target=this.$target.closest('#wrapwrap>header');
    },

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *@override
     */
    asyncstart(){
        awaitthis._super(...arguments);
        //TODORemoveinmaster.
        constsignInOptionEl=this.el.querySelector('[data-customize-website-views="portal.user_sign_in"]');
        signInOptionEl.dataset.noPreview='true';
    },
    /**
     *@private
     */
    asyncupdateUI(){
        awaitthis._super(...arguments);
        //Forallheadertemplatesexceptthoseinthefollowingarray,change
        //thelabeloftheoptionto"MobileAlignment"(insteadof
        //"Alignment")becauseitonlyimpactsthemobileview.
        if(!["'default'","'hamburger'","'sidebar'","'magazine'","'hamburger-full'"]
            .includes(weUtils.getCSSVariableValue("header-template"))){
            constalignmentOptionTitleEl=this.el.querySelector('[data-name="header_alignment_opt"]we-title');
            alignmentOptionTitleEl.textContent=_t("MobileAlignment");
        }
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *Needstobedonemanuallyfornowbecausedata-dependencies
     *doesn'tworkwith"AND"conditions.
     *TODO:improvethis.
     *
     *@override
     */
    async_computeWidgetVisibility(widgetName,params){
        if(widgetName==='option_logo_height_scrolled'){
            return!!this.$('.navbar-brand').length;
        }
        if(widgetName==='header_alignment_opt'){
            if(!this.$target[0].querySelector('.o_offcanvas_menu_toggler')){
                //Ifhamburgertypeis"Default",hidesthealignmentoption
                //for"hamburgerfull"and"magazine"headertemplates.
                return!this.$target[0].querySelector('#oe_structure_header_hamburger_full_1,#oe_structure_header_magazine_1');
            }
            returntrue;
        }
        returnthis._super(...arguments);
    },
});

constVisibilityPageOptionUpdate=options.Class.extend({
    pageOptionName:undefined,
    showOptionWidgetName:undefined,
    shownValue:'',

    /**
     *@override
     */
    asyncstart(){
        awaitthis._super(...arguments);
        //WhenenteringeditmodeviatheURL(enable_editor)theWebsiteNavbar
        //isnotyetReadyForActionsbecauseitiswaitingforits
        //sub-componentEditPageMenutostarteditmode.Theninvisibleblocks
        //optionsstart(sothisoptiontoo).ButforisShown()towork,the
        //navbarmustbeReadyForActions.Thisisthereasonwhywecan'twait
        //forisShownhere,otherwisewewouldhaveadeadlock.Ononehandthe
        //navbarwaitingfortheinvisiblesnippetsoptionstobestartedtobe
        //ReadyForActionsandontheotherhandthisoptionwhichneedsthe
        //navbartobeReadyForActionstobestarted.
        //TODOinmaster:Usethedata-invisiblesystemtogetridofthis
        //pieceofcode.
        this._isShown().then(isShown=>{
            this.trigger_up('snippet_option_visibility_update',{show:isShown});
        });
    },
    /**
     *@override
     */
    asynconTargetShow(){
        if(awaitthis._isShown()){
            //onTargetShowmaybecalledeveniftheelementisalreadyshown.
            //Inmostcases,thisisnotaproblembuthereitisasthecode
            //thatfollowsclicksonthevisibilitycheckboxregardlessofits
            //status.Thisavoidssearchingforthatcheckboxentirely.
            return;
        }
        //TODOimprove:herewemakeahacksothatifwemaketheinvisible
        //headerappearforedition,itsactualvisibilityforthepageis
        //toggled(otherwiseitwouldbeabouteditinganelementwhich
        //isactuallyneverdisplayedonthepage).
        constwidget=this._requestUserValueWidgets(this.showOptionWidgetName)[0];
        widget.enable();
    },

    //--------------------------------------------------------------------------
    //Options
    //--------------------------------------------------------------------------

    /**
     *@seethis.selectClassforparams
     */
    asyncvisibility(previewMode,widgetValue,params){
        constshow=(widgetValue!=='hidden');
        awaitnewPromise(resolve=>{
            this.trigger_up('action_demand',{
                actionName:'toggle_page_option',
                params:[{name:this.pageOptionName,value:show}],
                onSuccess:()=>resolve(),
            });
        });
        this.trigger_up('snippet_option_visibility_update',{show:show});
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *@override
     */
    async_computeWidgetState(methodName,params){
        if(methodName==='visibility'){
            constshown=awaitthis._isShown();
            returnshown?this.shownValue:'hidden';
        }
        returnthis._super(...arguments);
    },
    /**
     *@private
     *@returns{boolean}
     */
    async_isShown(){
        returnnewPromise(resolve=>{
            this.trigger_up('action_demand',{
                actionName:'get_page_option',
                params:[this.pageOptionName],
                onSuccess:v=>resolve(!!v),
            });
        });
    },
});

options.registry.TopMenuVisibility=VisibilityPageOptionUpdate.extend({
    pageOptionName:'header_visible',
    showOptionWidgetName:'regular_header_visibility_opt',

    //--------------------------------------------------------------------------
    //Options
    //--------------------------------------------------------------------------

    /**
     *Handlestheswitchingbetween3differentsvisibilitiesoftheheader.
     *
     *@seethis.selectClassforparams
     */
    asyncvisibility(previewMode,widgetValue,params){
        awaitthis._super(...arguments);
        awaitthis._changeVisibility(widgetValue);
        //TODOthisishackybutchangingtheheadervisibilitymayhavean
        //effectonfeatureslikeFullScreenHeightwhichdependonviewport
        //sizesowesimulatearesize.
        $(window).trigger('resize');
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *@override
     */
    async_changeVisibility(widgetValue){
        constshow=(widgetValue!=='hidden');
        if(!show){
            return;
        }
        consttransparent=(widgetValue==='transparent');
        awaitnewPromise(resolve=>{
            this.trigger_up('action_demand',{
                actionName:'toggle_page_option',
                params:[{name:'header_overlay',value:transparent}],
                onSuccess:()=>resolve(),
            });
        });
        if(!transparent){
            return;
        }
        awaitnewPromise(resolve=>{
            this.trigger_up('action_demand',{
                actionName:'toggle_page_option',
                params:[{name:'header_color',value:''}],
                onSuccess:()=>resolve(),
            });
        });
    },
    /**
     *@override
     */
    async_computeWidgetState(methodName,params){
        const_super=this._super.bind(this);
        if(methodName==='visibility'){
            this.shownValue=awaitnewPromise(resolve=>{
                this.trigger_up('action_demand',{
                    actionName:'get_page_option',
                    params:['header_overlay'],
                    onSuccess:v=>resolve(v?'transparent':'regular'),
                });
            });
        }
        return_super(...arguments);
    },
    /**
     *@override
     */
    _computeWidgetVisibility(widgetName,params){
        if(widgetName==='header_visibility_opt'){
            returnthis.$target[0].classList.contains('o_header_sidebar')?'':'true';
        }
        returnthis._super(...arguments);
    },
    /**
     *@override
     */
    _renderCustomXML(uiFragment){
        //TODOinmaster:putthisintheXML.
        constweSelectEl=uiFragment.querySelector('we-select#option_header_visibility');
        if(weSelectEl){
            weSelectEl.dataset.name='header_visibility_opt';
        }
    },
});

options.registry.topMenuColor=options.Class.extend({

    //--------------------------------------------------------------------------
    //Options
    //--------------------------------------------------------------------------

    /**
     *@override
     */
    asyncselectStyle(previewMode,widgetValue,params){
        awaitthis._super(...arguments);
        constclassName=widgetValue?(params.colorPrefix+widgetValue):'';
        awaitnewPromise((resolve,reject)=>{
            this.trigger_up('action_demand',{
                actionName:'toggle_page_option',
                params:[{name:'header_color',value:className}],
                onSuccess:resolve,
                onFailure:reject,
            });
        });
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *@override
     */
    _computeVisibility:asyncfunction(){
        constshow=awaitthis._super(...arguments);
        if(!show){
            returnfalse;
        }
        returnnewPromise(resolve=>{
            this.trigger_up('action_demand',{
                actionName:'get_page_option',
                params:['header_overlay'],
                onSuccess:value=>resolve(!!value),
            });
        });
    },
});

/**
 *Managethevisibilityofsnippetsonmobile.
 */
options.registry.MobileVisibility=options.Class.extend({

    //--------------------------------------------------------------------------
    //Options
    //--------------------------------------------------------------------------

    /**
     *Allowstoshoworhidetheassociatedsnippetinmobiledisplaymode.
     *
     *@seethis.selectClassforparameters
     */
    showOnMobile(previewMode,widgetValue,params){
        //Forcompatibilitywithformerimplementation:removethepreviously
        //added`d-md-*`classifany,asitshouldnowbe`d-lg-*`.
        if(widgetValue){
            this.$target[0].classList.remove(`d-md-${this.$target.css('display')}`);
        }
        constclasses=`d-noned-lg-${this.$target.css('display')}`;
        this.$target.toggleClass(classes,!widgetValue);
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *@override
     */
    async_computeWidgetState(methodName,params){
        if(methodName==='showOnMobile'){
            constclassList=[...this.$target[0].classList];
            returnclassList.includes('d-none')&&
                classList.some(className=>className.match(/^(d-md-|d-lg-)/g))?'':'true';
        }
        returnawaitthis._super(...arguments);
    },
});

/**
 *Hide/showfooterinthecurrentpage.
 */
options.registry.HideFooter=VisibilityPageOptionUpdate.extend({
    pageOptionName:'footer_visible',
    showOptionWidgetName:'hide_footer_page_opt',
    shownValue:'shown',
});

/**
 *Handlestheeditionofsnippet'sanchorname.
 */
options.registry.anchor=options.Class.extend({
    isTopOption:true,

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *@override
     */
    start:function(){
        //Generateanchorandcopyittoclipboardonclick,showthetooltiponsuccess
        this.$button=this.$el.find('we-button');
        constclipboard=newClipboardJS(this.$button[0],{text:()=>this._getAnchorLink()});
        clipboard.on('success',()=>{
            this.displayNotification({
              type:'success',
              message:_.str.sprintf(_t("Anchorcopiedtoclipboard<br>Link:%s"),this._getAnchorLink()),
              buttons:[{text:_t("Edit"),click:()=>this.openAnchorDialog(),primary:true}],
            });
        });

        returnthis._super.apply(this,arguments);
    },
    /**
     *@override
     */
    onClone:function(){
        this.$target.removeAttr('data-anchor');
        this.$target.filter(':not(.carousel)').removeAttr('id');
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------
    /**
     *@seethis.selectClassforparameters
     */
    openAnchorDialog:function(previewMode,widgetValue,params){
        varself=this;
        varbuttons=[{
            text:_t("Save&copy"),
            classes:'btn-primary',
            click:function(){
                var$input=this.$('.o_input_anchor_name');
                varanchorName=self._text2Anchor($input.val());
                if(self.$target[0].id===anchorName){
                    //Ifthechosenanchornameisalreadytheoneusedbythe
                    //element,closethedialoganddonothingelse
                    this.close();
                    return;
                }

                constalreadyExists=!!document.getElementById(anchorName);
                this.$('.o_anchor_already_exists').toggleClass('d-none',!alreadyExists);
                $input.toggleClass('is-invalid',alreadyExists);
                if(!alreadyExists){
                    self._setAnchorName(anchorName);
                    this.close();
                    self.$button[0].click();
                }
            },
        },{
            text:_t("Discard"),
            close:true,
        }];
        if(this.$target.attr('id')){
            buttons.push({
                text:_t("Remove"),
                classes:'btn-linkml-auto',
                icon:'fa-trash',
                close:true,
                click:function(){
                    self._setAnchorName();
                },
            });
        }
        newDialog(this,{
            title:_t("LinkAnchor"),
            $content:$(qweb.render('website.dialog.anchorName',{
                currentAnchor:decodeURIComponent(this.$target.attr('id')),
            })),
            buttons:buttons,
        }).open();
    },
    /**
     *@private
     *@param{String}value
     */
    _setAnchorName:function(value){
        if(value){
            this.$target.attr({
                'id':value,
                'data-anchor':true,
            });
        }else{
            this.$target.removeAttr('iddata-anchor');
        }
        this.$target.trigger('content_changed');
    },
    /**
     *Returnsanchortext.
     *
     *@private
     *@returns{string}
     */
    _getAnchorLink:function(){
        if(!this.$target[0].id){
            const$titles=this.$target.find('h1,h2,h3,h4,h5,h6');
            consttitle=$titles.length>0?$titles[0].innerText:this.data.snippetName;
            constanchorName=this._text2Anchor(title);
            letn='';
            while(document.getElementById(anchorName+n)){
                n=(n||1)+1;
            }
            this._setAnchorName(anchorName+n);
        }
        return`${window.location.pathname}#${this.$target[0].id}`;
    },
    /**
     *Createsasafeid/anchorfromtext.
     *
     *@private
     *@param{string}text
     *@returns{string}
     */
    _text2Anchor:function(text){
        returnencodeURIComponent(text.trim().replace(/\s+/g,'-'));
    },
});

/**
 *Controlsboxproperties.
 */
options.registry.Box=options.Class.extend({

    //--------------------------------------------------------------------------
    //Options
    //--------------------------------------------------------------------------

    /**
     *TODOthisshouldbereviewedinmastertoavoidtheneedofusingthe
     *'reset'previewModeandhavingtorememberthepreviousbox-shadowvalue.
     *Weareforcedtorememberthepreviousboxshadowbeforeapplyinganew
     *oneasthewholebox-shadowvalueishandledbymultiplewidgets.
     *
     *@seethis.selectClassforparameters
     */
    asyncsetShadow(previewMode,widgetValue,params){
        //Checkifthecurrentlyconfiguredshadowisnotusingthesameshadow
        //mode,inwhichcasenothinghastobedone.
        conststyles=window.getComputedStyle(this.$target[0]);
        constcurrentBoxShadow=styles['box-shadow']||'none';
        constcurrentMode=currentBoxShadow==='none'
            ?''
            :currentBoxShadow.includes('inset')?'inset':'outset';
        if(currentMode===widgetValue){
            return;
        }

        if(previewMode===true){
            this._prevBoxShadow=currentBoxShadow;
        }

        //Add/removetheshadowclass
        this.$target.toggleClass(params.shadowClass,!!widgetValue);

        //Changethemodeoftheoldboxshadow.Ifnoshadowwascurrently
        //setthengettheshadowvaluethatissupposedtobesetaccording
        //totheshadowmode.TrytoapplyitviatheselectStylemethodso
        //thatitiseitherignoredbecausetheshadowclasshaditseffector
        //forced(totheshadowvalueornone)iftogglingtheclassisnot
        //enough(e.g.iftheitemhasadefaultshadowcomingfromCSSrules,
        //removingtheshadowclasswon'tbeenoughtoremovetheshadowbutin
        //mostothercasesitwill).
        letshadow='none';
        if(previewMode==='reset'){
            shadow=this._prevBoxShadow;
        }else{
            if(currentBoxShadow==='none'){
                shadow=this._getDefaultShadow(widgetValue,params.shadowClass)||'none';
            }else{
                if(widgetValue==='outset'){
                    shadow=currentBoxShadow.replace('inset','').trim();
                }elseif(widgetValue==='inset'){
                    shadow=currentBoxShadow+'inset';
                }
            }
        }
        awaitthis.selectStyle(previewMode,shadow,Object.assign({cssProperty:'box-shadow'},params));
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *@override
     */
    _computeWidgetState(methodName,params){
        if(methodName==='setShadow'){
            constshadowValue=this.$target.css('box-shadow');
            if(!shadowValue||shadowValue==='none'){
                return'';
            }
            returnthis.$target.css('box-shadow').includes('inset')?'inset':'outset';
        }
        returnthis._super(...arguments);
    },
    /**
     *@override
     */
    async_computeWidgetVisibility(widgetName,params){
        if(widgetName==='fake_inset_shadow_opt'){
            returnfalse;
        }
        returnthis._super(...arguments);
    },
    /**
     *@private
     *@param{string}type
     *@param{string}shadowClass
     *@returns{string}
     */
    _getDefaultShadow(type,shadowClass){
        constel=document.createElement('div');
        if(type){
            el.classList.add(shadowClass);
        }

        letshadow='';//TODOinmasterthisshouldbechangedto'none'
        document.body.appendChild(el);
        switch(type){
            case'outset':{
                shadow=$(el).css('box-shadow');
                break;
            }
            case'inset':{
                shadow=$(el).css('box-shadow')+'inset';
                break;
            }
        }
        el.remove();
        returnshadow;
    }
});

options.registry.HeaderBox=options.registry.Box.extend({

    //--------------------------------------------------------------------------
    //Options
    //--------------------------------------------------------------------------

    /**
     *@override
     */
    asyncselectStyle(previewMode,widgetValue,params){
        if((params.variable||params.color)
                &&['border-width','border-style','border-color','border-radius','box-shadow'].includes(params.cssProperty)){
            if(previewMode){
                return;
            }
            if(params.cssProperty==='border-color'){
                returnthis.customizeWebsiteColor(previewMode,widgetValue,params);
            }
            returnthis.customizeWebsiteVariable(previewMode,widgetValue,params);
        }
        returnthis._super(...arguments);
    },
    /**
     *@override
     */
    asyncsetShadow(previewMode,widgetValue,params){
        if(params.variable){
            if(previewMode){
                return;
            }
            constdefaultShadow=this._getDefaultShadow(widgetValue,params.shadowClass);
            returnthis.customizeWebsiteVariable(previewMode,defaultShadow||'none',params);
        }
        returnthis._super(...arguments);
    },
});

options.registry.CookiesBar=options.registry.SnippetPopup.extend({
    xmlDependencies:(options.registry.SnippetPopup.prototype.xmlDependencies||[]).concat(
        ['/website/static/src/xml/website.cookies_bar.xml']
    ),

    //--------------------------------------------------------------------------
    //Options
    //--------------------------------------------------------------------------

    /**
     *Changethecookiesbarlayout.
     *
     *@seethis.selectClassforparameters
     */
    selectLayout:function(previewMode,widgetValue,params){
        letwebsiteId;
        this.trigger_up('context_get',{
            callback:function(ctx){
                websiteId=ctx['website_id'];
            },
        });

        const$template=$(qweb.render(`website.cookies_bar.${widgetValue}`,{
            websiteId:websiteId,
        }));

        const$content=this.$target.find('.modal-content');
        constselectorsToKeep=[
            '.o_cookies_bar_text_button',
            '.o_cookies_bar_text_policy',
            '.o_cookies_bar_text_title',
            '.o_cookies_bar_text_primary',
            '.o_cookies_bar_text_secondary',
        ];

        if(this.$savedSelectors===undefined){
            this.$savedSelectors=[];
        }

        for(constselectorofselectorsToKeep){
            const$currentLayoutEls=$content.find(selector).contents();
            const$newLayoutEl=$template.find(selector);
            if($currentLayoutEls.length){
                //savevaluebeforechange,eg'title'isnotinside'discrete'template
                //butwewanttopreserveitincaseofselectanotherlayoutlater
                this.$savedSelectors[selector]=$currentLayoutEls;
            }
            const$savedSelector=this.$savedSelectors[selector];
            if($newLayoutEl.length&&$savedSelector&&$savedSelector.length){
                $newLayoutEl.empty().append($savedSelector);
            }
        }

        $content.empty().append($template);
    },
});

/**
 *Allowseditionof'cover_properties'inwebsitemodelswhichhavesuch
 *fields(blogs,posts,events,...).
 */
options.registry.CoverProperties=options.Class.extend({
    /**
     *@constructor
     */
    init:function(){
        this._super.apply(this,arguments);

        this.$image=this.$target.find('.o_record_cover_image');
        this.$filter=this.$target.find('.o_record_cover_filter');
    },
    /**
     *@override
     */
    start:function(){
        this.$filterValueOpts=this.$el.find('[data-filter-value]');

        returnthis._super.apply(this,arguments);
    },

    //--------------------------------------------------------------------------
    //Options
    //--------------------------------------------------------------------------

    /**
     *Handlesabackgroundchange.
     *
     *@seethis.selectClassforparameters
     */
    background:asyncfunction(previewMode,widgetValue,params){
        if(widgetValue===''){
            this.$image.css('background-image','');
            this.$target.removeClass('o_record_has_cover');
        }else{
            this.$image.css('background-image',`url('${widgetValue}')`);
            this.$target.addClass('o_record_has_cover');
            const$defaultSizeBtn=this.$el.find('.o_record_cover_opt_size_default');
            $defaultSizeBtn.click();
            $defaultSizeBtn.closest('we-select').click();
        }
    },
    /**
     *@seethis.selectClassforparameters
     */
    filterValue:function(previewMode,widgetValue,params){
        this.$filter.css('opacity',widgetValue||0);
        this.$filter.toggleClass('oe_black',parseFloat(widgetValue)!==0);
    },

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *@private
     */
    updateUI:asyncfunction(){
        awaitthis._super(...arguments);

        //TODO:`o_record_has_cover`shouldbehandledusingmodelfield,not
        //resize_classtoavoidallofthis.
        letcoverClass=this.$el.find('[data-cover-opt-name="size"]we-button.active').data('selectClass')||'';
        constbg=this.$image.css('background-image');
        if(bg&&bg!=='none'){
            coverClass+="o_record_has_cover";
        }
        //Updatesavingdataset
        this.$target[0].dataset.coverClass=coverClass;
        this.$target[0].dataset.textAlignClass=this.$el.find('[data-cover-opt-name="text_align"]we-button.active').data('selectClass')||'';
        this.$target[0].dataset.filterValue=this.$filterValueOpts.filter('.active').data('filterValue')||0.0;
        letcolorPickerWidget=null;
        this.trigger_up('user_value_widget_request',{
            name:'bg_color_opt',
            onSuccess:_widget=>colorPickerWidget=_widget,
        });
        constcolor=colorPickerWidget._value;
        constisCSSColor=ColorpickerWidget.isCSSColor(color);
        this.$target[0].dataset.bgColorClass=isCSSColor?'':weUtils.computeColorClasses([color])[0];
        this.$target[0].dataset.bgColorStyle=isCSSColor?`background-color:${color};`:'';
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *@override
     */
    _computeWidgetState:function(methodName,params){
        switch(methodName){
            case'filterValue':{
                returnparseFloat(this.$filter.css('opacity')).toFixed(1);
            }
            case'background':{
                constbackground=this.$image.css('background-image');
                if(background&&background!=='none'){
                    returnbackground.match(/^url\(["']?(.+?)["']?\)$/)[1];
                }
                return'';
            }
        }
        returnthis._super(...arguments);
    },
    /**
     *@override
     */
    _computeWidgetVisibility:function(widgetName,params){
        if(params.coverOptName){
            returnthis.$target.data(`use_${params.coverOptName}`)==='True';
        }
        returnthis._super(...arguments);
    },
});

options.registry.ContainerWidth=options.Class.extend({
    /**
     *@override
     */
    cleanForSave:function(){
        this.$target.removeClass('o_container_preview');
    },

    //--------------------------------------------------------------------------
    //Options
    //--------------------------------------------------------------------------

    /**
     *@override
     */
    selectClass:asyncfunction(previewMode,widgetValue,params){
        awaitthis._super(...arguments);
        if(previewMode==='reset'){
            this.$target.removeClass('o_container_preview');
        }elseif(previewMode){
            this.$target.addClass('o_container_preview');
        }
    },
});

/**
 *Allowssnippetstobemovedbeforetheprecedingelementorafterthefollowing.
 */
options.registry.SnippetMove=options.Class.extend({
    /**
     *@override
     */
    start:function(){
        var$buttons=this.$el.find('we-button');
        var$overlayArea=this.$overlay.find('.o_overlay_move_options');
        $overlayArea.prepend($buttons[0]);
        $overlayArea.append($buttons[1]);

        returnthis._super(...arguments);
    },
    /**
     *@override
     */
    onFocus:function(){
        //TODOimprovethis:hacktohideoptionssectionifsnippetmoveis
        //theonlyone.
        const$allOptions=this.$el.parent();
        if($allOptions.find('we-customizeblock-option').length<=1){
            $allOptions.addClass('d-none');
        }
    },

    //--------------------------------------------------------------------------
    //Options
    //--------------------------------------------------------------------------

    /**
     *Movesthesnippetaround.
     *
     *@seethis.selectClassforparameters
     */
    moveSnippet:function(previewMode,widgetValue,params){
        constisNavItem=this.$target[0].classList.contains('nav-item');
        const$tabPane=isNavItem?$(this.$target.find('.nav-link')[0].hash):null;
        switch(widgetValue){
            case'prev':
                this.$target.prev().before(this.$target);
                if(isNavItem){
                    $tabPane.prev().before($tabPane);
                }
                break;
            case'next':
                this.$target.next().after(this.$target);
                if(isNavItem){
                    $tabPane.next().after($tabPane);
                }
                break;
        }
        if(params.name==='move_up_opt'||params.name==='move_down_opt'){
            constmainScrollingEl=$().getScrollingElement()[0];
            constelTop=this.$target[0].getBoundingClientRect().top;
            constheightDiff=mainScrollingEl.offsetHeight-this.$target[0].offsetHeight;
            constbottomHidden=heightDiff<elTop;
            consthidden=elTop<0||bottomHidden;
            if(hidden){
                dom.scrollTo(this.$target[0],{
                    extraOffset:50,
                    forcedOffset:bottomHidden?heightDiff-50:undefined,
                    easing:'linear',
                    duration:500,
                });
            }
        }
    },
});

options.registry.ScrollButton=options.Class.extend({
    /**
     *@override
     */
    start:asyncfunction(){
        awaitthis._super(...arguments);
        this.$button=this.$('.o_scroll_button');
    },
    /**
     *Removesbuttoniftheoptionisnotdisplayed(forexamplein"fit
     *content"height).
     *
     *@override
     */
    updateUIVisibility:asyncfunction(){
        awaitthis._super(...arguments);
        if(this.$button.length&&this.el.offsetParent===null){
            this.$button.detach();
        }
    },

    //--------------------------------------------------------------------------
    //Options
    //--------------------------------------------------------------------------

    /**
     *Togglesthescrolldownbutton.
     */
    toggleButton:function(previewMode,widgetValue,params){
        if(widgetValue){
            if(!this.$button.length){
                constanchor=document.createElement('a');
                anchor.classList.add(
                    'o_scroll_button',
                    'mb-3',
                    'rounded-circle',
                    'align-items-center',
                    'justify-content-center',
                    'mx-auto',
                    'bg-primary',
                    'o_not_editable',
                );
                anchor.href='#';
                anchor.contentEditable="false";
                anchor.title=_t("Scrolldowntonextsection");
                constarrow=document.createElement('i');
                arrow.classList.add('fa','fa-angle-down','fa-3x');
                anchor.appendChild(arrow);
                this.$button=$(anchor);
            }
            this.$target.append(this.$button);
        }else{
            this.$button.detach();
        }
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *@override
     */
    _computeWidgetState:function(methodName,params){
        switch(methodName){
            case'toggleButton':
                return!!this.$button.parent().length;
        }
        returnthis._super(...arguments);
    },
});

//TODOthereisnodata-jsassociatedtothisbutadata-option-name,somehow
//itactsasdata-js...itwillbereviewedinmaster.
options.registry.minHeight=options.Class.extend({
    /**
     *@override
     */
    _renderCustomXML(uiFragment){
        //TODOadaptinmaster.ThissetsupadifferentUIfortheimage
        //gallerysnippet:forthisone,weallowtoforceaspecificheight
        //inautomode.Itwasdoneinstableaswithoutit,thedefaultheight
        //isdifficulttounderstandfortheuserasitdependsonscreen
        //heightoftheonewhoeditedthewebsiteandnotontheaddedimages.
        //Itwasalsoaregressionasin<=11.0,thiswasapossibility.
        if(this.$target[0].dataset.snippet!=='s_image_gallery'){
            return;
        }
        constminHeightEl=uiFragment.querySelector('we-button-group');
        if(!minHeightEl){
            return;
        }
        minHeightEl.setAttribute('string',_t("Min-Height"));
        constheightEl=document.createElement('we-input');
        heightEl.setAttribute('string',_t("└Height"));
        heightEl.dataset.name='image_gallery_height_opt';
        heightEl.dataset.unit='px';
        heightEl.dataset.selectStyle='';
        heightEl.dataset.cssProperty='height';
        //Forthissetting,weneedtoalwaysforcethestyle(=iftheblock
        //isnaturally800pxtallandtheuserenters800pxforthissetting,
        //weset800pxasinlinestyleanyway).Indeed,thissnippet'sstyle
        //isbasedontheheightthatisforcedbutoncetherelatedpublic
        //widgetsarestarted,theinnercarouselitemsreceiveamin-height
        //whichmakesitsothesnippet"natural"heightisequaltothe
        //initiallyforcedheight...soifthestyleisnotforced,itwould
        //ultimatelyberemovedbymistakethinkingitisnotnecessary.
        //Note:thisisforcedasnotimportantaswestillneedtheheightto
        //beresetto'auto'inmobile(genericcssrules).
        heightEl.dataset.forceStyle='';
        uiFragment.appendChild(heightEl);
    },
    /**
     *@override
     */
    _computeWidgetVisibility(widgetName,params){
        if(widgetName==='image_gallery_height_opt'){
            return!this.$target[0].classList.contains('o_half_screen_height')
                &&!this.$target[0].classList.contains('o_full_screen_height');
        }
        returnthis._super(...arguments);
    },
});

return{
    UrlPickerUserValueWidget:UrlPickerUserValueWidget,
    FontFamilyPickerUserValueWidget:FontFamilyPickerUserValueWidget,
};
});
