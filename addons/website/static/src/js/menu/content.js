flectra.define('website.contentMenu',function(require){
'usestrict';

varClass=require('web.Class');
varcore=require('web.core');
varDialog=require('web.Dialog');
vartime=require('web.time');
varweWidgets=require('wysiwyg.widgets');
varwebsiteNavbarData=require('website.navbar');
varwebsiteRootData=require('website.root');
varWidget=require('web.Widget');

var_t=core._t;
varqweb=core.qweb;

varPagePropertiesDialog=weWidgets.Dialog.extend({
    template:'website.pagesMenu.page_info',
    xmlDependencies:weWidgets.Dialog.prototype.xmlDependencies.concat(
        ['/website/static/src/xml/website.pageProperties.xml']
    ),
    events:_.extend({},weWidgets.Dialog.prototype.events,{
        'keyupinput#page_name':'_onNameChanged',
        'keyupinput#page_url':'_onUrlChanged',
        'changeinput#create_redirect':'_onCreateRedirectChanged',
        'clickinput#visibility_password':'_onPasswordClicked',
        'changeinput#visibility_password':'_onPasswordChanged',
        'changeselect#visibility':'_onVisibilityChanged',
        'error.datetimepicker':'_onDateTimePickerError',
    }),

    /**
     *@constructor
     *@override
     */
    init:function(parent,page_id,options){
        varself=this;
        varserverUrl=window.location.origin+'/';
        varlength_url=serverUrl.length;
        varserverUrlTrunc=serverUrl;
        if(length_url>30){
            serverUrlTrunc=serverUrl.slice(0,14)+'..'+serverUrl.slice(-14);
        }
        this.serverUrl=serverUrl;
        this.serverUrlTrunc=serverUrlTrunc;
        this.current_page_url=window.location.pathname;
        this.page_id=page_id;

        varbuttons=[
            {text:_t("Save"),classes:'btn-primary',click:this.save},
            {text:_t("Discard"),classes:'mr-auto',close:true},
        ];
        if(options.fromPageManagement){
            buttons.push({
                text:_t("GoToPage"),
                icon:'fa-globe',
                classes:'btn-link',
                click:function(e){
                    window.location.href='/'+self.page.url;
                },
            });
        }
        buttons.push({
            text:_t("DuplicatePage"),
            icon:'fa-clone',
            classes:'btn-link',
            click:function(e){
                //modal('hide')willbreaktherpc,sohidemanually
                this.$el.closest('.modal').addClass('d-none');
                _clonePage.call(this,self.page_id);
            },
        });
        buttons.push({
            text:_t("DeletePage"),
            icon:'fa-trash',
            classes:'btn-link',
            click:function(e){
                _deletePage.call(this,self.page_id,options.fromPageManagement);
            },
        });
        this._super(parent,_.extend({},{
            title:_t("PageProperties"),
            size:'medium',
            buttons:buttons,
        },options||{}));
    },
    /**
     *@override
     */
    willStart:function(){
        vardefs=[this._super.apply(this,arguments)];
        varself=this;

        defs.push(this._rpc({
            model:'website.page',
            method:'get_page_properties',
            args:[this.page_id],
        }).then(function(page){
            page.url=_.str.startsWith(page.url,'/')?page.url.substring(1):page.url;
            page.hasSingleGroup=page.group_id!==undefined;
            self.page=page;
        }));

        returnPromise.all(defs);
    },
    /**
     *@override
     */
    start:function(){
        varself=this;

        vardefs=[this._super.apply(this,arguments)];

        this.$('.ask_for_redirect').addClass('d-none');
        this.$('.redirect_type').addClass('d-none');
        this.$('.warn_about_call').addClass('d-none');
        if(this.page.visibility!=='password'){
            this.$('.show_visibility_password').addClass('d-none');
        }
        if(this.page.visibility!=='restricted_group'){
            this.$('.show_group_id').addClass('d-none');
        }
        this.autocompleteWithGroups(this.$('#group_id'));

        defs.push(this._getPageDependencies(this.page_id)
        .then(function(dependencies){
            vardep_text=[];
            _.each(dependencies,function(value,index){
                if(value.length>0){
                    dep_text.push(value.length+''+index.toLowerCase());
                }
            });
            dep_text=dep_text.join(',');
            self.$('#dependencies_redirect').html(qweb.render('website.show_page_dependencies',{dependencies:dependencies,dep_text:dep_text}));
            self.$('a.o_dependencies_redirect_link').on('click',()=>{
                self.$('.o_dependencies_redirect_list_popover').popover({
                    html:true,
                    title:_t('Dependencies'),
                    boundary:'viewport',
                    placement:'right',
                    trigger:'focus',
                    content:()=>{
                        returnqweb.render('website.get_tooltip_dependencies',{
                            dependencies:dependencies,
                        });
                    },
                    template:qweb.render('website.page_dependencies_popover'),
                }).popover('toggle');
            });
        }));

        defs.push(this._getSupportedMimetype()
        .then(function(mimetypes){
            self.supportedMimetype=mimetypes;
        }));

        defs.push(this._getPageKeyDependencies(this.page_id)
        .then(function(dependencies){
            vardep_text=[];
            _.each(dependencies,function(value,index){
                if(value.length>0){
                    dep_text.push(value.length+''+index.toLowerCase());
                }
            });
            dep_text=dep_text.join(',');
            self.$('.warn_about_call').html(qweb.render('website.show_page_key_dependencies',{dependencies:dependencies,dep_text:dep_text}));
            self.$('.warn_about_call[data-toggle="popover"]').popover({
               container:'body',
            });
        }));

        defs.push(this._rpc({model:'res.users',
                             method:'has_group',
                             args:['website.group_multi_website']})
                  .then(function(has_group){
                      if(!has_group){
                          self.$('#website_restriction').addClass('hidden');
                      }
                  }));

        vardatepickersOptions={
            minDate:moment({y:1000}),
            maxDate:moment().add(200,'y'),
            calendarWeeks:true,
            icons:{
                time:'fafa-clock-o',
                date:'fafa-calendar',
                next:'fafa-chevron-right',
                previous:'fafa-chevron-left',
                up:'fafa-chevron-up',
                down:'fafa-chevron-down',
            },
            locale:moment.locale(),
            format:time.getLangDatetimeFormat(),
            widgetPositioning:{
                horizontal:'auto',
                vertical:'top',
            },
             widgetParent:'body',
        };
        if(this.page.date_publish){
            datepickersOptions.defaultDate=time.str_to_datetime(this.page.date_publish);
        }
        this.$('#date_publish_container').datetimepicker(datepickersOptions);
        returnPromise.all(defs);
    },
    /**
     *@override
     */
    destroy:function(){
        $('.popover').popover('hide');
        returnthis._super.apply(this,arguments);
    },

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *@override
     */
    save:function(data){
        varself=this;
        varcontext;
        this.trigger_up('context_get',{
            callback:function(ctx){
                context=ctx;
            },
        });
        varurl=this.$('#page_url').val();

        var$datePublish=this.$("#date_publish");
        $datePublish.closest(".form-group").removeClass('o_has_error').find('.form-control,.custom-select').removeClass('is-invalid');
        vardatePublish=$datePublish.val();
        if(datePublish!==""){
            datePublish=this._parse_date(datePublish);
            if(!datePublish){
                $datePublish.closest(".form-group").addClass('o_has_error').find('.form-control,.custom-select').addClass('is-invalid');
                return;
            }
        }
        varparams={
            id:this.page.id,
            name:this.$('#page_name').val(),
            //Replaceduplicatefollowing'/'byonlyone'/'
            url:url.replace(/\/{2,}/g,'/'),
            is_menu:this.$('#is_menu').prop('checked'),
            is_homepage:this.$('#is_homepage').prop('checked'),
            website_published:this.$('#is_published').prop('checked'),
            create_redirect:this.$('#create_redirect').prop('checked'),
            redirect_type:this.$('#redirect_type').val(),
            website_indexed:this.$('#is_indexed').prop('checked'),
            visibility:this.$('#visibility').val(),
            date_publish:datePublish,
        };
        if(this.page.hasSingleGroup&&this.$('#visibility').val()==='restricted_group'){
            params['group_id']=this.$('#group_id').data('group-id');
        }
        if(this.$('#visibility').val()==='password'){
            varfield_pwd=$('#visibility_password');
            if(!field_pwd.get(0).reportValidity()){
                return;
            }
            if(field_pwd.data('dirty')){
                params['visibility_pwd']=field_pwd.val();
            }
        }

        this._rpc({
            model:'website.page',
            method:'save_page_info',
            args:[[context.website_id],params],
        }).then(function(url){
            //Iffrompagemanager:reloadurl,iffrompageitself:goto
            //(possibly)newurl
            varmo;
            self.trigger_up('main_object_request',{
                callback:function(value){
                    mo=value;
                },
            });
            if(mo.model==='website.page'){
                window.location.href=url.toLowerCase();
            }else{
                window.location.reload(true);
            }
        });
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *RetrievesthepageURLdependenciesforthegivenobjectid.
     *
     *@private
     *@param{integer}moID
     *@returns{Promise<Array>}
     */
    _getPageDependencies:function(moID){
        returnthis._rpc({
            model:'website',
            method:'page_search_dependencies',
            args:[moID],
        });
    },
    /**
     *Retrievesthepage'skeydependenciesforthegivenobjectid.
     *
     *@private
     *@param{integer}moID
     *@returns{Promise<Array>}
     */
    _getPageKeyDependencies:function(moID){
        returnthis._rpc({
            model:'website',
            method:'page_search_key_dependencies',
            args:[moID],
        });
    },
    /**
     *Retrievessupportedmimtype
     *
     *@private
     *@returns{Promise<Array>}
     */
    _getSupportedMimetype:function(){
        returnthis._rpc({
            model:'website',
            method:'guess_mimetype',
        });
    },
    /**
     *Returnsinformationaboutthepagemainobject.
     *
     *@private
     *@returns{Object}modelandid
     */
    _getMainObject:function(){
        varrepr=$('html').data('main-object');
        varm=repr.match(/(.+)\((\d+),(.*)\)/);
        return{
            model:m[1],
            id:m[2]|0,
        };
    },
    /**
     *Convertsastringrepresentingthebrowserdatetime
     *(exemple:Albanian:'2018-Qer-2215.12.35.')
     *toastringrepresentingUTCinFlectra'sdatetimestringformat
     *(exemple:'2018-04-2213:12:35').
     *
     *Thetimezoneofthedatetimestringisassumedtobetheoneofthe
     *browseranditwillbeconvertedtoUTC(standardforFlectra).
     *
     *@private
     *@param{String}valueAstringrepresentingadatetime.
     *@returns{String|false}AstringrepresentinganUTCdatetimeifthegivenvalueisvalid,falseotherwise.
     */
    _parse_date:function(value){
        vardatetime=moment(value,time.getLangDatetimeFormat(),true);
        if(datetime.isValid()){
            returntime.datetime_to_str(datetime.toDate());
        }
        else{
            returnfalse;
        }
    },
    /**
     *Allowsthegiveninputtoproposeexistinggroups.
     *
     *@param{jQuery}$input
     */
    autocompleteWithGroups:function($input){
        $input.autocomplete({
            source:(request,response)=>{
                returnthis._rpc({
                    model:'res.groups',
                    method:'search_read',
                    args:[[['name','ilike',request.term]],['display_name']],
                    kwargs:{
                        limit:15,
                    },
                }).then(founds=>{
                    founds=founds.map(g=>({'id':g['id'],'label':g['display_name']}));
                    response(founds);
                });
            },
            change:(ev,ui)=>{
                var$target=$(ev.target);
                if(!ui.item){
                    $target.val("");
                    $target.removeData('group-id');
                }else{
                    $target.data('group-id',ui.item.id);
                }
            },
        });
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *@private
     */
    _onUrlChanged:function(){
        varurl=this.$('input#page_url').val();
        this.$('.ask_for_redirect').toggleClass('d-none',url===this.page.url);
    },
    /**
     *@private
     */
    _onNameChanged:function(){
        varname=this.$('input#page_name').val();
        //Ifthefiletypeisasupportedmimetype,checkifitist-called.
        //Ifso,warnuser.Note:differentfrompage_search_dependencieswhich
        //checkonlyforurlandnotkey
        varext='.'+this.page.name.split('.').pop();
        if(extinthis.supportedMimetype&&ext!=='.html'){
            this.$('.warn_about_call').toggleClass('d-none',name===this.page.name);
        }
    },
    /**
     *@private
     */
    _onCreateRedirectChanged:function(){
        varcreateRedirect=this.$('input#create_redirect').prop('checked');
        this.$('.redirect_type').toggleClass('d-none',!createRedirect);
    },
    /**
     *@private
     */
    _onVisibilityChanged:function(ev){
        this.$('.show_visibility_password').toggleClass('d-none',ev.target.value!=='password');
        this.$('.show_group_id').toggleClass('d-none',ev.target.value!=='restricted_group');
        this.$('#visibility_password').attr('required',ev.target.value==='password');
    },
    /**
     *Libraryclearsthewrongdateformatsojustignoreerror
     *
     *@private
     */
    _onDateTimePickerError:function(ev){
        returnfalse;
    },
    /**
     *@private
     */
    _onPasswordClicked:function(ev){
        ev.target.value='';
        this._onPasswordChanged();
    },
    /**
     *@private
     */
    _onPasswordChanged:function(){
        this.$('#visibility_password').data('dirty',1);
    },
});

varMenuEntryDialog=weWidgets.LinkDialog.extend({
    xmlDependencies:weWidgets.LinkDialog.prototype.xmlDependencies.concat(
        ['/website/static/src/xml/website.contentMenu.xml']
    ),

    /**
     *@constructor
     */
    init:function(parent,options,editable,data){
        this._super(parent,_.extend({
            title:_t("Addamenuitem"),
        },options||{}),editable,_.extend({
            needLabel:true,
            text:data.name||'',
            isNewWindow:data.new_window,
        },data||{}));

        this.menuType=data.menuType;
    },
    /**
     *@override
     */
    start:function(){
        //Removestylerelatedelements
        this.$('.o_link_dialog_preview').remove();
        this.$('input[name="is_new_window"],.link-style').closest('.form-group').remove();
        this.$modal.find('.modal-lg').removeClass('modal-lg');
        this.$('form.col-lg-8').removeClass('col-lg-8').addClass('col-12');

        //AdaptURLlabel
        this.$('label[for="o_link_dialog_label_input"]').text(_t("MenuLabel"));

        //Autoadd'#'URLandhidetheinputifformegamenu
        if(this.menuType==='mega'){
            var$url=this.$('input[name="url"]');
            $url.val('#').trigger('change');
            $url.closest('.form-group').addClass('d-none');
        }

        returnthis._super.apply(this,arguments);
    },

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *@override
     */
    save:function(){
        var$e=this.$('#o_link_dialog_label_input');
        if(!$e.val()||!$e[0].checkValidity()){
            $e.closest('.form-group').addClass('o_has_error').find('.form-control,.custom-select').addClass('is-invalid');
            $e.focus();
            return;
        }
        returnthis._super.apply(this,arguments);
    },
});

varSelectEditMenuDialog=weWidgets.Dialog.extend({
    template:'website.contentMenu.dialog.select',
    xmlDependencies:weWidgets.Dialog.prototype.xmlDependencies.concat(
        ['/website/static/src/xml/website.contentMenu.xml']
    ),

    /**
     *@constructor
     *@override
     */
    init:function(parent,options){
        varself=this;
        self.roots=[{id:null,name:_t("TopMenu")}];
        $('[data-content_menu_id]').each(function(){
            //Removenamefallbackinmaster
            self.roots.push({id:$(this).data('content_menu_id'),name:$(this).attr('name')||$(this).data('menu_name')});
        });
        this._super(parent,_.extend({},{
            title:_t("SelectaMenu"),
            save_text:_t("Continue")
        },options||{}));
    },
    /**
     *@override
     */
    save:function(){
        this.final_data=parseInt(this.$el.find('select').val()||null);
        this._super.apply(this,arguments);
    },
});

varEditMenuDialog=weWidgets.Dialog.extend({
    template:'website.contentMenu.dialog.edit',
    xmlDependencies:weWidgets.Dialog.prototype.xmlDependencies.concat(
        ['/website/static/src/xml/website.contentMenu.xml']
    ),
    events:_.extend({},weWidgets.Dialog.prototype.events,{
        'clicka.js_add_menu':'_onAddMenuButtonClick',
        'clickbutton.js_delete_menu':'_onDeleteMenuButtonClick',
        'clickbutton.js_edit_menu':'_onEditMenuButtonClick',
    }),

    /**
     *@constructor
     *@override
     */
    init:function(parent,options,rootID){
        this._super(parent,_.extend({},{
            title:_t("EditMenu"),
            size:'medium',
        },options||{}));
        this.rootID=rootID;
    },
    /**
     *@override
     */
    willStart:function(){
        vardefs=[this._super.apply(this,arguments)];
        varcontext;
        this.trigger_up('context_get',{
            callback:function(ctx){
                context=ctx;
            },
        });
        defs.push(this._rpc({
            model:'website.menu',
            method:'get_tree',
            args:[context.website_id,this.rootID],
        }).then(menu=>{
            this.menu=menu;
            this.rootMenuID=menu.fields['id'];
            this.flat=this._flatenize(menu);
            this.toDelete=[];
        }));
        returnPromise.all(defs);
    },
    /**
     *@override
     */
    start:function(){
        varr=this._super.apply(this,arguments);
        this.$('.oe_menu_editor').nestedSortable({
            listType:'ul',
            handle:'div',
            items:'li',
            maxLevels:2,
            toleranceElement:'>div',
            forcePlaceholderSize:true,
            opacity:0.6,
            placeholder:'oe_menu_placeholder',
            tolerance:'pointer',
            attribute:'data-menu-id',
            expression:'()(.+)',//nestedSortabletakesthesecondmatchofanexpression(*sigh*)
            isAllowed:(placeholder,placeholderParent,currentItem)=>{
                return!placeholderParent
                    ||!currentItem[0].dataset.megaMenu&&!placeholderParent[0].dataset.megaMenu;
            },
        });
        returnr;
    },

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *@override
     */
    save:function(){
        var_super=this._super.bind(this);
        varnewMenus=this.$('.oe_menu_editor').nestedSortable('toArray',{startDepthCount:0});
        varlevels=[];
        vardata=[];
        varcontext;
        this.trigger_up('context_get',{
            callback:function(ctx){
                context=ctx;
            },
        });
        //Resequence,re-treeandremoveuselessdata
        newMenus.forEach(menu=>{
            if(menu.id){
                levels[menu.depth]=(levels[menu.depth]||0)+1;
                varmenuFields=this.flat[menu.id].fields;
                menuFields['sequence']=levels[menu.depth];
                menuFields['parent_id']=menu['parent_id']||this.rootMenuID;
                data.push(menuFields);
            }
        });
        returnthis._rpc({
            model:'website.menu',
            method:'save',
            args:[
                context.website_id,
                {
                    'data':data,
                    'to_delete':this.toDelete,
                }
            ],
        }).then(function(){
            return_super();
        });
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *Returnsamappingid->menuitemcontainingallthemenuitemsinthe
     *givenmenuhierarchy.
     *
     *@private
     *@param{Object}node
     *@param{Object}[_dict]internaluse:themappingbeingbuilt
     *@returns{Object}
     */
    _flatenize:function(node,_dict){
        _dict=_dict||{};
        _dict[node.fields['id']]=node;
        node.children.forEach(child=>{
            this._flatenize(child,_dict);
        });
        return_dict;
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *Calledwhenthe"addmenu"buttonisclicked->Openstheappropriate
     *dialogtoeditthisnewmenu.
     *
     *@private
     *@param{Event}ev
     */
    _onAddMenuButtonClick:function(ev){
        varmenuType=ev.currentTarget.dataset.type;
        vardialog=newMenuEntryDialog(this,{},null,{
            menuType:menuType,
        });
        dialog.on('save',this,link=>{
            varnewMenu={
                'fields':{
                    'id':_.uniqueId('new-'),
                    'name':_.unescape(link.text),
                    'url':link.url,
                    'new_window':link.isNewWindow,
                    'is_mega_menu':menuType==='mega',
                    'sequence':0,
                    'parent_id':false,
                },
                'children':[],
                'is_homepage':false,
            };
            this.flat[newMenu.fields['id']]=newMenu;
            this.$('.oe_menu_editor').append(
                qweb.render('website.contentMenu.dialog.submenu',{submenu:newMenu})
            );
        });
        dialog.open();
    },
    /**
     *Calledwhenthe"deletemenu"buttonisclicked->Deletesthismenu.
     *
     *@private
     */
    _onDeleteMenuButtonClick:function(ev){
        var$menu=$(ev.currentTarget).closest('[data-menu-id]');
        varmenuID=parseInt($menu.data('menu-id'));
        if(menuID){
            this.toDelete.push(menuID);
        }
        $menu.remove();
    },
    /**
     *Calledwhenthe"editmenu"buttonisclicked->Openstheappropriate
     *dialogtoeditthismenu.
     *
     *@private
     */
    _onEditMenuButtonClick:function(ev){
        var$menu=$(ev.currentTarget).closest('[data-menu-id]');
        varmenuID=$menu.data('menu-id');
        varmenu=this.flat[menuID];
        if(menu){
            vardialog=newMenuEntryDialog(this,{},null,_.extend({
                menuType:menu.fields['is_mega_menu']?'mega':undefined,
            },menu.fields));
            dialog.on('save',this,link=>{
                _.extend(menu.fields,{
                    'name':_.unescape(link.text),
                    'url':link.url,
                    'new_window':link.isNewWindow,
                });
                $menu.find('.js_menu_label').first().text(menu.fields['name']);
            });
            dialog.open();
        }else{
            Dialog.alert(null,"Couldnotfindmenuentry");
        }
    },
});

varPageOption=Class.extend({
    /**
     *@constructor
     *@param{string}name
     *       theoption'sname=thefield'snameinwebsite.pagemodel
     *@param{*}value
     *@param{function}setValueCallback
     *       afunctionwhichsimulatesanoption'svaluechangewithout
     *       askingtheservertochangeit
     */
    init:function(name,value,setValueCallback){
        this.name=name;
        this.value=value;
        this.isDirty=false;
        this.setValueCallback=setValueCallback;
    },

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *Setsthenewoption'svaluethankstotherelatedcallback.
     *
     *@param{*}[value]
     *       bydefault:considerthecurrentvalueisabooleanandtoggleit
     */
    setValue:function(value){
        if(value===undefined){
            value=!this.value;
        }
        this.setValueCallback.call(this,value);
        this.value=value;
        this.isDirty=true;
    },
});

varContentMenu=websiteNavbarData.WebsiteNavbarActionWidget.extend({
    xmlDependencies:['/website/static/src/xml/website.xml'],
    actions:_.extend({},websiteNavbarData.WebsiteNavbarActionWidget.prototype.actions||{},{
        edit_menu:'_editMenu',
        get_page_option:'_getPageOption',
        on_save:'_onSave',
        page_properties:'_pageProperties',
        toggle_page_option:'_togglePageOption',
    }),
    pageOptionsSetValueCallbacks:{
        header_overlay:function(value){
            $('#wrapwrap').toggleClass('o_header_overlay',value);
        },
        header_color:function(value){
            $('#wrapwrap>header').removeClass(this.value)
                                   .addClass(value);
        },
        header_visible:function(value){
            $('#wrapwrap>header').toggleClass('d-noneo_snippet_invisible',!value);
        },
        footer_visible:function(value){
            $('#wrapwrap>footer').toggleClass('d-noneo_snippet_invisible',!value);
        },
    },

    /**
     *@override
     */
    start:function(){
        varself=this;
        this.pageOptions={};
        _.each($('.o_page_option_data'),function(el){
            varvalue=el.value;
            if(value==="True"){
                value=true;
            }elseif(value==="False"){
                value=false;
            }
            self.pageOptions[el.name]=newPageOption(
                el.name,
                value,
                self.pageOptionsSetValueCallbacks[el.name]
            );
        });
        returnthis._super.apply(this,arguments);
    },

    //--------------------------------------------------------------------------
    //Actions
    //--------------------------------------------------------------------------

    /**
     *Askstheuserwhichmenutoeditifmultiplemenusexistonthepage.
     *Thenopensthemenueditiondialog.
     *Thenexecutesthegivencallbackoncetheeditionissaved,tofinally
     *reloadthepage.
     *
     *@private
     *@param{function}[beforeReloadCallback]
     *@returns{Promise}
     *         Unresolvedifthemenuiseditedandsavedasthepagewillbe
     *         reloaded.
     *         Resolvedotherwise.
     */
    _editMenu:function(beforeReloadCallback){
        varself=this;
        returnnewPromise(function(resolve){
            functionresolveWhenEditMenuDialogIsCancelled(rootID){
                returnself._openEditMenuDialog(rootID,beforeReloadCallback).then(resolve);
            }
            if($('[data-content_menu_id]').length){
                varselect=newSelectEditMenuDialog(self);
                select.on('save',self,resolveWhenEditMenuDialogIsCancelled);
                select.on('cancel',self,resolve);
                select.open();
            }else{
                resolveWhenEditMenuDialogIsCancelled(null);
            }
        });
    },
    /**
     *
     *@param{*}rootID
     *@param{function|undefied}beforeReloadCallbackfunctionthatreturnsapromise
     *@returns{Promise}
     */
    _openEditMenuDialog:function(rootID,beforeReloadCallback){
        varself=this;
        returnnewPromise(function(resolve){
            vardialog=newEditMenuDialog(self,{},rootID);
            dialog.on('save',self,function(){
                //Beforereloadingthepageaftermenumodification,doesthe
                //givenactiontodo.
                if(beforeReloadCallback){
                    //Reloadthepagesothatthemenumodificationareshown
                    beforeReloadCallback().then(function(){
                        window.location.reload(true);
                    });
                }else{
                    window.location.reload(true);
                }
            });
            dialog.on('cancel',self,resolve);
            dialog.open();
        });
    },

    /**
     *Retrievesthevalueofapageoption.
     *
     *@private
     *@param{string}name
     *@returns{Promise<*>}
     */
    _getPageOption:function(name){
        varoption=this.pageOptions[name];
        if(!option){
            returnPromise.reject();
        }
        returnPromise.resolve(option.value);
    },
    /**
     *Onsave,simulatedpageoptionshavetobeserver-saved.
     *
     *@private
     *@returns{Promise}
     */
    _onSave:function(){
        varself=this;
        vardefs=_.map(this.pageOptions,function(option,optionName){
            if(option.isDirty){
                returnself._togglePageOption({
                    name:optionName,
                    value:option.value,
                },true,true);
            }
        });
        returnPromise.all(defs);
    },
    /**
     *Opensthepagepropertiesdialog.
     *
     *@private
     *@returns{Promise}
     */
    _pageProperties:function(){
        varmo;
        this.trigger_up('main_object_request',{
            callback:function(value){
                mo=value;
            },
        });
        vardialog=newPagePropertiesDialog(this,mo.id,{}).open();
        returndialog.opened();
    },
    /**
     *Togglesapageoption.
     *
     *@private
     *@param{Object}params
     *@param{string}params.name
     *@param{*}[params.value](changevaluebydefaulttrue->false->true)
     *@param{boolean}[forceSave=false]
     *@param{boolean}[noReload=false]
     *@returns{Promise}
     */
    _togglePageOption:function(params,forceSave,noReload){
        //Firstcheckitisawebsitepage
        varmo;
        this.trigger_up('main_object_request',{
            callback:function(value){
                mo=value;
            },
        });
        if(mo.model!=='website.page'){
            returnPromise.reject();
        }

        //Checkifthisisavalidoption
        varoption=this.pageOptions[params.name];
        if(!option){
            returnPromise.reject();
        }

        //Togglethevalue
        option.setValue(params.value);

        //Ifsimulateistrue,itmeanswewanttheoptiontobetoggledbut
        //notsavedontheserveryet
        if(!forceSave){
            returnPromise.resolve();
        }

        //Ifnot,writeontheserverpageandreloadthecurrentlocation
        varvals={};
        vals[params.name]=option.value;
        varprom=this._rpc({
            model:'website.page',
            method:'write',
            args:[[mo.id],vals],
        });
        if(noReload){
            returnprom;
        }
        returnprom.then(function(){
            window.location.reload();
            returnnewPromise(function(){});
        });
    },
});

varPageManagement=Widget.extend({
    xmlDependencies:['/website/static/src/xml/website.xml'],
    events:{
        'clicka.js_page_properties':'_onPagePropertiesButtonClick',
        'clicka.js_clone_page':'_onClonePageButtonClick',
        'clicka.js_delete_page':'_onDeletePageButtonClick',
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *Retrievesthepagedependenciesforthegivenobjectid.
     *
     *@private
     *@param{integer}moID
     *@returns{Promise<Array>}
     */
    _getPageDependencies:function(moID){
        returnthis._rpc({
            model:'website',
            method:'page_search_dependencies',
            args:[moID],
        });
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    _onPagePropertiesButtonClick:function(ev){
        varmoID=$(ev.currentTarget).data('id');
        vardialog=newPagePropertiesDialog(this,moID,{'fromPageManagement':true}).open();
        returndialog;
    },
    _onClonePageButtonClick:function(ev){
        varpageId=$(ev.currentTarget).data('id');
        _clonePage.call(this,pageId);
    },
    _onDeletePageButtonClick:function(ev){
        varpageId=$(ev.currentTarget).data('id');
        _deletePage.call(this,pageId,true);
    },
});

/**
 *Deletesthepageaftershowingadependencieswarningforthegivenpageid.
 *
 *@private
 *@param{integer}pageId-TheIDofthepagetobedeleted
 *@param{Boolean}fromPageManagement
 *                 Isthefunctioncalledbythepagemanager?
 *                 Itwillaffectredirectafterpagedeletion:reloador'/'
 */
//TODO:Thisfunctionshouldbeintegratedinawidgetinthefuture
function_deletePage(pageId,fromPageManagement){
    varself=this;
    newPromise(function(resolve,reject){
        //Searchthepagedependencies
        self._getPageDependencies(pageId)
        .then(function(dependencies){
            //Informtheuseraboutthosedependenciesandaskhimconfirmation
            returnnewPromise(function(confirmResolve,confirmReject){
                Dialog.safeConfirm(self,"",{
                    title:_t("DeletePage"),
                    $content:$(qweb.render('website.delete_page',{dependencies:dependencies})),
                    confirm_callback:confirmResolve,
                    cancel_callback:resolve,
                });
            });
        }).then(function(){
            //Deletethepageiftheuserconfirmed
            returnself._rpc({
                model:'website.page',
                method:'unlink',
                args:[pageId],
            });
        }).then(function(){
            if(fromPageManagement){
                window.location.reload(true);
            }else{
                window.location.href='/';
            }
        },reject);
    });
}
/**
 *Duplicatethepageaftershowingthewizardtoenternewpagename.
 *
 *@private
 *@param{integer}pageId-TheIDofthepagetobeduplicate
 *
 */
function_clonePage(pageId){
    varself=this;
    newPromise(function(resolve,reject){
        Dialog.confirm(this,undefined,{
            title:_t("DuplicatePage"),
            $content:$(qweb.render('website.duplicate_page_action_dialog')),
            confirm_callback:function(){
                returnself._rpc({
                    model:'website.page',
                    method:'clone_page',
                    args:[
                        pageId,
                        this.$('#page_name').val(),
                    ],
                }).then(function(path){
                    window.location.href=path;
                }).guardedCatch(reject);
            },
            cancel_callback:reject,
        }).on('closed',null,reject);
    });
}

websiteNavbarData.websiteNavbarRegistry.add(ContentMenu,'#content-menu');
websiteRootData.websiteRootRegistry.add(PageManagement,'#list_website_pages');

return{
    PagePropertiesDialog:PagePropertiesDialog,
    ContentMenu:ContentMenu,
    EditMenuDialog:EditMenuDialog,
    MenuEntryDialog:MenuEntryDialog,
    SelectEditMenuDialog:SelectEditMenuDialog,
};
});
