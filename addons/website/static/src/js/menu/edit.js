flectra.define('website.editMenu',function(require){
'usestrict';

varcore=require('web.core');
varEditorMenu=require('website.editor.menu');
varwebsiteNavbarData=require('website.navbar');

var_t=core._t;

/**
 *Addsthebehaviorwhenclickingonthe'edit'button(+editorinteraction)
 */
varEditPageMenu=websiteNavbarData.WebsiteNavbarActionWidget.extend({
    assetLibs:['web_editor.compiled_assets_wysiwyg','website.compiled_assets_wysiwyg'],

    xmlDependencies:['/website/static/src/xml/website.editor.xml'],
    actions:_.extend({},websiteNavbarData.WebsiteNavbarActionWidget.prototype.actions,{
        edit:'_startEditMode',
        on_save:'_onSave',
    }),
    custom_events:_.extend({},websiteNavbarData.WebsiteNavbarActionWidget.custom_events||{},{
        content_will_be_destroyed:'_onContentWillBeDestroyed',
        content_was_recreated:'_onContentWasRecreated',
        snippet_will_be_cloned:'_onSnippetWillBeCloned',
        snippet_cloned:'_onSnippetCloned',
        snippet_dropped:'_onSnippetDropped',
        edition_will_stopped:'_onEditionWillStop',
        edition_was_stopped:'_onEditionWasStopped',
    }),

    /**
     *@constructor
     */
    init:function(){
        this._super.apply(this,arguments);
        varcontext;
        this.trigger_up('context_get',{
            extra:true,
            callback:function(ctx){
                context=ctx;
            },
        });
        this._editorAutoStart=(context.editable&&window.location.search.indexOf('enable_editor')>=0);
        varurl=window.location.href.replace(/([?&])&*enable_editor[^&#]*&?/,'\$1');
        window.history.replaceState({},null,url);
    },
    /**
     *Auto-startstheeditorifnecessaryoraddthewelcomemessageotherwise.
     *
     *@override
     */
    start:function(){
        vardef=this._super.apply(this,arguments);

        //Ifweautostarttheeditor,donotshowawelcomemessage
        if(this._editorAutoStart){
            returnPromise.all([def,this._startEditMode()]);
        }

        //Checkthatthepageisempty
        var$wrap=this._targetForEdition().filter('#wrapwrap.homepage').find('#wrap');

        if($wrap.length&&$wrap.html().trim()===''){
            //Ifreadonlyemptypage,showthewelcomemessage
            this.$welcomeMessage=$(core.qweb.render('website.homepage_editor_welcome_message'));
            this.$welcomeMessage.addClass('o_homepage_editor_welcome_message');
            this.$welcomeMessage.css('min-height',$wrap.parent('main').height()-($wrap.outerHeight(true)-$wrap.height()));
            $wrap.empty().append(this.$welcomeMessage);
        }

        returndef;
    },

    //--------------------------------------------------------------------------
    //Actions
    //--------------------------------------------------------------------------

    /**
     *CreatesaneditorinstanceandappendsittotheDOM.Alsoremovethe
     *welcomemessageifnecessary.
     *
     *@private
     *@returns{Promise}
     */
    _startEditMode:asyncfunction(){
        varself=this;
        if(this.editModeEnable){
            return;
        }
        this.trigger_up('widgets_stop_request',{
            $target:this._targetForEdition(),
        });
        if(this.$welcomeMessage){
            this.$welcomeMessage.detach();//detachfromthereadonlyrenderingbeforetheclonebysummernote
        }
        this.editModeEnable=true;
        awaitnewEditorMenu(this).prependTo(document.body);
        this._addEditorMessages();
        varres=awaitnewPromise(function(resolve,reject){
            self.trigger_up('widgets_start_request',{
                editableMode:true,
                onSuccess:resolve,
                onFailure:reject,
            });
        });
        //Triggeramousedownonthemaineditionareatofocusit,
        //whichisrequiredforSummernotetoactivate.
        this.$editorMessageElements.mousedown();
        returnres;
    },
    /**
     *Onsave,theeditorwillasktoparentwidgetsifsomethingneedstobe
     *donefirst.Thewebsitenavbarwillreceivethatdemandandaskstoits
     *action-capablecomponentstodosomething.Forexample,thecontentmenu
     *handlespage-relatedoptionssaving.However,someuserswithlimited
     *accessrightsdonothavethecontentmenu...butthewebsitenavbar
     *expectsthatthesaveactionisperformed.So,thisemptyactionis
     *definedheresothatallusershavean'on_save'relatedaction.
     *
     *@private
     *@todoimprovethesystemtosomehowdeclarerequired/optionalactions
     */
    _onSave:function(){},

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *Addsautomaticeditormessagesondrag&dropzoneelements.
     *
     *@private
     */
    _addEditorMessages:function(){
        const$target=this._targetForEdition();
        const$skeleton=$target.find('.oe_structure.oe_empty,[data-oe-type="html"]').filter(':o_editable');
        this.$editorMessageElements=$skeleton.not('[data-editor-message]').attr('data-editor-message',_t('DRAGBUILDINGBLOCKSHERE'));
        $skeleton.attr('contenteditable',function(){return!$(this).is(':empty');});
    },
    /**
     *Returnsthetargetforedition.
     *
     *@private
     *@returns{JQuery}
     */
    _targetForEdition:function(){
        return$('#wrapwrap');//TODOshouldknowaboutthiselementanotherway
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *Calledwhencontentwillbedestroyedinthepage.Notifiesthe
     *WebsiteRootthatisshouldstopthepublicwidgets.
     *
     *@private
     *@param{FlectraEvent}ev
     */
    _onContentWillBeDestroyed:function(ev){
        this.trigger_up('widgets_stop_request',{
            $target:ev.data.$target,
        });
    },
    /**
     *Calledwhencontentwasrecreatedinthepage.Notifiesthe
     *WebsiteRootthatisshouldstartthepublicwidgets.
     *
     *@private
     *@param{FlectraEvent}ev
     */
    _onContentWasRecreated:function(ev){
        this.trigger_up('widgets_start_request',{
            editableMode:true,
            $target:ev.data.$target,
        });
    },
    /**
     *Calledwheneditionwillstop.Notifiesthe
     *WebsiteRootthatisshouldstopthepublicwidgets.
     *
     *@private
     *@param{FlectraEvent}ev
     */
    _onEditionWillStop:function(ev){
        this.$editorMessageElements&&this.$editorMessageElements.removeAttr('data-editor-message');

        if(ev.data.noWidgetsStop){
            //TODOadaptinmaster,thiswasaddedasastablefix.
            return;
        }

        this.trigger_up('widgets_stop_request',{
            $target:this._targetForEdition(),
        });
    },
    /**
     *Calledwheneditionwasstopped.Notifiesthe
     *WebsiteRootthatisshouldstartthepublicwidgets.
     *
     *@private
     *@param{FlectraEvent}ev
     */
    _onEditionWasStopped:function(ev){
        this.trigger_up('widgets_start_request',{
            $target:this._targetForEdition(),
        });
        this.editModeEnable=false;
    },
    /**
     *Calledwhenasnippetisabouttobeclonedinthepage.Notifiesthe
     *WebsiteRootthatisshoulddestroytheanimationsforthissnippet.
     *
     *@private
     *@param{FlectraEvent}ev
     */
    _onSnippetWillBeCloned:function(ev){
        this.trigger_up('widgets_stop_request',{
            $target:ev.data.$target,
        });
    },
    /**
     *Calledwhenasnippetisclonedinthepage.NotifiestheWebsiteRoot
     *thatisshouldstartthepublicwidgetsforthissnippetandthesnippetit
     *wasclonedfrom.
     *
     *@private
     *@param{FlectraEvent}ev
     */
    _onSnippetCloned:function(ev){
        this.trigger_up('widgets_start_request',{
            editableMode:true,
            $target:ev.data.$target,
        });
        //TODO:removeinsaas-12.5,undefined$originwillrestart#wrapwrap
        if(ev.data.$origin){
            this.trigger_up('widgets_start_request',{
                editableMode:true,
                $target:ev.data.$origin,
            });
        }
    },
    /**
     *Calledwhenasnippetisdroppedinthepage.NotifiestheWebsiteRoot
     *thatisshouldstartthepublicwidgetsforthissnippet.Alsoaddthe
     *editormessages.
     *
     *@private
     *@param{FlectraEvent}ev
     */
    _onSnippetDropped:function(ev){
        this.trigger_up('widgets_start_request',{
            editableMode:true,
            $target:ev.data.$target,
        });
        this._addEditorMessages();
    },
});

websiteNavbarData.websiteNavbarRegistry.add(EditPageMenu,'#edit-page-menu');
});
