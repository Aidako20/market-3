flectra.define('website.s_countdown',function(require){
'usestrict';

const{ColorpickerWidget}=require('web.Colorpicker');
constcore=require('web.core');
constpublicWidget=require('web.public.widget');
constweUtils=require('web_editor.utils');

constqweb=core.qweb;
const_t=core._t;

constCountdownWidget=publicWidget.Widget.extend({
    selector:'.s_countdown',
    xmlDependencies:['/website/static/src/snippets/s_countdown/000.xml'],
    disabledInEditableMode:false,
    defaultColor:'rgba(0,0,0,255)',

    /**
     *@override
     */
    start:function(){
        this.$wrapper=this.$('.s_countdown_canvas_wrapper');
        this.hereBeforeTimerEnds=false;
        this.endAction=this.el.dataset.endAction;
        this.endTime=parseInt(this.el.dataset.endTime);
        this.size=parseInt(this.el.dataset.size);
        this.display=this.el.dataset.display;

        this.layout=this.el.dataset.layout;
        this.layoutBackground=this.el.dataset.layoutBackground;
        this.progressBarStyle=this.el.dataset.progressBarStyle;
        this.progressBarWeight=this.el.dataset.progressBarWeight;

        this.textColor=this._ensureCssColor(this.el.dataset.textColor);
        this.layoutBackgroundColor=this._ensureCssColor(this.el.dataset.layoutBackgroundColor);
        this.progressBarColor=this._ensureCssColor(this.el.dataset.progressBarColor);

        this.onlyOneUnit=this.display==='d';
        this.width=parseInt(this.size);
        if(this.layout==='boxes'){
            this.width/=1.75;
        }
        this._initTimeDiff();

        this._render();

        this.setInterval=setInterval(this._render.bind(this),1000);
        returnthis._super(...arguments);
    },
    /**
     *@override
     */
    destroy:function(){
        this.$('.s_countdown_end_redirect_message').remove();
        this.$('canvas').remove();
        this.$('.s_countdown_end_message').addClass('d-none');
        this.$('.s_countdown_text_wrapper').remove();
        this.$('.s_countdown_canvas_wrapper').removeClass('d-none');

        clearInterval(this.setInterval);
        this._super(...arguments);
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *Ensuresthecolorisanactualcsscolor.Incaseofacolorvariable,
     *thecolorwillbemappedtohexa.
     *
     *@private
     *@param{string}color
     *@returns{string}
     */
    _ensureCssColor:function(color){
        if(ColorpickerWidget.isCSSColor(color)){
            returncolor;
        }
        returnweUtils.getCSSVariableValue(color)||this.defaultColor;
    },
    /**
     *Getsthetimedifferenceinsecondsbetweennowandcountdownduedate.
     *
     *@private
     */
    _getDelta:function(){
        constcurrentTimestamp=Date.now()/1000;
        returnthis.endTime-currentTimestamp;
    },
    /**
     *Handlestheactionthatshouldbeexecutedoncethecountdownends.
     *
     *@private
     */
    _handleEndCountdownAction:function(){
        if(this.endAction==='redirect'){
            constredirectUrl=this.el.dataset.redirectUrl||'/';
            if(this.hereBeforeTimerEnds){
                //Waitabit,ifthelandingpagehasthesamepublishdate
                setTimeout(()=>window.location=redirectUrl,500);
            }else{
                //Show(noneditable)msgwhenuserlandsonalreadyfinishedcountdown
                if(!this.$('.s_countdown_end_redirect_message').length){
                    const$container=this.$('>.container,>.container-fluid,>.o_container_small');
                    $container.append(
                        $(qweb.render('website.s_countdown.end_redirect_message',{
                            redirectUrl:redirectUrl,
                        }))
                    );
                }
            }
        }elseif(this.endAction==='message'){
            this.$('.s_countdown_end_message').removeClass('d-none');
        }
    },
    /**
     *Initializesthe`diff`object.Itwillcontainseveryvisibletimeunit
     *whichwilleachcontainitsrelatedcanvas,totalstep,label..
     *
     *@private
     */
    _initTimeDiff:function(){
        constdelta=this._getDelta();
        this.diff=[];
        if(this._isUnitVisible('d')&&!(this.onlyOneUnit&&delta<86400)){
            this.diff.push({
                canvas:$('<canvas/>',{class:'o_temp_auto_element'}).appendTo(this.$wrapper)[0],
                //Thereisnologicalnumberofunit(total)onwhichdayunits
                // canbecomparedagainst,soweuseanarbitrarynumber.
                total:15,
                label:_t("Days"),
                nbSeconds:86400,
            });
        }
        if(this._isUnitVisible('h')||(this.onlyOneUnit&&delta<86400&&delta>3600)){
            this.diff.push({
                canvas:$('<canvas/>',{class:'o_temp_auto_element'}).appendTo(this.$wrapper)[0],
                total:24,
                label:_t("Hours"),
                nbSeconds:3600,
            });
        }
        if(this._isUnitVisible('m')||(this.onlyOneUnit&&delta<3600&&delta>60)){
            this.diff.push({
                canvas:$('<canvas/>',{class:'o_temp_auto_element'}).appendTo(this.$wrapper)[0],
                total:60,
                label:_t("Minutes"),
                nbSeconds:60,
            });
        }
        if(this._isUnitVisible('s')||(this.onlyOneUnit&&delta<60)){
            this.diff.push({
                canvas:$('<canvas/>',{class:'o_temp_auto_element'}).appendTo(this.$wrapper)[0],
                total:60,
                label:_t("Seconds"),
                nbSeconds:1,
            });
        }
    },
    /**
     *Returnsweitherornotthecountdownshouldbedisplayedforthegiven
     *unit(days,sec..).
     *
     *@private
     *@param{string}unit-either'd','m','h',or's'
     *@returns{boolean}
     */
    _isUnitVisible:function(unit){
        returnthis.display.includes(unit);
    },
    /**
     *Drawsthewholecountdown,includingonecountdownforeachtimeunit.
     *
     *@private
     */
    _render:function(){
        //Ifonlyoneunitmode,restartwidgetonunitchangetopopulatediff
        if(this.onlyOneUnit&&this._getDelta()<this.diff[0].nbSeconds){
            this.$('canvas').remove();
            this._initTimeDiff();
        }
        this._updateTimeDiff();

        consthideCountdown=this.isFinished&&!this.editableMode&&this.$el.hasClass('hide-countdown');
        if(this.layout==='text'){
            this.$('canvas').addClass('d-none');
            if(!this.$textWrapper){
                this.$textWrapper=$('<span/>').attr({
                    class:'s_countdown_text_wrapperd-none',
                });
                this.$textWrapper.text(_t("Countdownendsin"));
                this.$textWrapper.append($('<span/>').attr({
                    class:'s_countdown_textml-1',
                }));
                this.$textWrapper.appendTo(this.$wrapper);
            }

            this.$textWrapper.toggleClass('d-none',hideCountdown);

            constcountdownText=this.diff.map(e=>e.nb+''+e.label).join(',');
            this.$('.s_countdown_text').text(countdownText.toLowerCase());
        }else{
            for(constvalofthis.diff){
                constcanvas=val.canvas;
                constctx=canvas.getContext("2d");
                ctx.canvas.width=this.width;
                ctx.canvas.height=this.size;
                this._clearCanvas(ctx);

                $(canvas).toggleClass('d-none',hideCountdown);
                if(hideCountdown){
                    continue;
                }

                //Drawcanvaselements
                if(this.layoutBackground!=='none'){
                    this._drawBgShape(ctx,this.layoutBackground==='plain');
                }
                this._drawText(canvas,val.nb,val.label,this.layoutBackground==='plain');
                if(this.progressBarStyle==='surrounded'){
                    this._drawProgressBarBg(ctx,this.progressBarWeight==='thin');
                }
                if(this.progressBarStyle!=='none'){
                    this._drawProgressBar(ctx,val.nb,val.total,this.progressBarWeight==='thin');
                }
                $(canvas).toggleClass('mx-2',this.layout==='boxes');
            }
        }

        if(this.isFinished){
            clearInterval(this.setInterval);
            if(!this.editableMode){
                this._handleEndCountdownAction();
            }
        }
    },
    /**
     *Updatestheremainingunitsintothe`diff`object.
     *
     *@private
     */
    _updateTimeDiff:function(){
        letdelta=this._getDelta();
        this.isFinished=delta<0;
        if(this.isFinished){
            for(constunitDataofthis.diff){
                  unitData.nb=0;
            }
            return;
        }

        this.hereBeforeTimerEnds=true;
        for(constunitDataofthis.diff){
              unitData.nb=Math.floor(delta/unitData.nbSeconds);
              delta-=unitData.nb*unitData.nbSeconds;
        }
    },

    //--------------------------------------------------------------------------
    //Canvasdrawingmethods
    //--------------------------------------------------------------------------

    /**
     *Erasesthecanvas.
     *
     *@private
     *@param{RenderingContext}ctx-Contextofthecanvas
     */
    _clearCanvas:function(ctx){
        ctx.clearRect(0,0,this.size,this.size);
    },
    /**
     *Drawsatextintothecanvas.
     *
     *@private
     *@param{HTMLCanvasElement}canvas
     *@param{string}textNb-texttodisplayinthecenterofthecanvas,inbig
     *@param{string}textUnit-texttodisplaybellow`textNb`insmall
     *@param{boolean}full-iftrue,theshapewillbedrawnuptotheprogressbar
     */
    _drawText:function(canvas,textNb,textUnit,full=false){
        constctx=canvas.getContext("2d");
        constnbSize=this.size/4;
        ctx.font=`${nbSize}pxArial`;
        ctx.fillStyle=this.textColor;
        ctx.textAlign='center';
        ctx.textBaseline='middle';
        ctx.fillText(textNb,canvas.width/2,canvas.height/2);

        constunitSize=this.size/12;
        ctx.font=`${unitSize}pxArial`;
        ctx.fillText(textUnit,canvas.width/2,canvas.height/2+nbSize/1.5,this.width);

        if(this.layout==='boxes'&&this.layoutBackground!=='none'&&this.progressBarStyle==='none'){
            letbarWidth=this.size/(this.progressBarWeight==='thin'?31:10);
            if(full){
                barWidth=0;
            }
            ctx.beginPath();
            ctx.moveTo(barWidth,this.size/2);
            ctx.lineTo(this.width-barWidth,this.size/2);
            ctx.stroke();
        }
    },
    /**
     *Drawsaplainshapeintothecanvas.
     *
     *@private
     *@param{RenderingContext}ctx-Contextofthecanvas
     *@param{boolean}full-iftrue,theshapewillbedrawnuptotheprogressbar
     */
    _drawBgShape:function(ctx,full=false){
        ctx.fillStyle=this.layoutBackgroundColor;
        ctx.beginPath();
        if(this.layout==='circle'){
            letrayon=this.size/2;
            if(this.progressBarWeight==='thin'){
                rayon-=full?this.size/29:this.size/15;
            }else{
                rayon-=full?0:this.size/10;
            }
            ctx.arc(this.size/2,this.size/2,rayon,0,Math.PI*2);
            ctx.fill();
        }elseif(this.layout==='boxes'){
            letbarWidth=this.size/(this.progressBarWeight==='thin'?31:10);
            if(full){
                barWidth=0;
            }

            ctx.fillStyle=this.layoutBackgroundColor;
            ctx.rect(barWidth,barWidth,this.width-barWidth*2,this.size-barWidth*2);
            ctx.fill();

            constgradient=ctx.createLinearGradient(0,this.width,0,0);
            gradient.addColorStop(0,'#ffffff24');
            gradient.addColorStop(1,this.layoutBackgroundColor);
            ctx.fillStyle=gradient;
            ctx.rect(barWidth,barWidth,this.width-barWidth*2,this.size-barWidth*2);
            ctx.fill();
            $(ctx.canvas).css({'border-radius':'8px'});
        }
    },
    /**
     *Drawsaprogressbararoundthecountdownshape.
     *
     *@private
     *@param{RenderingContext}ctx-Contextofthecanvas
     *@param{string}nbUnit-howmanyunitshouldfillprogressbar
     *@param{string}totalUnit-numberofunittodoacompleteprogressbar
     *@param{boolean}thinLine-iftrue,theprogressbarwillbethiner
     */
    _drawProgressBar:function(ctx,nbUnit,totalUnit,thinLine){
        ctx.strokeStyle=this.progressBarColor;
        ctx.lineWidth=thinLine?this.size/35:this.size/10;
        if(this.layout==='circle'){
            ctx.beginPath();
            ctx.arc(this.size/2,this.size/2,this.size/2-this.size/20,Math.PI/-2,(Math.PI*2)*(nbUnit/totalUnit)+(Math.PI/-2));
            ctx.stroke();
        }elseif(this.layout==='boxes'){
            ctx.lineWidth*=2;
            letpc=nbUnit/totalUnit*100;

            //Lines:Top(x1,y1,x2,y2)Right(x1,y1,x2,y2)Bottom(x1,y1,x2,y2)Left(x1,y1,x2,y2)
            constlinesCoordFuncs=[
                (linePc)=>[0+ctx.lineWidth/2,0,(this.width-ctx.lineWidth/2)*linePc/25+ctx.lineWidth/2,0],
                (linePc)=>[this.width,0+ctx.lineWidth/2,this.width,(this.size-ctx.lineWidth/2)*linePc/25+ctx.lineWidth/2],
                (linePc)=>[this.width-((this.width-ctx.lineWidth/2)*linePc/25)-ctx.lineWidth/2,this.size,this.width-ctx.lineWidth/2,this.size],
                (linePc)=>[0,this.size-((this.size-ctx.lineWidth/2)*linePc/25)-ctx.lineWidth/2,0,this.size-ctx.lineWidth/2],
            ];
            while(pc>0&&linesCoordFuncs.length){
                constlinePc=Math.min(pc,25);
                constlineCoord=(linesCoordFuncs.shift())(linePc);
                ctx.beginPath();
                ctx.moveTo(lineCoord[0],lineCoord[1]);
                ctx.lineTo(lineCoord[2],lineCoord[3]);
                ctx.stroke();
                pc-=linePc;
            }
        }
    },
    /**
     *Drawsafulllighterbackgroundprogressbararoundtheshape.
     *
     *@private
     *@param{RenderingContext}ctx-Contextofthecanvas
     *@param{boolean}thinLine-iftrue,theprogressbarwillbethiner
     */
    _drawProgressBarBg:function(ctx,thinLine){
        ctx.strokeStyle=this.progressBarColor;
        ctx.globalAlpha=0.2;
        ctx.lineWidth=thinLine?this.size/35:this.size/10;
        if(this.layout==='circle'){
            ctx.beginPath();
            ctx.arc(this.size/2,this.size/2,this.size/2-this.size/20,0,Math.PI*2);
            ctx.stroke();
        }elseif(this.layout==='boxes'){
            ctx.lineWidth*=2;

            //Lines:Top(x1,y1,x2,y2)Right(x1,y1,x2,y2)Bottom(x1,y1,x2,y2)Left(x1,y1,x2,y2)
            constpoints=[
                [0+ctx.lineWidth/2,0,this.width,0],
                [this.width,0+ctx.lineWidth/2,this.width,this.size],
                [0,this.size,this.width-ctx.lineWidth/2,this.size],
                [0,0,0,this.size-ctx.lineWidth/2],
            ];
            while(points.length){
                constpoint=points.shift();
                ctx.beginPath();
                ctx.moveTo(point[0],point[1]);
                ctx.lineTo(point[2],point[3]);
                ctx.stroke();
            }
        }
        ctx.globalAlpha=1;
    },
});

publicWidget.registry.countdown=CountdownWidget;

returnCountdownWidget;
});
