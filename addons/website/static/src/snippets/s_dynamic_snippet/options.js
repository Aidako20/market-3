flectra.define('website.s_dynamic_snippet_options',function(require){
'usestrict';

constoptions=require('web_editor.snippets.options');

constdynamicSnippetOptions=options.Class.extend({

    /**
     *
     *@override
     */
    init:function(){
        this._super.apply(this,arguments);
        this.dynamicFilters={};
        this.dynamicFilterTemplates={};
    },
    /**
     *
     *@override
     */
    onBuilt:function(){
        //TODORemoveinmaster.
        this.$target[0].dataset['snippet']='s_dynamic_snippet';
        this._setOptionsDefaultValues();
    },

    //--------------------------------------------------------------------------
    //Options
    //--------------------------------------------------------------------------

    /**
     *
     *@seethis.selectClassforparameters
     */
    selectDataAttribute:function(previewMode,widgetValue,params){
        this._super.apply(this,arguments);
        if(params.attributeName==='filterId'&&previewMode===false){
            this.$target.get(0).dataset.numberOfRecords=this.dynamicFilters[parseInt(widgetValue)].limit;
        }
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *Fetchesdynamicfilters.
     *@private
     *@returns{Promise}
     */
    _fetchDynamicFilters:function(){
		returnthis._rpc({route:'/website/snippet/options_filters'});
    },
    /**
     *Fetchdynamicfilterstemplates.
     *@private
     *@returns{Promise}
     */
    _fetchDynamicFilterTemplates:function(){
        returnthis._rpc({route:'/website/snippet/filter_templates'});
    },
    /**
     *
     *@override
     *@private
     */
    _renderCustomXML:asyncfunction(uiFragment){
        awaitthis._renderDynamicFiltersSelector(uiFragment);
        awaitthis._renderDynamicFilterTemplatesSelector(uiFragment);
    },
    /**
     *RendersthedynamicfilteroptionselectorcontentintotheprovideduiFragment.
     *@param{HTMLElement}uiFragment
     *@private
     */
    _renderDynamicFiltersSelector:asyncfunction(uiFragment){
        constdynamicFilters=awaitthis._fetchDynamicFilters();
        for(letindexindynamicFilters){
            this.dynamicFilters[dynamicFilters[index].id]=dynamicFilters[index];
        }
        constfiltersSelectorEl=uiFragment.querySelector('[data-name="filter_opt"]');
        returnthis._renderSelectUserValueWidgetButtons(filtersSelectorEl,this.dynamicFilters);
    },
    /**
     *Renderswe-buttonsintoaSelectUserValueWidgetelementaccordingtoprovideddata.
     *@param{HTMLElement}selectUserValueWidgetElementtheSelectUserValueWidgetbuttons
     *  havetobecreatedinto.
     *@param{JSON}data
     *@private
     */
    _renderSelectUserValueWidgetButtons:asyncfunction(selectUserValueWidgetElement,data){
        for(letidindata){
            constbutton=document.createElement('we-button');
            button.dataset.selectDataAttribute=id;
            button.innerHTML=data[id].name;
            selectUserValueWidgetElement.appendChild(button);
        }
    },
    /**
     *RendersthetemplateoptionselectorcontentintotheprovideduiFragment.
     *@param{HTMLElement}uiFragment
     *@private
     */
    _renderDynamicFilterTemplatesSelector:asyncfunction(uiFragment){
        constdynamicFilterTemplates=awaitthis._fetchDynamicFilterTemplates();
        for(letindexindynamicFilterTemplates){
            this.dynamicFilterTemplates[dynamicFilterTemplates[index].key]=dynamicFilterTemplates[index];
        }
        consttemplatesSelectorEl=uiFragment.querySelector('[data-name="template_opt"]');
        returnthis._renderSelectUserValueWidgetButtons(templatesSelectorEl,this.dynamicFilterTemplates);
    },
    /**
     *Setsdefaultoptionsvalues.
     *Methodtobeoverriddeninchildcomponentsinordertosetadditional
     *optionsdefaultvalues.
     *@private
     */
    _setOptionsDefaultValues:function(){
        this._setOptionValue('numberOfElements',4);
        this._setOptionValue('numberOfElementsSmallDevices',1);
    },
    /**
     *Setstheoptionvalue.
     *@paramoptionName
     *@paramvalue
     *@private
     */
    _setOptionValue:function(optionName,value){
        if(this.$target.get(0).dataset[optionName]===undefined){
            this.$target.get(0).dataset[optionName]=value;
        }
    },
});

options.registry.dynamic_snippet=dynamicSnippetOptions;

returndynamicSnippetOptions;
});
