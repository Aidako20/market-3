#-*-coding:utf-8-*-
#PartofFlectra.SeeLICENSEfileforfullcopyrightandlicensingdetails.

fromflectraimportapi,models
from.eu_tag_mapimportEU_TAG_MAP
from.eu_tax_mapimportEU_TAX_MAP


classCompany(models.Model):
    _inherit='res.company'

    @api.model
    def_map_all_eu_companies_taxes(self):
        '''IdentifiesEUcompaniesandcallsthe_map_eu_taxesfunction
        '''
        eu_countries=self.env.ref('base.europe').country_ids
        companies=self.search([('account_tax_fiscal_country_id','in',eu_countries.ids)])
        companies._map_eu_taxes()

    def_map_eu_taxes(self):
        '''CreatesorupdatesFiscalPositionsforeachEUcountryexcludingthecompany'saccount_tax_fiscal_country_id
        '''
        eu_countries=self.env.ref('base.europe').country_ids
        oss_tax_groups=self.env['ir.model.data'].search([
            ('module','=','l10n_eu_service'),
            ('model','=','account.tax.group')])
        forcompanyinself:
            invoice_repartition_lines,refund_repartition_lines=company._get_repartition_lines_oss()
            taxes=self.env['account.tax'].search([
                ('type_tax_use','=','sale'),
                ('amount_type','=','percent'),
                ('company_id','=',company.id),
                ('tax_group_id','notin',oss_tax_groups.mapped('res_id'))])
            fordestination_countryineu_countries-company.account_tax_fiscal_country_id:
                mapping=[]
                fpos=self.env['account.fiscal.position'].search([
                            ('country_id','=',destination_country.id),
                            ('company_id','=',company.id),
                            ('auto_apply','=',True),
                            ('vat_required','=',False)],limit=1)
                ifnotfpos:
                    fpos=self.env['account.fiscal.position'].create({
                        'name':f'OSSB2C{destination_country.name}',
                        'country_id':destination_country.id,
                        'company_id':company.id,
                        'auto_apply':True,
                    })

                foreign_taxes={tax.amount:taxfortaxinfpos.tax_ids.tax_dest_idiftax.amount_type=='percent'}

                fordomestic_taxintaxes:
                    tax_amount=EU_TAX_MAP.get((company.account_tax_fiscal_country_id.code,domestic_tax.amount,destination_country.code),False)
                    iftax_amountanddomestic_taxnotinfpos.tax_ids.tax_src_id:
                        ifnotforeign_taxes.get(tax_amount,False):
                            oss_tax_group_local_xml_id=f"oss_tax_group_{str(tax_amount).replace('.','_')}"
                            ifnotself.env['ir.model.data'].xmlid_to_object(f"l10n_eu_service.{oss_tax_group_local_xml_id}"):
                                self.env['ir.model.data'].create({
                                    'name':oss_tax_group_local_xml_id,
                                    'module':'l10n_eu_service',
                                    'model':'account.tax.group',
                                    'res_id':self.env['account.tax.group'].create({'name':f'OSS{tax_amount}%'}).id,
                                    'noupdate':True,
                                })
                            foreign_taxes[tax_amount]=self.env['account.tax'].create({
                                'name':f'{tax_amount}%{destination_country.code}{destination_country.vat_label}',
                                'amount':tax_amount,
                                'invoice_repartition_line_ids':invoice_repartition_lines,
                                'refund_repartition_line_ids':refund_repartition_lines,
                                'type_tax_use':'sale',
                                'description':f"{tax_amount}%",
                                'tax_group_id':self.env.ref(f'l10n_eu_service.{oss_tax_group_local_xml_id}').id,
                                'sequence':1000,
                                'company_id':company.id,
                            })
                        mapping.append((0,0,{'tax_src_id':domestic_tax.id,'tax_dest_id':foreign_taxes[tax_amount].id}))
                ifmapping:
                    fpos.write({
                        'tax_ids':mapping
                    })

    def_get_repartition_lines_oss(self):
        self.ensure_one()
        defaults=self.env['account.tax'].with_company(self).default_get(['invoice_repartition_line_ids','refund_repartition_line_ids'])
        oss_account,oss_tags=self._get_oss_account(),self._get_oss_tags()
        base_line,tax_line,vals=0,1,2
        fordoc_typein'invoice','refund':
            ifoss_account:
                defaults[f'{doc_type}_repartition_line_ids'][tax_line][vals]['account_id']=oss_account.id
            ifoss_tags:
                defaults[f'{doc_type}_repartition_line_ids'][base_line][vals]['tag_ids']+=[(4,oss_tags[f'{doc_type}_base_tag'].id,0)]ifoss_tags[f'{doc_type}_base_tag']else[]
                defaults[f'{doc_type}_repartition_line_ids'][tax_line][vals]['tag_ids']+=[(4,oss_tags[f'{doc_type}_tax_tag'].id,0)]ifoss_tags[f'{doc_type}_tax_tag']else[]
        returndefaults['invoice_repartition_line_ids'],defaults['refund_repartition_line_ids']

    def_get_oss_account(self):
        self.ensure_one()
        ifnotself.env['ir.model.data'].xmlid_to_object(f'l10n_eu_service.oss_tax_account_company_{self.id}'):
            sales_tax_accounts=self.env['account.tax'].search([
                    ('type_tax_use','=','sale'),
                    ('company_id','=',self.id)
                ]).invoice_repartition_line_ids.mapped('account_id')
            ifnotsales_tax_accounts:
                returnFalse
            new_code=self.env['account.account']._search_new_account_code(self,len(sales_tax_accounts[0].code),sales_tax_accounts[0].code[:-2])
            oss_account=self.env['account.account'].create({
                'name':f'{sales_tax_accounts[0].name}OSS',
                'code':new_code,
                'user_type_id':sales_tax_accounts[0].user_type_id.id,
                'company_id':self.id,
                'tag_ids':[(4,tag.id,0)fortaginsales_tax_accounts[0].tag_ids],
                })
            self.env['ir.model.data'].create({
                'name':f'oss_tax_account_company_{self.id}',
                'module':'l10n_eu_service',
                'model':'account.account',
                'res_id':oss_account.id,
                'noupdate':True,
                })
        returnself.env.ref(f'l10n_eu_service.oss_tax_account_company_{self.id}')

    def_get_oss_tags(self):
        chart_template_xml_id=''
        ifself.chart_template_id:
            [chart_template_xml_id]=self.chart_template_id.parent_id.get_external_id().values()orself.chart_template_id.get_external_id().values()
        tag_for_country=EU_TAG_MAP.get(chart_template_xml_id,{
            'invoice_base_tag':None,
            'invoice_tax_tag':None,
            'refund_base_tag':None,
            'refund_tax_tag':None,
        })

        mapping={}
        forrepartition_line_key,tag_xml_idintag_for_country.items():
            tag=self.env.ref(tag_xml_id)iftag_xml_idelseNone
            iftagandtag._name=="account.tax.report.line":
                tag=tag.tag_ids.filtered(lambdat:nott.tax_negate)
            mapping[repartition_line_key]=tag

        returnmapping
