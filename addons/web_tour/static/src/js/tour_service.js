flectra.define('web_tour.tour',function(require){
"usestrict";

varrootWidget=require('root.widget');
varrpc=require('web.rpc');
varsession=require('web.session');
varTourManager=require('web_tour.TourManager');

constuntrackedClassnames=["o_tooltip","o_tooltip_content","o_tooltip_overlay"];

/**
 *@namespace
 *@property{Object}active_tooltips
 *@property{Object}tours
 *@property{Array}consumed_tours
 *@property{String}running_tour
 *@property{Number}running_step_delay
 *@property{'community'|'enterprise'}edition
 *@property{Array}_log
 */
returnsession.is_bound.then(function(){
    vardefs=[];
    //Loadthelistofconsumedtoursandthetiptemplateonlyifweareadmin,inthefrontend,
    //toursbeingonlyavailablefortheadmin.Forthebackend,thelistofconsumedisdirectly
    //inthepagesource.
    if(session.is_frontend&&session.is_admin){
        vardef=rpc.query({
                model:'web_tour.tour',
                method:'get_consumed_tours',
            });
        defs.push(def);
    }
    returnPromise.all(defs).then(function(results){
        varconsumed_tours=session.is_frontend?results[0]:session.web_tours;
        vartour_manager=newTourManager(rootWidget,consumed_tours);

        function_isTrackedNode(node){
            if(node.classList){
                return!untrackedClassnames
                    .some(className=>node.classList.contains(className));
            }
            returntrue;
        }

        constclassSplitRegex=/\s+/g;
        consttooltipParentRegex=/\bo_tooltip_parent\b/;
        letcurrentMutations=[];
        function_processMutations(){
            consthasTrackedMutation=currentMutations.some(mutation=>{
                //Firstcheckifthemutationappliedonanelementwedonot
                //track(likethetourtipsthemself).
                if(!_isTrackedNode(mutation.target)){
                    returnfalse;
                }

                if(mutation.type==='characterData'){
                    returntrue;
                }

                if(mutation.type==='childList'){
                    //IfitisamodificationtotheDOMhierarchy,only
                    //considertheaddition/removaloftrackednodes.
                    for(constnodesof[mutation.addedNodes,mutation.removedNodes]){
                        for(constnodeofnodes){
                            if(_isTrackedNode(node)){
                                returntrue;
                            }
                        }
                    }
                    returnfalse;
                }elseif(mutation.type==='attributes'){
                    //Getoldandnewvalueoftheattribute.Note:aswe
                    //computethenewvalueafterasetTimeout,thismightnot
                    //actuallybethenewvalueforthatparticularmutation
                    //recordbutthisistheoneafterallmutations.Thisis
                    //normallynotanissue:e.g."a"->"ab"->"a"willbe
                    //seenas"a"->"a"(not"ab")+"ab"->"a"butwe
                    //onlyneedtodetect*one*trackedmutationtoknowwe
                    //havetoupdatetipsanyway.
                    constoldV=mutation.oldValue?mutation.oldValue.trim():'';
                    constnewV=(mutation.target.getAttribute(mutation.attributeName)||'').trim();

                    //Notsurewhybutthisoccurs,especiallyonIDchange
                    //(probablysomestrangejQuerybehavior,seebelow).
                    //Alsosometimes,aclassisjustconsideredchangedwhile
                    //itjustlosesthespacesaroundtheclassnames.
                    if(oldV===newV){
                        returnfalse;
                    }

                    if(mutation.attributeName==='id'){
                        //CheckifthisisnotanIDchangedonebyjQueryfor
                        //performancereasons.
                        return!(oldV.includes('sizzle')||newV.includes('sizzle'));
                    }elseif(mutation.attributeName==='class'){
                        //Checkifthechangeis*only*aboutreceivingor
                        //losingthe'o_tooltip_parent'class,whichislinked
                        //tothetourservicesystem.Wehavetocheckthe
                        //potentialadditionofanotherclassaswecompute
                        //thenewvalueafterasetTimeout.Sothiscase:
                        //'a'->'ab'->'abo_tooltip_parent'produces2
                        //mutationrecordsbutwillbeseenhereas
                        //1)'a'->'abo_tooltip_parent'
                        //2)'ab'->'abo_tooltip_parent'
                        consthadClass=tooltipParentRegex.test(oldV);
                        constnewClasses=mutation.target.classList;
                        consthasClass=newClasses.contains('o_tooltip_parent');
                        return!(hadClass!==hasClass
                            &&Math.abs(oldV.split(classSplitRegex).length-newClasses.length)===1);
                    }
                }

                returntrue;
            });

            //Eitherallthemutationshavebeenignoredoronewasdetectedas
            //trackedandwilltriggeratourmanagerupdate.
            currentMutations=[];

            //Updatethetourmanagerifrequired.
            if(hasTrackedMutation){
                tour_manager.update();
            }
        }

        //UseaMutationObservertodetectDOMchanges.Whenamutationoccurs,
        //onlyaddittothelistofmutationstoprocessanddelaythe
        //mutationprocessing.Wehavetorecordthemallandnotina
        //debouncedwayotherwisewemayignoretrackedonesinaserieof
        //10trackedmutationsfollowedbyanuntrackedone.Mostofthem
        //willtriggeratipcheckanywayso,mostofthetime,processingthe
        //firstoneswillbeenoughtoensurethatatipupdatehastobedone.
        letmutationTimer;
        constobserver=newMutationObserver(mutations=>{
            clearTimeout(mutationTimer);
            currentMutations=currentMutations.concat(mutations);
            mutationTimer=setTimeout(()=>_processMutations(),750);
        });

        //Nowthattheobserverisconfigured,wehavetostartitwhenneeded.
        varstart_service=(function(){
            returnfunction(observe){
                returnnewPromise(function(resolve,reject){
                    tour_manager._register_all(observe).then(function(){
                        if(observe){
                            observer.observe(document.body,{
                                attributes:true,
                                childList:true,
                                subtree:true,
                                attributeOldValue:true,
                                characterData:true,
                            });
                        }
                        resolve();
                    });
                });
            };
        })();

        //EnabletheMutationObserverfortheadminorifatourisrunning,whentheDOMisready
        start_service(session.is_admin||tour_manager.running_tour);

        //OverridetheTourManagersothatitenables/disablestheobserverwhennecessary
        if(!session.is_admin){
            varrun=tour_manager.run;
            tour_manager.run=function(){
                varself=this;
                varargs=arguments;

                start_service(true).then(function(){
                    run.apply(self,args);
                    if(!self.running_tour){
                        observer.disconnect();
                    }
                });
            };
            var_consume_tour=tour_manager._consume_tour;
            tour_manager._consume_tour=function(){
                _consume_tour.apply(this,arguments);
                observer.disconnect();
            };
        }
        //helpertostartatourmanually(orfromapythontestwithitscounterpartstart_tourfunction)
        flectra.startTour=tour_manager.run.bind(tour_manager);
        returntour_manager;
    });
});

});
