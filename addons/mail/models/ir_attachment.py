#-*-coding:utf-8-*-
#PartofFlectra.SeeLICENSEfileforfullcopyrightandlicensingdetails.

fromflectraimportapi,models
fromflectra.exceptionsimportAccessError
fromflectra.httpimportrequest

classIrAttachment(models.Model):
    _inherit='ir.attachment'

    def_post_add_create(self):
        """Overridesbehaviourwhentheattachmentiscreatedthroughthecontroller
        """
        super(IrAttachment,self)._post_add_create()
        forrecordinself:
            record.register_as_main_attachment(force=False)

    defregister_as_main_attachment(self,force=True):
        """Registersthisattachmentasthemainoneofthemodelitis
        attachedto.
        """
        self.ensure_one()
        ifnotself.res_model:
            return
        related_record=self.env[self.res_model].browse(self.res_id)
        ifnotrelated_record.check_access_rights('write',raise_exception=False):
            return
        #message_main_attachment_idfieldcanbeempty,that'swhywecomparetoFalse;
        #wearejustcheckingthatitexistsonthemodelbeforewritingit
        ifrelated_recordandhasattr(related_record,'message_main_attachment_id'):
            ifforceornotrelated_record.message_main_attachment_id:
                #IgnoreAccessError,ifyoudon'thaveaccesstomodifythedocument
                #Justdon'tsetthevalue
                try:
                    related_record.message_main_attachment_id=self
                exceptAccessError:
                    pass

    def_attachment_format(self,commands=False):
        safari=requestandrequest.httprequest.user_agentandrequest.httprequest.user_agent.browser=='safari'
        res_list=[]
        forattachmentinself:
            res={
                'checksum':attachment.checksum,
                'id':attachment.id,
                'filename':attachment.name,
                'name':attachment.name,
                'mimetype':'application/octet-stream'ifsafariandattachment.mimetypeand'video'inattachment.mimetypeelseattachment.mimetype,
            }
            ifattachment.res_idandissubclass(self.pool[attachment.res_model],self.pool['mail.thread']):
                main_attachment=self.env[attachment.res_model].sudo().browse(attachment.res_id).message_main_attachment_id
                res['is_main']=attachment==main_attachment
            ifcommands:
                res['originThread']=[('insert',{
                    'id':attachment.res_id,
                    'model':attachment.res_model,
                })]
            else:
                res.update({
                    'res_id':attachment.res_id,
                    'res_model':attachment.res_model,
                })
            res_list.append(res)
        returnres_list
