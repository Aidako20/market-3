flectra.define('mail/static/src/components/composer/composer.js',function(require){
'usestrict';

constcomponents={
    AttachmentList:require('mail/static/src/components/attachment_list/attachment_list.js'),
    ComposerSuggestedRecipientList:require('mail/static/src/components/composer_suggested_recipient_list/composer_suggested_recipient_list.js'),
    DropZone:require('mail/static/src/components/drop_zone/drop_zone.js'),
    EmojisPopover:require('mail/static/src/components/emojis_popover/emojis_popover.js'),
    FileUploader:require('mail/static/src/components/file_uploader/file_uploader.js'),
    TextInput:require('mail/static/src/components/composer_text_input/composer_text_input.js'),
    ThreadTextualTypingStatus:require('mail/static/src/components/thread_textual_typing_status/thread_textual_typing_status.js'),
};
constuseDragVisibleDropZone=require('mail/static/src/component_hooks/use_drag_visible_dropzone/use_drag_visible_dropzone.js');
constuseShouldUpdateBasedOnProps=require('mail/static/src/component_hooks/use_should_update_based_on_props/use_should_update_based_on_props.js');
constuseStore=require('mail/static/src/component_hooks/use_store/use_store.js');
constuseUpdate=require('mail/static/src/component_hooks/use_update/use_update.js');
const{
    isEventHandled,
    markEventHandled,
}=require('mail/static/src/utils/utils.js');

const{Component}=owl;
const{useRef}=owl.hooks;

classComposerextendsComponent{

    /**
     *@override
     */
    constructor(...args){
        super(...args);
        this.isDropZoneVisible=useDragVisibleDropZone();
        useShouldUpdateBasedOnProps({
            compareDepth:{
                textInputSendShortcuts:1,
            },
        });
        useStore(props=>{
            constcomposer=this.env.models['mail.composer'].get(props.composerLocalId);
            constthread=composer&&composer.thread;
            return{
                composer,
                composerAttachments:composer?composer.attachments:[],
                composerCanPostMessage:composer&&composer.canPostMessage,
                composerHasFocus:composer&&composer.hasFocus,
                composerIsLog:composer&&composer.isLog,
                composerSubjectContent:composer&&composer.subjectContent,
                isDeviceMobile:this.env.messaging.device.isMobile,
                thread,
                threadChannelType:thread&&thread.channel_type,//forlivechatoverride
                threadDisplayName:thread&&thread.displayName,
                threadMassMailing:thread&&thread.mass_mailing,
                threadModel:thread&&thread.model,
                threadName:thread&&thread.name,
            };
        },{
            compareDepth:{
                composerAttachments:1,
            },
        });
        useUpdate({func:()=>this._update()});
        /**
         *Referenceoftheemojipopover.Usefultoincludeemojipopoveras
         *contained"inside"thecomposer.
         */
        this._emojisPopoverRef=useRef('emojisPopover');
        /**
         *Referenceofthefileuploader.
         *Usefultoprogrammaticallypromptsthebrowserfileuploader.
         */
        this._fileUploaderRef=useRef('fileUploader');
        /**
         *Referenceofthetextinputcomponent.
         */
        this._textInputRef=useRef('textInput');
        /**
         *Referenceofthesubjectinput.Usefultosetcontent.
         */
        this._subjectRef=useRef('subject');
        this._onClickCaptureGlobal=this._onClickCaptureGlobal.bind(this);
    }

    mounted(){
        document.addEventListener('click',this._onClickCaptureGlobal,true);
    }

    willUnmount(){
        document.removeEventListener('click',this._onClickCaptureGlobal,true);
    }

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *@returns{mail.composer}
     */
    getcomposer(){
        returnthis.env.models['mail.composer'].get(this.props.composerLocalId);
    }

    /**
     *Returnswhetherthegivennodeisselforachildrenofself,including
     *theemojipopover.
     *
     *@param{Node}node
     *@returns{boolean}
     */
    contains(node){
        //emojipopoverisoutsidebutshouldbeconsideredinside
        constemojisPopover=this._emojisPopoverRef.comp;
        if(emojisPopover&&emojisPopover.contains(node)){
            returntrue;
        }
        returnthis.el.contains(node);
    }

    /**
     *GetthecurrentpartnerimageURL.
     *
     *@returns{string}
     */
    getcurrentPartnerAvatar(){
        constavatar=this.env.messaging.currentUser
            ?this.env.session.url('/web/image',{
                    field:'image_128',
                    id:this.env.messaging.currentUser.id,
                    model:'res.users',
                })
            :'/web/static/src/img/user_menu_avatar.png';
        returnavatar;
    }

    /**
     *Focusthecomposer.
     */
    focus(){
        if(this.env.messaging.device.isMobile){
            this.el.scrollIntoView();
        }
        this._textInputRef.comp.focus();
    }

    /**
     *Focusoutthecomposer.
     */
    focusout(){
        this._textInputRef.comp.focusout();
    }

    /**
     *Determinewhethercomposershoulddisplayafooter.
     *
     *@returns{boolean}
     */
    gethasFooter(){
        return(
            this.props.hasThreadTyping||
            this.composer.attachments.length>0||
            !this.props.isCompact
        );
    }

    /**
     *Determinewhetherthecomposershoulddisplayaheader.
     *
     *@returns{boolean}
     */
    gethasHeader(){
        return(
            (this.props.hasThreadName&&this.composer.thread)||
            (this.props.hasFollowers&&!this.composer.isLog)
        );
    }

    /**
     *GetanobjectwhichispassedtoFileUploadercomponenttobeusedwhen
     *creatingattachment.
     *
     *@returns{Object}
     */
    getnewAttachmentExtraData(){
        return{
            composers:[['replace',this.composer]],
        };
    }

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *Postamessageinthecomposeronrelatedthread.
     *
     *Postingofthemessagecouldbeabortedifitcannotbepostedlikeifthereareattachments
     *currentlyuploadingorifthereisnotextcontentandnoattachments.
     *
     *@private
     */
    async_postMessage(){
        if(!this.composer.canPostMessage){
            if(this.composer.hasUploadingAttachment){
                this.env.services['notification'].notify({
                    message:this.env._t("Pleasewaitwhilethefileisuploading."),
                    type:'warning',
                });
            }
            return;
        }
        awaitthis.composer.postMessage();
        //TODO:wemightneedtoremovetriggerandusethestoretowaitforthepostrpctobedone
        //task-2252858
        this.trigger('o-message-posted');
    }

    /**
     *@private
     */
    _update(){
        if(this.props.isDoFocus){
            this.focus();
        }
        if(!this.composer){
            return;
        }
        if(this._subjectRef.el){
            this._subjectRef.el.value=this.composer.subjectContent;
        }
    }

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *Calledwhenclickingonattachmentbutton.
     *
     *@private
     */
    _onClickAddAttachment(){
        this._fileUploaderRef.comp.openBrowserFileUploader();
        if(!this.env.device.isMobile){
            this.focus();
        }
    }

    /**
     *Discardsthecomposerwhenclickingaway.
     *
     *@private
     *@param{MouseEvent}ev
     */
    _onClickCaptureGlobal(ev){
        if(this.contains(ev.target)){
            return;
        }
        this.composer.discard();
    }

    /**
     *Calledwhenclickingon"expand"button.
     *
     *@private
     */
    _onClickFullComposer(){
        this.composer.openFullComposer();
    }

    /**
     *Calledwhenclickingon"discard"button.
     *
     *@private
     *@param{MouseEvent}ev
     */
    _onClickDiscard(ev){
        this.composer.discard();
    }

    /**
     *Calledwhenclickingon"send"button.
     *
     *@private
     */
    _onClickSend(){
        this._postMessage();
        this.focus();
    }

    /**
     *@private
     */
    _onComposerSuggestionClicked(){
        this.focus();
    }

    /**
     *@private
     */
    _onComposerTextInputSendShortcut(){
        this._postMessage();
    }

    /**
     *Calledwhensomefileshavebeendroppedinthedropzone.
     *
     *@private
     *@param{CustomEvent}ev
     *@param{Object}ev.detail
     *@param{FileList}ev.detail.files
     */
    async_onDropZoneFilesDropped(ev){
        ev.stopPropagation();
        awaitthis._fileUploaderRef.comp.uploadFiles(ev.detail.files);
        this.isDropZoneVisible.value=false;
    }

    /**
     *Calledwhenselectionanemojifromtheemojipopover(fromtheemoji
     *button).
     *
     *@private
     *@param{CustomEvent}ev
     *@param{Object}ev.detail
     *@param{string}ev.detail.unicode
     */
    _onEmojiSelection(ev){
        ev.stopPropagation();
        this._textInputRef.comp.saveStateInStore();
        this.composer.insertIntoTextInput(ev.detail.unicode);
        if(!this.env.device.isMobile){
            this.focus();
        }
    }

    /**
     *@private
     */
    _onInputSubject(){
        this.composer.update({subjectContent:this._subjectRef.el.value});
    }

    /**
     *@private
     *@param{KeyboardEvent}ev
     */
    _onKeydown(ev){
        if(ev.key==='Escape'){
            if(isEventHandled(ev,'ComposerTextInput.closeSuggestions')){
                return;
            }
            if(isEventHandled(ev,'Composer.closeEmojisPopover')){
                return;
            }
            ev.preventDefault();
            this.composer.discard();
        }
    }

    /**
     *@private
     *@param{KeyboardEvent}ev
     */
    _onKeydownEmojiButton(ev){
        if(ev.key==='Escape'){
            if(this._emojisPopoverRef.comp){
                this._emojisPopoverRef.comp.close();
                this.focus();
                markEventHandled(ev,'Composer.closeEmojisPopover');
            }
        }
    }

    /**
     *@private
     *@param{CustomEvent}ev
     */
    async_onPasteTextInput(ev){
        if(!ev.clipboardData||!ev.clipboardData.files){
            return;
        }
        awaitthis._fileUploaderRef.comp.uploadFiles(ev.clipboardData.files);
    }

}

Object.assign(Composer,{
    components,
    defaultProps:{
        hasCurrentPartnerAvatar:true,
        hasDiscardButton:false,
        hasFollowers:false,
        hasSendButton:true,
        hasThreadName:false,
        hasThreadTyping:false,
        isCompact:true,
        isDoFocus:false,
        isExpandable:false,
    },
    props:{
        attachmentsDetailsMode:{
            type:String,
            optional:true,
        },
        composerLocalId:String,
        hasCurrentPartnerAvatar:Boolean,
        hasDiscardButton:Boolean,
        hasFollowers:Boolean,
        hasMentionSuggestionsBelowPosition:{
            type:Boolean,
            optional:true,
        },
        hasSendButton:Boolean,
        hasThreadName:Boolean,
        hasThreadTyping:Boolean,
        /**
         *Determineswhetherthisshouldbecomefocused.
         */
        isDoFocus:Boolean,
        showAttachmentsExtensions:{
            type:Boolean,
            optional:true,
        },
        showAttachmentsFilenames:{
            type:Boolean,
            optional:true,
        },
        isCompact:Boolean,
        isExpandable:Boolean,
        /**
         *Ifset,keyboardshortcutsfromtextinputtosendmessage.
         *Ifnotset,willusedefaultvaluesfrom`ComposerTextInput`.
         */
        textInputSendShortcuts:{
            type:Array,
            element:String,
            optional:true,
        },
    },
    template:'mail.Composer',
});

returnComposer;

});
