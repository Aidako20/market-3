flectra.define('mail/static/src/components/composer/composer_tests.js',function(require){
'usestrict';

constcomponents={
    Composer:require('mail/static/src/components/composer/composer.js'),
};
const{
    afterEach,
    afterNextRender,
    beforeEach,
    createRootComponent,
    dragenterFiles,
    dropFiles,
    nextAnimationFrame,
    pasteFiles,
    start,
}=require('mail/static/src/utils/test_utils.js');

const{
    file:{
        createFile,
        inputFiles,
    },
    makeTestPromise,
}=require('web.test_utils');

QUnit.module('mail',{},function(){
QUnit.module('components',{},function(){
QUnit.module('composer',{},function(){
QUnit.module('composer_tests.js',{
    beforeEach(){
        beforeEach(this);

        this.createComposerComponent=async(composer,otherProps)=>{
            constprops=Object.assign({composerLocalId:composer.localId},otherProps);
            awaitcreateRootComponent(this,components.Composer,{
                props,
                target:this.widget.el,
            });
        };

        this.start=asyncparams=>{
            const{afterEvent,env,widget}=awaitstart(Object.assign({},params,{
                data:this.data,
            }));
            this.afterEvent=afterEvent;
            this.env=env;
            this.widget=widget;
        };
    },
    afterEach(){
        afterEach(this);
    },
});

QUnit.test('composertextinput:basicrenderingwhenpostingamessage',asyncfunction(assert){
    assert.expect(5);

    awaitthis.start();
    constthread=this.env.models['mail.thread'].create({
        composer:[['create',{isLog:false}]],
        id:20,
        model:'res.partner',
    });
    awaitthis.createComposerComponent(thread.composer);
    assert.strictEqual(
        document.querySelectorAll('.o_Composer').length,
        1,
        "shouldhavecomposerindiscussthread"
    );
    assert.strictEqual(
        document.querySelectorAll('.o_Composer_textInput').length,
        1,
        "shouldhavetextinputinsidediscussthreadcomposer"
    );
    assert.ok(
        document.querySelector('.o_Composer_textInput').classList.contains('o_ComposerTextInput'),
        "composertextinputofcomposershouldbeaComposerTextIputcomponent"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_ComposerTextInput_textarea`).length,
        1,
        "shouldhaveeditablepartinsidecomposertextinput"
    );
    assert.strictEqual(
        document.querySelector(`.o_ComposerTextInput_textarea`).placeholder,
        "Sendamessagetofollowers...",
        "shouldhave'Sendamessagetofollowers...'asplaceholdercomposertextinput"
    );
});

QUnit.test('composertextinput:basicrenderingwhenloggingnote',asyncfunction(assert){
    assert.expect(5);

    awaitthis.start();
    constthread=this.env.models['mail.thread'].create({
        composer:[['create',{isLog:true}]],
        id:20,
        model:'res.partner',
    });
    awaitthis.createComposerComponent(thread.composer);
    assert.strictEqual(
        document.querySelectorAll('.o_Composer').length,
        1,
        "shouldhavecomposerindiscussthread"
    );
    assert.strictEqual(
        document.querySelectorAll('.o_Composer_textInput').length,
        1,
        "shouldhavetextinputinsidediscussthreadcomposer"
    );
    assert.ok(
        document.querySelector('.o_Composer_textInput').classList.contains('o_ComposerTextInput'),
        "composertextinputofcomposershouldbeaComposerTextIputcomponent"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_ComposerTextInput_textarea`).length,
        1,
        "shouldhaveeditablepartinsidecomposertextinput"
    );
    assert.strictEqual(
        document.querySelector(`.o_ComposerTextInput_textarea`).placeholder,
        "Loganinternalnote...",
        "shouldhave'Loganinternalnote...'asplaceholderincomposertextinputifcomposerislog"
    );
});

QUnit.test('composertextinput:basicrenderingwhenlinkedthreadisamail.channel',asyncfunction(assert){
    assert.expect(5);

    awaitthis.start();
    constthread=this.env.models['mail.thread'].create({
        id:20,
        model:'mail.channel',
    });
    awaitthis.createComposerComponent(thread.composer);
    assert.strictEqual(
        document.querySelectorAll('.o_Composer').length,
        1,
        "shouldhavecomposerindiscussthread"
    );
    assert.strictEqual(
        document.querySelectorAll('.o_Composer_textInput').length,
        1,
        "shouldhavetextinputinsidediscussthreadcomposer"
    );
    assert.ok(
        document.querySelector('.o_Composer_textInput').classList.contains('o_ComposerTextInput'),
        "composertextinputofcomposershouldbeaComposerTextIputcomponent"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_ComposerTextInput_textarea`).length,
        1,
        "shouldhaveeditablepartinsidecomposertextinput"
    );
    assert.strictEqual(
        document.querySelector(`.o_ComposerTextInput_textarea`).placeholder,
        "Writesomething...",
        "shouldhave'Writesomething...'asplaceholderincomposertextinputifcomposerisfora'mail.channel'"
    );
});

QUnit.test('mailingchannelcomposer:basicrendering',asyncfunction(assert){
    assert.expect(2);

    //channelthatisexpectedtoberendered,withpropermass_mailing
    //valueandarandomuniqueidthatwillbereferencedinthetest
    this.data['mail.channel'].records.push({id:20,mass_mailing:true});
    awaitthis.start();
    constthread=this.env.models['mail.thread'].findFromIdentifyingData({
        id:20,
        model:'mail.channel',
    });
    awaitthis.createComposerComponent(thread.composer);
    assert.containsOnce(
        document.body,
        '.o_ComposerTextInput',
        "Composershouldhaveatextinput"
    );
    assert.containsOnce(
        document.body,
        '.o_Composer_subjectInput',
        "Composershouldhaveasubjectinput"
    );
});

QUnit.test('addanemoji',asyncfunction(assert){
    assert.expect(1);

    awaitthis.start();
    constcomposer=this.env.models['mail.composer'].create();
    awaitthis.createComposerComponent(composer);
    awaitafterNextRender(()=>
        document.querySelector('.o_Composer_buttonEmojis').click()
    );
    awaitafterNextRender(()=>
        document.querySelector('.o_EmojisPopover_emoji[data-unicode="ðŸ˜Š"]').click()
    );
    assert.strictEqual(
        document.querySelector(`.o_ComposerTextInput_textarea`).value,
        "ðŸ˜Š",
        "emojishouldbeinsertedinthecomposertextinput"
    );
    //ensurepopoverisclosed
    awaitnextAnimationFrame();
    awaitnextAnimationFrame();
    awaitnextAnimationFrame();
});

QUnit.test('addanemojiaftersometext',asyncfunction(assert){
    assert.expect(2);

    awaitthis.start();
    constcomposer=this.env.models['mail.composer'].create();
    awaitthis.createComposerComponent(composer);
    awaitafterNextRender(()=>{
        document.querySelector(`.o_ComposerTextInput_textarea`).focus();
        document.execCommand('insertText',false,"Blabla");
    });
    assert.strictEqual(
        document.querySelector(`.o_ComposerTextInput_textarea`).value,
        "Blabla",
        "composertextinputshouldhavetextonlyinitially"
    );

    awaitafterNextRender(()=>document.querySelector('.o_Composer_buttonEmojis').click());
    awaitafterNextRender(()=>
        document.querySelector('.o_EmojisPopover_emoji[data-unicode="ðŸ˜Š"]').click()
    );
    assert.strictEqual(
        document.querySelector(`.o_ComposerTextInput_textarea`).value,
        "BlablaðŸ˜Š",
        "emojishouldbeinsertedafterthetext"
    );
    //ensurepopoverisclosed
    awaitnextAnimationFrame();
    awaitnextAnimationFrame();
    awaitnextAnimationFrame();
});

QUnit.test('addemojireplaces(keyboard)textselection',asyncfunction(assert){
    assert.expect(2);

    awaitthis.start();
    constcomposer=this.env.models['mail.composer'].create();
    awaitthis.createComposerComponent(composer);
    constcomposerTextInputTextArea=document.querySelector(`.o_ComposerTextInput_textarea`);
    awaitafterNextRender(()=>{
        composerTextInputTextArea.focus();
        document.execCommand('insertText',false,"Blabla");
    });
    assert.strictEqual(
        composerTextInputTextArea.value,
        "Blabla",
        "composertextinputshouldhavetextonlyinitially"
    );

    //simulateselectionofallthecontentbykeyboard
    composerTextInputTextArea.setSelectionRange(0,composerTextInputTextArea.value.length);

    //selectemoji
    awaitafterNextRender(()=>document.querySelector('.o_Composer_buttonEmojis').click());
    awaitafterNextRender(()=>
        document.querySelector('.o_EmojisPopover_emoji[data-unicode="ðŸ˜Š"]').click()
    );
    assert.strictEqual(
        document.querySelector(`.o_ComposerTextInput_textarea`).value,
        "ðŸ˜Š",
        "wholetextselectionshouldhavebeenreplacedbyemoji"
    );
    //ensurepopoverisclosed
    awaitnextAnimationFrame();
    awaitnextAnimationFrame();
    awaitnextAnimationFrame();
});

QUnit.test('displaycannedresponsesuggestionsontyping":"',asyncfunction(assert){
    assert.expect(2);

    this.data['mail.shortcode'].records.push({
        id:11,
        source:"hello",
        substitution:"Hello!Howareyou?",
    });

    awaitthis.start();
    constcomposer=this.env.models['mail.composer'].create();
    awaitthis.createComposerComponent(composer);

    assert.containsNone(
        document.body,
        '.o_ComposerSuggestionList_list',
        "Cannedresponsessuggestionslistshouldnotbepresent"
    );
    awaitafterNextRender(()=>{
        document.querySelector(`.o_ComposerTextInput_textarea`).focus();
        document.execCommand('insertText',false,":");
        document.querySelector(`.o_ComposerTextInput_textarea`)
            .dispatchEvent(newwindow.KeyboardEvent('keydown'));
        document.querySelector(`.o_ComposerTextInput_textarea`)
            .dispatchEvent(newwindow.KeyboardEvent('keyup'));
    });
    assert.hasClass(
        document.querySelector('.o_ComposerSuggestionList_list'),
        'show',
        "shoulddisplaycannedresponsesuggestionsontyping':'"
    );
});

QUnit.test('useacannedresponse',asyncfunction(assert){
    assert.expect(4);

    this.data['mail.shortcode'].records.push({
        id:11,
        source:"hello",
        substitution:"Hello!Howareyou?",
    });

    awaitthis.start();
    constcomposer=this.env.models['mail.composer'].create();
    awaitthis.createComposerComponent(composer);

    assert.containsNone(
        document.body,
        '.o_ComposerSuggestionList_list',
        "cannedresponsesuggestionslistshouldnotbepresent"
    );
    assert.strictEqual(
        document.querySelector(`.o_ComposerTextInput_textarea`).value,
        "",
        "textcontentofcomposershouldbeemptyinitially"
    );
    awaitafterNextRender(()=>{
        document.querySelector(`.o_ComposerTextInput_textarea`).focus();
        document.execCommand('insertText',false,":");
        document.querySelector(`.o_ComposerTextInput_textarea`)
            .dispatchEvent(newwindow.KeyboardEvent('keydown'));
        document.querySelector(`.o_ComposerTextInput_textarea`)
            .dispatchEvent(newwindow.KeyboardEvent('keyup'));
    });
    assert.containsOnce(
        document.body,
        '.o_ComposerSuggestion',
        "shouldhaveacannedresponsesuggestion"
    );
    awaitafterNextRender(()=>
        document.querySelector('.o_ComposerSuggestion').click()
    );
    assert.strictEqual(
        document.querySelector(`.o_ComposerTextInput_textarea`).value.replace(/\s/,""),
        "Hello!Howareyou?",
        "textcontentofcomposershouldhavecannedresponse+additionalwhitespaceafterwards"
    );
});

QUnit.test('useacannedresponsesometext',asyncfunction(assert){
    assert.expect(5);

    this.data['mail.shortcode'].records.push({
        id:11,
        source:"hello",
        substitution:"Hello!Howareyou?",
    });

    awaitthis.start();
    constcomposer=this.env.models['mail.composer'].create();
    awaitthis.createComposerComponent(composer);

    assert.containsNone(
        document.body,
        '.o_ComposerSuggestion',
        "cannedresponsesuggestionslistshouldnotbepresent"
    );
    assert.strictEqual(
        document.querySelector(`.o_ComposerTextInput_textarea`).value,
        "",
        "textcontentofcomposershouldbeemptyinitially"
    );
    document.querySelector(`.o_ComposerTextInput_textarea`).focus();
    awaitafterNextRender(()=>
        document.execCommand('insertText',false,"bluhbluh")
    );
    assert.strictEqual(
        document.querySelector(`.o_ComposerTextInput_textarea`).value,
        "bluhbluh",
        "textcontentofcomposershouldhavecontent"
    );
    awaitafterNextRender(()=>{
        document.execCommand('insertText',false,":");
        document.querySelector(`.o_ComposerTextInput_textarea`)
            .dispatchEvent(newwindow.KeyboardEvent('keydown'));
        document.querySelector(`.o_ComposerTextInput_textarea`)
            .dispatchEvent(newwindow.KeyboardEvent('keyup'));
    });
    assert.containsOnce(
        document.body,
        '.o_ComposerSuggestion',
        "shouldhaveacannedresponsesuggestion"
    );
    awaitafterNextRender(()=>
        document.querySelector('.o_ComposerSuggestion').click()
    );
    assert.strictEqual(
        document.querySelector(`.o_ComposerTextInput_textarea`).value.replace(/\s/,""),
        "bluhbluhHello!Howareyou?",
        "textcontentofcomposershouldhavepreviouscontent+cannedresponsesubstitution+additionalwhitespaceafterwards"
    );
});

QUnit.test('addanemojiafteracannedresponse',asyncfunction(assert){
    assert.expect(5);

    this.data['mail.shortcode'].records.push({
        id:11,
        source:"hello",
        substitution:"Hello!Howareyou?",
    });

    awaitthis.start();
    constcomposer=this.env.models['mail.composer'].create();
    awaitthis.createComposerComponent(composer);

    assert.containsNone(
        document.body,
        '.o_ComposerSuggestion',
        "cannedresponsesuggestionslistshouldnotbepresent"
    );
    assert.strictEqual(
        document.querySelector(`.o_ComposerTextInput_textarea`).value,
        "",
        "textcontentofcomposershouldbeemptyinitially"
    );
    awaitafterNextRender(()=>{
        document.querySelector(`.o_ComposerTextInput_textarea`).focus();
        document.execCommand('insertText',false,":");
        document.querySelector(`.o_ComposerTextInput_textarea`)
            .dispatchEvent(newwindow.KeyboardEvent('keydown'));
        document.querySelector(`.o_ComposerTextInput_textarea`)
            .dispatchEvent(newwindow.KeyboardEvent('keyup'));
    });
    assert.containsOnce(
        document.body,
        '.o_ComposerSuggestion',
        "shouldhaveacannedresponsesuggestion"
    );
    awaitafterNextRender(()=>
        document.querySelector('.o_ComposerSuggestion').click()
    );
    assert.strictEqual(
        document.querySelector(`.o_ComposerTextInput_textarea`).value.replace(/\s/,""),
        "Hello!Howareyou?",
        "textcontentofcomposershouldhavepreviouscontent+cannedresponsesubstitution+additionalwhitespaceafterwards"
    );

    //selectemoji
    awaitafterNextRender(()=>
        document.querySelector('.o_Composer_buttonEmojis').click()
    );
    awaitafterNextRender(()=>
        document.querySelector('.o_EmojisPopover_emoji[data-unicode="ðŸ˜Š"]').click()
    );
    assert.strictEqual(
        document.querySelector(`.o_ComposerTextInput_textarea`).value.replace(/\s/,""),
        "Hello!Howareyou?ðŸ˜Š",
        "textcontentofcomposershouldhavepreviouscannedresponsesubstitutionandselectedemojijustafter"
    );
    //ensurepopoverisclosed
    awaitnextAnimationFrame();
});

QUnit.test('displaychannelmentionsuggestionsontyping"#"',asyncfunction(assert){
    assert.expect(2);

    this.data['mail.channel'].records.push({
        id:7,
        name:"General",
        public:"groups",
    });
    awaitthis.start();
    constcomposer=this.env.models['mail.composer'].create();
    awaitthis.createComposerComponent(composer);

    assert.containsNone(
        document.body,
        '.o_ComposerSuggestionList_list',
        "channelmentionsuggestionslistshouldnotbepresent"
    );
    awaitafterNextRender(()=>{
        document.querySelector(`.o_ComposerTextInput_textarea`).focus();
        document.execCommand('insertText',false,"#");
        document.querySelector(`.o_ComposerTextInput_textarea`)
            .dispatchEvent(newwindow.KeyboardEvent('keydown'));
        document.querySelector(`.o_ComposerTextInput_textarea`)
            .dispatchEvent(newwindow.KeyboardEvent('keyup'));
    });
    assert.hasClass(
        document.querySelector('.o_ComposerSuggestionList_list'),
        'show',
        "shoulddisplaychannelmentionsuggestionsontyping'#'"
    );
});

QUnit.test('mentionachannel',asyncfunction(assert){
    assert.expect(4);

    this.data['mail.channel'].records.push({
        id:7,
        name:"General",
        public:"groups",
    });
    awaitthis.start();
    constcomposer=this.env.models['mail.composer'].create();
    awaitthis.createComposerComponent(composer);

    assert.containsNone(
        document.body,
        '.o_ComposerSuggestionList_list',
        "channelmentionsuggestionslistshouldnotbepresent"
    );
    assert.strictEqual(
        document.querySelector(`.o_ComposerTextInput_textarea`).value,
        "",
        "textcontentofcomposershouldbeemptyinitially"
    );
    awaitafterNextRender(()=>{
        document.querySelector(`.o_ComposerTextInput_textarea`).focus();
        document.execCommand('insertText',false,"#");
        document.querySelector(`.o_ComposerTextInput_textarea`)
            .dispatchEvent(newwindow.KeyboardEvent('keydown'));
        document.querySelector(`.o_ComposerTextInput_textarea`)
            .dispatchEvent(newwindow.KeyboardEvent('keyup'));
    });
    assert.containsOnce(
        document.body,
        '.o_ComposerSuggestion',
        "shouldhaveachannelmentionsuggestion"
    );
    awaitafterNextRender(()=>
        document.querySelector('.o_ComposerSuggestion').click()
    );
    assert.strictEqual(
        document.querySelector(`.o_ComposerTextInput_textarea`).value.replace(/\s/,""),
        "#General",
        "textcontentofcomposershouldhavementionedchannel+additionalwhitespaceafterwards"
    );
});

QUnit.test('mentionachannelaftersometext',asyncfunction(assert){
    assert.expect(5);

    this.data['mail.channel'].records.push({
        id:7,
        name:"General",
        public:"groups",
    });
    awaitthis.start();
    constcomposer=this.env.models['mail.composer'].create();
    awaitthis.createComposerComponent(composer);

    assert.containsNone(
        document.body,
        '.o_ComposerSuggestion',
        "channelmentionsuggestionslistshouldnotbepresent"
    );
    assert.strictEqual(
        document.querySelector(`.o_ComposerTextInput_textarea`).value,
        "",
        "textcontentofcomposershouldbeemptyinitially"
    );
    document.querySelector(`.o_ComposerTextInput_textarea`).focus();
    awaitafterNextRender(()=>
        document.execCommand('insertText',false,"bluhbluh")
    );
    assert.strictEqual(
        document.querySelector(`.o_ComposerTextInput_textarea`).value,
        "bluhbluh",
        "textcontentofcomposershouldhavecontent"
    );
    awaitafterNextRender(()=>{
        document.execCommand('insertText',false,"#");
        document.querySelector(`.o_ComposerTextInput_textarea`)
            .dispatchEvent(newwindow.KeyboardEvent('keydown'));
        document.querySelector(`.o_ComposerTextInput_textarea`)
            .dispatchEvent(newwindow.KeyboardEvent('keyup'));
    });
    assert.containsOnce(
        document.body,
        '.o_ComposerSuggestion',
        "shouldhaveachannelmentionsuggestion"
    );
    awaitafterNextRender(()=>
        document.querySelector('.o_ComposerSuggestion').click()
    );
    assert.strictEqual(
        document.querySelector(`.o_ComposerTextInput_textarea`).value.replace(/\s/,""),
        "bluhbluh#General",
        "textcontentofcomposershouldhavepreviouscontent+mentionedchannel+additionalwhitespaceafterwards"
    );
});

QUnit.test('addanemojiafterachannelmention',asyncfunction(assert){
    assert.expect(5);

    this.data['mail.channel'].records.push({
        id:7,
        name:"General",
        public:"groups",
    });
    awaitthis.start();
    constcomposer=this.env.models['mail.composer'].create();
    awaitthis.createComposerComponent(composer);

    assert.containsNone(
        document.body,
        '.o_ComposerSuggestion',
        "mentionsuggestionslistshouldnotbepresent"
    );
    assert.strictEqual(
        document.querySelector(`.o_ComposerTextInput_textarea`).value,
        "",
        "textcontentofcomposershouldbeemptyinitially"
    );
    awaitafterNextRender(()=>{
        document.querySelector(`.o_ComposerTextInput_textarea`).focus();
        document.execCommand('insertText',false,"#");
        document.querySelector(`.o_ComposerTextInput_textarea`)
            .dispatchEvent(newwindow.KeyboardEvent('keydown'));
        document.querySelector(`.o_ComposerTextInput_textarea`)
            .dispatchEvent(newwindow.KeyboardEvent('keyup'));
    });
    assert.containsOnce(
        document.body,
        '.o_ComposerSuggestion',
        "shouldhaveachannelmentionsuggestion"
    );
    awaitafterNextRender(()=>
        document.querySelector('.o_ComposerSuggestion').click()
    );
    assert.strictEqual(
        document.querySelector(`.o_ComposerTextInput_textarea`).value.replace(/\s/,""),
        "#General",
        "textcontentofcomposershouldhavepreviouscontent+mentionedchannel+additionalwhitespaceafterwards"
    );

    //selectemoji
    awaitafterNextRender(()=>
        document.querySelector('.o_Composer_buttonEmojis').click()
    );
    awaitafterNextRender(()=>
        document.querySelector('.o_EmojisPopover_emoji[data-unicode="ðŸ˜Š"]').click()
    );
    assert.strictEqual(
        document.querySelector(`.o_ComposerTextInput_textarea`).value.replace(/\s/,""),
        "#GeneralðŸ˜Š",
        "textcontentofcomposershouldhavepreviouschannelmentionandselectedemojijustafter"
    );
    //ensurepopoverisclosed
    awaitnextAnimationFrame();
});

QUnit.test('displaycommandsuggestionsontyping"/"',asyncfunction(assert){
    assert.expect(2);

    this.data['mail.channel'].records.push({channel_type:'channel',id:20});
    this.data['mail.channel_command'].records.push(
        {
            channel_types:['channel'],
            help:"Listusersinthecurrentchannel",
            name:"who",
        },
    );
    awaitthis.start();
    constthread=this.env.models['mail.thread'].findFromIdentifyingData({
        id:20,
        model:'mail.channel',
    });
    awaitthis.createComposerComponent(thread.composer);

    assert.containsNone(
        document.body,
        '.o_ComposerSuggestionList_list',
        "commandsuggestionslistshouldnotbepresent"
    );
    awaitafterNextRender(()=>{
        document.querySelector(`.o_ComposerTextInput_textarea`).focus();
        document.execCommand('insertText',false,"/");
        document.querySelector(`.o_ComposerTextInput_textarea`)
            .dispatchEvent(newwindow.KeyboardEvent('keydown'));
        document.querySelector(`.o_ComposerTextInput_textarea`)
            .dispatchEvent(newwindow.KeyboardEvent('keyup'));
    });
    assert.hasClass(
        document.querySelector('.o_ComposerSuggestionList_list'),
        'show',
        "shoulddisplaycommandsuggestionsontyping'/'"
    );
});

QUnit.test('donotsendtypingnotificationontyping"/"command',asyncfunction(assert){
    assert.expect(1);

    this.data['mail.channel'].records.push({id:20});
    this.data['mail.channel_command'].records.push({
        channel_types:['channel'],
        help:"Listusersinthecurrentchannel",
        name:"who",
    });
    awaitthis.start({
        asyncmockRPC(route,args){
            if(args.method==='notify_typing'){
                assert.step(`notify_typing:${args.kwargs.is_typing}`);
            }
            returnthis._super(...arguments);
        },
    });
    constthread=this.env.models['mail.thread'].findFromIdentifyingData({
        id:20,
        model:'mail.channel',
    });
    awaitthis.createComposerComponent(thread.composer,{hasThreadTyping:true});

    awaitafterNextRender(()=>{
        document.querySelector(`.o_ComposerTextInput_textarea`).focus();
        document.execCommand('insertText',false,"/");
        document.querySelector(`.o_ComposerTextInput_textarea`)
            .dispatchEvent(newwindow.KeyboardEvent('keydown'));
        document.querySelector(`.o_ComposerTextInput_textarea`)
            .dispatchEvent(newwindow.KeyboardEvent('keyup'));
    });
    assert.verifySteps([],"Norpcdone");
});

QUnit.test('donotsendtypingnotificationontypingafterselectingsuggestionfrom"/"command',asyncfunction(assert){
    assert.expect(1);

    this.data['mail.channel'].records.push({id:20});
    this.data['mail.channel_command'].records.push({
        channel_types:['channel'],
        help:"Listusersinthecurrentchannel",
        name:"who",
    });
    awaitthis.start({
        asyncmockRPC(route,args){
            if(args.method==='notify_typing'){
                assert.step(`notify_typing:${args.kwargs.is_typing}`);
            }
            returnthis._super(...arguments);
        },
    });
    constthread=this.env.models['mail.thread'].findFromIdentifyingData({
        id:20,
        model:'mail.channel',
    });
    awaitthis.createComposerComponent(thread.composer,{hasThreadTyping:true});

    awaitafterNextRender(()=>{
        document.querySelector(`.o_ComposerTextInput_textarea`).focus();
        document.execCommand('insertText',false,"/");
        document.querySelector(`.o_ComposerTextInput_textarea`)
            .dispatchEvent(newwindow.KeyboardEvent('keydown'));
        document.querySelector(`.o_ComposerTextInput_textarea`)
            .dispatchEvent(newwindow.KeyboardEvent('keyup'));
    });
    awaitafterNextRender(()=>
        document.querySelector('.o_ComposerSuggestion').click()
    );
    awaitafterNextRender(()=>{
        document.querySelector(`.o_ComposerTextInput_textarea`).focus();
        document.execCommand('insertText',false,"isuser?");
        document.querySelector(`.o_ComposerTextInput_textarea`)
            .dispatchEvent(newwindow.KeyboardEvent('keydown'));
        document.querySelector(`.o_ComposerTextInput_textarea`)
            .dispatchEvent(newwindow.KeyboardEvent('keyup'));
    });
    assert.verifySteps([],"Norpcdone");
});

QUnit.test('useacommandforaspecificchanneltype',asyncfunction(assert){
    assert.expect(4);

    this.data['mail.channel'].records.push({channel_type:'channel',id:20});
    this.data['mail.channel_command'].records.push(
        {
            channel_types:['channel'],
            help:"Listusersinthecurrentchannel",
            name:"who",
        },
    );
    awaitthis.start();
    constthread=this.env.models['mail.thread'].findFromIdentifyingData({
        id:20,
        model:'mail.channel',
    });
    awaitthis.createComposerComponent(thread.composer);

    assert.containsNone(
        document.body,
        '.o_ComposerSuggestionList_list',
        "commandsuggestionslistshouldnotbepresent"
    );
    assert.strictEqual(
        document.querySelector(`.o_ComposerTextInput_textarea`).value,
        "",
        "textcontentofcomposershouldbeemptyinitially"
    );
    awaitafterNextRender(()=>{
        document.querySelector(`.o_ComposerTextInput_textarea`).focus();
        document.execCommand('insertText',false,"/");
        document.querySelector(`.o_ComposerTextInput_textarea`)
            .dispatchEvent(newwindow.KeyboardEvent('keydown'));
        document.querySelector(`.o_ComposerTextInput_textarea`)
            .dispatchEvent(newwindow.KeyboardEvent('keyup'));
    });
    assert.containsOnce(
        document.body,
        '.o_ComposerSuggestion',
        "shouldhaveacommandsuggestion"
    );
    awaitafterNextRender(()=>
        document.querySelector('.o_ComposerSuggestion').click()
    );
    assert.strictEqual(
        document.querySelector(`.o_ComposerTextInput_textarea`).value.replace(/\s/,""),
        "/who",
        "textcontentofcomposershouldhaveusedcommand+additionalwhitespaceafterwards"
    );
});

QUnit.test("channelwithnocommandsshouldnotpromptanycommandsuggestionsontyping/",asyncfunction(assert){
    assert.expect(1);

    this.data['mail.channel'].records.push({channel_type:'chat',id:20});
    this.data['mail.channel_command'].records.push(
        {
            channel_types:['channel'],
            help:"blablabla",
            name:"who",
        },
    );
    awaitthis.start();
    constthread=this.env.models['mail.thread'].findFromIdentifyingData({
        id:20,
        model:'mail.channel',
    });
    awaitthis.createComposerComponent(thread.composer);
    awaitafterNextRender(()=>{
        document.querySelector('.o_ComposerTextInput_textarea').focus();
        document.execCommand('insertText',false,"/");
        constcomposer_text_input=document.querySelector('.o_ComposerTextInput_textarea');
        composer_text_input.dispatchEvent(newwindow.KeyboardEvent('keydown'));
        composer_text_input.dispatchEvent(newwindow.KeyboardEvent('keyup'));
    });
    assert.containsNone(
        document.body,
        '.o_ComposerSuggestion',
        "shouldnotprompt(command)suggestionaftertyping/(reason:nochannelcommandsinchatchannels)"
    );
});

QUnit.test('commandsuggestionshouldonlyopenifcommandisthefirstcharacter',asyncfunction(assert){
    assert.expect(4);

    this.data['mail.channel'].records.push({channel_type:'channel',id:20});
    this.data['mail.channel_command'].records.push(
        {
            channel_types:['channel'],
            help:"Listusersinthecurrentchannel",
            name:"who",
        },
    );
    awaitthis.start();
    constthread=this.env.models['mail.thread'].findFromIdentifyingData({
        id:20,
        model:'mail.channel',
    });
    awaitthis.createComposerComponent(thread.composer);
    assert.containsNone(
        document.body,
        '.o_ComposerSuggestion',
        "commandsuggestionslistshouldnotbepresent"
    );
    assert.strictEqual(
        document.querySelector(`.o_ComposerTextInput_textarea`).value,
        "",
        "textcontentofcomposershouldbeemptyinitially"
    );
    document.querySelector(`.o_ComposerTextInput_textarea`).focus();
    awaitafterNextRender(()=>
        document.execCommand('insertText',false,"bluhbluh")
    );
    assert.strictEqual(
        document.querySelector(`.o_ComposerTextInput_textarea`).value,
        "bluhbluh",
        "textcontentofcomposershouldhavecontent"
    );
    awaitafterNextRender(()=>{
        document.execCommand('insertText',false,"/");
        document.querySelector(`.o_ComposerTextInput_textarea`)
            .dispatchEvent(newwindow.KeyboardEvent('keydown'));
        document.querySelector(`.o_ComposerTextInput_textarea`)
            .dispatchEvent(newwindow.KeyboardEvent('keyup'));
    });
    assert.containsNone(
        document.body,
        '.o_ComposerSuggestion',
        "shouldnothaveacommandsuggestion"
    );
});

QUnit.test('addanemojiafteracommand',asyncfunction(assert){
    assert.expect(5);

    this.data['mail.channel'].records.push({channel_type:'channel',id:20});
    this.data['mail.channel_command'].records.push(
        {
            channel_types:['channel'],
            help:"Listusersinthecurrentchannel",
            name:"who",
        },
    );
    awaitthis.start();
    constthread=this.env.models['mail.thread'].findFromIdentifyingData({
        id:20,
        model:'mail.channel',
    });
    awaitthis.createComposerComponent(thread.composer);

    assert.containsNone(
        document.body,
        '.o_ComposerSuggestion',
        "commandsuggestionslistshouldnotbepresent"
    );
    assert.strictEqual(
        document.querySelector(`.o_ComposerTextInput_textarea`).value,
        "",
        "textcontentofcomposershouldbeemptyinitially"
    );
    awaitafterNextRender(()=>{
        document.querySelector(`.o_ComposerTextInput_textarea`).focus();
        document.execCommand('insertText',false,"/");
        document.querySelector(`.o_ComposerTextInput_textarea`)
            .dispatchEvent(newwindow.KeyboardEvent('keydown'));
        document.querySelector(`.o_ComposerTextInput_textarea`)
            .dispatchEvent(newwindow.KeyboardEvent('keyup'));
    });
    assert.containsOnce(
        document.body,
        '.o_ComposerSuggestion',
        "shouldhaveacommandsuggestion"
    );
    awaitafterNextRender(()=>
        document.querySelector('.o_ComposerSuggestion').click()
    );
    assert.strictEqual(
        document.querySelector(`.o_ComposerTextInput_textarea`).value.replace(/\s/,""),
        "/who",
        "textcontentofcomposershouldhavepreviouscontent+usedcommand+additionalwhitespaceafterwards"
    );

    //selectemoji
    awaitafterNextRender(()=>
        document.querySelector('.o_Composer_buttonEmojis').click()
    );
    awaitafterNextRender(()=>
        document.querySelector('.o_EmojisPopover_emoji[data-unicode="ðŸ˜Š"]').click()
    );
    assert.strictEqual(
        document.querySelector(`.o_ComposerTextInput_textarea`).value.replace(/\s/,""),
        "/whoðŸ˜Š",
        "textcontentofcomposershouldhavepreviouscommandandselectedemojijustafter"
    );
    //ensurepopoverisclosed
    awaitnextAnimationFrame();
});

QUnit.test('displaypartnermentionsuggestionsontyping"@"',asyncfunction(assert){
    assert.expect(3);

    this.data['res.partner'].records.push({
        id:11,
        email:"testpartner@flectrahq.com",
        name:"TestPartner",
    });
    this.data['res.partner'].records.push({
        id:12,
        email:"testpartner2@flectrahq.com",
        name:"TestPartner2",
    });
    this.data['res.users'].records.push({
        partner_id:11,
    });

    awaitthis.start();
    constcomposer=this.env.models['mail.composer'].create();
    awaitthis.createComposerComponent(composer);

    assert.containsNone(
        document.body,
        '.o_ComposerSuggestionList_list',
        "mentionsuggestionslistshouldnotbepresent"
    );
    awaitafterNextRender(()=>{
        document.querySelector(`.o_ComposerTextInput_textarea`).focus();
        document.execCommand('insertText',false,"@");
        document.querySelector(`.o_ComposerTextInput_textarea`)
            .dispatchEvent(newwindow.KeyboardEvent('keydown'));
        document.querySelector(`.o_ComposerTextInput_textarea`)
            .dispatchEvent(newwindow.KeyboardEvent('keyup'));
    });
    assert.hasClass(
        document.querySelector('.o_ComposerSuggestionList_list'),
        'show',
        "shoulddisplaymentionsuggestionsontyping'@'"
    );
    assert.containsOnce(
        document.body,
        '.dropdown-divider',
        "shouldhaveaseparator"
    );
});

QUnit.test('mentionapartner',asyncfunction(assert){
    assert.expect(4);

    this.data['res.partner'].records.push({
        email:"testpartner@flectrahq.com",
        name:"TestPartner",
    });
    awaitthis.start();
    constcomposer=this.env.models['mail.composer'].create();
    awaitthis.createComposerComponent(composer);

    assert.containsNone(
        document.body,
        '.o_ComposerSuggestionList_list',
        "mentionsuggestionslistshouldnotbepresent"
    );
    assert.strictEqual(
        document.querySelector(`.o_ComposerTextInput_textarea`).value,
        "",
        "textcontentofcomposershouldbeemptyinitially"
    );
    awaitafterNextRender(()=>{
        document.querySelector(`.o_ComposerTextInput_textarea`).focus();
        document.execCommand('insertText',false,"@");
        document.querySelector(`.o_ComposerTextInput_textarea`)
            .dispatchEvent(newwindow.KeyboardEvent('keydown'));
        document.querySelector(`.o_ComposerTextInput_textarea`)
            .dispatchEvent(newwindow.KeyboardEvent('keyup'));
        document.execCommand('insertText',false,"T");
        document.querySelector(`.o_ComposerTextInput_textarea`)
            .dispatchEvent(newwindow.KeyboardEvent('keydown'));
        document.querySelector(`.o_ComposerTextInput_textarea`)
            .dispatchEvent(newwindow.KeyboardEvent('keyup'));
        document.execCommand('insertText',false,"e");
        document.querySelector(`.o_ComposerTextInput_textarea`)
            .dispatchEvent(newwindow.KeyboardEvent('keydown'));
        document.querySelector(`.o_ComposerTextInput_textarea`)
            .dispatchEvent(newwindow.KeyboardEvent('keyup'));
    });
    assert.containsOnce(
        document.body,
        '.o_ComposerSuggestion',
        "shouldhaveamentionsuggestion"
    );
    awaitafterNextRender(()=>
        document.querySelector('.o_ComposerSuggestion').click()
    );
    assert.strictEqual(
        document.querySelector(`.o_ComposerTextInput_textarea`).value.replace(/\s/,""),
        "@TestPartner",
        "textcontentofcomposershouldhavementionedpartner+additionalwhitespaceafterwards"
    );
});

QUnit.test('mentionapartneraftersometext',asyncfunction(assert){
    assert.expect(5);

    this.data['res.partner'].records.push({
        email:"testpartner@flectrahq.com",
        name:"TestPartner",
    });
    awaitthis.start();
    constcomposer=this.env.models['mail.composer'].create();
    awaitthis.createComposerComponent(composer);

    assert.containsNone(
        document.body,
        '.o_ComposerSuggestion',
        "mentionsuggestionslistshouldnotbepresent"
    );
    assert.strictEqual(
        document.querySelector(`.o_ComposerTextInput_textarea`).value,
        "",
        "textcontentofcomposershouldbeemptyinitially"
    );
    document.querySelector(`.o_ComposerTextInput_textarea`).focus();
    awaitafterNextRender(()=>
        document.execCommand('insertText',false,"bluhbluh")
    );
    assert.strictEqual(
        document.querySelector(`.o_ComposerTextInput_textarea`).value,
        "bluhbluh",
        "textcontentofcomposershouldhavecontent"
    );
    awaitafterNextRender(()=>{
        document.querySelector(`.o_ComposerTextInput_textarea`).focus();
        document.execCommand('insertText',false,"@");
        document.querySelector(`.o_ComposerTextInput_textarea`)
            .dispatchEvent(newwindow.KeyboardEvent('keydown'));
        document.querySelector(`.o_ComposerTextInput_textarea`)
            .dispatchEvent(newwindow.KeyboardEvent('keyup'));
        document.execCommand('insertText',false,"T");
        document.querySelector(`.o_ComposerTextInput_textarea`)
            .dispatchEvent(newwindow.KeyboardEvent('keydown'));
        document.querySelector(`.o_ComposerTextInput_textarea`)
            .dispatchEvent(newwindow.KeyboardEvent('keyup'));
        document.execCommand('insertText',false,"e");
        document.querySelector(`.o_ComposerTextInput_textarea`)
            .dispatchEvent(newwindow.KeyboardEvent('keydown'));
        document.querySelector(`.o_ComposerTextInput_textarea`)
            .dispatchEvent(newwindow.KeyboardEvent('keyup'));
    });
    assert.containsOnce(
        document.body,
        '.o_ComposerSuggestion',
        "shouldhaveamentionsuggestion"
    );
    awaitafterNextRender(()=>
        document.querySelector('.o_ComposerSuggestion').click()
    );
    assert.strictEqual(
        document.querySelector(`.o_ComposerTextInput_textarea`).value.replace(/\s/,""),
        "bluhbluh@TestPartner",
        "textcontentofcomposershouldhavepreviouscontent+mentionedpartner+additionalwhitespaceafterwards"
    );
});

QUnit.test('addanemojiafterapartnermention',asyncfunction(assert){
    assert.expect(5);

    this.data['res.partner'].records.push({
        email:"testpartner@flectrahq.com",
        name:"TestPartner",
    });
    awaitthis.start();
    constcomposer=this.env.models['mail.composer'].create();
    awaitthis.createComposerComponent(composer);

    assert.containsNone(
        document.body,
        '.o_ComposerSuggestion',
        "mentionsuggestionslistshouldnotbepresent"
    );
    assert.strictEqual(
        document.querySelector(`.o_ComposerTextInput_textarea`).value,
        "",
        "textcontentofcomposershouldbeemptyinitially"
    );
    awaitafterNextRender(()=>{
        document.querySelector(`.o_ComposerTextInput_textarea`).focus();
        document.execCommand('insertText',false,"@");
        document.querySelector(`.o_ComposerTextInput_textarea`)
            .dispatchEvent(newwindow.KeyboardEvent('keydown'));
        document.querySelector(`.o_ComposerTextInput_textarea`)
            .dispatchEvent(newwindow.KeyboardEvent('keyup'));
        document.execCommand('insertText',false,"T");
        document.querySelector(`.o_ComposerTextInput_textarea`)
            .dispatchEvent(newwindow.KeyboardEvent('keydown'));
        document.querySelector(`.o_ComposerTextInput_textarea`)
            .dispatchEvent(newwindow.KeyboardEvent('keyup'));
        document.execCommand('insertText',false,"e");
        document.querySelector(`.o_ComposerTextInput_textarea`)
            .dispatchEvent(newwindow.KeyboardEvent('keydown'));
        document.querySelector(`.o_ComposerTextInput_textarea`)
            .dispatchEvent(newwindow.KeyboardEvent('keyup'));
    });
    assert.containsOnce(
        document.body,
        '.o_ComposerSuggestion',
        "shouldhaveamentionsuggestion"
    );
    awaitafterNextRender(()=>
        document.querySelector('.o_ComposerSuggestion').click()
    );
    assert.strictEqual(
        document.querySelector(`.o_ComposerTextInput_textarea`).value.replace(/\s/,""),
        "@TestPartner",
        "textcontentofcomposershouldhavepreviouscontent+mentionedpartner+additionalwhitespaceafterwards"
    );

    //selectemoji
    awaitafterNextRender(()=>
        document.querySelector('.o_Composer_buttonEmojis').click()
    );
    awaitafterNextRender(()=>
        document.querySelector('.o_EmojisPopover_emoji[data-unicode="ðŸ˜Š"]').click()
    );
    assert.strictEqual(
        document.querySelector(`.o_ComposerTextInput_textarea`).value.replace(/\s/,""),
        "@TestPartnerðŸ˜Š",
        "textcontentofcomposershouldhavepreviousmentionandselectedemojijustafter"
    );
    //ensurepopoverisclosed
    awaitnextAnimationFrame();
});

QUnit.test('composer:addanattachment',asyncfunction(assert){
    assert.expect(2);

    awaitthis.start();
    constcomposer=this.env.models['mail.composer'].create();
    awaitthis.createComposerComponent(composer,{attachmentsDetailsMode:'card'});
    constfile=awaitcreateFile({
        content:'hello,world',
        contentType:'text/plain',
        name:'text.txt',
    });
    awaitafterNextRender(()=>
        inputFiles(
            document.querySelector('.o_FileUploader_input'),
            [file]
        )
    );
    assert.ok(
        document.querySelector('.o_Composer_attachmentList'),
        "shouldhaveanattachmentlist"
    );
    assert.ok(
        document.querySelector(`.o_Composer.o_Attachment`),
        "shouldhaveanattachment"
    );
});

QUnit.test('composer:dropattachments',asyncfunction(assert){
    assert.expect(4);

    awaitthis.start();
    constcomposer=this.env.models['mail.composer'].create();
    awaitthis.createComposerComponent(composer);
    constfiles=[
        awaitcreateFile({
            content:'hello,world',
            contentType:'text/plain',
            name:'text.txt',
        }),
        awaitcreateFile({
            content:'hello,worlduh',
            contentType:'text/plain',
            name:'text2.txt',
        }),
    ];
    awaitafterNextRender(()=>dragenterFiles(document.querySelector('.o_Composer')));
    assert.ok(
        document.querySelector('.o_Composer_dropZone'),
        "shouldhaveadropzone"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_Composer.o_Attachment`).length,
        0,
        "shouldhavenoattachmentbeforefilesaredropped"
    );

    awaitafterNextRender(()=>
        dropFiles(
            document.querySelector('.o_Composer_dropZone'),
            files
        )
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_Composer.o_Attachment`).length,
        2,
        "shouldhave2attachmentsinthecomposerafterfilesdropped"
    );

    awaitafterNextRender(()=>dragenterFiles(document.querySelector('.o_Composer')));
    awaitafterNextRender(async()=>
        dropFiles(
            document.querySelector('.o_Composer_dropZone'),
            [
                awaitcreateFile({
                    content:'hello,world',
                    contentType:'text/plain',
                    name:'text3.txt',
                })
            ]
        )
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_Composer.o_Attachment`).length,
        3,
        "shouldhave3attachmentsintheboxafterfilesdropped"
    );
});

QUnit.test('composer:pasteattachments',asyncfunction(assert){
    assert.expect(2);

    awaitthis.start();
    constcomposer=this.env.models['mail.composer'].create();
    awaitthis.createComposerComponent(composer);
    constfiles=[
        awaitcreateFile({
            content:'hello,world',
            contentType:'text/plain',
            name:'text.txt',
        })
    ];
    assert.strictEqual(
        document.querySelectorAll(`.o_Composer.o_Attachment`).length,
        0,
        "shouldnothaveanyattachmentinthecomposerbeforepaste"
    );

    awaitafterNextRender(()=>
        pasteFiles(document.querySelector('.o_ComposerTextInput'),files)
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_Composer.o_Attachment`).length,
        1,
        "shouldhave1attachmentinthecomposerafterpaste"
    );
});

QUnit.test('sendmessagewhenenterispressedwhileholdingctrlkey(thisshortcutisavailable)',asyncfunction(assert){
    //Notethattestdoesn'tassertENTERmakesnonewline,becausethis
    //defaultbrowsercannotbesimulatedwithjustdispatching
    //programmaticallycraftedevents...
    assert.expect(5);

    this.data['mail.channel'].records.push({id:20});
    awaitthis.start({
        asyncmockRPC(route,args){
            if(args.method==='message_post'){
                assert.step('message_post');
            }
            returnthis._super(...arguments);
        },
    });
    constthread=this.env.models['mail.thread'].findFromIdentifyingData({
        id:20,
        model:'mail.channel',
    });
    awaitthis.createComposerComponent(thread.composer,{
        textInputSendShortcuts:['ctrl-enter'],
    });
    //Typemessage
    document.querySelector(`.o_ComposerTextInput_textarea`).focus();
    document.execCommand('insertText',false,"testmessage");
    assert.strictEqual(
        document.querySelector(`.o_ComposerTextInput_textarea`).value,
        "testmessage",
        "shouldhaveinsertedtextcontentineditable"
    );

    awaitafterNextRender(()=>{
        constenterEvent=newwindow.KeyboardEvent('keydown',{key:'Enter'});
        document.querySelector(`.o_ComposerTextInput_textarea`)
            .dispatchEvent(enterEvent);
    });
    assert.strictEqual(
        document.querySelector(`.o_ComposerTextInput_textarea`).value,
        "testmessage",
        "shouldhaveinsertedtextcontentineditableasmessagehasnotbeenposted"
    );

    //Sendmessagewithctrl+enter
    awaitafterNextRender(()=>
        document.querySelector(`.o_ComposerTextInput_textarea`)
            .dispatchEvent(newwindow.KeyboardEvent('keydown',{ctrlKey:true,key:'Enter'}))
    );
    assert.verifySteps(['message_post']);
    assert.strictEqual(
        document.querySelector(`.o_ComposerTextInput_textarea`).value,
        "",
        "shouldhavenocontentincomposerinputasmessagehasbeenposted"
    );
});

QUnit.test('sendmessagewhenenterispressedwhileholdingmetakey(thisshortcutisavailable)',asyncfunction(assert){
    //Notethattestdoesn'tassertENTERmakesnonewline,becausethis
    //defaultbrowsercannotbesimulatedwithjustdispatching
    //programmaticallycraftedevents...
    assert.expect(5);

    this.data['mail.channel'].records.push({id:20});
    awaitthis.start({
        asyncmockRPC(route,args){
            if(args.method==='message_post'){
                assert.step('message_post');
            }
            returnthis._super(...arguments);
        },
    });
    constthread=this.env.models['mail.thread'].findFromIdentifyingData({
        id:20,
        model:'mail.channel',
    });
    awaitthis.createComposerComponent(thread.composer,{
        textInputSendShortcuts:['meta-enter'],
    });
    //Typemessage
    document.querySelector(`.o_ComposerTextInput_textarea`).focus();
    document.execCommand('insertText',false,"testmessage");
    assert.strictEqual(
        document.querySelector(`.o_ComposerTextInput_textarea`).value,
        "testmessage",
        "shouldhaveinsertedtextcontentineditable"
    );

    awaitafterNextRender(()=>{
        constenterEvent=newwindow.KeyboardEvent('keydown',{key:'Enter'});
        document.querySelector(`.o_ComposerTextInput_textarea`)
            .dispatchEvent(enterEvent);
    });
    assert.strictEqual(
        document.querySelector(`.o_ComposerTextInput_textarea`).value,
        "testmessage",
        "shouldhaveinsertedtextcontentineditableasmessagehasnotbeenposted"
    );

    //Sendmessagewithmeta+enter
    awaitafterNextRender(()=>
        document.querySelector(`.o_ComposerTextInput_textarea`)
            .dispatchEvent(newwindow.KeyboardEvent('keydown',{key:'Enter',metaKey:true}))
    );
    assert.verifySteps(['message_post']);
    assert.strictEqual(
        document.querySelector(`.o_ComposerTextInput_textarea`).value,
        "",
        "shouldhavenocontentincomposerinputasmessagehasbeenposted"
    );
});

QUnit.test('composertextinputclearedonmessagepost',asyncfunction(assert){
    assert.expect(4);

    //channelthatisexpectedtoberendered
    //witharandomuniqueidthatwillbereferencedinthetest
    this.data['mail.channel'].records.push({id:20});
    awaitthis.start({
        asyncmockRPC(route,args){
            if(args.method==='message_post'){
                assert.step('message_post');
            }
            returnthis._super(...arguments);
        },
    });
    constthread=this.env.models['mail.thread'].findFromIdentifyingData({
        id:20,
        model:'mail.channel',
    });
    awaitthis.createComposerComponent(thread.composer);
    //Typemessage
    awaitafterNextRender(()=>{
        document.querySelector(`.o_ComposerTextInput_textarea`).focus();
        document.execCommand('insertText',false,"testmessage");
    });
    assert.strictEqual(
        document.querySelector(`.o_ComposerTextInput_textarea`).value,
        "testmessage",
        "shouldhaveinsertedtextcontentineditable"
    );

    //Sendmessage
    awaitafterNextRender(()=>
        document.querySelector('.o_Composer_buttonSend').click()
    );
    assert.verifySteps(['message_post']);
    assert.strictEqual(
        document.querySelector(`.o_ComposerTextInput_textarea`).value,
        "",
        "shouldhavenocontentincomposerinputafterpostingmessage"
    );
});

QUnit.test('composerinputsclearedonmessagepostincomposerofamailingchannel',asyncfunction(assert){
    assert.expect(10);

    //channelthatisexpectedtoberendered,withpropermass_mailing
    //valueandarandomuniqueidthatwillbereferencedinthetest
    this.data['mail.channel'].records.push({id:20,mass_mailing:true});
    awaitthis.start({
        asyncmockRPC(route,args){
            if(args.method==='message_post'){
                assert.step('message_post');
                assert.ok(
                    'body'inargs.kwargs,
                    "bodyshouldbepostedwiththemessage"
                );
                assert.strictEqual(
                    args.kwargs.body,
                    "testmessage",
                    "postedbodyshouldbetheonetypedintextinput"
                );
                assert.ok(
                    'subject'inargs.kwargs,
                    "subjectshouldbepostedwiththemessage"
                );
                assert.strictEqual(
                    args.kwargs.subject,
                    "testsubject",
                    "postedsubjectshouldbetheonetypedinsubjectinput"
                );
            }
            returnthis._super(...arguments);
        },
    });
    constthread=this.env.models['mail.thread'].findFromIdentifyingData({
        id:20,
        model:'mail.channel',
    });
    awaitthis.createComposerComponent(thread.composer);
    //Typemessage
    awaitafterNextRender(()=>{
        document.querySelector(`.o_ComposerTextInput_textarea`).focus();
        document.execCommand('insertText',false,"testmessage");
    });
    assert.strictEqual(
        document.querySelector(`.o_ComposerTextInput_textarea`).value,
        "testmessage",
        "shouldhaveinsertedtextcontentineditable"
    );

    awaitafterNextRender(()=>{
        document.querySelector(`.o_Composer_subjectInput`).focus();
        document.execCommand('insertText',false,"testsubject");
    });
    assert.strictEqual(
        document.querySelector(`.o_Composer_subjectInput`).value,
        "testsubject",
        "shouldhaveinsertedtextcontentininput"
    );

    //Sendmessage
    awaitafterNextRender(()=>
        document.querySelector('.o_Composer_buttonSend').click()
    );
    assert.verifySteps(['message_post']);
    assert.strictEqual(
        document.querySelector(`.o_ComposerTextInput_textarea`).value,
        "",
        "shouldhavenocontentincomposerinputafterpostingmessage"
    );
    assert.strictEqual(
        document.querySelector(`.o_Composer_subjectInput`).value,
        "",
        "shouldhavenocontentincomposersubjectinputafterpostingmessage"
    );
});

QUnit.test('composerwiththreadtypingnotificationstatus',asyncfunction(assert){
    assert.expect(2);

    //channelthatisexpectedtoberendered
    //witharandomuniqueidthatwillbereferencedinthetest
    this.data['mail.channel'].records.push({id:20});
    awaitthis.start();
    constthread=this.env.models['mail.thread'].findFromIdentifyingData({
        id:20,
        model:'mail.channel',
    });
    awaitthis.createComposerComponent(thread.composer,{hasThreadTyping:true});

    assert.containsOnce(
        document.body,
        '.o_Composer_threadTextualTypingStatus',
        "Composershouldhaveathreadtextualtypingstatusbar"
    );
    assert.strictEqual(
        document.body.querySelector('.o_Composer_threadTextualTypingStatus').textContent,
        "",
        "Bydefault,threadtextualtypingstatusbarshouldbeempty"
    );
});

QUnit.test('currentpartnernotifyistypingtootherthreadmembers',asyncfunction(assert){
    assert.expect(2);

    //channelthatisexpectedtoberendered
    //witharandomuniqueidthatwillbereferencedinthetest
    this.data['mail.channel'].records.push({id:20});
    awaitthis.start({
        asyncmockRPC(route,args){
            if(args.method==='notify_typing'){
                assert.step(`notify_typing:${args.kwargs.is_typing}`);
            }
            returnthis._super(...arguments);
        },
    });
    constthread=this.env.models['mail.thread'].findFromIdentifyingData({
        id:20,
        model:'mail.channel',
    });
    awaitthis.createComposerComponent(thread.composer,{hasThreadTyping:true});

    document.querySelector(`.o_ComposerTextInput_textarea`).focus();
    document.execCommand('insertText',false,"a");
    document.querySelector(`.o_ComposerTextInput_textarea`)
        .dispatchEvent(newwindow.KeyboardEvent('keydown',{key:'a'}));

    assert.verifySteps(
        ['notify_typing:true'],
        "shouldhavenotifiedcurrentpartnertypingstatus"
    );
});

QUnit.test('currentpartneristypingshouldnottranslateontextualtypingstatus',asyncfunction(assert){
    assert.expect(3);

    //channelthatisexpectedtoberendered
    //witharandomuniqueidthatwillbereferencedinthetest
    this.data['mail.channel'].records.push({id:20});
    awaitthis.start({
        hasTimeControl:true,
        asyncmockRPC(route,args){
            if(args.method==='notify_typing'){
                assert.step(`notify_typing:${args.kwargs.is_typing}`);
            }
            returnthis._super(...arguments);
        },
    });
    constthread=this.env.models['mail.thread'].findFromIdentifyingData({
        id:20,
        model:'mail.channel',
    });
    awaitthis.createComposerComponent(thread.composer,{hasThreadTyping:true});

    document.querySelector(`.o_ComposerTextInput_textarea`).focus();
    document.execCommand('insertText',false,"a");
    document.querySelector(`.o_ComposerTextInput_textarea`)
        .dispatchEvent(newwindow.KeyboardEvent('keydown',{key:'a'}));

    assert.verifySteps(
        ['notify_typing:true'],
        "shouldhavenotifiedcurrentpartnertypingstatus"
    );

    awaitnextAnimationFrame();
    assert.strictEqual(
        document.body.querySelector('.o_Composer_threadTextualTypingStatus').textContent,
        "",
        "Threadtextualtypingstatusbarshouldnotdisplaycurrentpartneristyping"
    );
});

QUnit.test('currentpartnernotifynolongeristypingtothreadmembersafter5secondsinactivity',asyncfunction(assert){
    assert.expect(4);

    //channelthatisexpectedtoberendered
    //witharandomuniqueidthatwillbereferencedinthetest
    this.data['mail.channel'].records.push({id:20});
    awaitthis.start({
        hasTimeControl:true,
        asyncmockRPC(route,args){
            if(args.method==='notify_typing'){
                assert.step(`notify_typing:${args.kwargs.is_typing}`);
            }
            returnthis._super(...arguments);
        },
    });
    constthread=this.env.models['mail.thread'].findFromIdentifyingData({
        id:20,
        model:'mail.channel',
    });
    awaitthis.createComposerComponent(thread.composer,{hasThreadTyping:true});

    document.querySelector(`.o_ComposerTextInput_textarea`).focus();
    document.execCommand('insertText',false,"a");
    document.querySelector(`.o_ComposerTextInput_textarea`)
        .dispatchEvent(newwindow.KeyboardEvent('keydown',{key:'a'}));

    assert.verifySteps(
        ['notify_typing:true'],
        "shouldhavenotifiedcurrentpartneristyping"
    );

    awaitthis.env.testUtils.advanceTime(5*1000);
    assert.verifySteps(
        ['notify_typing:false'],
        "shouldhavenotifiedcurrentpartnernolongeristyping(inactivefor5seconds)"
    );
});

QUnit.test('currentpartnernotifyistypingagaintoothermembersevery50soflongcontinuoustyping',asyncfunction(assert){
    assert.expect(4);

    //channelthatisexpectedtoberendered
    //witharandomuniqueidthatwillbereferencedinthetest
    this.data['mail.channel'].records.push({id:20});
    awaitthis.start({
        hasTimeControl:true,
        asyncmockRPC(route,args){
            if(args.method==='notify_typing'){
                assert.step(`notify_typing:${args.kwargs.is_typing}`);
            }
            returnthis._super(...arguments);
        },
    });
    constthread=this.env.models['mail.thread'].findFromIdentifyingData({
        id:20,
        model:'mail.channel',
    });
    awaitthis.createComposerComponent(thread.composer,{hasThreadTyping:true});

    document.querySelector(`.o_ComposerTextInput_textarea`).focus();
    document.execCommand('insertText',false,"a");
    document.querySelector(`.o_ComposerTextInput_textarea`)
        .dispatchEvent(newwindow.KeyboardEvent('keydown',{key:'a'}));
    assert.verifySteps(
        ['notify_typing:true'],
        "shouldhavenotifiedcurrentpartneristyping"
    );

    //simulatecurrentpartnertypingacharacterevery2.5secondsfor50secondsstraight.
    lettotalTimeElapsed=0;
    constelapseTickTime=2.5*1000;
    while(totalTimeElapsed<50*1000){
        document.execCommand('insertText',false,"a");
        document.querySelector(`.o_ComposerTextInput_textarea`)
            .dispatchEvent(newwindow.KeyboardEvent('keydown',{key:'a'}));
        totalTimeElapsed+=elapseTickTime;
        awaitthis.env.testUtils.advanceTime(elapseTickTime);
    }

    assert.verifySteps(
        ['notify_typing:true'],
        "shouldhavenotifiedcurrentpartnerisstilltypingafter50sofstraighttyping"
    );
});

QUnit.test('composer:sendbuttonisdisabledifattachmentuploadisnotfinished',asyncfunction(assert){
    assert.expect(8);

    constattachmentUploadedPromise=makeTestPromise();
    awaitthis.start({
        asyncmockFetch(resource,init){
            constres=this._super(...arguments);
            if(resource==='/web/binary/upload_attachment'){
                awaitattachmentUploadedPromise;
            }
            returnres;
        }
    });
    constcomposer=this.env.models['mail.composer'].create();
    awaitthis.createComposerComponent(composer);
    constfile=awaitcreateFile({
        content:'hello,world',
        contentType:'text/plain',
        name:'text.txt',
    });
    awaitafterNextRender(()=>
        inputFiles(
            document.querySelector('.o_FileUploader_input'),
            [file]
        )
    );
    assert.containsOnce(
        document.body,
        '.o_Attachment',
        "shouldhaveanattachmentafterafilehasbeeninput"
    );
    assert.containsOnce(
        document.body,
        '.o_Attachment.o-temporary',
        "attachmentdisplayedisbeinguploaded"
    );
    assert.containsOnce(
        document.body,
        '.o_Composer_buttonSend',
        "composersendbuttonshouldbedisplayed"
    );
    assert.ok(
        !!document.querySelector('.o_Composer_buttonSend').attributes.disabled,
        "composersendbuttonshouldbedisabledasattachmentisnotyetuploaded"
    );

    //simulatesattachmentfinishesuploading
    awaitafterNextRender(()=>attachmentUploadedPromise.resolve());
    assert.containsOnce(
        document.body,
        '.o_Attachment',
        "shouldhaveonlyoneattachment"
    );
    assert.containsNone(
        document.body,
        '.o_Attachment.o-temporary',
        "attachmentdisplayedshouldbeuploaded"
    );
    assert.containsOnce(
        document.body,
        '.o_Composer_buttonSend',
        "composersendbuttonshouldstillbepresent"
    );
    assert.ok(
        !document.querySelector('.o_Composer_buttonSend').attributes.disabled,
        "composersendbuttonshouldbeenabledasattachmentisnowuploaded"
    );
});

QUnit.test('warningonsendwithshortcutwhenattemptingtopostmessagewithstill-uploadingattachments',asyncfunction(assert){
    assert.expect(7);

    awaitthis.start({
        asyncmockFetch(resource,init){
            constres=this._super(...arguments);
            if(resource==='/web/binary/upload_attachment'){
                //simulatesattachmentisneverfinisheduploading
                awaitnewPromise(()=>{});
            }
            returnres;
        },
        services:{
            notification:{
                notify(params){
                    assert.strictEqual(
                        params.message,
                        "Pleasewaitwhilethefileisuploading.",
                        "notificationcontentshouldbeabouttheuploadingfile"
                    );
                    assert.strictEqual(
                        params.type,
                        'warning',
                        "notificationshouldbeawarning"
                    );
                    assert.step('notification');
                }
            }
        },
    });
    constthread=this.env.models['mail.thread'].create({
        composer:[['create',{isLog:false}]],
        id:20,
        model:'res.partner',
    });
    awaitthis.createComposerComponent(thread.composer,{
        textInputSendShortcuts:['enter'],
    });
    constfile=awaitcreateFile({
        content:'hello,world',
        contentType:'text/plain',
        name:'text.txt',
    });
    awaitafterNextRender(()=>
        inputFiles(
            document.querySelector('.o_FileUploader_input'),
            [file]
        )
    );
    assert.containsOnce(
        document.body,
        '.o_Attachment',
        "shouldhaveonlyoneattachment"
    );
    assert.containsOnce(
        document.body,
        '.o_Attachment.o-temporary',
        "attachmentdisplayedisbeinguploaded"
    );
    assert.containsOnce(
        document.body,
        '.o_Composer_buttonSend',
        "composersendbuttonshouldbedisplayed"
    );

    //Trytosendmessage
    document
        .querySelector(`.o_ComposerTextInput_textarea`)
        .dispatchEvent(newwindow.KeyboardEvent('keydown',{key:'Enter'}));
    assert.verifySteps(
        ['notification'],
        "shouldhavetriggeredanotificationforinabilitytopostmessageatthemoment(someattachmentsarestillbeinguploaded)"
    );
});

QUnit.test('removeanattachmentfromcomposerdoesnotneedanyconfirmation',asyncfunction(assert){
    assert.expect(3);

    awaitthis.start();
    constcomposer=this.env.models['mail.composer'].create();
    awaitthis.createComposerComponent(composer);
    constfile=awaitcreateFile({
        content:'hello,world',
        contentType:'text/plain',
        name:'text.txt',
    });
    awaitafterNextRender(()=>
        inputFiles(
            document.querySelector('.o_FileUploader_input'),
            [file]
        )
    );
    assert.containsOnce(
        document.body,
        '.o_Composer_attachmentList',
        "shouldhaveanattachmentlist"
    );
    assert.containsOnce(
        document.body,
        '.o_Composer.o_Attachment',
        "shouldhaveonlyoneattachment"
    );

    awaitafterNextRender(()=>
        document.querySelector('.o_Attachment_asideItemUnlink').click()
    );
    assert.containsNone(
        document.body,
        '.o_Composer.o_Attachment',
        "shouldnothaveanyattachmentleftafterunlinkingtheonlyone"
    );
});

QUnit.test('removeanuploadingattachment',asyncfunction(assert){
    assert.expect(4);

    awaitthis.start({
        asyncmockFetch(resource,init){
            constres=this._super(...arguments);
            if(resource==='/web/binary/upload_attachment'){
                //simulatesuploadingindefinitely
                awaitnewPromise(()=>{});
            }
            returnres;
        }
    });
    constcomposer=this.env.models['mail.composer'].create();
    awaitthis.createComposerComponent(composer);
    constfile=awaitcreateFile({
        content:'hello,world',
        contentType:'text/plain',
        name:'text.txt',
    });
    awaitafterNextRender(()=>
        inputFiles(
            document.querySelector('.o_FileUploader_input'),
            [file]
        )
    );
    assert.containsOnce(
        document.body,
        '.o_Composer_attachmentList',
        "shouldhaveanattachmentlist"
    );
    assert.containsOnce(
        document.body,
        '.o_Composer.o_Attachment',
        "shouldhaveonlyoneattachment"
    );
    assert.containsOnce(
        document.body,
        '.o_Composer.o_Attachment.o-temporary',
        "shouldhaveanuploadingattachment"
    );

    awaitafterNextRender(()=>
        document.querySelector('.o_Attachment_asideItemUnlink').click());
    assert.containsNone(
        document.body,
        '.o_Composer.o_Attachment',
        "shouldnothaveanyattachmentleftafterunlinkingtemporaryone"
    );
});

QUnit.test('removeanuploadingattachmentabortsupload',asyncfunction(assert){
    assert.expect(1);

    awaitthis.start({
        asyncmockFetch(resource,init){
            constres=this._super(...arguments);
            if(resource==='/web/binary/upload_attachment'){
                //simulatesuploadingindefinitely
                awaitnewPromise(()=>{});
            }
            returnres;
        }
    });
    constcomposer=this.env.models['mail.composer'].create();
    awaitthis.createComposerComponent(composer);
    constfile=awaitcreateFile({
        content:'hello,world',
        contentType:'text/plain',
        name:'text.txt',
    });
    awaitafterNextRender(()=>
        inputFiles(
            document.querySelector('.o_FileUploader_input'),
            [file]
        )
    );
    assert.containsOnce(
        document.body,
        '.o_Attachment',
        "shouldcontainanattachment"
    );
    constattachmentLocalId=document.querySelector('.o_Attachment').dataset.attachmentLocalId;

    awaitthis.afterEvent({
        eventName:'o-attachment-upload-abort',
        func:()=>{
            document.querySelector('.o_Attachment_asideItemUnlink').click();
        },
        message:"attachmentuploadrequestshouldhavebeenaborted",
        predicate:({attachment})=>{
            returnattachment.localId===attachmentLocalId;
        },
    });
});

QUnit.test("basicrenderingwhensendingamessagetothefollowersandthreaddoesn'thaveaname",asyncfunction(assert){
    assert.expect(1);

    awaitthis.start();
    constthread=this.env.models['mail.thread'].create({
        composer:[['create',{isLog:false}]],
        id:20,
        model:'res.partner',
    });
    awaitthis.createComposerComponent(thread.composer,{hasFollowers:true});
    assert.strictEqual(
        document.querySelector('.o_Composer_followers').textContent.replace(/\s+/g,''),
        "To:Followersofthisdocument",
        "Composershoulddisplay\"To:Followersofthisdocument\"ifthethreadasnoname."
    );
});

QUnit.test('sendmessageonlyoncewhenbuttonsendisclickedtwicequickly',asyncfunction(assert){
    assert.expect(2);

    this.data['mail.channel'].records.push({id:20});
    awaitthis.start({
        asyncmockRPC(route,args){
            if(args.method==='message_post'){
                assert.step('message_post');
            }
            returnthis._super(...arguments);
        },
    });
    constthread=this.env.models['mail.thread'].findFromIdentifyingData({
        id:20,
        model:'mail.channel',
    });
    awaitthis.createComposerComponent(thread.composer);
    //Typemessage
    awaitafterNextRender(()=>{
        document.querySelector(`.o_ComposerTextInput_textarea`).focus();
        document.execCommand('insertText',false,"testmessage");
    });

    awaitafterNextRender(()=>{
        document.querySelector(`.o_Composer_buttonSend`).click();
        document.querySelector(`.o_Composer_buttonSend`).click();
    });
    assert.verifySteps(
        ['message_post'],
        "Themessagehasbeenpostedonlyonce"
    );
});

QUnit.test('sendmessageonlyoncewhenenterispressedtwicequickly',asyncfunction(assert){
    assert.expect(2);

    this.data['mail.channel'].records.push({id:20});
    awaitthis.start({
        asyncmockRPC(route,args){
            if(args.method==='message_post'){
                assert.step('message_post');
            }
            returnthis._super(...arguments);
        },
    });
    constthread=this.env.models['mail.thread'].findFromIdentifyingData({
        id:20,
        model:'mail.channel',
    });
    awaitthis.createComposerComponent(thread.composer,{
        textInputSendShortcuts:['enter'],
    });
    //Typemessage
    awaitafterNextRender(()=>{
        document.querySelector(`.o_ComposerTextInput_textarea`).focus();
        document.execCommand('insertText',false,"testmessage");
    });
    awaitafterNextRender(()=>{
        constenterEvent=newwindow.KeyboardEvent('keydown',{key:'Enter'});
        document.querySelector(`.o_ComposerTextInput_textarea`)
            .dispatchEvent(enterEvent);
        document.querySelector(`.o_ComposerTextInput_textarea`)
            .dispatchEvent(enterEvent);
    });
    assert.verifySteps(
        ['message_post'],
        "Themessagehasbeenpostedonlyonce"
    );
});

QUnit.test('[technical]doesnotcrashwhenanattachmentisremovedbeforeitsuploadstarts',asyncfunction(assert){
    //Uploadingmultiplefilesuploadsattachmentsoneatatime,thistest
    //ensuresthatthereisnocrashwhenanattachmentisdestroyedbeforeits
    //uploadstarted.
    assert.expect(1);

    //Promisetoblockattachmentuploading
    constuploadPromise=makeTestPromise();
    awaitthis.start({
        asyncmockFetch(resource){
            const_super=this._super.bind(this,...arguments);
            if(resource==='/web/binary/upload_attachment'){
                awaituploadPromise;
            }
            return_super();
        },
    });
    constcomposer=this.env.models['mail.composer'].create();
    awaitthis.createComposerComponent(composer);
    constfile1=awaitcreateFile({
        name:'text1.txt',
        content:'hello,world',
        contentType:'text/plain',
    });
    constfile2=awaitcreateFile({
        name:'text2.txt',
        content:'hello,world',
        contentType:'text/plain',
    });
    awaitafterNextRender(()=>
        inputFiles(
            document.querySelector('.o_FileUploader_input'),
            [file1,file2]
        )
    );
    awaitafterNextRender(()=>{
            Array.from(document.querySelectorAll('div'))
            .find(el=>el.textContent==='text2.txt')
            .closest('.o_Attachment')
            .querySelector('.o_Attachment_asideItemUnlink')
            .click();
        }
    );
    //Simulatesthecompletionoftheuploadofthefirstattachment
    uploadPromise.resolve();
    assert.containsOnce(
        document.body,
        '.o_Attachment:contains("text1.txt")',
        "shouldonlyhavethefirstattachmentaftercancellingthesecondattachment"
    );
});

});
});
});

});
