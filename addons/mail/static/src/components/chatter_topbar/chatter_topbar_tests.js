flectra.define('mail/static/src/components/chatter_topbar/chatter_topbar_tests.js',function(require){
'usestrict';

constcomponents={
    ChatterTopBar:require('mail/static/src/components/chatter_topbar/chatter_topbar.js'),
};
const{
    afterEach,
    afterNextRender,
    beforeEach,
    createRootComponent,
    start,
}=require('mail/static/src/utils/test_utils.js');

const{makeTestPromise}=require('web.test_utils');

QUnit.module('mail',{},function(){
QUnit.module('components',{},function(){
QUnit.module('chatter_topbar',{},function(){
QUnit.module('chatter_topbar_tests.js',{
    beforeEach(){
        beforeEach(this);

        this.createChatterTopbarComponent=async(chatter,otherProps)=>{
            constprops=Object.assign({chatterLocalId:chatter.localId},otherProps);
            awaitcreateRootComponent(this,components.ChatterTopBar,{
                props,
                target:this.widget.el,
            });
        };

        this.start=asyncparams=>{
            const{env,widget}=awaitstart(Object.assign({},params,{
                data:this.data,
            }));
            this.env=env;
            this.widget=widget;
        };
    },
    afterEach(){
        afterEach(this);
    },
});

QUnit.test('baserendering',asyncfunction(assert){
    assert.expect(8);

    this.data['res.partner'].records.push({id:100});
    awaitthis.start();
    constchatter=this.env.models['mail.chatter'].create({
        threadId:100,
        threadModel:'res.partner',
    });
    awaitthis.createChatterTopbarComponent(chatter);

    assert.strictEqual(
        document.querySelectorAll(`.o_ChatterTopbar`).length,
        1,
        "shouldhaveachattertopbar"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_ChatterTopbar_buttonSendMessage`).length,
        1,
        "shouldhaveasendmessagebuttoninchattermenu"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_ChatterTopbar_buttonLogNote`).length,
        1,
        "shouldhavealognotebuttoninchattermenu"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_ChatterTopbar_buttonScheduleActivity`).length,
        1,
        "shouldhaveascheduleactivitybuttoninchattermenu"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_ChatterTopbar_buttonAttachments`).length,
        1,
        "shouldhaveanattachmentsbuttoninchattermenu"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_ChatterTopbar_buttonAttachmentsCountLoader`).length,
        0,
        "attachmentsbuttonshouldnothavealoader"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_ChatterTopbar_buttonAttachmentsCount`).length,
        1,
        "attachmentsbuttonshouldhaveacounter"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_ChatterTopbar_followerListMenu`).length,
        1,
        "shouldhaveafollowermenu"
    );
});

QUnit.test('basedisabledrendering',asyncfunction(assert){
    assert.expect(8);

    awaitthis.start();
    constchatter=this.env.models['mail.chatter'].create({
        threadModel:'res.partner',
    });
    awaitthis.createChatterTopbarComponent(chatter);
    assert.strictEqual(
        document.querySelectorAll(`.o_ChatterTopbar`).length,
        1,
        "shouldhaveachattertopbar"
    );
    assert.ok(
        document.querySelector(`.o_ChatterTopbar_buttonSendMessage`).disabled,
        "sendmessagebuttonshouldbedisabled"
    );
    assert.ok(
        document.querySelector(`.o_ChatterTopbar_buttonLogNote`).disabled,
        "lognotebuttonshouldbedisabled"
    );
    assert.ok(
        document.querySelector(`.o_ChatterTopbar_buttonScheduleActivity`).disabled,
        "scheduleactivityshouldbedisabled"
    );
    assert.ok(
        document.querySelector(`.o_ChatterTopbar_buttonAttachments`).disabled,
        "attachmentsbuttonshouldbedisabled"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_ChatterTopbar_buttonAttachmentsCountLoader`).length,
        0,
        "attachmentsbuttonshouldnothavealoader"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_ChatterTopbar_buttonAttachmentsCount`).length,
        1,
        "attachmentsbuttonshouldhaveacounter"
    );
    assert.strictEqual(
        document.querySelector(`.o_ChatterTopbar_buttonAttachmentsCount`).textContent,
        '0',
        "attachmentsbuttoncountershouldbe0"
    );
});

QUnit.test('attachmentloadingisdelayed',asyncfunction(assert){
    assert.expect(4);

    this.data['res.partner'].records.push({id:100});
    awaitthis.start({
        hasTimeControl:true,
        loadingBaseDelayDuration:100,
        asyncmockRPC(route){
            if(route.includes('/mail/thread/data')){
                awaitmakeTestPromise();//simulatelongloading
            }
            returnthis._super(...arguments);
        }
    });
    constchatter=this.env.models['mail.chatter'].create({
        threadId:100,
        threadModel:'res.partner',
    });
    awaitthis.createChatterTopbarComponent(chatter);

    assert.strictEqual(
        document.querySelectorAll(`.o_ChatterTopbar`).length,
        1,
        "shouldhaveachattertopbar"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_ChatterTopbar_buttonAttachments`).length,
        1,
        "shouldhaveanattachmentsbuttoninchattermenu"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_ChatterTopbar_buttonAttachmentsCountLoader`).length,
        0,
        "attachmentsbuttonshouldnothavealoaderyet"
    );

    awaitafterNextRender(async()=>this.env.testUtils.advanceTime(100));
    assert.strictEqual(
        document.querySelectorAll(`.o_ChatterTopbar_buttonAttachmentsCountLoader`).length,
        1,
        "attachmentsbuttonshouldnowhavealoader"
    );
});

QUnit.test('attachmentcounterwhileloadingattachments',asyncfunction(assert){
    assert.expect(4);

    this.data['res.partner'].records.push({id:100});
    awaitthis.start({
        asyncmockRPC(route){
            if(route.includes('/mail/thread/data')){
                awaitmakeTestPromise();//simulatelongloading
            }
            returnthis._super(...arguments);
        }
    });
    constchatter=this.env.models['mail.chatter'].create({
        threadId:100,
        threadModel:'res.partner',
    });
    awaitthis.createChatterTopbarComponent(chatter);

    assert.strictEqual(
        document.querySelectorAll(`.o_ChatterTopbar`).length,
        1,
        "shouldhaveachattertopbar"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_ChatterTopbar_buttonAttachments`).length,
        1,
        "shouldhaveanattachmentsbuttoninchattermenu"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_ChatterTopbar_buttonAttachmentsCountLoader`).length,
        1,
        "attachmentsbuttonshouldhavealoader"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_ChatterTopbar_buttonAttachmentsCount`).length,
        0,
        "attachmentsbuttonshouldnothaveacounter"
    );
});

QUnit.test('attachmentcountertransitionwhenattachmentsbecomeloaded)',asyncfunction(assert){
    assert.expect(7);

    this.data['res.partner'].records.push({id:100});
    constattachmentPromise=makeTestPromise();
    awaitthis.start({
        asyncmockRPC(route){
            const_super=this._super.bind(this,...arguments);//limitationofclass.js
            if(route.includes('/mail/thread/data')){
                awaitattachmentPromise;
            }
            return_super();
        },
    });
    constchatter=this.env.models['mail.chatter'].create({
        threadId:100,
        threadModel:'res.partner',
    });
    awaitthis.createChatterTopbarComponent(chatter);

    assert.strictEqual(
        document.querySelectorAll(`.o_ChatterTopbar`).length,
        1,
        "shouldhaveachattertopbar"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_ChatterTopbar_buttonAttachments`).length,
        1,
        "shouldhaveanattachmentsbuttoninchattermenu"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_ChatterTopbar_buttonAttachmentsCountLoader`).length,
        1,
        "attachmentsbuttonshouldhavealoader"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_ChatterTopbar_buttonAttachmentsCount`).length,
        0,
        "attachmentsbuttonshouldnothaveacounter"
    );

    awaitafterNextRender(()=>attachmentPromise.resolve());
    assert.strictEqual(
        document.querySelectorAll(`.o_ChatterTopbar_buttonAttachments`).length,
        1,
        "shouldhaveanattachmentsbuttoninchattermenu"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_ChatterTopbar_buttonAttachmentsCountLoader`).length,
        0,
        "attachmentsbuttonshouldnothavealoader"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_ChatterTopbar_buttonAttachmentsCount`).length,
        1,
        "attachmentsbuttonshouldhaveacounter"
    );
});

QUnit.test('attachmentcounterwithoutattachments',asyncfunction(assert){
    assert.expect(4);

    this.data['res.partner'].records.push({id:100});
    awaitthis.start();
    constchatter=this.env.models['mail.chatter'].create({
        threadId:100,
        threadModel:'res.partner',
    });
    awaitthis.createChatterTopbarComponent(chatter);

    assert.strictEqual(
        document.querySelectorAll(`.o_ChatterTopbar`).length,
        1,
        "shouldhaveachattertopbar"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_ChatterTopbar_buttonAttachments`).length,
        1,
        "shouldhaveanattachmentsbuttoninchattermenu"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_ChatterTopbar_buttonAttachmentsCount`).length,
        1,
        "attachmentsbuttonshouldhaveacounter"
    );
    assert.strictEqual(
        document.querySelector(`.o_ChatterTopbar_buttonAttachmentsCount`).textContent,
        '0',
        'attachmentcountershouldcontain"0"'
    );
});

QUnit.test('attachmentcounterwithattachments',asyncfunction(assert){
    assert.expect(4);

    this.data['res.partner'].records.push({id:100});
    this.data['ir.attachment'].records.push(
        {
            mimetype:'text/plain',
            name:'Blah.txt',
            res_id:100,
            res_model:'res.partner',
        },
        {
            mimetype:'text/plain',
            name:'Blu.txt',
            res_id:100,
            res_model:'res.partner',
        }
    );
    awaitthis.start();
    constchatter=this.env.models['mail.chatter'].create({
        threadId:100,
        threadModel:'res.partner',
    });
    awaitthis.createChatterTopbarComponent(chatter);

    assert.strictEqual(
        document.querySelectorAll(`.o_ChatterTopbar`).length,
        1,
        "shouldhaveachattertopbar"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_ChatterTopbar_buttonAttachments`).length,
        1,
        "shouldhaveanattachmentsbuttoninchattermenu"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_ChatterTopbar_buttonAttachmentsCount`).length,
        1,
        "attachmentsbuttonshouldhaveacounter"
    );
    assert.strictEqual(
        document.querySelector(`.o_ChatterTopbar_buttonAttachmentsCount`).textContent,
        '2',
        'attachmentcountershouldcontain"2"'
    );
});

QUnit.test('composerstateconservedwhenclickingonanothertopbarbutton',asyncfunction(assert){
    assert.expect(8);

    this.data['res.partner'].records.push({id:100});
    awaitthis.start();
    constchatter=this.env.models['mail.chatter'].create({
        threadId:100,
        threadModel:'res.partner',
    });
    awaitthis.createChatterTopbarComponent(chatter);

    assert.containsOnce(
        document.body,
        `.o_ChatterTopbar`,
        "shouldhaveachattertopbar"
    );
    assert.containsOnce(
        document.body,
        `.o_ChatterTopbar_buttonSendMessage`,
        "shouldhaveasendmessagebuttoninchattermenu"
    );
    assert.containsOnce(
        document.body,
        `.o_ChatterTopbar_buttonLogNote`,
        "shouldhavealognotebuttoninchattermenu"
    );
    assert.containsOnce(
        document.body,
        `.o_ChatterTopbar_buttonAttachments`,
        "shouldhaveanattachmentsbuttoninchattermenu"
    );

    awaitafterNextRender(()=>{
        document.querySelector(`.o_ChatterTopbar_buttonLogNote`).click();
    });
    assert.containsOnce(
        document.body,
        `.o_ChatterTopbar_buttonLogNote.o-active`,
        "logbuttonshouldnowbeactive"
    );
    assert.containsNone(
        document.body,
        `.o_ChatterTopbar_buttonSendMessage.o-active`,
        "sendmessagebuttonshouldnotbeactive"
    );

    awaitafterNextRender(()=>{
        document.querySelector(`.o_ChatterTopbar_buttonAttachments`).click();
    });
    assert.containsOnce(
        document.body,
        `.o_ChatterTopbar_buttonLogNote.o-active`,
        "logbuttonshouldstillbeactive"
    );
    assert.containsNone(
        document.body,
        `.o_ChatterTopbar_buttonSendMessage.o-active`,
        "sendmessagebuttonshouldstillbenotactive"
    );
});

QUnit.test('renderingwithmultiplepartnerfollowers',asyncfunction(assert){
    assert.expect(7);

    awaitthis.start();
    this.data['res.partner'].records.push({
        id:100,
        message_follower_ids:[1,2],
    });
    this.data['mail.followers'].records.push(
        {
            //simulaterealreturnfromRPC
            //(thepresenceofthekeyandthefalsyvalueneedtobehandledcorrectly)
            channel_id:false,
            id:1,
            name:"JeanMichang",
            partner_id:12,
            res_id:100,
            res_model:'res.partner',
        },{
            //simulaterealreturnfromRPC
            //(thepresenceofthekeyandthefalsyvalueneedtobehandledcorrectly)
            channel_id:false,
            id:2,
            name:"EdenHazard",
            partner_id:11,
            res_id:100,
            res_model:'res.partner',
        },
    );
    constchatter=this.env.models['mail.chatter'].create({
        followerIds:[1,2],
        threadId:100,
        threadModel:'res.partner',
    });
    awaitthis.createChatterTopbarComponent(chatter);

    assert.containsOnce(
        document.body,
        '.o_FollowerListMenu',
        "shouldhavefollowersmenucomponent"
    );
    assert.containsOnce(
        document.body,
        '.o_FollowerListMenu_buttonFollowers',
        "shouldhavefollowersbutton"
    );

    awaitafterNextRender(()=>{
        document.querySelector('.o_FollowerListMenu_buttonFollowers').click();
    });
    assert.containsOnce(
        document.body,
        '.o_FollowerListMenu_dropdown',
        "followersdropdownshouldbeopened"
    );
    assert.containsN(
        document.body,
        '.o_Follower',
        2,
        "exactlytwofollowersshouldbelisted"
    );
    assert.containsN(
        document.body,
        '.o_Follower_name',
        2,
        "exactlytwofollowernamesshouldbelisted"
    );
    assert.strictEqual(
        document.querySelectorAll('.o_Follower_name')[0].textContent.trim(),
        "JeanMichang",
        "firstfolloweris'JeanMichang'"
    );
    assert.strictEqual(
        document.querySelectorAll('.o_Follower_name')[1].textContent.trim(),
        "EdenHazard",
        "secondfolloweris'EdenHazard'"
    );
});

QUnit.test('renderingwithmultiplechannelfollowers',asyncfunction(assert){
    assert.expect(7);

    this.data['res.partner'].records.push({
        id:100,
        message_follower_ids:[1,2],
    });
    awaitthis.start();
    this.data['mail.followers'].records.push(
        {
            channel_id:11,
            id:1,
            name:"channelnumero5",
            //simulaterealreturnfromRPC
            //(thepresenceofthekeyandthefalsyvalueneedtobehandledcorrectly)
            partner_id:false,
            res_id:100,
            res_model:'res.partner',
        },{
            channel_id:12,
            id:2,
            name:"channelarmstrong",
            //simulaterealreturnfromRPC
            //(thepresenceofthekeyandthefalsyvalueneedtobehandledcorrectly)
            partner_id:false,
            res_id:100,
            res_model:'res.partner',
        },
    );
    constchatter=this.env.models['mail.chatter'].create({
        followerIds:[1,2],
        threadId:100,
        threadModel:'res.partner',
    });
    awaitthis.createChatterTopbarComponent(chatter);

    assert.containsOnce(
        document.body,
        '.o_FollowerListMenu',
        "shouldhavefollowersmenucomponent"
    );
    assert.containsOnce(
        document.body,
        '.o_FollowerListMenu_buttonFollowers',
        "shouldhavefollowersbutton"
    );

    awaitafterNextRender(()=>{
        document.querySelector('.o_FollowerListMenu_buttonFollowers').click();
    });
    assert.containsOnce(
        document.body,
        '.o_FollowerListMenu_dropdown',
        "followersdropdownshouldbeopened"
    );
    assert.containsN(
        document.body,
        '.o_Follower',
        2,
        "exactlytwofollowersshouldbelisted"
    );
    assert.containsN(
        document.body,
        '.o_Follower_name',
        2,
        "exactlytwofollowernamesshouldbelisted"
    );
    assert.strictEqual(
        document.querySelectorAll('.o_Follower_name')[0].textContent.trim(),
        "channelnumero5",
        "firstfolloweris'channelnumero5'"
    );
    assert.strictEqual(
        document.querySelectorAll('.o_Follower_name')[1].textContent.trim(),
        "channelarmstrong",
        "secondfolloweris'channelarmstrong'"
    );
});

QUnit.test('lognote/sendmessageswitching',asyncfunction(assert){
    assert.expect(8);

    this.data['res.partner'].records.push({id:100});
    awaitthis.start();
    constchatter=this.env.models['mail.chatter'].create({
        threadId:100,
        threadModel:'res.partner',
    });
    awaitthis.createChatterTopbarComponent(chatter);
    assert.containsOnce(
        document.body,
        '.o_ChatterTopbar_buttonSendMessage',
        "shouldhavea'SendMessage'button"
    );
    assert.doesNotHaveClass(
        document.querySelector('.o_ChatterTopbar_buttonSendMessage'),
        'o-active',
        "'SendMessage'buttonshouldnotbeactive"
    );
    assert.containsOnce(
        document.body,
        '.o_ChatterTopbar_buttonLogNote',
        "shouldhavea'LogNote'button"
    );
    assert.doesNotHaveClass(
        document.querySelector('.o_ChatterTopbar_buttonLogNote'),
        'o-active',
        "'LogNote'buttonshouldnotbeactive"
    );

    awaitafterNextRender(()=>
        document.querySelector(`.o_ChatterTopbar_buttonSendMessage`).click()
    );
    assert.hasClass(
        document.querySelector('.o_ChatterTopbar_buttonSendMessage'),
        'o-active',
        "'SendMessage'buttonshouldbeactive"
    );
    assert.doesNotHaveClass(
        document.querySelector('.o_ChatterTopbar_buttonLogNote'),
        'o-active',
        "'LogNote'buttonshouldnotbeactive"
    );

    awaitafterNextRender(()=>
        document.querySelector(`.o_ChatterTopbar_buttonLogNote`).click()
    );
    assert.doesNotHaveClass(
        document.querySelector('.o_ChatterTopbar_buttonSendMessage'),
        'o-active',
        "'SendMessage'buttonshouldnotbeactive"
    );
    assert.hasClass(
        document.querySelector('.o_ChatterTopbar_buttonLogNote'),
        'o-active',
        "'LogNote'buttonshouldbeactive"
    );
});

QUnit.test('lognotetoggling',asyncfunction(assert){
    assert.expect(4);

    this.data['res.partner'].records.push({id:100});
    awaitthis.start();
    constchatter=this.env.models['mail.chatter'].create({
        threadId:100,
        threadModel:'res.partner',
    });
    awaitthis.createChatterTopbarComponent(chatter);
    assert.containsOnce(
        document.body,
        '.o_ChatterTopbar_buttonLogNote',
        "shouldhavea'LogNote'button"
    );
    assert.doesNotHaveClass(
        document.querySelector('.o_ChatterTopbar_buttonLogNote'),
        'o-active',
        "'LogNote'buttonshouldnotbeactive"
    );

    awaitafterNextRender(()=>
        document.querySelector(`.o_ChatterTopbar_buttonLogNote`).click()
    );
    assert.hasClass(
        document.querySelector('.o_ChatterTopbar_buttonLogNote'),
        'o-active',
        "'LogNote'buttonshouldbeactive"
    );

    awaitafterNextRender(()=>
        document.querySelector(`.o_ChatterTopbar_buttonLogNote`).click()
    );
    assert.doesNotHaveClass(
        document.querySelector('.o_ChatterTopbar_buttonLogNote'),
        'o-active',
        "'LogNote'buttonshouldnotbeactive"
    );
});

QUnit.test('sendmessagetoggling',asyncfunction(assert){
    assert.expect(4);

    this.data['res.partner'].records.push({id:100});
    awaitthis.start();
    constchatter=this.env.models['mail.chatter'].create({
        threadId:100,
        threadModel:'res.partner',
    });
    awaitthis.createChatterTopbarComponent(chatter);
    assert.containsOnce(
        document.body,
        '.o_ChatterTopbar_buttonSendMessage',
        "shouldhavea'SendMessage'button"
    );
    assert.doesNotHaveClass(
        document.querySelector('.o_ChatterTopbar_buttonSendMessage'),
        'o-active',
        "'SendMessage'buttonshouldnotbeactive"
    );

    awaitafterNextRender(()=>
        document.querySelector(`.o_ChatterTopbar_buttonSendMessage`).click()
    );
    assert.hasClass(
        document.querySelector('.o_ChatterTopbar_buttonSendMessage'),
        'o-active',
        "'SendMessage'buttonshouldbeactive"
    );

    awaitafterNextRender(()=>
        document.querySelector(`.o_ChatterTopbar_buttonSendMessage`).click()
    );
    assert.doesNotHaveClass(
        document.querySelector('.o_ChatterTopbar_buttonSendMessage'),
        'o-active',
        "'SendMessage'buttonshouldnotbeactive"
    );
});

});
});
});

});
