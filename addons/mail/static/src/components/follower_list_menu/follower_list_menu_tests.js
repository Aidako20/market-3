flectra.define('mail/static/src/components/follower_list_menu/follower_list_menu_tests.js',function(require){
'usestrict';

constcomponents={
    FollowerListMenu:require('mail/static/src/components/follower_list_menu/follower_list_menu.js'),
};
const{
    afterEach,
    afterNextRender,
    beforeEach,
    createRootComponent,
    start,
}=require('mail/static/src/utils/test_utils.js');

constBus=require('web.Bus');

QUnit.module('mail',{},function(){
QUnit.module('components',{},function(){
QUnit.module('follower_list_menu',{},function(){
QUnit.module('follower_list_menu_tests.js',{
    beforeEach(){
        beforeEach(this);

        this.createFollowerListMenuComponent=async(thread,otherProps={})=>{
            constprops=Object.assign({threadLocalId:thread.localId},otherProps);
            awaitcreateRootComponent(this,components.FollowerListMenu,{
                props,
                target:this.widget.el,
            });
        };

        this.start=asyncparams=>{
            const{env,widget}=awaitstart(Object.assign({},params,{
                data:this.data,
            }));
            this.env=env;
            this.widget=widget;
        };
    },
    afterEach(){
        afterEach(this);
    },
});

QUnit.test('baserenderingnoteditable',asyncfunction(assert){
    assert.expect(5);

    awaitthis.start();
    constthread=this.env.models['mail.thread'].create({
        id:100,
        model:'res.partner',
    });
    awaitthis.createFollowerListMenuComponent(thread,{isDisabled:true});
    assert.containsOnce(
        document.body,
        '.o_FollowerListMenu',
        "shouldhavefollowersmenucomponent"
    );
    assert.containsOnce(
        document.body,
        '.o_FollowerListMenu_buttonFollowers',
        "shouldhavefollowersbutton"
    );
    assert.ok(
        document.querySelector('.o_FollowerListMenu_buttonFollowers').disabled,
        "followersbuttonshouldbedisabled"
    );
    assert.containsNone(
        document.body,
        '.o_FollowerListMenu_dropdown',
        "followersdropdownshouldnotbeopened"
    );

    document.querySelector('.o_FollowerListMenu_buttonFollowers').click();
    assert.containsNone(
        document.body,
        '.o_FollowerListMenu_dropdown',
        "followersdropdownshouldstillbeclosedasbuttonisdisabled"
    );
});

QUnit.test('baserenderingeditable',asyncfunction(assert){
    assert.expect(5);

    awaitthis.start();
    constthread=this.env.models['mail.thread'].create({
        id:100,
        model:'res.partner',
    });
    awaitthis.createFollowerListMenuComponent(thread);

    assert.containsOnce(
        document.body,
        '.o_FollowerListMenu',
        "shouldhavefollowersmenucomponent"
    );
    assert.containsOnce(
        document.body,
        '.o_FollowerListMenu_buttonFollowers',
        "shouldhavefollowersbutton"
    );
    assert.notOk(
        document.querySelector('.o_FollowerListMenu_buttonFollowers').disabled,
        "followersbuttonshouldnotbedisabled"
    );
    assert.containsNone(
        document.body,
        '.o_FollowerListMenu_dropdown',
        "followersdropdownshouldnotbeopened"
    );

    awaitafterNextRender(()=>{
        document.querySelector('.o_FollowerListMenu_buttonFollowers').click();
    });
    assert.containsOnce(
        document.body,
        '.o_FollowerListMenu_dropdown',
        "followersdropdownshouldbeopened"
    );
});

QUnit.test('clickon"addfollowers"button',asyncfunction(assert){
    assert.expect(16);

    constbus=newBus();
    bus.on('do-action',null,payload=>{
        assert.step('action:open_view');
        assert.strictEqual(
            payload.action.context.default_res_model,
            'res.partner',
            "'The'addfollowers'actionshouldcontainthreadmodelincontext'"
        );
        assert.notOk(
            payload.action.context.mail_invite_follower_channel_only,
            "The'addfollowers'actionshouldnotberestrictedtochannelsonly"
        );
        assert.strictEqual(
            payload.action.context.default_res_id,
            100,
            "The'addfollowers'actionshouldcontainthreadidincontext"
        );
        assert.strictEqual(
            payload.action.res_model,
            'mail.wizard.invite',
            "The'addfollowers'actionshouldbeawizardinviteofmailmodule"
        );
        assert.strictEqual(
            payload.action.type,
            "ir.actions.act_window",
            "The'addfollowers'actionshouldbeoftype'ir.actions.act_window'"
        );
        constpartner=this.data['res.partner'].records.find(
            partner=>partner.id===payload.action.context.default_res_id
        );
        partner.message_follower_ids.push(1);
        payload.options.on_close();
    });
    this.data['res.partner'].records.push({id:100});
    this.data['mail.followers'].records.push({
        partner_id:42,
        email:"bla@bla.bla",
        id:1,
        is_active:true,
        is_editable:true,
        name:"FrançoisPerusse",
        res_id:100,
        res_model:'res.partner',
    });
    awaitthis.start({
        env:{bus},
    });
    constthread=this.env.models['mail.thread'].create({
        id:100,
        model:'res.partner',
    });
    awaitthis.createFollowerListMenuComponent(thread);

    assert.containsOnce(
        document.body,
        '.o_FollowerListMenu',
        "shouldhavefollowersmenucomponent"
    );
    assert.containsOnce(
        document.body,
        '.o_FollowerListMenu_buttonFollowers',
        "shouldhavefollowersbutton"
    );
    assert.strictEqual(
        document.querySelector('.o_FollowerListMenu_buttonFollowersCount').textContent,
        "0",
        "Followerscountershouldbeequalto0"
    );

    awaitafterNextRender(()=>{
        document.querySelector('.o_FollowerListMenu_buttonFollowers').click();
    });
    assert.containsOnce(
        document.body,
        '.o_FollowerListMenu_dropdown',
        "followersdropdownshouldbeopened"
    );
    assert.containsOnce(
        document.body,
        '.o_FollowerListMenu_addFollowersButton',
        "followersdropdownshouldcontaina'Addfollowers'button"
    );

    awaitafterNextRender(()=>{
        document.querySelector('.o_FollowerListMenu_addFollowersButton').click();
    });
    assert.containsNone(
        document.body,
        '.o_FollowerListMenu_dropdown',
        "followersdropdownshouldbeclosedafterclickon'Addfollowers'"
    );
    assert.verifySteps([
        'action:open_view',
    ]);
    assert.strictEqual(
        document.querySelector('.o_FollowerListMenu_buttonFollowersCount').textContent,
        "1",
        "Followerscountershouldnowbeequalto1"
    );

    awaitafterNextRender(()=>{
        document.querySelector('.o_FollowerListMenu_buttonFollowers').click();
    });
    assert.containsOnce(
        document.body,
        '.o_FollowerMenu_follower',
        "Followerlistshouldberefreshedandcontainafollower"
    );
    assert.strictEqual(
        document.querySelector('.o_Follower_name').textContent,
        "FrançoisPerusse",
        "Followeraddedinfollowerlistshouldbetheoneadded"
    );
});

QUnit.test('clickon"addchannels"button',asyncfunction(assert){
    assert.expect(16);

    constbus=newBus();
    bus.on('do-action',null,payload=>{
        assert.step('action:open_view');
        assert.strictEqual(
            payload.action.context.default_res_model,
            'res.partner',
            "'The'addchannels'actionshouldcontainthreadmodelincontext'"
        );
        assert.ok(
            payload.action.context.mail_invite_follower_channel_only,
            "The'addchannels'actionshouldberestrictedtochannelsonly"
        );
        assert.strictEqual(
            payload.action.context.default_res_id,
            100,
            "The'addchannels'actionshouldcontainthreadidincontext"
        );
        assert.strictEqual(
            payload.action.res_model,
            'mail.wizard.invite',
            "The'addchannels'actionshouldbeawizardinviteofmailmodule"
        );
        assert.strictEqual(
            payload.action.type,
            "ir.actions.act_window",
            "The'addchannels'actionshouldbeoftype'ir.actions.act_window'"
        );
        constpartner=this.data['res.partner'].records.find(
            partner=>partner.id===payload.action.context.default_res_id
        );
        partner.message_follower_ids.push(1);
        payload.options.on_close();
    });
    this.data['res.partner'].records.push({id:100});
    this.data['mail.followers'].records.push({
        channel_id:42,
        email:"bla@bla.bla",
        id:1,
        is_active:true,
        is_editable:true,
        name:"Supachannel",
        res_id:100,
        res_model:'res.partner',
    });
    awaitthis.start({
        env:{bus},
    });
    constthread=this.env.models['mail.thread'].create({
        id:100,
        model:'res.partner',
    });
    awaitthis.createFollowerListMenuComponent(thread);

    assert.containsOnce(
        document.body,
        '.o_FollowerListMenu',
        "shouldhavefollowersmenucomponent"
    );
    assert.strictEqual(
        document.querySelector('.o_FollowerListMenu_buttonFollowersCount').textContent,
        "0",
        "Followerscountershouldbeequalto0"
    );
    assert.containsOnce(
        document.body,
        '.o_FollowerListMenu_buttonFollowers',
        "shouldhavefollowersbutton"
    );

    awaitafterNextRender(()=>{
        document.querySelector('.o_FollowerListMenu_buttonFollowers').click();
    });
    assert.containsOnce(
        document.body,
        '.o_FollowerListMenu_dropdown',
        "followersdropdownshouldbeopened"
    );
    assert.containsOnce(
        document.body,
        '.o_FollowerListMenu_addChannelsButton',
        "followersdropdownshouldcontaina'Addchannels'button"
    );

    awaitafterNextRender(()=>{
        document.querySelector('.o_FollowerListMenu_addChannelsButton').click();
    });
    assert.containsNone(
        document.body,
        '.o_FollowerListMenu_dropdown',
        "followersdropdownshouldbeclosedafterclickon'addchannels'"
    );
    assert.verifySteps([
        'action:open_view',
    ]);
    assert.strictEqual(
        document.querySelector('.o_FollowerListMenu_buttonFollowersCount').textContent,
        "1",
        "Followerscountershouldnowbeequalto1"
    );

    awaitafterNextRender(()=>{
        document.querySelector('.o_FollowerListMenu_buttonFollowers').click();
    });
    assert.containsOnce(
        document.body,
        '.o_FollowerMenu_follower',
        "Followerlistshouldberefreshedandcontainafollower"
    );
    assert.strictEqual(
        document.querySelector('.o_Follower_name').textContent,
        "Supachannel",
        "Followeraddedinfollowerlistshouldbetheoneadded"
    );
});

QUnit.test('clickonremovefollower',asyncfunction(assert){
    assert.expect(6);

    constself=this;
    awaitthis.start({
        asyncmockRPC(route,args){
            if(route.includes('message_unsubscribe')){
                assert.step('message_unsubscribe');
                assert.deepEqual(
                    args.args,
                    [[100],[self.env.messaging.currentPartner.id],[]],
                    "message_unsubscribeshouldbecalledwithrightargument"
                );
            }
            returnthis._super(...arguments);
        },
    });
    constthread=this.env.models['mail.thread'].create({
        id:100,
        model:'res.partner',
    });
    awaitthis.env.models['mail.follower'].create({
        followedThread:[['link',thread]],
        id:2,
        isActive:true,
        isEditable:true,
        partner:[['insert',{
            email:"bla@bla.bla",
            id:this.env.messaging.currentPartner.id,
            name:"FrançoisPerusse",
        }]],
    });
    awaitthis.createFollowerListMenuComponent(thread);

    awaitafterNextRender(()=>{
        document.querySelector('.o_FollowerListMenu_buttonFollowers').click();
    });
    assert.containsOnce(
        document.body,
        '.o_Follower',
        "shouldhavefollowercomponent"
    );
    assert.containsOnce(
        document.body,
        '.o_Follower_removeButton',
        "shoulddisplayaremovebutton"
    );

    awaitafterNextRender(()=>{
        document.querySelector('.o_Follower_removeButton').click();
    });
    assert.verifySteps(
        ['message_unsubscribe'],
        "clickingonremovebuttonshouldcall'message_unsubscribe'route"
    );
    assert.containsNone(
        document.body,
        '.o_Follower',
        "shouldnolongerhavefollowercomponent"
    );
});

});
});
});

});
