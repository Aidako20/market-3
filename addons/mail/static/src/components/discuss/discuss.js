flectra.define('mail/static/src/components/discuss/discuss.js',function(require){
'usestrict';

constcomponents={
    AutocompleteInput:require('mail/static/src/components/autocomplete_input/autocomplete_input.js'),
    Composer:require('mail/static/src/components/composer/composer.js'),
    DiscussMobileMailboxSelection:require('mail/static/src/components/discuss_mobile_mailbox_selection/discuss_mobile_mailbox_selection.js'),
    DiscussSidebar:require('mail/static/src/components/discuss_sidebar/discuss_sidebar.js'),
    MobileMessagingNavbar:require('mail/static/src/components/mobile_messaging_navbar/mobile_messaging_navbar.js'),
    ModerationDiscardDialog:require('mail/static/src/components/moderation_discard_dialog/moderation_discard_dialog.js'),
    ModerationRejectDialog:require('mail/static/src/components/moderation_reject_dialog/moderation_reject_dialog.js'),
    NotificationList:require('mail/static/src/components/notification_list/notification_list.js'),
    ThreadView:require('mail/static/src/components/thread_view/thread_view.js'),
};
constuseShouldUpdateBasedOnProps=require('mail/static/src/component_hooks/use_should_update_based_on_props/use_should_update_based_on_props.js');
constuseStore=require('mail/static/src/component_hooks/use_store/use_store.js');

constpatchMixin=require('web.patchMixin');

const{Component}=owl;
const{useRef}=owl.hooks;

classDiscussextendsComponent{

    /**
     *@override
     */
    constructor(...args){
        super(...args);
        useShouldUpdateBasedOnProps();
        useStore((...args)=>this._useStoreSelector(...args),{
            compareDepth:{
                checkedMessages:1,
                uncheckedMessages:1,
            },
        });
        this._updateLocalStoreProps();
        /**
         *Referenceofthecomposer.Usefultofocusit.
         */
        this._composerRef=useRef('composer');
        /**
         *ReferenceoftheThreadView.Usefultofocusit.
         */
        this._threadViewRef=useRef('threadView');
        //bindsincepassedasprops
        this._onMobileAddItemHeaderInputSelect=this._onMobileAddItemHeaderInputSelect.bind(this);
        this._onMobileAddItemHeaderInputSource=this._onMobileAddItemHeaderInputSource.bind(this);
    }

    mounted(){
        this.discuss.update({isOpen:true});
        if(this.discuss.thread){
            this.trigger('o-push-state-action-manager');
        }elseif(this.env.isMessagingInitialized()){
            this.discuss.openInitThread();
        }
        this._updateLocalStoreProps();
    }

    patched(){
        this.trigger('o-update-control-panel');
        if(this.discuss.thread){
            this.trigger('o-push-state-action-manager');
        }
        if(
            this.discuss.thread&&
            this.discuss.thread===this.env.messaging.inbox&&
            this.discuss.threadView&&
            this._lastThreadCache===this.discuss.threadView.threadCache.localId&&
            this._lastThreadCounter>0&&this.discuss.thread.counter===0
        ){
            this.trigger('o-show-rainbow-man');
        }
        this._activeThreadCache=this.discuss.threadView&&this.discuss.threadView.threadCache;
        this._updateLocalStoreProps();
    }

    willUnmount(){
        if(this.discuss){
            this.discuss.close();
        }
    }

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *@returns{string}
     */
    getaddChannelInputPlaceholder(){
        returnthis.env._t("Createorsearchchannel...");
    }

    /**
     *@returns{string}
     */
    getaddChatInputPlaceholder(){
        returnthis.env._t("Searchuser...");
    }

    /**
     *@returns{mail.discuss}
     */
    getdiscuss(){
        returnthis.env.messaging&&this.env.messaging.discuss;
    }

    /**
     *@returns{Object[]}
     */
    mobileNavbarTabs(){
        return[{
            icon:'fafa-inbox',
            id:'mailbox',
            label:this.env._t("Mailboxes"),
        },{
            icon:'fafa-user',
            id:'chat',
            label:this.env._t("Chat"),
        },{
            icon:'fafa-users',
            id:'channel',
            label:this.env._t("Channel"),
        }];
    }

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *@private
     */
    _updateLocalStoreProps(){
        /**
         *Locallytrackedstoreprops`activeThreadCache`.
         *Usefultosetscrollpositionfromlaststoredoneandtodisplay
         *rainboxmanoninbox.
         */
        this._lastThreadCache=(
            this.discuss.threadView&&
            this.discuss.threadView.threadCache&&
            this.discuss.threadView.threadCache.localId
        );
        /**
         *Locallytrackedstoreprops`threadCounter`.
         *Usefultodisplaytherainbowmanoninbox.
         */
        this._lastThreadCounter=(
            this.discuss.thread&&
            this.discuss.thread.counter
        );
    }

    /**
     *Returnsdataselectedfromthestore.
     *
     *@private
     *@param{Object}props
     *@returns{Object}
     */
    _useStoreSelector(props){
        constdiscuss=this.env.messaging&&this.env.messaging.discuss;
        constthread=discuss&&discuss.thread;
        constthreadView=discuss&&discuss.threadView;
        constreplyingToMessage=discuss&&discuss.replyingToMessage;
        constreplyingToMessageOriginThread=replyingToMessage&&replyingToMessage.originThread;
        constcheckedMessages=threadView?threadView.checkedMessages:[];
        return{
            checkedMessages,
            checkedMessagesIsModeratedByCurrentPartner:checkedMessages&&checkedMessages.some(message=>message.isModeratedByCurrentPartner),//forwidget
            discuss,
            discussActiveId:discuss&&discuss.activeId,//forwidget
            discussActiveMobileNavbarTabId:discuss&&discuss.activeMobileNavbarTabId,
            discussHasModerationDiscardDialog:discuss&&discuss.hasModerationDiscardDialog,
            discussHasModerationRejectDialog:discuss&&discuss.hasModerationRejectDialog,
            discussIsAddingChannel:discuss&&discuss.isAddingChannel,
            discussIsAddingChat:discuss&&discuss.isAddingChat,
            discussIsDoFocus:discuss&&discuss.isDoFocus,
            discussReplyingToMessageOriginThreadComposer:replyingToMessageOriginThread&&replyingToMessageOriginThread.composer,
            inbox:this.env.messaging.inbox,
            isDeviceMobile:this.env.messaging&&this.env.messaging.device.isMobile,
            isMessagingInitialized:this.env.isMessagingInitialized(),
            replyingToMessage,
            starred:this.env.messaging.starred,//forwidget
            thread,
            threadCache:threadView&&threadView.threadCache,
            threadChannelType:thread&&thread.channel_type,//forwidget
            threadDisplayName:thread&&thread.displayName,//forwidget
            threadCounter:thread&&thread.counter,
            threadModel:thread&&thread.model,
            threadPublic:thread&&thread.public,//forwidget
            threadView,
            threadViewMessagesLength:threadView&&threadView.messages.length,//forwidget
            uncheckedMessages:threadView?threadView.uncheckedMessages:[],//forwidget
        };
    }

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *@private
     */
    _onDialogClosedModerationDiscard(){
        this.discuss.update({hasModerationDiscardDialog:false});
    }

    /**
     *@private
     */
    _onDialogClosedModerationReject(){
        this.discuss.update({hasModerationRejectDialog:false});
    }

    /**
     *@private
     *@param{CustomEvent}ev
     */
    _onFocusinComposer(ev){
        this.discuss.update({isDoFocus:false});
    }

    /**
     *@private
     *@param{CustomEvent}ev
     */
    _onHideMobileAddItemHeader(ev){
        ev.stopPropagation();
        this.discuss.clearIsAddingItem();
    }

    /**
     *@private
     *@param{Event}ev
     *@param{Object}ui
     *@param{Object}ui.item
     *@param{integer}ui.item.id
     */
    _onMobileAddItemHeaderInputSelect(ev,ui){
        constdiscuss=this.discuss;
        if(discuss.isAddingChannel){
            discuss.handleAddChannelAutocompleteSelect(ev,ui);
        }else{
            discuss.handleAddChatAutocompleteSelect(ev,ui);
        }
    }

    /**
     *@private
     *@param{Object}req
     *@param{string}req.term
     *@param{function}res
     */
    _onMobileAddItemHeaderInputSource(req,res){
        if(this.discuss.isAddingChannel){
            this.discuss.handleAddChannelAutocompleteSource(req,res);
        }else{
            this.discuss.handleAddChatAutocompleteSource(req,res);
        }
    }

    /**
     *@private
     */
    _onReplyingToMessageMessagePosted(){
        this.env.services['notification'].notify({
            message:_.str.sprintf(
                this.env._t(`Messagepostedon"%s"`),
                owl.utils.escape(this.discuss.replyingToMessage.originThread.displayName)
            ),
            type:'warning',
        });
        this.discuss.clearReplyingToMessage();
    }

    /**
     *@private
     *@param{CustomEvent}ev
     *@param{Object}ev.detail
     *@param{string}ev.detail.tabId
     */
    _onSelectMobileNavbarTab(ev){
        ev.stopPropagation();
        if(this.discuss.activeMobileNavbarTabId===ev.detail.tabId){
            return;
        }
        this.discuss.clearReplyingToMessage();
        this.discuss.update({activeMobileNavbarTabId:ev.detail.tabId});
    }

    /**
     *@private
     *@param{CustomEvent}ev
     */
    _onThreadRendered(ev){
        this.trigger('o-update-control-panel');
    }

}

Object.assign(Discuss,{
    components,
    props:{},
    template:'mail.Discuss',
});

returnpatchMixin(Discuss);

});
