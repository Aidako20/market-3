flectra.define('mail/static/src/components/discuss/tests/discuss_domain_tests.js',function(require){
'usestrict';

const{
    afterEach,
    afterNextRender,
    beforeEach,
    start,
}=require('mail/static/src/utils/test_utils.js');

QUnit.module('mail',{},function(){
QUnit.module('components',{},function(){
QUnit.module('discuss',{},function(){
QUnit.module('discuss_domain_tests.js',{
    beforeEach(){
        beforeEach(this);

        this.start=asyncparams=>{
            const{afterEvent,env,widget}=awaitstart(Object.assign({},params,{
                autoOpenDiscuss:true,
                data:this.data,
                hasDiscuss:true,
            }));
            this.afterEvent=afterEvent;
            this.env=env;
            this.widget=widget;
        };
    },
    afterEach(){
        afterEach(this);
    },
});

QUnit.test('discussshouldfiltermessagesbasedongivendomain',asyncfunction(assert){
    assert.expect(2);

    this.data['mail.message'].records.push({
        body:"test",
        needaction:true,
        needaction_partner_ids:[this.data.currentPartnerId],
    },{
        body:"notempty",
        needaction:true,
        needaction_partner_ids:[this.data.currentPartnerId],
    });
    awaitthis.start();
    assert.containsN(
        document.body,
        '.o_Message',
        2,
        "shouldhave2messagesinInboxinitially"
    );

    awaitthis.afterEvent({
        eventName:'o-thread-view-hint-processed',
        func:()=>{
            //simulatecontrolpanelsearch
            this.env.messaging.discuss.update({
                stringifiedDomain:JSON.stringify([['body','ilike','test']]),
            });
        },
        message:"shouldwaituntilsearchfilterisapplied",
        predicate:({hint,threadViewer})=>{
            return(
                hint.type==='messages-loaded'&&
                hint.data.fetchedMessages.length===1&&
                threadViewer.thread.model==='mail.box'&&
                threadViewer.thread.id==='inbox'
            );
        },
    });
    assert.containsOnce(
        document.body,
        '.o_Message',
        "shouldonlyhavethe1messagecontaining'test'remainingafterdoingasearch"
    );
});

QUnit.test('discussshouldkeepfilterdomainonchangingthread',asyncfunction(assert){
    assert.expect(3);

    this.data['mail.channel'].records.push({id:20});
    this.data['mail.message'].records.push({
        body:"test",
        channel_ids:[20],
    },{
        body:"notempty",
        channel_ids:[20],
    });
    awaitthis.start();
    constchannel=this.env.models['mail.thread'].findFromIdentifyingData({
        id:20,
        model:'mail.channel',
    });
    assert.containsNone(
        document.body,
        '.o_Message',
        "shouldhavenomessageinInboxinitially"
    );

    awaitthis.afterEvent({
        eventName:'o-thread-view-hint-processed',
        func:()=>{
            //simulatecontrolpanelsearch
            this.env.messaging.discuss.update({
                stringifiedDomain:JSON.stringify([['body','ilike','test']]),
            });
        },
        message:"shouldwaituntilsearchfilterisapplied",
        predicate:({hint,threadViewer})=>{
            return(
                hint.type==='messages-loaded'&&
                threadViewer.thread.model==='mail.box'&&
                threadViewer.thread.id==='inbox'
            );
        },
    });
    assert.containsNone(
        document.body,
        '.o_Message',
        "shouldhavestillnomessageinInboxafterdoingasearch"
    );

    awaitthis.afterEvent({
        eventName:'o-thread-view-hint-processed',
        func:()=>{
            document.querySelector(`
                .o_DiscussSidebar_item[data-thread-local-id="${channel.localId}"]
            `).click();
        },
        message:"shouldwaituntilchannel20isloadedafterclickingonit",
        predicate:({hint,threadViewer})=>{
            return(
                hint.type==='messages-loaded'&&
                threadViewer.thread.model==='mail.channel'&&
                threadViewer.thread.id===20
            );
        },
    });
    assert.containsOnce(
        document.body,
        '.o_Message',
        "shouldonlyhavethe1messagecontaining'test'inchannel20(duetothedomainstillappliedonchangingthread)"
    );
});

QUnit.test('discussshouldrefreshfilteredthreadonreceivingnewmessage',asyncfunction(assert){
    assert.expect(2);

    this.data['mail.channel'].records.push({id:20});
    awaitthis.start();
    constchannel=this.env.models['mail.thread'].findFromIdentifyingData({
        id:20,
        model:'mail.channel',
    });
    awaitthis.afterEvent({
        eventName:'o-thread-view-hint-processed',
        func:()=>{
            document.querySelector(`
                .o_DiscussSidebar_item[data-thread-local-id="${channel.localId}"]
            `).click();
        },
        message:"shouldwaituntilchannel20isloadedafterclickingonit",
        predicate:({hint,threadViewer})=>{
            return(
                hint.type==='messages-loaded'&&
                threadViewer.thread.model==='mail.channel'&&
                threadViewer.thread.id===20
            );
        },
    });
    awaitthis.afterEvent({
        eventName:'o-thread-view-hint-processed',
        func:()=>{
            //simulatecontrolpanelsearch
            this.env.messaging.discuss.update({
                stringifiedDomain:JSON.stringify([['body','ilike','test']]),
            });
        },
        message:"shouldwaituntilsearchfilterisapplied",
        predicate:({hint,threadViewer})=>{
            return(
                hint.type==='messages-loaded'&&
                threadViewer.thread.model==='mail.channel'&&
                threadViewer.thread.id===20
            );
        },
    });
    assert.containsNone(
        document.body,
        '.o_Message',
        "shouldhaveinitiallynomessageinchannel20matchingthesearch'test'"
    );

    //simulatereceivingamessage
    awaitthis.afterEvent({
        eventName:'o-thread-view-hint-processed',
        func:()=>this.env.services.rpc({
            route:'/mail/chat_post',
            params:{
                message_content:"test",
                uuid:channel.uuid,
            },
        }),
        message:"shouldwaituntilchannel20refresheditsfilteredmessagelist",
        predicate:data=>{
            return(
                data.threadViewer.thread.model==='mail.channel'&&
                data.threadViewer.thread.id===20&&
                data.hint.type==='messages-loaded'
            );
        },
    });
    assert.containsOnce(
        document.body,
        '.o_Message',
        "shouldonlyhavethe1messagecontaining'test'inchannel20afterjustreceivingit"
    );
});

QUnit.test('discussshouldrefreshfilteredthreadonchangingthread',asyncfunction(assert){
    assert.expect(4);

    this.data['mail.channel'].records.push({id:20},{id:21});
    awaitthis.start();
    constchannel20=this.env.models['mail.thread'].findFromIdentifyingData({
        id:20,
        model:'mail.channel',
    });
    constchannel21=this.env.models['mail.thread'].findFromIdentifyingData({
        id:21,
        model:'mail.channel',
    });
    awaitthis.afterEvent({
        eventName:'o-thread-view-hint-processed',
        func:()=>{
            document.querySelector(`
                .o_DiscussSidebar_item[data-thread-local-id="${channel20.localId}"]
            `).click();
        },
        message:"shouldwaituntilchannel20isloadedafterclickingonit",
        predicate:({hint,threadViewer})=>{
            return(
                hint.type==='messages-loaded'&&
                threadViewer.thread.model==='mail.channel'&&
                threadViewer.thread.id===20
            );
        },
    });
    awaitthis.afterEvent({
        eventName:'o-thread-view-hint-processed',
        func:()=>{
            //simulatecontrolpanelsearch
            this.env.messaging.discuss.update({
                stringifiedDomain:JSON.stringify([['body','ilike','test']]),
            });
        },
        message:"shouldwaituntilsearchfilterisapplied",
        predicate:({hint,threadViewer})=>{
            return(
                hint.type==='messages-loaded'&&
                threadViewer.thread.model==='mail.channel'&&
                threadViewer.thread.id===20
            );
        },
    });
    assert.containsNone(
        document.body,
        '.o_Message',
        "shouldhaveinitiallynomessageinchannel20matchingthesearch'test'"
    );

    awaitthis.afterEvent({
        eventName:'o-thread-view-hint-processed',
        func:()=>{
            document.querySelector(`
                .o_DiscussSidebar_item[data-thread-local-id="${channel21.localId}"]
            `).click();
        },
        message:"shouldwaituntilchannel21isloadedafterclickingonit",
        predicate:({hint,threadViewer})=>{
            return(
                hint.type==='messages-loaded'&&
                threadViewer.thread.model==='mail.channel'&&
                threadViewer.thread.id===21
            );
        },
    });
    assert.containsNone(
        document.body,
        '.o_Message',
        "shouldhavenomessageinchannel21matchingthesearch'test'"
    );
    //simulatereceivingamessageonchannel20whilechannel21isdisplayed
    awaitthis.env.services.rpc({
        route:'/mail/chat_post',
        params:{
            message_content:"test",
            uuid:channel20.uuid,
        },
    });
    assert.containsNone(
        document.body,
        '.o_Message',
        "shouldstillhavenomessageinchannel21matchingthesearch'test'afterreceivingamessageonchannel20"
    );

    awaitthis.afterEvent({
        eventName:'o-thread-view-hint-processed',
        func:()=>{
            document.querySelector(`
                .o_DiscussSidebar_item[data-thread-local-id="${channel20.localId}"]
            `).click();
        },
        message:"shouldwaituntilchannel20isloadedwiththenewmessageafterclickingonit",
        predicate:({hint,threadViewer})=>{
            return(
                hint.type==='messages-loaded'&&
                threadViewer.thread.model==='mail.channel'&&
                threadViewer.thread.id===20&&
                threadViewer.threadCache.fetchedMessages.length===1
            );
        },
    });
    assert.containsOnce(
        document.body,
        '.o_Message',
        "shouldnowhavethe1messagecontaining'test'inchannel20whendisplayingit,afterhavingreceivedthemessagewhilethechannelwasnotvisible"
    );
});

QUnit.test('selectallandunselectallbuttonsshouldworkonfilteredthread',asyncfunction(assert){
    assert.expect(4);

    this.data['mail.channel'].records.push({
        id:20,
        is_moderator:true,
        moderation:true,
        name:"general",
    });
    this.data['mail.message'].records.push({
        body:"<p>test</p>",
        model:'mail.channel',
        moderation_status:'pending_moderation',
        res_id:20,
    });
    awaitthis.start();
    awaitthis.afterEvent({
        eventName:'o-thread-view-hint-processed',
        func:()=>{
            document.querySelector(`
                .o_DiscussSidebar_item[data-thread-local-id="${this.env.messaging.moderation.localId}"]
            `).click();
        },
        message:"shouldwaituntilmoderationboxisloadedafterclickingonit",
        predicate:({hint,threadViewer})=>{
            return(
                hint.type==='messages-loaded'&&
                threadViewer.thread.model==='mail.box'&&
                threadViewer.thread.id==='moderation'
            );
        },
    });
    awaitthis.afterEvent({
        eventName:'o-thread-view-hint-processed',
        func:()=>{
            //simulatecontrolpanelsearch
            this.env.messaging.discuss.update({
                stringifiedDomain:JSON.stringify([['body','ilike','test']]),
            });
        },
        message:"shouldwaituntilsearchfilterisapplied",
        predicate:({hint,threadViewer})=>{
            return(
                hint.type==='messages-loaded'&&
                threadViewer.thread.model==='mail.box'&&
                threadViewer.thread.id==='moderation'
            );
        },
    });
    assert.containsOnce(
        document.body,
        '.o_Message',
        "shouldonlyhavethe1messagecontaining'test'inmoderationbox"
    );
    assert.notOk(
        document.querySelector('.o_Message_checkbox').checked,
        "themoderationcheckboxshouldnotbecheckedinitially"
    );

    awaitafterNextRender(()=>document.querySelector('.o_widget_Discuss_controlPanelButtonSelectAll').click());
    assert.ok(
        document.querySelector('.o_Message_checkbox').checked,
        "themoderationcheckboxshouldbecheckedafterclickingon'selectall'"
    );

    awaitafterNextRender(()=>document.querySelector('.o_widget_Discuss_controlPanelButtonUnselectAll').click());
    assert.notOk(
        document.querySelector('.o_Message_checkbox').checked,
        "themoderationcheckboxshouldbeuncheckedafterclickingon'unselectall'"
    );
});

});
});
});

});
