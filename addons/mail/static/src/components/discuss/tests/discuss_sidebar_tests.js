flectra.define('mail/static/src/components/discuss/tests/discuss_sidebar_tests.js',function(require){
'usestrict';

const{makeDeferred}=require('mail/static/src/utils/deferred/deferred.js');
const{
    afterEach,
    afterNextRender,
    beforeEach,
    nextAnimationFrame,
    start,
}=require('mail/static/src/utils/test_utils.js');

QUnit.module('mail',{},function(){
QUnit.module('components',{},function(){
QUnit.module('discuss',{},function(){
QUnit.module('discuss_sidebar_tests.js',{
    beforeEach(){
        beforeEach(this);

        this.start=asyncparams=>{
            const{env,widget}=awaitstart(Object.assign({},params,{
                autoOpenDiscuss:true,
                data:this.data,
                hasDiscuss:true,
            }));
            this.env=env;
            this.widget=widget;
        };
    },
    afterEach(){
        afterEach(this);
    },
});

QUnit.test('sidebarfindshowschannelsmatchingsearchterm',asyncfunction(assert){
    assert.expect(3);

    this.data['mail.channel'].records.push({
        channel_partner_ids:[],
        channel_type:'channel',
        id:20,
        members:[],
        name:'test',
        public:'public',
    });
    constsearchReadDef=makeDeferred();
    awaitthis.start({
        asyncmockRPC(route,args){
            constres=awaitthis._super(...arguments);
            if(args.method==='search_read'){
                searchReadDef.resolve();
            }
            returnres;
        },
    });
    awaitafterNextRender(()=>
        document.querySelector(`.o_DiscussSidebar_groupHeaderItemAdd`).click()
    );
    document.querySelector(`.o_DiscussSidebar_itemNew`).focus();
    document.execCommand('insertText',false,"test");
    document.querySelector(`.o_DiscussSidebar_itemNew`)
        .dispatchEvent(newwindow.KeyboardEvent('keydown'));
    document.querySelector(`.o_DiscussSidebar_itemNew`)
        .dispatchEvent(newwindow.KeyboardEvent('keyup'));

    awaitsearchReadDef;
    awaitnextAnimationFrame();//ensuressearch_readrpcisrendered.
    constresults=document.querySelectorAll('.ui-autocomplete.ui-menu-itema');
    assert.ok(
        results,
        "shouldhaveautocompletesuggestionaftertypingon'findorcreatechannel'input"
    );
    assert.strictEqual(
        results.length,
        //Whensearchingforasingleexistingchannel,theresultslistwillhaveatleast3lines:
        //Onefortheexistingchannelitself
        //Oneforcreatingapublicchannelwiththesearchterm
        //Oneforcreatingaprivatechannelwiththesearchterm
        3
    );
    assert.strictEqual(
        results[0].textContent,
        "test",
        "autocompletesuggestionshouldtargetthechannelmatchingsearchterm"
    );
});

QUnit.test('sidebarfindshowschannelsmatchingsearchtermevenwhenuserismember',asyncfunction(assert){
    assert.expect(3);

    this.data['mail.channel'].records.push({
        channel_partner_ids:[this.data.currentPartnerId],
        channel_type:'channel',
        id:20,
        members:[this.data.currentPartnerId],
        name:'test',
        public:'public',
    });
    constsearchReadDef=makeDeferred();
    awaitthis.start({
        asyncmockRPC(route,args){
            constres=awaitthis._super(...arguments);
            if(args.method==='search_read'){
                searchReadDef.resolve();
            }
            returnres;
        },
    });
    awaitafterNextRender(()=>
        document.querySelector(`.o_DiscussSidebar_groupHeaderItemAdd`).click()
    );
    document.querySelector(`.o_DiscussSidebar_itemNew`).focus();
    document.execCommand('insertText',false,"test");
    document.querySelector(`.o_DiscussSidebar_itemNew`)
        .dispatchEvent(newwindow.KeyboardEvent('keydown'));
    document.querySelector(`.o_DiscussSidebar_itemNew`)
        .dispatchEvent(newwindow.KeyboardEvent('keyup'));

    awaitsearchReadDef;
    awaitnextAnimationFrame();
    constresults=document.querySelectorAll('.ui-autocomplete.ui-menu-itema');
    assert.ok(
        results,
        "shouldhaveautocompletesuggestionaftertypingon'findorcreatechannel'input"
    );
    assert.strictEqual(
        results.length,
        //Whensearchingforasingleexistingchannel,theresultslistwillhaveatleast3lines:
        //Onefortheexistingchannelitself
        //Oneforcreatingapublicchannelwiththesearchterm
        //Oneforcreatingaprivatechannelwiththesearchterm
        3
    );
    assert.strictEqual(
        results[0].textContent,
        "test",
        "autocompletesuggestionshouldtargetthechannelmatchingsearchtermevenifuserismember"
    );
});

QUnit.test('sidebarchannelsshouldbeorderedcaseinsensitivealphabetically',asyncfunction(assert){
    assert.expect(1);

    this.data['mail.channel'].records.push(
        {id:19,name:"Xyz"},
        {id:20,name:"abc"},
        {id:21,name:"Abc"},
        {id:22,name:"Xyz"}
    );
    awaitthis.start();
    constresults=document.querySelectorAll('.o_DiscussSidebar_groupChannel.o_DiscussSidebarItem_name');
    assert.deepEqual(
        [results[0].textContent,results[1].textContent,results[2].textContent,results[3].textContent],
        ["abc","Abc","Xyz","Xyz"],
        "Channelnameshouldbeincaseinsensitivealphabeticalorder"
    );
});

});
});
});

});
