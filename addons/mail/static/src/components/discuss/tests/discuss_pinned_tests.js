flectra.define('mail/static/src/components/discuss/tests/discuss_pinned_tests.js',function(require){
'usestrict';

const{
    afterEach,
    afterNextRender,
    beforeEach,
    start,
}=require('mail/static/src/utils/test_utils.js');

QUnit.module('mail',{},function(){
QUnit.module('components',{},function(){
QUnit.module('discuss',{},function(){
QUnit.module('discuss_pinned_tests.js',{
    beforeEach(){
        beforeEach(this);

        this.start=asyncparams=>{
            const{env,widget}=awaitstart(Object.assign({},params,{
                autoOpenDiscuss:true,
                data:this.data,
                hasDiscuss:true,
            }));
            this.env=env;
            this.widget=widget;
        };
    },
    afterEach(){
        afterEach(this);
    },
});

QUnit.test('sidebar:pinnedchannel1:initwithonepinnedchannel',asyncfunction(assert){
    assert.expect(2);

    //channelthatisexpectedtobefoundinthesidebar
    //witharandomuniqueidthatwillbereferencedinthetest
    this.data['mail.channel'].records.push({id:20});
    awaitthis.start();
    assert.containsOnce(
        document.body,
        `.o_Discuss_thread[data-thread-local-id="${this.env.messaging.inbox.localId}"]`,
        "TheInboxisopenedindiscuss"
    );
    assert.containsOnce(
        document.body,
        `.o_DiscussSidebarItem[data-thread-local-id="${
            this.env.models['mail.thread'].findFromIdentifyingData({
                id:20,
                model:'mail.channel',
            }).localId
        }"]`,
        "shouldhavetheonlychannelofwhichuserismemberindiscusssidebar"
    );
});

QUnit.test('sidebar:pinnedchannel2:openpinnedchannel',asyncfunction(assert){
    assert.expect(1);

    //channelthatisexpectedtobefoundinthesidebar
    //witharandomuniqueidthatwillbereferencedinthetest
    this.data['mail.channel'].records.push({id:20});
    awaitthis.start();

    constthreadGeneral=this.env.models['mail.thread'].findFromIdentifyingData({
        id:20,
        model:'mail.channel',
    });
    awaitafterNextRender(()=>
        document.querySelector(`.o_DiscussSidebarItem[data-thread-local-id="${
            threadGeneral.localId
        }"]`).click()
    );
    assert.containsOnce(
        document.body,
        `.o_Discuss_thread[data-thread-local-id="${threadGeneral.localId}"]`,
        "Thechannel#Generalisdisplayedindiscuss"
    );
});

QUnit.test('sidebar:pinnedchannel3:openpinnedchannelandunpinit',asyncfunction(assert){
    assert.expect(8);

    //channelthatisexpectedtobefoundinthesidebar
    //witharandomuniqueidthatwillbereferencedinthetest
    this.data['mail.channel'].records.push({
        id:20,
        is_minimized:true,
        state:'open',
    });
    awaitthis.start({
        asyncmockRPC(route,args){
            if(args.method==='execute_command'){
                assert.step('execute_command');
                assert.deepEqual(args.args[0],[20],
                    "Therightidissenttotheservertoremove"
                );
                assert.strictEqual(args.kwargs.command,'leave',
                    "Therightcommandissenttotheserver"
                );
            }
            if(args.method==='channel_fold'){
                assert.step('channel_fold');
            }
            returnthis._super(...arguments);
        },
    });

    constthreadGeneral=this.env.models['mail.thread'].findFromIdentifyingData({
        id:20,
        model:'mail.channel',
    });
    awaitafterNextRender(()=>
        document.querySelector(`.o_DiscussSidebarItem[data-thread-local-id="${
            threadGeneral.localId
        }"]`).click()
    );
    assert.verifySteps([],"neitherchannel_foldnorexecute_commandarecalledyet");
    awaitafterNextRender(()=>
        document.querySelector('.o_DiscussSidebarItem_commandLeave').click()
    );
    assert.verifySteps(
        [
            'channel_fold',
            'execute_command'
        ],
        "bothchannel_foldandexecute_commandhavebeencalledwhenunpinningachannel"
    );
    assert.containsNone(
        document.body,
        `.o_DiscussSidebarItem[data-thread-local-id="${threadGeneral.localId}"]`,
        "Thechannelmusthavebeenremovedfromdiscusssidebar"
    );
    assert.containsOnce(
        document.body,
        '.o_Discuss_noThread',
        "shouldhavenothreadopenedindiscuss"
    );
});

QUnit.test('sidebar:unpinchannelfrombus',asyncfunction(assert){
    assert.expect(5);

    //channelthatisexpectedtobefoundinthesidebar
    //witharandomuniqueidthatwillbereferencedinthetest
    this.data['mail.channel'].records.push({id:20});
    awaitthis.start();
    constthreadGeneral=this.env.models['mail.thread'].findFromIdentifyingData({
        id:20,
        model:'mail.channel',
    });

    assert.containsOnce(
        document.body,
        `.o_Discuss_thread[data-thread-local-id="${this.env.messaging.inbox.localId}"]`,
        "TheInboxisopenedindiscuss"
    );
    assert.containsOnce(
        document.body,
        `.o_DiscussSidebarItem[data-thread-local-id="${threadGeneral.localId}"]`,
        "1channelispresentindiscusssidebaranditis'general'"
    );

    awaitafterNextRender(()=>
        document.querySelector(`.o_DiscussSidebarItem[data-thread-local-id="${
            threadGeneral.localId
        }"]`).click()
    );
    assert.containsOnce(
        document.body,
        `.o_Discuss_thread[data-thread-local-id="${threadGeneral.localId}"]`,
        "Thechannel#Generalisopenedindiscuss"
    );

    //Simulatereceivingaleavechannelnotification
    //(e.g.fromuserinteractionfromanotherdeviceorbrowsertab)
    awaitafterNextRender(()=>{
        constnotif=[
            ["dbName",'res.partner',this.env.messaging.currentPartner.id],
            {
                channel_type:'channel',
                id:20,
                info:'unsubscribe',
                name:"General",
                public:'public',
                state:'open',
            }
        ];
        this.env.services.bus_service.trigger('notification',[notif]);
    });
    assert.containsOnce(
        document.body,
        '.o_Discuss_noThread',
        "shouldhavenothreadopenedindiscuss"
    );
    assert.containsNone(
        document.body,
        `.o_DiscussSidebarItem[data-thread-local-id="${threadGeneral.localId}"]`,
        "Thechannelmusthavebeenremovedfromdiscusssidebar"
    );
});

QUnit.test('[technical]sidebar:channelgroup_based_subscription:mandatorilypinned',asyncfunction(assert){
    assert.expect(2);

    //FIXME:Thefollowingisadmittedlyodd.
    //Fixingitshouldentailadeeperreflexiononthegroup_based_subscription
    //andis_pinnedfunctionalities,especiallyinpython.
    //task-2284357

    //channelthatisexpectedtobefoundinthesidebar
    this.data['mail.channel'].records.push({
        group_based_subscription:true,//expectedvalueforthistest
        id:20,//randomuniqueid,willbereferencedinthetest
        is_pinned:false,//expectedvalueforthistest
    });
    awaitthis.start();
    constthreadGeneral=this.env.models['mail.thread'].findFromIdentifyingData({
        id:20,
        model:'mail.channel',
    });
    assert.containsOnce(
        document.body,
        `.o_DiscussSidebarItem[data-thread-local-id="${threadGeneral.localId}"]`,
        "Thechannel#Generalisindiscusssidebar"
    );
    assert.containsNone(
        document.body,
        'o_DiscussSidebarItem_commandLeave',
        "Thegroup_based_subscriptionchannelisnotunpinnable"
    );
});

});
});
});

});
