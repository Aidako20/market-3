flectra.define('mail/static/src/components/discuss/tests/discuss_tests.js',function(require){
'usestrict';

constBusService=require('bus.BusService');

const{
    afterEach,
    afterNextRender,
    beforeEach,
    isScrolledToBottom,
    nextAnimationFrame,
    start,
}=require('mail/static/src/utils/test_utils.js');

constBus=require('web.Bus');
const{makeTestPromise,file:{createFile,inputFiles}}=require('web.test_utils');

const{
    applyFilter,
    toggleAddCustomFilter,
    toggleFilterMenu,
}=require('web.test_utils_control_panel');

QUnit.module('mail',{},function(){
QUnit.module('components',{},function(){
QUnit.module('discuss',{},function(){
QUnit.module('discuss_tests.js',{
    beforeEach(){
        beforeEach(this);

        this.start=asyncparams=>{
            const{afterEvent,env,widget}=awaitstart(Object.assign({},params,{
                autoOpenDiscuss:true,
                data:this.data,
                hasDiscuss:true,
            }));
            this.afterEvent=afterEvent;
            this.env=env;
            this.widget=widget;
        };
    },
    afterEach(){
        afterEach(this);
    },
});

QUnit.test('messagingnotinitialized',asyncfunction(assert){
    assert.expect(1);

    awaitthis.start({
        asyncmockRPC(route){
            const_super=this._super.bind(this,...arguments);//limitationofclass.js
            if(route==='/mail/init_messaging'){
                awaitmakeTestPromise();//simulatemessagingneverinitialized
            }
            return_super();
        },
        waitUntilMessagingCondition:'created',
    });
    assert.strictEqual(
        document.querySelectorAll('.o_Discuss_messagingNotInitialized').length,
        1,
        "shoulddisplaymessagingnotinitialized"
    );
});

QUnit.test('messagingbecomesinitialized',asyncfunction(assert){
    assert.expect(2);

    constmessagingInitializedProm=makeTestPromise();

    awaitthis.start({
        asyncmockRPC(route){
            const_super=this._super.bind(this,...arguments);//limitationofclass.js
            if(route==='/mail/init_messaging'){
                awaitmessagingInitializedProm;
            }
            return_super();
        },
        waitUntilMessagingCondition:'created',
    });
    assert.strictEqual(
        document.querySelectorAll('.o_Discuss_messagingNotInitialized').length,
        1,
        "shoulddisplaymessagingnotinitialized"
    );

    awaitafterNextRender(()=>messagingInitializedProm.resolve());
    assert.strictEqual(
        document.querySelectorAll('.o_Discuss_messagingNotInitialized').length,
        0,
        "shouldnolongerdisplaymessagingnotinitialized"
    );
});

QUnit.test('basicrendering',asyncfunction(assert){
    assert.expect(4);

    awaitthis.start();
    assert.strictEqual(
        document.querySelectorAll('.o_Discuss_sidebar').length,
        1,
        "shouldhaveasidebarsection"
    );
    assert.strictEqual(
        document.querySelectorAll('.o_Discuss_content').length,
        1,
        "shouldhavecontentsection"
    );
    assert.strictEqual(
        document.querySelectorAll('.o_Discuss_thread').length,
        1,
        "shouldhavethreadsectioninsidecontent"
    );
    assert.ok(
        document.querySelector('.o_Discuss_thread').classList.contains('o_ThreadView'),
        "threadsectionshoulduseThreadViewcomponent"
    );
});

QUnit.test('basicrendering:sidebar',asyncfunction(assert){
    assert.expect(20);

    awaitthis.start();
    assert.strictEqual(
        document.querySelectorAll(`.o_DiscussSidebar_group`).length,
        3,
        "shouldhave3groupsinsidebar"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_DiscussSidebar_groupMailbox`).length,
        1,
        "shouldhavegroup'Mailbox'insidebar"
    );
    assert.strictEqual(
        document.querySelectorAll(`
            .o_DiscussSidebar_groupMailbox.o_DiscussSidebar_groupHeader
        `).length,
        0,
        "mailboxcategoryshouldnothaveanyheader"
    );
    assert.strictEqual(
        document.querySelectorAll(`
            .o_DiscussSidebar_groupMailbox.o_DiscussSidebar_item
        `).length,
        3,
        "shouldhave3mailboxitems"
    );
    assert.strictEqual(
        document.querySelectorAll(`
            .o_DiscussSidebar_groupMailbox
            .o_DiscussSidebar_item[data-thread-local-id="${
                this.env.messaging.inbox.localId
            }"]
        `).length,
        1,
        "shouldhaveinboxmailboxitem"
    );
    assert.strictEqual(
        document.querySelectorAll(`
            .o_DiscussSidebar_groupMailbox
            .o_DiscussSidebar_item[data-thread-local-id="${
                this.env.messaging.starred.localId
            }"]
        `).length,
        1,
        "shouldhavestarredmailboxitem"
    );
    assert.strictEqual(
        document.querySelectorAll(`
            .o_DiscussSidebar_groupMailbox
            .o_DiscussSidebar_item[data-thread-local-id="${
                this.env.messaging.history.localId
            }"]
        `).length,
        1,
        "shouldhavehistorymailboxitem"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_Discuss_sidebar.o_DiscussSidebar_separator`).length,
        1,
        "shouldhaveseparator(betweenmailboxesandchannels,butthat'snottested)"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_DiscussSidebar_groupChannel`).length,
        1,
        "shouldhavegroup'Channel'insidebar"
    );
    assert.strictEqual(
        document.querySelectorAll(`
            .o_DiscussSidebar_groupChannel.o_DiscussSidebar_groupHeader
        `).length,
        1,
        "channelcategoryshouldhaveaheader"
    );
    assert.strictEqual(
        document.querySelectorAll(`
            .o_DiscussSidebar_groupChannel.o_DiscussSidebar_groupTitle
        `).length,
        1,
        "shouldhavetitleinchannelheader"
    );
    assert.strictEqual(
        document.querySelector(`
            .o_DiscussSidebar_groupChannel.o_DiscussSidebar_groupTitle
        `).textContent.trim(),
        "Channels"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_DiscussSidebar_groupChannel.o_DiscussSidebar_list`).length,
        1,
        "channelcategoryshouldlistitems"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_DiscussSidebar_groupChannel.o_DiscussSidebar_item`).length,
        0,
        "channelcategoryshouldhavenoitembydefault"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_DiscussSidebar_groupChat`).length,
        1,
        "shouldhavegroup'Chat'insidebar"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_DiscussSidebar_groupChat.o_DiscussSidebar_groupHeader`).length,
        1,
        "channelcategoryshouldhaveaheader"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_DiscussSidebar_groupChat.o_DiscussSidebar_groupTitle`).length,
        1,
        "shouldhavetitleinchatheader"
    );
    assert.strictEqual(
        document.querySelector(`
            .o_DiscussSidebar_groupChat.o_DiscussSidebar_groupTitle
        `).textContent.trim(),
        "DirectMessages"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_DiscussSidebar_groupChat.o_DiscussSidebar_list`).length,
        1,
        "chatcategoryshouldlistitems"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_DiscussSidebar_groupChat.o_DiscussSidebar_item`).length,
        0,
        "chatcategoryshouldhavenoitembydefault"
    );
});

QUnit.test('sidebar:basicmailboxrendering',asyncfunction(assert){
    assert.expect(6);

    awaitthis.start();
    constinbox=document.querySelector(`
        .o_DiscussSidebar_groupMailbox
        .o_DiscussSidebar_item[data-thread-local-id="${
            this.env.messaging.inbox.localId
        }"]
    `);
    assert.strictEqual(
        inbox.querySelectorAll(`:scope.o_DiscussSidebarItem_activeIndicator`).length,
        1,
        "mailboxshouldhaveactiveindicator"
    );
    assert.strictEqual(
        inbox.querySelectorAll(`:scope.o_ThreadIcon`).length,
        1,
        "mailboxshouldhaveanicon"
    );
    assert.strictEqual(
        inbox.querySelectorAll(`:scope.o_ThreadIcon_mailboxInbox`).length,
        1,
        "inboxshouldhave'inbox'icon"
    );
    assert.strictEqual(
        inbox.querySelectorAll(`:scope.o_DiscussSidebarItem_name`).length,
        1,
        "mailboxshouldhaveaname"
    );
    assert.strictEqual(
        inbox.querySelector(`:scope.o_DiscussSidebarItem_name`).textContent,
        "Inbox",
        "inboxshouldhavename'Inbox'"
    );
    assert.strictEqual(
        document.querySelectorAll(`
            .o_DiscussSidebar_item[data-thread-local-id="${
                this.env.messaging.inbox.localId
            }"]
            .o_DiscussSidebarItem_counter
        `).length,
        0,
        "shouldhavenocounterwhenequalto0(defaultvalue)"
    );
});

QUnit.test('sidebar:defaultactiveinbox',asyncfunction(assert){
    assert.expect(1);

    awaitthis.start();
    constinbox=document.querySelector(`
        .o_DiscussSidebar_groupMailbox
        .o_DiscussSidebar_item[data-thread-local-id="${
            this.env.messaging.inbox.localId
        }"]
    `);
    assert.ok(
        inbox.querySelector(`
            :scope.o_DiscussSidebarItem_activeIndicator
        `).classList.contains('o-item-active'),
        "inboxshouldbeactivebydefault"
    );
});

QUnit.test('sidebar:changeitem',asyncfunction(assert){
    assert.expect(4);

    awaitthis.start();
    assert.ok(
        document.querySelector(`
            .o_DiscussSidebar_item[data-thread-local-id="${
                this.env.messaging.inbox.localId
            }"]
            .o_DiscussSidebarItem_activeIndicator
        `).classList.contains('o-item-active'),
        "inboxshouldbeactivebydefault"
    );
    assert.notOk(
        document.querySelector(`
            .o_DiscussSidebar_item[data-thread-local-id="${
                this.env.messaging.starred.localId
            }"]
            .o_DiscussSidebarItem_activeIndicator
        `).classList.contains('o-item-active'),
        "starredshouldbeinactivebydefault"
    );

    awaitafterNextRender(()=>
        document.querySelector(`
            .o_DiscussSidebar_item[data-thread-local-id="${
                this.env.messaging.starred.localId
            }"]
        `).click()
    );
    assert.notOk(
        document.querySelector(`
            .o_DiscussSidebar_item[data-thread-local-id="${
                this.env.messaging.inbox.localId
            }"]
            .o_DiscussSidebarItem_activeIndicator
        `).classList.contains('o-item-active'),
        "inboxmailboxshouldbecomeinactive"
    );
    assert.ok(
        document.querySelector(`
            .o_DiscussSidebar_item[data-thread-local-id="${
                this.env.messaging.starred.localId
            }"]
            .o_DiscussSidebarItem_activeIndicator
        `).classList.contains('o-item-active'),
        "starredmailboxshouldbecomeactive");
});

QUnit.test('sidebar:inboxwithcounter',asyncfunction(assert){
    assert.expect(2);

    //notificationexpectedtobecountedatinit_messaging
    this.data['mail.notification'].records.push({res_partner_id:this.data.currentPartnerId});
    awaitthis.start();
    assert.strictEqual(
        document.querySelectorAll(`
            .o_DiscussSidebar_item[data-thread-local-id="${
                this.env.messaging.inbox.localId
            }"]
            .o_DiscussSidebarItem_counter
        `).length,
        1,
        "shoulddisplayacounter(=haveacounterwhendifferentfrom0)"
    );
    assert.strictEqual(
        document.querySelector(`
            .o_DiscussSidebar_item[data-thread-local-id="${
                this.env.messaging.inbox.localId
            }"]
            .o_DiscussSidebarItem_counter
        `).textContent,
        "1",
        "shouldhavecountervalue"
    );
});

QUnit.test('sidebar:addchannel',asyncfunction(assert){
    assert.expect(3);

    awaitthis.start();
    assert.strictEqual(
        document.querySelectorAll(`
            .o_DiscussSidebar_groupChannel
            .o_DiscussSidebar_groupHeaderItemAdd
        `).length,
        1,
        "shouldbeabletoaddchannelfromheader"
    );
    assert.strictEqual(
        document.querySelector(`
            .o_DiscussSidebar_groupChannel
            .o_DiscussSidebar_groupHeaderItemAdd
        `).title,
        "Addorjoinachannel");

    awaitafterNextRender(()=>
        document.querySelector(`
            .o_DiscussSidebar_groupChannel.o_DiscussSidebar_groupHeaderItemAdd
        `).click()
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_DiscussSidebar_groupChannel.o_DiscussSidebar_itemNew`).length,
        1,
        "shouldhaveitemtoaddanewchannel"
    );
});

QUnit.test('sidebar:basicchannelrendering',asyncfunction(assert){
    assert.expect(14);

    //channelexpectedtobefoundinthesidebar,
    //witharandomuniqueidandnamethat willbereferencedinthetest
    this.data['mail.channel'].records.push({id:20,name:"General"});
    awaitthis.start();
    assert.strictEqual(
        document.querySelectorAll(`.o_DiscussSidebar_groupChannel.o_DiscussSidebar_item`).length,
        1,
        "shouldhaveonechannelitem");
    letchannel=document.querySelector(`
        .o_DiscussSidebar_groupChannel
        .o_DiscussSidebar_item
    `);
    assert.strictEqual(
        channel.dataset.threadLocalId,
        this.env.models['mail.thread'].findFromIdentifyingData({
            id:20,
            model:'mail.channel',
        }).localId,
        "shouldhavechannelwithId20"
    );
    assert.strictEqual(
        channel.querySelectorAll(`:scope.o_DiscussSidebarItem_activeIndicator`).length,
        1,
        "shouldhaveactiveindicator"
    );
    assert.strictEqual(
        channel.querySelectorAll(`:scope.o_DiscussSidebarItem_activeIndicator.o-item-active`).length,
        0,
        "shouldnotbeactivebydefault"
    );
    assert.strictEqual(
        channel.querySelectorAll(`:scope.o_ThreadIcon`).length,
        1,
        "shouldhaveanicon"
    );
    assert.strictEqual(
        channel.querySelectorAll(`:scope.o_DiscussSidebarItem_name`).length,
        1,
        "shouldhaveaname"
    );
    assert.strictEqual(
        channel.querySelector(`:scope.o_DiscussSidebarItem_name`).textContent,
        "General",
        "shouldhavenamevalue"
    );
    assert.strictEqual(
        channel.querySelectorAll(`:scope.o_DiscussSidebarItem_commands`).length,
        1,
        "shouldhavecommands"
    );
    assert.strictEqual(
        channel.querySelectorAll(`:scope.o_DiscussSidebarItem_command`).length,
        2,
        "shouldhave2commands"
    );
    assert.strictEqual(
        channel.querySelectorAll(`:scope.o_DiscussSidebarItem_commandSettings`).length,
        1,
        "shouldhave'settings'command"
    );
    assert.strictEqual(
        channel.querySelectorAll(`:scope.o_DiscussSidebarItem_commandLeave`).length,
        1,
        "shouldhave'leave'command"
    );
    assert.strictEqual(
        channel.querySelectorAll(`:scope.o_DiscussSidebarItem_counter`).length,
        0,
        "shouldhaveacounterwhenequals0(defaultvalue)"
    );

    awaitafterNextRender(()=>
        document.querySelector(`.o_DiscussSidebar_groupChannel.o_DiscussSidebar_item`).click()
    );
    channel=document.querySelector(`.o_DiscussSidebar_groupChannel.o_DiscussSidebar_item`);
    assert.strictEqual(
        channel.querySelectorAll(`:scope.o_DiscussSidebarItem_activeIndicator.o-item-active`).length,
        1,
        "channelshouldbecomeactive"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_Discuss_thread.o_ThreadView_composer`).length,
        1,
        "shouldhavecomposersectioninsidethreadcontent(canpostmessageinchannel)"
    );
});

QUnit.test('sidebar:channelrenderingwithneedactioncounter',asyncfunction(assert){
    assert.expect(5);

    //channelexpectedtobefoundinthesidebar
    //witharandomuniqueidthatwillbeusedtolinkmessage
    this.data['mail.channel'].records.push({id:20});
    //expectedneedactionmessage
    this.data['mail.message'].records.push({
        body:"notempty",
        channel_ids:[20],//linkmessagetochannel
        id:100,//randomuniqueid,usefultolinknotification
    });
    //expectedneedactionnotification
    this.data['mail.notification'].records.push({
        mail_message_id:100,//idofrelatedmessage
        res_partner_id:this.data.currentPartnerId,//mustbeforcurrentpartner
    });
    awaitthis.start();
    constchannel=document.querySelector(`.o_DiscussSidebar_groupChannel.o_DiscussSidebar_item`);
    assert.strictEqual(
        channel.querySelectorAll(`:scope.o_DiscussSidebarItem_counter`).length,
        1,
        "shouldhaveacounterwhendifferentfrom0"
    );
    assert.strictEqual(
        channel.querySelector(`:scope.o_DiscussSidebarItem_counter`).textContent,
        "1",
        "shouldhavecountervalue"
    );
    assert.strictEqual(
        channel.querySelectorAll(`:scope.o_DiscussSidebarItem_command`).length,
        1,
        "shouldhavesinglecommand"
    );
    assert.strictEqual(
        channel.querySelectorAll(`:scope.o_DiscussSidebarItem_commandSettings`).length,
        1,
        "shouldhave'settings'command"
    );
    assert.strictEqual(
        channel.querySelectorAll(`:scope.o_DiscussSidebarItem_commandLeave`).length,
        0,
        "shouldnothave'leave'command"
    );
});

QUnit.test('sidebar:mailingchannel',asyncfunction(assert){
    assert.expect(1);

    //channelthatisexpectedtobeinthesidebar,withpropermass_mailingvalue
    this.data['mail.channel'].records.push({mass_mailing:true});
    awaitthis.start();
    assert.containsOnce(
        document.querySelector(`.o_DiscussSidebar_groupChannel.o_DiscussSidebar_item`),
        '.fa.fa-envelope-o',
        "shouldhaveanicontoindicatethatthechannelisamailingchannel"
    );
});

QUnit.test('sidebar:public/privatechannelrendering',asyncfunction(assert){
    assert.expect(5);

    //channelsthatareexpectedtobefoundinthesidebar(onepublic,oneprivate)
    //withrandomuniqueidandnamethatwillbereferencedinthetest
    this.data['mail.channel'].records.push(
        {id:100,name:"channel1",public:'public',},
        {id:101,name:"channel2",public:'private'}
    );
    awaitthis.start();
    assert.strictEqual(
        document.querySelectorAll(`.o_DiscussSidebar_groupChannel.o_DiscussSidebar_item`).length,
        2,
        "shouldhave2channelitems"
    );
    assert.strictEqual(
        document.querySelectorAll(`
            .o_DiscussSidebar_groupChannel
            .o_DiscussSidebar_item[data-thread-local-id="${
                this.env.models['mail.thread'].findFromIdentifyingData({
                    id:100,
                    model:'mail.channel',
                }).localId
            }"]
        `).length,
        1,
        "shouldhavechannel1(Id100)"
    );
    assert.strictEqual(
        document.querySelectorAll(`
            .o_DiscussSidebar_groupChannel
            .o_DiscussSidebar_item[data-thread-local-id="${
                this.env.models['mail.thread'].findFromIdentifyingData({
                    id:101,
                    model:'mail.channel'
                }).localId
            }"]
        `).length,
        1,
        "shouldhavechannel2(Id101)"
    );
    constchannel1=document.querySelector(`
        .o_DiscussSidebar_groupChannel
        .o_DiscussSidebar_item[data-thread-local-id="${
            this.env.models['mail.thread'].findFromIdentifyingData({
                id:100,
                model:'mail.channel'
            }).localId
        }"]
    `);
    constchannel2=document.querySelector(`
        .o_DiscussSidebar_groupChannel
        .o_DiscussSidebar_item[data-thread-local-id="${
            this.env.models['mail.thread'].findFromIdentifyingData({
                id:101,
                model:'mail.channel'
            }).localId
        }"]
    `);
    assert.strictEqual(
        channel1.querySelectorAll(`:scope.o_ThreadIcon_channelPublic`).length,
        1,
        "channel1(public)hashashtagicon"
    );
    assert.strictEqual(
        channel2.querySelectorAll(`:scope.o_ThreadIcon_channelPrivate`).length,
        1,
        "channel2(private)haslockicon"
    );
});

QUnit.test('sidebar:basicchatrendering',asyncfunction(assert){
    assert.expect(11);

    //expectedcorrespondent,witharandomuniqueidthatwillbeusedtolink
    //partnertochatandarandomnamethatwillbeassertedinthetest
    this.data['res.partner'].records.push({id:17,name:"Demo"});
    //chatexpectedtobefoundinthesidebar
    this.data['mail.channel'].records.push({
        channel_type:'chat',//testingachatisthegoalofthetest
        id:10,//randomuniqueid,willbereferencedinthetest
        members:[this.data.currentPartnerId,17],//expectedpartners
        public:'private',//expectedvaluefortestingachat
    });
    awaitthis.start();
    assert.strictEqual(
        document.querySelectorAll(`.o_DiscussSidebar_groupChat.o_DiscussSidebar_item`).length,
        1,
        "shouldhaveonechatitem"
    );
    constchat=document.querySelector(`.o_DiscussSidebar_groupChat.o_DiscussSidebar_item`);
    assert.strictEqual(
        chat.dataset.threadLocalId,
        this.env.models['mail.thread'].findFromIdentifyingData({
            id:10,
            model:'mail.channel'
        }).localId,
        "shouldhavechatwithId10"
    );
    assert.strictEqual(
        chat.querySelectorAll(`:scope.o_DiscussSidebarItem_activeIndicator`).length,
        1,
        "shouldhaveactiveindicator"
    );
    assert.strictEqual(
        chat.querySelectorAll(`:scope.o_ThreadIcon`).length,
        1,
        "shouldhaveanicon"
    );
    assert.strictEqual(
        chat.querySelectorAll(`:scope.o_DiscussSidebarItem_name`).length,
        1,
        "shouldhaveaname"
    );
    assert.strictEqual(
        chat.querySelector(`:scope.o_DiscussSidebarItem_name`).textContent,
        "Demo",
        "shouldhavecorrespondentnameasname"
    );
    assert.strictEqual(
        chat.querySelectorAll(`:scope.o_DiscussSidebarItem_commands`).length,
        1,
        "shouldhavecommands"
    );
    assert.strictEqual(
        chat.querySelectorAll(`:scope.o_DiscussSidebarItem_command`).length,
        2,
        "shouldhave2commands"
    );
    assert.strictEqual(
        chat.querySelectorAll(`:scope.o_DiscussSidebarItem_commandRename`).length,
        1,
        "shouldhave'rename'command"
    );
    assert.strictEqual(
        chat.querySelectorAll(`:scope.o_DiscussSidebarItem_commandUnpin`).length,
        1,
        "shouldhave'unpin'command"
    );
    assert.strictEqual(
        chat.querySelectorAll(`:scope.o_DiscussSidebarItem_counter`).length,
        0,
        "shouldhaveacounterwhenequals0(defaultvalue)"
    );
});

QUnit.test('sidebar:chatrenderingwithunreadcounter',asyncfunction(assert){
    assert.expect(5);

    //chatexpectedtobefoundinthesidebar
    this.data['mail.channel'].records.push({
        channel_type:'chat',//testingachatisthegoalofthetest
        id:10,//randomuniqueid,willbereferencedinthetest
        message_unread_counter:100,
        public:'private',//expectedvaluefortestingachat
    });
    awaitthis.start();
    constchat=document.querySelector(`.o_DiscussSidebar_groupChat.o_DiscussSidebar_item`);
    assert.strictEqual(
        chat.querySelectorAll(`:scope.o_DiscussSidebarItem_counter`).length,
        1,
        "shouldhaveacounterwhendifferentfrom0"
    );
    assert.strictEqual(
        chat.querySelector(`:scope.o_DiscussSidebarItem_counter`).textContent,
        "100",
        "shouldhavecountervalue"
    );
    assert.strictEqual(
        chat.querySelectorAll(`:scope.o_DiscussSidebarItem_command`).length,
        1,
        "shouldhavesinglecommand"
    );
    assert.strictEqual(
        chat.querySelectorAll(`:scope.o_DiscussSidebarItem_commandRename`).length,
        1,
        "shouldhave'rename'command"
    );
    assert.strictEqual(
        chat.querySelectorAll(`:scope.o_DiscussSidebarItem_commandUnpin`).length,
        0,
        "shouldnothave'unpin'command"
    );
});

QUnit.test('sidebar:chatim_statusrendering',asyncfunction(assert){
    assert.expect(7);

    //expectedcorrespondent,witharandomuniqueidthatwillbeusedtolink
    //partnertochat,andvariousim_statusvaluestoassert
    this.data['res.partner'].records.push(
        {id:101,im_status:'offline',name:"Partner1"},
        {id:102,im_status:'online',name:"Partner2"},
        {id:103,im_status:'away',name:"Partner3"}
    );
    //chatsexpectedtobefoundinthesidebar
    this.data['mail.channel'].records.push(
        {
            channel_type:'chat',//testingachatisthegoalofthetest
            id:11,//randomuniqueid,willbereferencedinthetest
            members:[this.data.currentPartnerId,101],//expectedpartners
            public:'private',//expectedvaluefortestingachat
        },
        {
            channel_type:'chat',//testingachatisthegoalofthetest
            id:12,//randomuniqueid,willbereferencedinthetest
            members:[this.data.currentPartnerId,102],//expectedpartners
            public:'private',//expectedvaluefortestingachat
        },
        {
            channel_type:'chat',//testingachatisthegoalofthetest
            id:13,//randomuniqueid,willbereferencedinthetest
            members:[this.data.currentPartnerId,103],//expectedpartners
            public:'private',//expectedvaluefortestingachat
        }
    );
    awaitthis.start();
    assert.strictEqual(
        document.querySelectorAll(`.o_DiscussSidebar_groupChat.o_DiscussSidebar_item`).length,
        3,
        "shouldhave3chatitems"
    );
    assert.strictEqual(
        document.querySelectorAll(`
            .o_DiscussSidebar_groupChat
            .o_DiscussSidebar_item[data-thread-local-id="${
                this.env.models['mail.thread'].findFromIdentifyingData({
                    id:11,
                    model:'mail.channel',
                }).localId
            }"]
        `).length,
        1,
        "shouldhavePartner1(Id11)"
    );
    assert.strictEqual(
        document.querySelectorAll(`
            .o_DiscussSidebar_groupChat
            .o_DiscussSidebar_item[data-thread-local-id="${
                this.env.models['mail.thread'].findFromIdentifyingData({
                    id:12,
                    model:'mail.channel',
                }).localId
            }"]
        `).length,
        1,
        "shouldhavePartner2(Id12)"
    );
    assert.strictEqual(
        document.querySelectorAll(`
            .o_DiscussSidebar_groupChat
            .o_DiscussSidebar_item[data-thread-local-id="${
                this.env.models['mail.thread'].findFromIdentifyingData({
                    id:13,
                    model:'mail.channel',
                }).localId
            }"]
        `).length,
        1,
        "shouldhavePartner3(Id13)"
    );
    constchat1=document.querySelector(`
        .o_DiscussSidebar_groupChat
        .o_DiscussSidebar_item[data-thread-local-id="${
            this.env.models['mail.thread'].findFromIdentifyingData({
                id:11,
                model:'mail.channel',
            }).localId
        }"]
    `);
    constchat2=document.querySelector(`
        .o_DiscussSidebar_groupChat
        .o_DiscussSidebar_item[data-thread-local-id="${
            this.env.models['mail.thread'].findFromIdentifyingData({
                id:12,
                model:'mail.channel',
            }).localId
        }"]
    `);
    constchat3=document.querySelector(`
        .o_DiscussSidebar_groupChat
        .o_DiscussSidebar_item[data-thread-local-id="${
            this.env.models['mail.thread'].findFromIdentifyingData({
                id:13,
                model:'mail.channel',
            }).localId
        }"]
    `);
    assert.strictEqual(
        chat1.querySelectorAll(`:scope.o_ThreadIcon_offline`).length,
        1,
        "chat1shouldhaveofflineicon"
    );
    assert.strictEqual(
        chat2.querySelectorAll(`:scope.o_ThreadIcon_online`).length,
        1,
        "chat2shouldhaveonlineicon"
    );
    assert.strictEqual(
        chat3.querySelectorAll(`:scope.o_ThreadIcon_away`).length,
        1,
        "chat3shouldhaveawayicon"
    );
});

QUnit.test('sidebar:chatcustomname',asyncfunction(assert){
    assert.expect(1);

    //expectedcorrespondent,witharandomuniqueidthatwillbeusedtolink
    //partnertochat,andarandomnamenotusedinthescopeofthistestbutsetforconsistency
    this.data['res.partner'].records.push({id:101,name:"MarcDemo"});
    //chatexpectedtobefoundinthesidebar
    this.data['mail.channel'].records.push({
        channel_type:'chat',//testingachatisthegoalofthetest
        custom_channel_name:"Marc",//testingacustomnameisthegoalofthetest
        members:[this.data.currentPartnerId,101],//expectedpartners
        public:'private',//expectedvaluefortestingachat
    });
    awaitthis.start();
    constchat=document.querySelector(`.o_DiscussSidebar_groupChat.o_DiscussSidebar_item`);
    assert.strictEqual(
        chat.querySelector(`:scope.o_DiscussSidebarItem_name`).textContent,
        "Marc",
        "chatshouldhavecustomnameasname"
    );
});

QUnit.test('sidebar:renamechat',asyncfunction(assert){
    assert.expect(8);

    //expectedcorrespondent,witharandomuniqueidthatwillbeusedtolink
    //partnertochat,andarandomnamenotusedinthescopeofthistestbutsetforconsistency
    this.data['res.partner'].records.push({id:101,name:"MarcDemo"});
    //chatexpectedtobefoundinthesidebar
    this.data['mail.channel'].records.push({
        channel_type:'chat',//testingachatisthegoalofthetest
        custom_channel_name:"Marc",//testingacustomnameisthegoalofthetest
        members:[this.data.currentPartnerId,101],//expectedpartners
        public:'private',//expectedvaluefortestingachat
    });
    awaitthis.start();
    constchat=document.querySelector(`.o_DiscussSidebar_groupChat.o_DiscussSidebar_item`);
    assert.strictEqual(
        chat.querySelector(`:scope.o_DiscussSidebarItem_name`).textContent,
        "Marc",
        "chatshouldhavecustomnameasname"
    );
    assert.notOk(
        chat.querySelector(`:scope.o_DiscussSidebarItem_name`).classList.contains('o-editable'),
        "chatnameshouldnotbeeditable"
    );

    awaitafterNextRender(()=>
        chat.querySelector(`:scope.o_DiscussSidebarItem_commandRename`).click()
    );
    assert.ok(
        chat.querySelector(`:scope.o_DiscussSidebarItem_name`).classList.contains('o-editable'),
        "chatshouldhaveeditablename"
    );
    assert.strictEqual(
        chat.querySelectorAll(`:scope.o_DiscussSidebarItem_nameInput`).length,
        1,
        "chatshouldhaveeditablenameinput"
    );
    assert.strictEqual(
        chat.querySelector(`:scope.o_DiscussSidebarItem_nameInput`).value,
        "Marc",
        "editablenameinputshouldhavecustomchatnameasvaluebydefault"
    );
    assert.strictEqual(
        chat.querySelector(`:scope.o_DiscussSidebarItem_nameInput`).placeholder,
        "MarcDemo",
        "editablenameinputshouldhavepartnernameasplaceholder"
    );

    awaitafterNextRender(()=>{
        chat.querySelector(`:scope.o_DiscussSidebarItem_nameInput`).value="Demo";
        constkevt=newwindow.KeyboardEvent('keydown',{key:"Enter"});
        chat.querySelector(`:scope.o_DiscussSidebarItem_nameInput`).dispatchEvent(kevt);
    });
    assert.notOk(
        chat.querySelector(`:scope.o_DiscussSidebarItem_name`).classList.contains('o-editable'),
        "chatshouldnolongershoweditablename"
    );
    assert.strictEqual(
        chat.querySelector(`:scope.o_DiscussSidebarItem_name`).textContent,
        "Demo",
        "chatshouldhaverenamednameasname"
    );
});

QUnit.test('defaultthreadrendering',asyncfunction(assert){
    assert.expect(16);

    //channelexpectedtobefoundinthesidebar,
    //witharandomuniqueidthatwillbereferencedinthetest
    this.data['mail.channel'].records.push({id:20});
    awaitthis.start();
    assert.strictEqual(
        document.querySelectorAll(`
            .o_DiscussSidebar_item[data-thread-local-id="${
                this.env.messaging.inbox.localId
            }"]
        `).length,
        1,
        "shouldhaveinboxmailboxinthesidebar"
    );
    assert.strictEqual(
        document.querySelectorAll(`
            .o_DiscussSidebar_item[data-thread-local-id="${
                this.env.messaging.starred.localId
            }"]
        `).length,
        1,
        "shouldhavestarredmailboxinthesidebar"
    );
    assert.strictEqual(
        document.querySelectorAll(`
            .o_DiscussSidebar_item[data-thread-local-id="${
                this.env.messaging.history.localId
            }"]
        `).length,
        1,
        "shouldhavehistorymailboxinthesidebar"
    );
    assert.strictEqual(
        document.querySelectorAll(`
            .o_DiscussSidebar_item[data-thread-local-id="${
                this.env.models['mail.thread'].findFromIdentifyingData({
                    id:20,
                    model:'mail.channel',
                }).localId
            }"]
        `).length,
        1,
        "shouldhavechannel20inthesidebar"
    );
    assert.ok(
        document.querySelector(`
            .o_DiscussSidebar_item[data-thread-local-id="${
                this.env.messaging.inbox.localId
            }"]
        `).classList.contains('o-active'),
        "inboxmailboxshouldbeactivethread"
    );
    assert.strictEqual(
        document.querySelectorAll(`
            .o_Discuss_thread.o_ThreadView_messageList.o_MessageList_empty
        `).length,
        1,
        "shouldhaveemptythreadininbox"
    );
    assert.strictEqual(
        document.querySelector(`
            .o_Discuss_thread.o_ThreadView_messageList.o_MessageList_empty
        `).textContent.trim(),
        "Congratulations,yourinboxisempty Newmessagesappearhere."
    );

    awaitafterNextRender(()=>
        document.querySelector(`
            .o_DiscussSidebar_item[data-thread-local-id="${
                this.env.messaging.starred.localId
            }"]
        `).click()
    );
    assert.ok(
        document.querySelector(`
            .o_DiscussSidebar_item[data-thread-local-id="${
                this.env.messaging.starred.localId
            }"]
        `).classList.contains('o-active'),
        "starredmailboxshouldbeactivethread"
    );
    assert.strictEqual(
        document.querySelectorAll(`
            .o_Discuss_thread.o_ThreadView_messageList.o_MessageList_empty
        `).length,
        1,
        "shouldhaveemptythreadinstarred"
    );
    assert.strictEqual(
        document.querySelector(`
            .o_Discuss_thread.o_ThreadView_messageList.o_MessageList_empty
        `).textContent.trim(),
        "Nostarredmessages Youcanmarkanymessageas'starred',anditshowsupinthismailbox."
    );

    awaitafterNextRender(()=>
        document.querySelector(`
            .o_DiscussSidebar_item[data-thread-local-id="${
                this.env.messaging.history.localId
            }"]
        `).click()
    );
    assert.ok(
        document.querySelector(`
            .o_DiscussSidebar_item[data-thread-local-id="${
                this.env.messaging.history.localId
            }"]
        `).classList.contains('o-active'),
        "historymailboxshouldbeactivethread"
    );
    assert.strictEqual(
        document.querySelectorAll(`
            .o_Discuss_thread.o_ThreadView_messageList.o_MessageList_empty
        `).length,
        1,
        "shouldhaveemptythreadinstarred"
    );
    assert.strictEqual(
        document.querySelector(`.o_Discuss_thread.o_MessageList_empty`).textContent.trim(),
        "Nohistorymessages Messagesmarkedasreadwillappearinthehistory."
    );

    awaitafterNextRender(()=>
        document.querySelector(`
            .o_DiscussSidebar_item[data-thread-local-id="${
                this.env.models['mail.thread'].findFromIdentifyingData({
                    id:20,
                    model:'mail.channel',
                }).localId
            }"]
        `).click()
    );
    assert.ok(
        document.querySelector(`
            .o_DiscussSidebar_item[data-thread-local-id="${
                this.env.models['mail.thread'].findFromIdentifyingData({
                    id:20,
                    model:'mail.channel',
                }).localId
            }"]
        `).classList.contains('o-active'),
        "channel20shouldbeactivethread"
    );
    assert.strictEqual(
        document.querySelectorAll(`
            .o_Discuss_thread.o_ThreadView_messageList.o_MessageList_empty
        `).length,
        1,
        "shouldhaveemptythreadinstarred"
    );
    assert.strictEqual(
        document.querySelector(`
            .o_Discuss_thread.o_ThreadView_messageList.o_MessageList_empty
        `).textContent.trim(),
        "Therearenomessagesinthisconversation."
    );
});

QUnit.test('initiallyloadmessagesfrominbox',asyncfunction(assert){
    assert.expect(4);

    awaitthis.start({
        asyncmockRPC(route,args){
            if(args.method==='message_fetch'){
                assert.step('message_fetch');
                assert.strictEqual(
                    args.kwargs.limit,
                    30,
                    "shouldfetchupto30messages"
                );
                assert.deepEqual(
                    args.kwargs.domain,
                    [["needaction","=",true]],
                    "shouldfetchneedactionmessages"
                );
            }
            returnthis._super(...arguments);
        },
    });
    assert.verifySteps(['message_fetch']);
});

QUnit.test('defaultselectthreadindiscussparams',asyncfunction(assert){
    assert.expect(1);

    awaitthis.start({
        discuss:{
            params:{
                default_active_id:'mail.box_starred',
            },
        }
    });
    assert.ok(
        document.querySelector(`
            .o_DiscussSidebar_item[data-thread-local-id="${
                this.env.messaging.starred.localId
            }"]
            .o_DiscussSidebarItem_activeIndicator
        `).classList.contains('o-item-active'),
        "starredmailboxshouldbecomeactive"
    );
});

QUnit.test('auto-selectthreadindiscusscontext',asyncfunction(assert){
    assert.expect(1);

    awaitthis.start({
        discuss:{
            context:{
                active_id:'mail.box_starred',
            },
        },
    });
    assert.ok(
        document.querySelector(`
            .o_DiscussSidebar_item[data-thread-local-id="${
                this.env.messaging.starred.localId
            }"]
            .o_DiscussSidebarItem_activeIndicator
        `).classList.contains('o-item-active'),
        "starredmailboxshouldbecomeactive"
    );
});

QUnit.test('loadsinglemessagefromchannelinitially',asyncfunction(assert){
    assert.expect(7);

    //channelexpectedtoberendered,witharandomuniqueidthatwillbereferencedinthetest
    this.data['mail.channel'].records.push({id:20});
    this.data['mail.message'].records.push({
        body:"notempty",
        channel_ids:[20],
        date:"2019-04-2010:00:00",
        id:100,
        model:'mail.channel',
        res_id:20,
    });
    awaitthis.start({
        discuss:{
            params:{
                default_active_id:'mail.channel_20',
            },
        },
        asyncmockRPC(route,args){
            if(args.method==='message_fetch'){
                assert.strictEqual(
                    args.kwargs.limit,
                    30,
                    "shouldfetchupto30messages"
                );
                assert.deepEqual(
                    args.kwargs.domain,
                    [["channel_ids","in",[20]]],
                    "shouldfetchmessagesfromchannel"
                );
            }
            returnthis._super(...arguments);
        },
    });
    assert.strictEqual(
        document.querySelectorAll(`.o_Discuss_thread.o_ThreadView_messageList`).length,
        1,
        "shouldhavelistofmessages"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_Discuss_thread.o_MessageList_separatorDate`).length,
        1,
        "shouldhaveasingledateseparator"//tocheck:maybeclienttimezonedependent
    );
    assert.strictEqual(
        document.querySelector(`.o_Discuss_thread.o_MessageList_separatorLabelDate`).textContent,
        "April20,2019",
        "shoulddisplaydatedayofmessages"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_Discuss_thread.o_MessageList_message`).length,
        1,
        "shouldhaveasinglemessage"
    );
    assert.strictEqual(
        document.querySelectorAll(`
            .o_Discuss_thread
            .o_MessageList_message[data-message-local-id="${
                this.env.models['mail.message'].findFromIdentifyingData({id:100}).localId
            }"]
        `).length,
        1,
        "shouldhavemessagewithId100"
    );
});

QUnit.test('openchannelfromactive_idaschannelid',asyncfunction(assert){
    assert.expect(1);

    this.data['mail.channel'].records.push({id:20});
    awaitthis.start({
        discuss:{
            context:{
                active_id:20,
            },
        }
    });
    assert.containsOnce(
        document.body,
        `
            .o_Discuss_thread[data-thread-local-id="${
                this.env.models['mail.thread'].findFromIdentifyingData({id:20,model:'mail.channel'}).localId
            }"]
        `,
        "shouldhavechannelwithID20openinDiscusswhenprovidingactive_id20"
    );
});

QUnit.test('basicrenderingofmessage',asyncfunction(assert){
    //AKUTODO:shouldbeinmessage-onlytests
    assert.expect(13);

    //channelexpectedtoberendered,witharandomuniqueidthatwillbereferencedinthetest
    this.data['mail.channel'].records.push({id:20});
    //partnertobesetasauthor,witharandomuniqueidthatwillbeusedto
    //linkmessageandarandomnamethatwillbeassertedinthetest
    this.data['res.partner'].records.push({id:11,name:"Demo"});
    this.data['mail.message'].records.push({
        author_id:11,
        body:"<p>body</p>",
        channel_ids:[20],
        date:"2019-04-2010:00:00",
        id:100,
        model:'mail.channel',
        res_id:20,
    });
    awaitthis.start({
        discuss:{
            params:{
                default_active_id:'mail.channel_20',
            },
        },
    });
    constmessage=document.querySelector(`
        .o_Discuss_thread
        .o_ThreadView_messageList
        .o_MessageList_message[data-message-local-id="${
            this.env.models['mail.message'].findFromIdentifyingData({id:100}).localId
        }"]
    `);
    assert.strictEqual(
        message.querySelectorAll(`:scope.o_Message_sidebar`).length,
        1,
        "shouldhavemessagesidebarofmessage"
    );
    assert.strictEqual(
        message.querySelectorAll(`:scope.o_Message_authorAvatar`).length,
        1,
        "shouldhaveauthoravatarinsidebarofmessage"
    );
    assert.strictEqual(
        message.querySelector(`:scope.o_Message_authorAvatar`).dataset.src,
        "/web/image/res.partner/11/image_128",
        "shouldhaveurlofmessageinauthoravatarsidebar"
    );
    assert.strictEqual(
        message.querySelectorAll(`:scope.o_Message_core`).length,
        1,
        "shouldhavecorepartofmessage"
    );
    assert.strictEqual(
        message.querySelectorAll(`:scope.o_Message_header`).length,
        1,
        "shouldhaveheaderincorepartofmessage"
    );
    assert.strictEqual(
        message.querySelectorAll(`:scope.o_Message_authorName`).length,
        1,
        "shouldhaveauthornameinheaderofmessage"
    );
    assert.strictEqual(
        message.querySelector(`:scope.o_Message_authorName`).textContent,
        "Demo",
        "shouldhavetextuallyauthornameinheaderofmessage"
    );
    assert.strictEqual(
        message.querySelectorAll(`:scope.o_Message_header.o_Message_date`).length,
        1,
        "shouldhavedateinheaderofmessage"
    );
    assert.strictEqual(
        message.querySelectorAll(`:scope.o_Message_header.o_Message_commands`).length,
        1,
        "shouldhavecommandsinheaderofmessage"
    );
    assert.strictEqual(
        message.querySelectorAll(`:scope.o_Message_header.o_Message_command`).length,
        1,
        "shouldhaveasinglecommandinheaderofmessage"
    );
    assert.strictEqual(
        message.querySelectorAll(`:scope.o_Message_commandStar`).length,
        1,
        "shouldhavecommandtostarmessage"
    );
    assert.strictEqual(
        message.querySelectorAll(`:scope.o_Message_content`).length,
        1,
        "shouldhavecontentincorepartofmessage"
    );
    assert.strictEqual(
        message.querySelector(`:scope.o_Message_content`).textContent.trim(),
        "body",
        "shouldhavebodyofmessageincontentpartofmessage"
    );
});

QUnit.test('basicrenderingofsquashedmessage',asyncfunction(assert){
    //messagesaresquashedwhen"close",e.g.lessthan1minutehaselapsed
    //frommessagesofsameauthorandsamethread.Notethatthisshould
    //beworkinginnon-mailboxes
    //AKUTODO:shouldbemessageand/ormessagelist-onlytests
    assert.expect(12);

    //channelexpectedtoberendered,witharandomuniqueidthatwillbereferencedinthetest
    this.data['mail.channel'].records.push({id:20});
    //partnertobesetasauthor,witharandomuniqueidthatwillbeusedtolinkmessage
    this.data['res.partner'].records.push({id:11});
    this.data['mail.message'].records.push(
        {
            author_id:11,//mustbesameauthorasothermessage
            body:"<p>body1</p>",//randombody,setforconsistency
            channel_ids:[20],//tolinkmessagetochannel
            date:"2019-04-2010:00:00",//datemustbewithin1minfromothermessage
            id:100,//randomuniqueid,willbereferencedinthetest
            message_type:'comment',//mustbeasquash-abletype-
            model:'mail.channel',//tolinkmessagetochannel
            res_id:20,//idofrelatedchannel
        },
        {
            author_id:11,//mustbesameauthorasothermessage
            body:"<p>body2</p>",//randombody,willbeassertedinthetest
            channel_ids:[20],//tolinkmessagetochannel
            date:"2019-04-2010:00:30",//datemustbewithin1minfromothermessage
            id:101,//randomuniqueid,willbereferencedinthetest
            message_type:'comment',//mustbeasquash-abletype
            model:'mail.channel',//tolinkmessagetochannel
            res_id:20,//idofrelatedchannel
        }
    );
    awaitthis.start({
        discuss:{
            params:{
                default_active_id:'mail.channel_20',
            },
        },
    });
    assert.strictEqual(
        document.querySelectorAll(`
            .o_Discuss_thread.o_ThreadView_messageList.o_MessageList_message
        `).length,
        2,
        "shouldhave2messages"
    );
    constmessage1=document.querySelector(`
        .o_Discuss_thread
        .o_ThreadView_messageList
        .o_MessageList_message[data-message-local-id="${
            this.env.models['mail.message'].findFromIdentifyingData({id:100}).localId
        }"]
    `);
    constmessage2=document.querySelector(`
        .o_Discuss_thread
        .o_ThreadView_messageList
        .o_MessageList_message[data-message-local-id="${
            this.env.models['mail.message'].findFromIdentifyingData({id:101}).localId
        }"]
    `);
    assert.notOk(
        message1.classList.contains('o-squashed'),
        "message1shouldnotbesquashed"
    );
    assert.notOk(
        message1.querySelector(`:scope.o_Message_sidebar`).classList.contains('o-message-squashed'),
        "message1shouldnothavesquashedsidebar"
    );
    assert.ok(
        message2.classList.contains('o-squashed'),
        "message2shouldbesquashed"
    );
    assert.ok(
        message2.querySelector(`:scope.o_Message_sidebar`).classList.contains('o-message-squashed'),
        "message2shouldhavesquashedsidebar"
    );
    assert.strictEqual(
        message2.querySelectorAll(`:scope.o_Message_sidebar.o_Message_date`).length,
        1,
        "message2shouldhavedateinsidebar"
    );
    assert.strictEqual(
        message2.querySelectorAll(`:scope.o_Message_sidebar.o_Message_commands`).length,
        1,
        "message2shouldhavesomecommandsinsidebar"
    );
    assert.strictEqual(
        message2.querySelectorAll(`:scope.o_Message_sidebar.o_Message_commandStar`).length,
        1,
        "message2shouldhavestarcommandinsidebar"
    );
    assert.strictEqual(
        message2.querySelectorAll(`:scope.o_Message_core`).length,
        1,
        "message2shouldhavecorepart"
    );
    assert.strictEqual(
        message2.querySelectorAll(`:scope.o_Message_header`).length,
        0,
        "message2shouldhaveaheaderincorepart"
    );
    assert.strictEqual(
        message2.querySelectorAll(`:scope.o_Message_content`).length,
        1,
        "message2shouldhavesomecontentincorepart"
    );
    assert.strictEqual(
        message2.querySelector(`:scope.o_Message_content`).textContent.trim(),
        "body2",
        "message2shouldhavebodyincontentpart"
    );
});

QUnit.test('inboxmessagesareneversquashed',asyncfunction(assert){
    assert.expect(3);

    //partnertobesetasauthor,witharandomuniqueidthatwillbeusedtolinkmessage
    this.data['res.partner'].records.push({id:11});
    this.data['mail.message'].records.push(
        {
            author_id:11,//mustbesameauthorasothermessage
            body:"<p>body1</p>",//randombody,setforconsistency
            channel_ids:[20],//tolinkmessagetochannel
            date:"2019-04-2010:00:00",//datemustbewithin1minfromothermessage
            id:100,//randomuniqueid,willbereferencedinthetest
            message_type:'comment',//mustbeasquash-abletype-
            model:'mail.channel',//tolinkmessagetochannel
            needaction:true,//necessaryformessage_fetchdomain
            needaction_partner_ids:[this.data.currentPartnerId],//forconsistency
            res_id:20,//idofrelatedchannel
        },
        {
            author_id:11,//mustbesameauthorasothermessage
            body:"<p>body2</p>",//randombody,willbeassertedinthetest
            channel_ids:[20],//tolinkmessagetochannel
            date:"2019-04-2010:00:30",//datemustbewithin1minfromothermessage
            id:101,//randomuniqueid,willbereferencedinthetest
            message_type:'comment',//mustbeasquash-abletype
            model:'mail.channel',//tolinkmessagetochannel
            needaction:true,//necessaryformessage_fetchdomain
            needaction_partner_ids:[this.data.currentPartnerId],//forconsistency
            res_id:20,//idofrelatedchannel
        }
    );
    awaitthis.start();
    assert.strictEqual(
        document.querySelectorAll(`
            .o_Discuss_thread.o_ThreadView_messageList.o_MessageList_message
        `).length,
        2,
        "shouldhave2messages"
    );
    constmessage1=document.querySelector(`
        .o_Discuss_thread
        .o_ThreadView_messageList
        .o_MessageList_message[data-message-local-id="${
            this.env.models['mail.message'].findFromIdentifyingData({id:100}).localId
        }"]
    `);
    constmessage2=document.querySelector(`
        .o_Discuss_thread
        .o_ThreadView_messageList
        .o_MessageList_message[data-message-local-id="${
            this.env.models['mail.message'].findFromIdentifyingData({id:101}).localId
        }"]
    `);
    assert.notOk(
        message1.classList.contains('o-squashed'),
        "message1shouldnotbesquashed"
    );
    assert.notOk(
        message2.classList.contains('o-squashed'),
        "message2shouldnotbesquashed"
    );
});

QUnit.test('loadallmessagesfromchannelinitially,lessthanfetchlimit(29<30)',asyncfunction(assert){
    //AKUTODO:threadspecifictest
    assert.expect(5);

    //channelexpectedtoberendered,witharandomuniqueidthatwillbereferencedinthetest
    this.data['mail.channel'].records.push({id:20});
    //partnertobesetasauthor,witharandomuniqueidthatwillbeusedtolinkmessage
    this.data['res.partner'].records.push({id:11});
    for(leti=28;i>=0;i--){
        this.data['mail.message'].records.push({
            body:"notempty",
            channel_ids:[20],
            date:"2019-04-2010:00:00",
            model:'mail.channel',
            res_id:20,
        });
    }
    awaitthis.start({
        discuss:{
            params:{
                default_active_id:'mail.channel_20',
            },
        },
        asyncmockRPC(route,args){
            if(args.method==='message_fetch'){
                assert.strictEqual(args.kwargs.limit,30,"shouldfetchupto30messages");
            }
            returnthis._super(...arguments);
        },
    });
    assert.strictEqual(
        document.querySelectorAll(`
            .o_Discuss_thread.o_ThreadView_messageList.o_MessageList_separatorDate
        `).length,
        1,
        "shouldhaveasingledateseparator"//tocheck:maybeclienttimezonedependent
    );
    assert.strictEqual(
        document.querySelector(`
            .o_Discuss_thread.o_ThreadView_messageList.o_MessageList_separatorLabelDate
        `).textContent,
        "April20,2019",
        "shoulddisplaydatedayofmessages"
    );
    assert.strictEqual(
        document.querySelectorAll(`
            .o_Discuss_thread.o_ThreadView_messageList.o_MessageList_message
        `).length,
        29,
        "shouldhave29messages"
    );
    assert.strictEqual(
        document.querySelectorAll(`
            .o_Discuss_thread.o_ThreadView_messageList.o_MessageList_loadMore
        `).length,
        0,
        "shouldnothaveloadmorelink"
    );
});

QUnit.test('loadmoremessagesfromchannel',asyncfunction(assert){
    //AKU:threadspecifictest
    assert.expect(6);

    //channelexpectedtoberendered,witharandomuniqueidthatwillbereferencedinthetest
    this.data['mail.channel'].records.push({id:20});
    //partnertobesetasauthor,witharandomuniqueidthatwillbeusedtolinkmessage
    this.data['res.partner'].records.push({id:11});
    for(leti=0;i<40;i++){
        this.data['mail.message'].records.push({
            body:"notempty",
            channel_ids:[20],
            date:"2019-04-2010:00:00",
            model:'mail.channel',
            res_id:20,
        });
    }
    awaitthis.start({
        discuss:{
            params:{
                default_active_id:'mail.channel_20',
            },
        },
    });
    assert.strictEqual(
        document.querySelectorAll(`
            .o_Discuss_thread.o_ThreadView_messageList.o_MessageList_separatorDate
        `).length,
        1,
        "shouldhaveasingledateseparator"//tocheck:maybeclienttimezonedependent
    );
    assert.strictEqual(
        document.querySelector(`
            .o_Discuss_thread.o_ThreadView_messageList.o_MessageList_separatorLabelDate
        `).textContent,
        "April20,2019",
        "shoulddisplaydatedayofmessages"
    );
    assert.strictEqual(
        document.querySelectorAll(`
            .o_Discuss_thread.o_ThreadView_messageList.o_MessageList_message
        `).length,
        30,
        "shouldhave30messages"
    );
    assert.strictEqual(
        document.querySelectorAll(`
            .o_Discuss_thread.o_ThreadView_messageList.o_MessageList_loadMore
        `).length,
        1,
        "shouldhaveloadmorelink"
    );

    awaitafterNextRender(()=>
        document.querySelector(`
            .o_Discuss_thread.o_ThreadView_messageList.o_MessageList_loadMore
        `).click()
    );
    assert.strictEqual(
        document.querySelectorAll(`
            .o_Discuss_thread.o_ThreadView_messageList.o_MessageList_message
        `).length,
        40,
        "shouldhave40messages"
    );
    assert.strictEqual(
        document.querySelectorAll(`
            .o_Discuss_thread.o_ThreadView_messageList.o_MessageList_loadMore
        `).length,
        0,
        "shouldnotlongerhaveloadmorelink(allmessagesloaded)"
    );
});

QUnit.test('auto-scrolltobottomofthread',asyncfunction(assert){
    //AKUTODO:threadspecifictest
    assert.expect(2);

    //channelexpectedtoberendered,witharandomuniqueidthatwillbereferencedinthetest
    this.data['mail.channel'].records.push({id:20});
    for(leti=1;i<=25;i++){
        this.data['mail.message'].records.push({
            body:"notempty",
            channel_ids:[20],
            model:'mail.channel',
            res_id:20,
        });
    }
    awaitthis.start({
        discuss:{
            params:{
                default_active_id:'mail.channel_20',
            },
        },
        waitUntilEvent:{
            eventName:'o-component-message-list-scrolled',
            message:"shouldwaituntilchannel20scrolledtoitslastmessageinitially",
            predicate:({scrollTop,thread})=>{
                constmessageList=document.querySelector('.o_ThreadView_messageList');
                return(
                    thread&&
                    thread.model==='mail.channel'&&
                    thread.id===20&&
                    isScrolledToBottom(messageList)
                );
            },
        },
    });
    assert.strictEqual(
        document.querySelectorAll(`
            .o_Discuss_thread.o_ThreadView_messageList.o_MessageList_message
        `).length,
        25,
        "shouldhave25messages"
    );
    constmessageList=document.querySelector(`.o_Discuss_thread.o_ThreadView_messageList`);
    assert.ok(
        isScrolledToBottom(messageList),
        "shouldhavescrolledtobottomofthread"
    );
});

QUnit.test('loadmoremessagesfromchannel(auto-loadonscroll)',asyncfunction(assert){
    //AKUTODO:threadspecifictest
    assert.expect(3);

    this.data['mail.channel'].records.push({id:20});
    for(leti=0;i<40;i++){
        this.data['mail.message'].records.push({
            body:"notempty",
            channel_ids:[20],
            model:'mail.channel',
            res_id:20,
        });
    }
    awaitthis.start({
        discuss:{
            params:{
                default_active_id:'mail.channel_20',
            },
        },
        waitUntilEvent:{
            eventName:'o-component-message-list-scrolled',
            message:"shouldwaituntilchannel20scrolledtoitslastmessageinitially",
            predicate:({scrollTop,thread})=>{
                constmessageList=document.querySelector(`.o_Discuss_thread.o_ThreadView_messageList`);
                return(
                    thread&&
                    thread.model==='mail.channel'&&
                    thread.id===20&&
                    isScrolledToBottom(messageList)
                );
            },
        },
    });
    assert.strictEqual(
        document.querySelectorAll(`
            .o_Discuss_thread.o_ThreadView_messageList.o_MessageList_message
        `).length,
        30,
        "shouldhave30messages"
    );

    awaitthis.afterEvent({
        eventName:'o-thread-view-hint-processed',
        func:()=>document.querySelector('.o_ThreadView_messageList').scrollTop=0,
        message:"shouldwaituntilchannel20loadedmoremessagesafterscrollingtotop",
        predicate:({hint,threadViewer})=>{
            return(
                hint.type==='more-messages-loaded'&&
                threadViewer.thread.model==='mail.channel'&&
                threadViewer.thread.id===20
            );
        },
    });
    assert.strictEqual(
        document.querySelectorAll(`
            .o_Discuss_thread.o_ThreadView_messageList.o_MessageList_message
        `).length,
        40,
        "shouldhave40messages"
    );
    assert.strictEqual(
        document.querySelectorAll(`
            .o_Dsiscuss_thread.o_ThreadView_messageList.o_MessageList_loadMore
        `).length,
        0,
        "shouldnotlongerhaveloadmorelink(allmessagesloaded)"
    );
});

QUnit.test('newmessagesseparator[REQUIREFOCUS]',asyncfunction(assert){
    //thistestrequiresseveralmessagessothatthelastmessageisnot
    //visible.Thisisnecessaryinordertodisplay'newmessages'andnot
    //removefromDOMrightawayfromseeinglastmessage.
    //AKUTODO:threadspecifictest
    assert.expect(6);

    //Neededpartner&usertoallowsimulationofmessagereception
    this.data['res.partner'].records.push({
        id:11,
        name:"Foreignerpartner",
    });
    this.data['res.users'].records.push({
        id:42,
        name:"Foreigneruser",
        partner_id:11,
    });
    //channelexpectedtoberendered,witharandomuniqueidthatwillbe
    //referencedinthetestandtheseen_message_idvaluesettolastmessage
    this.data['mail.channel'].records.push({
        id:20,
        seen_message_id:125,
        uuid:'randomuuid',
    });
    for(leti=1;i<=25;i++){
        this.data['mail.message'].records.push({
            body:"notempty",
            channel_ids:[20],
            id:100+i,//forsettingpropervalueforseen_message_id
            model:'mail.channel',
            res_id:20,
        });
    }
    awaitthis.start({
        discuss:{
            params:{
                default_active_id:'mail.channel_20',
            },
        },
        waitUntilEvent:{
            eventName:'o-component-message-list-scrolled',
            message:"shouldwaituntilchannel20scrolledtoitslastmessageinitially",
            predicate:({scrollTop,thread})=>{
                constmessageList=document.querySelector(`.o_Discuss_thread.o_ThreadView_messageList`);
                return(
                    thread&&
                    thread.model==='mail.channel'&&
                    thread.id===20&&
                    isScrolledToBottom(messageList)
                );
            },
        },
    });
    assert.containsN(
        document.body,
        '.o_MessageList_message',
        25,
        "shouldhave25messages"
    );
    assert.containsNone(
        document.body,
        '.o_MessageList_separatorNewMessages',
        "shouldnotdisplay'newmessages'separator"
    );
    //scrolltotop
    awaitthis.afterEvent({
        eventName:'o-component-message-list-scrolled',
        func:()=>{
            document.querySelector(`.o_Discuss_thread.o_ThreadView_messageList`).scrollTop=0;
        },
        message:"shouldwaituntilchannelscrolledtotop",
        predicate:({scrollTop,thread})=>{
            return(
                thread&&
                thread.model==='mail.channel'&&
                thread.id===20&&
                scrollTop===0
            );
        },
    });
    //composerisfocusedbydefault,weremovethatfocus
    document.querySelector('.o_ComposerTextInput_textarea').blur();
    //simulatereceivingamessage
    awaitafterNextRender(async()=>this.env.services.rpc({
        route:'/mail/chat_post',
        params:{
            context:{
                mockedUserId:42,
            },
            message_content:"hu",
            uuid:'randomuuid',
        },
    }));

    assert.containsN(
        document.body,
        '.o_MessageList_message',
        26,
        "shouldhave26messages"
    );
    assert.containsOnce(
        document.body,
        '.o_MessageList_separatorNewMessages',
        "shoulddisplay'newmessages'separator"
    );
    awaitthis.afterEvent({
        eventName:'o-component-message-list-scrolled',
        func:()=>{
            constmessageList=document.querySelector(`.o_Discuss_thread.o_ThreadView_messageList`);
            messageList.scrollTop=messageList.scrollHeight-messageList.clientHeight;
        },
        message:"shouldwaituntilchannelscrolledtobottom",
        predicate:({scrollTop,thread})=>{
            constmessageList=document.querySelector(`.o_Discuss_thread.o_ThreadView_messageList`);
            return(
                thread&&
                thread.model==='mail.channel'&&
                thread.id===20&&
                isScrolledToBottom(messageList)
            );
        },
    });
    assert.containsOnce(
        document.body,
        '.o_MessageList_separatorNewMessages',
        "shouldstilldisplay'newmessages'separatorascomposerisnotfocused"
    );

    awaitafterNextRender(()=>
        document.querySelector('.o_ComposerTextInput_textarea').focus()
    );
    assert.containsNone(
        document.body,
        '.o_MessageList_separatorNewMessages',
        "shouldnolongerdisplay'newmessages'separator(messageseen)"
    );
});

QUnit.test('restorethreadscrollposition',asyncfunction(assert){
    assert.expect(6);
    //channelsexpectedtoberendered,withrandomuniqueidthatwillbereferencedinthetest
    this.data['mail.channel'].records.push(
        {
            id:11,
        },
        {
            id:12,
        },
    );
    for(leti=1;i<=25;i++){
        this.data['mail.message'].records.push({
            body:"notempty",
            channel_ids:[11],
            model:'mail.channel',
            res_id:11,
        });
    }
    for(leti=1;i<=24;i++){
        this.data['mail.message'].records.push({
            body:"notempty",
            channel_ids:[12],
            model:'mail.channel',
            res_id:12,
        });
    }
    awaitthis.start({
        discuss:{
            params:{
                default_active_id:'mail.channel_11',
            },
        },
        waitUntilEvent:{
            eventName:'o-component-message-list-scrolled',
            message:"shouldwaituntilchannel11scrolledtoitslastmessage",
            predicate:({thread})=>{
                returnthread&&thread.model==='mail.channel'&&thread.id===11;
            },
        },
    });
    assert.strictEqual(
        document.querySelectorAll(`
            .o_Discuss_thread.o_ThreadView_messageList.o_MessageList_message
        `).length,
        25,
        "shouldhave25messagesinchannel11"
    );
    constinitialMessageList=document.querySelector(`
        .o_Discuss_thread
        .o_ThreadView_messageList
    `);
    assert.ok(
        isScrolledToBottom(initialMessageList),
        "shouldhavescrolledtobottomofchannel11initially"
    );

    awaitthis.afterEvent({
        eventName:'o-component-message-list-scrolled',
        func:()=>document.querySelector(`.o_Discuss_thread.o_ThreadView_messageList`).scrollTop=0,
        message:"shouldwaituntilchannel11changeditsscrollpositiontotop",
        predicate:({thread})=>{
            returnthread&&thread.model==='mail.channel'&&thread.id===11;
        },
    });
    assert.strictEqual(
        document.querySelector(`.o_Discuss_thread.o_ThreadView_messageList`).scrollTop,
        0,
        "shouldhavescrolledtotopofchannel11",
    );

    //EnsurescrollIntoViewofchannel12hasenoughtimetocompletebefore
    //goingbacktochannel11.AwaitisneededtopreventthescrollIntoView
    //initiallyplannedforchannel12toactuallyapplyonchannel11.
    //task-2333535
    awaitthis.afterEvent({
        eventName:'o-component-message-list-scrolled',
        func:()=>{
            //selectchannel12
            document.querySelector(`
                .o_DiscussSidebar_groupChannel
                .o_DiscussSidebar_item[data-thread-local-id="${
                    this.env.models['mail.thread'].findFromIdentifyingData({
                        id:12,
                        model:'mail.channel',
                    }).localId
                }"]
            `).click();
        },
        message:"shouldwaituntilchannel12scrolledtoitslastmessage",
        predicate:({scrollTop,thread})=>{
            constmessageList=document.querySelector('.o_ThreadView_messageList');
            return(
                thread&&
                thread.model==='mail.channel'&&
                thread.id===12&&
                isScrolledToBottom(messageList)
            );
        },
    });
    assert.strictEqual(
        document.querySelectorAll(`
            .o_Discuss_thread.o_ThreadView_messageList.o_MessageList_message
        `).length,
        24,
        "shouldhave24messagesinchannel12"
    );

    awaitthis.afterEvent({
        eventName:'o-component-message-list-scrolled',
        func:()=>{
            //selectchannel11
            document.querySelector(`
                .o_DiscussSidebar_groupChannel
                .o_DiscussSidebar_item[data-thread-local-id="${
                    this.env.models['mail.thread'].findFromIdentifyingData({
                        id:11,
                        model:'mail.channel',
                    }).localId
                }"]
            `).click();
        },
        message:"shouldwaituntilchannel11restoreditsscrollposition",
        predicate:({scrollTop,thread})=>{
            return(
                thread&&
                thread.model==='mail.channel'&&
                thread.id===11&&
                scrollTop===0
            );
        },
    });
    assert.strictEqual(
        document.querySelector(`.o_Discuss_thread.o_ThreadView_messageList`).scrollTop,
        0,
        "shouldhaverecoveredscrollpositionofchannel11(scrolltotop)"
    );

    awaitthis.afterEvent({
        eventName:'o-component-message-list-scrolled',
        func:()=>{
            //selectchannel12
            document.querySelector(`
                .o_DiscussSidebar_groupChannel
                .o_DiscussSidebar_item[data-thread-local-id="${
                    this.env.models['mail.thread'].findFromIdentifyingData({
                        id:12,
                        model:'mail.channel',
                    }).localId
                }"]
            `).click();
        },
        message:"shouldwaituntilchannel12recovereditsscrollposition(tobottom)",
        predicate:({scrollTop,thread})=>{
            constmessageList=document.querySelector('.o_ThreadView_messageList');
            return(
                thread&&
                thread.model==='mail.channel'&&
                thread.id===12&&
                isScrolledToBottom(messageList)
            );
        },
    });
    constmessageList=document.querySelector('.o_ThreadView_messageList');
    assert.ok(
        isScrolledToBottom(messageList),
        "shouldhaverecoveredscrollpositionofchannel12(scrolltobottom)"
    );
});

QUnit.test('messageoriginredirecttochannel',asyncfunction(assert){
    assert.expect(15);

    //channelsexpectedtoberendered,withrandomuniqueidthatwillbereferencedinthetest
    this.data['mail.channel'].records.push({id:11},{id:12});
    this.data['mail.message'].records.push(
        {
            body:"notempty",
            channel_ids:[11,12],
            id:100,
            model:'mail.channel',
            record_name:"channel11",
            res_id:11,
        },
        {
            body:"notempty",
            channel_ids:[11,12],
            id:101,
            model:'mail.channel',
            record_name:"channel12",
            res_id:12,
        }
    );
    awaitthis.start({
        discuss:{
            params:{
                default_active_id:'mail.channel_11',
            },
        },
    });
    assert.strictEqual(
        document.querySelectorAll('.o_Discuss_thread.o_Message').length,
        2,
        "shouldhave2messages"
    );
    assert.strictEqual(
        document.querySelectorAll(`
            .o_Discuss_thread
            .o_Message[data-message-local-id="${
                this.env.models['mail.message'].findFromIdentifyingData({id:100}).localId
            }"]
        `).length,
        1,
        "shouldhavemessage1(Id100)"
    );
    assert.strictEqual(
        document.querySelectorAll(`
            .o_Discuss_thread
            .o_Message[data-message-local-id="${
                this.env.models['mail.message'].findFromIdentifyingData({id:101}).localId
            }"]
        `).length,
        1,
        "shouldhavemessage2(Id101)"
    );
    assert.strictEqual(
        document.querySelectorAll(`
            .o_Discuss_thread
            .o_Message[data-message-local-id="${
                this.env.models['mail.message'].findFromIdentifyingData({id:100}).localId
            }"]
            .o_Message_originThread
        `).length,
        0,
        "message1shouldnothaveoriginpartinchannel11(sameoriginaschannel)"
    );
    assert.strictEqual(
        document.querySelectorAll(`
            .o_Discuss_thread
            .o_Message[data-message-local-id="${
                this.env.models['mail.message'].findFromIdentifyingData({id:101}).localId
            }"]
            .o_Message_originThread
        `).length,
        1,
        "message2shouldhaveoriginpart(originischannel12!==channel11)"
    );
    assert.strictEqual(
        document.querySelector(`
            .o_Discuss_thread
            .o_Message[data-message-local-id="${
                this.env.models['mail.message'].findFromIdentifyingData({id:101}).localId
            }"]
            .o_Message_originThread
        `).textContent.trim(),
        "(from#channel12)",
        "message2shoulddisplaynameoforiginchannel"
    );
    assert.strictEqual(
        document.querySelectorAll(`
            .o_Discuss_thread
            .o_Message[data-message-local-id="${
                this.env.models['mail.message'].findFromIdentifyingData({id:101}).localId
            }"]
            .o_Message_originThreadLink
        `).length,
        1,
        "message2shouldhavelinktoredirecttoorigin"
    );

    //clickonoriginlinkofmessage2(=channel12)
    awaitafterNextRender(()=>
        document.querySelector(`
            .o_Discuss_thread
            .o_Message[data-message-local-id="${
                this.env.models['mail.message'].findFromIdentifyingData({id:101}).localId
            }"]
            .o_Message_originThreadLink
        `).click()
    );
    assert.ok(
        document.querySelector(`
            .o_DiscussSidebar_groupChannel
            .o_DiscussSidebar_item[data-thread-local-id="${
                this.env.models['mail.thread'].findFromIdentifyingData({
                    id:12,
                    model:'mail.channel',
                }).localId
            }"]
            .o_DiscussSidebarItem_activeIndicator
        `).classList.contains('o-item-active'),
        "channel12shouldbeactivechannelonredirectfromdiscussapp"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_Discuss_thread.o_Message`).length,
        2,
        "shouldhave2messages"
    );
    assert.strictEqual(
        document.querySelectorAll(`
            .o_Discuss_thread
            .o_Message[data-message-local-id="${
                this.env.models['mail.message'].findFromIdentifyingData({id:100}).localId
            }"]
        `).length,
        1,
        "shouldhavemessage1(Id100)"
    );
    assert.strictEqual(
        document.querySelectorAll(`
            .o_Discuss_thread
            .o_Message[data-message-local-id="${
                this.env.models['mail.message'].findFromIdentifyingData({id:101}).localId
            }"]
        `).length,
        1,
        "shouldhavemessage2(Id101)"
    );
    assert.strictEqual(
        document.querySelectorAll(`
            .o_Discuss_thread
            .o_Message[data-message-local-id="${
                this.env.models['mail.message'].findFromIdentifyingData({id:100}).localId
            }"]
            .o_Message_originThread
        `).length,
        1,
        "message1shouldhaveoriginthreadpart(=channel11!==channel12)"
    );
    assert.strictEqual(
        document.querySelectorAll(`
            .o_Discuss_thread
            .o_Message[data-message-local-id="${
                this.env.models['mail.message'].findFromIdentifyingData({id:101}).localId
            }"]
            .o_Message_originThread
        `).length,
        0,
        "message2shouldnothaveoriginthreadpartinchannel12(sameascurrentchannel)"
    );
    assert.strictEqual(
        document.querySelector(`
            .o_Discuss_thread
            .o_Message[data-message-local-id="${
                this.env.models['mail.message'].findFromIdentifyingData({id:100}).localId
            }"]
            .o_Message_originThread
        `).textContent.trim(),
        "(from#channel11)",
        "message1shoulddisplaynameoforiginchannel"
    );
    assert.strictEqual(
        document.querySelectorAll(`
            .o_Discuss_thread
            .o_Message[data-message-local-id="${
                this.env.models['mail.message'].findFromIdentifyingData({id:100}).localId
            }"]
            .o_Message_originThreadLink
        `).length,
        1,
        "message1shouldhavelinktoredirecttooriginchannel"
    );
});

QUnit.test('redirecttoauthor(openchat)',asyncfunction(assert){
    assert.expect(7);

    //expectedcorrespondent,witharandomuniqueidthatwillbeusedtolink
    //partnertochatandarandomnamethatwillbeassertedinthetest
    this.data['res.partner'].records.push({id:7,name:"Demo"});
    this.data['res.users'].records.push({partner_id:7});
    this.data['mail.channel'].records.push(
        //channelexpectedtobefoundinthesidebar
        {
            id:1,//randomuniqueid,willbereferencedinthetest
            name:"General",//randomname,willbeassertedinthetest
        },
        //chatexpectedtobefoundinthesidebar
        {
            channel_type:'chat',//testingachatisthegoalofthetest
            id:10,//randomuniqueid,willbereferencedinthetest
            members:[this.data.currentPartnerId,7],//expectedpartners
            public:'private',//expectedvaluefortestingachat
        }
    );
    this.data['mail.message'].records.push(
        {
            author_id:7,
            body:"notempty",
            channel_ids:[1],
            id:100,
            model:'mail.channel',
            res_id:1,
        }
    );
    awaitthis.start({
        discuss:{
            params:{
                default_active_id:'mail.channel_1',
            },
        },
    });
    assert.ok(
        document.querySelector(`
            .o_DiscussSidebar_groupChannel
            .o_DiscussSidebar_item[data-thread-local-id="${
                this.env.models['mail.thread'].findFromIdentifyingData({
                    id:1,
                    model:'mail.channel',
                }).localId
            }"]
            .o_DiscussSidebarItem_activeIndicator
        `).classList.contains('o-item-active'),
        "channel'General'shouldbeactive"
    );
    assert.notOk(
        document.querySelector(`
            .o_DiscussSidebar_groupChat
            .o_DiscussSidebar_item[data-thread-local-id="${
                this.env.models['mail.thread'].findFromIdentifyingData({
                    id:10,
                    model:'mail.channel',
                }).localId
            }"]
            .o_DiscussSidebarItem_activeIndicator
        `).classList.contains('o-item-active'),
        "Chat'Demo'shouldnotbeactive"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_Discuss_thread.o_Message`).length,
        1,
        "shouldhave1message"
    );
    constmsg1=document.querySelector(`
        .o_Discuss_thread
        .o_Message[data-message-local-id="${
            this.env.models['mail.message'].findFromIdentifyingData({id:100}).localId
        }"]
    `);
    assert.strictEqual(
        msg1.querySelectorAll(`:scope.o_Message_authorAvatar`).length,
        1,
        "message1shouldhaveauthorimage"
    );
    assert.ok(
        msg1.querySelector(`:scope.o_Message_authorAvatar`).classList.contains('o_redirect'),
        "message1shouldhaveredirecttoauthor"
    );

    awaitafterNextRender(()=>
        msg1.querySelector(`:scope.o_Message_authorAvatar`).click()
    );
    assert.notOk(
        document.querySelector(`
            .o_DiscussSidebar_groupChannel
            .o_DiscussSidebar_item[data-thread-local-id="${
                this.env.models['mail.thread'].findFromIdentifyingData({
                    id:1,
                    model:'mail.channel',
                }).localId
            }"]
            .o_DiscussSidebarItem_activeIndicator
        `).classList.contains('o-item-active'),
        "channel'General'shouldbecomeinactiveafterauthorredirection"
    );
    assert.ok(
        document.querySelector(`
            .o_DiscussSidebar_groupChat
            .o_DiscussSidebar_item[data-thread-local-id="${
                this.env.models['mail.thread'].findFromIdentifyingData({
                    id:10,
                    model:'mail.channel',
                }).localId
            }"]
            .o_DiscussSidebarItem_activeIndicator
        `).classList.contains('o-item-active'),
        "chat'Demo'shouldbecomeactiveafterauthorredirection"
    );
});

QUnit.test('sidebarquicksearch',asyncfunction(assert){
    //featureenablesat20ormorechannels
    assert.expect(6);

    for(letid=1;id<=20;id++){
        this.data['mail.channel'].records.push({id,name:`channel${id}`});
    }
    awaitthis.start();
    assert.strictEqual(
        document.querySelectorAll(`.o_DiscussSidebar_groupChannel.o_DiscussSidebar_item`).length,
        20,
        "shouldhave20channelitems"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_Discuss_sidebarinput.o_DiscussSidebar_quickSearch`).length,
        1,
        "shouldhavequicksearchinsidebar"
    );

    constquickSearch=document.querySelector(`
        .o_Discuss_sidebarinput.o_DiscussSidebar_quickSearch
    `);
    awaitafterNextRender(()=>{
        quickSearch.value="1";
        constkevt1=newwindow.KeyboardEvent('input');
        quickSearch.dispatchEvent(kevt1);
    });
    assert.strictEqual(
        document.querySelectorAll(`.o_DiscussSidebar_groupChannel.o_DiscussSidebar_item`).length,
        11,
        "shouldhavefilteredto11channelitems"
    );

    awaitafterNextRender(()=>{
        quickSearch.value="12";
        constkevt2=newwindow.KeyboardEvent('input');
        quickSearch.dispatchEvent(kevt2);
    });
    assert.strictEqual(
        document.querySelectorAll(`.o_DiscussSidebar_groupChannel.o_DiscussSidebar_item`).length,
        1,
        "shouldhavefilteredtoasinglechannelitem"
    );
    assert.strictEqual(
        document.querySelector(`
            .o_DiscussSidebar_groupChannel.o_DiscussSidebar_item
        `).dataset.threadLocalId,
        this.env.models['mail.thread'].findFromIdentifyingData({
            id:12,
            model:'mail.channel',
        }).localId,
        "shouldhavefilteredtoasinglechannelitemwithId12"
    );

    awaitafterNextRender(()=>{
        quickSearch.value="123";
        constkevt3=newwindow.KeyboardEvent('input');
        quickSearch.dispatchEvent(kevt3);
    });
    assert.strictEqual(
        document.querySelectorAll(`.o_DiscussSidebar_groupChannel.o_DiscussSidebar_item`).length,
        0,
        "shouldhavefilteredtonochannelitem"
    );
});

QUnit.test('basiccontrolpanelrendering',asyncfunction(assert){
    assert.expect(8);

    //channelexpectedtobefoundinthesidebar
    //witharandomuniqueidandnamethatwillbereferencedinthetest
    this.data['mail.channel'].records.push({id:20,name:"General"});
    awaitthis.start();
    assert.strictEqual(
        document.querySelector(`
            .o_widget_Discuss.o_control_panel.breadcrumb
        `).textContent,
        "Inbox",
        "displayinboxinthebreadcrumb"
    );
    constmarkAllReadButton=document.querySelector(`.o_widget_Discuss_controlPanelButtonMarkAllRead`);
    assert.isVisible(
        markAllReadButton,
        "shouldhavevisiblebutton'Markallread'inthecontrolpanelofinbox"
    );
    assert.ok(
        markAllReadButton.disabled,
        "shouldhavedisabledbutton'Markallread'inthecontrolpanelofinbox(nomessages)"
    );

    awaitafterNextRender(()=>
        document.querySelector(`
            .o_DiscussSidebar_item[data-thread-local-id="${
                this.env.messaging.starred.localId
            }"]
        `).click()
    );
    assert.strictEqual(
        document.querySelector(`
            .o_widget_Discuss.o_control_panel.breadcrumb
        `).textContent,
        "Starred",
        "displaystarredinthebreadcrumb"
    );
    constunstarAllButton=document.querySelector(`.o_widget_Discuss_controlPanelButtonUnstarAll`);
    assert.isVisible(
        unstarAllButton,
        "shouldhavevisiblebutton'Unstarall'inthecontrolpanelofstarred"
    );
    assert.ok(
        unstarAllButton.disabled,
        "shouldhavedisabledbutton'Unstarall'inthecontrolpanelofstarred(nomessages)"
    );

    awaitafterNextRender(()=>
        document.querySelector(`
            .o_DiscussSidebar_item[data-thread-local-id="${
                this.env.models['mail.thread'].findFromIdentifyingData({
                    id:20,
                    model:'mail.channel',
                }).localId
            }"]
        `).click()
    );
    assert.strictEqual(
        document.querySelector(`
            .o_widget_Discuss.o_control_panel.breadcrumb
        `).textContent,
        "#General",
        "displaygeneralinthebreadcrumb"
    );
    constinviteButton=document.querySelector(`.o_widget_Discuss_controlPanelButtonInvite`);
    assert.isVisible(
        inviteButton,
        "shouldhavevisiblebutton'Invite'inthecontrolpanelofchannel"
    );
});

QUnit.test('inbox:markallmessagesasread',asyncfunction(assert){
    assert.expect(8);

    //channelexpectedtobefoundinthesidebar,
    //witharandomuniqueidthatwillbereferencedinthetest
    this.data['mail.channel'].records.push({id:20});
    this.data['mail.message'].records.push(
        //firstexpectedmessage
        {
            body:"notempty",
            channel_ids:[20],//linkmessagetochannel
            id:100,//randomuniqueid,usefultolinknotification
            model:'mail.channel',
            //needactionneedstobesethereformessage_fetchdomain,because
            //mockedmodelsdon'thavecomputedfields
            needaction:true,
            res_id:20,
        },
        //secondexpectedmessage
        {
            body:"notempty",
            channel_ids:[20],//linkmessagetochannel
            id:101,//randomuniqueid,usefultolinknotification
            model:'mail.channel',
            //needactionneedstobesethereformessage_fetchdomain,because
            //mockedmodelsdon'thavecomputedfields
            needaction:true,
            res_id:20,
        }
    );
    this.data['mail.notification'].records.push(
        //notificationtohavefirstmessageininbox
        {
            mail_message_id:100,//idofrelatedmessage
            res_partner_id:this.data.currentPartnerId,//mustbeforcurrentpartner
        },
        //notificationtohavesecondmessageininbox
        {
            mail_message_id:101,//idofrelatedmessage
            res_partner_id:this.data.currentPartnerId,//mustbeforcurrentpartner
        }
    );
    awaitthis.start();
    assert.strictEqual(
        document.querySelector(`
            .o_DiscussSidebar_item[data-thread-local-id="${
                this.env.messaging.inbox.localId
            }"]
            .o_DiscussSidebarItem_counter
        `).textContent,
        "2",
        "inboxshouldhavecounterof2"
    );
    assert.strictEqual(
        document.querySelector(`
            .o_DiscussSidebar_item[data-thread-local-id="${
                this.env.models['mail.thread'].findFromIdentifyingData({
                    id:20,
                    model:'mail.channel',
                }).localId
            }"]
            .o_DiscussSidebarItem_counter
        `).textContent,
        "2",
        "channelshouldhavecounterof2"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_Discuss.o_Message`).length,
        2,
        "shouldhave2messagesininbox"
    );
    letmarkAllReadButton=document.querySelector(`.o_widget_Discuss_controlPanelButtonMarkAllRead`);
    assert.notOk(
        markAllReadButton.disabled,
        "shouldhaveenabledbutton'Markallread'inthecontrolpanelofinbox(hasmessages)"
    );

    awaitafterNextRender(()=>markAllReadButton.click());
    assert.strictEqual(
        document.querySelectorAll(`
            .o_DiscussSidebar_item[data-thread-local-id="${
                this.env.messaging.inbox.localId
            }"]
            .o_DiscussSidebarItem_counter
        `).length,
        0,
        "inboxshoulddisplaynocounter(=0)"
    );
    assert.strictEqual(
        document.querySelectorAll(`
            .o_DiscussSidebar_item[data-thread-local-id="${
                this.env.models['mail.thread'].findFromIdentifyingData({
                    id:20,
                    model:'mail.channel',
                }).localId
            }"]
            .o_DiscussSidebarItem_counter
        `).length,
        0,
        "channelshoulddisplaynocounter(=0)"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_Discuss.o_Message`).length,
        0,
        "shouldhavenomessageininbox"
    );
    markAllReadButton=document.querySelector(`.o_widget_Discuss_controlPanelButtonMarkAllRead`);
    assert.ok(
        markAllReadButton.disabled,
        "shouldhavedisabledbutton'Markallread'inthecontrolpanelofinbox(nomessages)"
    );
});

QUnit.test('starred:unstarall',asyncfunction(assert){
    assert.expect(6);

    //messagesexpectedtobestarred
    this.data['mail.message'].records.push(
        {body:"notempty",starred_partner_ids:[this.data.currentPartnerId]},
        {body:"notempty",starred_partner_ids:[this.data.currentPartnerId]}
    );
    awaitthis.start({
        discuss:{
            params:{
                default_active_id:'mail.box_starred',
            },
        },
    });
    assert.strictEqual(
        document.querySelector(`
            .o_DiscussSidebar_item[data-thread-local-id="${
                this.env.messaging.starred.localId
            }"]
            .o_DiscussSidebarItem_counter
        `).textContent,
        "2",
        "starredshouldhavecounterof2"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_Discuss.o_Message`).length,
        2,
        "shouldhave2messagesinstarred"
    );
    letunstarAllButton=document.querySelector(`.o_widget_Discuss_controlPanelButtonUnstarAll`);
    assert.notOk(
        unstarAllButton.disabled,
        "shouldhaveenabledbutton'Unstarall'inthecontrolpanelofstarred(hasmessages)"
    );

    awaitafterNextRender(()=>unstarAllButton.click());
    assert.strictEqual(
        document.querySelectorAll(`
            .o_DiscussSidebar_item[data-thread-local-id="${
                this.env.messaging.starred.localId
            }"]
            .o_DiscussSidebarItem_counter
        `).length,
        0,
        "starredshoulddisplaynocounter(=0)"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_Discuss.o_Message`).length,
        0,
        "shouldhavenomessageinstarred"
    );
    unstarAllButton=document.querySelector(`.o_widget_Discuss_controlPanelButtonUnstarAll`);
    assert.ok(
        unstarAllButton.disabled,
        "shouldhavedisabledbutton'Unstarall'inthecontrolpanelofstarred(nomessages)"
    );
});

QUnit.test('toggle_starmessage',asyncfunction(assert){
    assert.expect(16);

    //channelexpectedtobeinitiallyrendered
    //witharandomuniqueid,willbereferencedinthetest
    this.data['mail.channel'].records.push({id:20});
    this.data['mail.message'].records.push({
        body:"notempty",
        channel_ids:[20],
        id:100,
        model:'mail.channel',
        res_id:20,
    });
    awaitthis.start({
        discuss:{
            params:{
                default_active_id:'mail.channel_20',
            },
        },
        asyncmockRPC(route,args){
            if(args.method==='toggle_message_starred'){
                assert.step('rpc:toggle_message_starred');
                assert.strictEqual(
                    args.args[0][0],
                    100,
                    "shouldhavemessageIdinargs"
                );
            }
            returnthis._super(...arguments);
        },
    });
    assert.strictEqual(
        document.querySelectorAll(`
            .o_DiscussSidebar_item[data-thread-local-id="${
                this.env.messaging.starred.localId
            }"]
            .o_DiscussSidebarItem_counter
        `).length,
        0,
        "starredshoulddisplaynocounter(=0)"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_Discuss.o_Message`).length,
        1,
        "shouldhave1messageinchannel"
    );
    letmessage=document.querySelector(`.o_Discuss.o_Message`);
    assert.notOk(
        message.classList.contains('o-starred'),
        "messageshouldnotbestarred"
    );
    assert.strictEqual(
        message.querySelectorAll(`:scope.o_Message_commandStar`).length,
        1,
        "messageshouldhavestarcommand"
    );

    awaitafterNextRender(()=>message.querySelector(`:scope.o_Message_commandStar`).click());
    assert.verifySteps(['rpc:toggle_message_starred']);
    assert.strictEqual(
        document.querySelector(`
            .o_DiscussSidebar_item[data-thread-local-id="${
                this.env.messaging.starred.localId
            }"]
            .o_DiscussSidebarItem_counter
        `).textContent,
        "1",
        "starredshoulddisplayacounterof1"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_Discuss.o_Message`).length,
        1,
        "shouldhavekept1messageinchannel"
    );
    message=document.querySelector(`.o_Discuss.o_Message`);
    assert.ok(
        message.classList.contains('o-starred'),
        "messageshouldbestarred"
    );

    awaitafterNextRender(()=>message.querySelector(`:scope.o_Message_commandStar`).click());
    assert.verifySteps(['rpc:toggle_message_starred']);
    assert.strictEqual(
        document.querySelectorAll(`
            .o_DiscussSidebar_item[data-thread-local-id="${
                this.env.messaging.starred.localId
            }"]
            .o_DiscussSidebarItem_counter
        `).length,
        0,
        "starredshouldnolongerdisplayacounter(=0)"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_Discuss.o_Message`).length,
        1,
        "shouldstillhave1messageinchannel"
    );
    message=document.querySelector(`.o_Discuss.o_Message`);
    assert.notOk(
        message.classList.contains('o-starred'),
        "messageshouldnolongerbestarred"
    );
});

QUnit.test('composerstate:textsaveandrestore',asyncfunction(assert){
    assert.expect(2);

    //channelsexpectedtobefoundinthesidebar,
    //withrandomuniqueidandnamethatwillbereferencedinthetest
    this.data['mail.channel'].records.push(
        {id:20,name:"General"},
        {id:21,name:"Special"}
    );
    awaitthis.start({
        discuss:{
            params:{
                default_active_id:'mail.channel_20',
            },
        },
    });
    //Writetextincomposerfor#general
    awaitafterNextRender(()=>{
        document.querySelector(`.o_ComposerTextInput_textarea`).focus();
        document.execCommand('insertText',false,"Amessage");
        document.querySelector(`.o_ComposerTextInput_textarea`)
            .dispatchEvent(newwindow.KeyboardEvent('input'));
    });
    awaitafterNextRender(()=>
        document.querySelector(`.o_DiscussSidebarItem[data-thread-name="Special"]`).click()
    );
    awaitafterNextRender(()=>{
        document.querySelector(`.o_ComposerTextInput_textarea`).focus();
        document.execCommand('insertText',false,"Anothermessage");
        document.querySelector(`.o_ComposerTextInput_textarea`)
            .dispatchEvent(newwindow.KeyboardEvent('input'));
    });
    //Switchbackto#general
    awaitafterNextRender(()=>
        document.querySelector(`.o_DiscussSidebarItem[data-thread-name="General"]`).click()
    );
    assert.strictEqual(
        document.querySelector(`.o_ComposerTextInput_textarea`).value,
        "Amessage",
        "shouldrestoretheinputtext"
    );

    awaitafterNextRender(()=>
        document.querySelector(`.o_DiscussSidebarItem[data-thread-name="Special"]`).click()
    );
    assert.strictEqual(
        document.querySelector(`.o_ComposerTextInput_textarea`).value,
        "Anothermessage",
        "shouldrestoretheinputtext"
    );
});

QUnit.test('composerstate:attachmentssaveandrestore',asyncfunction(assert){
    assert.expect(6);

    //channelsexpectedtobefoundinthesidebar
    //withrandomuniqueidandnamethatwillbereferencedinthetest
    this.data['mail.channel'].records.push(
        {id:20,name:"General"},
        {id:21,name:"Special"}
    );
    awaitthis.start({
        discuss:{
            params:{
                default_active_id:'mail.channel_20',
            },
        },
    });
    constchannels=document.querySelectorAll(`
        .o_DiscussSidebar_groupChannel.o_DiscussSidebar_item
    `);
    //Addattachmentinamessagefor#general
    awaitafterNextRender(async()=>{
        constfile=awaitcreateFile({
            content:'hello,world',
            contentType:'text/plain',
            name:'text.txt',
        });
        inputFiles(
            document.querySelector('.o_FileUploader_input'),
            [file]
        );
    });
    //Switchto#special
    awaitafterNextRender(()=>channels[1].click());
    //Addattachmentsinamessagefor#special
    constfiles=[
        awaitcreateFile({
            content:'hello2,world',
            contentType:'text/plain',
            name:'text2.txt',
        }),
        awaitcreateFile({
            content:'hello3,world',
            contentType:'text/plain',
            name:'text3.txt',
        }),
        awaitcreateFile({
            content:'hello4,world',
            contentType:'text/plain',
            name:'text4.txt',
        }),
    ];
    awaitafterNextRender(()=>
        inputFiles(
            document.querySelector('.o_FileUploader_input'),
            files
        )
    );
    //Switchbackto#general
    awaitafterNextRender(()=>channels[0].click());
    //Checkattachmentisreloaded
    assert.strictEqual(
        document.querySelectorAll(`.o_Composer.o_Attachment`).length,
        1,
        "shouldhave1attachmentinthecomposer"
    );
    assert.strictEqual(
        document.querySelector(`.o_Composer.o_Attachment`).dataset.attachmentLocalId,
        this.env.models['mail.attachment'].findFromIdentifyingData({id:1}).localId,
        "shouldhavecorrect1stattachmentinthecomposer"
    );

    //Switchbackto#special
    awaitafterNextRender(()=>channels[1].click());
    //Checkattachmentsarereloaded
    assert.strictEqual(
        document.querySelectorAll(`.o_Composer.o_Attachment`).length,
        3,
        "shouldhave3attachmentsinthecomposer"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_Composer.o_Attachment`)[0].dataset.attachmentLocalId,
        this.env.models['mail.attachment'].findFromIdentifyingData({id:2}).localId,
        "shouldhaveattachmentwithid2as1stattachment"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_Composer.o_Attachment`)[1].dataset.attachmentLocalId,
        this.env.models['mail.attachment'].findFromIdentifyingData({id:3}).localId,
        "shouldhaveattachmentwithid3as2ndattachment"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_Composer.o_Attachment`)[2].dataset.attachmentLocalId,
        this.env.models['mail.attachment'].findFromIdentifyingData({id:4}).localId,
        "shouldhaveattachmentwithid4as3rdattachment"
    );
});

QUnit.test('postasimplemessage',asyncfunction(assert){
    assert.expect(15);

    //channelexpectedtobefoundinthesidebar
    //witharandomuniqueidthatwillbereferencedinthetest
    this.data['mail.channel'].records.push({id:20});
    letpostedMessageId;
    awaitthis.start({
        discuss:{
            params:{
                default_active_id:'mail.channel_20',
            },
        },
        asyncmockRPC(route,args){
            constres=awaitthis._super(...arguments);
            if(args.method==='message_post'){
                assert.step('message_post');
                assert.strictEqual(
                    args.args[0],
                    20,
                    "shouldpostmessagetochannelId20"
                );
                assert.strictEqual(
                    args.kwargs.body,
                    "Test",
                    "shouldpostwithprovidedcontentincomposerinput"
                );
                assert.strictEqual(
                    args.kwargs.message_type,
                    "comment",
                    "shouldsetmessagetypeas'comment'"
                );
                assert.strictEqual(
                    args.kwargs.subtype_xmlid,
                    "mail.mt_comment",
                    "shouldsetsubtype_xmlidas'comment'"
                );
                postedMessageId=res;
            }
            returnres;
        },
    });
    assert.strictEqual(
        document.querySelectorAll(`.o_MessageList_empty`).length,
        1,
        "shoulddisplaythreadwithnomessageinitially"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_Message`).length,
        0,
        "shoulddisplaynomessageinitially"
    );
    assert.strictEqual(
        document.querySelector(`.o_ComposerTextInput_textarea`).value,
        "",
        "shouldhaveemptycontentinitially"
    );

    //insertsomeHTMLineditable
    awaitafterNextRender(()=>{
        document.querySelector(`.o_ComposerTextInput_textarea`).focus();
        document.execCommand('insertText',false,"Test");
    });
    assert.strictEqual(
        document.querySelector(`.o_ComposerTextInput_textarea`).value,
        "Test",
        "shouldhaveinsertedtextineditable"
    );

    awaitafterNextRender(()=>
        document.querySelector('.o_Composer_buttonSend').click()
    );
    assert.verifySteps(['message_post']);
    assert.strictEqual(
        document.querySelector(`.o_ComposerTextInput_textarea`).value,
        "",
        "shouldhavenocontentincomposerinputafterpostingmessage"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_Message`).length,
        1,
        "shoulddisplayamessageafterpostingmessage"
    );
    constmessage=document.querySelector(`.o_Message`);
    assert.strictEqual(
        message.dataset.messageLocalId,
        this.env.models['mail.message'].findFromIdentifyingData({id:postedMessageId}).localId,
        "newmessageinthreadshouldbelinkedtonewlycreatedmessagefrommessagepost"
    );
    assert.strictEqual(
        message.querySelector(`:scope.o_Message_authorName`).textContent,
        "MitchellAdmin",
        "newmessageinthreadshouldbefromcurrentpartnername"
    );
    assert.strictEqual(
        message.querySelector(`:scope.o_Message_content`).textContent,
        "Test",
        "newmessageinthreadshouldhavecontenttypedfromcomposertextinput"
    );
});

QUnit.test('postmessageonnon-mailingchannelwith"Enter"keyboardshortcut',asyncfunction(assert){
    assert.expect(2);

    //channelexpectedtobefoundinthesidebar
    //witharandomuniqueidthatwillbereferencedinthetest
    this.data['mail.channel'].records.push({id:20,mass_mailing:false});
    awaitthis.start({
        discuss:{
            params:{
                default_active_id:'mail.channel_20',
            },
        },
    });
    assert.containsNone(
        document.body,
        '.o_Message',
        "shouldnothaveanymessageinitiallyinchannel"
    );

    //insertsomeHTMLineditable
    awaitafterNextRender(()=>{
        document.querySelector(`.o_ComposerTextInput_textarea`).focus();
        document.execCommand('insertText',false,"Test");
    });
    awaitafterNextRender(()=>{
        constkevt=newwindow.KeyboardEvent('keydown',{key:"Enter"});
        document.querySelector('.o_ComposerTextInput_textarea').dispatchEvent(kevt);
    });
    assert.containsOnce(
        document.body,
        '.o_Message',
        "shouldnowhavesinglemessageinchannelafterpostingmessagefrompressing'Enter'intextinputofcomposer"
    );
});

QUnit.test('donotpostmessageonnon-mailingchannelwith"SHIFT-Enter"keyboardshortcut',asyncfunction(assert){
    //Notethattestdoesn'tassertSHIFT-Entermakesanewline,becausethis
    //defaultbrowsercannotbesimulatedwithjustdispatching
    //programmaticallycraftedevents...
    assert.expect(2);

    //channelexpectedtobefoundinthesidebar
    //witharandomuniqueidthatwillbereferencedinthetest
    this.data['mail.channel'].records.push({id:20,mass_mailing:true});
    awaitthis.start({
        discuss:{
            params:{
                default_active_id:'mail.channel_20',
            },
        },
    });
    assert.containsNone(
        document.body,
        '.o_Message',
        "shouldnothaveanymessageinitiallyinchannel"
    );

    //insertsomeHTMLineditable
    awaitafterNextRender(()=>{
        document.querySelector(`.o_ComposerTextInput_textarea`).focus();
        document.execCommand('insertText',false,"Test");
    });
    constkevt=newwindow.KeyboardEvent('keydown',{key:"Enter",shiftKey:true});
    document.querySelector('.o_ComposerTextInput_textarea').dispatchEvent(kevt);
    awaitnextAnimationFrame();
    assert.containsNone(
        document.body,
        '.o_Message',
        "shouldstillnothaveanymessageinchannelafterpressing'Shift-Enter'intextinputofcomposer"
    );
});

QUnit.test('postmessageonmailingchannelwith"CTRL-Enter"keyboardshortcut',asyncfunction(assert){
    assert.expect(2);

    //channelexpectedtobefoundinthesidebar
    //witharandomuniqueidthatwillbereferencedinthetest
    this.data['mail.channel'].records.push({id:20,mass_mailing:true});
    awaitthis.start({
        discuss:{
            params:{
                default_active_id:'mail.channel_20',
            },
        },
    });
    assert.containsNone(
        document.body,
        '.o_Message',
        "shouldnothaveanymessageinitiallyinchannel"
    );

    //insertsomeHTMLineditable
    awaitafterNextRender(()=>{
        document.querySelector(`.o_ComposerTextInput_textarea`).focus();
        document.execCommand('insertText',false,"Test");
    });
    awaitafterNextRender(()=>{
        constkevt=newwindow.KeyboardEvent('keydown',{ctrlKey:true,key:"Enter"});
        document.querySelector('.o_ComposerTextInput_textarea').dispatchEvent(kevt);
    });
    assert.containsOnce(
        document.body,
        '.o_Message',
        "shouldnowhavesinglemessageinchannelafterpostingmessagefrompressing'CTRL-Enter'intextinputofcomposer"
    );
});

QUnit.test('postmessageonmailingchannelwith"META-Enter"keyboardshortcut',asyncfunction(assert){
    assert.expect(2);

    //channelexpectedtobefoundinthesidebar
    //witharandomuniqueidthatwillbereferencedinthetest
    this.data['mail.channel'].records.push({id:20,mass_mailing:true});
    awaitthis.start({
        discuss:{
            params:{
                default_active_id:'mail.channel_20',
            },
        },
    });
    assert.containsNone(
        document.body,
        '.o_Message',
        "shouldnothaveanymessageinitiallyinchannel"
    );

    //insertsomeHTMLineditable
    awaitafterNextRender(()=>{
        document.querySelector(`.o_ComposerTextInput_textarea`).focus();
        document.execCommand('insertText',false,"Test");
    });
    awaitafterNextRender(()=>{
        constkevt=newwindow.KeyboardEvent('keydown',{key:"Enter",metaKey:true});
        document.querySelector('.o_ComposerTextInput_textarea').dispatchEvent(kevt);
    });
    assert.containsOnce(
        document.body,
        '.o_Message',
        "shouldnowhavesinglemessageinchannelafterpostingmessagefrompressing'META-Enter'intextinputofcomposer"
    );
});

QUnit.test('donotpostmessageonmailingchannelwith"Enter"keyboardshortcut',asyncfunction(assert){
    //Notethattestdoesn'tassertEntermakesanewline,becausethis
    //defaultbrowsercannotbesimulatedwithjustdispatching
    //programmaticallycraftedevents...
    assert.expect(2);

    //channelexpectedtobefoundinthesidebar
    //witharandomuniqueidthatwillbereferencedinthetest
    this.data['mail.channel'].records.push({id:20,mass_mailing:true});
    awaitthis.start({
        discuss:{
            params:{
                default_active_id:'mail.channel_20',
            },
        },
    });
    assert.containsNone(
        document.body,
        '.o_Message',
        "shouldnothaveanymessageinitiallyinmailingchannel"
    );

    //insertsomeHTMLineditable
    awaitafterNextRender(()=>{
        document.querySelector(`.o_ComposerTextInput_textarea`).focus();
        document.execCommand('insertText',false,"Test");
    });
    constkevt=newwindow.KeyboardEvent('keydown',{key:"Enter"});
    document.querySelector('.o_ComposerTextInput_textarea').dispatchEvent(kevt);
    awaitnextAnimationFrame();
    assert.containsNone(
        document.body,
        '.o_Message',
        "shouldstillnothaveanymessageinmailingchannelafterpressing'Enter'intextinputofcomposer"
    );
});

QUnit.test('renderingofinboxmessage',asyncfunction(assert){
    //AKUTODO:kindamessagespecifictest
    assert.expect(7);

    this.data['mail.message'].records.push({
        body:"notempty",
        model:'res.partner',//randomexistingmodel
        needaction:true,//formessage_fetchdomain
        needaction_partner_ids:[this.data.currentPartnerId],//forconsistency
        record_name:'Refactoring',//randomname,willbeassertedinthetest
        res_id:20,//randomrelatedid
    });
    awaitthis.start();
    assert.strictEqual(
        document.querySelectorAll('.o_Message').length,
        1,
        "shoulddisplayamessage"
    );
    constmessage=document.querySelector('.o_Message');
    assert.strictEqual(
        message.querySelectorAll(`:scope.o_Message_originThread`).length,
        1,
        "shoulddisplayoriginthreadofmessage"
    );
    assert.strictEqual(
        message.querySelector(`:scope.o_Message_originThread`).textContent,
        "onRefactoring",
        "shoulddisplayoriginthreadname"
    );
    assert.strictEqual(
        message.querySelectorAll(`:scope.o_Message_command`).length,
        3,
        "shoulddisplay3commands"
    );
    assert.strictEqual(
        message.querySelectorAll(`:scope.o_Message_commandStar`).length,
        1,
        "shoulddisplaystarcommand"
    );
    assert.strictEqual(
        message.querySelectorAll(`:scope.o_Message_commandReply`).length,
        1,
        "shoulddisplayreplycommand"
    );
    assert.strictEqual(
        message.querySelectorAll(`:scope.o_Message_commandMarkAsRead`).length,
        1,
        "shoulddisplaymarkasreadcommand"
    );
});

QUnit.test('markchannelasseenonlastmessagevisible[REQUIREFOCUS]',asyncfunction(assert){
    assert.expect(3);

    //channelexpectedtobefoundinthesidebar,withtheexpectedmessage_unread_counter
    //andarandomuniqueidthatwillbereferencedinthetest
    this.data['mail.channel'].records.push({id:10,message_unread_counter:1});
    this.data['mail.message'].records.push({
        id:12,
        body:"notempty",
        channel_ids:[10],
        model:'mail.channel',
        res_id:10,
    });
    awaitthis.start();
    assert.containsOnce(
        document.body,
        `.o_DiscussSidebar_item[data-thread-local-id="${
            this.env.models['mail.thread'].findFromIdentifyingData({
                id:10,
                model:'mail.channel',
            }).localId
        }"]`,
        "shouldhavediscusssidebaritemwiththechannel"
    );
    assert.hasClass(
        document.querySelector(`
            .o_DiscussSidebar_item[data-thread-local-id="${
                this.env.models['mail.thread'].findFromIdentifyingData({
                    id:10,
                    model:'mail.channel',
                }).localId
            }"]
        `),
        'o-unread',
        "sidebaritemofchannelID10shouldbeunread"
    );

    awaitafterNextRender(()=>this.afterEvent({
        eventName:'o-thread-last-seen-by-current-partner-message-id-changed',
        func:()=>{
            document.querySelector(`
                .o_DiscussSidebar_item[data-thread-local-id="${
                    this.env.models['mail.thread'].findFromIdentifyingData({
                        id:10,
                        model:'mail.channel',
                    }).localId
                }"]
            `).click();
        },
        message:"shouldwaituntillastseenbycurrentpartnermessageidchanged",
        predicate:({thread})=>{
            return(
                thread.id===10&&
                thread.model==='mail.channel'&&
                thread.lastSeenByCurrentPartnerMessageId===12
            );
        },
    }));
    assert.doesNotHaveClass(
        document.querySelector(`
            .o_DiscussSidebar_item[data-thread-local-id="${
                this.env.models['mail.thread'].findFromIdentifyingData({
                    id:10,
                    model:'mail.channel',
                }).localId
            }"]
        `),
        'o-unread',
        "sidebaritemofchannelID10shouldnotlongerbeunread"
    );
});

QUnit.test('receivenewneedactionmessages',asyncfunction(assert){
    assert.expect(12);

    awaitthis.start();
    assert.ok(
        document.querySelector(`
            .o_DiscussSidebar_item[data-thread-local-id="${
                this.env.messaging.inbox.localId
            }"]
        `),
        "shouldhaveinboxinsidebar"
    );
    assert.ok(
        document.querySelector(`
            .o_DiscussSidebar_item[data-thread-local-id="${
                this.env.messaging.inbox.localId
            }"]
        `).classList.contains('o-active'),
        "inboxshouldbecurrentdiscussthread"
    );
    assert.notOk(
        document.querySelector(`
            .o_DiscussSidebar_item[data-thread-local-id="${
                this.env.messaging.inbox.localId
            }"]
            .o_DiscussSidebarItem_counter
        `),
        "inboxiteminsidebarshouldnothaveanycounter"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_Discuss_thread.o_Message`).length,
        0,
        "shouldhavenomessagesininboxinitially"
    );

    //simulatereceivinganewneedactionmessage
    awaitafterNextRender(()=>{
        constdata={
            body:"notempty",
            id:100,
            needaction_partner_ids:[3],
            model:'res.partner',
            res_id:20,
        };
        constnotifications=[[['my-db','ir.needaction',3],data]];
        this.widget.call('bus_service','trigger','notification',notifications);
    });
    assert.ok(
        document.querySelector(`
            .o_DiscussSidebar_item[data-thread-local-id="${
                this.env.messaging.inbox.localId
            }"]
            .o_DiscussSidebarItem_counter
        `),
        "inboxiteminsidebarshouldnowhavecounter"
    );
    assert.strictEqual(
        document.querySelector(`
            .o_DiscussSidebar_item[data-thread-local-id="${
                this.env.messaging.inbox.localId
            }"]
            .o_DiscussSidebarItem_counter
        `).textContent,
        '1',
        "inboxiteminsidebarshouldhavecounterof'1'"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_Discuss_thread.o_Message`).length,
        1,
        "shouldhaveonemessageininbox"
    );
    assert.strictEqual(
        document.querySelector(`.o_Discuss_thread.o_Message`).dataset.messageLocalId,
        this.env.models['mail.message'].findFromIdentifyingData({id:100}).localId,
        "shoulddisplaynewlyreceivedneedactionmessage"
    );

    //simulatereceivinganothernewneedactionmessage
    awaitafterNextRender(()=>{
        constdata2={
            body:"notempty",
            id:101,
            needaction_partner_ids:[3],
            model:'res.partner',
            res_id:20,
        };
        constnotifications2=[[['my-db','ir.needaction',3],data2]];
        this.widget.call('bus_service','trigger','notification',notifications2);
    });
    assert.strictEqual(
        document.querySelector(`
            .o_DiscussSidebar_item[data-thread-local-id="${
                this.env.messaging.inbox.localId
            }"]
            .o_DiscussSidebarItem_counter
        `).textContent,
        '2',
        "inboxiteminsidebarshouldhavecounterof'2'"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_Discuss_thread.o_Message`).length,
        2,
        "shouldhave2messagesininbox"
    );
    assert.ok(
        document.querySelector(`
            .o_Discuss_thread
            .o_Message[data-message-local-id="${
                this.env.models['mail.message'].findFromIdentifyingData({id:100}).localId
            }"]
        `),
        "shouldstilldisplay1stneedactionmessage"
    );
    assert.ok(
        document.querySelector(`
            .o_Discuss_thread
            .o_Message[data-message-local-id="${
                this.env.models['mail.message'].findFromIdentifyingData({id:101}).localId
            }"]
        `),
        "shoulddisplay2ndneedactionmessage"
    );
});

QUnit.test('replytomessagefrominbox(messagelinkedtodocument)',asyncfunction(assert){
    assert.expect(19);

    //messagethatisexpectedtobefoundinInbox
    this.data['mail.message'].records.push({
        body:"<p>Test</p>",
        date:"2019-04-2011:00:00",
        id:100,//randomuniqueid,willbeusedtolinknotificationtomessage
        message_type:'comment',
        //needactionneedstobesethereformessage_fetchdomain,because
        //mockedmodelsdon'thavecomputedfields
        needaction:true,
        model:'res.partner',
        record_name:'Refactoring',
        res_id:20,
    });
    //notificationtohavemessageinInbox
    this.data['mail.notification'].records.push({
        mail_message_id:100,//idofrelatedmessage
        res_partner_id:this.data.currentPartnerId,//mustbeforcurrentpartner
    });
    awaitthis.start({
        asyncmockRPC(route,args){
            if(args.method==='message_post'){
                assert.step('message_post');
                assert.strictEqual(
                    args.model,
                    'res.partner',
                    "shouldpostmessagetorecordwithmodel'res.partner'"
                );
                assert.strictEqual(
                    args.args[0],
                    20,
                    "shouldpostmessagetorecordwithId20"
                );
                assert.strictEqual(
                    args.kwargs.body,
                    "Test",
                    "shouldpostwithprovidedcontentincomposerinput"
                );
                assert.strictEqual(
                    args.kwargs.message_type,
                    "comment",
                    "shouldsetmessagetypeas'comment'"
                );
            }
            returnthis._super(...arguments);
        },
    });
    assert.strictEqual(
        document.querySelectorAll('.o_Message').length,
        1,
        "shoulddisplayasinglemessage"
    );
    assert.strictEqual(
        document.querySelector('.o_Message').dataset.messageLocalId,
        this.env.models['mail.message'].findFromIdentifyingData({id:100}).localId,
        "shoulddisplaymessagewithID100"
    );
    assert.strictEqual(
        document.querySelector('.o_Message_originThread').textContent,
        "onRefactoring",
        "shoulddisplaymessageoriginatesfromrecord'Refactoring'"
    );

    awaitafterNextRender(()=>
        document.querySelector('.o_Message_commandReply').click()
    );
    assert.ok(
        document.querySelector('.o_Message').classList.contains('o-selected'),
        "messageshouldbeselectedafterclickingonreplyicon"
    );
    assert.ok(
        document.querySelector('.o_Composer'),
        "shouldhavecomposerafterclickingonreplytomessage"
    );
    assert.strictEqual(
        document.querySelector(`.o_Composer_threadName`).textContent,
        "on:Refactoring",
        "composershoulddisplayoriginthreadnameofmessage"
    );
    assert.strictEqual(
        document.activeElement,
        document.querySelector(`.o_ComposerTextInput_textarea`),
        "composertextinputshouldbeauto-focus"
    );

    awaitafterNextRender(()=>
        document.execCommand('insertText',false,"Test")
    );
    awaitafterNextRender(()=>
        document.querySelector('.o_Composer_buttonSend').click()
    );
    assert.verifySteps(['message_post']);
    assert.notOk(
        document.querySelector('.o_Composer'),
        "shouldnolongerhavecomposerafterpostingreplytomessage"
    );
    assert.strictEqual(
        document.querySelectorAll('.o_Message').length,
        1,
        "shouldstilldisplayasinglemessageafterpostingreply"
    );
    assert.strictEqual(
        document.querySelector('.o_Message').dataset.messageLocalId,
        this.env.models['mail.message'].findFromIdentifyingData({id:100}).localId,
        "shouldstilldisplaymessagewithID100afterpostingreply"
    );
    assert.notOk(
        document.querySelector('.o_Message').classList.contains('o-selected'),
        "messageshouldnotlongerbeselectedafterpostingreply"
    );
    assert.ok(
        document.querySelector('.o_notification'),
        "shoulddisplayanotificationafterpostingreply"
    );
    assert.strictEqual(
        document.querySelector('.o_notification_content').textContent,
        "Messagepostedon\"Refactoring\"",
        "notificationshouldtellthatmessagehasbeenpostedtotherecord'Refactoring'"
    );
});

QUnit.test('loadrecentmessagesfromthread(alreadyloadedsomeoldmessages)',asyncfunction(assert){
    assert.expect(6);

    //channelexpectedtobefoundinthesidebar,
    //witharandomuniqueidthatwillbereferencedinthetest
    this.data['mail.channel'].records.push({id:20});
    for(leti=0;i<50;i++){
        this.data['mail.message'].records.push({
            body:"notempty",
            channel_ids:[20],//idofrelatedchannel
            id:100+i,//randomuniqueid,willbereferencedinthetest
            model:'mail.channel',//expectedvaluetolinkmessagetochannel
            //needactionneedstobesethereformessage_fetchdomain,because
            //mockedmodelsdon'thavecomputedfields
            needaction:i===0,
            //thegoalistohaveonlythefirst(oldest)messageinInbox
            needaction_partner_ids:i===0?[this.data.currentPartnerId]:[],
            res_id:20,//idofrelatedchannel
        });
    }
    awaitthis.start();
    assert.strictEqual(
        document.querySelectorAll('.o_Message').length,
        1,
        "Inboxshouldhaveasinglemessageinitially"
    );
    assert.strictEqual(
        document.querySelector('.o_Message').dataset.messageLocalId,
        this.env.models['mail.message'].findFromIdentifyingData({id:100}).localId,
        "theonlymessageinitiallyshouldbetheonemarkedas'needaction'"
    );

    awaitthis.afterEvent({
        eventName:'o-component-message-list-scrolled',
        func:()=>{
            document.querySelector(`
                .o_DiscussSidebar_item[data-thread-local-id="${
                    this.env.models['mail.thread'].findFromIdentifyingData({
                        id:20,
                        model:'mail.channel',
                    }).localId
                }"]
            `).click();
        },
        message:"shouldwaituntilchannelscrolledtobottomafteropeningitfromthediscusssidebar",
        predicate:({scrollTop,thread})=>{
            constmessageList=document.querySelector('.o_ThreadView_messageList');
            return(
                thread&&
                thread.model==='mail.channel'&&
                thread.id===20&&
                isScrolledToBottom(messageList)
            );
        },
    });
    assert.strictEqual(
        document.querySelectorAll('.o_Message').length,
        31,
        `shoulddisplay31messagesinsidethechannelafterclickingonit(thepreviouslyknown
        messagefromInboxandthe30mostrecentmessagesthathavebeenfetched)`
    );
    assert.strictEqual(
        document.querySelectorAll(`
            .o_Message[data-message-local-id="${
                this.env.models['mail.message'].findFromIdentifyingData({id:100}).localId
            }"]
        `).length,
        1,
        "shoulddisplaythemessagefromInboxinsidethechanneltoo"
    );

    awaitthis.afterEvent({
        eventName:'o-thread-view-hint-processed',
        func:()=>document.querySelector('.o_Discuss_thread.o_ThreadView_messageList').scrollTop=0,
        message:"shouldwaituntilchannel20loadedmoremessagesafterscrollingtotop",
        predicate:({hint,threadViewer})=>{
            return(
                hint.type==='more-messages-loaded'&&
                threadViewer.thread.model==='mail.channel'&&
                threadViewer.thread.id===20
            );
        },
    });
    assert.strictEqual(
        document.querySelectorAll('.o_Message').length,
        50,
        "shoulddisplay50messagesinsidethechannelafterscrollingtoloadmore(allmessagesfetched)"
    );
    assert.strictEqual(
        document.querySelectorAll(`
            .o_Message[data-message-local-id="${
                this.env.models['mail.message'].findFromIdentifyingData({id:100}).localId
            }"]
        `).length,
        1,
        "shouldstilldisplaythemessagefromInboxinsidethechanneltoo"
    );
});

QUnit.test('messagesmarkedasreadmoveto"History"mailbox',asyncfunction(assert){
    assert.expect(10);

    //channelexpectedtobefoundinthesidebar
    //witharandomuniqueidthatwillbereferencedinthetest
    this.data['mail.channel'].records.push({id:20});
    //expectedmessages
    this.data['mail.message'].records.push(
        {
            body:"notempty",
            id:100,//randomuniqueid,usefultolinknotification
            model:'mail.channel',//valuetolinkmessagetochannel
            //needactionneedstobesethereformessage_fetchdomain,because
            //mockedmodelsdon'thavecomputedfields
            needaction:true,
            res_id:20,//idofrelatedchannel
        },
        {
            body:"notempty",
            id:101,//randomuniqueid,usefultolinknotification
            model:'mail.channel',//valuetolinkmessagetochannel
            //needactionneedstobesethereformessage_fetchdomain,because
            //mockedmodelsdon'thavecomputedfields
            needaction:true,
            res_id:20,//idofrelatedchannel
        }
    );
    this.data['mail.notification'].records.push(
        //notificationtohavefirstmessageininbox
        {
            mail_message_id:100,//idofrelatedmessage
            res_partner_id:this.data.currentPartnerId,//mustbeforcurrentpartner
        },
        //notificationtohavesecondmessageininbox
        {
            mail_message_id:101,//idofrelatedmessage
            res_partner_id:this.data.currentPartnerId,//mustbeforcurrentpartner
        }
    );
    awaitthis.start({
        discuss:{
            params:{
                default_active_id:'mail.box_history',
            },
        },
    });
    assert.ok(
        document.querySelector(`
            .o_DiscussSidebar_item[data-thread-local-id="${
                this.env.messaging.history.localId
            }"]
        `).classList.contains('o-active'),
        "historymailboxshouldbeactivethread"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_Discuss_thread.o_MessageList_empty`).length,
        1,
        "shouldhaveemptythreadinhistory"
    );

    awaitafterNextRender(()=>
        document.querySelector(`
            .o_DiscussSidebar_item[data-thread-local-id="${
                this.env.messaging.inbox.localId
            }"]
        `).click()
    );
    assert.ok(
        document.querySelector(`
            .o_DiscussSidebar_item[data-thread-local-id="${
                this.env.messaging.inbox.localId
            }"]
        `).classList.contains('o-active'),
        "inboxmailboxshouldbeactivethread"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_Discuss_thread.o_MessageList_empty`).length,
        0,
        "inboxmailboxshouldnotbeempty"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_Discuss_thread.o_MessageList_message`).length,
        2,
        "inboxmailboxshouldhave2messages"
    );

    awaitafterNextRender(()=>
        document.querySelector('.o_widget_Discuss_controlPanelButtonMarkAllRead').click()
    );
    assert.ok(
        document.querySelector(`
            .o_DiscussSidebar_item[data-thread-local-id="${
                this.env.messaging.inbox.localId
            }"]
        `).classList.contains('o-active'),
        "inboxmailboxshouldstillbeactiveaftermarkasread"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_Discuss_thread.o_MessageList_empty`).length,
        1,
        "inboxmailboxshouldnowbeemptyaftermarkasread"
    );

    awaitafterNextRender(()=>
        document.querySelector(`
            .o_DiscussSidebar_item[data-thread-local-id="${
                this.env.messaging.history.localId
            }"]
        `).click()
    );
    assert.ok(
        document.querySelector(`
            .o_DiscussSidebar_item[data-thread-local-id="${
                this.env.messaging.history.localId
            }"]
        `).classList.contains('o-active'),
        "historymailboxshouldbeactive"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_Discuss_thread.o_MessageList_empty`).length,
        0,
        "historymailboxshouldnotbeemptyaftermarkasread"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_Discuss_thread.o_MessageList_message`).length,
        2,
        "historymailboxshouldhave2messages"
    );
});

QUnit.test('markasinglemessageasreadshouldonlymovethismessageto"History"mailbox',asyncfunction(assert){
    assert.expect(9);

    this.data['mail.message'].records.push(
        {
            body:"notempty",
            id:1,
            needaction:true,
            needaction_partner_ids:[this.data.currentPartnerId],
        },
        {
            body:"notempty",
            id:2,
            needaction:true,
            needaction_partner_ids:[this.data.currentPartnerId],
        }
    );
    this.data['mail.notification'].records.push(
        {
            mail_message_id:1,
            res_partner_id:this.data.currentPartnerId,
        },
        {
            mail_message_id:2,
            res_partner_id:this.data.currentPartnerId,
        }
    );
    awaitthis.start({
        discuss:{
            params:{
                default_active_id:'mail.box_history',
            },
        },
    });
    assert.hasClass(
        document.querySelector(`
            .o_DiscussSidebar_item[data-thread-local-id="${
                this.env.messaging.history.localId
            }"]
        `),
        'o-active',
        "historymailboxshouldinitiallybetheactivethread"
    );
    assert.containsOnce(
        document.body,
        '.o_MessageList_empty',
        "historymailboxshouldinitiallybeempty"
    );

    awaitafterNextRender(()=>
        document.querySelector(`
            .o_DiscussSidebar_item[data-thread-local-id="${
                this.env.messaging.inbox.localId
            }"]
        `).click()
    );
    assert.hasClass(
        document.querySelector(`
            .o_DiscussSidebar_item[data-thread-local-id="${
                this.env.messaging.inbox.localId
            }"]
        `),
        'o-active',
        "inboxmailboxshouldbeactivethreadafterclickingonit"
    );
    assert.containsN(
        document.body,
        '.o_Message',
        2,
        "inboxmailboxshouldhave2messages"
    );

    awaitafterNextRender(()=>
        document.querySelector(`
            .o_Message[data-message-local-id="${
                this.env.models['mail.message'].findFromIdentifyingData({id:1}).localId
            }"].o_Message_commandMarkAsRead
        `).click()
    );
    assert.containsOnce(
        document.body,
        '.o_Message',
        "inboxmailboxshouldhaveonelessmessageafterclickingmarkasread"
    );
    assert.containsOnce(
        document.body,
        `.o_Message[data-message-local-id="${
            this.env.models['mail.message'].findFromIdentifyingData({id:2}).localId
        }"]`,
        "messagestillininboxshouldbetheonenotmarkedasread"
    );

    awaitafterNextRender(()=>
        document.querySelector(`
            .o_DiscussSidebar_item[data-thread-local-id="${
                this.env.messaging.history.localId
            }"]
        `).click()
    );
    assert.hasClass(
        document.querySelector(`
            .o_DiscussSidebar_item[data-thread-local-id="${
                this.env.messaging.history.localId
            }"]
        `),
        'o-active',
        "historymailboxshouldbeactiveafterclickingonit"
    );
    assert.containsOnce(
        document.body,
        '.o_Message',
        "historymailboxshouldhaveonly1messageaftermarkasread"
    );
    assert.containsOnce(
        document.body,
        `.o_Message[data-message-local-id="${
            this.env.models['mail.message'].findFromIdentifyingData({id:1}).localId
        }"]`,
        "messagemovedinhistoryshouldbetheonemarkedasread"
    );
});

QUnit.test('allmessagesin"Inbox"in"History"aftermarkedallasread',asyncfunction(assert){
    assert.expect(2);

    constmessageOffset=200;
    for(letid=messageOffset;id<messageOffset+40;id++){
        //messageexpectedtobefoundinInbox
        this.data['mail.message'].records.push({
            body:"notempty",
            id,//willbeusedtolinknotificationtomessage
            //needactionneedstobesethereformessage_fetchdomain,because
            //mockedmodelsdon'thavecomputedfields
            needaction:true,
        });
        //notificationtohavemessageinInbox
        this.data['mail.notification'].records.push({
            mail_message_id:id,//idofrelatedmessage
            res_partner_id:this.data.currentPartnerId,//mustbeforcurrentpartner
        });

    }
    awaitthis.start({
        waitUntilEvent:{
            eventName:'o-component-message-list-scrolled',
            message:"shouldwaituntilinboxscrolledtoitslastmessageinitially",
            predicate:({orderedMessages,scrollTop,thread})=>{
                constmessageList=document.querySelector(`.o_Discuss_thread.o_ThreadView_messageList`);
                return(
                    thread&&
                    thread.model==='mail.box'&&
                    thread.id==='inbox'&&
                    orderedMessages.length===30&&
                    isScrolledToBottom(messageList)
                );
            },
        },
    });

    awaitafterNextRender(async()=>{
        constmarkAllReadButton=document.querySelector('.o_widget_Discuss_controlPanelButtonMarkAllRead');
        markAllReadButton.click();
    });
    assert.containsNone(
        document.body,
        '.o_Message',
        "thereshouldnomessageinInboxanymore"
    );

    awaitthis.afterEvent({
        eventName:'o-component-message-list-scrolled',
        func:()=>{
            document.querySelector(`
                .o_DiscussSidebarItem[data-thread-local-id="${
                    this.env.messaging.history.localId
                }"]
            `).click();
        },
        message:"shouldwaituntilhistoryscrolledtoitslastmessageafteropeningitfromthediscusssidebar",
        predicate:({orderedMessages,scrollTop,thread})=>{
            constmessageList=document.querySelector('.o_MessageList');
            return(
                thread&&
                thread.model==='mail.box'&&
                thread.id==='history'&&
                orderedMessages.length===30&&
                isScrolledToBottom(messageList)
            );
        },
    });

    //simulateascrolltotoptoloadmoremessages
    awaitthis.afterEvent({
        eventName:'o-thread-view-hint-processed',
        func:()=>document.querySelector('.o_MessageList').scrollTop=0,
        message:"shouldwaituntilmailboxhistoryloadedmoremessagesafterscrollingtotop",
        predicate:({hint,threadViewer})=>{
            return(
                hint.type==='more-messages-loaded'&&
                threadViewer.thread.model==='mail.box'&&
                threadViewer.thread.id==='history'
            );
        },
    });
    assert.containsN(
        document.body,
        '.o_Message',
        40,
        "thereshouldbe40messagesinHistory"
    );
});

QUnit.test('receivenewchatmessage:outofflectrafocus(notification,channel)',asyncfunction(assert){
    assert.expect(4);

    //channelexpectedtobefoundinthesidebar
    //witharandomuniqueidthatwillbereferencedinthetest
    this.data['mail.channel'].records.push({id:20,channel_type:'chat'});
    constbus=newBus();
    bus.on('set_title_part',null,payload=>{
        assert.step('set_title_part');
        assert.strictEqual(payload.part,'_chat');
        assert.strictEqual(payload.title,"1Message");
    });
    awaitthis.start({
        env:{bus},
        services:{
            bus_service:BusService.extend({
                _beep(){},//Donothing
                _poll(){},//Donothing
                _registerWindowUnload(){},//Donothing
                isFlectraFocused:()=>false,
                updateOption(){},
            }),
        },
    });

    //simulatereceivinganewmessagewithflectrafocused
    awaitafterNextRender(()=>{
        constmessageData={
            channel_ids:[20],
            id:126,
            model:'mail.channel',
            res_id:20,
        };
        constnotifications=[[['my-db','mail.channel',20],messageData]];
        this.widget.call('bus_service','trigger','notification',notifications);
    });
    assert.verifySteps(['set_title_part']);
});

QUnit.test('receivenewchatmessage:outofflectrafocus(notification,chat)',asyncfunction(assert){
    assert.expect(4);

    //chatexpectedtobefoundinthesidebarwiththeproperchannel_type
    //andarandomuniqueidthatwillbereferencedinthetest
    this.data['mail.channel'].records.push({channel_type:"chat",id:10});
    constbus=newBus();
    bus.on('set_title_part',null,payload=>{
        assert.step('set_title_part');
        assert.strictEqual(payload.part,'_chat');
        assert.strictEqual(payload.title,"1Message");
    });
    awaitthis.start({
        env:{bus},
        services:{
            bus_service:BusService.extend({
                _beep(){},//Donothing
                _poll(){},//Donothing
                _registerWindowUnload(){},//Donothing
                isFlectraFocused:()=>false,
                updateOption(){},
            }),
        },
    });

    //simulatereceivinganewmessagewithflectrafocused
    awaitafterNextRender(()=>{
        constmessageData={
            channel_ids:[10],
            id:126,
            model:'mail.channel',
            res_id:10,
        };
        constnotifications=[[['my-db','mail.channel',10],messageData]];
        this.widget.call('bus_service','trigger','notification',notifications);
    });
    assert.verifySteps(['set_title_part']);
});

QUnit.test('receivenewchatmessages:outofflectrafocus(tabtitle)',asyncfunction(assert){
    assert.expect(12);

    letstep=0;
    //channelandchatexpectedtobefoundinthesidebar
    //withrandomuniqueidandnamethatwillbereferencedinthetest
    this.data['mail.channel'].records.push(
        {channel_type:'chat',id:20,public:'private'},
        {channel_type:'chat',id:10,public:'private'},
    );
    constbus=newBus();
    bus.on('set_title_part',null,payload=>{
        step++;
        assert.step('set_title_part');
        assert.strictEqual(payload.part,'_chat');
        if(step===1){
            assert.strictEqual(payload.title,"1Message");
        }
        if(step===2){
            assert.strictEqual(payload.title,"2Messages");
        }
        if(step===3){
            assert.strictEqual(payload.title,"3Messages");
        }
    });
    awaitthis.start({
        env:{bus},
        services:{
            bus_service:BusService.extend({
                _beep(){},//Donothing
                _poll(){},//Donothing
                _registerWindowUnload(){},//Donothing
                isFlectraFocused:()=>false,
                updateOption(){},
            }),
        },
    });

    //simulatereceivinganewmessageinchat20withflectrafocused
    awaitafterNextRender(()=>{
        constmessageData1={
            channel_ids:[20],
            id:126,
            model:'mail.channel',
            res_id:20,
        };
        constnotifications1=[[['my-db','mail.channel',20],messageData1]];
        this.widget.call('bus_service','trigger','notification',notifications1);
    });
    assert.verifySteps(['set_title_part']);

    //simulatereceivinganewmessageinchat10withflectrafocused
    awaitafterNextRender(()=>{
        constmessageData2={
            channel_ids:[10],
            id:127,
            model:'mail.channel',
            res_id:10,
        };
        constnotifications2=[[['my-db','mail.channel',10],messageData2]];
        this.widget.call('bus_service','trigger','notification',notifications2);
    });
    assert.verifySteps(['set_title_part']);

    //simulatereceivinganothernewmessageinchat10withflectrafocused
    awaitafterNextRender(()=>{
        constmessageData3={
            channel_ids:[10],
            id:128,
            model:'mail.channel',
            res_id:10,
        };
        constnotifications3=[[['my-db','mail.channel',10],messageData3]];
        this.widget.call('bus_service','trigger','notification',notifications3);
    });
    assert.verifySteps(['set_title_part']);
});

QUnit.test('auto-focuscomposeronopeningthread',asyncfunction(assert){
    assert.expect(14);

    //expectedcorrespondent,witharandomuniqueidthatwillbeusedtolink
    //partnertochatandarandomnamethatwillbeassertedinthetest
    this.data['res.partner'].records.push({id:7,name:"DemoUser"});
    this.data['mail.channel'].records.push(
        //channelexpectedtobefoundinthesidebar
        {
            id:20,//randomuniqueid,willbereferencedinthetest
            name:"General",//randomname,willbeassertedinthetest
        },
        //chatexpectedtobefoundinthesidebar
        {
            channel_type:'chat',//testingachatisthegoalofthetest
            id:10,//randomuniqueid,willbereferencedinthetest
            members:[this.data.currentPartnerId,7],//expectedpartners
            public:'private',//expectedvaluefortestingachat
        }
    );
    awaitthis.start();
    assert.strictEqual(
        document.querySelectorAll(`
            .o_DiscussSidebar_item[data-thread-name="Inbox"]
        `).length,
        1,
        "shouldhavemailbox'Inbox'inthesidebar"
    );
    assert.ok(
        document.querySelector(`
            .o_DiscussSidebar_item[data-thread-name="Inbox"]
        `).classList.contains('o-active'),
        "mailbox'Inbox'shouldbeactiveinitially"
    );
    assert.strictEqual(
        document.querySelectorAll(`
            .o_DiscussSidebar_item[data-thread-name="General"]
        `).length,
        1,
        "shouldhavechannel'General'inthesidebar"
    );
    assert.notOk(
        document.querySelector(`
            .o_DiscussSidebar_item[data-thread-name="General"]
        `).classList.contains('o-active'),
        "channel'General'shouldnotbeactiveinitially"
    );
    assert.strictEqual(
        document.querySelectorAll(`
            .o_DiscussSidebar_item[data-thread-name="DemoUser"]
        `).length,
        1,
        "shouldhavechat'DemoUser'inthesidebar"
    );
    assert.notOk(
        document.querySelector(`
            .o_DiscussSidebar_item[data-thread-name="DemoUser"]
        `).classList.contains('o-active'),
        "chat'DemoUser'shouldnotbeactiveinitially"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_Composer`).length,
        0,
        "thereshouldbenocomposerwhenactivethreadofdiscussismailbox'Inbox'"
    );

    awaitafterNextRender(()=>
        document.querySelector(`.o_DiscussSidebar_item[data-thread-name="General"]`).click()
    );
    assert.ok(
        document.querySelector(`
            .o_DiscussSidebar_item[data-thread-name="General"]
        `).classList.contains('o-active'),
        "channel'General'shouldbecomeactiveafterselectingitfromthesidebar"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_Composer`).length,
        1,
        "thereshouldbeacomposerwhenactivethreadofdiscussischannel'General'"
    );
    assert.strictEqual(
        document.activeElement,
        document.querySelector(`.o_ComposerTextInput_textarea`),
        "composerofchannel'General'shouldbeautomaticallyfocusedonopening"
    );

    document.querySelector(`.o_ComposerTextInput_textarea`).blur();
    assert.notOk(
        document.activeElement===document.querySelector(`.o_ComposerTextInput_textarea`),
        "composerofchannel'General'shouldnolongerfocusedonclickaway"
    );

    awaitafterNextRender(()=>
        document.querySelector(`.o_DiscussSidebar_item[data-thread-name="DemoUser"]`).click()
    );
    assert.ok(
        document.querySelector(`
            .o_DiscussSidebar_item[data-thread-name="DemoUser"]
        `).classList.contains('o-active'),
        "chat'DemoUser'shouldbecomeactiveafterselectingitfromthesidebar"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_Composer`).length,
        1,
        "thereshouldbeacomposerwhenactivethreadofdiscussischat'DemoUser'"
    );
    assert.strictEqual(
        document.activeElement,
        document.querySelector(`.o_ComposerTextInput_textarea`),
        "composerofchat'DemoUser'shouldbeautomaticallyfocusedonopening"
    );
});

QUnit.test('markchannelasseeniflastmessageisvisiblewhenswitchingchannelswhenthepreviouschannelhadamorerecentlastmessagethanthecurrentchannel[REQUIREFOCUS]',asyncfunction(assert){
    assert.expect(1);

    this.data['mail.channel'].records.push(
        {id:10,message_unread_counter:1,name:'Bla'},
        {id:11,message_unread_counter:1,name:'Blu'},
    );
    this.data['mail.message'].records.push({
        body:'oldestmessage',
        channel_ids:[10],
        id:10,
    },{
        body:'newestmessage',
        channel_ids:[11],
        id:11,
    });
    awaitthis.start({
        discuss:{
            context:{
                active_id:'mail.channel_11',
            },
        },
        waitUntilEvent:{
            eventName:'o-thread-view-hint-processed',
            message:"shouldwaituntilchannel11loadeditsmessagesinitially",
            predicate:({hint,threadViewer})=>{
                return(
                    threadViewer.thread.model==='mail.channel'&&
                    threadViewer.thread.id===11&&
                    hint.type==='messages-loaded'
                );
            },
        },
    });
    awaitafterNextRender(()=>this.afterEvent({
        eventName:'o-thread-last-seen-by-current-partner-message-id-changed',
        func:()=>{
            document.querySelector(`
                .o_DiscussSidebar_item[data-thread-local-id="${
                    this.env.models['mail.thread'].findFromIdentifyingData({
                        id:10,
                        model:'mail.channel',
                    }).localId
                }"]
            `).click();
        },
        message:"shouldwaituntillastseenbycurrentpartnermessageidchanged",
        predicate:({thread})=>{
            return(
                thread.id===10&&
                thread.model==='mail.channel'&&
                thread.lastSeenByCurrentPartnerMessageId===10
            );
        },
    }));
    assert.doesNotHaveClass(
        document.querySelector(`
            .o_DiscussSidebar_item[data-thread-local-id="${
                this.env.models['mail.thread'].findFromIdentifyingData({
                    id:10,
                    model:'mail.channel',
                }).localId
            }"]
        `),
        'o-unread',
        "sidebaritemofchannelID10shouldnolongerbeunread"
    );
});

QUnit.test('addcustomfiltershouldfiltermessagesaccordinglytoselectedfilter',asyncfunction(assert){
    assert.expect(4);

    this.data['mail.channel'].records.push({
        id:20,
        name:"General"
    });
    awaitthis.start({
        asyncmockRPC(route,args){
            if(args.method==='message_fetch'){
                constdomainsAsStr=args.kwargs.domain.map(domain=>domain.join(''));
                assert.step(`message_fetch:${domainsAsStr.join(',')}`);
            }
            returnthis._super(...arguments);
        },
    });
    assert.verifySteps(['message_fetch:needaction=true'],"Amessage_fetchrequestshouldhavebeendoneforneedactionmessagesasinboxisselectedbydefault");

    //Openfiltermenuofcontrolpanelandselectacustomfilter(id=0,theonlyoneavailable)
    awaittoggleFilterMenu(document.body);
    awaittoggleAddCustomFilter(document.body);
    awaitapplyFilter(document.body);
    assert.verifySteps(['message_fetch:id=0,needaction=true'],"Amessage_fetchrequestshouldhavebeendoneforselectedfilter&domainofcurrentthread(inbox)");
});

});
});
});

});
