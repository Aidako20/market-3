flectra.define('mail/static/src/components/discuss/tests/discuss_inbox_tests.js',function(require){
'usestrict';

const{
    afterEach,
    afterNextRender,
    beforeEach,
    nextAnimationFrame,
    start,
}=require('mail/static/src/utils/test_utils.js');

constBus=require('web.Bus');

QUnit.module('mail',{},function(){
QUnit.module('components',{},function(){
QUnit.module('discuss',{},function(){
QUnit.module('discuss_inbox_tests.js',{
    beforeEach(){
        beforeEach(this);

        this.start=asyncparams=>{
            const{env,widget}=awaitstart(Object.assign({},params,{
                autoOpenDiscuss:true,
                data:this.data,
                hasDiscuss:true,
            }));
            this.env=env;
            this.widget=widget;
        };
    },
    afterEach(){
        afterEach(this);
    },
});

QUnit.test('reply:discardonpressingescape',asyncfunction(assert){
    assert.expect(9);

    //partnerexpectedtobefoundbymention
    this.data['res.partner'].records.push({
        email:"testpartnert@flectrahq.com",
        id:11,
        name:"TestPartner",
    });
    //messageexpectedtobefoundininbox
    this.data['mail.message'].records.push({
        body:"notempty",
        model:'res.partner',
        needaction:true,
        needaction_partner_ids:[this.data.currentPartnerId],
        res_id:20,
    });
    awaitthis.start();
    assert.containsOnce(
        document.body,
        '.o_Message',
        "shoulddisplayasinglemessage"
    );

    awaitafterNextRender(()=>
        document.querySelector('.o_Message_commandReply').click()
    );
    assert.containsOnce(
        document.body,
        '.o_Composer',
        "shouldhavecomposerafterclickingonreplytomessage"
    );

    awaitafterNextRender(()=>
        document.querySelector(`.o_Composer_buttonEmojis`).click()
    );
    assert.containsOnce(
        document.body,
        '.o_EmojisPopover',
        "emojispopovershouldbeopenedafterclickonemojisbutton"
    );

    awaitafterNextRender(()=>{
        constev=newwindow.KeyboardEvent('keydown',{bubbles:true,key:"Escape"});
        document.querySelector(`.o_Composer_buttonEmojis`).dispatchEvent(ev);
    });
    assert.containsNone(
        document.body,
        '.o_EmojisPopover',
        "emojispopovershouldbeclosedafterpressingescapeonemojisbutton"
    );
    assert.containsOnce(
        document.body,
        '.o_Composer',
        "replycomposershouldstillbeopenedafterpressingescapeonemojisbutton"
    );

    awaitafterNextRender(()=>{
        document.querySelector(`.o_ComposerTextInput_textarea`).focus();
        document.execCommand('insertText',false,"@");
        document.querySelector(`.o_ComposerTextInput_textarea`)
            .dispatchEvent(newwindow.KeyboardEvent('keydown'));
        document.querySelector(`.o_ComposerTextInput_textarea`)
            .dispatchEvent(newwindow.KeyboardEvent('keyup'));
        document.execCommand('insertText',false,"T");
        document.querySelector(`.o_ComposerTextInput_textarea`)
            .dispatchEvent(newwindow.KeyboardEvent('keydown'));
        document.querySelector(`.o_ComposerTextInput_textarea`)
            .dispatchEvent(newwindow.KeyboardEvent('keyup'));
        document.execCommand('insertText',false,"e");
        document.querySelector(`.o_ComposerTextInput_textarea`)
            .dispatchEvent(newwindow.KeyboardEvent('keydown'));
        document.querySelector(`.o_ComposerTextInput_textarea`)
            .dispatchEvent(newwindow.KeyboardEvent('keyup'));
    });
    assert.containsOnce(
        document.body,
        '.o_ComposerSuggestion',
        "mentionsuggestionshouldbeopenedaftertyping@"
    );

    awaitafterNextRender(()=>{
        constev=newwindow.KeyboardEvent('keydown',{bubbles:true,key:"Escape"});
        document.querySelector(`.o_ComposerTextInput_textarea`).dispatchEvent(ev);
    });
    assert.containsNone(
        document.body,
        '.o_ComposerSuggestion',
        "mentionsuggestionshouldbeclosedafterpressingescapeonmentionsuggestion"
    );
    assert.containsOnce(
        document.body,
        '.o_Composer',
        "replycomposershouldstillbeopenedafterpressingescapeonmentionsuggestion"
    );

    awaitafterNextRender(()=>{
        constev=newwindow.KeyboardEvent('keydown',{bubbles:true,key:"Escape"});
        document.querySelector(`.o_ComposerTextInput_textarea`).dispatchEvent(ev);
    });
    assert.containsNone(
        document.body,
        '.o_Composer',
        "replycomposershouldbeclosedafterpressingescapeiftherewasnootherpriorityescapehandler"
    );
});

QUnit.test('reply:discardondiscardbuttonclick',asyncfunction(assert){
    assert.expect(4);

    this.data['mail.message'].records.push({
        body:"notempty",
        model:'res.partner',
        needaction:true,
        needaction_partner_ids:[this.data.currentPartnerId],
        res_id:20,
    });
    awaitthis.start();
    assert.containsOnce(
        document.body,
        '.o_Message',
        "shoulddisplayasinglemessage"
    );

    awaitafterNextRender(()=>
        document.querySelector('.o_Message_commandReply').click()
    );
    assert.containsOnce(
        document.body,
        '.o_Composer',
        "shouldhavecomposerafterclickingonreplytomessage"
    );
    assert.containsOnce(
        document.body,
        '.o_Composer_buttonDiscard',
        "composershouldhaveadiscardbutton"
    );

    awaitafterNextRender(()=>
        document.querySelector(`.o_Composer_buttonDiscard`).click()
    );
    assert.containsNone(
        document.body,
        '.o_Composer',
        "replycomposershouldbeclosedafterclickingondiscard"
    );
});

QUnit.test('reply:discardonreplybuttontoggle',asyncfunction(assert){
    assert.expect(3);

    this.data['mail.message'].records.push({
        body:"notempty",
        model:'res.partner',
        needaction:true,
        needaction_partner_ids:[this.data.currentPartnerId],
        res_id:20,
    });
    awaitthis.start();
    assert.containsOnce(
        document.body,
        '.o_Message',
        "shoulddisplayasinglemessage"
    );

    awaitafterNextRender(()=>
        document.querySelector('.o_Message_commandReply').click()
    );
    assert.containsOnce(
        document.body,
        '.o_Composer',
        "shouldhavecomposerafterclickingonreplytomessage"
    );

    awaitafterNextRender(()=>
        document.querySelector(`.o_Message_commandReply`).click()
    );
    assert.containsNone(
        document.body,
        '.o_Composer',
        "replycomposershouldbeclosedafterclickingonreplybuttonagain"
    );
});

QUnit.test('reply:discardonclickaway',asyncfunction(assert){
    assert.expect(7);

    this.data['mail.message'].records.push({
        body:"notempty",
        model:'res.partner',
        needaction:true,
        needaction_partner_ids:[this.data.currentPartnerId],
        res_id:20,
    });
    awaitthis.start();
    assert.containsOnce(
        document.body,
        '.o_Message',
        "shoulddisplayasinglemessage"
    );

    awaitafterNextRender(()=>
        document.querySelector('.o_Message_commandReply').click()
    );
    assert.containsOnce(
        document.body,
        '.o_Composer',
        "shouldhavecomposerafterclickingonreplytomessage"
    );

    document.querySelector(`.o_ComposerTextInput_textarea`).click();
    awaitnextAnimationFrame();//waitjustincase,butnothingissupposedtohappen
    assert.containsOnce(
        document.body,
        '.o_Composer',
        "replycomposershouldstillbethereafterclickinginsideitself"
    );

    awaitafterNextRender(()=>
        document.querySelector(`.o_Composer_buttonEmojis`).click()
    );
    assert.containsOnce(
        document.body,
        '.o_EmojisPopover',
        "emojispopovershouldbeopenedafterclickingonemojisbutton"
    );

    awaitafterNextRender(()=>{
        document.querySelector(`.o_EmojisPopover_emoji`).click();
    });
    assert.containsNone(
        document.body,
        '.o_EmojisPopover',
        "emojispopovershouldbeclosedafterselectinganemoji"
    );
    assert.containsOnce(
        document.body,
        '.o_Composer',
        "replycomposershouldstillbethereafterselectinganemoji(eventhoughitistechnicallyaclickaway,itshouldbeconsideredinside)"
    );

    awaitafterNextRender(()=>
        document.querySelector(`.o_Message`).click()
    );
    assert.containsNone(
        document.body,
        '.o_Composer',
        "replycomposershouldbeclosedafterclickingaway"
    );
});

QUnit.test('"replyto"composershouldlognoteifmessagerepliedtoisanote',asyncfunction(assert){
    assert.expect(6);

    this.data['mail.message'].records.push({
        body:"notempty",
        is_discussion:false,
        model:'res.partner',
        needaction:true,
        needaction_partner_ids:[this.data.currentPartnerId],
        res_id:20,
    });
    awaitthis.start({
        asyncmockRPC(route,args){
            if(args.method==='message_post'){
                assert.step('message_post');
                assert.strictEqual(
                    args.kwargs.message_type,
                    "comment",
                    "shouldsetmessagetypeas'comment'"
                );
                assert.strictEqual(
                    args.kwargs.subtype_xmlid,
                    "mail.mt_note",
                    "shouldsetsubtype_xmlidas'note'"
                );
            }
            returnthis._super(...arguments);
        },
    });
    assert.containsOnce(
        document.body,
        '.o_Message',
        "shoulddisplayasinglemessage"
    );

    awaitafterNextRender(()=>
        document.querySelector('.o_Message_commandReply').click()
    );
    assert.strictEqual(
        document.querySelector('.o_Composer_buttonSend').textContent.trim(),
        "Log",
        "Sendbuttontextshouldbe'Log'"
    );

    awaitafterNextRender(()=>
        document.execCommand('insertText',false,"Test")
    );
    awaitafterNextRender(()=>
        document.querySelector('.o_Composer_buttonSend').click()
    );
    assert.verifySteps(['message_post']);
});

QUnit.test('"replyto"composershouldsendmessageifmessagerepliedtoisnotanote',asyncfunction(assert){
    assert.expect(6);

    this.data['mail.message'].records.push({
        body:"notempty",
        is_discussion:true,
        model:'res.partner',
        needaction:true,
        needaction_partner_ids:[this.data.currentPartnerId],
        res_id:20,
    });
    awaitthis.start({
        asyncmockRPC(route,args){
            if(args.method==='message_post'){
                assert.step('message_post');
                assert.strictEqual(
                    args.kwargs.message_type,
                    "comment",
                    "shouldsetmessagetypeas'comment'"
                );
                assert.strictEqual(
                    args.kwargs.subtype_xmlid,
                    "mail.mt_comment",
                    "shouldsetsubtype_xmlidas'comment'"
                );
            }
            returnthis._super(...arguments);
        },
    });
    assert.containsOnce(
        document.body,
        '.o_Message',
        "shoulddisplayasinglemessage"
    );

    awaitafterNextRender(()=>
        document.querySelector('.o_Message_commandReply').click()
    );
    assert.strictEqual(
        document.querySelector('.o_Composer_buttonSend').textContent.trim(),
        "Send",
        "Sendbuttontextshouldbe'Send'"
    );

    awaitafterNextRender(()=>
        document.execCommand('insertText',false,"Test")
    );
    awaitafterNextRender(()=>
        document.querySelector('.o_Composer_buttonSend').click()
    );
    assert.verifySteps(['message_post']);
});

QUnit.test('errornotificationsshouldnotbeshowninInbox',asyncfunction(assert){
    assert.expect(3);

    this.data['mail.message'].records.push({
        body:"notempty",
        id:100,
        model:'mail.channel',
        needaction:true,
        needaction_partner_ids:[this.data.currentPartnerId],
        res_id:20,
    });
    this.data['mail.notification'].records.push({
        mail_message_id:100,//idofrelatedmessage
        res_partner_id:this.data.currentPartnerId,//mustbeforcurrentpartner
        notification_status:'exception',
        notification_type:'email',
    });
    awaitthis.start();
    assert.containsOnce(
        document.body,
        '.o_Message',
        "shoulddisplayasinglemessage"
    );
    assert.containsOnce(
        document.body,
        '.o_Message_originThreadLink',
        "shoulddisplayoriginthreadlink"
    );
    assert.containsNone(
        document.body,
        '.o_Message_notificationIcon',
        "shouldnotdisplayanynotificationiconinInbox"
    );
});

QUnit.test('showsubjectofmessageinInbox',asyncfunction(assert){
    assert.expect(3);

    this.data['mail.message'].records.push({
        body:"notempty",
        model:'mail.channel',//randomexistingmodel
        needaction:true,//message_fetchdomain
        needaction_partner_ids:[this.data.currentPartnerId],//notneeded,forconsistency
        subject:"Salutations,voyageur",//willbeassertedinthetest
    });
    awaitthis.start();
    assert.containsOnce(
        document.body,
        '.o_Message',
        "shoulddisplayasinglemessage"
    );
    assert.containsOnce(
        document.body,
        '.o_Message_subject',
        "shoulddisplaysubjectofthemessage"
    );
    assert.strictEqual(
        document.querySelector('.o_Message_subject').textContent,
        "Subject:Salutations,voyageur",
        "Subjectofthemessageshouldbe'Salutations,voyageur'"
    );
});

QUnit.test('showsubjectofmessageinhistory',asyncfunction(assert){
    assert.expect(3);

    this.data['mail.message'].records.push({
        body:"notempty",
        history_partner_ids:[3],//notneeded,forconsistency
        model:'mail.channel',//randomexistingmodel
        subject:"Salutations,voyageur",//willbeassertedinthetest
    });
    awaitthis.start({
        discuss:{
            params:{
                default_active_id:'mail.box_history',
            },
        },
    });
    assert.containsOnce(
        document.body,
        '.o_Message',
        "shoulddisplayasinglemessage"
    );
    assert.containsOnce(
        document.body,
        '.o_Message_subject',
        "shoulddisplaysubjectofthemessage"
    );
    assert.strictEqual(
        document.querySelector('.o_Message_subject').textContent,
        "Subject:Salutations,voyageur",
        "Subjectofthemessageshouldbe'Salutations,voyageur'"
    );
});

QUnit.test('clickon(non-channel/non-partner)originthreadlinkshouldredirecttoformview',asyncfunction(assert){
    assert.expect(9);

    constbus=newBus();
    bus.on('do-action',null,payload=>{
        //Callbackofdoinganaction(actionmanager).
        //Expectedtobecalledonclickonoriginthreadlink,
        //whichredirectstoformviewofrecordrelatedtooriginthread
        assert.step('do-action');
        assert.strictEqual(
            payload.action.type,
            'ir.actions.act_window',
            "actionshouldopenaview"
        );
        assert.deepEqual(
            payload.action.views,
            [[false,'form']],
            "actionshouldopenformview"
        );
        assert.strictEqual(
            payload.action.res_model,
            'some.model',
            "actionshouldopenviewwithmodel'some.model'(modelofmessageoriginthread)"
        );
        assert.strictEqual(
            payload.action.res_id,
            10,
            "actionshouldopenviewwithid10(idofmessageoriginthread)"
        );
    });
    this.data['some.model']={fields:{},records:[{id:10}]};
    this.data['mail.message'].records.push({
        body:"notempty",
        model:'some.model',
        needaction:true,
        needaction_partner_ids:[this.data.currentPartnerId],
        record_name:"Somerecord",
        res_id:10,
    });
    awaitthis.start({
        env:{
            bus,
        },
    });
    assert.containsOnce(
        document.body,
        '.o_Message',
        "shoulddisplayasinglemessage"
    );
    assert.containsOnce(
        document.body,
        '.o_Message_originThreadLink',
        "shoulddisplayoriginthreadlink"
    );
    assert.strictEqual(
        document.querySelector('.o_Message_originThreadLink').textContent,
        "Somerecord",
        "originthreadlinkshoulddisplayrecordname"
    );

    document.querySelector('.o_Message_originThreadLink').click();
    assert.verifySteps(['do-action'],"shouldhavemadeanactiononclickonoriginthread(toopenformview)");
});

QUnit.test('subjectshouldnotbeshownwhensubjectisthesameasthethreadname',asyncfunction(assert){
    assert.expect(1);

    this.data['mail.message'].records.push({
        body:"notempty",
        channel_ids:[100],
        model:'mail.channel',
        res_id:100,
        needaction:true,
        subject:"Salutations,voyageur",
    });
    this.data['mail.channel'].records.push({
        id:100,
        name:"Salutations,voyageur",
    });
    awaitthis.start();

    assert.containsNone(
        document.body,
        '.o_Message_subject',
        "subjectshouldnotbeshownwhensubjectisthesameasthethreadname"
    );
});

QUnit.test('subjectshouldnotbeshownwhensubjectisthesameasthethreadnameandbothhavethesameprefix',asyncfunction(assert){
    assert.expect(1);

    this.data['mail.message'].records.push({
        body:"notempty",
        channel_ids:[100],
        model:'mail.channel',
        res_id:100,
        needaction:true,
        subject:"Re:Salutations,voyageur",
    });
    this.data['mail.channel'].records.push({
        id:100,
        name:"Re:Salutations,voyageur",
    });
    awaitthis.start();

    assert.containsNone(
        document.body,
        '.o_Message_subject',
        "subjectshouldnotbeshownwhensubjectisthesameasthethreadnameandbothhavethesameprefix"
    );
});

QUnit.test('subjectshouldnotbeshownwhensubjectdiffersfromthreadnameonlybythe"Re:"prefix',asyncfunction(assert){
    assert.expect(1);

    this.data['mail.message'].records.push({
        body:"notempty",
        channel_ids:[100],
        model:'mail.channel',
        res_id:100,
        needaction:true,
        subject:"Re:Salutations,voyageur",
    });
    this.data['mail.channel'].records.push({
        id:100,
        name:"Salutations,voyageur",
    });
    awaitthis.start();

    assert.containsNone(
        document.body,
        '.o_Message_subject',
        "shouldnotdisplaysubjectwhensubjectdiffersfromthreadnameonlybythe'Re:'prefix"
    );
});

QUnit.test('subjectshouldnotbeshownwhensubjectdiffersfromthreadnameonlybythe"Fw:"and"Re:"prefix',asyncfunction(assert){
    assert.expect(1);

    this.data['mail.message'].records.push({
        body:"notempty",
        channel_ids:[100],
        model:'mail.channel',
        res_id:100,
        needaction:true,
        subject:"Fw:Re:Salutations,voyageur",
    });
    this.data['mail.channel'].records.push({
        id:100,
        name:"Salutations,voyageur",
    });
    awaitthis.start();

    assert.containsNone(
        document.body,
        '.o_Message_subject',
        "shouldnotdisplaysubjectwhensubjectdiffersfromthreadnameonlybythe'Fw:'andRe:'prefix"
    );
});

QUnit.test('subjectshouldbeshownwhenthethreadnamehasanextraprefixcomparedtosubject',asyncfunction(assert){
    assert.expect(1);

    this.data['mail.message'].records.push({
        body:"notempty",
        channel_ids:[100],
        model:'mail.channel',
        res_id:100,
        needaction:true,
        subject:"Salutations,voyageur",
    });
    this.data['mail.channel'].records.push({
        id:100,
        name:"Re:Salutations,voyageur",
    });
    awaitthis.start();

    assert.containsOnce(
        document.body,
        '.o_Message_subject',
        "subjectshouldbeshownwhenthethreadnamehasanextraprefixcomparedtosubject"
    );
});

QUnit.test('subjectshouldnotbeshownwhensubjectdiffersfromthreadnameonlybythe"fw:"prefixandbothcontainanothercommonprefix',asyncfunction(assert){
    assert.expect(1);

    this.data['mail.message'].records.push({
        body:"notempty",
        channel_ids:[100],
        model:'mail.channel',
        res_id:100,
        needaction:true,
        subject:"fw:re:Salutations,voyageur",
    });
    this.data['mail.channel'].records.push({
        id:100,
        name:"Re:Salutations,voyageur",
    });
    awaitthis.start();

    assert.containsNone(
        document.body,
        '.o_Message_subject',
        "subjectshouldnotbeshownwhensubjectdiffersfromthreadnameonlybythe'fw:'prefixandbothcontainanothercommonprefix"
    );
});

QUnit.test('subjectshouldnotbeshownwhensubjectdiffersfromthreadnameonlybythe"Re:Re:"prefix',asyncfunction(assert){
    assert.expect(1);

    this.data['mail.message'].records.push({
        body:"notempty",
        channel_ids:[100],
        model:'mail.channel',
        res_id:100,
        needaction:true,
        subject:"Re:Re:Salutations,voyageur",
    });
    this.data['mail.channel'].records.push({
        id:100,
        name:"Salutations,voyageur",
    });
    awaitthis.start();

    assert.containsNone(
        document.body,
        '.o_Message_subject',
        "shouldnotdisplaysubjectwhensubjectdiffersfromthreadnameonlybythe'Re:Re:''prefix"
    );
});

});
});
});

});
