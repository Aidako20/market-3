flectra.define('mail/static/src/components/thread_preview/thread_preview_tests.js',function(require){
'usestrict';

constcomponents={
    ThreadPreview:require('mail/static/src/components/thread_preview/thread_preview.js'),
};

const{
    afterEach,
    afterNextRender,
    beforeEach,
    createRootComponent,
    start,
}=require('mail/static/src/utils/test_utils.js');

QUnit.module('mail',{},function(){
QUnit.module('components',{},function(){
QUnit.module('thread_preview',{},function(){
QUnit.module('thread_preview_tests.js',{
    beforeEach(){
        beforeEach(this);

        this.createThreadPreviewComponent=asyncprops=>{
            awaitcreateRootComponent(this,components.ThreadPreview,{
                props,
                target:this.widget.el,
            });
        };

        this.start=asyncparams=>{
            const{env,widget}=awaitstart(Object.assign({},params,{
                data:this.data,
            }));
            this.env=env;
            this.widget=widget;
        };
    },
    afterEach(){
        afterEach(this);
    },
});

QUnit.test('markasread',asyncfunction(assert){
    assert.expect(8);
    this.data['mail.channel'].records.push({
        id:11,
        message_unread_counter:1,
    });
    this.data['mail.message'].records.push({
        channel_ids:[11],
        id:100,
        model:'mail.channel',
        res_id:11,
    });

    awaitthis.start({
        hasChatWindow:true,
        asyncmockRPC(route,args){
            if(route.includes('channel_seen')){
                assert.step('channel_seen');
            }
            returnthis._super(...arguments);
        },
    });
    constthread=this.env.models['mail.thread'].findFromIdentifyingData({
        id:11,
        model:'mail.channel',
    });
    awaitthis.createThreadPreviewComponent({threadLocalId:thread.localId});
    assert.containsOnce(
        document.body,
        '.o_ThreadPreview_markAsRead',
        "shouldhavethemarkasreadbutton"
    );
    assert.containsOnce(
        document.body,
        '.o_ThreadPreview_counter',
        "shouldhaveanunreadcounter"
    );

    awaitafterNextRender(()=>
        document.querySelector('.o_ThreadPreview_markAsRead').click()
    );
    assert.verifySteps(
        ['channel_seen'],
        "shouldhavemarkedthethreadasseen"
    );
    assert.hasClass(
        document.querySelector('.o_ThreadPreview'),
        'o-muted',
        "shouldbemutedoncemarkedasread"
    );
    assert.containsNone(
        document.body,
        '.o_ThreadPreview_markAsRead',
        "shouldnolongerhavethemarkasreadbutton"
    );
    assert.containsNone(
        document.body,
        '.o_ThreadPreview_counter',
        "shouldnolongerhaveanunreadcounter"
    );
    assert.containsNone(
        document.body,
        '.o_ChatWindow',
        "shouldnothaveopenedthethread"
    );
});

});
});
});

});
