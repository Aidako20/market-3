flectra.define('mail/static/src/components/thread_view/thread_view.js',function(require){
'usestrict';

constcomponents={
    Composer:require('mail/static/src/components/composer/composer.js'),
    MessageList:require('mail/static/src/components/message_list/message_list.js'),
};
constuseShouldUpdateBasedOnProps=require('mail/static/src/component_hooks/use_should_update_based_on_props/use_should_update_based_on_props.js');
constuseStore=require('mail/static/src/component_hooks/use_store/use_store.js');
constuseUpdate=require('mail/static/src/component_hooks/use_update/use_update.js');

const{Component}=owl;
const{useRef}=owl.hooks;

classThreadViewextendsComponent{

    /**
     *@param{...any}args
     */
    constructor(...args){
        super(...args);
        useShouldUpdateBasedOnProps();
        useStore((...args)=>this._useStoreSelector(...args),{
            compareDepth:{
                threadTextInputSendShortcuts:1,
            },
        });
        useUpdate({func:()=>this._update()});
        /**
         *Referenceofthecomposer.Usefultosetfocusoncomposerwhen
         *threadhasthefocus.
         */
        this._composerRef=useRef('composer');
        /**
         *Referenceofthemessagelist.Usefultodeterminescrollpositions.
         */
        this._messageListRef=useRef('messageList');
    }

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *Focusthethread.Ifithasacomposer,focusit.
     */
    focus(){
        if(!this._composerRef.comp){
            return;
        }
        this._composerRef.comp.focus();
    }

    /**
     *Focusoutthethread.
     */
    focusout(){
        if(!this._composerRef.comp){
            return;
        }
        this._composerRef.comp.focusout();
    }

    /**
     *Getthescrollheightinthemessagelist.
     *
     *@returns{integer|undefined}
     */
    getScrollHeight(){
        if(!this._messageListRef.comp){
            returnundefined;
        }
        returnthis._messageListRef.comp.getScrollHeight();
    }

    /**
     *Getthescrollpositioninthemessagelist.
     *
     *@returns{integer|undefined}
     */
    getScrollTop(){
        if(!this._messageListRef.comp){
            returnundefined;
        }
        returnthis._messageListRef.comp.getScrollTop();
    }

    /**
     *@private
     *@param{MouseEvent}ev
     */
    onScroll(ev){
        if(!this._messageListRef.comp){
            return;
        }
        this._messageListRef.comp.onScroll(ev);
    }

    /**
     *@returns{mail.thread_view}
     */
    getthreadView(){
        returnthis.env.models['mail.thread_view'].get(this.props.threadViewLocalId);
    }

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *Calledwhenthreadcomponentismountedorpatched.
     *
     *@private
     */
    _update(){
        this.trigger('o-rendered');
    }

    /**
     *Returnsdataselectedfromthestore.
     *
     *@private
     *@param{Object}props
     *@returns{Object}
     */
    _useStoreSelector(props){
        constthreadView=this.env.models['mail.thread_view'].get(props.threadViewLocalId);
        constthread=threadView?threadView.thread:undefined;
        constthreadCache=threadView?threadView.threadCache:undefined;
        constcorrespondent=thread&&thread.correspondent;
        return{
            composer:thread&&thread.composer,
            correspondentId:correspondent&&correspondent.id,
            isDeviceMobile:this.env.messaging.device.isMobile,
            thread,
            threadCacheIsLoaded:threadCache&&threadCache.isLoaded,
            threadIsTemporary:thread&&thread.isTemporary,
            threadMassMailing:thread&&thread.mass_mailing,
            threadModel:thread&&thread.model,
            threadTextInputSendShortcuts:thread&&thread.textInputSendShortcuts||[],
            threadView,
            threadViewIsLoading:threadView&&threadView.isLoading,
        };
    }

}

Object.assign(ThreadView,{
    components,
    defaultProps:{
        composerAttachmentsDetailsMode:'auto',
        hasComposer:false,
        hasMessageCheckbox:false,
        hasSquashCloseMessages:false,
        haveMessagesMarkAsReadIcon:false,
        haveMessagesReplyIcon:false,
        isDoFocus:false,
        order:'asc',
        showComposerAttachmentsExtensions:true,
        showComposerAttachmentsFilenames:true,
    },
    props:{
        composerAttachmentsDetailsMode:{
            type:String,
            validate:prop=>['auto','card','hover','none'].includes(prop),
        },
        hasComposer:Boolean,
        hasComposerCurrentPartnerAvatar:{
            type:Boolean,
            optional:true,
        },
        hasComposerSendButton:{
            type:Boolean,
            optional:true,
        },
        /**
         *Ifset,determineswhetherthecomposershoulddisplaystatusof
         *memberstypingonrelatedthread.Whenthispropisnotprovided,
         *itdefaultstocomposercomponentdefaultvalue.
         */
        hasComposerThreadTyping:{
            type:Boolean,
            optional:true,
        },
        hasMessageCheckbox:Boolean,
        hasScrollAdjust:{
            type:Boolean,
            optional:true,
        },
        hasSquashCloseMessages:Boolean,
        haveMessagesMarkAsReadIcon:Boolean,
        haveMessagesReplyIcon:Boolean,
        /**
         *Determineswhetherthisshouldbecomefocused.
         */
        isDoFocus:Boolean,
        order:{
            type:String,
            validate:prop=>['asc','desc'].includes(prop),
        },
        selectedMessageLocalId:{
            type:String,
            optional:true,
        },
        /**
         *Functionreturnstheexactscrollableelementfromtheparent
         *tomanageproperscrollheightswhichaffectstheloadmoremessages.
         */
        getScrollableElement:{
            type:Function,
            optional:true,
        },
        showComposerAttachmentsExtensions:Boolean,
        showComposerAttachmentsFilenames:Boolean,
        threadViewLocalId:String,
    },
    template:'mail.ThreadView',
});

returnThreadView;

});
