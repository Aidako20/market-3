flectra.define('mail/static/src/components/message_seen_indicator/message_seen_indicator_tests',function(require){
'usestrict';

constcomponents={
    MessageSendIndicator:require('mail/static/src/components/message_seen_indicator/message_seen_indicator.js'),
};
const{
    afterEach,
    beforeEach,
    createRootComponent,
    start,
}=require('mail/static/src/utils/test_utils.js');

QUnit.module('mail',{},function(){
QUnit.module('components',{},function(){
QUnit.module('message_seen_indicator',{},function(){
QUnit.module('message_seen_indicator_tests.js',{
    beforeEach(){
        beforeEach(this);

        this.createMessageSeenIndicatorComponent=async({message,thread},otherProps)=>{
            constprops=Object.assign(
                {messageLocalId:message.localId,threadLocalId:thread.localId},
                otherProps
            );
            awaitcreateRootComponent(this,components.MessageSendIndicator,{
                props,
                target:this.widget.el,
            });
        };

        this.start=asyncparams=>{
            const{env,widget}=awaitstart(Object.assign({},params,{
                data:this.data,
            }));
            this.env=env;
            this.widget=widget;
        };
    },
    afterEach(){
        afterEach(this);
    },
});

QUnit.test('renderingwhenjustonehasreceivedthemessage',asyncfunction(assert){
    assert.expect(3);

    awaitthis.start();
    constthread=this.env.models['mail.thread'].create({
        id:1000,
        model:'mail.channel',
        partnerSeenInfos:[['create',[
            {
                channelId:1000,
                lastFetchedMessage:[['insert',{id:100}]],
                partnerId:10,
            },
            {
                channelId:1000,
                partnerId:100,
            },
        ]]],
        messageSeenIndicators:[['insert',{
            channelId:1000,
            messageId:100,
        }]],
    });
    constmessage=this.env.models['mail.message'].insert({
        author:[['insert',{id:this.env.messaging.currentPartner.id,display_name:"DemoUser"}]],
        body:"<p>Test</p>",
        id:100,
        originThread:[['link',thread]],
    });
    awaitthis.createMessageSeenIndicatorComponent({message,thread});
    assert.containsOnce(
        document.body,
        '.o_MessageSeenIndicator',
        "shoulddisplayamessageseenindicatorcomponent"
    );
    assert.doesNotHaveClass(
        document.querySelector('.o_MessageSeenIndicator'),
        'o-all-seen',
        "indicatorcomponentshouldnotbeconsideredasallseen"
    );
    assert.containsOnce(
        document.body,
        '.o_MessageSeenIndicator_icon',
        "shoulddisplayonlyoneseenindicatoricon"
    );
});

QUnit.test('renderingwheneveryonehavereceivedthemessage',asyncfunction(assert){
    assert.expect(3);

    awaitthis.start();
    constthread=this.env.models['mail.thread'].create({
        id:1000,
        model:'mail.channel',
        partnerSeenInfos:[['create',[
            {
                channelId:1000,
                lastFetchedMessage:[['insert',{id:100}]],
                partnerId:10,
            },
            {
                channelId:1000,
                lastFetchedMessage:[['insert',{id:99}]],
                partnerId:100,
            },
        ]]],
        messageSeenIndicators:[['insert',{
            channelId:1000,
            messageId:100,
        }]],
    });
    constmessage=this.env.models['mail.message'].insert({
        author:[['insert',{id:this.env.messaging.currentPartner.id,display_name:"DemoUser"}]],
        body:"<p>Test</p>",
        id:100,
        originThread:[['link',thread]],
    });
    awaitthis.createMessageSeenIndicatorComponent({message,thread});
    assert.containsOnce(
        document.body,
        '.o_MessageSeenIndicator',
        "shoulddisplayamessageseenindicatorcomponent"
    );
    assert.doesNotHaveClass(
        document.querySelector('.o_MessageSeenIndicator'),
        'o-all-seen',
        "indicatorcomponentshouldnotbeconsideredasallseen"
    );
    assert.containsOnce(
        document.body,
        '.o_MessageSeenIndicator_icon',
        "shoulddisplayonlyoneseenindicatoricon"
    );
});

QUnit.test('renderingwhenjustonehasseenthemessage',asyncfunction(assert){
    assert.expect(3);

    awaitthis.start();
    constthread=this.env.models['mail.thread'].create({
        id:1000,
        model:'mail.channel',
        partnerSeenInfos:[['create',[
            {
                channelId:1000,
                lastFetchedMessage:[['insert',{id:100}]],
                lastSeenMessage:[['insert',{id:100}]],
                partnerId:10,
            },
            {
                channelId:1000,
                lastFetchedMessage:[['insert',{id:99}]],
                partnerId:100,
            },
        ]]],
        messageSeenIndicators:[['insert',{
            channelId:1000,
            messageId:100,
        }]],
    });
    constmessage=this.env.models['mail.message'].insert({
        author:[['insert',{id:this.env.messaging.currentPartner.id,display_name:"DemoUser"}]],
        body:"<p>Test</p>",
        id:100,
        originThread:[['link',thread]],
    });
    awaitthis.createMessageSeenIndicatorComponent({message,thread});
    assert.containsOnce(
        document.body,
        '.o_MessageSeenIndicator',
        "shoulddisplayamessageseenindicatorcomponent"
    );
    assert.doesNotHaveClass(
        document.querySelector('.o_MessageSeenIndicator'),
        'o-all-seen',
        "indicatorcomponentshouldnotbeconsideredasallseen"
    );
    assert.containsN(
        document.body,
        '.o_MessageSeenIndicator_icon',
        2,
        "shoulddisplaytwoseenindicatoricon"
    );
});

QUnit.test('renderingwhenjustonehasseen&receivedthemessage',asyncfunction(assert){
    assert.expect(3);

    awaitthis.start();
    constthread=this.env.models['mail.thread'].create({
        id:1000,
        model:'mail.channel',
        partnerSeenInfos:[['create',[
            {
                channelId:1000,
                lastFetchedMessage:[['insert',{id:100}]],
                lastSeenMessage:[['insert',{id:100}]],
                partnerId:10,
            },
            {
                channelId:1000,
                partnerId:100,
            },
        ]]],
        messageSeenIndicators:[['insert',{
            channelId:1000,
            messageId:100,
        }]],
    });
    constmessage=this.env.models['mail.message'].insert({
        author:[['insert',{id:this.env.messaging.currentPartner.id,display_name:"DemoUser"}]],
        body:"<p>Test</p>",
        id:100,
        originThread:[['link',thread]],
    });
    awaitthis.createMessageSeenIndicatorComponent({message,thread});
    assert.containsOnce(
        document.body,
        '.o_MessageSeenIndicator',
        "shoulddisplayamessageseenindicatorcomponent"
    );
    assert.doesNotHaveClass(
        document.querySelector('.o_MessageSeenIndicator'),
        'o-all-seen',
        "indicatorcomponentshouldnotbeconsideredasallseen"
    );
    assert.containsN(
        document.body,
        '.o_MessageSeenIndicator_icon',
        2,
        "shoulddisplaytwoseenindicatoricon"
    );
});

QUnit.test('renderingwhenjusteveryonehasseenthemessage',asyncfunction(assert){
    assert.expect(3);

    awaitthis.start();
    constthread=this.env.models['mail.thread'].create({
        id:1000,
        model:'mail.channel',
        partnerSeenInfos:[['create',[
            {
                channelId:1000,
                lastFetchedMessage:[['insert',{id:100}]],
                lastSeenMessage:[['insert',{id:100}]],
                partnerId:10,
            },
            {
                channelId:1000,
                lastFetchedMessage:[['insert',{id:100}]],
                lastSeenMessage:[['insert',{id:100}]],
                partnerId:100,
            },
        ]]],
        messageSeenIndicators:[['insert',{
            channelId:1000,
            messageId:100,
        }]],
    });
    constmessage=this.env.models['mail.message'].insert({
        author:[['insert',{id:this.env.messaging.currentPartner.id,display_name:"DemoUser"}]],
        body:"<p>Test</p>",
        id:100,
        originThread:[['link',thread]],
    });
    awaitthis.createMessageSeenIndicatorComponent({message,thread});
    assert.containsOnce(
        document.body,
        '.o_MessageSeenIndicator',
        "shoulddisplayamessageseenindicatorcomponent"
    );
    assert.hasClass(
        document.querySelector('.o_MessageSeenIndicator'),
        'o-all-seen',
        "indicatorcomponentshouldnotconsideredasallseen"
    );
    assert.containsN(
        document.body,
        '.o_MessageSeenIndicator_icon',
        2,
        "shoulddisplaytwoseenindicatoricon"
    );
});

});
});
});

});
