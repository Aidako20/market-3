flectra.define('mail/static/src/components/message_seen_indicator/message_seen_indicator.js',function(require){
'usestrict';

constuseShouldUpdateBasedOnProps=require('mail/static/src/component_hooks/use_should_update_based_on_props/use_should_update_based_on_props.js');
constuseStore=require('mail/static/src/component_hooks/use_store/use_store.js');

const{Component}=owl;

classMessageSeenIndicatorextendsComponent{

    /**
     *@override
     */
    constructor(...args){
        super(...args);
        useShouldUpdateBasedOnProps();
        useStore(props=>{
            constmessage=this.env.models['mail.message'].get(props.messageLocalId);
            constthread=this.env.models['mail.thread'].get(props.threadLocalId);
            constmessageSeenIndicator=thread&&thread.model==='mail.channel'
                ?this.env.models['mail.message_seen_indicator'].findFromIdentifyingData({
                    channelId:thread.id,
                    messageId:message.id,
                })
                :undefined;
            return{
                messageSeenIndicator:messageSeenIndicator?messageSeenIndicator.__state:undefined,
            };
        });
    }

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *@returns{string}
     */
    getindicatorTitle(){
        if(!this.messageSeenIndicator){
            return'';
        }
        if(this.messageSeenIndicator.hasEveryoneSeen){
            returnthis.env._t("SeenbyEveryone");
        }
        if(this.messageSeenIndicator.hasSomeoneSeen){
            constpartnersThatHaveSeen=this.messageSeenIndicator.partnersThatHaveSeen.map(
                partner=>partner.name
            );
            if(partnersThatHaveSeen.length===1){
                return_.str.sprintf(
                    this.env._t("Seenby%s"),
                    partnersThatHaveSeen[0]
                );
            }
            if(partnersThatHaveSeen.length===2){
                return_.str.sprintf(
                    this.env._t("Seenby%sand%s"),
                    partnersThatHaveSeen[0],
                    partnersThatHaveSeen[1]
                );
            }
            return_.str.sprintf(
                this.env._t("Seenby%s,%sandmore"),
                partnersThatHaveSeen[0],
                partnersThatHaveSeen[1]
            );
        }
        if(this.messageSeenIndicator.hasEveryoneFetched){
            returnthis.env._t("ReceivedbyEveryone");
        }
        if(this.messageSeenIndicator.hasSomeoneFetched){
            constpartnersThatHaveFetched=this.messageSeenIndicator.partnersThatHaveFetched.map(
                partner=>partner.name
            );
            if(partnersThatHaveFetched.length===1){
                return_.str.sprintf(
                    this.env._t("Receivedby%s"),
                    partnersThatHaveFetched[0]
                );
            }
            if(partnersThatHaveFetched.length===2){
                return_.str.sprintf(
                    this.env._t("Receivedby%sand%s"),
                    partnersThatHaveFetched[0],
                    partnersThatHaveFetched[1]
                );
            }
            return_.str.sprintf(
                this.env._t("Receivedby%s,%sandmore"),
                partnersThatHaveFetched[0],
                partnersThatHaveFetched[1]
            );
        }
        return'';
    }

    /**
     *@returns{mail.message}
     */
    getmessage(){
        returnthis.env.models['mail.message'].get(this.props.messageLocalId);
    }

    /**
     *@returns{mail.message_seen_indicator}
     */
    getmessageSeenIndicator(){
        if(!this.thread||this.thread.model!=='mail.channel'){
            returnundefined;
        }
        returnthis.env.models['mail.message_seen_indicator'].findFromIdentifyingData({
            channelId:this.thread.id,
            messageId:this.message.id,
        });
    }

    /**
     *@returns{mail.Thread}
     */
    getthread(){
        returnthis.env.models['mail.thread'].get(this.props.threadLocalId);
    }
}

Object.assign(MessageSeenIndicator,{
    props:{
        messageLocalId:String,
        threadLocalId:String,
    },
    template:'mail.MessageSeenIndicator',
});

returnMessageSeenIndicator;

});
