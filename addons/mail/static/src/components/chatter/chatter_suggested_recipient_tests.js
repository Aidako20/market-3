flectra.define('mail/static/src/components/chatter/chatter_suggested_recipient_tests',function(require){
'usestrict';

constcomponents={
    Chatter:require('mail/static/src/components/chatter/chatter.js'),
    Composer:require('mail/static/src/components/composer/composer.js'),
};
const{
    afterEach,
    afterNextRender,
    beforeEach,
    createRootComponent,
    nextTick,
    start,
}=require('mail/static/src/utils/test_utils.js');

QUnit.module('mail',{},function(){
QUnit.module('components',{},function(){
QUnit.module('chatter',{},function(){
QUnit.module('chatter_suggested_recipients_tests.js',{
    beforeEach(){
        beforeEach(this);

        this.createChatterComponent=async({chatter},otherProps)=>{
            constprops=Object.assign({chatterLocalId:chatter.localId},otherProps);
            awaitcreateRootComponent(this,components.Chatter,{
                props,
                target:this.widget.el,
            });
        };

        this.start=asyncparams=>{
            const{env,widget}=awaitstart(Object.assign({},params,{
                data:this.data,
            }));
            this.env=env;
            this.widget=widget;
        };
    },
    afterEach(){
        afterEach(this);
    },
});

QUnit.test("suggestrecipienton'Sendmessage'composer",asyncfunction(assert){
    assert.expect(1);

    this.data['res.partner'].records.push({
        display_name:"JohnJane",
        email:"john@jane.be",
        id:100,
    });
    this.data['res.fake'].records.push({
        id:10,
        email_cc:"john@test.be",
        partner_ids:[100],
    });
    awaitthis.start();
    constchatter=this.env.models['mail.chatter'].create({
        threadId:10,
        threadModel:'res.fake',
    });
    awaitthis.createChatterComponent({chatter});
    awaitafterNextRender(()=>
        document.querySelector(`.o_ChatterTopbar_buttonSendMessage`).click()
    );
    assert.containsOnce(
        document.body,
        '.o_ComposerSuggestedRecipientList',
        "Shoulddisplayalistofsuggestedrecipientsafteropeningthecomposerfrom'Sendmessage'button"
    );
});

QUnit.test("with3orlesssuggestedrecipients:no'showmore'button",asyncfunction(assert){
    assert.expect(1);

    this.data['res.partner'].records.push({
        display_name:"JohnJane",
        email:"john@jane.be",
        id:100,
    });
    this.data['res.fake'].records.push({
        id:10,
        email_cc:"john@test.be",
        partner_ids:[100],
    });
    awaitthis.start();
    constchatter=this.env.models['mail.chatter'].create({
        threadId:10,
        threadModel:'res.fake',
    });
    awaitthis.createChatterComponent({chatter});
    awaitafterNextRender(()=>
        document.querySelector(`.o_ChatterTopbar_buttonSendMessage`).click()
    );
    assert.containsNone(
        document.body,
        '.o_ComposerSuggestedRecipientList_showMore',
        "shouldnotdisplay'showmore'buttonwith3orlesssuggestedrecipients"
    );
});

QUnit.test("displayreasonforsuggestedrecipientonmouseover",asyncfunction(assert){
    assert.expect(1);

    this.data['res.partner'].records.push({
        display_name:"JohnJane",
        email:"john@jane.be",
        id:100,
    });
    this.data['res.fake'].records.push({
        id:10,
        partner_ids:[100],
    });
    awaitthis.start();
    constchatter=this.env.models['mail.chatter'].create({
        threadId:10,
        threadModel:'res.fake',
    });
    awaitthis.createChatterComponent({chatter});
    awaitafterNextRender(()=>
        document.querySelector(`.o_ChatterTopbar_buttonSendMessage`).click()
    );
    constpartnerTitle=document.querySelector('.o_ComposerSuggestedRecipient[data-partner-id="100"]').getAttribute('title');
    assert.strictEqual(
        partnerTitle,
        "Addasrecipientandfollower(reason:Emailpartner)",
        "mustdisplayreasonforsuggestedrecipientonmouseover",
    );
});

QUnit.test("suggestedrecipientwithoutpartnerareuncheckedbydefault",asyncfunction(assert){
    assert.expect(1);

    this.data['res.fake'].records.push({
        id:10,
        email_cc:"john@test.be",
    });
    awaitthis.start();
    constchatter=this.env.models['mail.chatter'].create({
        threadId:10,
        threadModel:'res.fake',
    });
    awaitthis.createChatterComponent({chatter});
    awaitafterNextRender(()=>
        document.querySelector(`.o_ChatterTopbar_buttonSendMessage`).click()
    );
    constcheckboxUnchecked=document.querySelector('.o_ComposerSuggestedRecipient:not([data-partner-id])input[type=checkbox]');
    assert.notOk(
        checkboxUnchecked.checked,
        "suggestedrecipientwithoutpartnermustbeuncheckedbydefault",
    );
});

QUnit.test("suggestedrecipientwithoutpartnerareuncheckedwhenclosingthedialogwithoutcreatingpartner",asyncfunction(assert){
    assert.expect(1);

    this.data['res.fake'].records.push({
        id:10,
        email_cc:"john@test.be",
    });

    constparams={
        archs:{},

    };
    params.archs["res.partner,false,form"]=`
        <form>
            <fieldname="name"/>
        </form>
    `;

    awaitthis.start(params);
    constchatter=this.env.models['mail.chatter'].create({
        threadId:10,
        threadModel:'res.fake',
    });
    awaitthis.createChatterComponent({chatter});
    awaitafterNextRender(()=>
        document.querySelector(`.o_ChatterTopbar_buttonSendMessage`).click()
    );
    //clickoncheckboxtoopendialog
    document.querySelector('.o_ComposerSuggestedRecipient:not([data-partner-id])input[type=checkbox]').click();
    awaitnextTick();
    //closedialogwithoutchanginganything
    document.querySelector('.modal-dialog.close').click();

    assert.notOk(
        document.querySelector('.o_ComposerSuggestedRecipient:not([data-partner-id])input[type=checkbox]').checked,
        "suggestedrecipientwithoutpartnermustbeunchecked",
    );
});

QUnit.test("suggestedrecipientwithpartnerarecheckedbydefault",asyncfunction(assert){
    assert.expect(1);

    this.data['res.partner'].records.push({
        display_name:"JohnJane",
        email:"john@jane.be",
        id:100,
    });
    this.data['res.fake'].records.push({
        id:10,
        partner_ids:[100],
    });
    awaitthis.start();
    constchatter=this.env.models['mail.chatter'].create({
        threadId:10,
        threadModel:'res.fake',
    });
    awaitthis.createChatterComponent({chatter});
    awaitafterNextRender(()=>
        document.querySelector(`.o_ChatterTopbar_buttonSendMessage`).click()
    );
    constcheckboxChecked=document.querySelector('.o_ComposerSuggestedRecipient[data-partner-id="100"]input[type=checkbox]');
    assert.ok(
        checkboxChecked.checked,
        "suggestedrecipientwithpartnermustbecheckedbydefault",
    );
});

QUnit.test("morethan3suggestedrecipients:displayonly3and'showmore'button",asyncfunction(assert){
    assert.expect(1);

    this.data['res.partner'].records.push({
        display_name:"JohnJane",
        email:"john@jane.be",
        id:100,
    });
    this.data['res.partner'].records.push({
        display_name:"JackJone",
        email:"jack@jone.be",
        id:1000,
    });
    this.data['res.partner'].records.push({
        display_name:"jollyRoger",
        email:"Roger@skullflag.com",
        id:1001,
    });
    this.data['res.partner'].records.push({
        display_name:"jacksparrow",
        email:"jsparrow@blackpearl.bb",
        id:1002,
    });
    this.data['res.fake'].records.push({
        id:10,
        partner_ids:[100,1000,1001,1002],
    });
    awaitthis.start();
    constchatter=this.env.models['mail.chatter'].create({
        threadId:10,
        threadModel:'res.fake',
    });
    awaitthis.createChatterComponent({chatter});

    awaitafterNextRender(()=>
        document.querySelector(`.o_ChatterTopbar_buttonSendMessage`).click()
    );
    assert.containsOnce(
        document.body,
        '.o_ComposerSuggestedRecipientList_showMore',
        "morethan3suggestedrecipientsdisplay'showmore'button"
    );
});

QUnit.test("morethan3suggestedrecipients:showallofthemonclick'showmore'button",asyncfunction(assert){
    assert.expect(1);

    this.data['res.partner'].records.push({
        display_name:"JohnJane",
        email:"john@jane.be",
        id:100,
    });
    this.data['res.partner'].records.push({
        display_name:"JackJone",
        email:"jack@jone.be",
        id:1000,
    });
    this.data['res.partner'].records.push({
        display_name:"jollyRoger",
        email:"Roger@skullflag.com",
        id:1001,
    });
    this.data['res.partner'].records.push({
        display_name:"jacksparrow",
        email:"jsparrow@blackpearl.bb",
        id:1002,
    });
    this.data['res.fake'].records.push({
        id:10,
        partner_ids:[100,1000,1001,1002],
    });
    awaitthis.start();
    constchatter=this.env.models['mail.chatter'].create({
        threadId:10,
        threadModel:'res.fake',
    });
    awaitthis.createChatterComponent({chatter});

    awaitafterNextRender(()=>
        document.querySelector(`.o_ChatterTopbar_buttonSendMessage`).click()
    );
    awaitafterNextRender(()=>
        document.querySelector(`.o_ComposerSuggestedRecipientList_showMore`).click()
    );
    assert.containsN(
        document.body,
        '.o_ComposerSuggestedRecipient',
        4,
        "morethan3suggestedrecipients:showallofthemonclick'showmore'button"
    );
});

QUnit.test("morethan3suggestedrecipients->click'showmore'->'showless'button",asyncfunction(assert){
    assert.expect(1);

    this.data['res.partner'].records.push({
        display_name:"JohnJane",
        email:"john@jane.be",
        id:100,
    });
    this.data['res.partner'].records.push({
        display_name:"JackJone",
        email:"jack@jone.be",
        id:1000,
    });
    this.data['res.partner'].records.push({
        display_name:"jollyRoger",
        email:"Roger@skullflag.com",
        id:1001,
    });
    this.data['res.partner'].records.push({
        display_name:"jacksparrow",
        email:"jsparrow@blackpearl.bb",
        id:1002,
    });
    this.data['res.fake'].records.push({
        id:10,
        partner_ids:[100,1000,1001,1002],
    });
    awaitthis.start();
    constchatter=this.env.models['mail.chatter'].create({
        threadId:10,
        threadModel:'res.fake',
    });
    awaitthis.createChatterComponent({chatter});

    awaitafterNextRender(()=>
        document.querySelector(`.o_ChatterTopbar_buttonSendMessage`).click()
    );
    awaitafterNextRender(()=>
        document.querySelector(`.o_ComposerSuggestedRecipientList_showMore`).click()
    );
    assert.containsOnce(
        document.body,
        '.o_ComposerSuggestedRecipientList_showLess',
        "morethan3suggestedrecipients->click'showmore'->'showless'button"
    );
});

QUnit.test("suggestedrecipientslistdisplay3suggestedrecipientand'showmore'buttonwhen'showless'buttonisclicked",asyncfunction(assert){
    assert.expect(2);

    this.data['res.partner'].records.push({
        display_name:"JohnJane",
        email:"john@jane.be",
        id:100,
    });
    this.data['res.partner'].records.push({
        display_name:"JackJone",
        email:"jack@jone.be",
        id:1000,
    });
    this.data['res.partner'].records.push({
        display_name:"jollyRoger",
        email:"Roger@skullflag.com",
        id:1001,
    });
    this.data['res.partner'].records.push({
        display_name:"jacksparrow",
        email:"jsparrow@blackpearl.bb",
        id:1002,
    });
    this.data['res.fake'].records.push({
        id:10,
        partner_ids:[100,1000,1001,1002],
    });
    awaitthis.start();
    constchatter=this.env.models['mail.chatter'].create({
        threadId:10,
        threadModel:'res.fake',
    });
    awaitthis.createChatterComponent({chatter});

    awaitafterNextRender(()=>
        document.querySelector(`.o_ChatterTopbar_buttonSendMessage`).click()
    );
    awaitafterNextRender(()=>
        document.querySelector(`.o_ComposerSuggestedRecipientList_showMore`).click()
    );
    awaitafterNextRender(()=>
        document.querySelector(`.o_ComposerSuggestedRecipientList_showLess`).click()
    );
    assert.containsN(
        document.body,
        '.o_ComposerSuggestedRecipient',
        3,
        "suggestedrecipientlistshoulddisplay3suggestedrecipientsafterclickingon'showless'."
    );
    assert.containsOnce(
        document.body,
        '.o_ComposerSuggestedRecipientList_showMore',
        "suggestedrecipientlistshouldcontainta'showMore'buttonafterclickingon'showless'."
    );
});

QUnit.test("suggestedrecipientsshouldnotbenotifiedwhenpostinganinternalnote",asyncfunction(assert){
    assert.expect(1);

    this.data['res.partner'].records.push({
        display_name:"JohnJane",
        email:"john@jane.be",
        id:100,
    });
    this.data['res.fake'].records.push({
        id:10,
        partner_ids:[100],
    });
    awaitthis.start({
        asyncmockRPC(route,args){
            if(args.model==='res.fake'&&args.method==='message_post'){
                assert.strictEqual(
                    args.kwargs.partner_ids.length,
                    0,
                    "message_postshouldnotcontainsuggestedrecipientswhenpostinganinternalnote"
                );
            }
            returnthis._super(...arguments);
        },
    });
    constchatter=this.env.models['mail.chatter'].create({
        threadId:10,
        threadModel:'res.fake',
    });
    awaitthis.createChatterComponent({chatter});
    awaitafterNextRender(()=>
        document.querySelector(`.o_ChatterTopbar_buttonLogNote`).click()
    );
    document.querySelector('.o_ComposerTextInput_textarea').focus();
    awaitafterNextRender(()=>document.execCommand('insertText',false,"DummyMessage"));
    awaitafterNextRender(()=>{
        document.querySelector('.o_Composer_buttonSend').click();
    });
});

});
});
});

});
