flectra.define('mail/static/src/components/chatter/chatter_tests',function(require){
'usestrict';

constcomponents={
    Chatter:require('mail/static/src/components/chatter/chatter.js'),
    Composer:require('mail/static/src/components/composer/composer.js'),
};
const{
    afterEach,
    afterNextRender,
    beforeEach,
    createRootComponent,
    nextAnimationFrame,
    start,
}=require('mail/static/src/utils/test_utils.js');

QUnit.module('mail',{},function(){
QUnit.module('components',{},function(){
QUnit.module('chatter',{},function(){
QUnit.module('chatter_tests.js',{
    beforeEach(){
        beforeEach(this);

        this.createChatterComponent=async({chatter},otherProps)=>{
            constprops=Object.assign({chatterLocalId:chatter.localId},otherProps);
            awaitcreateRootComponent(this,components.Chatter,{
                props,
                target:this.widget.el,
            });
        };

        this.createComposerComponent=async(composer,otherProps)=>{
            constprops=Object.assign({composerLocalId:composer.localId},otherProps);
            awaitcreateRootComponent(this,components.Composer,{
                props,
                target:this.widget.el,
            });
        };

        this.start=asyncparams=>{
            const{env,widget}=awaitstart(Object.assign({},params,{
                data:this.data,
            }));
            this.env=env;
            this.widget=widget;
        };
    },
    afterEach(){
        afterEach(this);
    },
});

QUnit.test('baserenderingwhenchatterhasnoattachment',asyncfunction(assert){
    assert.expect(6);

    this.data['res.partner'].records.push({id:100});
    for(leti=0;i<60;i++){
        this.data['mail.message'].records.push({
            body:"notempty",
            model:'res.partner',
            res_id:100,
        });
    }
    awaitthis.start();
    constchatter=this.env.models['mail.chatter'].create({
        threadId:100,
        threadModel:'res.partner',
    });
    awaitthis.createChatterComponent({chatter});
    assert.strictEqual(
        document.querySelectorAll(`.o_Chatter`).length,
        1,
        "shouldhaveachatter"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_ChatterTopbar`).length,
        1,
        "shouldhaveachattertopbar"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_Chatter_attachmentBox`).length,
        0,
        "shouldnothaveanattachmentboxinthechatter"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_Chatter_thread`).length,
        1,
        "shouldhaveathreadinthechatter"
    );
    assert.strictEqual(
        document.querySelector(`.o_Chatter_thread`).dataset.threadLocalId,
        this.env.models['mail.thread'].findFromIdentifyingData({
            id:100,
            model:'res.partner',
        }).localId,
        "threadshouldhavetherightthreadlocalid"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_Message`).length,
        30,
        "thefirst30messagesofthreadshouldbeloaded"
    );
});

QUnit.test('baserenderingwhenchatterhasnorecord',asyncfunction(assert){
    assert.expect(8);

    awaitthis.start();
    constchatter=this.env.models['mail.chatter'].create({
        threadModel:'res.partner',
    });
    awaitthis.createChatterComponent({chatter});
    assert.strictEqual(
        document.querySelectorAll(`.o_Chatter`).length,
        1,
        "shouldhaveachatter"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_ChatterTopbar`).length,
        1,
        "shouldhaveachattertopbar"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_Chatter_attachmentBox`).length,
        0,
        "shouldnothaveanattachmentboxinthechatter"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_Chatter_thread`).length,
        1,
        "shouldhaveathreadinthechatter"
    );
    assert.ok(
        chatter.thread.isTemporary,
        "threadshouldhaveatemporarythreadlinkedtochatter"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_Message`).length,
        1,
        "shouldhaveamessage"
    );
    assert.strictEqual(
        document.querySelector(`.o_Message_content`).textContent,
        "Creatinganewrecord...",
        "shouldhavethe'Creatinganewrecord...'message"
    );
    assert.containsNone(
        document.body,
        '.o_MessageList_loadMore',
        "shouldnothavethe'loadmore'button"
    );
});

QUnit.test('baserenderingwhenchatterhasattachments',asyncfunction(assert){
    assert.expect(3);

    this.data['res.partner'].records.push({id:100});
    this.data['ir.attachment'].records.push(
        {
            mimetype:'text/plain',
            name:'Blah.txt',
            res_id:100,
            res_model:'res.partner',
        },
        {
            mimetype:'text/plain',
            name:'Blu.txt',
            res_id:100,
            res_model:'res.partner',
        }
    );
    awaitthis.start();
    constchatter=this.env.models['mail.chatter'].create({
        threadId:100,
        threadModel:'res.partner',
    });
    awaitthis.createChatterComponent({chatter});
    assert.strictEqual(
        document.querySelectorAll(`.o_Chatter`).length,
        1,
        "shouldhaveachatter"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_ChatterTopbar`).length,
        1,
        "shouldhaveachattertopbar"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_Chatter_attachmentBox`).length,
        0,
        "shouldnothaveanattachmentboxinthechatter"
    );
});

QUnit.test('showattachmentbox',asyncfunction(assert){
    assert.expect(6);

    this.data['res.partner'].records.push({id:100});
    this.data['ir.attachment'].records.push(
        {
            mimetype:'text/plain',
            name:'Blah.txt',
            res_id:100,
            res_model:'res.partner',
        },
        {
            mimetype:'text/plain',
            name:'Blu.txt',
            res_id:100,
            res_model:'res.partner',
        }
    );
    awaitthis.start();
    constchatter=this.env.models['mail.chatter'].create({
        threadId:100,
        threadModel:'res.partner',
    });
    awaitthis.createChatterComponent({chatter});
    assert.strictEqual(
        document.querySelectorAll(`.o_Chatter`).length,
        1,
        "shouldhaveachatter"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_ChatterTopbar`).length,
        1,
        "shouldhaveachattertopbar"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_ChatterTopbar_buttonAttachments`).length,
        1,
        "shouldhaveanattachmentsbuttoninchattertopbar"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_ChatterTopbar_buttonAttachmentsCount`).length,
        1,
        "attachmentsbuttonshouldhaveacounter"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_Chatter_attachmentBox`).length,
        0,
        "shouldnothaveanattachmentboxinthechatter"
    );

    awaitafterNextRender(()=>
        document.querySelector(`.o_ChatterTopbar_buttonAttachments`).click()
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_Chatter_attachmentBox`).length,
        1,
        "shouldhaveanattachmentboxinthechatter"
    );
});

QUnit.test('composershow/hideonlognote/sendmessage[REQUIREFOCUS]',asyncfunction(assert){
    assert.expect(10);

    this.data['res.partner'].records.push({id:100});
    awaitthis.start();
    constchatter=this.env.models['mail.chatter'].create({
        threadId:100,
        threadModel:'res.partner',
    });
    awaitthis.createChatterComponent({chatter});
    assert.strictEqual(
        document.querySelectorAll(`.o_ChatterTopbar_buttonSendMessage`).length,
        1,
        "shouldhaveasendmessagebutton"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_ChatterTopbar_buttonLogNote`).length,
        1,
        "shouldhavealognotebutton"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_Chatter_composer`).length,
        0,
        "shouldnothaveacomposer"
    );

    awaitafterNextRender(()=>
        document.querySelector(`.o_ChatterTopbar_buttonSendMessage`).click()
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_Chatter_composer`).length,
        1,
        "shouldhaveacomposer"
    );
    assert.hasClass(
        document.querySelector('.o_Chatter_composer'),
        'o-focused',
        "composer'sendmessage'inchattershouldhavefocusjustafterbeingdisplayed"
    );

    awaitafterNextRender(()=>
        document.querySelector(`.o_ChatterTopbar_buttonLogNote`).click()
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_Chatter_composer`).length,
        1,
        "shouldstillhaveacomposer"
    );
    assert.hasClass(
        document.querySelector('.o_Chatter_composer'),
        'o-focused',
        "composer'lognote'inchattershouldhavefocusjustafterbeingdisplayed"
    );

    awaitafterNextRender(()=>
        document.querySelector(`.o_ChatterTopbar_buttonLogNote`).click()
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_Chatter_composer`).length,
        0,
        "shouldhavenocomposeranymore"
    );

    awaitafterNextRender(()=>
        document.querySelector(`.o_ChatterTopbar_buttonSendMessage`).click()
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_Chatter_composer`).length,
        1,
        "shouldhaveacomposer"
    );

    awaitafterNextRender(()=>
        document.querySelector(`.o_ChatterTopbar_buttonSendMessage`).click()
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_Chatter_composer`).length,
        0,
        "shouldhavenocomposeranymore"
    );
});

QUnit.test('shouldnotdisplayusernotificationmessagesinchatter',asyncfunction(assert){
    assert.expect(1);

    this.data['res.partner'].records.push({id:100});
    this.data['mail.message'].records.push({
        id:102,
        message_type:'user_notification',
        model:'res.partner',
        res_id:100,
    });
    awaitthis.start();
    constchatter=this.env.models['mail.chatter'].create({
        threadId:100,
        threadModel:'res.partner',
    });
    awaitthis.createChatterComponent({chatter});

    assert.containsNone(
        document.body,
        '.o_Message',
        "shoulddisplaynomessages"
    );
});

QUnit.test('postmessagewith"CTRL-Enter"keyboardshortcut',asyncfunction(assert){
    assert.expect(2);

    this.data['res.partner'].records.push({id:100});
    awaitthis.start();
    constchatter=this.env.models['mail.chatter'].create({
        threadId:100,
        threadModel:'res.partner',
    });
    awaitthis.createChatterComponent({chatter});
    assert.containsNone(
        document.body,
        '.o_Message',
        "shouldnothaveanymessageinitiallyinchatter"
    );

    awaitafterNextRender(()=>
        document.querySelector('.o_ChatterTopbar_buttonSendMessage').click()
    );
    awaitafterNextRender(()=>{
        document.querySelector(`.o_ComposerTextInput_textarea`).focus();
        document.execCommand('insertText',false,"Test");
    });
    awaitafterNextRender(()=>{
        constkevt=newwindow.KeyboardEvent('keydown',{ctrlKey:true,key:"Enter"});
        document.querySelector('.o_ComposerTextInput_textarea').dispatchEvent(kevt);
    });
    assert.containsOnce(
        document.body,
        '.o_Message',
        "shouldnowhavesinglemessageinchatterafterpostingmessagefrompressing'CTRL-Enter'intextinputofcomposer"
    );
});

QUnit.test('postmessagewith"META-Enter"keyboardshortcut',asyncfunction(assert){
    assert.expect(2);

    this.data['res.partner'].records.push({id:100});
    awaitthis.start();
    constchatter=this.env.models['mail.chatter'].create({
        threadId:100,
        threadModel:'res.partner',
    });
    awaitthis.createChatterComponent({chatter});
    assert.containsNone(
        document.body,
        '.o_Message',
        "shouldnothaveanymessageinitiallyinchatter"
    );

    awaitafterNextRender(()=>
        document.querySelector('.o_ChatterTopbar_buttonSendMessage').click()
    );
    awaitafterNextRender(()=>{
        document.querySelector(`.o_ComposerTextInput_textarea`).focus();
        document.execCommand('insertText',false,"Test");
    });
    awaitafterNextRender(()=>{
        constkevt=newwindow.KeyboardEvent('keydown',{key:"Enter",metaKey:true});
        document.querySelector('.o_ComposerTextInput_textarea').dispatchEvent(kevt);
    });
    assert.containsOnce(
        document.body,
        '.o_Message',
        "shouldnowhavesinglemessageinchannelafterpostingmessagefrompressing'META-Enter'intextinputofcomposer"
    );
});

QUnit.test('donotpostmessagewith"Enter"keyboardshortcut',asyncfunction(assert){
    //Notethattestdoesn'tassertEntermakesanewline,becausethis
    //defaultbrowsercannotbesimulatedwithjustdispatching
    //programmaticallycraftedevents...
    assert.expect(2);

    this.data['res.partner'].records.push({id:100});
    awaitthis.start();
    constchatter=this.env.models['mail.chatter'].create({
        threadId:100,
        threadModel:'res.partner',
    });
    awaitthis.createChatterComponent({chatter});
    assert.containsNone(
        document.body,
        '.o_Message',
        "shouldnothaveanymessageinitiallyinchatter"
    );

    awaitafterNextRender(()=>
        document.querySelector('.o_ChatterTopbar_buttonSendMessage').click()
    );
    awaitafterNextRender(()=>{
        document.querySelector(`.o_ComposerTextInput_textarea`).focus();
        document.execCommand('insertText',false,"Test");
    });
    constkevt=newwindow.KeyboardEvent('keydown',{key:"Enter"});
    document.querySelector('.o_ComposerTextInput_textarea').dispatchEvent(kevt);
    awaitnextAnimationFrame();
    assert.containsNone(
        document.body,
        '.o_Message',
        "shouldstillnothaveanymessageinmailingchannelafterpressing'Enter'intextinputofcomposer"
    );
});

});
});
});

});
