flectra.define('mail/static/src/components/file_uploader/file_uploader.js',function(require){
'usestrict';

constuseShouldUpdateBasedOnProps=require('mail/static/src/component_hooks/use_should_update_based_on_props/use_should_update_based_on_props.js');

constcore=require('web.core');

const{Component}=owl;
const{useRef}=owl.hooks;

classFileUploaderextendsComponent{

    /**
     *@override
     */
    constructor(...args){
        super(...args);
        this._fileInputRef=useRef('fileInput');
        this._fileUploadId=_.uniqueId('o_FileUploader_fileupload');
        this._onAttachmentUploaded=this._onAttachmentUploaded.bind(this);
        useShouldUpdateBasedOnProps({
            compareDepth:{
                attachmentLocalIds:1,
                newAttachmentExtraData:3,
            },
        });
    }

    mounted(){
        $(window).on(this._fileUploadId,this._onAttachmentUploaded);
    }

    willUnmount(){
        $(window).off(this._fileUploadId);
    }

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *@param{FileList|Array}files
     *@returns{Promise}
     */
    asyncuploadFiles(files){
        awaitthis._unlinkExistingAttachments(files);
        this._createTemporaryAttachments(files);
        awaitthis._performUpload(files);
        this._fileInputRef.el.value='';
    }

    openBrowserFileUploader(){
        this._fileInputRef.el.click();
    }

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *@deprecated
     *@private
     *@param{Object}fileData
     *@returns{mail.attachment}
     */
    _createAttachment(fileData){
        returnthis.env.models['mail.attachment'].create(Object.assign(
            {},
            fileData,
            this.props.newAttachmentExtraData
        ));
    }

    /**
     *@private
     *@param{File}file
     *@returns{FormData}
     */
    _createFormData(file){
        letformData=newwindow.FormData();
        formData.append('callback',this._fileUploadId);
        formData.append('csrf_token',core.csrf_token);
        formData.append('id',this.props.uploadId);
        formData.append('model',this.props.uploadModel);
        formData.append('ufile',file,file.name);
        returnformData;
    }

    /**
     *@private
     *@param{FileList|Array}files
     */
    _createTemporaryAttachments(files){
        for(constfileoffiles){
            this.env.models['mail.attachment'].create(
                Object.assign(
                    {
                        filename:file.name,
                        isTemporary:true,
                        name:file.name
                    },
                    this.props.newAttachmentExtraData
                ),
            );
        }
    }
    /**
     *@private
     *@param{FileList|Array}files
     *@returns{Promise}
     */
    async_performUpload(files){
        for(constfileoffiles){
            constuploadingAttachment=this.env.models['mail.attachment'].find(attachment=>
                attachment.isTemporary&&
                attachment.filename===file.name
            );
            if(!uploadingAttachment){
                //Uploadingattachmentnolongerexists.
                //Thishappenswhenanuploadingattachmentisbeingdeletedbyuser.
                continue;
            }
            try{
                constresponse=awaitthis.env.browser.fetch('/web/binary/upload_attachment',{
                    method:'POST',
                    body:this._createFormData(file),
                    signal:uploadingAttachment.uploadingAbortController.signal,
                });
                lethtml=awaitresponse.text();
                consttemplate=document.createElement('template');
                template.innerHTML=html.trim();
                window.eval(template.content.firstChild.textContent);
            }catch(e){
                if(e.name!=='AbortError'){
                    throwe;
                }
            }
        }
    }

    /**
     *@private
     *@param{FileList|Array}files
     *@returns{Promise}
     */
    async_unlinkExistingAttachments(files){
        for(constfileoffiles){
            constattachment=this.props.attachmentLocalIds
                .map(attachmentLocalId=>this.env.models['mail.attachment'].get(attachmentLocalId))
                .find(attachment=>attachment.name===file.name&&attachment.size===file.size);
            //ifthefilesalreadyexits,deletethefilebeforeupload
            if(attachment){
                attachment.remove();
            }
        }
    }

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *@private
     *@param{jQuery.Event}ev
     *@param{...Object}filesData
     */
    async_onAttachmentUploaded(ev,...filesData){
        for(constfileDataoffilesData){
            const{error,filename,id,mimetype,name,size}=fileData;
            if(error||!id){
                this.env.services['notification'].notify({
                    type:'danger',
                    message:owl.utils.escape(error),
                });
                return;
            }
            //FIXME:neededtoavoidproblemsonuploading
            //WithoutthistheuseStoreselectorofcomponentcouldbenotcalled
            //E.g.inattachment_box_tests.js
            awaitnewPromise(resolve=>setTimeout(resolve));
            constattachment=this.env.models['mail.attachment'].insert(
                Object.assign(
                    {
                        filename,
                        id,
                        mimetype,
                        name,
                        size,
                    },
                    this.props.newAttachmentExtraData
                ),
            );
            this.trigger('o-attachment-created',{attachment});
        }
    }

    /**
     *Calledwhentherearechangesinthefileinput.
     *
     *@private
     *@param{Event}ev
     *@param{EventTarget}ev.target
     *@param{FileList|Array}ev.target.files
     */
    async_onChangeAttachment(ev){
        awaitthis.uploadFiles(ev.target.files);
    }

}

Object.assign(FileUploader,{
    defaultProps:{
        uploadId:0,
        uploadModel:'mail.compose.message'
    },
    props:{
        attachmentLocalIds:{
            type:Array,
            element:String,
        },
        newAttachmentExtraData:{
            type:Object,
            optional:true,
        },
        uploadId:Number,
        uploadModel:String,
    },
    template:'mail.FileUploader',
});

returnFileUploader;

});
