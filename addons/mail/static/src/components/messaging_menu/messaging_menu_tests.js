flectra.define('mail/static/src/components/messaging_menu/messaging_menu_tests.js',function(require){
'usestrict';

const{
    afterEach,
    afterNextRender,
    beforeEach,
    nextAnimationFrame,
    start,
}=require('mail/static/src/utils/test_utils.js');

const{makeTestPromise}=require('web.test_utils');

QUnit.module('mail',{},function(){
QUnit.module('components',{},function(){
QUnit.module('messaging_menu',{},function(){
QUnit.module('messaging_menu_tests.js',{
    beforeEach(){
        beforeEach(this);

        this.start=asyncparams=>{
            let{discussWidget,env,widget}=awaitstart(Object.assign({},params,{
                data:this.data,
                hasMessagingMenu:true,
            }));
            this.discussWidget=discussWidget;
            this.env=env;
            this.widget=widget;
        };
    },
    afterEach(){
        afterEach(this);
    },
});

QUnit.test('[technical]messagingnotcreatedthenbecomescreated',asyncfunction(assert){
    /**
     *Creationofmessaginginenvisasyncduetogenerationofmodelsbeing
     *async.Generationofmodelsisasyncbecauseitrequiresparsingofall
     *JSmodulesthatcontainpiecesofmodeldefinitions.
     *
     *Timeofhavingnomessagingisveryshort,almostimperceptiblebyuser
     *onUI,butthedisplayshouldnotcrashduringthiscriticaltimeperiod.
     */
    assert.expect(2);

    constmessagingBeforeCreationDeferred=makeTestPromise();
    awaitthis.start({
        messagingBeforeCreationDeferred,
        waitUntilMessagingCondition:'none',
    });
    assert.containsOnce(
        document.body,
        '.o_MessagingMenu',
        "shouldhavemessagingmenuevenwhenmessagingisnotyetcreated"
    );

    //simulatemessagingbecomingcreated
    messagingBeforeCreationDeferred.resolve();
    awaitnextAnimationFrame();
    assert.containsOnce(
        document.body,
        '.o_MessagingMenu',
        "shouldstillcontainmessagingmenuaftermessaginghasbeencreated"
    );
});

QUnit.test('[technical]nocrashonattemptingopeningmessagingmenuwhenmessagingnotcreated',asyncfunction(assert){
    /**
     *Creationofmessaginginenvisasyncduetogenerationofmodelsbeing
     *async.Generationofmodelsisasyncbecauseitrequiresparsingofall
     *JSmodulesthatcontainpiecesofmodeldefinitions.
     *
     *Timeofhavingnomessagingisveryshort,almostimperceptiblebyuser
     *onUI,butthedisplayshouldnotcrashduringthiscriticaltimeperiod.
     *
     *Messagingmenuisnotexpectedtobeopenonclickbecausestateof
     *messagingmenurequiresmessagingbeingcreated.
     */
    assert.expect(2);

    awaitthis.start({
        messagingBeforeCreationDeferred:newPromise(()=>{}),//keepmessagingnotcreated
        waitUntilMessagingCondition:'none',
    });
    assert.containsOnce(
        document.body,
        '.o_MessagingMenu',
        "shouldhavemessagingmenuevenwhenmessagingisnotyetcreated"
    );

    leterror;
    try{
        document.querySelector('.o_MessagingMenu_toggler').click();
        awaitnextAnimationFrame();
    }catch(err){
        error=err;
    }
    assert.notOk(
        !!error,
        "Shouldnotcrashonattempttoopenmessagingmenuwhenmessagingnotcreated"
    );
    if(error){
        throwerror;
    }
});

QUnit.test('messagingnotinitialized',asyncfunction(assert){
    assert.expect(2);

    awaitthis.start({
        asyncmockRPC(route){
            if(route==='/mail/init_messaging'){
                //simulatemessagingneverinitialized
                returnnewPromise(resolve=>{});
            }
            returnthis._super(...arguments);
        },
        waitUntilMessagingCondition:'created',
    });
    assert.strictEqual(
        document.querySelectorAll('.o_MessagingMenu_loading').length,
        1,
        "shoulddisplayloadingicononmessagingmenuwhenmessagingnotyetinitialized"
    );

    awaitafterNextRender(()=>document.querySelector(`.o_MessagingMenu_toggler`).click());
    assert.strictEqual(
        document.querySelector('.o_MessagingMenu_dropdownMenu').textContent,
        "Pleasewait...",
        "shouldpromptloadingwhenopeningmessagingmenu"
    );
});

QUnit.test('messagingbecomesinitialized',asyncfunction(assert){
    assert.expect(2);

    constmessagingInitializedProm=makeTestPromise();

    awaitthis.start({
        asyncmockRPC(route){
            const_super=this._super.bind(this,...arguments);//limitationofclass.js
            if(route==='/mail/init_messaging'){
                awaitmessagingInitializedProm;
            }
            return_super();
        },
        waitUntilMessagingCondition:'created',
    });
    awaitafterNextRender(()=>document.querySelector(`.o_MessagingMenu_toggler`).click());

    //simulatemessagingbecomesinitialized
    awaitafterNextRender(()=>messagingInitializedProm.resolve());
    assert.strictEqual(
        document.querySelectorAll('.o_MessagingMenu_loading').length,
        0,
        "shouldnolongerdisplayloadingicononmessagingmenuwhenmessagingbecomesinitialized"
    );
    assert.notOk(
        document.querySelector('.o_MessagingMenu_dropdownMenu').textContent.includes("Pleasewait..."),
        "shouldnolongerpromptloadingwhenopeningmessagingmenuwhenmessagingbecomesinitialized"
    );
});

QUnit.test('basicrendering',asyncfunction(assert){
    assert.expect(21);

    awaitthis.start();
    assert.strictEqual(
        document.querySelectorAll('.o_MessagingMenu').length,
        1,
        "shouldhavemessagingmenu"
    );
    assert.notOk(
        document.querySelector('.o_MessagingMenu').classList.contains('show'),
        "shouldnotmarkmessagingmenuitemasshownbydefault"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_MessagingMenu_toggler`).length,
        1,
        "shouldhaveclickableelementonmessagingmenu"
    );
    assert.notOk(
        document.querySelector(`.o_MessagingMenu_toggler`).classList.contains('show'),
        "shouldnotmarkmessagingmenuclickableitemasshownbydefault"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_MessagingMenu_icon`).length,
        1,
        "shouldhaveicononclickableelementinmessagingmenu"
    );
    assert.ok(
        document.querySelector(`.o_MessagingMenu_icon`).classList.contains('fa-comments'),
        "shouldhave'comments'icononclickableelementinmessagingmenu"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_MessagingMenu_dropdownMenu`).length,
        0,
        "shouldnotdisplayanymessagingmenudropdownbydefault"
    );

    awaitafterNextRender(()=>document.querySelector(`.o_MessagingMenu_toggler`).click());
    assert.hasClass(
        document.querySelector('.o_MessagingMenu'),
        "o-is-open",
        "shouldmarkmessagingmenuasopened"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_MessagingMenu_dropdownMenu`).length,
        1,
        "shoulddisplaymessagingmenudropdownafterclick"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_MessagingMenu_dropdownMenuHeader`).length,
        1,
        "shouldhavedropdownmenuheader"
    );
    assert.strictEqual(
        document.querySelectorAll(`
            .o_MessagingMenu_dropdownMenuHeader
            .o_MessagingMenu_tabButton
        `).length,
        3,
        "shouldhave3tabbuttonstofilteritemsintheheader"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_MessagingMenu_tabButton[data-tab-id="all"]`).length,
        1,
        "1tabbuttonshouldbe'All'"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_MessagingMenu_tabButton[data-tab-id="chat"]`).length,
        1,
        "1tabbuttonshouldbe'Chat'"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_MessagingMenu_tabButton[data-tab-id="channel"]`).length,
        1,
        "1tabbuttonshouldbe'Channels'"
    );
    assert.ok(
        document.querySelector(`
            .o_MessagingMenu_tabButton[data-tab-id="all"]
        `).classList.contains('o-active'),
        "'all'tabbuttonshouldbeactive"
    );
    assert.notOk(
        document.querySelector(`
            .o_MessagingMenu_tabButton[data-tab-id="chat"]
        `).classList.contains('o-active'),
        "'chat'tabbuttonshouldnotbeactive"
    );
    assert.notOk(
        document.querySelector(`
            .o_MessagingMenu_tabButton[data-tab-id="channel"]
        `).classList.contains('o-active'),
        "'channel'tabbuttonshouldnotbeactive"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_MessagingMenu_newMessageButton`).length,
        1,
        "shouldhavebuttontomakeanewmessage"
    );
    assert.strictEqual(
        document.querySelectorAll(`
            .o_MessagingMenu_dropdownMenu
            .o_NotificationList
        `).length,
        1,
        "shoulddisplaythreadpreviewlist"
    );
    assert.strictEqual(
        document.querySelectorAll(`
            .o_MessagingMenu_dropdownMenu
            .o_NotificationList_noConversation
        `).length,
        1,
        "shoulddisplaynoconversationinthreadpreviewlist"
    );

    awaitafterNextRender(()=>document.querySelector(`.o_MessagingMenu_toggler`).click());
    assert.doesNotHaveClass(
        document.querySelector('.o_MessagingMenu'),
        "o-is-open",
        "shouldmarkmessagingmenuasclosed"
    );
});

QUnit.test('counteristakingintoaccountfailurenotification',asyncfunction(assert){
    assert.expect(2);

    this.data['mail.channel'].records.push({
        id:31,
        seen_message_id:11,
    });
    //messagethatisexpectedtohaveafailure
    this.data['mail.message'].records.push({
        id:11,//randomuniqueid,willbeusedtolinkfailuretomessage
        model:'mail.channel',//expectedvaluetolinkmessagetochannel
        res_id:31,//idofarandomchannel
    });
    //failurethatisexpectedtobeusedinthetest
    this.data['mail.notification'].records.push({
        mail_message_id:11,//idoftherelatedmessage
        notification_status:'exception',//necessaryvaluetohaveafailure
    });
    awaitthis.start();

    assert.containsOnce(
        document.body,
        '.o_MessagingMenu_counter',
        "shoulddisplayanotificationcounternexttothemessagingmenuforonenotification"
    );
    assert.strictEqual(
        document.querySelector('.o_MessagingMenu_counter').textContent,
        "1",
        "shoulddisplayacounterof'1'nexttothemessagingmenu"
    );
});

QUnit.test('switchtab',asyncfunction(assert){
    assert.expect(15);

    awaitthis.start();

    awaitafterNextRender(()=>document.querySelector(`.o_MessagingMenu_toggler`).click());
    assert.strictEqual(
        document.querySelectorAll(`.o_MessagingMenu_tabButton[data-tab-id="all"]`).length,
        1,
        "1tabbuttonshouldbe'All'"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_MessagingMenu_tabButton[data-tab-id="chat"]`).length,
        1,
        "1tabbuttonshouldbe'Chat'"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_MessagingMenu_tabButton[data-tab-id="channel"]`).length,
        1,
        "1tabbuttonshouldbe'Channels'"
    );
    assert.ok(
        document.querySelector(`
            .o_MessagingMenu_tabButton[data-tab-id="all"]
        `).classList.contains('o-active'),
        "'all'tabbuttonshouldbeactive"
    );
    assert.notOk(
        document.querySelector(`
            .o_MessagingMenu_tabButton[data-tab-id="chat"]
        `).classList.contains('o-active'),
        "'chat'tabbuttonshouldnotbeactive"
    );
    assert.notOk(
        document.querySelector(`
            .o_MessagingMenu_tabButton[data-tab-id="channel"]
        `).classList.contains('o-active'),
        "'channel'tabbuttonshouldnotbeactive"
    );

    awaitafterNextRender(()=>
        document.querySelector(`.o_MessagingMenu_tabButton[data-tab-id="chat"]`).click()
    );
    assert.notOk(
        document.querySelector(`
            .o_MessagingMenu_tabButton[data-tab-id="all"]
        `).classList.contains('o-active'),
        "'all'tabbuttonshouldbecomeinactive"
    );
    assert.ok(
        document.querySelector(`
            .o_MessagingMenu_tabButton[data-tab-id="chat"]
        `).classList.contains('o-active'),
        "'chat'tabbuttonshouldnotbecomeactive"
    );
    assert.notOk(
        document.querySelector(`
            .o_MessagingMenu_tabButton[data-tab-id="channel"]
        `).classList.contains('o-active'),
        "'channel'tabbuttonshouldstayinactive"
    );

    awaitafterNextRender(()=>
        document.querySelector(`.o_MessagingMenu_tabButton[data-tab-id="channel"]`).click()
    );
    assert.notOk(
        document.querySelector(`
            .o_MessagingMenu_tabButton[data-tab-id="all"]
        `).classList.contains('o-active'),
        "'all'tabbuttonshouldstayactive"
    );
    assert.notOk(
        document.querySelector(`
            .o_MessagingMenu_tabButton[data-tab-id="chat"]
        `).classList.contains('o-active'),
        "'chat'tabbuttonshouldbecomeinactive"
    );
    assert.ok(
        document.querySelector(`
            .o_MessagingMenu_tabButton[data-tab-id="channel"]
        `).classList.contains('o-active'),
        "'channel'tabbuttonshouldbecomeactive"
    );

    awaitafterNextRender(()=>
        document.querySelector(`.o_MessagingMenu_tabButton[data-tab-id="all"]`).click()
    );
    assert.ok(
        document.querySelector(`
            .o_MessagingMenu_tabButton[data-tab-id="all"]
        `).classList.contains('o-active'),
        "'all'tabbuttonshouldbecomeactive"
    );
    assert.notOk(
        document.querySelector(`
            .o_MessagingMenu_tabButton[data-tab-id="chat"]
        `).classList.contains('o-active'),
        "'chat'tabbuttonshouldstayinactive"
    );
    assert.notOk(
        document.querySelector(`
            .o_MessagingMenu_tabButton[data-tab-id="channel"]
        `).classList.contains('o-active'),
        "'channel'tabbuttonshouldbecomeinactive"
    );
});

QUnit.test('newmessage',asyncfunction(assert){
    assert.expect(3);

    awaitthis.start({
        hasChatWindow:true,
    });

    awaitafterNextRender(()=>
        document.querySelector(`.o_MessagingMenu_toggler`).click()
    );
    awaitafterNextRender(()=>
        document.querySelector(`.o_MessagingMenu_newMessageButton`).click()
    );

    assert.strictEqual(
        document.querySelectorAll(`.o_ChatWindow`).length,
        1,
        "shouldhaveopenachatwindow"
    );
    assert.ok(
        document.querySelector(`.o_ChatWindow`).classList.contains('o-new-message'),
        "chatwindowshouldbefornewmessage"
    );
    assert.ok(
        document.querySelector(`.o_ChatWindow`).classList.contains('o-focused'),
        "chatwindowshouldbefocused"
    );
});

QUnit.test('nonewmessagewhendiscussisopen',asyncfunction(assert){
    assert.expect(3);

    awaitthis.start({
        autoOpenDiscuss:true,
        hasDiscuss:true,
    });

    awaitafterNextRender(()=>
        document.querySelector(`.o_MessagingMenu_toggler`).click()
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_MessagingMenu_newMessageButton`).length,
        0,
        "shouldnothave'newmessage'whendiscussisopen"
    );

    //simulateclosingdiscussapp
    awaitafterNextRender(()=>this.discussWidget.on_detach_callback());
    assert.strictEqual(
        document.querySelectorAll(`.o_MessagingMenu_newMessageButton`).length,
        1,
        "shouldhave'newmessage'whendiscussisclosed"
    );

    //simulateopeningdiscussapp
    awaitafterNextRender(()=>this.discussWidget.on_attach_callback());
    assert.strictEqual(
        document.querySelectorAll(`.o_MessagingMenu_newMessageButton`).length,
        0,
        "shouldnothave'newmessage'whendiscussisopenagain"
    );
});

QUnit.test('channelpreview:basicrendering',asyncfunction(assert){
    assert.expect(9);

    this.data['res.partner'].records.push({
        id:7,//randomuniqueid,tolinkmessageauthor
        name:"Demo",//randomname,willbeassertedinthetest
    });
    //channelthatisexpectedtobefoundinthetest
    this.data['mail.channel'].records.push({
        id:20,//randomuniqueid,willbeusedtolinkmessagetochannel
        name:"General",//randomname,willbeassertedinthetest
    });
    //messagethatisexpectedtobedisplayedinthetest
    this.data['mail.message'].records.push({
        author_id:7,//notcurrentpartner,willbeassertedinthetest
        body:"<p>test</p>",//randombody,willbeassertedinthetest
        channel_ids:[20],//idofrelatedchannel
        model:'mail.channel',//necessarytolinkmessagetochannel
        res_id:20,//idofrelatedchannel
    });
    awaitthis.start();

    awaitafterNextRender(()=>document.querySelector(`.o_MessagingMenu_toggler`).click());
    assert.strictEqual(
        document.querySelectorAll(`
            .o_MessagingMenu_dropdownMenu.o_ThreadPreview
        `).length,
        1,
        "shouldhaveonepreview"
    );
    assert.strictEqual(
        document.querySelectorAll(`
            .o_MessagingMenu_dropdownMenu
            .o_ThreadPreview_sidebar
        `).length,
        1,
        "previewshouldhaveasidebar"
    );
    assert.strictEqual(
        document.querySelectorAll(`
            .o_MessagingMenu_dropdownMenu
            .o_ThreadPreview_content
        `).length,
        1,
        "previewshouldhavesomecontent"
    );
    assert.strictEqual(
        document.querySelectorAll(`
            .o_MessagingMenu_dropdownMenu
            .o_ThreadPreview_header
        `).length,
        1,
        "previewshouldhaveheaderincontent"
    );
    assert.strictEqual(
        document.querySelectorAll(`
            .o_MessagingMenu_dropdownMenu
            .o_ThreadPreview_header
            .o_ThreadPreview_name
        `).length,
        1,
        "previewshouldhavenameinheaderofcontent"
    );
    assert.strictEqual(
        document.querySelector(`
            .o_MessagingMenu_dropdownMenu
            .o_ThreadPreview_name
        `).textContent,
        "General","previewshouldhavenameofchannel"
    );
    assert.strictEqual(
        document.querySelectorAll(`
            .o_MessagingMenu_dropdownMenu
            .o_ThreadPreview_content
            .o_ThreadPreview_core
        `).length,
        1,
        "previewshouldhavecoreincontent"
    );
    assert.strictEqual(
        document.querySelectorAll(`
            .o_MessagingMenu_dropdownMenu
            .o_ThreadPreview_core
            .o_ThreadPreview_inlineText
        `).length,
        1,
        "previewshouldhaveinlinetextincoreofcontent"
    );
    assert.strictEqual(
        document.querySelector(`
            .o_MessagingMenu_dropdownMenu
            .o_ThreadPreview_core
            .o_ThreadPreview_inlineText
        `).textContent.trim(),
        "Demo:test",
        "previewshouldhavemessagecontentasinlinetextofcorecontent"
    );
});

QUnit.test('filteredpreviews',asyncfunction(assert){
    assert.expect(12);

    //chatandchannelexpectedtobefoundinthemenu
    this.data['mail.channel'].records.push(
        {channel_type:"chat",id:10},
        {id:20},
    );
    this.data['mail.message'].records.push(
        {
            channel_ids:[10],//idofrelatedchannel
            model:'mail.channel',//tolinkmessagetochannel
            res_id:10,//idofrelatedchannel
        },
        {
            channel_ids:[20],//idofrelatedchannel
            model:'mail.channel',//tolinkmessagetochannel
            res_id:20,//idofrelatedchannel
        },
    );
    awaitthis.start();

    awaitafterNextRender(()=>
        document.querySelector(`.o_MessagingMenu_toggler`).click()
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_MessagingMenu_dropdownMenu.o_ThreadPreview`).length,
        2,
        "shouldhave2previews"
    );
    assert.strictEqual(
        document.querySelectorAll(`
            .o_MessagingMenu_dropdownMenu
            .o_ThreadPreview[data-thread-local-id="${
                this.env.models['mail.thread'].findFromIdentifyingData({
                    id:10,
                    model:'mail.channel',
                }).localId
            }"]
        `).length,
        1,
        "shouldhavepreviewofchat"
    );
    assert.strictEqual(
        document.querySelectorAll(`
            .o_MessagingMenu_dropdownMenu
            .o_ThreadPreview[data-thread-local-id="${
                this.env.models['mail.thread'].findFromIdentifyingData({
                    id:20,
                    model:'mail.channel',
                }).localId
            }"]
        `).length,
        1,
        "shouldhavepreviewofchannel"
    );

    awaitafterNextRender(()=>
        document.querySelector('.o_MessagingMenu_tabButton[data-tab-id="chat"]').click()
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_MessagingMenu_dropdownMenu.o_ThreadPreview`).length,
        1,
        "shouldhaveonepreview"
    );
    assert.strictEqual(
        document.querySelectorAll(`
            .o_MessagingMenu_dropdownMenu
            .o_ThreadPreview[data-thread-local-id="${
                this.env.models['mail.thread'].findFromIdentifyingData({
                    id:10,
                    model:'mail.channel',
                }).localId
            }"]
        `).length,
        1,
        "shouldhavepreviewofchat"
    );
    assert.strictEqual(
        document.querySelectorAll(`
            .o_MessagingMenu_dropdownMenu
            .o_ThreadPreview[data-thread-local-id="${
                this.env.models['mail.thread'].findFromIdentifyingData({
                    id:20,
                    model:'mail.channel',
                }).localId
            }"]
        `).length,
        0,
        "shouldnothavepreviewofchannel"
    );

    awaitafterNextRender(()=>
        document.querySelector('.o_MessagingMenu_tabButton[data-tab-id="channel"]').click()
    );
    assert.strictEqual(
        document.querySelectorAll(`
            .o_MessagingMenu_dropdownMenu
            .o_ThreadPreview
        `).length,
        1,
        "shouldhaveonepreview"
    );
    assert.strictEqual(
        document.querySelectorAll(`
            .o_MessagingMenu_dropdownMenu
            .o_ThreadPreview[data-thread-local-id="${
                this.env.models['mail.thread'].findFromIdentifyingData({
                    id:10,
                    model:'mail.channel',
                }).localId
            }"]
        `).length,
        0,
        "shouldnothavepreviewofchat"
    );
    assert.strictEqual(
        document.querySelectorAll(`
            .o_MessagingMenu_dropdownMenu
            .o_ThreadPreview[data-thread-local-id="${
                this.env.models['mail.thread'].findFromIdentifyingData({
                    id:20,
                    model:'mail.channel',
                }).localId
            }"]
        `).length,
        1,
        "shouldhavepreviewofchannel"
    );

    awaitafterNextRender(()=>
        document.querySelector('.o_MessagingMenu_tabButton[data-tab-id="all"]').click()
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_MessagingMenu_dropdownMenu.o_ThreadPreview`).length,
        2,
        "shouldhave2previews"
    );
    assert.strictEqual(
        document.querySelectorAll(`
            .o_MessagingMenu_dropdownMenu
            .o_ThreadPreview[data-thread-local-id="${
                this.env.models['mail.thread'].findFromIdentifyingData({
                    id:10,
                    model:'mail.channel',
                }).localId
            }"]
        `).length,
        1,
        "shouldhavepreviewofchat"
    );
    assert.strictEqual(
        document.querySelectorAll(`
            .o_MessagingMenu_dropdownMenu
            .o_ThreadPreview[data-thread-local-id="${
                this.env.models['mail.thread'].findFromIdentifyingData({
                    id:20,
                    model:'mail.channel',
                }).localId
            }"]
        `).length,
        1,
        "shouldhavepreviewofchannel"
    );
});

QUnit.test('openchatwindowfrompreview',asyncfunction(assert){
    assert.expect(1);

    //channelexpectedtobefoundinthemenu,onlyitsexistencematters,dataareirrelevant
    this.data['mail.channel'].records.push({});
    awaitthis.start({
        hasChatWindow:true,
    });

    awaitafterNextRender(()=>
        document.querySelector(`.o_MessagingMenu_toggler`).click()
    );
    awaitafterNextRender(()=>
        document.querySelector(`.o_MessagingMenu_dropdownMenu.o_ThreadPreview`).click()
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_ChatWindow`).length,
        1,
        "shouldhaveopenachatwindow"
    );
});

QUnit.test('nocodeinjectioninmessagebodypreview',asyncfunction(assert){
    assert.expect(5);

    this.data['mail.channel'].records.push({id:11});
    this.data['mail.message'].records.push({
        body:"<p><em>&shoulnotberaised</em><script>thrownewError('CodeInjectionError');</script></p>",
        channel_ids:[11],
    });
    awaitthis.start();

    awaitafterNextRender(()=>{
        document.querySelector(`.o_MessagingMenu_toggler`).click();
    });
    assert.containsOnce(
        document.body,
        '.o_MessagingMenu_dropdownMenu.o_ThreadPreview',
        "shoulddisplayapreview",
    );
    assert.containsOnce(
        document.body,
        '.o_ThreadPreview_core',
        "previewshouldhavecoreincontent",
    );
    assert.containsOnce(
        document.body,
        '.o_ThreadPreview_inlineText',
        "previewshouldhaveinlinetextincoreofcontent",
    );
    assert.strictEqual(
        document.querySelector('.o_ThreadPreview_inlineText')
            .textContent.replace(/\s/g,""),
        "You:&shoulnotberaisedthrownewError('CodeInjectionError');",
        "shoulddisplaycorrectuninjectedlastmessageinlinecontent"
    );
    assert.containsNone(
        document.querySelector('.o_ThreadPreview_inlineText'),
        'script',
        "lastmessageinlinecontentshouldnothaveanycodeinjection"
    );
});

QUnit.test('nocodeinjectioninmessagebodypreviewfromsanitizedmessage',asyncfunction(assert){
    assert.expect(5);

    this.data['mail.channel'].records.push({id:11});
    this.data['mail.message'].records.push({
        body:"<p>&lt;em&gt;&shoulnotberaised&lt;/em&gt;&lt;script&gt;thrownewError('CodeInjectionError');&lt;/script&gt;</p>",
        channel_ids:[11],
    });
    awaitthis.start();

    awaitafterNextRender(()=>{
        document.querySelector(`.o_MessagingMenu_toggler`).click();
    });
    assert.containsOnce(
        document.body,
        '.o_MessagingMenu_dropdownMenu.o_ThreadPreview',
        "shoulddisplayapreview",
    );
    assert.containsOnce(
        document.body,
        '.o_ThreadPreview_core',
        "previewshouldhavecoreincontent",
    );
    assert.containsOnce(
        document.body,
        '.o_ThreadPreview_inlineText',
        "previewshouldhaveinlinetextincoreofcontent",
    );
    assert.strictEqual(
        document.querySelector('.o_ThreadPreview_inlineText')
            .textContent.replace(/\s/g,""),
        "You:<em>&shoulnotberaised</em><script>thrownewError('CodeInjectionError');</script>",
        "shoulddisplaycorrectuninjectedlastmessageinlinecontent"
    );
    assert.containsNone(
        document.querySelector('.o_ThreadPreview_inlineText'),
        'script',
        "lastmessageinlinecontentshouldnothaveanycodeinjection"
    );
});

QUnit.test('<br/>tagsinmessagebodypreviewaretransformedinspaces',asyncfunction(assert){
    assert.expect(4);

    this.data['mail.channel'].records.push({id:11});
    this.data['mail.message'].records.push({
        body:"<p>a<br/>b<br>c<br  />d<br    ></p>",
        channel_ids:[11],
    });
    awaitthis.start();

    awaitafterNextRender(()=>{
        document.querySelector(`.o_MessagingMenu_toggler`).click();
    });
    assert.containsOnce(
        document.body,
        '.o_MessagingMenu_dropdownMenu.o_ThreadPreview',
        "shoulddisplayapreview",
    );
    assert.containsOnce(
        document.body,
        '.o_ThreadPreview_core',
        "previewshouldhavecoreincontent",
    );
    assert.containsOnce(
        document.body,
        '.o_ThreadPreview_inlineText',
        "previewshouldhaveinlinetextincoreofcontent",
    );
    assert.strictEqual(
        document.querySelector('.o_ThreadPreview_inlineText').textContent,
        "You:abcd",
        "shoulddisplaycorrectlastmessageinlinecontentwithbrsreplacedbyspaces"
    );
});

QUnit.test('renderingwithFlectraBothasarequest(default)',asyncfunction(assert){
    assert.expect(4);

    awaitthis.start({
        env:{
            browser:{
                Notification:{
                    permission:'default',
                },
            },
        },
    });

    assert.ok(
        document.querySelector('.o_MessagingMenu_counter'),
        "shoulddisplayanotificationcounternexttothemessagingmenuforFlectraBotrequest"
    );
    assert.strictEqual(
        document.querySelector('.o_MessagingMenu_counter').textContent,
        "1",
        "shoulddisplayacounterof'1'nexttothemessagingmenu"
    );

    awaitafterNextRender(()=>
        document.querySelector('.o_MessagingMenu_toggler').click()
    );
    assert.containsOnce(
        document.body,
        '.o_NotificationRequest',
        "shoulddisplayanotificationinthemessagingmenu"
    );
    assert.strictEqual(
        document.querySelector('.o_NotificationRequest_name').textContent.trim(),
        'FlectraBothasarequest',
        "notificationshoulddisplaythatFlectraBothasarequest"
    );
});

QUnit.test('renderingwithoutFlectraBothasarequest(denied)',asyncfunction(assert){
    assert.expect(2);

    awaitthis.start({
        env:{
            browser:{
                Notification:{
                    permission:'denied',
                },
            },
        },
    });

    assert.containsNone(
        document.body,
        '.o_MessagingMenu_counter',
        "shouldnotdisplayanotificationcounternexttothemessagingmenu"
    );

    awaitafterNextRender(()=>
        document.querySelector('.o_MessagingMenu_toggler').click()
    );
    assert.containsNone(
        document.body,
        '.o_NotificationRequest',
        "shoulddisplaynonotificationinthemessagingmenu"
    );
});

QUnit.test('renderingwithoutFlectraBothasarequest(accepted)',asyncfunction(assert){
    assert.expect(2);

    awaitthis.start({
        env:{
            browser:{
                Notification:{
                    permission:'granted',
                },
            },
        },
    });

    assert.containsNone(
        document.body,
        '.o_MessagingMenu_counter',
        "shouldnotdisplayanotificationcounternexttothemessagingmenu"
    );

    awaitafterNextRender(()=>
        document.querySelector('.o_MessagingMenu_toggler').click()
    );
    assert.containsNone(
        document.body,
        '.o_NotificationRequest',
        "shoulddisplaynonotificationinthemessagingmenu"
    );
});

QUnit.test('respondtonotificationprompt(denied)',asyncfunction(assert){
    assert.expect(3);

    awaitthis.start({
        env:{
            browser:{
                Notification:{
                    permission:'default',
                    asyncrequestPermission(){
                        this.permission='denied';
                        returnthis.permission;
                    },
                },
            },
        },
    });

    awaitafterNextRender(()=>
        document.querySelector('.o_MessagingMenu_toggler').click()
    );
    awaitafterNextRender(()=>
        document.querySelector('.o_NotificationRequest').click()
    );
    assert.containsOnce(
        document.body,
        '.toast.o_notification_content',
        "shoulddisplayatoastnotificationwiththedenyconfirmation"
    );
    assert.containsNone(
        document.body,
        '.o_MessagingMenu_counter',
        "shouldnotdisplayanotificationcounternexttothemessagingmenu"
    );

    awaitafterNextRender(()=>
        document.querySelector('.o_MessagingMenu_toggler').click()
    );
    assert.containsNone(
        document.body,
        '.o_NotificationRequest',
        "shoulddisplaynonotificationinthemessagingmenu"
    );
});

});
});
});

});
