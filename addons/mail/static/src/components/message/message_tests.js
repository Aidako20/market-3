flectra.define('mail/static/src/components/message/message_tests.js',function(require){
'usestrict';

constcomponents={
    Message:require('mail/static/src/components/message/message.js'),
};
const{makeDeferred}=require('mail/static/src/utils/deferred/deferred.js');
const{
    afterEach,
    afterNextRender,
    beforeEach,
    createRootComponent,
    nextAnimationFrame,
    start,
}=require('mail/static/src/utils/test_utils.js');

constBus=require('web.Bus');

QUnit.module('mail',{},function(){
QUnit.module('components',{},function(){
QUnit.module('message',{},function(){
QUnit.module('message_tests.js',{
    beforeEach(){
        beforeEach(this);

        this.createMessageComponent=async(message,otherProps)=>{
            constprops=Object.assign({messageLocalId:message.localId},otherProps);
            awaitcreateRootComponent(this,components.Message,{
                props,
                target:this.widget.el,
            });
        };

        this.start=asyncparams=>{
            const{env,widget}=awaitstart(Object.assign({},params,{
                data:this.data,
            }));
            this.env=env;
            this.widget=widget;
        };
    },
    afterEach(){
        afterEach(this);
    },
});

QUnit.test('basicrendering',asyncfunction(assert){
    assert.expect(12);

    awaitthis.start();
    constmessage=this.env.models['mail.message'].create({
        author:[['insert',{id:7,display_name:"DemoUser"}]],
        body:"<p>Test</p>",
        date:moment(),
        id:100,
    });
    awaitthis.createMessageComponent(message);
    assert.strictEqual(
        document.querySelectorAll('.o_Message').length,
        1,
        "shoulddisplayamessagecomponent"
    );
    constmessageEl=document.querySelector('.o_Message');
    assert.strictEqual(
        messageEl.dataset.messageLocalId,
        this.env.models['mail.message'].findFromIdentifyingData({id:100}).localId,
        "messagecomponentshouldbelinkedtomessagestoremodel"
    );
    assert.strictEqual(
        messageEl.querySelectorAll(`:scope.o_Message_sidebar`).length,
        1,
        "messageshouldhaveasidebar"
    );
    assert.strictEqual(
        messageEl.querySelectorAll(`:scope.o_Message_sidebar.o_Message_authorAvatar`).length,
        1,
        "messageshouldhaveauthoravatarinthesidebar"
    );
    assert.strictEqual(
        messageEl.querySelector(`:scope.o_Message_authorAvatar`).tagName,
        'IMG',
        "messageauthoravatarshouldbeanimage"
    );
    assert.strictEqual(
        messageEl.querySelector(`:scope.o_Message_authorAvatar`).dataset.src,
        '/web/image/res.partner/7/image_128',
        "messageauthoravatarshouldGETimageoftherelatedpartner"
    );
    assert.strictEqual(
        messageEl.querySelectorAll(`:scope.o_Message_authorName`).length,
        1,
        "messageshoulddisplayauthorname"
    );
    assert.strictEqual(
        messageEl.querySelector(`:scope.o_Message_authorName`).textContent,
        "DemoUser",
        "messageshoulddisplaycorrectauthorname"
    );
    assert.strictEqual(
        messageEl.querySelectorAll(`:scope.o_Message_date`).length,
        1,
        "messageshoulddisplaydate"
    );
    assert.strictEqual(
        messageEl.querySelectorAll(`:scope.o_Message_commands`).length,
        1,
        "messageshoulddisplaylistofcommands"
    );
    assert.strictEqual(
        messageEl.querySelectorAll(`:scope.o_Message_content`).length,
        1,
        "messageshoulddisplaythecontent"
    );
    assert.strictEqual(
        messageEl.querySelector(`:scope.o_Message_prettyBody`).innerHTML,
        "<p>Test</p>",
        "messageshoulddisplaythecorrectcontent"
    );
});

QUnit.test('moderation:asauthor,moderatedchannelwithpendingmoderationmessage',asyncfunction(assert){
    assert.expect(1);

    awaitthis.start();
    constthread=this.env.models['mail.thread'].create({
        id:20,
        model:'mail.channel',
    });
    constmessage=this.env.models['mail.message'].create({
        author:[['insert',{id:1,display_name:"Admin"}]],
        body:"<p>Test</p>",
        id:100,
        moderation_status:'pending_moderation',
        originThread:[['link',thread]],
    });
    awaitthis.createMessageComponent(message);

    assert.strictEqual(
        document.querySelectorAll(`.o_Message_moderationPending.o-author`).length,
        1,
        "shouldhavethemessagependingmoderation"
    );
});

QUnit.test('moderation:asmoderator,moderatedchannelwithpendingmoderationmessage',asyncfunction(assert){
    assert.expect(9);

    awaitthis.start();
    constthread=this.env.models['mail.thread'].create({
        id:20,
        model:'mail.channel',
        moderators:[['link',this.env.messaging.currentPartner]],
    });
    constmessage=this.env.models['mail.message'].create({
        author:[['insert',{id:7,display_name:"DemoUser"}]],
        body:"<p>Test</p>",
        id:100,
        moderation_status:'pending_moderation',
        originThread:[['link',thread]],
    });
    awaitthis.createMessageComponent(message);
    constmessageEl=document.querySelector('.o_Message');
    assert.ok(messageEl,"shoulddisplayamessage");
    assert.containsOnce(messageEl,`.o_Message_moderationSubHeader`,
        "shouldhavethemessagependingmoderation"
    );
    assert.containsNone(messageEl,`.o_Message_checkbox`,
        "shouldnothavethemoderationcheckboxbydefault"
    );
    assert.containsN(messageEl,'.o_Message_moderationAction',5,
        "thereshouldbe5contextualmoderationdecisionsnexttothemessage"
    );
    assert.containsOnce(messageEl,'.o_Message_moderationAction.o-accept',
        "thereshouldbeacontextualmoderationdecisiontoacceptthemessage"
    );
    assert.containsOnce(messageEl,'.o_Message_moderationAction.o-reject',
        "thereshouldbeacontextualmoderationdecisiontorejectthemessage"
    );
    assert.containsOnce(messageEl,'.o_Message_moderationAction.o-discard',
        "thereshouldbeacontextualmoderationdecisiontodiscardthemessage"
    );
    assert.containsOnce(messageEl,'.o_Message_moderationAction.o-allow',
        "thereshouldbeacontextualmoderationdecisiontoallowtheuserofthemessage)"
    );
    assert.containsOnce(messageEl,'.o_Message_moderationAction.o-ban',
        "thereshouldbeacontextualmoderationdecisiontobantheuserofthemessage"
    );
    //Theactionsaretestedaspartofdiscusstests.
});

QUnit.test('NotificationSent',asyncfunction(assert){
    assert.expect(9);

    awaitthis.start();
    constthreadViewer=this.env.models['mail.thread_viewer'].create({
        hasThreadView:true,
        thread:[['create',{
            id:11,
            model:'mail.channel',
        }]],
    });
    constmessage=this.env.models['mail.message'].create({
        id:10,
        message_type:'email',
        notifications:[['insert',{
            id:11,
            notification_status:'sent',
            notification_type:'email',
            partner:[['insert',{id:12,name:"Someone"}]],
        }]],
        originThread:[['link',threadViewer.thread]],
    });
    awaitthis.createMessageComponent(message,{
        threadViewLocalId:threadViewer.threadView.localId
    });

    assert.containsOnce(
        document.body,
        '.o_Message',
        "shoulddisplayamessagecomponent"
    );
    assert.containsOnce(
        document.body,
        '.o_Message_notificationIconClickable',
        "shoulddisplaythenotificationiconcontainer"
    );
    assert.containsOnce(
        document.body,
        '.o_Message_notificationIcon',
        "shoulddisplaythenotificationicon"
    );
    assert.hasClass(
        document.querySelector('.o_Message_notificationIcon'),
        'fa-envelope-o',
        "iconshouldrepresentemailsuccess"
    );

    awaitafterNextRender(()=>{
        document.querySelector('.o_Message_notificationIconClickable').click();
    });
    assert.containsOnce(
        document.body,
        '.o_NotificationPopover',
        "notificationpopovershouldbeopen"
    );
    assert.containsOnce(
        document.body,
        '.o_NotificationPopover_notificationIcon',
        "popovershouldhaveoneicon"
    );
    assert.hasClass(
        document.querySelector('.o_NotificationPopover_notificationIcon'),
        'fa-check',
        "popovershouldhavethesenticon"
    );
    assert.containsOnce(
        document.body,
        '.o_NotificationPopover_notificationPartnerName',
        "popovershouldhavethepartnername"
    );
    assert.strictEqual(
        document.querySelector('.o_NotificationPopover_notificationPartnerName').textContent.trim(),
        "Someone",
        "partnernameshouldbecorrect"
    );
});

QUnit.test('NotificationError',asyncfunction(assert){
    assert.expect(8);

    constopenResendActionDef=makeDeferred();
    constbus=newBus();
    bus.on('do-action',null,payload=>{
        assert.step('do_action');
        assert.strictEqual(
            payload.action,
            'mail.mail_resend_message_action',
            "actionshouldbetheonetoresendemail"
        );
        assert.strictEqual(
            payload.options.additional_context.mail_message_to_resend,
            10,
            "actionshouldhavecorrectmessageid"
        );
        openResendActionDef.resolve();
    });

    awaitthis.start({env:{bus}});
    constthreadViewer=this.env.models['mail.thread_viewer'].create({
        hasThreadView:true,
        thread:[['create',{
            id:11,
            model:'mail.channel',
        }]],
    });
    constmessage=this.env.models['mail.message'].create({
        id:10,
        message_type:'email',
        notifications:[['insert',{
            id:11,
            notification_status:'exception',
            notification_type:'email',
        }]],
        originThread:[['link',threadViewer.thread]],
    });
    awaitthis.createMessageComponent(message,{
        threadViewLocalId:threadViewer.threadView.localId
    });

    assert.containsOnce(
        document.body,
        '.o_Message',
        "shoulddisplayamessagecomponent"
    );
    assert.containsOnce(
        document.body,
        '.o_Message_notificationIconClickable',
        "shoulddisplaythenotificationiconcontainer"
    );
    assert.containsOnce(
        document.body,
        '.o_Message_notificationIcon',
        "shoulddisplaythenotificationicon"
    );
    assert.hasClass(
        document.querySelector('.o_Message_notificationIcon'),
        'fa-envelope',
        "iconshouldrepresentemailerror"
    );
    document.querySelector('.o_Message_notificationIconClickable').click();
    awaitopenResendActionDef;
    assert.verifySteps(
        ['do_action'],
        "shoulddoanactiontodisplaytheresendemaildialog"
    );
});

QUnit.test("'channel_fetch'notificationreceivediscorrectlyhandled",asyncfunction(assert){
    assert.expect(3);

    awaitthis.start();
    constcurrentPartner=this.env.models['mail.partner'].insert({
        id:this.env.messaging.currentPartner.id,
        display_name:"DemoUser",
    });
    constthread=this.env.models['mail.thread'].create({
        channel_type:'chat',
        id:11,
        members:[
            [['link',currentPartner]],
            [['insert',{id:11,display_name:"Recipient"}]]
        ],
        model:'mail.channel',
    });
    constthreadViewer=this.env.models['mail.thread_viewer'].create({
        hasThreadView:true,
        thread:[['link',thread]],
    });
    constmessage=this.env.models['mail.message'].create({
        author:[['link',currentPartner]],
        body:"<p>Test</p>",
        id:100,
        originThread:[['link',thread]],
    });

    awaitthis.createMessageComponent(message,{
        threadViewLocalId:threadViewer.threadView.localId,
    });

    assert.containsOnce(
        document.body,
        '.o_Message',
        "shoulddisplayamessagecomponent"
    );
    assert.containsNone(
        document.body,
        '.o_MessageSeenIndicator_icon',
        "messagecomponentshouldnothaveanycheck(V)asmessageisnotyetreceived"
    );

    //Simulatereceivedchannelfetchednotification
    constnotifications=[
        [['myDB','mail.channel',11],{
            info:'channel_fetched',
            last_message_id:100,
            partner_id:11,
        }],
    ];
    awaitafterNextRender(()=>{
        this.widget.call('bus_service','trigger','notification',notifications);
    });

    assert.containsOnce(
        document.body,
        '.o_MessageSeenIndicator_icon',
        "messageseenindicatorcomponentshouldonlycontainonecheck(V)asmessageisjustreceived"
    );
});

QUnit.test("'channel_seen'notificationreceivediscorrectlyhandled",asyncfunction(assert){
    assert.expect(3);

    awaitthis.start();
    constcurrentPartner=this.env.models['mail.partner'].insert({
        id:this.env.messaging.currentPartner.id,
        display_name:"DemoUser",
    });
    constthread=this.env.models['mail.thread'].create({
        channel_type:'chat',
        id:11,
        members:[
            [['link',currentPartner]],
            [['insert',{id:11,display_name:"Recipient"}]]
        ],
        model:'mail.channel',
    });
    constthreadViewer=this.env.models['mail.thread_viewer'].create({
        hasThreadView:true,
        thread:[['link',thread]],
    });
    constmessage=this.env.models['mail.message'].create({
        author:[['link',currentPartner]],
        body:"<p>Test</p>",
        id:100,
        originThread:[['link',thread]],
    });
    awaitthis.createMessageComponent(message,{
        threadViewLocalId:threadViewer.threadView.localId,
    });

    assert.containsOnce(
        document.body,
        '.o_Message',
        "shoulddisplayamessagecomponent"
    );
    assert.containsNone(
        document.body,
        '.o_MessageSeenIndicator_icon',
        "messagecomponentshouldnothaveanycheck(V)asmessageisnotyetreceived"
    );

    //Simulatereceivedchannelseennotification
    constnotifications=[
        [['myDB','mail.channel',11],{
            info:'channel_seen',
            last_message_id:100,
            partner_id:11,
        }],
    ];
    awaitafterNextRender(()=>{
        this.widget.call('bus_service','trigger','notification',notifications);
    });
    assert.containsN(
        document.body,
        '.o_MessageSeenIndicator_icon',
        2,
        "messageseenindicatorcomponentshouldcontaintwochecks(V)asmessageisseen"
    );
});

QUnit.test("'channel_fetch'notificationthen'channel_seen'received arecorrectlyhandled",asyncfunction(assert){
    assert.expect(4);

    awaitthis.start();
    constcurrentPartner=this.env.models['mail.partner'].insert({
        id:this.env.messaging.currentPartner.id,
        display_name:"DemoUser",
    });
    constthread=this.env.models['mail.thread'].create({
        channel_type:'chat',
        id:11,
        members:[
            [['link',currentPartner]],
            [['insert',{id:11,display_name:"Recipient"}]]
        ],
        model:'mail.channel',
    });
    constthreadViewer=this.env.models['mail.thread_viewer'].create({
        hasThreadView:true,
        thread:[['link',thread]],
    });
    constmessage=this.env.models['mail.message'].create({
        author:[['link',currentPartner]],
        body:"<p>Test</p>",
        id:100,
        originThread:[['link',thread]],
    });
    awaitthis.createMessageComponent(message,{
        threadViewLocalId:threadViewer.threadView.localId,
    });

    assert.containsOnce(
        document.body,
        '.o_Message',
        "shoulddisplayamessagecomponent"
    );
    assert.containsNone(
        document.body,
        '.o_MessageSeenIndicator_icon',
        "messagecomponentshouldnothaveanycheck(V)asmessageisnotyetreceived"
    );

    //Simulatereceivedchannelfetchednotification
    letnotifications=[
        [['myDB','mail.channel',11],{
            info:'channel_fetched',
            last_message_id:100,
            partner_id:11,
        }],
    ];
    awaitafterNextRender(()=>{
        this.widget.call('bus_service','trigger','notification',notifications);
    });
    assert.containsOnce(
        document.body,
        '.o_MessageSeenIndicator_icon',
        "messageseenindicatorcomponentshouldonlycontainonecheck(V)asmessageisjustreceived"
    );

    //Simulatereceivedchannelseennotification
    notifications=[
        [['myDB','mail.channel',11],{
            info:'channel_seen',
            last_message_id:100,
            partner_id:11,
        }],
    ];
    awaitafterNextRender(()=>{
        this.widget.call('bus_service','trigger','notification',notifications);
    });
    assert.containsN(
        document.body,
        '.o_MessageSeenIndicator_icon',
        2,
        "messageseenindicatorcomponentshouldcontaintwochecks(V)asmessageisnowseen"
    );
});

QUnit.test('donotshowmessagingseenindicatorifnotauthoredbyme',asyncfunction(assert){
    assert.expect(2);

    awaitthis.start();
    constauthor=this.env.models['mail.partner'].create({
        id:100,
        display_name:"DemoUser"
    });
    constthread=this.env.models['mail.thread'].create({
        channel_type:'chat',
        id:11,
        partnerSeenInfos:[['create',[
            {
                channelId:11,
                lastFetchedMessage:[['insert',{id:100}]],
                partnerId:this.env.messaging.currentPartner.id,
            },
            {
                channelId:11,
                lastFetchedMessage:[['insert',{id:100}]],
                partnerId:author.id,
            },
        ]]],
        model:'mail.channel',
    });
    constthreadViewer=this.env.models['mail.thread_viewer'].create({
        hasThreadView:true,
        thread:[['link',thread]],
    });
    constmessage=this.env.models['mail.message'].insert({
        author:[['link',author]],
        body:"<p>Test</p>",
        id:100,
        originThread:[['link',thread]],
    });
    awaitthis.createMessageComponent(message,{threadViewLocalId:threadViewer.threadView.localId});

    assert.containsOnce(
        document.body,
        '.o_Message',
        "shoulddisplayamessagecomponent"
    );
    assert.containsNone(
        document.body,
        '.o_Message_seenIndicator',
        "messagecomponentshouldnothaveanymessageseenindicator"
    );
});

QUnit.test('donotshowmessagingseenindicatorifbeforelastseenbyallmessage',asyncfunction(assert){
    assert.expect(3);

    awaitthis.start();
    constcurrentPartner=this.env.models['mail.partner'].insert({
        id:this.env.messaging.currentPartner.id,
        display_name:"DemoUser",
    });
    constthread=this.env.models['mail.thread'].create({
        channel_type:'chat',
        id:11,
        messageSeenIndicators:[['insert',{
            channelId:11,
            messageId:99,
        }]],
        model:'mail.channel',
    });
    constthreadViewer=this.env.models['mail.thread_viewer'].create({
        hasThreadView:true,
        thread:[['link',thread]],
    });
    constlastSeenMessage=this.env.models['mail.message'].create({
        author:[['link',currentPartner]],
        body:"<p>Youalreadysawme</p>",
        id:100,
        originThread:[['link',thread]],
    });
    constmessage=this.env.models['mail.message'].insert({
        author:[['link',currentPartner]],
        body:"<p>Test</p>",
        id:99,
        originThread:[['link',thread]],
    });
    thread.update({
       partnerSeenInfos:[['create',[
            {
                channelId:11,
                lastSeenMessage:[['link',lastSeenMessage]],
                partnerId:this.env.messaging.currentPartner.id,
            },
            {
                channelId:11,
                lastSeenMessage:[['link',lastSeenMessage]],
                partnerId:100,
            },
        ]]],
    });
    awaitthis.createMessageComponent(message,{
        threadViewLocalId:threadViewer.threadView.localId,
    });

    assert.containsOnce(
        document.body,
        '.o_Message',
        "shoulddisplayamessagecomponent"
    );
    assert.containsOnce(
        document.body,
        '.o_Message_seenIndicator',
        "messagecomponentshouldhaveamessageseenindicator"
    );
    assert.containsNone(
        document.body,
        '.o_MessageSeenIndicator_icon',
        "messagecomponentshouldnothaveanycheck(V)"
    );
});

QUnit.test('onlyshowmessagingseenindicatorifauthoredbyme,afterlastseenbyallmessage',asyncfunction(assert){
    assert.expect(3);

    awaitthis.start();
    constcurrentPartner=this.env.models['mail.partner'].insert({
        id:this.env.messaging.currentPartner.id,
        display_name:"DemoUser"
    });
    constthread=this.env.models['mail.thread'].create({
        channel_type:'chat',
        id:11,
        partnerSeenInfos:[['create',[
            {
                channelId:11,
                lastSeenMessage:[['insert',{id:100}]],
                partnerId:this.env.messaging.currentPartner.id,
            },
            {
                channelId:11,
                lastFetchedMessage:[['insert',{id:100}]],
                lastSeenMessage:[['insert',{id:99}]],
                partnerId:100,
            },
        ]]],
        messageSeenIndicators:[['insert',{
            channelId:11,
            messageId:100,
        }]],
        model:'mail.channel',
    });
    constthreadViewer=this.env.models['mail.thread_viewer'].create({
        hasThreadView:true,
        thread:[['link',thread]],
    });
    constmessage=this.env.models['mail.message'].insert({
        author:[['link',currentPartner]],
        body:"<p>Test</p>",
        id:100,
        originThread:[['link',thread]],
    });
    awaitthis.createMessageComponent(message,{
        threadViewLocalId:threadViewer.threadView.localId,
    });

    assert.containsOnce(
        document.body,
        '.o_Message',
        "shoulddisplayamessagecomponent"
    );
    assert.containsOnce(
        document.body,
        '.o_Message_seenIndicator',
        "messagecomponentshouldhaveamessageseenindicator"
    );
    assert.containsN(
        document.body,
        '.o_MessageSeenIndicator_icon',
        1,
        "messagecomponentshouldhaveonecheck(V)becausethemessagewasfetchedbyeveryonebutnoothermemberthanauthorhasseenthemessage"
    );
});

QUnit.test('allowattachmentdeleteonauthoredmessage',asyncfunction(assert){
    assert.expect(5);

    awaitthis.start();
    constmessage=this.env.models['mail.message'].create({
        attachments:[['insert-and-replace',{
            filename:"BLAH.jpg",
            id:10,
            name:"BLAH",
        }]],
        author:[['link',this.env.messaging.currentPartner]],
        body:"<p>Test</p>",
        id:100,
    });
    awaitthis.createMessageComponent(message);

    assert.containsOnce(
        document.body,
        '.o_Attachment',
        "shouldhaveanattachment",
    );
    assert.containsOnce(
        document.body,
        '.o_Attachment_asideItemUnlink',
        "shouldhavedeleteattachmentbutton"
    );

    awaitafterNextRender(()=>document.querySelector('.o_Attachment_asideItemUnlink').click());
    assert.containsOnce(
        document.body,
        '.o_AttachmentDeleteConfirmDialog',
        "Anattachmentdeleteconfirmationdialogshouldhavebeenopened"
    );
    assert.strictEqual(
        document.querySelector('.o_AttachmentDeleteConfirmDialog_mainText').textContent,
        `Doyoureallywanttodelete"BLAH"?`,
        "Confirmationdialogshouldcontaintheattachmentdeleteconfirmationtext"
    );

    awaitafterNextRender(()=>
        document.querySelector('.o_AttachmentDeleteConfirmDialog_confirmButton').click()
    );
    assert.containsNone(
        document.body,
        '.o_Attachment',
        "shouldnolongerhaveanattachment",
    );
});

QUnit.test('preventattachmentdeleteonnon-authoredmessage',asyncfunction(assert){
    assert.expect(2);

    awaitthis.start();
    constmessage=this.env.models['mail.message'].create({
        attachments:[['insert-and-replace',{
            filename:"BLAH.jpg",
            id:10,
            name:"BLAH",
        }]],
        author:[['insert',{id:11,display_name:"Guy"}]],
        body:"<p>Test</p>",
        id:100,
    });
    awaitthis.createMessageComponent(message);

    assert.containsOnce(
        document.body,
        '.o_Attachment',
        "shouldhaveanattachment",
    );
    assert.containsNone(
        document.body,
        '.o_Attachment_asideItemUnlink',
        "deleteattachmentbuttonshouldnotbeprinted"
    );
});

QUnit.test('subtypedescriptionshouldbedisplayedifitisdifferentthanbody',asyncfunction(assert){
    assert.expect(2);

    awaitthis.start();
    constmessage=this.env.models['mail.message'].create({
        body:"<p>Hello</p>",
        id:100,
        subtype_description:'Bonjour',
    });
    awaitthis.createMessageComponent(message);
    assert.containsOnce(
        document.body,
        '.o_Message_content',
        "messageshouldhavecontent"
    );
    assert.strictEqual(
        document.querySelector(`.o_Message_content`).textContent,
        "HelloBonjour",
        "messagecontentshoulddisplaybothbodyandsubtypedescriptionwhentheyaredifferent"
    );
});

QUnit.test('subtypedescriptionshouldnotbedisplayedifitissimilartobody',asyncfunction(assert){
    assert.expect(2);

    awaitthis.start();
    constmessage=this.env.models['mail.message'].create({
        body:"<p>Hello</p>",
        id:100,
        subtype_description:'hello',
    });
    awaitthis.createMessageComponent(message);
    assert.containsOnce(
        document.body,
        '.o_Message_content',
        "messageshouldhavecontent"
    );
    assert.strictEqual(
        document.querySelector(`.o_Message_content`).textContent,
        "Hello",
        "messagecontentshoulddisplayonlybodywhensubtypedescriptionissimilar"
    );
});

QUnit.test('data-oe-id&data-oe-modellinkredirectiononclick',asyncfunction(assert){
    assert.expect(7);

    constbus=newBus();
    bus.on('do-action',null,payload=>{
        assert.strictEqual(
            payload.action.type,
            'ir.actions.act_window',
            "actionshouldopenview"
        );
        assert.strictEqual(
            payload.action.res_model,
            'some.model',
            "actionshouldopenviewon'some.model'model"
        );
        assert.strictEqual(
            payload.action.res_id,
            250,
            "actionshouldopenviewon250"
        );
        assert.step('do-action:openFormView_some.model_250');
    });
    awaitthis.start({env:{bus}});
    constmessage=this.env.models['mail.message'].create({
        body:`<p><ahref="#"data-oe-id="250"data-oe-model="some.model">some.model_250</a></p>`,
        id:100,
    });
    awaitthis.createMessageComponent(message);
    assert.containsOnce(
        document.body,
        '.o_Message_content',
        "messageshouldhavecontent"
    );
    assert.containsOnce(
        document.querySelector('.o_Message_content'),
        'a',
        "messagecontentshouldhavealink"
    );

    document.querySelector(`.o_Message_contenta`).click();
    assert.verifySteps(
        ['do-action:openFormView_some.model_250'],
        "shouldhaveopenformviewonrelatedrecordafterclickonlink"
    );
});

QUnit.test('chatwithauthorshouldbeopenedafterclickingonhisavatar',asyncfunction(assert){
    assert.expect(4);

    this.data['res.partner'].records.push({id:10});
    this.data['res.users'].records.push({partner_id:10});
    awaitthis.start({
        hasChatWindow:true,
    });
    constmessage=this.env.models['mail.message'].create({
        author:[['insert',{id:10}]],
        id:10,
    });
    awaitthis.createMessageComponent(message);
    assert.containsOnce(
        document.body,
        '.o_Message_authorAvatar',
        "messageshouldhavetheauthoravatar"
    );
    assert.hasClass(
        document.querySelector('.o_Message_authorAvatar'),
        'o_redirect',
        "authoravatarshouldhavetheredirectstyle"
    );

    awaitafterNextRender(()=>
        document.querySelector('.o_Message_authorAvatar').click()
    );
    assert.containsOnce(
        document.body,
        '.o_ChatWindow_thread',
        "chatwindowwiththreadshouldbeopenedafterclickingonauthoravatar"
    );
    assert.strictEqual(
        document.querySelector('.o_ChatWindow_thread').dataset.correspondentId,
        message.author.id.toString(),
        "chatwithauthorshouldbeopenedafterclickingonhisavatar"
    );
});

QUnit.test('chatwithauthorshouldbeopenedafterclickingonhisimstatusicon',asyncfunction(assert){
    assert.expect(4);

    this.data['res.partner'].records.push({id:10});
    this.data['res.users'].records.push({partner_id:10});
    awaitthis.start({
        hasChatWindow:true,
    });
    constmessage=this.env.models['mail.message'].create({
        author:[['insert',{id:10,im_status:'online'}]],
        id:10,
    });
    awaitthis.createMessageComponent(message);
    assert.containsOnce(
        document.body,
        '.o_Message_partnerImStatusIcon',
        "messageshouldhavetheauthorimstatusicon"
    );
    assert.hasClass(
        document.querySelector('.o_Message_partnerImStatusIcon'),
        'o-has-open-chat',
        "authorimstatusiconshouldhavetheopenchatstyle"
    );

    awaitafterNextRender(()=>
        document.querySelector('.o_Message_partnerImStatusIcon').click()
    );
    assert.containsOnce(
        document.body,
        '.o_ChatWindow_thread',
        "chatwindowwiththreadshouldbeopenedafterclickingonauthorimstatusicon"
    );
    assert.strictEqual(
        document.querySelector('.o_ChatWindow_thread').dataset.correspondentId,
        message.author.id.toString(),
        "chatwithauthorshouldbeopenedafterclickingonhisimstatusicon"
    );
});

QUnit.test('openchatwithauthoronavatarclickshouldbedisabledwhencurrentlychattingwiththeauthor',asyncfunction(assert){
    assert.expect(3);

    this.data['mail.channel'].records.push({
        channel_type:'chat',
        members:[this.data.currentPartnerId,10],
        public:'private',
    });
    this.data['res.partner'].records.push({id:10});
    this.data['res.users'].records.push({partner_id:10});
    awaitthis.start({
        hasChatWindow:true,
    });
    constcorrespondent=this.env.models['mail.partner'].insert({id:10});
    constmessage=this.env.models['mail.message'].create({
        author:[['link',correspondent]],
        id:10,
    });
    constthread=awaitcorrespondent.getChat();
    constthreadViewer=this.env.models['mail.thread_viewer'].create({
        hasThreadView:true,
        thread:[['link',thread]],
    });
    awaitthis.createMessageComponent(message,{
        threadViewLocalId:threadViewer.threadView.localId,
    });
    assert.containsOnce(
        document.body,
        '.o_Message_authorAvatar',
        "messageshouldhavetheauthoravatar"
    );
    assert.doesNotHaveClass(
        document.querySelector('.o_Message_authorAvatar'),
        'o_redirect',
        "authoravatarshouldnothavetheredirectstyle"
    );

    document.querySelector('.o_Message_authorAvatar').click();
    awaitnextAnimationFrame();
    assert.containsNone(
        document.body,
        '.o_ChatWindow',
        "shouldhavenothreadopenedafterclickingonauthoravatarwhencurrentlychattingwiththeauthor"
    );
});

QUnit.test('basicrenderingoftrackingvalue(floattype)',asyncfunction(assert){
    assert.expect(8);

    awaitthis.start();
    constmessage=this.env.models['mail.message'].create({
        id:11,
        tracking_value_ids:[{
            changed_field:"Total",
            field_type:"float",
            id:6,
            new_value:45.67,
            old_value:12.3,
        }],
    });
    awaitthis.createMessageComponent(message);
    assert.containsOnce(
        document.body,
        '.o_Message_trackingValue',
        "shoulddisplayatrackingvalue"
    );
    assert.containsOnce(
        document.body,
        '.o_Message_trackingValueFieldName',
        "shoulddisplaythenameofthetrackedfield"
    );
    assert.strictEqual(
        document.querySelector('.o_Message_trackingValueFieldName').textContent,
        "Total:",
        "shoulddisplaythecorrecttrackedfieldname(Total)",
    );
    assert.containsOnce(
        document.body,
        '.o_Message_trackingValueOldValue',
        "shoulddisplaytheoldvalue"
    );
    assert.strictEqual(
        document.querySelector('.o_Message_trackingValueOldValue').textContent,
        "12.30",
        "shoulddisplaythecorrectoldvalue(12.30)",
    );
    assert.containsOnce(
        document.body,
        '.o_Message_trackingValueSeparator',
        "shoulddisplaytheseparator"
    );
    assert.containsOnce(
        document.body,
        '.o_Message_trackingValueNewValue',
        "shoulddisplaythenewvalue"
    );
    assert.strictEqual(
        document.querySelector('.o_Message_trackingValueNewValue').textContent,
        "45.67",
        "shoulddisplaythecorrectnewvalue(45.67)",
    );
});

QUnit.test('renderingoftrackedfieldoftypeinteger:fromnon-0to0',asyncfunction(assert){
    assert.expect(1);

    awaitthis.start();
    constmessage=this.env.models['mail.message'].create({
        id:11,
        tracking_value_ids:[{
            changed_field:"Total",
            field_type:"integer",
            id:6,
            new_value:0,
            old_value:1,
        }],
    });
    awaitthis.createMessageComponent(message);
    assert.strictEqual(
        document.querySelector('.o_Message_trackingValue').textContent,
        "Total:10",
        "shoulddisplaythecorrectcontentoftrackedfieldoftypeinteger:fromnon-0to0(Total:1->0)"
    );
});

QUnit.test('renderingoftrackedfieldoftypeinteger:from0tonon-0',asyncfunction(assert){
    assert.expect(1);

    awaitthis.start();
    constmessage=this.env.models['mail.message'].create({
        id:11,
        tracking_value_ids:[{
            changed_field:"Total",
            field_type:"integer",
            id:6,
            new_value:1,
            old_value:0,
        }],
    });
    awaitthis.createMessageComponent(message);
    assert.strictEqual(
        document.querySelector('.o_Message_trackingValue').textContent,
        "Total:01",
        "shoulddisplaythecorrectcontentoftrackedfieldoftypeinteger:from0tonon-0(Total:0->1)"
    );
});

QUnit.test('renderingoftrackedfieldoftypefloat:fromnon-0to0',asyncfunction(assert){
    assert.expect(1);

    awaitthis.start();
    constmessage=this.env.models['mail.message'].create({
        id:11,
        tracking_value_ids:[{
            changed_field:"Total",
            field_type:"float",
            id:6,
            new_value:0,
            old_value:1,
        }],
    });
    awaitthis.createMessageComponent(message);
    assert.strictEqual(
        document.querySelector('.o_Message_trackingValue').textContent,
        "Total:1.000.00",
        "shoulddisplaythecorrectcontentoftrackedfieldoftypefloat:fromnon-0to0(Total:1.00->0.00)"
    );
});

QUnit.test('renderingoftrackedfieldoftypefloat:from0tonon-0',asyncfunction(assert){
    assert.expect(1);

    awaitthis.start();
    constmessage=this.env.models['mail.message'].create({
        id:11,
        tracking_value_ids:[{
            changed_field:"Total",
            field_type:"float",
            id:6,
            new_value:1,
            old_value:0,
        }],
    });
    awaitthis.createMessageComponent(message);
    assert.strictEqual(
        document.querySelector('.o_Message_trackingValue').textContent,
        "Total:0.001.00",
        "shoulddisplaythecorrectcontentoftrackedfieldoftypefloat:from0tonon-0(Total:0.00->1.00)"
    );
});

QUnit.test('renderingoftrackedfieldoftypemonetary:fromnon-0to0',asyncfunction(assert){
    assert.expect(1);

    awaitthis.start();
    constmessage=this.env.models['mail.message'].create({
        id:11,
        tracking_value_ids:[{
            changed_field:"Total",
            field_type:"monetary",
            id:6,
            new_value:0,
            old_value:1,
        }],
    });
    awaitthis.createMessageComponent(message);
    assert.strictEqual(
        document.querySelector('.o_Message_trackingValue').textContent,
        "Total:1.000.00",
        "shoulddisplaythecorrectcontentoftrackedfieldoftypemonetary:fromnon-0to0(Total:1.00->0.00)"
    );
});

QUnit.test('renderingoftrackedfieldoftypemonetary:from0tonon-0',asyncfunction(assert){
    assert.expect(1);

    awaitthis.start();
    constmessage=this.env.models['mail.message'].create({
        id:11,
        tracking_value_ids:[{
            changed_field:"Total",
            field_type:"monetary",
            id:6,
            new_value:1,
            old_value:0,
        }],
    });
    awaitthis.createMessageComponent(message);
    assert.strictEqual(
        document.querySelector('.o_Message_trackingValue').textContent,
        "Total:0.001.00",
        "shoulddisplaythecorrectcontentoftrackedfieldoftypemonetary:from0tonon-0(Total:0.00->1.00)"
    );
});

QUnit.test('renderingoftrackedfieldoftypeboolean:fromtruetofalse',asyncfunction(assert){
    assert.expect(1);

    awaitthis.start();
    constmessage=this.env.models['mail.message'].create({
        id:11,
        tracking_value_ids:[{
            changed_field:"IsReady",
            field_type:"boolean",
            id:6,
            new_value:false,
            old_value:true,
        }],
    });
    awaitthis.createMessageComponent(message);
    assert.strictEqual(
        document.querySelector('.o_Message_trackingValue').textContent,
        "IsReady:TrueFalse",
        "shoulddisplaythecorrectcontentoftrackedfieldoftypeboolean:fromtruetofalse(IsReady:True->False)"
    );
});

QUnit.test('renderingoftrackedfieldoftypeboolean:fromfalsetotrue',asyncfunction(assert){
    assert.expect(1);

    awaitthis.start();
    constmessage=this.env.models['mail.message'].create({
        id:11,
        tracking_value_ids:[{
            changed_field:"IsReady",
            field_type:"boolean",
            id:6,
            new_value:true,
            old_value:false,
        }],
    });
    awaitthis.createMessageComponent(message);
    assert.strictEqual(
        document.querySelector('.o_Message_trackingValue').textContent,
        "IsReady:FalseTrue",
        "shoulddisplaythecorrectcontentoftrackedfieldoftypeboolean:fromfalsetotrue(IsReady:False->True)"
    );
});

QUnit.test('renderingoftrackedfieldoftypechar:fromastringtoemptystring',asyncfunction(assert){
    assert.expect(1);

    awaitthis.start();
    constmessage=this.env.models['mail.message'].create({
        id:11,
        tracking_value_ids:[{
            changed_field:"Name",
            field_type:"char",
            id:6,
            new_value:"",
            old_value:"Marc",
        }],
    });
    awaitthis.createMessageComponent(message);
    assert.strictEqual(
        document.querySelector('.o_Message_trackingValue').textContent,
        "Name:Marc",
        "shoulddisplaythecorrectcontentoftrackedfieldoftypechar:fromastringtoemptystring(Name:Marc->)"
    );
});

QUnit.test('renderingoftrackedfieldoftypechar:fromemptystringtoastring',asyncfunction(assert){
    assert.expect(1);

    awaitthis.start();
    constmessage=this.env.models['mail.message'].create({
        id:11,
        tracking_value_ids:[{
            changed_field:"Name",
            field_type:"char",
            id:6,
            new_value:"Marc",
            old_value:"",
        }],
    });
    awaitthis.createMessageComponent(message);
    assert.strictEqual(
        document.querySelector('.o_Message_trackingValue').textContent,
        "Name:Marc",
        "shoulddisplaythecorrectcontentoftrackedfieldoftypechar:fromemptystringtoastring(Name:->Marc)"
    );
});

QUnit.test('renderingoftrackedfieldoftypedate:fromnodatetoasetdate',asyncfunction(assert){
    assert.expect(1);

    awaitthis.start();
    constmessage=this.env.models['mail.message'].create({
        id:11,
        tracking_value_ids:[{
            changed_field:"Deadline",
            field_type:"date",
            id:6,
            new_value:"2018-12-14",
            old_value:false,
        }],
    });
    awaitthis.createMessageComponent(message);
    assert.strictEqual(
        document.querySelector('.o_Message_trackingValue').textContent,
        "Deadline:12/14/2018",
        "shoulddisplaythecorrectcontentoftrackedfieldoftypedate:fromnodatetoasetdate(Deadline:->12/14/2018)"
    );
});

QUnit.test('renderingoftrackedfieldoftypedate:fromasetdatetonodate',asyncfunction(assert){
    assert.expect(1);

    awaitthis.start();
    constmessage=this.env.models['mail.message'].create({
        id:11,
        tracking_value_ids:[{
            changed_field:"Deadline",
            field_type:"date",
            id:6,
            new_value:false,
            old_value:"2018-12-14",
        }],
    });
    awaitthis.createMessageComponent(message);
    assert.strictEqual(
        document.querySelector('.o_Message_trackingValue').textContent,
        "Deadline:12/14/2018",
        "shoulddisplaythecorrectcontentoftrackedfieldoftypedate:fromasetdatetonodate(Deadline:12/14/2018->)"
    );
});

QUnit.test('renderingoftrackedfieldoftypedatetime:fromnodateandtimetoasetdateandtime',asyncfunction(assert){
    assert.expect(1);

    awaitthis.start();
    constmessage=this.env.models['mail.message'].create({
        id:11,
        tracking_value_ids:[{
            changed_field:"Deadline",
            field_type:"datetime",
            id:6,
            new_value:"2018-12-1413:42:28",
            old_value:false,
        }],
    });
    awaitthis.createMessageComponent(message);
    assert.strictEqual(
        document.querySelector('.o_Message_trackingValue').textContent,
        "Deadline:12/14/201813:42:28",
        "shoulddisplaythecorrectcontentoftrackedfieldoftypedatetime:fromnodateandtimetoasetdateandtime(Deadline:->12/14/201813:42:28)"
    );
});

QUnit.test('renderingoftrackedfieldoftypedatetime:fromasetdateandtimetonodateandtime',asyncfunction(assert){
    assert.expect(1);

    awaitthis.start();
    constmessage=this.env.models['mail.message'].create({
        id:11,
        tracking_value_ids:[{
            changed_field:"Deadline",
            field_type:"datetime",
            id:6,
            new_value:false,
            old_value:"2018-12-1413:42:28",
        }],
    });
    awaitthis.createMessageComponent(message);
    assert.strictEqual(
        document.querySelector('.o_Message_trackingValue').textContent,
        "Deadline:12/14/201813:42:28",
        "shoulddisplaythecorrectcontentoftrackedfieldoftypedatetime:fromasetdateandtimetonodateandtime(Deadline:12/14/201813:42:28->)"
    );
});

QUnit.test('renderingoftrackedfieldoftypetext:fromsometexttoempty',asyncfunction(assert){
    assert.expect(1);

    awaitthis.start();
    constmessage=this.env.models['mail.message'].create({
        id:11,
        tracking_value_ids:[{
            changed_field:"Name",
            field_type:"text",
            id:6,
            new_value:"",
            old_value:"Marc",
        }],
    });
    awaitthis.createMessageComponent(message);
    assert.strictEqual(
        document.querySelector('.o_Message_trackingValue').textContent,
        "Name:Marc",
        "shoulddisplaythecorrectcontentoftrackedfieldoftypetext:fromsometexttoempty(Name:Marc->)"
    );
});

QUnit.test('renderingoftrackedfieldoftypetext:fromemptytosometext',asyncfunction(assert){
    assert.expect(1);

    awaitthis.start();
    constmessage=this.env.models['mail.message'].create({
        id:11,
        tracking_value_ids:[{
            changed_field:"Name",
            field_type:"text",
            id:6,
            new_value:"Marc",
            old_value:"",
        }],
    });
    awaitthis.createMessageComponent(message);
    assert.strictEqual(
        document.querySelector('.o_Message_trackingValue').textContent,
        "Name:Marc",
        "shoulddisplaythecorrectcontentoftrackedfieldoftypetext:fromemptytosometext(Name:->Marc)"
    );
});

QUnit.test('renderingoftrackedfieldoftypeselection:fromaselectiontonoselection',asyncfunction(assert){
    assert.expect(1);

    awaitthis.start();
    constmessage=this.env.models['mail.message'].create({
        id:11,
        tracking_value_ids:[{
            changed_field:"State",
            field_type:"selection",
            id:6,
            new_value:"",
            old_value:"ok",
        }],
    });
    awaitthis.createMessageComponent(message);
    assert.strictEqual(
        document.querySelector('.o_Message_trackingValue').textContent,
        "State:ok",
        "shoulddisplaythecorrectcontentoftrackedfieldoftypeselection:fromaselectiontonoselection(State:ok->)"
    );
});

QUnit.test('renderingoftrackedfieldoftypeselection:fromnoselectiontoaselection',asyncfunction(assert){
    assert.expect(1);

    awaitthis.start();
    constmessage=this.env.models['mail.message'].create({
        id:11,
        tracking_value_ids:[{
            changed_field:"State",
            field_type:"selection",
            id:6,
            new_value:"ok",
            old_value:"",
        }],
    });
    awaitthis.createMessageComponent(message);
    assert.strictEqual(
        document.querySelector('.o_Message_trackingValue').textContent,
        "State:ok",
        "shoulddisplaythecorrectcontentoftrackedfieldoftypeselection:fromnoselectiontoaselection(State:->ok)"
    );
});

QUnit.test('renderingoftrackedfieldoftypemany2one:fromhavingarelatedrecordtonorelatedrecord',asyncfunction(assert){
    assert.expect(1);

    awaitthis.start();
    constmessage=this.env.models['mail.message'].create({
        id:11,
        tracking_value_ids:[{
            changed_field:"Author",
            field_type:"many2one",
            id:6,
            new_value:"",
            old_value:"Marc",
        }],
    });
    awaitthis.createMessageComponent(message);
    assert.strictEqual(
        document.querySelector('.o_Message_trackingValue').textContent,
        "Author:Marc",
        "shoulddisplaythecorrectcontentoftrackedfieldoftypemany2one:fromhavingarelatedrecordtonorelatedrecord(Author:Marc->)"
    );
});

QUnit.test('renderingoftrackedfieldoftypemany2one:fromnorelatedrecordtohavingarelatedrecord',asyncfunction(assert){
    assert.expect(1);

    awaitthis.start();
    constmessage=this.env.models['mail.message'].create({
        id:11,
        tracking_value_ids:[{
            changed_field:"Author",
            field_type:"many2one",
            id:6,
            new_value:"Marc",
            old_value:"",
        }],
    });
    awaitthis.createMessageComponent(message);
    assert.strictEqual(
        document.querySelector('.o_Message_trackingValue').textContent,
        "Author:Marc",
        "shoulddisplaythecorrectcontentoftrackedfieldoftypemany2one:fromnorelatedrecordtohavingarelatedrecord(Author:->Marc)"
    );
});

QUnit.test('messageshouldnotbeconsideredas"clicked"afterclickingonitsauthorname',asyncfunction(assert){
    assert.expect(1);

    awaitthis.start();
    constmessage=this.env.models['mail.message'].create({
        author:[['insert',{id:7,display_name:"DemoUser"}]],
        body:"<p>Test</p>",
        id:100,
    });
    awaitthis.createMessageComponent(message);
    document.querySelector(`.o_Message_authorName`).click();
    awaitnextAnimationFrame();
    assert.doesNotHaveClass(
        document.querySelector(`.o_Message`),
        'o-clicked',
        "messageshouldnotbeconsideredas'clicked'afterclickingonitsauthorname"
    );
});

QUnit.test('messageshouldnotbeconsideredas"clicked"afterclickingonitsauthoravatar',asyncfunction(assert){
    assert.expect(1);

    awaitthis.start();
    constmessage=this.env.models['mail.message'].create({
        author:[['insert',{id:7,display_name:"DemoUser"}]],
        body:"<p>Test</p>",
        id:100,
    });
    awaitthis.createMessageComponent(message);
    document.querySelector(`.o_Message_authorAvatar`).click();
    awaitnextAnimationFrame();
    assert.doesNotHaveClass(
        document.querySelector(`.o_Message`),
        'o-clicked',
        "messageshouldnotbeconsideredas'clicked'afterclickingonitsauthoravatar"
    );
});

QUnit.test('messageshouldnotbeconsideredas"clicked"afterclickingonnotificationfailureicon',asyncfunction(assert){
    assert.expect(1);

    awaitthis.start();
    constthreadViewer=this.env.models['mail.thread_viewer'].create({
        hasThreadView:true,
        thread:[['create',{
            id:11,
            model:'mail.channel',
        }]],
    });
    constmessage=this.env.models['mail.message'].create({
        id:10,
        message_type:'email',
        notifications:[['insert',{
            id:11,
            notification_status:'exception',
            notification_type:'email',
        }]],
        originThread:[['link',threadViewer.thread]],
    });
    awaitthis.createMessageComponent(message,{
        threadViewLocalId:threadViewer.threadView.localId
    });
    document.querySelector('.o_Message_notificationIconClickable.o-error').click();
    awaitnextAnimationFrame();
    assert.doesNotHaveClass(
        document.querySelector(`.o_Message`),
        'o-clicked',
        "messageshouldnotbeconsideredas'clicked'afterclickingonnotificationfailureicon"
    );
});

});
});
});

});
