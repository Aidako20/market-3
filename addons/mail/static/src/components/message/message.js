flectra.define('mail/static/src/components/message/message.js',function(require){
'usestrict';

constcomponents={
    AttachmentList:require('mail/static/src/components/attachment_list/attachment_list.js'),
    MessageSeenIndicator:require('mail/static/src/components/message_seen_indicator/message_seen_indicator.js'),
    ModerationBanDialog:require('mail/static/src/components/moderation_ban_dialog/moderation_ban_dialog.js'),
    ModerationDiscardDialog:require('mail/static/src/components/moderation_discard_dialog/moderation_discard_dialog.js'),
    ModerationRejectDialog:require('mail/static/src/components/moderation_reject_dialog/moderation_reject_dialog.js'),
    NotificationPopover:require('mail/static/src/components/notification_popover/notification_popover.js'),
    PartnerImStatusIcon:require('mail/static/src/components/partner_im_status_icon/partner_im_status_icon.js'),
};
constuseShouldUpdateBasedOnProps=require('mail/static/src/component_hooks/use_should_update_based_on_props/use_should_update_based_on_props.js');
constuseStore=require('mail/static/src/component_hooks/use_store/use_store.js');
constuseUpdate=require('mail/static/src/component_hooks/use_update/use_update.js');

const{_lt}=require('web.core');
const{format}=require('web.field_utils');
const{getLangDatetimeFormat}=require('web.time');

const{Component,useState}=owl;
const{useRef}=owl.hooks;

constREAD_MORE=_lt("readmore");
constREAD_LESS=_lt("readless");
const{isEventHandled,markEventHandled}=require('mail/static/src/utils/utils.js');

classMessageextendsComponent{

    /**
     *@override
     */
    constructor(...args){
        super(...args);
        this.state=useState({
            //Determineifthemoderationbandialogisdisplayed.
            hasModerationBanDialog:false,
            //Determineifthemoderationdiscarddialogisdisplayed.
            hasModerationDiscardDialog:false,
            //Determineifthemoderationrejectdialogisdisplayed.
            hasModerationRejectDialog:false,
            /**
             *Determinewhetherthemessageisclicked.Whenmessageisin
             *clickedstate,itkeepsdisplayingthecommands.
             */
            isClicked:false,
        });
        useShouldUpdateBasedOnProps();
        useStore(props=>{
            constmessage=this.env.models['mail.message'].get(props.messageLocalId);
            constauthor=message?message.author:undefined;
            constpartnerRoot=this.env.messaging.partnerRoot;
            constoriginThread=message?message.originThread:undefined;
            constthreadView=this.env.models['mail.thread_view'].get(props.threadViewLocalId);
            constthread=threadView?threadView.thread:undefined;
            return{
                attachments:message
                    ?message.attachments.map(attachment=>attachment.__state)
                    :[],
                author,
                authorAvatarUrl:author&&author.avatarUrl,
                authorImStatus:author&&author.im_status,
                authorNameOrDisplayName:author&&author.nameOrDisplayName,
                correspondent:thread&&thread.correspondent,
                hasMessageCheckbox:message?message.hasCheckbox:false,
                isDeviceMobile:this.env.messaging.device.isMobile,
                isMessageChecked:message&&threadView
                    ?message.isChecked(thread,threadView.stringifiedDomain)
                    :false,
                message:message?message.__state:undefined,
                notifications:message?message.notifications.map(notif=>notif.__state):[],
                originThread,
                originThreadModel:originThread&&originThread.model,
                originThreadName:originThread&&originThread.name,
                originThreadUrl:originThread&&originThread.url,
                partnerRoot,
                thread,
                threadHasSeenIndicators:thread&&thread.hasSeenIndicators,
                threadMassMailing:thread&&thread.mass_mailing,
            };
        },{
            compareDepth:{
                attachments:1,
                notifications:1,
            },
        });
        useUpdate({func:()=>this._update()});
        /**
         *Theintentofthereplybuttondependsonthelastrenderedstate.
         */
        this._wasSelected;
        /**
         *ValueofthelastrenderedprettyBody.Usefultocomparetonewvalue
         *todecideifithastobeupdated.
         */
        this._lastPrettyBody;
        /**
         *ReferencetoelementcontainingtheprettyBody.Usefultobeableto
         *replaceprettyBodywithnewvalueinJS(whichisfasterthant-raw).
         */
        this._prettyBodyRef=useRef('prettyBody');
        /**
         *Referencetothecontentofthemessage.
         */
        this._contentRef=useRef('content');
        /**
         *Togetcheckboxstate.
         */
        this._checkboxRef=useRef('checkbox');
        /**
         *IdofsetIntervalusedtoauto-updatetimeelapsedofmessageat
         *regulartime.
         */
        this._intervalId=undefined;
        /**
         *Statestheindexofthelast"readmore"thatwasinserted.
         *Usefultorememberthestateforeach"readmore"eveniftheirDOM
         *isre-rendered.
         */
        this._lastReadMoreIndex=0;
        /**
         *Determineswhethereach"readmore"isopenedorclosed.Thekeysare
         *index,whichisdeterminedbytheirorderofappearanceintheDOM.
         *Ifbodychangessothat"readmore"countisdifferent,theirdefault
         *valuewillbe"wrong"atthenextrenderbutthisisanacceptable
         *limitation.It'smoreimportanttosavethestatecorrectlyina
         *typicalnon-changingsituation.
         */
        this._isReadMoreByIndex=newMap();
        this._constructor();
    }

    /**
     *Allowspatchingconstructor.
     */
    _constructor(){}

    willUnmount(){
        clearInterval(this._intervalId);
    }

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *@returns{string}
     */
    getavatar(){
        if(this.message.author){
            //TODOFIXMEforpublicuserthismightnotbeaccessible.task-2223236
            //weshouldprobablyusethecorrespondigattachmentid+accesstoken
            //orcreateadedicatedroutetogetmessageimage,checkingtheaccessrightofthemessage
            returnthis.message.author.avatarUrl;
        }elseif(this.message.message_type==='email'){
            return'/mail/static/src/img/email_icon.png';
        }
        return'/mail/static/src/img/smiley/avatar.jpg';
    }

    /**
     *Getthedatetimeofthemessageatcurrentuserlocaletime.
     *
     *@returns{string}
     */
    getdatetime(){
        returnthis.message.date.format(getLangDatetimeFormat());
    }

    /**
     *Determineswhetherauthoropenchatfeatureisenabledonmessage.
     *
     *@returns{boolean}
     */
    gethasAuthorOpenChat(){
        if(!this.message.author){
            returnfalse;
        }
        if(
            this.threadView&&
            this.threadView.thread&&
            this.threadView.thread.correspondent===this.message.author
        ){
            returnfalse;
        }
        returntrue;
    }

    /**
     *Tellwhetherthebottomofthismessageisvisibleornot.
     *
     *@param{Object}param0
     *@param{integer}[offset=0]
     *@returns{boolean}
     */
    isBottomVisible({offset=0}={}){
        if(!this.el){
            returnfalse;
        }
        constelRect=this.el.getBoundingClientRect();
        if(!this.el.parentNode){
            returnfalse;
        }
        constparentRect=this.el.parentNode.getBoundingClientRect();
        //bottomwith(double)10pxoffset
        return(
            elRect.bottom<parentRect.bottom+offset&&
            parentRect.top<elRect.bottom+offset
        );
    }

    /**
     *Tellwhetherthemessageispartiallyvisibleonbrowserwindowornot.
     *
     *@returns{boolean}
     */
    isPartiallyVisible(){
        constelRect=this.el.getBoundingClientRect();
        if(!this.el.parentNode){
            returnfalse;
        }
        constparentRect=this.el.parentNode.getBoundingClientRect();
        //intersectionwith5pxoffset
        return(
            elRect.top<parentRect.bottom+5&&
            parentRect.top<elRect.bottom+5
        );
    }

    /**
     *@returns{mail.message}
     */
    getmessage(){
        returnthis.env.models['mail.message'].get(this.props.messageLocalId);
    }
    /**
     *@returns{string}
     */
    getOPEN_CHAT(){
        returnthis.env._t("Openchat");
    }

    /**
     *Makethismessageviewableinitsenclosingscrollenvironment(usually
     *messagelist).
     *
     *@param{Object}[param0={}]
     *@param{string}[param0.behavior='auto']
     *@param{string}[param0.block='end']
     *@returns{Promise}
     */
    asyncscrollIntoView({behavior='auto',block='end'}={}){
        this.el.scrollIntoView({
            behavior,
            block,
            inline:'nearest',
        });
        if(behavior==='smooth'){
            returnnewPromise(resolve=>setTimeout(resolve,500));
        }else{
            returnPromise.resolve();
        }
    }

    /**
     *Gettheshorttimeformatofthemessagedate.
     *
     *@returns{string}
     */
    getshortTime(){
        returnthis.message.date.format('hh:mm');
    }

    /**
     *@returns{mail.thread_view}
     */
    getthreadView(){
        returnthis.env.models['mail.thread_view'].get(this.props.threadViewLocalId);
    }

    /**
     *@returns{Object}
     */
    gettrackingValues(){
        returnthis.message.tracking_value_ids.map(trackingValue=>{
            constvalue=Object.assign({},trackingValue);
            value.changed_field=_.str.sprintf(this.env._t("%s:"),value.changed_field);
            /**
             *MapstrackedfieldtypetoaJSformatter.Trackingvaluesare
             *notalwaysstoredinthesamefieldtypeastheirorigintype.
             *Fieldtypesthatarenotlistedherearenotsupportedby
             *trackinginPython.Alsosee`create_tracking_values`inPython.
             */
            switch(value.field_type){
                case'boolean':
                    value.old_value=format.boolean(value.old_value,undefined,{forceString:true});
                    value.new_value=format.boolean(value.new_value,undefined,{forceString:true});
                    break;
                /**
                 *many2oneformatterexistsbutisexpectingid/name_getordata
                 *objectbutonlythetargetrecordnameisknowninthiscontext.
                 *
                 *Selectionformatterexistsbutrequiresknowingall
                 *possibilitiesandtheyarenotgiveninthiscontext.
                 */
                case'char':
                case'many2one':
                case'selection':
                    value.old_value=format.char(value.old_value);
                    value.new_value=format.char(value.new_value);
                    break;
                case'date':
                    if(value.old_value){
                        value.old_value=moment.utc(value.old_value);
                    }
                    if(value.new_value){
                        value.new_value=moment.utc(value.new_value);
                    }
                    value.old_value=format.date(value.old_value);
                    value.new_value=format.date(value.new_value);
                    break;
                case'datetime':
                    if(value.old_value){
                        value.old_value=moment.utc(value.old_value);
                    }
                    if(value.new_value){
                        value.new_value=moment.utc(value.new_value);
                    }
                    value.old_value=format.datetime(value.old_value);
                    value.new_value=format.datetime(value.new_value);
                    break;
                case'float':
                    value.old_value=format.float(value.old_value);
                    value.new_value=format.float(value.new_value);
                    break;
                case'integer':
                    value.old_value=format.integer(value.old_value);
                    value.new_value=format.integer(value.new_value);
                    break;
                case'monetary':
                    value.old_value=format.monetary(value.old_value,undefined,{forceString:true});
                    value.new_value=format.monetary(value.new_value,undefined,{forceString:true});
                    break;
                case'text':
                    value.old_value=format.text(value.old_value);
                    value.new_value=format.text(value.new_value);
                    break;
            }
            returnvalue;
        });
    }

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *Modifiesthemessagetoaddthe'readmore/readless'functionality
     *Allelementnodeswith'data-o-mail-quote'attributeareconcerned.
     *Alltextnodesaftera``#stopSpelling``elementareconcerned.
     *Thosetextnodesneedtobewrappedinaspan(togglefunctionality).
     *Allconsecutiveelementsarejoinedinone'readmore/readless'.
     *
     *FIXMEThismethodshouldberewritten(task-2308951)
     *
     *@private
     *@param{jQuery}$element
     */
    _insertReadMoreLess($element){
        constgroups=[];
        letreadMoreNodes;

        //nodeType1:element_node
        //nodeType3:text_node
        const$children=$element.contents()
            .filter((index,content)=>
                content.nodeType===1||(content.nodeType===3&&content.nodeValue.trim())
            );

        for(constchildof$children){
            let$child=$(child);

            //HideTextnodesif"stopSpelling"
            if(
                child.nodeType===3&&
                $child.prevAll('[id*="stopSpelling"]').length>0
            ){
                //ConvertTextnodestoElementnodes
                $child=$('<span>',{
                    text:child.textContent,
                    'data-o-mail-quote':'1',
                });
                child.parentNode.replaceChild($child[0],child);
            }

            //Createarrayforeach'readmore'withnodestotoggle
            if(
                $child.attr('data-o-mail-quote')||
                (
                    $child.get(0).nodeName==='BR'&&
                    $child.prev('[data-o-mail-quote="1"]').length>0
                )
            ){
                if(!readMoreNodes){
                    readMoreNodes=[];
                    groups.push(readMoreNodes);
                }
                $child.hide();
                readMoreNodes.push($child);
            }else{
                readMoreNodes=undefined;
                this._insertReadMoreLess($child);
            }
        }

        for(constgroupofgroups){
            constindex=this._lastReadMoreIndex++;
            //Insertlinkjustbeforethefirstnode
            const$readMoreLess=$('<a>',{
                class:'o_Message_readMoreLess',
                href:'#',
                text:READ_MORE,
            }).insertBefore(group[0]);

            //ToggleAllnextnodes
            if(!this._isReadMoreByIndex.has(index)){
                this._isReadMoreByIndex.set(index,true);
            }
            constupdateFromState=()=>{
                constisReadMore=this._isReadMoreByIndex.get(index);
                for(const$childofgroup){
                    $child.hide();
                    $child.toggle(!isReadMore);
                }
                $readMoreLess.text(isReadMore?READ_MORE:READ_LESS);
            };
            $readMoreLess.click(e=>{
                e.preventDefault();
                this._isReadMoreByIndex.set(index,!this._isReadMoreByIndex.get(index));
                updateFromState();
            });
            updateFromState();
        }
    }

    /**
     *@private
     */
    _update(){
        if(!this.message){
            return;
        }
        if(this._prettyBodyRef.el&&this.message.prettyBody!==this._lastPrettyBody){
            this._prettyBodyRef.el.innerHTML=this.message.prettyBody;
            this._lastPrettyBody=this.message.prettyBody;
        }
        //Removeallreadmorebeforeifanybeforereinsertthemwith_insertReadMoreLess.
        //Thisisneededbecause_insertReadMoreLessisworkingwithdirectDOMmutations
        //whicharenotsyncwithOwl.
        if(this._contentRef.el){
            for(constelof[...this._contentRef.el.querySelectorAll(':scope.o_Message_readMoreLess')]){
                el.remove();
            }
            this._lastReadMoreIndex=0;
            this._insertReadMoreLess($(this._contentRef.el));
            this.env.messagingBus.trigger('o-component-message-read-more-less-inserted',{
                message:this.message,
            });
        }
        this._wasSelected=this.props.isSelected;
        this.message.refreshDateFromNow();
        clearInterval(this._intervalId);
        this._intervalId=setInterval(()=>{
            this.message.refreshDateFromNow();
        },60*1000);
    }

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *@private
     */
    _onChangeCheckbox(){
        this.message.toggleCheck(this.threadView.thread,this.threadView.stringifiedDomain);
    }

    /**
     *@private
     *@param{MouseEvent}ev
     */
    _onClick(ev){
        if(ev.target.closest('.o_channel_redirect')){
            this.env.messaging.openProfile({
                id:Number(ev.target.dataset.oeId),
                model:'mail.channel',
            });
            //avoidfollowingdummyhref
            ev.preventDefault();
            return;
        }
        if(ev.target.tagName==='A'){
            if(ev.target.dataset.oeId&&ev.target.dataset.oeModel){
                this.env.messaging.openProfile({
                    id:Number(ev.target.dataset.oeId),
                    model:ev.target.dataset.oeModel,
                });
                //avoidfollowingdummyhref
                ev.preventDefault();
            }
            return;
        }
        if(
            !isEventHandled(ev,'Message.ClickAuthorAvatar')&&
            !isEventHandled(ev,'Message.ClickAuthorName')&&
            !isEventHandled(ev,'Message.ClickFailure')
        ){
            this.state.isClicked=!this.state.isClicked;
        }
    }

    /**
     *@private
     *@param{MouseEvent}ev
     */
    _onClickAuthorAvatar(ev){
        markEventHandled(ev,'Message.ClickAuthorAvatar');
        if(!this.hasAuthorOpenChat){
            return;
        }
        this.message.author.openChat();
    }

    /**
     *@private
     *@param{MouseEvent}ev
     */
    _onClickAuthorName(ev){
        markEventHandled(ev,'Message.ClickAuthorName');
        if(!this.message.author){
            return;
        }
        this.message.author.openProfile();
    }

    /**
     *@private
     *@param{MouseEvent}ev
     */
    _onClickFailure(ev){
        markEventHandled(ev,'Message.ClickFailure');
        this.message.openResendAction();
    }

    /**
     *@private
     *@param{MouseEvent}ev
     */
    _onClickModerationAccept(ev){
        ev.preventDefault();
        this.message.moderate('accept');
    }

    /**
     *@private
     *@param{MouseEvent}ev
     */
    _onClickModerationAllow(ev){
        ev.preventDefault();
        this.message.moderate('allow');
    }

    /**
     *@private
     *@param{MouseEvent}ev
     */
    _onClickModerationBan(ev){
        ev.preventDefault();
        this.state.hasModerationBanDialog=true;
    }

    /**
     *@private
     *@param{MouseEvent}ev
     */
    _onClickModerationDiscard(ev){
        ev.preventDefault();
        this.state.hasModerationDiscardDialog=true;
    }

    /**
     *@private
     *@param{MouseEvent}ev
     */
    _onClickModerationReject(ev){
        ev.preventDefault();
        this.state.hasModerationRejectDialog=true;
    }

    /**
     *@private
     *@param{MouseEvent}ev
     */
    _onClickOriginThread(ev){
        //avoidfollowingdummyhref
        ev.preventDefault();
        this.message.originThread.open();
    }

    /**
     *@private
     *@param{MouseEvent}ev
     */
    _onClickStar(ev){
        ev.stopPropagation();
        this.message.toggleStar();
    }

    /**
     *@private
     *@param{MouseEvent}ev
     */
    _onClickMarkAsRead(ev){
        ev.stopPropagation();
        this.message.markAsRead();
    }

    /**
     *@private
     *@param{MouseEvent}ev
     */
    _onClickReply(ev){
        //Usethis._wasSelectedbecausethis.props.isSelectedmightbechanged
        //byaglobalcaptureclickhandler(forexampletheonefromComposer)
        //beforethecurrenthandlerisexecuted.Indeedbecauseitdoesa
        //toggleitneedstotakeintoaccountthevaluebeforetheclick.
        if(this._wasSelected){
            this.env.messaging.discuss.clearReplyingToMessage();
        }else{
            this.message.replyTo();
        }
    }

    /**
     *@private
     */
    _onDialogClosedModerationBan(){
        this.state.hasModerationBanDialog=false;
    }

    /**
     *@private
     */
    _onDialogClosedModerationDiscard(){
        this.state.hasModerationDiscardDialog=false;
    }

    /**
     *@private
     */
    _onDialogClosedModerationReject(){
        this.state.hasModerationRejectDialog=false;
    }

}

Object.assign(Message,{
    components,
    defaultProps:{
        hasCheckbox:false,
        hasMarkAsReadIcon:false,
        hasReplyIcon:false,
        isSelected:false,
        isSquashed:false,
    },
    props:{
        attachmentsDetailsMode:{
            type:String,
            optional:true,
            validate:prop=>['auto','card','hover','none'].includes(prop),
        },
        hasCheckbox:Boolean,
        hasMarkAsReadIcon:Boolean,
        hasReplyIcon:Boolean,
        isSelected:Boolean,
        isSquashed:Boolean,
        messageLocalId:String,
        threadViewLocalId:{
            type:String,
            optional:true,
        },
    },
    template:'mail.Message',
});

returnMessage;

});
