flectra.define('mail/static/src/components/composer_text_input/composer_text_input.js',function(require){
'usestrict';

constuseShouldUpdateBasedOnProps=require('mail/static/src/component_hooks/use_should_update_based_on_props/use_should_update_based_on_props.js');
constuseStore=require('mail/static/src/component_hooks/use_store/use_store.js');
constuseUpdate=require('mail/static/src/component_hooks/use_update/use_update.js');

constcomponents={
    ComposerSuggestionList:require('mail/static/src/components/composer_suggestion_list/composer_suggestion_list.js'),
};
const{markEventHandled}=require('mail/static/src/utils/utils.js');

const{Component}=owl;
const{useRef}=owl.hooks;

classComposerTextInputextendsComponent{

    /**
     *@override
     */
    constructor(...args){
        super(...args);
        useShouldUpdateBasedOnProps({
            compareDepth:{
                sendShortcuts:1,
            },
        });
        useStore(props=>{
            constcomposer=this.env.models['mail.composer'].get(props.composerLocalId);
            constthread=composer&&composer.thread;
            return{
                composerHasFocus:composer&&composer.hasFocus,
                composerHasSuggestions:composer&&composer.hasSuggestions,
                composerIsLog:composer&&composer.isLog,
                composerTextInputContent:composer&&composer.textInputContent,
                composerTextInputCursorEnd:composer&&composer.textInputCursorEnd,
                composerTextInputCursorStart:composer&&composer.textInputCursorStart,
                composerTextInputSelectionDirection:composer&&composer.textInputSelectionDirection,
                isDeviceMobile:this.env.messaging.device.isMobile,
                threadModel:thread&&thread.model,
            };
        });
        /**
         *Updatesthecomposertextinputcontentwhencomposerismounted
         *astextareacontentcan'tbechangedfromtheDOM.
         */
        useUpdate({func:()=>this._update()});
        /**
         *Lastcontentoftextareafrominputevent.Usefultodetermine
         *whetherthecurrentpartneristypingsomething.
         */
        this._textareaLastInputValue="";
        /**
         *Referenceofthetextarea.Usefultosetheight,selectionandcontent.
         */
        this._textareaRef=useRef('textarea');
        /**
         *Thisistheinvisibletextareausedtocomputethecomposerheight
         *basedonthetextcontent.Weneedittodownsizethetextarea
         *properlywithoutflicker.
         */
        this._mirroredTextareaRef=useRef('mirroredTextarea');
    }

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *@returns{mail.composer}
     */
    getcomposer(){
        returnthis.env.models['mail.composer'].get(this.props.composerLocalId);
    }

    /**
     *@returns{string}
     */
    gettextareaPlaceholder(){
        if(!this.composer){
            return"";
        }
        if(this.composer.thread&&this.composer.thread.model!=='mail.channel'){
            if(this.composer.isLog){
                returnthis.env._t("Loganinternalnote...");
            }
            returnthis.env._t("Sendamessagetofollowers...");
        }
        returnthis.env._t("Writesomething...");
    }

    focus(){
        this._textareaRef.el.focus();
    }

    focusout(){
        this.saveStateInStore();
        this._textareaRef.el.blur();
    }

    /**
     *Savesthecomposertextinputstateinstore
     */
    saveStateInStore(){
        this.composer.update({
            textInputContent:this._getContent(),
            textInputCursorEnd:this._getSelectionEnd(),
            textInputCursorStart:this._getSelectionStart(),
            textInputSelectionDirection:this._textareaRef.el.selectionDirection,
        });
    }

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *Returnstextareacurrentcontent.
     *
     *@private
     *@returns{string}
     */
    _getContent(){
        returnthis._textareaRef.el.value;
    }

    /**
     *Returnsselectionendposition.
     *
     *@private
     *@returns{integer}
     */
    _getSelectionEnd(){
        returnthis._textareaRef.el.selectionEnd;
    }

    /**
     *Returnsselectionstartposition.
     *
     *@private
     *@returns{integer}
     *
     */
    _getSelectionStart(){
        returnthis._textareaRef.el.selectionStart;
    }

    /**
     *Determineswhetherthetextareaisemptyornot.
     *
     *@private
     *@returns{boolean}
     */
    _isEmpty(){
        returnthis._getContent()==="";
    }

    /**
     *Updatesthecontentandheightofatextarea
     *
     *@private
     */
    _update(){
        if(!this.composer){
            return;
        }
        if(this.composer.isLastStateChangeProgrammatic){
            this._textareaRef.el.value=this.composer.textInputContent;
            if(this.composer.hasFocus){
                this._textareaRef.el.setSelectionRange(
                    this.composer.textInputCursorStart,
                    this.composer.textInputCursorEnd,
                    this.composer.textInputSelectionDirection,
                );
            }
            this.composer.update({isLastStateChangeProgrammatic:false});
        }
        this._updateHeight();
    }

    /**
     *Updatesthetextareaheight.
     *
     *@private
     */
    _updateHeight(){
        this._mirroredTextareaRef.el.value=this.composer.textInputContent;
        this._textareaRef.el.style.height=(this._mirroredTextareaRef.el.scrollHeight)+"px";
    }

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *@private
     */
    _onClickTextarea(){
        //clickingmightchangethecursorposition
        this.saveStateInStore();
    }

    /**
     *@private
     */
    _onFocusinTextarea(){
        this.composer.focus();
        this.trigger('o-focusin-composer');
    }

    /**
     *@private
     */
    _onFocusoutTextarea(){
        this.saveStateInStore();
        this.composer.update({hasFocus:false});
    }

    /**
     *@private
     */
    _onInputTextarea(){
        this.saveStateInStore();
        if(this._textareaLastInputValue!==this._textareaRef.el.value){
            this.composer.handleCurrentPartnerIsTyping();
        }
        this._textareaLastInputValue=this._textareaRef.el.value;
        this._updateHeight();
    }

    /**
     *@private
     *@param{KeyboardEvent}ev
     */
    _onKeydownTextarea(ev){
        switch(ev.key){
            case'Escape':
                if(this.composer.hasSuggestions){
                    ev.preventDefault();
                    this.composer.closeSuggestions();
                    markEventHandled(ev,'ComposerTextInput.closeSuggestions');
                }
                break;
            //UP,DOWN,TAB:preventmovingcursorifnavigationinmentionsuggestions
            case'ArrowUp':
            case'PageUp':
            case'ArrowDown':
            case'PageDown':
            case'Home':
            case'End':
            case'Tab':
                if(this.composer.hasSuggestions){
                    //WeusepreventDefaultheretoavoidkeysnativeactionsbutactionsarehandledinkeyUp
                    ev.preventDefault();
                }
                break;
            //ENTER:submitthemessageonlyifthedropdownmentionpropositionisnotdisplayed
            case'Enter':
                this._onKeydownTextareaEnter(ev);
                break;
        }
    }

    /**
     *@private
     *@param{KeyboardEvent}ev
     */
    _onKeydownTextareaEnter(ev){
        if(this.composer.hasSuggestions){
            ev.preventDefault();
            return;
        }
        if(
            this.props.sendShortcuts.includes('ctrl-enter')&&
            !ev.altKey&&
            ev.ctrlKey&&
            !ev.metaKey&&
            !ev.shiftKey
        ){
            this.trigger('o-composer-text-input-send-shortcut');
            ev.preventDefault();
            return;
        }
        if(
            this.props.sendShortcuts.includes('enter')&&
            !ev.altKey&&
            !ev.ctrlKey&&
            !ev.metaKey&&
            !ev.shiftKey
        ){
            this.trigger('o-composer-text-input-send-shortcut');
            ev.preventDefault();
            return;
        }
        if(
            this.props.sendShortcuts.includes('meta-enter')&&
            !ev.altKey&&
            !ev.ctrlKey&&
            ev.metaKey&&
            !ev.shiftKey
        ){
            this.trigger('o-composer-text-input-send-shortcut');
            ev.preventDefault();
            return;
        }
    }

    /**
     *KeyeventsmanagementisperformedinaKeyuptoavoidintempestiveRPCcalls
     *
     *@private
     *@param{KeyboardEvent}ev
     */
    _onKeyupTextarea(ev){
        switch(ev.key){
            case'Escape':
                //alreadyhandledin_onKeydownTextarea,breaktoavoiddefault
                break;
            //ENTER,HOME,END,UP,DOWN,PAGEUP,PAGEDOWN,TAB:checkifnavigationinmentionsuggestions
            case'Enter':
                if(this.composer.hasSuggestions){
                    this.composer.insertSuggestion();
                    this.composer.closeSuggestions();
                    this.focus();
                }
                break;
            case'ArrowUp':
            case'PageUp':
                if(this.composer.hasSuggestions){
                    this.composer.setPreviousSuggestionActive();
                    this.composer.update({hasToScrollToActiveSuggestion:true});
                }
                break;
            case'ArrowDown':
            case'PageDown':
                if(this.composer.hasSuggestions){
                    this.composer.setNextSuggestionActive();
                    this.composer.update({hasToScrollToActiveSuggestion:true});
                }
                break;
            case'Home':
                if(this.composer.hasSuggestions){
                    this.composer.setFirstSuggestionActive();
                    this.composer.update({hasToScrollToActiveSuggestion:true});
                }
                break;
            case'End':
                if(this.composer.hasSuggestions){
                    this.composer.setLastSuggestionActive();
                    this.composer.update({hasToScrollToActiveSuggestion:true});
                }
                break;
            case'Tab':
                if(this.composer.hasSuggestions){
                    if(ev.shiftKey){
                        this.composer.setPreviousSuggestionActive();
                        this.composer.update({hasToScrollToActiveSuggestion:true});
                    }else{
                        this.composer.setNextSuggestionActive();
                        this.composer.update({hasToScrollToActiveSuggestion:true});
                    }
                }
                break;
            case'Alt':
            case'AltGraph':
            case'CapsLock':
            case'Control':
            case'Fn':
            case'FnLock':
            case'Hyper':
            case'Meta':
            case'NumLock':
            case'ScrollLock':
            case'Shift':
            case'ShiftSuper':
            case'Symbol':
            case'SymbolLock':
                //preventmodifierkeysfromresettingthesuggestionstate
                break;
            //Otherwise,checkifamentionistyped
            default:
                this.saveStateInStore();
        }
    }

}

Object.assign(ComposerTextInput,{
    components,
    defaultProps:{
        hasMentionSuggestionsBelowPosition:false,
        sendShortcuts:[],
    },
    props:{
        composerLocalId:String,
        hasMentionSuggestionsBelowPosition:Boolean,
        isCompact:Boolean,
        /**
         *Keyboardshortcutsfromtextinputtosendmessage.
         */
        sendShortcuts:{
            type:Array,
            element:String,
            validate:prop=>{
                for(constshortcutofprop){
                    if(!['ctrl-enter','enter','meta-enter'].includes(shortcut)){
                        returnfalse;
                    }
                }
                returntrue;
            },
        },
    },
    template:'mail.ComposerTextInput',
});

returnComposerTextInput;

});
