flectra.define('mail/static/src/components/notification_list/notification_list_notification_group_tests.js',function(require){
'usestrict';

constcomponents={
    NotificationList:require('mail/static/src/components/notification_list/notification_list.js'),
};

const{
    afterEach,
    afterNextRender,
    beforeEach,
    createRootComponent,
    start,
}=require('mail/static/src/utils/test_utils.js');

constBus=require('web.Bus');

QUnit.module('mail',{},function(){
QUnit.module('components',{},function(){
QUnit.module('notification_list',{},function(){
QUnit.module('notification_list_notification_group_tests.js',{
    beforeEach(){
        beforeEach(this);

        /**
         *@param{Object}param0
         *@param{string}[param0.filter='all']
         */
        this.createNotificationListComponent=async({filter='all'}={})=>{
            awaitcreateRootComponent(this,components.NotificationList,{
                props:{filter},
                target:this.widget.el,
            });
        };

        this.start=asyncparams=>{
            const{env,widget}=awaitstart(Object.assign({},params,{
                data:this.data,
            }));
            this.env=env;
            this.widget=widget;
        };
    },
    afterEach(){
        afterEach(this);
    },
});

QUnit.test('notificationgroupbasiclayout',asyncfunction(assert){
    assert.expect(10);

    //messagethatisexpectedtohaveafailure
    this.data['mail.message'].records.push({
        id:11,//randomuniqueid,willbeusedtolinkfailuretomessage
        message_type:'email',//messagemustbeemail(goalofthetest)
        model:'mail.channel',//expectedvaluetolinkmessagetochannel
        res_id:31,//idofarandomchannel
        res_model_name:"Channel",//randomresmodelname,willbeassertedinthetest
    });
    //failurethatisexpectedtobeusedinthetest
    this.data['mail.notification'].records.push({
        mail_message_id:11,//idoftherelatedmessage
        notification_status:'exception',//necessaryvaluetohaveafailure
        notification_type:'email',//expectedfailuretypeforemailmessage
    });
    awaitthis.start();
    awaitthis.createNotificationListComponent();
    assert.containsOnce(
        document.body,
        '.o_NotificationGroup',
        "shouldhave1notificationgroup"
    );
    assert.containsOnce(
        document.body,
        '.o_NotificationGroup_name',
        "shouldhave1groupname"
    );
    assert.strictEqual(
        document.querySelector('.o_NotificationGroup_name').textContent,
        "Channel",
        "shouldhavemodelnameasgroupname"
    );
    assert.containsOnce(
        document.body,
        '.o_NotificationGroup_counter',
        "shouldhave1groupcounter"
    );
    assert.strictEqual(
        document.querySelector('.o_NotificationGroup_counter').textContent.trim(),
        "(1)",
        "shouldhaveonly1notificationinthegroup"
    );
    assert.containsOnce(
        document.body,
        '.o_NotificationGroup_date',
        "shouldhave1groupdate"
    );
    assert.strictEqual(
        document.querySelector('.o_NotificationGroup_date').textContent,
        "afewsecondsago",
        "shouldhavethegroupdatecorrespondingtonow"
    );
    assert.containsOnce(
        document.body,
        '.o_NotificationGroup_inlineText',
        "shouldhave1grouptext"
    );
    assert.strictEqual(
        document.querySelector('.o_NotificationGroup_inlineText').textContent.trim(),
        "Anerroroccurredwhensendinganemail.",
        "shouldhavethegrouptextcorrespondingtoemail"
    );
    assert.containsOnce(
        document.body,
        '.o_NotificationGroup_markAsRead',
        "shouldhave1markasreadbutton"
    );
});

QUnit.test('markasread',asyncfunction(assert){
    assert.expect(6);

    //messagethatisexpectedtohaveafailure
    this.data['mail.message'].records.push({
        id:11,//randomuniqueid,willbeusedtolinkfailuretomessage
        message_type:'email',//messagemustbeemail(goalofthetest)
        model:'mail.channel',//expectedvaluetolinkmessagetochannel
        res_id:31,//idofarandomchannel
        res_model_name:"Channel",//randomresmodelname,willbeassertedinthetest
    });
    //failurethatisexpectedtobeusedinthetest
    this.data['mail.notification'].records.push({
        mail_message_id:11,//idoftherelatedmessage
        notification_status:'exception',//necessaryvaluetohaveafailure
        notification_type:'email',//expectedfailuretypeforemailmessage
    });
    constbus=newBus();
    bus.on('do-action',null,payload=>{
        assert.step('do_action');
        assert.strictEqual(
            payload.action,
            'mail.mail_resend_cancel_action',
            "actionshouldbetheonetocancelemail"
        );
        assert.strictEqual(
            payload.options.additional_context.default_model,
            'mail.channel',
            "actionshouldhavethegroupmodelasdefault_model"
        );
        assert.strictEqual(
            payload.options.additional_context.unread_counter,
            1,
            "actionshouldhavethegroupnotificationlengthasunread_counter"
        );
    });
    awaitthis.start({env:{bus}});
    awaitthis.createNotificationListComponent();
    assert.containsOnce(
        document.body,
        '.o_NotificationGroup_markAsRead',
        "shouldhave1markasreadbutton"
    );

    document.querySelector('.o_NotificationGroup_markAsRead').click();
    assert.verifySteps(
        ['do_action'],
        "shoulddoanactiontodisplaythecancelemaildialog"
    );
});

QUnit.test('groupednotificationsbydocument',asyncfunction(assert){
    //Ifsomefailureslinkedtoadocumentreferstoasamedocument,asingle
    //notificationshouldgroupallthosefailures.
    assert.expect(5);

    this.data['mail.message'].records.push(
        //firstmessagethatisexpectedtohaveafailure
        {
            id:11,//randomuniqueid,willbeusedtolinkfailuretomessage
            message_type:'email',//messagemustbeemail(goalofthetest)
            model:'res.partner',//samemodelassecondmessage(andnot`mail.channel`)
            res_id:31,//sameres_idassecondmessage
            res_model_name:"Partner",//randomrelatedmodelname
        },
        //secondmessagethatisexpectedtohaveafailure
        {
            id:12,//randomuniqueid,willbeusedtolinkfailuretomessage
            message_type:'email',//messagemustbeemail(goalofthetest)
            model:'res.partner',//samemodelasfirstmessage(andnot`mail.channel`)
            res_id:31,//sameres_idasfirstmessage
            res_model_name:"Partner",//samerelatedmodelnameforconsistency
        }
    );
    this.data['mail.notification'].records.push(
        //firstfailurethatisexpectedtobeusedinthetest
        {
            mail_message_id:11,//idoftherelatedfirstmessage
            notification_status:'exception',//onepossiblevaluetohaveafailure
            notification_type:'email',//expectedfailuretypeforemailmessage
        },
        //secondfailurethatisexpectedtobeusedinthetest
        {
            mail_message_id:12,//idoftherelatedsecondmessage
            notification_status:'bounce',//otherpossiblevaluetohaveafailure
            notification_type:'email',//expectedfailuretypeforemailmessage
        }
    );
    awaitthis.start({hasChatWindow:true});
    awaitthis.createNotificationListComponent();

    assert.containsOnce(
        document.body,
        '.o_NotificationGroup',
        "shouldhave1notificationgroup"
    );
    assert.containsOnce(
        document.body,
        '.o_NotificationGroup_counter',
        "shouldhave1groupcounter"
    );
    assert.strictEqual(
        document.querySelector('.o_NotificationGroup_counter').textContent.trim(),
        "(2)",
        "shouldhave2notificationsinthegroup"
    );
    assert.containsNone(
        document.body,
        '.o_ChatWindow',
        "shouldhavenochatwindowinitially"
    );

    awaitafterNextRender(()=>
        document.querySelector('.o_NotificationGroup').click()
    );
    assert.containsOnce(
        document.body,
        '.o_ChatWindow',
        "shouldhaveopenedthethreadinachatwindowafterclickingonit"
    );
});

QUnit.test('groupednotificationsbydocumentmodel',asyncfunction(assert){
    //Ifallfailureslinkedtoadocumentmodelreferstodifferentdocuments,
    //asinglenotificationshouldgroupallfailuresthatarelinkedtothis
    //documentmodel.
    assert.expect(12);

    this.data['mail.message'].records.push(
        //firstmessagethatisexpectedtohaveafailure
        {
            id:11,//randomuniqueid,willbeusedtolinkfailuretomessage
            message_type:'email',//messagemustbeemail(goalofthetest)
            model:'res.partner',//samemodelassecondmessage(andnot`mail.channel`)
            res_id:31,//differentres_idfromsecondmessage
            res_model_name:"Partner",//randomrelatedmodelname
        },
        //secondmessagethatisexpectedtohaveafailure
        {
            id:12,//randomuniqueid,willbeusedtolinkfailuretomessage
            message_type:'email',//messagemustbeemail(goalofthetest)
            model:'res.partner',//samemodelasfirstmessage(andnot`mail.channel`)
            res_id:32,//differentres_idfromfirstmessage
            res_model_name:"Partner",//samerelatedmodelnameforconsistency
        }
    );
    this.data['mail.notification'].records.push(
        //firstfailurethatisexpectedtobeusedinthetest
        {
            mail_message_id:11,//idoftherelatedfirstmessage
            notification_status:'exception',//onepossiblevaluetohaveafailure
            notification_type:'email',//expectedfailuretypeforemailmessage
        },
        //secondfailurethatisexpectedtobeusedinthetest
        {
            mail_message_id:12,//idoftherelatedsecondmessage
            notification_status:'bounce',//otherpossiblevaluetohaveafailure
            notification_type:'email',//expectedfailuretypeforemailmessage
        }
    );
    constbus=newBus();
    bus.on('do-action',null,payload=>{
        assert.step('do_action');
        assert.strictEqual(
            payload.action.name,
            "MailFailures",
            "actionshouldhave'MailFailures'asname",
        );
        assert.strictEqual(
            payload.action.type,
            'ir.actions.act_window',
            "actionshouldhavethetypeact_window"
        );
        assert.strictEqual(
            payload.action.view_mode,
            'kanban,list,form',
            "actionshouldhave'kanban,list,form'asview_mode"
        );
        assert.strictEqual(
            JSON.stringify(payload.action.views),
            JSON.stringify([[false,'kanban'],[false,'list'],[false,'form']]),
            "actionshouldhavecorrectviews"
        );
        assert.strictEqual(
            payload.action.target,
            'current',
            "actionshouldhave'current'astarget"
        );
        assert.strictEqual(
            payload.action.res_model,
            'res.partner',
            "actionshouldhavethegroupmodelasres_model"
        );
        assert.strictEqual(
            JSON.stringify(payload.action.domain),
            JSON.stringify([['message_has_error','=',true]]),
            "actionshouldhave'message_has_error'asdomain"
        );
    });

    awaitthis.start({env:{bus}});
    awaitthis.createNotificationListComponent();

    assert.containsOnce(
        document.body,
        '.o_NotificationGroup',
        "shouldhave1notificationgroup"
    );
    assert.containsOnce(
        document.body,
        '.o_NotificationGroup_counter',
        "shouldhave1groupcounter"
    );
    assert.strictEqual(
        document.querySelector('.o_NotificationGroup_counter').textContent.trim(),
        "(2)",
        "shouldhave2notificationsinthegroup"
    );

    document.querySelector('.o_NotificationGroup').click();
    assert.verifySteps(
        ['do_action'],
        "shoulddoanactiontodisplaytherelatedrecords"
    );
});

QUnit.test('differentmail.channelarenotgrouped',asyncfunction(assert){
    //`mail.channel`isaspecialcasewherenotificationsarenotgroupedwhen
    //theyarelinkedtodifferentchannels,eventhoughthemodelisthesame.
    assert.expect(6);

    this.data['mail.channel'].records.push({id:31},{id:32});
    this.data['mail.message'].records.push(
        //firstmessagethatisexpectedtohaveafailure
        {
            id:11,//randomuniqueid,willbeusedtolinkfailuretomessage
            message_type:'email',//messagemustbeemail(goalofthetest)
            model:'mail.channel',//testingachannelisthegoalofthetest
            res_id:31,//differentres_idfromsecondmessage
            res_model_name:"Channel",//randomrelatedmodelname
        },
        //secondmessagethatisexpectedtohaveafailure
        {
            id:12,//randomuniqueid,willbeusedtolinkfailuretomessage
            message_type:'email',//messagemustbeemail(goalofthetest)
            model:'mail.channel',//testingachannelisthegoalofthetest
            res_id:32,//differentres_idfromfirstmessage
            res_model_name:"Channel",//samerelatedmodelnameforconsistency
        }
    );
    this.data['mail.notification'].records.push(
        //firstfailurethatisexpectedtobeusedinthetest
        {
            mail_message_id:11,//idoftherelatedfirstmessage
            notification_status:'exception',//onepossiblevaluetohaveafailure
            notification_type:'email',//expectedfailuretypeforemailmessage
        },
        //secondfailurethatisexpectedtobeusedinthetest
        {
            mail_message_id:12,//idoftherelatedsecondmessage
            notification_status:'bounce',//otherpossiblevaluetohaveafailure
            notification_type:'email',//expectedfailuretypeforemailmessage
        }
    );
    awaitthis.start({
        hasChatWindow:true,//neededtoassertthread.open
    });
    awaitthis.createNotificationListComponent();
    assert.containsN(
        document.body,
        '.o_NotificationGroup',
        2,
        "shouldhave2notificationsgroup"
    );
    constgroups=document.querySelectorAll('.o_NotificationGroup');
    assert.containsOnce(
        groups[0],
        '.o_NotificationGroup_counter',
        "shouldhave1groupcounterinfirstgroup"
    );
    assert.strictEqual(
        groups[0].querySelector('.o_NotificationGroup_counter').textContent.trim(),
        "(1)",
        "shouldhave1notificationinfirstgroup"
    );
    assert.containsOnce(
        groups[1],
        '.o_NotificationGroup_counter',
        "shouldhave1groupcounterinsecondgroup"
    );
    assert.strictEqual(
        groups[1].querySelector('.o_NotificationGroup_counter').textContent.trim(),
        "(1)",
        "shouldhave1notificationinsecondgroup"
    );

    awaitafterNextRender(()=>groups[0].click());
    assert.containsOnce(
        document.body,
        '.o_ChatWindow',
        "shouldhaveopenedthechannelrelatedtothefirstgroupinachatwindow"
    );
});

QUnit.test('multiplegroupednotificationsbydocumentmodel,sortedbythemostrecentmessageofeachgroup',asyncfunction(assert){
    assert.expect(9);

    this.data['mail.message'].records.push(
        //firstmessagethatisexpectedtohaveafailure
        {
            id:11,//randomuniqueid,willbeusedtolinkfailuretomessage
            message_type:'email',//messagemustbeemail(goalofthetest)
            model:'res.partner',//differentmodelfromsecondmessage
            res_id:31,//randomuniqueid,usefultolinkfailuretomessage
            res_model_name:"Partner",//randomrelatedmodelname
        },
        //secondmessagethatisexpectedtohaveafailure
        {
            id:12,//randomuniqueid,willbeusedtolinkfailuretomessage
            message_type:'email',//messagemustbeemail(goalofthetest)
            model:'res.company',//differentmodelfromfirstmessage
            res_id:32,//randomuniqueid,usefultolinkfailuretomessage
            res_model_name:"Company",//randomrelatedmodelname
        }
    );
    this.data['mail.notification'].records.push(
        //firstfailurethatisexpectedtobeusedinthetest
        {
            mail_message_id:11,//idoftherelatedfirstmessage
            notification_status:'exception',//onepossiblevaluetohaveafailure
            notification_type:'email',//expectedfailuretypeforemailmessage
        },
        //secondfailurethatisexpectedtobeusedinthetest
        {
            mail_message_id:12,//idoftherelatedsecondmessage
            notification_status:'bounce',//otherpossiblevaluetohaveafailure
            notification_type:'email',//expectedfailuretypeforemailmessage
        }
    );
    awaitthis.start();
    awaitthis.createNotificationListComponent();
    assert.containsN(
        document.body,
        '.o_NotificationGroup',
        2,
        "shouldhave2notificationsgroup"
    );
    constgroups=document.querySelectorAll('.o_NotificationGroup');
    assert.containsOnce(
        groups[0],
        '.o_NotificationGroup_name',
        "shouldhave1groupnameinfirstgroup"
    );
    assert.strictEqual(
        groups[0].querySelector('.o_NotificationGroup_name').textContent,
        "Company",
        "shouldhavefirstmodelnameasgroupname"
    );
    assert.containsOnce(
        groups[0],
        '.o_NotificationGroup_counter',
        "shouldhave1groupcounterinfirstgroup"
    );
    assert.strictEqual(
        groups[0].querySelector('.o_NotificationGroup_counter').textContent.trim(),
        "(1)",
        "shouldhave1notificationinfirstgroup"
    );
    assert.containsOnce(
        groups[1],
        '.o_NotificationGroup_name',
        "shouldhave1groupnameinsecondgroup"
    );
    assert.strictEqual(
        groups[1].querySelector('.o_NotificationGroup_name').textContent,
        "Partner",
        "shouldhavesecondmodelnameasgroupname"
    );
    assert.containsOnce(
        groups[1],
        '.o_NotificationGroup_counter',
        "shouldhave1groupcounterinsecondgroup"
    );
    assert.strictEqual(
        groups[1].querySelector('.o_NotificationGroup_counter').textContent.trim(),
        "(1)",
        "shouldhave1notificationinsecondgroup"
    );
});

QUnit.test('non-failurenotificationsareignored',asyncfunction(assert){
    assert.expect(1);

    this.data['mail.message'].records.push(
        //messagethatisexpectedtohaveanotification
        {
            id:11,//randomuniqueid,willbeusedtolinkfailuretomessage
            message_type:'email',//messagemustbeemail(goalofthetest)
            model:'res.partner',//randommodel
            res_id:31,//randomuniqueid,usefultolinkfailuretomessage
        }
    );
    this.data['mail.notification'].records.push(
        //notificationthatisexpectedtobeusedinthetest
        {
            mail_message_id:11,//idoftherelatedfirstmessage
            notification_status:'ready',//non-failurestatus
            notification_type:'email',//expectednotificationtypeforemailmessage
        },
    );
    awaitthis.start();
    awaitthis.createNotificationListComponent();
    assert.containsNone(
        document.body,
        '.o_NotificationGroup',
        "shouldhave0notificationgroup"
    );
});

});
});
});

});
