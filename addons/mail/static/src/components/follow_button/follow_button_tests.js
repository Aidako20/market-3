flectra.define('mail/static/src/components/follow_button/follow_button_tests.js',function(require){
'usestrict';

constcomponents={
    FollowButton:require('mail/static/src/components/follow_button/follow_button.js'),
};
const{
    afterEach,
    afterNextRender,
    beforeEach,
    createRootComponent,
    start,
}=require('mail/static/src/utils/test_utils.js');

QUnit.module('mail',{},function(){
QUnit.module('components',{},function(){
QUnit.module('follow_button',{},function(){
QUnit.module('follow_button_tests.js',{
    beforeEach(){
        beforeEach(this);

        this.createFollowButtonComponent=async(thread,otherProps={})=>{
            constprops=Object.assign({threadLocalId:thread.localId},otherProps);
            awaitcreateRootComponent(this,components.FollowButton,{
                props,
                target:this.widget.el,
            });
        };

        this.start=asyncparams=>{
            const{env,widget}=awaitstart(Object.assign({},params,{
                data:this.data,
            }));
            this.env=env;
            this.widget=widget;
        };
    },
    afterEach(){
        afterEach(this);
    },
});

QUnit.test('baserenderingnoteditable',asyncfunction(assert){
    assert.expect(3);

    awaitthis.start();
    constthread=this.env.models['mail.thread'].create({
        id:100,
        model:'res.partner',
    });
    awaitthis.createFollowButtonComponent(thread,{isDisabled:true});
    assert.containsOnce(
        document.body,
        '.o_FollowButton',
        "shouldhavefollowbuttoncomponent"
    );
    assert.containsOnce(
        document.body,
        '.o_FollowButton_follow',
        "shouldhave'Follow'button"
    );
    assert.ok(
        document.querySelector('.o_FollowButton_follow').disabled,
        "'Follow'buttonshouldbedisabled"
    );
});

QUnit.test('baserenderingeditable',asyncfunction(assert){
    assert.expect(3);

    awaitthis.start();
    constthread=this.env.models['mail.thread'].create({
        id:100,
        model:'res.partner',
    });
    awaitthis.createFollowButtonComponent(thread);
    assert.containsOnce(
        document.body,
        '.o_FollowButton',
        "shouldhavefollowbuttoncomponent"
    );
    assert.containsOnce(
        document.body,
        '.o_FollowButton_follow',
        "shouldhave'Follow'button"
    );
    assert.notOk(
        document.querySelector('.o_FollowButton_follow').disabled,
        "'Follow'buttonshouldbedisabled"
    );
});

QUnit.test('hoverfollowingbutton',asyncfunction(assert){
    assert.expect(8);

    this.data['res.partner'].records.push({id:100,message_follower_ids:[1]});
    this.data['mail.followers'].records.push({
        id:1,
        is_active:true,
        is_editable:true,
        partner_id:this.data.currentPartnerId,
        res_id:100,
        res_model:'res.partner',
    });
    awaitthis.start();
    constthread=this.env.models['mail.thread'].create({
        id:100,
        model:'res.partner',
    });
    thread.follow();
    awaitthis.createFollowButtonComponent(thread);
    assert.containsOnce(
        document.body,
        '.o_FollowButton',
        "shouldhavefollowbuttoncomponent"
    );
    assert.containsOnce(
        document.body,
        '.o_FollowButton_unfollow',
        "shouldhave'Unfollow'button"
    );
    assert.strictEqual(
        document.querySelector('.o_FollowButton_unfollow').textContent.trim(),
        'Following',
        "'unfollow'buttonshoulddisplay'Following'astextwhennothovered"
    );
    assert.containsNone(
        document.querySelector('.o_FollowButton_unfollow'),
        '.fa-times',
        "'unfollow'buttonshouldnotcontainacrossiconwhennothovered"
    );
    assert.containsOnce(
        document.querySelector('.o_FollowButton_unfollow'),
        '.fa-check',
        "'unfollow'buttonshouldcontainacheckiconwhennothovered"
    );

    awaitafterNextRender(()=>{
        document
            .querySelector('.o_FollowButton_unfollow')
            .dispatchEvent(newwindow.MouseEvent('mouseenter'));
        }
    );
    assert.strictEqual(
        document.querySelector('.o_FollowButton_unfollow').textContent.trim(),
        'Unfollow',
        "'unfollow'buttonshoulddisplay'Unfollow'astextwhenhovered"
    );
    assert.containsOnce(
        document.querySelector('.o_FollowButton_unfollow'),
        '.fa-times',
        "'unfollow'buttonshouldcontainacrossiconwhenhovered"
    );
    assert.containsNone(
        document.querySelector('.o_FollowButton_unfollow'),
        '.fa-check',
        "'unfollow'buttonshouldnotcontainacheckiconwhenhovered"
    );
});

QUnit.test('clickon"follow"button',asyncfunction(assert){
    assert.expect(7);

    this.data['res.partner'].records.push({id:100,message_follower_ids:[1]});
    this.data['mail.followers'].records.push({
        id:1,
        is_active:true,
        is_editable:true,
        partner_id:this.data.currentPartnerId,
        res_id:100,
        res_model:'res.partner',
    });
    awaitthis.start({
        asyncmockRPC(route,args){
            if(route.includes('message_subscribe')){
                assert.step('rpc:message_subscribe');
            }elseif(route.includes('mail/read_followers')){
                assert.step('rpc:mail/read_followers');
            }
            returnthis._super(...arguments);
        },
    });
    constthread=this.env.models['mail.thread'].create({
        id:100,
        model:'res.partner',
    });
    awaitthis.createFollowButtonComponent(thread);
    assert.containsOnce(
        document.body,
        '.o_FollowButton',
        "shouldhavefollowbuttoncomponent"
    );
    assert.containsOnce(
        document.body,
        '.o_FollowButton_follow',
        "shouldhavebuttonfollow"
    );

    awaitafterNextRender(()=>{
        document.querySelector('.o_FollowButton_follow').click();
    });
    assert.verifySteps([
        'rpc:message_subscribe',
        'rpc:mail/read_followers',
    ]);
    assert.containsNone(
        document.body,
        '.o_FollowButton_follow',
        "shouldnothavefollowbuttonafterclickedonfollow"
    );
    assert.containsOnce(
        document.body,
        '.o_FollowButton_unfollow',
        "shouldhaveunfollowbuttonafterclickedonfollow"
    );
});

QUnit.test('clickon"unfollow"button',asyncfunction(assert){
    assert.expect(7);

    this.data['res.partner'].records.push({id:100,message_follower_ids:[1]});
    this.data['mail.followers'].records.push({
        id:1,
        is_active:true,
        is_editable:true,
        partner_id:this.data.currentPartnerId,
        res_id:100,
        res_model:'res.partner',
    });
    awaitthis.start({
        asyncmockRPC(route,args){
            if(route.includes('message_unsubscribe')){
                assert.step('rpc:message_unsubscribe');
            }
            returnthis._super(...arguments);
        },
    });
    constthread=this.env.models['mail.thread'].create({
        id:100,
        model:'res.partner',
    });
    thread.follow();
    awaitthis.createFollowButtonComponent(thread);
    assert.containsOnce(
        document.body,
        '.o_FollowButton',
        "shouldhavefollowbuttoncomponent"
    );
    assert.containsNone(
        document.body,
        '.o_FollowButton_follow',
        "shouldnothavebuttonfollow"
    );
    assert.containsOnce(
        document.body,
        '.o_FollowButton_unfollow',
        "shouldhavebuttonunfollow"
    );

    awaitafterNextRender(()=>document.querySelector('.o_FollowButton_unfollow').click());
    assert.verifySteps(['rpc:message_unsubscribe']);
    assert.containsOnce(
        document.body,
        '.o_FollowButton_follow',
        "shouldhavefollowbuttonafterclickedonunfollow"
    );
    assert.containsNone(
        document.body,
        '.o_FollowButton_unfollow',
        "shouldnothaveunfollowbuttonafterclickedonunfollow"
    );
});

});
});
});

});
