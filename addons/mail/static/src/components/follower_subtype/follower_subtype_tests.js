flectra.define('mail/static/src/components/follower_subtype/follower_subtype_tests.js',function(require){
'usestrict';

constcomponents={
    FollowerSubtype:require('mail/static/src/components/follower_subtype/follower_subtype.js'),
};
const{
    afterEach,
    afterNextRender,
    beforeEach,
    createRootComponent,
    start,
}=require('mail/static/src/utils/test_utils.js');

QUnit.module('mail',{},function(){
QUnit.module('components',{},function(){
QUnit.module('follower_subtype',{},function(){
QUnit.module('follower_subtype_tests.js',{
    beforeEach(){
        beforeEach(this);

        this.createFollowerSubtypeComponent=async({follower,followerSubtype})=>{
            constprops={
                followerLocalId:follower.localId,
                followerSubtypeLocalId:followerSubtype.localId,
            };
            awaitcreateRootComponent(this,components.FollowerSubtype,{
                props,
                target:this.widget.el,
            });
        };

        this.start=asyncparams=>{
            const{env,widget}=awaitstart(Object.assign({},params,{
                data:this.data,
            }));
            this.env=env;
            this.widget=widget;
        };
    },
    afterEach(){
        afterEach(this);
    },
});

QUnit.test('simplestlayoutofafollowedsubtype',asyncfunction(assert){
    assert.expect(5);

    awaitthis.start();

    constthread=this.env.models['mail.thread'].create({
        id:100,
        model:'res.partner',
    });
    constfollower=this.env.models['mail.follower'].create({
        channel:[['insert',{
            id:1,
            model:'mail.channel',
            name:"FrançoisPerusse",
        }]],
        followedThread:[['link',thread]],
        id:2,
        isActive:true,
        isEditable:true,
    });
    constfollowerSubtype=this.env.models['mail.follower_subtype'].create({
        id:1,
        isDefault:true,
        isInternal:false,
        name:"Dummytest",
        resModel:'res.partner'
    });
    follower.update({
        selectedSubtypes:[['link',followerSubtype]],
        subtypes:[['link',followerSubtype]],
    });
    awaitthis.createFollowerSubtypeComponent({
        follower,
        followerSubtype,
    });
    assert.containsOnce(
        document.body,
        '.o_FollowerSubtype',
        "shouldhavefollowersubtypecomponent"
    );
    assert.containsOnce(
        document.body,
        '.o_FollowerSubtype_label',
        "shouldhavealabel"
    );
    assert.containsOnce(
        document.body,
        '.o_FollowerSubtype_checkbox',
        "shouldhaveacheckbox"
    );
    assert.strictEqual(
        document.querySelector('.o_FollowerSubtype_label').textContent,
        "Dummytest",
        "shouldhavethenameofthesubtypeaslabel"
    );
    assert.ok(
        document.querySelector('.o_FollowerSubtype_checkbox').checked,
        "checkboxshouldbecheckedasfollowersubtypeisfollowed"
    );
});

QUnit.test('simplestlayoutofanotfollowedsubtype',asyncfunction(assert){
    assert.expect(5);

    awaitthis.start();

    constthread=this.env.models['mail.thread'].create({
        id:100,
        model:'res.partner',
    });
    constfollower=this.env.models['mail.follower'].create({
        channel:[['insert',{
            id:1,
            model:'mail.channel',
            name:"FrançoisPerusse",
        }]],
        followedThread:[['link',thread]],
        id:2,
        isActive:true,
        isEditable:true,
    });
    constfollowerSubtype=this.env.models['mail.follower_subtype'].create({
        id:1,
        isDefault:true,
        isInternal:false,
        name:"Dummytest",
        resModel:'res.partner'
    });
    follower.update({subtypes:[['link',followerSubtype]]});
    awaitthis.createFollowerSubtypeComponent({
        follower,
        followerSubtype,
    });
    assert.containsOnce(
        document.body,
        '.o_FollowerSubtype',
        "shouldhavefollowersubtypecomponent"
    );
    assert.containsOnce(
        document.body,
        '.o_FollowerSubtype_label',
        "shouldhavealabel"
    );
    assert.containsOnce(
        document.body,
        '.o_FollowerSubtype_checkbox',
        "shouldhaveacheckbox"
    );
    assert.strictEqual(
        document.querySelector('.o_FollowerSubtype_label').textContent,
        "Dummytest",
        "shouldhavethenameofthesubtypeaslabel"
    );
    assert.notOk(
        document.querySelector('.o_FollowerSubtype_checkbox').checked,
        "checkboxshouldnotbecheckedasfollowersubtypeisnotfollowed"
    );
});

QUnit.test('togglefollowersubtypecheckbox',asyncfunction(assert){
    assert.expect(5);

    awaitthis.start();

    constthread=this.env.models['mail.thread'].create({
        id:100,
        model:'res.partner',
    });
    constfollower=this.env.models['mail.follower'].create({
        channel:[['insert',{
            id:1,
            model:'mail.channel',
            name:"FrançoisPerusse",
        }]],
        followedThread:[['link',thread]],
        id:2,
        isActive:true,
        isEditable:true,
    });
    constfollowerSubtype=this.env.models['mail.follower_subtype'].create({
        id:1,
        isDefault:true,
        isInternal:false,
        name:"Dummytest",
        resModel:'res.partner'
    });
    follower.update({subtypes:[['link',followerSubtype]]});
    awaitthis.createFollowerSubtypeComponent({
        follower,
        followerSubtype,
    });
    assert.containsOnce(
        document.body,
        '.o_FollowerSubtype',
        "shouldhavefollowersubtypecomponent"
    );
    assert.containsOnce(
        document.body,
        '.o_FollowerSubtype_checkbox',
        "shouldhaveacheckbox"
    );
    assert.notOk(
        document.querySelector('.o_FollowerSubtype_checkbox').checked,
        "checkboxshouldnotbecheckedasfollowersubtypeisnotfollowed"
    );

    awaitafterNextRender(()=>
        document.querySelector('.o_FollowerSubtype_checkbox').click()
    );
    assert.ok(
        document.querySelector('.o_FollowerSubtype_checkbox').checked,
        "checkboxshouldnowbechecked"
    );

    awaitafterNextRender(()=>
        document.querySelector('.o_FollowerSubtype_checkbox').click()
    );
    assert.notOk(
        document.querySelector('.o_FollowerSubtype_checkbox').checked,
        "checkboxshouldbenomorechecked"
    );
});

});
});
});

});
