flectra.define('mail/static/src/components/activity/activity_tests.js',function(require){
'usestrict';

constcomponents={
    Activity:require('mail/static/src/components/activity/activity.js'),
};

const{
    afterEach,
    afterNextRender,
    beforeEach,
    createRootComponent,
    start,
}=require('mail/static/src/utils/test_utils.js');
constuseStore=require('mail/static/src/component_hooks/use_store/use_store.js');

constBus=require('web.Bus');
const{date_to_str}=require('web.time');

const{Component,tags:{xml}}=owl;

QUnit.module('mail',{},function(){
QUnit.module('components',{},function(){
QUnit.module('activity',{},function(){
QUnit.module('activity_tests.js',{
    beforeEach(){
        beforeEach(this);

        this.createActivityComponent=asyncfunction(activity){
            awaitcreateRootComponent(this,components.Activity,{
                props:{activityLocalId:activity.localId},
                target:this.widget.el,
            });
        };

        this.start=asyncparams=>{
            const{env,widget}=awaitstart(Object.assign({},params,{
                data:this.data,
            }));
            this.env=env;
            this.widget=widget;
        };
    },
    afterEach(){
        afterEach(this);
    },
});

QUnit.test('activitysimplestlayout',asyncfunction(assert){
    assert.expect(12);

    awaitthis.start();
    constactivity=this.env.models['mail.activity'].create({
        id:12,
        thread:[['insert',{id:42,model:'res.partner'}]],
    });
    awaitthis.createActivityComponent(activity);
    assert.strictEqual(
        document.querySelectorAll('.o_Activity').length,
        1,
        "shouldhaveactivitycomponent"
    );
    assert.strictEqual(
        document.querySelectorAll('.o_Activity_sidebar').length,
        1,
        "shouldhaveactivitysidebar"
    );
    assert.strictEqual(
        document.querySelectorAll('.o_Activity_core').length,
        1,
        "shouldhaveactivitycore"
    );
    assert.strictEqual(
        document.querySelectorAll('.o_Activity_user').length,
        1,
        "shouldhaveactivityuser"
    );
    assert.strictEqual(
        document.querySelectorAll('.o_Activity_info').length,
        1,
        "shouldhaveactivityinfo"
    );
    assert.strictEqual(
        document.querySelectorAll('.o_Activity_note').length,
        0,
        "shouldnothaveactivitynote"
    );
    assert.strictEqual(
        document.querySelectorAll('.o_Activity_details').length,
        0,
        "shouldnothaveactivitydetails"
    );
    assert.strictEqual(
        document.querySelectorAll('.o_Activity_mailTemplates').length,
        0,
        "shouldnothaveactivitymailtemplates"
    );
    assert.strictEqual(
        document.querySelectorAll('.o_Activity_editButton').length,
        0,
        "shouldnothaveactivityEditbutton"
    );
    assert.strictEqual(
        document.querySelectorAll('.o_Activity_cancelButton').length,
        0,
        "shouldnothaveactivityCancelbutton"
    );
    assert.strictEqual(
        document.querySelectorAll('.o_Activity_markDoneButton').length,
        0,
        "shouldnothaveactivityMarkasDonebutton"
    );
    assert.strictEqual(
        document.querySelectorAll('.o_Activity_uploadButton').length,
        0,
        "shouldnothaveactivityUploadbutton"
    );
});

QUnit.test('activitywithnotelayout',asyncfunction(assert){
    assert.expect(3);

    awaitthis.start();
    constactivity=this.env.models['mail.activity'].create({
        id:12,
        note:'Thereisnogoodorbadnote',
        thread:[['insert',{id:42,model:'res.partner'}]],
    });
    awaitthis.createActivityComponent(activity);
    assert.strictEqual(
        document.querySelectorAll('.o_Activity').length,
        1,
        "shouldhaveactivitycomponent"
    );
    assert.strictEqual(
        document.querySelectorAll('.o_Activity_note').length,
        1,
        "shouldhaveactivitynote"
    );
    assert.strictEqual(
        document.querySelector('.o_Activity_note').textContent,
        "Thereisnogoodorbadnote",
        "activitynoteshouldbe'Thereisnogoodorbadnote'"
    );
});

QUnit.test('activityinfolayoutwhenplannedaftertomorrow',asyncfunction(assert){
    assert.expect(4);

    awaitthis.start();
    consttoday=newDate();
    constfiveDaysFromNow=newDate();
    fiveDaysFromNow.setDate(today.getDate()+5);
    constactivity=this.env.models['mail.activity'].create({
        dateDeadline:date_to_str(fiveDaysFromNow),
        id:12,
        state:'planned',
        thread:[['insert',{id:42,model:'res.partner'}]],
    });
    awaitthis.createActivityComponent(activity);
    assert.strictEqual(
        document.querySelectorAll('.o_Activity').length,
        1,
        "shouldhaveactivitycomponent"
    );
    assert.strictEqual(
        document.querySelectorAll('.o_Activity_dueDateText').length,
        1,
        "shouldhaveactivitydelay"
    );
    assert.ok(
        document.querySelector('.o_Activity_dueDateText').classList.contains('o-planned'),
        "activitydelayshouldhavetherightcolormodifierclass(planned)"
    );
    assert.strictEqual(
        document.querySelector('.o_Activity_dueDateText').textContent,
        "Duein5days:",
        "activitydelayshouldhave'Duein5days:'aslabel"
    );
});

QUnit.test('activityinfolayoutwhenplannedtomorrow',asyncfunction(assert){
    assert.expect(4);

    awaitthis.start();
    consttoday=newDate();
    consttomorrow=newDate();
    tomorrow.setDate(today.getDate()+1);
    constactivity=this.env.models['mail.activity'].create({
        dateDeadline:date_to_str(tomorrow),
        id:12,
        state:'planned',
        thread:[['insert',{id:42,model:'res.partner'}]],
    });
    awaitthis.createActivityComponent(activity);
    assert.strictEqual(
        document.querySelectorAll('.o_Activity').length,
        1,
        "shouldhaveactivitycomponent"
    );
    assert.strictEqual(
        document.querySelectorAll('.o_Activity_dueDateText').length,
        1,
        "shouldhaveactivitydelay"
    );
    assert.ok(
        document.querySelector('.o_Activity_dueDateText').classList.contains('o-planned'),
        "activitydelayshouldhavetherightcolormodifierclass(planned)"
    );
    assert.strictEqual(
        document.querySelector('.o_Activity_dueDateText').textContent,
        'Tomorrow:',
        "activitydelayshouldhave'Tomorrow:'aslabel"
    );
});

QUnit.test('activityinfolayoutwhenplannedtoday',asyncfunction(assert){
    assert.expect(4);

    awaitthis.start();
    consttoday=newDate();
    constactivity=this.env.models['mail.activity'].create({
        dateDeadline:date_to_str(today),
        id:12,
        state:'today',
        thread:[['insert',{id:42,model:'res.partner'}]],
    });
    awaitthis.createActivityComponent(activity);
    assert.strictEqual(
        document.querySelectorAll('.o_Activity').length,
        1,
        "shouldhaveactivitycomponent"
    );
    assert.strictEqual(
        document.querySelectorAll('.o_Activity_dueDateText').length,
        1,
        "shouldhaveactivitydelay"
    );
    assert.ok(
        document.querySelector('.o_Activity_dueDateText').classList.contains('o-today'),
        "activitydelayshouldhavetherightcolormodifierclass(today)"
    );
    assert.strictEqual(
        document.querySelector('.o_Activity_dueDateText').textContent,
        "Today:",
        "activitydelayshouldhave'Today:'aslabel"
    );
});

QUnit.test('activityinfolayoutwhenplannedyesterday',asyncfunction(assert){
    assert.expect(4);

    awaitthis.start();
    consttoday=newDate();
    constyesterday=newDate();
    yesterday.setDate(today.getDate()-1);
    constactivity=this.env.models['mail.activity'].create({
        dateDeadline:date_to_str(yesterday),
        id:12,
        state:'overdue',
        thread:[['insert',{id:42,model:'res.partner'}]],
    });
    awaitthis.createActivityComponent(activity);
    assert.strictEqual(
        document.querySelectorAll('.o_Activity').length,
        1,
        "shouldhaveactivitycomponent"
    );
    assert.strictEqual(
        document.querySelectorAll('.o_Activity_dueDateText').length,
        1,
        "shouldhaveactivitydelay"
    );
    assert.ok(
        document.querySelector('.o_Activity_dueDateText').classList.contains('o-overdue'),
        "activitydelayshouldhavetherightcolormodifierclass(overdue)"
    );
    assert.strictEqual(
        document.querySelector('.o_Activity_dueDateText').textContent,
        "Yesterday:",
        "activitydelayshouldhave'Yesterday:'aslabel"
    );
});

QUnit.test('activityinfolayoutwhenplannedbeforeyesterday',asyncfunction(assert){
    assert.expect(4);

    awaitthis.start();
    consttoday=newDate();
    constfiveDaysBeforeNow=newDate();
    fiveDaysBeforeNow.setDate(today.getDate()-5);
    constactivity=this.env.models['mail.activity'].create({
        dateDeadline:date_to_str(fiveDaysBeforeNow),
        id:12,
        state:'overdue',
        thread:[['insert',{id:42,model:'res.partner'}]],
    });
    awaitthis.createActivityComponent(activity);
    assert.strictEqual(
        document.querySelectorAll('.o_Activity').length,
        1,
        "shouldhaveactivitycomponent"
    );
    assert.strictEqual(
        document.querySelectorAll('.o_Activity_dueDateText').length,
        1,
        "shouldhaveactivitydelay"
    );
    assert.ok(
        document.querySelector('.o_Activity_dueDateText').classList.contains('o-overdue'),
        "activitydelayshouldhavetherightcolormodifierclass(overdue)"
    );
    assert.strictEqual(
        document.querySelector('.o_Activity_dueDateText').textContent,
        "5daysoverdue:",
        "activitydelayshouldhave'5daysoverdue:'aslabel"
    );
});

QUnit.test('activitywithasummarylayout',asyncfunction(assert){
    assert.expect(4);

    awaitthis.start();
    constactivity=this.env.models['mail.activity'].create({
        id:12,
        summary:'testsummary',
        thread:[['insert',{id:42,model:'res.partner'}]],
    });
    awaitthis.createActivityComponent(activity);
    assert.strictEqual(
        document.querySelectorAll('.o_Activity').length,
        1,
        "shouldhaveactivitycomponent"
    );
    assert.strictEqual(
        document.querySelectorAll('.o_Activity_summary').length,
        1,
        "shouldhaveactivitysummary"
    );
    assert.strictEqual(
        document.querySelectorAll('.o_Activity_type').length,
        0,
        "shouldnothavetheactivitytypeassummary"
    );
    assert.strictEqual(
        document.querySelector('.o_Activity_summary').textContent.trim(),
        "“testsummary”",
        "shouldhavethespecificactivitysummaryinactivitysummary"
    );
});

QUnit.test('activitywithoutsummarylayout',asyncfunction(assert){
    assert.expect(5);

    awaitthis.start();
    constactivity=this.env.models['mail.activity'].create({
        id:12,
        thread:[['insert',{id:42,model:'res.partner'}]],
        type:[['insert',{id:1,displayName:"Faketype"}]],
    });
    awaitthis.createActivityComponent(activity);
    assert.strictEqual(
        document.querySelectorAll('.o_Activity').length,
        1,
        "shouldhaveactivitycomponent"
    );
    assert.strictEqual(
        document.querySelectorAll('.o_Activity_type').length,
        1,
        "activitydetailsshouldhaveanactivitytypesection"
    );
    assert.strictEqual(
        document.querySelector('.o_Activity_type').textContent.trim(),
        "Faketype",
        "activitydetailsshouldhavetheactivitytypedisplaynameintypesection"
    );
    assert.strictEqual(
        document.querySelectorAll('.o_Activity_summary.o_Activity_type').length,
        1,
        "shouldhaveactivitytypeassummary"
    );
    assert.strictEqual(
        document.querySelectorAll('.o_Activity_summary:not(.o_Activity_type)').length,
        0,
        "shouldnothaveaspecificsummary"
    );
});

QUnit.test('activitydetailstoggle',asyncfunction(assert){
    assert.expect(5);

    awaitthis.start();
    consttoday=newDate();
    consttomorrow=newDate();
    tomorrow.setDate(today.getDate()+1);
    constactivity=this.env.models['mail.activity'].create({
        creator:[['insert',{id:1,display_name:"Admin"}]],
        dateCreate:date_to_str(today),
        dateDeadline:date_to_str(tomorrow),
        id:12,
        state:'planned',
        thread:[['insert',{id:42,model:'res.partner'}]],
        type:[['insert',{id:1,displayName:"Faketype"}]],
    });
    awaitthis.createActivityComponent(activity);
    assert.strictEqual(
        document.querySelectorAll('.o_Activity').length,
        1,
        "shouldhaveactivitycomponent"
    );
    assert.strictEqual(
        document.querySelectorAll('.o_Activity_details').length,
        0,
        "activitydetailsshouldnotbevisiblebydefault"
    );
    assert.strictEqual(
        document.querySelectorAll('.o_Activity_detailsButton').length,
        1,
        "activityshouldhaveadetailsbutton"
    );

    awaitafterNextRender(()=>
        document.querySelector('.o_Activity_detailsButton').click()
    );
    assert.strictEqual(
        document.querySelectorAll('.o_Activity_details').length,
        1,
        "activitydetailsshouldbevisibleafterclickingondetailsbutton"
    );

    awaitafterNextRender(()=>
        document.querySelector('.o_Activity_detailsButton').click()
    );
    assert.strictEqual(
        document.querySelectorAll('.o_Activity_details').length,
        0,
        "activitydetailsshouldnolongerbevisibleafterclickingagainondetailsbutton"
    );
});

QUnit.test('activitydetailslayout',asyncfunction(assert){
    assert.expect(11);

    awaitthis.start();
    consttoday=newDate();
    consttomorrow=newDate();
    tomorrow.setDate(today.getDate()+1);
    constactivity=this.env.models['mail.activity'].create({
        assignee:[['insert',{id:10,display_name:"Pauvrepomme"}]],
        creator:[['insert',{id:1,display_name:"Admin"}]],
        dateCreate:date_to_str(today),
        dateDeadline:date_to_str(tomorrow),
        id:12,
        state:'planned',
        thread:[['insert',{id:42,model:'res.partner'}]],
        type:[['insert',{id:1,displayName:"Faketype"}]],
    });
    awaitthis.createActivityComponent(activity);
    assert.strictEqual(
        document.querySelectorAll('.o_Activity').length,
        1,
        "shouldhaveactivitycomponent"
    );
    assert.strictEqual(
        document.querySelectorAll('.o_Activity_userAvatar').length,
        1,
        "shouldhaveactivityuseravatar"
    );
    assert.strictEqual(
        document.querySelectorAll('.o_Activity_detailsButton').length,
        1,
        "activityshouldhaveadetailsbutton"
    );

    awaitafterNextRender(()=>
        document.querySelector('.o_Activity_detailsButton').click()
    );
    assert.strictEqual(
        document.querySelectorAll('.o_Activity_details').length,
        1,
        "activitydetailsshouldbevisibleafterclickingondetailsbutton"
    );
    assert.strictEqual(
        document.querySelectorAll('.o_Activity_details.o_Activity_type').length,
        1,
        "activitydetailsshouldhavetype"
    );
    assert.strictEqual(
        document.querySelector('.o_Activity_details.o_Activity_type').textContent,
        "Faketype",
        "activitydetailstypeshouldbe'Faketype'"
    );
    assert.strictEqual(
        document.querySelectorAll('.o_Activity_detailsCreation').length,
        1,
        "activitydetailsshouldhavecreationdate"
    );
    assert.strictEqual(
        document.querySelectorAll('.o_Activity_detailsCreator').length,
        1,
        "activitydetailsshouldhavecreator"
    );
    assert.strictEqual(
        document.querySelectorAll('.o_Activity_detailsAssignation').length,
        1,
        "activitydetailsshouldhaveassignationinformation"
    );
    assert.strictEqual(
        document.querySelector('.o_Activity_detailsAssignation').textContent.indexOf('Pauvrepomme'),
        0,
        "activitydetailsassignationinformationshouldcontaincreatordisplayname"
    );
    assert.strictEqual(
        document.querySelectorAll('.o_Activity_detailsAssignationUserAvatar').length,
        1,
        "activitydetailsshouldhaveuseravatar"
    );
});

QUnit.test('activitywithmailtemplatelayout',asyncfunction(assert){
    assert.expect(8);

    awaitthis.start();
    constactivity=this.env.models['mail.activity'].create({
        id:12,
        mailTemplates:[['insert',{id:1,name:"Dummymailtemplate"}]],
        thread:[['insert',{id:42,model:'res.partner'}]],
    });
    awaitthis.createActivityComponent(activity);
    assert.strictEqual(
        document.querySelectorAll('.o_Activity').length,
        1,
        "shouldhaveactivitycomponent"
    );
    assert.strictEqual(
        document.querySelectorAll('.o_Activity_sidebar').length,
        1,
        "shouldhaveactivitysidebar"
    );
    assert.strictEqual(
        document.querySelectorAll('.o_Activity_mailTemplates').length,
        1,
        "shouldhaveactivitymailtemplates"
    );
    assert.strictEqual(
        document.querySelectorAll('.o_Activity_mailTemplate').length,
        1,
        "shouldhaveactivitymailtemplate"
    );
    assert.strictEqual(
        document.querySelectorAll('.o_MailTemplate_name').length,
        1,
        "shouldhaveactivitymailtemplatename"
    );
    assert.strictEqual(
        document.querySelector('.o_MailTemplate_name').textContent,
        "Dummymailtemplate",
        "shouldhaveactivitymailtemplatename"
    );
    assert.strictEqual(
        document.querySelectorAll('.o_MailTemplate_preview').length,
        1,
        "shouldhaveactivitymailtemplatenamepreviewbutton"
    );
    assert.strictEqual(
        document.querySelectorAll('.o_MailTemplate_send').length,
        1,
        "shouldhaveactivitymailtemplatenamesendbutton"
    );
});

QUnit.test('activitywithmailtemplate:previewmail',asyncfunction(assert){
    assert.expect(10);

    constbus=newBus();
    bus.on('do-action',null,payload=>{
        assert.step('do_action');
        assert.strictEqual(
            payload.action.context.default_res_id,
            42,
            'Actionshouldhavetheactivityresidasdefaultresidincontext'
        );
        assert.strictEqual(
            payload.action.context.default_model,
            'res.partner',
            'Actionshouldhavetheactivityresmodelasdefaultmodelincontext'
        );
        assert.ok(
            payload.action.context.default_use_template,
            'Actionshouldhavetrueasdefaultuse_templateincontext'
        );
        assert.strictEqual(
            payload.action.context.default_template_id,
            1,
            'Actionshouldhavetheselectedmailtemplateidasdefaulttemplateidincontext'
        );
        assert.strictEqual(
            payload.action.type,
            "ir.actions.act_window",
            'Actionshouldbeoftype"ir.actions.act_window"'
        );
        assert.strictEqual(
            payload.action.res_model,
            "mail.compose.message",
            'Actionshouldhave"mail.compose.message"asres_model'
        );
    });

    awaitthis.start({env:{bus}});
    constactivity=this.env.models['mail.activity'].create({
        id:12,
        mailTemplates:[['insert',{
            id:1,
            name:"Dummymailtemplate",
        }]],
        thread:[['insert',{id:42,model:'res.partner'}]],
    });
    awaitthis.createActivityComponent(activity);
    assert.strictEqual(
        document.querySelectorAll('.o_Activity').length,
        1,
        "shouldhaveactivitycomponent"
    );
    assert.strictEqual(
        document.querySelectorAll('.o_MailTemplate_preview').length,
        1,
        "shouldhaveactivitymailtemplatenamepreviewbutton"
    );

    document.querySelector('.o_MailTemplate_preview').click();
    assert.verifySteps(
        ['do_action'],
        "shouldhavecalled'composeemail'actioncorrectly"
    );
});

QUnit.test('activitywithmailtemplate:sendmail',asyncfunction(assert){
    assert.expect(7);

    awaitthis.start({
        asyncmockRPC(route,args){
            if(args.method==='activity_send_mail'){
                assert.step('activity_send_mail');
                assert.strictEqual(args.args[0].length,1);
                assert.strictEqual(args.args[0][0],42);
                assert.strictEqual(args.args[1],1);
                return;
            }else{
                returnthis._super(...arguments);
            }
        },
    });
    constactivity=this.env.models['mail.activity'].create({
        id:12,
        mailTemplates:[['insert',{
            id:1,
            name:"Dummymailtemplate",
        }]],
        thread:[['insert',{id:42,model:'res.partner'}]],
    });
    awaitthis.createActivityComponent(activity);
    assert.strictEqual(
        document.querySelectorAll('.o_Activity').length,
        1,
        "shouldhaveactivitycomponent"
    );
    assert.strictEqual(
        document.querySelectorAll('.o_MailTemplate_send').length,
        1,
        "shouldhaveactivitymailtemplatenamesendbutton"
    );

    document.querySelector('.o_MailTemplate_send').click();
    assert.verifySteps(
        ['activity_send_mail'],
        "shouldhavecalledactivity_send_mailrpc"
    );
});

QUnit.test('activityuploaddocumentisavailable',asyncfunction(assert){
    assert.expect(3);

    awaitthis.start();
    consttoday=newDate();
    consttomorrow=newDate();
    tomorrow.setDate(today.getDate()+1);
    constactivity=this.env.models['mail.activity'].create({
        canWrite:true,
        category:'upload_file',
        id:12,
        thread:[['insert',{id:42,model:'res.partner'}]],
    });
    awaitthis.createActivityComponent(activity);
    assert.strictEqual(
        document.querySelectorAll('.o_Activity').length,
        1,
        "shouldhaveactivitycomponent"
    );
    assert.strictEqual(
        document.querySelectorAll('.o_Activity_uploadButton').length,
        1,
        "shouldhaveactivityuploadbutton"
    );
    assert.strictEqual(
        document.querySelectorAll('.o_FileUploader').length,
        1,
        "shouldhaveafileuploader"
    );
});

QUnit.test('activityclickonmarkasdone',asyncfunction(assert){
    assert.expect(4);

    awaitthis.start();
    consttoday=newDate();
    consttomorrow=newDate();
    tomorrow.setDate(today.getDate()+1);
    constactivity=this.env.models['mail.activity'].create({
        canWrite:true,
        category:'not_upload_file',
        id:12,
        thread:[['insert',{id:42,model:'res.partner'}]],
    });
    awaitthis.createActivityComponent(activity);

    assert.strictEqual(
        document.querySelectorAll('.o_Activity').length,
        1,
        "shouldhaveactivitycomponent"
    );
    assert.strictEqual(
        document.querySelectorAll('.o_Activity_markDoneButton').length,
        1,
        "shouldhaveactivityMarkasDonebutton"
    );

    awaitafterNextRender(()=>{
        document.querySelector('.o_Activity_markDoneButton').click();
    });
    assert.strictEqual(
        document.querySelectorAll('.o_ActivityMarkDonePopover').length,
        1,
        "shouldhaveopenedthemarkdonepopover"
    );

    awaitafterNextRender(()=>{
        document.querySelector('.o_Activity_markDoneButton').click();
    });
    assert.strictEqual(
        document.querySelectorAll('.o_ActivityMarkDonePopover').length,
        0,
        "shouldhaveclosedthemarkdonepopover"
    );
});

QUnit.test('activitymarkasdonepopovershouldfocusfeedbackinputonopen[REQUIREFOCUS]',asyncfunction(assert){
    assert.expect(3);

    awaitthis.start();
    consttoday=newDate();
    consttomorrow=newDate();
    tomorrow.setDate(today.getDate()+1);
    constactivity=this.env.models['mail.activity'].create({
        canWrite:true,
        category:'not_upload_file',
        id:12,
        thread:[['insert',{id:42,model:'res.partner'}]],
    });
    awaitthis.createActivityComponent(activity);

    assert.containsOnce(
        document.body,
        '.o_Activity',
        "shouldhaveactivitycomponent"
    );
    assert.containsOnce(
        document.body,
        '.o_Activity_markDoneButton',
        "shouldhaveactivityMarkasDonebutton"
    );

    awaitafterNextRender(()=>{
        document.querySelector('.o_Activity_markDoneButton').click();
    });
    assert.strictEqual(
        document.querySelector('.o_ActivityMarkDonePopover_feedback'),
        document.activeElement,
        "thepopovertextareashouldhavethefocus"
    );
});

QUnit.test('activityclickonedit',asyncfunction(assert){
    assert.expect(9);

    constbus=newBus();
    bus.on('do-action',null,payload=>{
        assert.step('do_action');
        assert.strictEqual(
            payload.action.context.default_res_id,
            42,
            'Actionshouldhavetheactivityresidasdefaultresidincontext'
        );
        assert.strictEqual(
            payload.action.context.default_res_model,
            'res.partner',
            'Actionshouldhavetheactivityresmodelasdefaultresmodelincontext'
        );
        assert.strictEqual(
            payload.action.type,
            "ir.actions.act_window",
            'Actionshouldbeoftype"ir.actions.act_window"'
        );
        assert.strictEqual(
            payload.action.res_model,
            "mail.activity",
            'Actionshouldhave"mail.activity"asres_model'
        );
        assert.strictEqual(
            payload.action.res_id,
            12,
            'Actionshouldhaveactivityidasres_id'
        );
    });

    awaitthis.start({env:{bus}});
    constactivity=this.env.models['mail.activity'].create({
        canWrite:true,
        id:12,
        mailTemplates:[['insert',{id:1,name:"Dummymailtemplate"}]],
        thread:[['insert',{id:42,model:'res.partner'}]],
    });
    awaitthis.createActivityComponent(activity);
    assert.strictEqual(
        document.querySelectorAll('.o_Activity').length,
        1,
        "shouldhaveactivitycomponent"
    );
    assert.strictEqual(
        document.querySelectorAll('.o_Activity_editButton').length,
        1,
        "shouldhaveactivityeditbutton"
    );

    document.querySelector('.o_Activity_editButton').click();
    assert.verifySteps(
        ['do_action'],
        "shouldhavecalled'scheduleactivity'actioncorrectly"
    );
});

QUnit.test('activityedition',asyncfunction(assert){
    assert.expect(14);

    this.data['mail.activity'].records.push({
        can_write:true,
        icon:'fa-times',
        id:12,
        res_id:42,
        res_model:'res.partner',
    });
    constbus=newBus();
    bus.on('do-action',null,payload=>{
        assert.step('do_action');
        assert.strictEqual(
            payload.action.context.default_res_id,
            42,
            'Actionshouldhavetheactivityresidasdefaultresidincontext'
        );
        assert.strictEqual(
            payload.action.context.default_res_model,
            'res.partner',
            'Actionshouldhavetheactivityresmodelasdefaultresmodelincontext'
        );
        assert.strictEqual(
            payload.action.type,
            'ir.actions.act_window',
            'Actionshouldbeoftype"ir.actions.act_window"'
        );
        assert.strictEqual(
            payload.action.res_model,
            'mail.activity',
            'Actionshouldhave"mail.activity"asres_model'
        );
        assert.strictEqual(
            payload.action.res_id,
            12,
            'Actionshouldhaveactivityidasres_id'
        );
        this.data['mail.activity'].records[0].icon='fa-check';
        payload.options.on_close();
    });

    awaitthis.start({env:{bus}});
    constactivity=this.env.models['mail.activity'].insert(
        this.env.models['mail.activity'].convertData(
            this.data['mail.activity'].records[0]
        )
    );
    awaitthis.createActivityComponent(activity);

    assert.containsOnce(
        document.body,
        '.o_Activity',
        "shouldhaveactivitycomponent"
    );
    assert.containsOnce(
        document.body,
        '.o_Activity_editButton',
        "shouldhaveactivityeditbutton"
    );
    assert.containsOnce(
        document.body,
        '.o_Activity_icon',
        "shouldhaveactivityicon"
    );
    assert.containsOnce(
        document.body,
        '.o_Activity_icon.fa-times',
        "shouldhaveinitialactivityicon"
    );
    assert.containsNone(
        document.body,
        '.o_Activity_icon.fa-check',
        "shouldnothavenewactivityiconwhennoteditedyet"
    );

    awaitafterNextRender(()=>{
        document.querySelector('.o_Activity_editButton').click();
    });
    assert.verifySteps(
        ['do_action'],
        "shouldhavecalled'scheduleactivity'actioncorrectly"
    );
    assert.containsNone(
        document.body,
        '.o_Activity_icon.fa-times',
        "shouldnomorehaveinitialactivityicononceedited"
    );
    assert.containsOnce(
        document.body,
        '.o_Activity_icon.fa-check',
        "shouldnowhavenewactivityicononceedited"
    );
});

QUnit.test('activityclickoncancel',asyncfunction(assert){
    assert.expect(7);

    awaitthis.start({
        asyncmockRPC(route,args){
            if(route==='/web/dataset/call_kw/mail.activity/unlink'){
                assert.step('unlink');
                assert.strictEqual(args.args[0].length,1);
                assert.strictEqual(args.args[0][0],12);
                return;
            }else{
                returnthis._super(...arguments);
            }
        },
    });
    constactivity=this.env.models['mail.activity'].create({
        canWrite:true,
        id:12,
        mailTemplates:[['insert',{
            id:1,
            name:"Dummymailtemplate",
        }]],
        thread:[['insert',{id:42,model:'res.partner'}]],
    });

    //CreateaparentcomponenttosurroundtheActivitycomponentinordertobeable
    //tocheckthatactivitycomponenthasbeendestroyed
    classParentComponentextendsComponent{
        constructor(...args){
            super(...args);
            useStore(props=>{
                constactivity=this.env.models['mail.activity'].get(props.activityLocalId);
                return{
                    activity:activity?activity.__state:undefined,
                };
            });
        }

        /**
         *@returns{mail.activity}
         */
        getactivity(){
            returnthis.env.models['mail.activity'].get(this.props.activityLocalId);
        }
    }
    ParentComponent.env=this.env;
    Object.assign(ParentComponent,{
        components,
        props:{activityLocalId:String},
        template:xml`
            <div>
                <p>parent</p>
                <tt-if="activity">
                    <ActivityactivityLocalId="activity.localId"/>
                </t>
            </div>
        `,
    });
    awaitcreateRootComponent(this,ParentComponent,{
        props:{activityLocalId:activity.localId},
        target:this.widget.el,
    });

    assert.strictEqual(
        document.querySelectorAll('.o_Activity').length,
        1,
        "shouldhaveactivitycomponent"
    );
    assert.strictEqual(
        document.querySelectorAll('.o_Activity_cancelButton').length,
        1,
        "shouldhaveactivitycancelbutton"
    );

    awaitafterNextRender(()=>
        document.querySelector('.o_Activity_cancelButton').click()
    );
    assert.verifySteps(
        ['unlink'],
        "shouldhavecalledunlinkrpcafterclickingoncancel"
    );
    assert.strictEqual(
        document.querySelectorAll('.o_Activity').length,
        0,
        "shouldnolongerdisplayactivityafterclickingoncancel"
    );
});

QUnit.test('activitymarkdonepopovercloseonESCAPE',asyncfunction(assert){
    //Thistestisnotinactivity_mark_done_popover_tests.jsasitrequirestheactivitymarkdone
    //componenttohaveaparentinordertoallowtestinginteractionsthepopover.
    assert.expect(2);

    awaitthis.start();
    constactivity=this.env.models['mail.activity'].create({
        canWrite:true,
        category:'not_upload_file',
        id:12,
        thread:[['insert',{id:42,model:'res.partner'}]],
    });

    awaitthis.createActivityComponent(activity);
    awaitafterNextRender(()=>{
        document.querySelector('.o_Activity_markDoneButton').click();
    });
    assert.containsOnce(
        document.body,
        '.o_ActivityMarkDonePopover',
        "Popovercomponentshouldbepresent"
    );

    awaitafterNextRender(()=>{
        constev=newwindow.KeyboardEvent('keydown',{bubbles:true,key:"Escape"});
        document.querySelector(`.o_ActivityMarkDonePopover`).dispatchEvent(ev);
    });
    assert.containsNone(
        document.body,
        '.o_ActivityMarkDonePopover',
        "ESCAPEpressedshouldhaveclosedthemarkdonepopover"
    );
});

QUnit.test('activitymarkdonepopoverclickondiscard',asyncfunction(assert){
    //Thistestisnotinactivity_mark_done_popover_tests.jsasitrequirestheactivitymarkdone
    //componenttohaveaparentinordertoallowtestinginteractionsthepopover.
    assert.expect(3);

    awaitthis.start();
    constactivity=this.env.models['mail.activity'].create({
        canWrite:true,
        category:'not_upload_file',
        id:12,
        thread:[['insert',{id:42,model:'res.partner'}]],
    });
    awaitthis.createActivityComponent(activity);
    awaitafterNextRender(()=>{
        document.querySelector('.o_Activity_markDoneButton').click();
    });
    assert.containsOnce(
        document.body,
        '.o_ActivityMarkDonePopover',
        "Popovercomponentshouldbepresent"
    );
    assert.containsOnce(
        document.body,
        '.o_ActivityMarkDonePopover_discardButton',
        "Popovercomponentshouldcontainthediscardbutton"
    );
    awaitafterNextRender(()=>
        document.querySelector('.o_ActivityMarkDonePopover_discardButton').click()
    );
    assert.containsNone(
        document.body,
        '.o_ActivityMarkDonePopover',
        "Discardbuttonclickedshouldhaveclosedthemarkdonepopover"
    );
});

QUnit.test('data-oe-id&data-oe-modellinkredirectiononclick',asyncfunction(assert){
    assert.expect(7);

    constbus=newBus();
    bus.on('do-action',null,payload=>{
        assert.strictEqual(
            payload.action.type,
            'ir.actions.act_window',
            "actionshouldopenview"
        );
        assert.strictEqual(
            payload.action.res_model,
            'some.model',
            "actionshouldopenviewon'some.model'model"
        );
        assert.strictEqual(
            payload.action.res_id,
            250,
            "actionshouldopenviewon250"
        );
        assert.step('do-action:openFormView_some.model_250');
    });
    awaitthis.start({env:{bus}});
    constactivity=this.env.models['mail.activity'].create({
        canWrite:true,
        category:'not_upload_file',
        id:12,
        note:`<p><ahref="#"data-oe-id="250"data-oe-model="some.model">some.model_250</a></p>`,
        thread:[['insert',{id:42,model:'res.partner'}]],
    });
    awaitthis.createActivityComponent(activity);
    assert.containsOnce(
        document.body,
        '.o_Activity_note',
        "activityshouldhaveanote"
    );
    assert.containsOnce(
        document.querySelector('.o_Activity_note'),
        'a',
        "activitynoteshouldhavealink"
    );

    document.querySelector(`.o_Activity_notea`).click();
    assert.verifySteps(
        ['do-action:openFormView_some.model_250'],
        "shouldhaveopenformviewonrelatedrecordafterclickonlink"
    );
});

});
});
});

});
