flectra.define('mail/static/src/components/attachment_viewer/attachment_viewer.js',function(require){
'usestrict';

constuseRefs=require('mail/static/src/component_hooks/use_refs/use_refs.js');
constuseShouldUpdateBasedOnProps=require('mail/static/src/component_hooks/use_should_update_based_on_props/use_should_update_based_on_props.js');
constuseStore=require('mail/static/src/component_hooks/use_store/use_store.js');

const{Component,QWeb}=owl;
const{useRef}=owl.hooks;

constMIN_SCALE=0.5;
constSCROLL_ZOOM_STEP=0.1;
constZOOM_STEP=0.5;

classAttachmentViewerextendsComponent{

    /**
     *@override
     */
    constructor(...args){
        super(...args);
        this.MIN_SCALE=MIN_SCALE;
        useShouldUpdateBasedOnProps();
        useStore(props=>{
            constattachmentViewer=this.env.models['mail.attachment_viewer'].get(props.localId);
            return{
                attachment:attachmentViewer&&attachmentViewer.attachment
                    ?attachmentViewer.attachment.__state
                    :undefined,
                attachments:attachmentViewer
                    ?attachmentViewer.attachments.map(attachment=>attachment.__state)
                    :[],
                attachmentViewer:attachmentViewer?attachmentViewer.__state:undefined,
            };
        });
        /**
         *Usedtoensurethattherefisalwaysuptodate,whichseemstobeneedediftheelement
         *hasat-key,whichwasaddedtoforcetherenderingofanewelementwhenthesrcoftheimagechanges.
         *Thiswasmadetoremovethedisplayofthepreviousimageassoonasthesrcchanges.
         */
        this._getRefs=useRefs();
        /**
         *Determinewhethertheuseriscurrentlydraggingtheimage.
         *Thisisusefultodeterminewhetheraclickoutsideoftheimage
         *shouldclosetheattachmentviewerornot.
         */
        this._isDragging=false;
        /**
         *Referenceofthezoomernode.Usefultoapplytranslate
         *transformationonimagevisualisation.
         */
        this._zoomerRef=useRef('zoomer');
        /**
         *Trackedtranslatetransformationsonimagevisualisation.Thisis
         *notobservedwith`useStore`becausetheyareusedtocomputezoomer
         *style,andthisischangeddirectlyonzoomerforperformance
         *reasons(overheadofmakingvdomistoosignificantforeachmouse
         *positionchangeswhiledragging)
         */
        this._translate={x:0,y:0,dx:0,dy:0};
        this._onClickGlobal=this._onClickGlobal.bind(this);
    }

    mounted(){
        this.el.focus();
        this._handleImageLoad();
        document.addEventListener('click',this._onClickGlobal);
    }

    /**
     *Whenanewimageisdisplayed,showaspinneruntilitisloaded.
     */
    patched(){
        this._handleImageLoad();
    }

    willUnmount(){
        document.removeEventListener('click',this._onClickGlobal);
    }

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *@returns{mail.attachment_viewer}
     */
    getattachmentViewer(){
        returnthis.env.models['mail.attachment_viewer'].get(this.props.localId);
    }

    /**
     *Computethestyleoftheimage(scale+rotation).
     *
     *@returns{string}
     */
    getimageStyle(){
        constattachmentViewer=this.attachmentViewer;
        letstyle=`transform:`+
            `scale3d(${attachmentViewer.scale},${attachmentViewer.scale},1)`+
            `rotate(${attachmentViewer.angle}deg);`;

        if(attachmentViewer.angle%180!==0){
            style+=``+
                `max-height:${window.innerWidth}px;`+
                `max-width:${window.innerHeight}px;`;
        }else{
            style+=``+
                `max-height:100%;`+
                `max-width:100%;`;
        }
        returnstyle;
    }

    /**
     *Mandatorymethodfordialogcomponents.
     *Preventclosingthedialogwhenclickingonthemaskwhentheuseris
     *currentlydraggingtheimage.
     *
     *@returns{boolean}
     */
    isCloseable(){
        return!this._isDragging;
    }

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *Closethedialogwiththisattachmentviewer.
     *
     *@private
     */
    _close(){
        this.attachmentViewer.close();
    }

    /**
     *Downloadtheattachment.
     *
     *@private
     */
    _download(){
        constid=this.attachmentViewer.attachment.id;
        this.env.services.navigate(`/web/content/ir.attachment/${id}/datas`,{download:true});
    }

    /**
     *Determinewhetherthecurrentimageisrenderedforthe1sttime,andif
     *that'sthecase,displayaspinneruntilloaded.
     *
     *@private
     */
    _handleImageLoad(){
        if(!this.attachmentViewer||!this.attachmentViewer.attachment){
            return;
        }
        constrefs=this._getRefs();
        constimage=refs[`image_${this.attachmentViewer.attachment.id}`];
        if(
            this.attachmentViewer.attachment.fileType==='image'&&
            (!image||!image.complete)
        ){
            this.attachmentViewer.update({isImageLoading:true});
        }
    }

    /**
     *Displaythepreviousattachmentinthelistofattachments.
     *
     *@private
     */
    _next(){
        constattachmentViewer=this.attachmentViewer;
        constindex=attachmentViewer.attachments.findIndex(attachment=>
            attachment===attachmentViewer.attachment
        );
        constnextIndex=(index+1)%attachmentViewer.attachments.length;
        attachmentViewer.update({
            attachment:[['link',attachmentViewer.attachments[nextIndex]]],
        });
    }

    /**
     *Displaythepreviousattachmentinthelistofattachments.
     *
     *@private
     */
    _previous(){
        constattachmentViewer=this.attachmentViewer;
        constindex=attachmentViewer.attachments.findIndex(attachment=>
            attachment===attachmentViewer.attachment
        );
        constnextIndex=index===0
            ?attachmentViewer.attachments.length-1
            :index-1;
        attachmentViewer.update({
            attachment:[['link',attachmentViewer.attachments[nextIndex]]],
        });
    }

    /**
     *Promptthebrowserprintofthisattachment.
     *
     *@private
     */
    _print(){
        constprintWindow=window.open('about:blank','_new');
        printWindow.document.open();
        printWindow.document.write(`
            <html>
                <head>
                    <script>
                        functiononloadImage(){
                            setTimeout('printImage()',10);
                        }
                        functionprintImage(){
                            window.print();
                            window.close();
                        }
                    </script>
                </head>
                <bodyonload='onloadImage()'>
                    <imgsrc="${this.attachmentViewer.attachment.defaultSource}"alt=""/>
                </body>
            </html>`);
        printWindow.document.close();
    }

    /**
     *Rotatetheimageby90degreestotheright.
     *
     *@private
     */
    _rotate(){
        this.attachmentViewer.update({angle:this.attachmentViewer.angle+90});
    }

    /**
     *Stopdragginginteractionoftheuser.
     *
     *@private
     */
    _stopDragging(){
        this._isDragging=false;
        this._translate.x+=this._translate.dx;
        this._translate.y+=this._translate.dy;
        this._translate.dx=0;
        this._translate.dy=0;
        this._updateZoomerStyle();
    }

    /**
     *Updatethestyleofthezoomerbasedontranslatetransformation.Changes
     *aredirectlyappliedonzoomer,insteadoftriggeringre-renderand
     *definingtheminthetemplate,forperformancereasons.
     *
     *@private
     *@returns{string}
     */
    _updateZoomerStyle(){
        constattachmentViewer=this.attachmentViewer;
        constrefs=this._getRefs();
        constimage=refs[`image_${this.attachmentViewer.attachment.id}`];
        consttx=image.offsetWidth*attachmentViewer.scale>this._zoomerRef.el.offsetWidth
            ?this._translate.x+this._translate.dx
            :0;
        constty=image.offsetHeight*attachmentViewer.scale>this._zoomerRef.el.offsetHeight
            ?this._translate.y+this._translate.dy
            :0;
        if(tx===0){
            this._translate.x=0;
        }
        if(ty===0){
            this._translate.y=0;
        }
        this._zoomerRef.el.style=`transform:`+
            `translate(${tx}px,${ty}px)`;
    }

    /**
     *Zoomintheimage.
     *
     *@private
     *@param{Object}[param0={}]
     *@param{boolean}[param0.scroll=false]
     */
    _zoomIn({scroll=false}={}){
        this.attachmentViewer.update({
            scale:this.attachmentViewer.scale+(scroll?SCROLL_ZOOM_STEP:ZOOM_STEP),
        });
        this._updateZoomerStyle();
    }

    /**
     *Zoomouttheimage.
     *
     *@private
     *@param{Object}[param0={}]
     *@param{boolean}[param0.scroll=false]
     */
    _zoomOut({scroll=false}={}){
        if(this.attachmentViewer.scale===MIN_SCALE){
            return;
        }
        constunflooredAdaptedScale=(
            this.attachmentViewer.scale-
            (scroll?SCROLL_ZOOM_STEP:ZOOM_STEP)
        );
        this.attachmentViewer.update({
            scale:Math.max(MIN_SCALE,unflooredAdaptedScale),
        });
        this._updateZoomerStyle();
    }

    /**
     *Resetthezoomscaleoftheimage.
     *
     *@private
     */
    _zoomReset(){
        this.attachmentViewer.update({scale:1});
        this._updateZoomerStyle();
    }

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *Calledwhenclickingonmaskofattachmentviewer.
     *
     *@private
     *@param{MouseEvent}ev
     */
    _onClick(ev){
        if(this._isDragging){
            return;
        }
        //TODO:clickingonthebackgroundshouldprobablybehandledbythedialog?
        //task-2092965
        this._close();
    }

    /**
     *Calledwhenclickingoncrossicon.
     *
     *@private
     *@param{MouseEvent}ev
     */
    _onClickClose(ev){
        this._close();
    }

    /**
     *Calledwhenclickingondownloadicon.
     *
     *@private
     *@param{MouseEvent}ev
     */
    _onClickDownload(ev){
        ev.stopPropagation();
        this._download();
    }

    /**
     *@private
     *@param{MouseEvent}ev
     */
    _onClickGlobal(ev){
        if(!this._isDragging){
            return;
        }
        ev.stopPropagation();
        this._stopDragging();
    }

    /**
     *Calledwhenclickingontheheader.Stoppropagationofeventtoprevent
     *closingthedialog.
     *
     *@private
     *@param{MouseEvent}ev
     */
    _onClickHeader(ev){
        ev.stopPropagation();
    }

    /**
     *Calledwhenclickingonimage.Stoppropagationofeventtoprevent
     *closingthedialog.
     *
     *@private
     *@param{MouseEvent}ev
     */
    _onClickImage(ev){
        if(this._isDragging){
            return;
        }
        ev.stopPropagation();
    }

    /**
     *Calledwhenclickingonnexticon.
     *
     *@private
     *@param{MouseEvent}ev
     */
    _onClickNext(ev){
        ev.stopPropagation();
        this._next();
    }

    /**
     *Calledwhenclickingonpreviousicon.
     *
     *@private
     *@param{MouseEvent}ev
     */
    _onClickPrevious(ev){
        ev.stopPropagation();
        this._previous();
    }

    /**
     *Calledwhenclickingonprinticon.
     *
     *@private
     *@param{MouseEvent}ev
     */
    _onClickPrint(ev){
        ev.stopPropagation();
        this._print();
    }

    /**
     *Calledwhenclickingonrotateicon.
     *
     *@private
     *@param{MouseEvent}ev
     */
    _onClickRotate(ev){
        ev.stopPropagation();
        this._rotate();
    }

    /**
     *Calledwhenclickingonembedvideoplayer.Stoppropagationtoprevent
     *closingthedialog.
     *
     *@private
     *@param{MouseEvent}ev
     */
    _onClickVideo(ev){
        ev.stopPropagation();
    }

    /**
     *Calledwhenclickingonzoominicon.
     *
     *@private
     *@param{MouseEvent}ev
     */
    _onClickZoomIn(ev){
        ev.stopPropagation();
        this._zoomIn();
    }

    /**
     *Calledwhenclickingonzoomouticon.
     *
     *@private
     *@param{MouseEvent}ev
     */
    _onClickZoomOut(ev){
        ev.stopPropagation();
        this._zoomOut();
    }

    /**
     *Calledwhenclickingonresetzoomicon.
     *
     *@private
     *@param{MouseEvent}ev
     */
    _onClickZoomReset(ev){
        ev.stopPropagation();
        this._zoomReset();
    }

    /**
     *@private
     *@param{KeyboardEvent}ev
     */
    _onKeydown(ev){
        switch(ev.key){
            case'ArrowRight':
                this._next();
                break;
            case'ArrowLeft':
                this._previous();
                break;
            case'Escape':
                this._close();
                break;
            case'q':
                this._close();
                break;
            case'r':
                this._rotate();
                break;
            case'+':
                this._zoomIn();
                break;
            case'-':
                this._zoomOut();
                break;
            case'0':
                this._zoomReset();
                break;
            default:
                return;
        }
        ev.stopPropagation();
    }

    /**
     *Calledwhennewimagehasbeenloaded
     *
     *@private
     *@param{Event}ev
     */
    _onLoadImage(ev){
        ev.stopPropagation();
        this.attachmentViewer.update({isImageLoading:false});
    }

    /**
     *@private
     *@param{DragEvent}ev
     */
    _onMousedownImage(ev){
        if(this._isDragging){
            return;
        }
        if(ev.button!==0){
            return;
        }
        ev.stopPropagation();
        this._isDragging=true;
        this._dragstartX=ev.clientX;
        this._dragstartY=ev.clientY;
    }

    /**
     *@private
     *@param{DragEvent}
     */
    _onMousemoveView(ev){
        if(!this._isDragging){
            return;
        }
        this._translate.dx=ev.clientX-this._dragstartX;
        this._translate.dy=ev.clientY-this._dragstartY;
        this._updateZoomerStyle();
    }

    /**
     *@private
     *@param{Event}ev
     */
    _onWheelImage(ev){
        ev.stopPropagation();
        if(!this.el){
            return;
        }
        if(ev.deltaY>0){
            this._zoomOut({scroll:true});
        }else{
            this._zoomIn({scroll:true});
        }
    }

}

Object.assign(AttachmentViewer,{
    props:{
        localId:String,
    },
    template:'mail.AttachmentViewer',
});

QWeb.registerComponent('AttachmentViewer',AttachmentViewer);

returnAttachmentViewer;

});
