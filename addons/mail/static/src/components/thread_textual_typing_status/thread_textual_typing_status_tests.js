flectra.define('mail/static/src/components/thread_textual_typing_status/thread_textual_typing_status_tests.js',function(require){
'usestrict';

constcomponents={
    ThreadTextualTypingStatus:require('mail/static/src/components/thread_textual_typing_status/thread_textual_typing_status.js'),
};
const{
    afterEach,
    afterNextRender,
    beforeEach,
    createRootComponent,
    nextAnimationFrame,
    start,
}=require('mail/static/src/utils/test_utils.js');

QUnit.module('mail',{},function(){
QUnit.module('components',{},function(){
QUnit.module('thread_textual_typing_status',{},function(){
QUnit.module('thread_textual_typing_status_tests.js',{
    beforeEach(){
        beforeEach(this);

        this.createThreadTextualTypingStatusComponent=asyncthread=>{
            awaitcreateRootComponent(this,components.ThreadTextualTypingStatus,{
                props:{threadLocalId:thread.localId},
                target:this.widget.el,
            });
        };

        this.start=asyncparams=>{
            const{env,widget}=awaitstart(Object.assign({},params,{
                data:this.data,
            }));
            this.env=env;
            this.widget=widget;
        };
    },
    asyncafterEach(){
        afterEach(this);
    },
});

QUnit.test('receiveothermembertypingstatus"istyping"',asyncfunction(assert){
    assert.expect(2);

    this.data['res.partner'].records.push({id:17,name:'Demo'});
    this.data['mail.channel'].records.push({
        id:20,
        members:[this.data.currentPartnerId,17],
    });
    awaitthis.start();
    constthread=this.env.models['mail.thread'].findFromIdentifyingData({
        id:20,
        model:'mail.channel',
    });
    awaitthis.createThreadTextualTypingStatusComponent(thread);

    assert.strictEqual(
        document.querySelector('.o_ThreadTextualTypingStatus').textContent,
        "",
        "Shoulddisplaynooneiscurrentlytyping"
    );

    //simulatereceivetypingnotificationfromdemo
    awaitafterNextRender(()=>{
        consttypingData={
            info:'typing_status',
            is_typing:true,
            partner_id:17,
            partner_name:"Demo",
        };
        constnotification=[[false,'mail.channel',20],typingData];
        this.widget.call('bus_service','trigger','notification',[notification]);
    });
    assert.strictEqual(
        document.querySelector('.o_ThreadTextualTypingStatus').textContent,
        "Demoistyping...",
        "Shoulddisplaythatdemouseristyping"
    );
});

QUnit.test('receiveothermembertypingstatus"istyping"then"nolongeristyping"',asyncfunction(assert){
    assert.expect(3);

    this.data['res.partner'].records.push({id:17,name:'Demo'});
    this.data['mail.channel'].records.push({
        id:20,
        members:[this.data.currentPartnerId,17],
    });
    awaitthis.start();
    constthread=this.env.models['mail.thread'].findFromIdentifyingData({
        id:20,
        model:'mail.channel',
    });
    awaitthis.createThreadTextualTypingStatusComponent(thread);

    assert.strictEqual(
        document.querySelector('.o_ThreadTextualTypingStatus').textContent,
        "",
        "Shoulddisplaynooneiscurrentlytyping"
    );

    //simulatereceivetypingnotificationfromdemo"istyping"
    awaitafterNextRender(()=>{
        consttypingData={
            info:'typing_status',
            is_typing:true,
            partner_id:17,
            partner_name:"Demo",
        };
        constnotification=[[false,'mail.channel',20],typingData];
        this.widget.call('bus_service','trigger','notification',[notification]);
    });
    assert.strictEqual(
        document.querySelector('.o_ThreadTextualTypingStatus').textContent,
        "Demoistyping...",
        "Shoulddisplaythatdemouseristyping"
    );

    //simulatereceivetypingnotificationfromdemo"isnolongertyping"
    awaitafterNextRender(()=>{
        consttypingData={
            info:'typing_status',
            is_typing:false,
            partner_id:17,
            partner_name:"Demo",
        };
        constnotification=[[false,'mail.channel',20],typingData];
        this.widget.call('bus_service','trigger','notification',[notification]);
    });
    assert.strictEqual(
        document.querySelector('.o_ThreadTextualTypingStatus').textContent,
        "",
        "Shouldnolongerdisplaythatdemouseristyping"
    );
});

QUnit.test('assumeothermembertypingstatusbecomes"nolongeristyping"after60secondswithoutanyupdatedtypingstatus',asyncfunction(assert){
    assert.expect(3);

    this.data['res.partner'].records.push({id:17,name:'Demo'});
    this.data['mail.channel'].records.push({
        id:20,
        members:[this.data.currentPartnerId,17],
    });
    awaitthis.start({
        hasTimeControl:true,
    });
    constthread=this.env.models['mail.thread'].findFromIdentifyingData({
        id:20,
        model:'mail.channel',
    });
    awaitthis.createThreadTextualTypingStatusComponent(thread);

    assert.strictEqual(
        document.querySelector('.o_ThreadTextualTypingStatus').textContent,
        "",
        "Shoulddisplaynooneiscurrentlytyping"
    );

    //simulatereceivetypingnotificationfromdemo"istyping"
    awaitafterNextRender(()=>{
        consttypingData={
            info:'typing_status',
            is_typing:true,
            partner_id:17,
            partner_name:"Demo",
        };
        constnotification=[[false,'mail.channel',20],typingData];
        this.widget.call('bus_service','trigger','notification',[notification]);
    });
    assert.strictEqual(
        document.querySelector('.o_ThreadTextualTypingStatus').textContent,
        "Demoistyping...",
        "Shoulddisplaythatdemouseristyping"
    );

    awaitafterNextRender(()=>this.env.testUtils.advanceTime(60*1000));
    assert.strictEqual(
        document.querySelector('.o_ThreadTextualTypingStatus').textContent,
        "",
        "Shouldnolongerdisplaythatdemouseristyping"
    );
});

QUnit.test('othermembertypingstatus"istyping"refreshes60secondstimerofassumingnolongertyping',asyncfunction(assert){
    assert.expect(4);

    this.data['res.partner'].records.push({id:17,name:'Demo'});
    this.data['mail.channel'].records.push({
        id:20,
        members:[this.data.currentPartnerId,17],
    });
    awaitthis.start({
        hasTimeControl:true,
    });
    constthread=this.env.models['mail.thread'].findFromIdentifyingData({
        id:20,
        model:'mail.channel',
    });
    awaitthis.createThreadTextualTypingStatusComponent(thread);

    assert.strictEqual(
        document.querySelector('.o_ThreadTextualTypingStatus').textContent,
        "",
        "Shoulddisplaynooneiscurrentlytyping"
    );

    //simulatereceivetypingnotificationfromdemo"istyping"
    awaitafterNextRender(()=>{
        consttypingData={
            info:'typing_status',
            is_typing:true,
            partner_id:17,
            partner_name:"Demo",
        };
        constnotification=[[false,'mail.channel',20],typingData];
        this.widget.call('bus_service','trigger','notification',[notification]);
    });
    assert.strictEqual(
        document.querySelector('.o_ThreadTextualTypingStatus').textContent,
        "Demoistyping...",
        "Shoulddisplaythatdemouseristyping"
    );

    //simulatereceivetypingnotificationfromdemo"istyping"againafter50s.
    awaitthis.env.testUtils.advanceTime(50*1000);
    consttypingData={
        info:'typing_status',
        is_typing:true,
        partner_id:17,
        partner_name:"Demo",
    };
    constnotification=[[false,'mail.channel',20],typingData];
    this.widget.call('bus_service','trigger','notification',[notification]);
    awaitthis.env.testUtils.advanceTime(50*1000);
    awaitnextAnimationFrame();
    assert.strictEqual(
        document.querySelector('.o_ThreadTextualTypingStatus').textContent,
        "Demoistyping...",
        "Shouldstilldisplaythatdemouseristypingafter100seconds(refreshedistypingstatusat50s=>(100-50)=50s<60safterassumingno-longertyping)"
    );

    awaitafterNextRender(()=>this.env.testUtils.advanceTime(11*1000));
    assert.strictEqual(
        document.querySelector('.o_ThreadTextualTypingStatus').textContent,
        "",
        "Shouldnolongerdisplaythatdemouseristypingafter111seconds(refreshedistypingstatusat50s=>(111-50)=61s>60safterassumingno-longertyping)"
    );
});

QUnit.test('receiveseveralothermemberstypingstatus"istyping"',asyncfunction(assert){
    assert.expect(6);

    this.data['res.partner'].records.push(
        {id:10,name:'Other10'},
        {id:11,name:'Other11'},
        {id:12,name:'Other12'}
    );
    this.data['mail.channel'].records.push({
        id:20,
        members:[this.data.currentPartnerId,10,11,12],
    });
    awaitthis.start();
    constthread=this.env.models['mail.thread'].findFromIdentifyingData({
        id:20,
        model:'mail.channel',
    });
    awaitthis.createThreadTextualTypingStatusComponent(thread);

    assert.strictEqual(
        document.querySelector('.o_ThreadTextualTypingStatus').textContent,
        "",
        "Shoulddisplaynooneiscurrentlytyping"
    );

    //simulatereceivetypingnotificationfromother10(istyping)
    awaitafterNextRender(()=>{
        consttypingData={
            info:'typing_status',
            is_typing:true,
            partner_id:10,
            partner_name:"Other10",
        };
        constnotification=[[false,'mail.channel',20],typingData];
        this.widget.call('bus_service','trigger','notification',[notification]);
    });
    assert.strictEqual(
        document.querySelector('.o_ThreadTextualTypingStatus').textContent,
        "Other10istyping...",
        "Shoulddisplaythat'Other10'memberistyping"
    );

    //simulatereceivetypingnotificationfromother11(istyping)
    awaitafterNextRender(()=>{
        consttypingData={
            info:'typing_status',
            is_typing:true,
            partner_id:11,
            partner_name:"Other11",
        };
        constnotification=[[false,'mail.channel',20],typingData];
        this.widget.call('bus_service','trigger','notification',[notification]);
    });
    assert.strictEqual(
        document.querySelector('.o_ThreadTextualTypingStatus').textContent,
        "Other10andOther11aretyping...",
        "Shoulddisplaythatmembers'Other10'and'Other11'aretyping(order:longertypernamedfirst)"
    );

    //simulatereceivetypingnotificationfromother12(istyping)
    awaitafterNextRender(()=>{
        consttypingData={
            info:'typing_status',
            is_typing:true,
            partner_id:12,
            partner_name:"Other12",
        };
        constnotification=[[false,'mail.channel',20],typingData];
        this.widget.call('bus_service','trigger','notification',[notification]);
    });
    assert.strictEqual(
        document.querySelector('.o_ThreadTextualTypingStatus').textContent,
        "Other10,Other11andmorearetyping...",
        "Shoulddisplaythatmembers'Other10','Other11'andmore(atleast1extramember)aretyping(order:longertypernamedfirst)"
    );

    //simulatereceivetypingnotificationfromother10(nolongeristyping)
    awaitafterNextRender(()=>{
        consttypingData={
            info:'typing_status',
            is_typing:false,
            partner_id:10,
            partner_name:"Other10",
        };
        constnotification=[[false,'mail.channel',20],typingData];
        this.widget.call('bus_service','trigger','notification',[notification]);
    });
    assert.strictEqual(
        document.querySelector('.o_ThreadTextualTypingStatus').textContent,
        "Other11andOther12aretyping...",
        "Shoulddisplaythatmembers'Other11'and'Other12'aretyping('Other10'stoppedtyping)"
    );

    //simulatereceivetypingnotificationfromother10(istypingagain)
    awaitafterNextRender(()=>{
        consttypingData={
            info:'typing_status',
            is_typing:true,
            partner_id:10,
            partner_name:"Other10",
        };
        constnotification=[[false,'mail.channel',20],typingData];
        this.widget.call('bus_service','trigger','notification',[notification]);
    });
    assert.strictEqual(
        document.querySelector('.o_ThreadTextualTypingStatus').textContent,
        "Other11,Other12andmorearetyping...",
        "Shoulddisplaythatmembers'Other11'and'Other12'andmore(atleast1extramember)aretyping(orderbylongertyper,'Other10'justrecentlyrestartedtyping)"
    );
});

});
});
});

});
