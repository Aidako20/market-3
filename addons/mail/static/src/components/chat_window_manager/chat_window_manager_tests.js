flectra.define('mail/static/src/components/chat_window_manager/chat_window_manager_tests.js',function(require){
'usestrict';

const{makeDeferred}=require('mail/static/src/utils/deferred/deferred.js');
const{
    afterEach,
    afterNextRender,
    beforeEach,
    isScrolledToBottom,
    nextAnimationFrame,
    start,
}=require('mail/static/src/utils/test_utils.js');

const{
    file:{createFile,inputFiles},
    dom:{triggerEvent},
}=require('web.test_utils');

QUnit.module('mail',{},function(){
QUnit.module('components',{},function(){
QUnit.module('chat_window_manager',{},function(){
QUnit.module('chat_window_manager_tests.js',{
    beforeEach(){
        beforeEach(this);

        this.start=asyncparams=>{
            const{afterEvent,env,widget}=awaitstart(Object.assign(
                {hasChatWindow:true,hasMessagingMenu:true},
                params,
                {data:this.data}
            ));
            this.debug=params&&params.debug;
            this.afterEvent=afterEvent;
            this.env=env;
            this.widget=widget;
        };

        /**
         *Simulatestheexternalbehaviours&DOMchangesimpliedbyhidinghomemenu.
         *Neededtoassertvalidityoftestsattechnicallevel(actualcodeofhomemenucouldnot
         *beusedinthesetests).
         */
        this.hideHomeMenu=async()=>{
            awaitthis.env.bus.trigger('will_hide_home_menu');
            awaitthis.env.bus.trigger('hide_home_menu');
        };

        /**
         *Simulatestheexternalbehaviours&DOMchangesimpliedbyshowinghomemenu.
         *Neededtoassertvalidityoftestsattechnicallevel(actualcodeofhomemenucouldnot
         *beusedinthesetests).
         */
        this.showHomeMenu=async()=>{
            awaitthis.env.bus.trigger('will_show_home_menu');
            const$frag=document.createDocumentFragment();
            //inrealcondition,chatwindowwillberemovedandputinafragmentthen
            //reinsertedintoDOM
            constselector=this.debug?'body':'#qunit-fixture';
            $(selector).contents().appendTo($frag);
            awaitthis.env.bus.trigger('show_home_menu');
            $(selector).append($frag);
        };
    },
    afterEach(){
        afterEach(this);
    },
});

QUnit.test('[technical]messagingnotcreated',asyncfunction(assert){
    /**
     *Creationofmessaginginenvisasyncduetogenerationofmodelsbeing
     *async.Generationofmodelsisasyncbecauseitrequiresparsingofall
     *JSmodulesthatcontainpiecesofmodeldefinitions.
     *
     *Timeofhavingnomessagingisveryshort,almostimperceptiblebyuser
     *onUI,butthedisplayshouldnotcrashduringthiscriticaltimeperiod.
     */
    assert.expect(2);

    constmessagingBeforeCreationDeferred=makeDeferred();
    awaitthis.start({
        messagingBeforeCreationDeferred,
        waitUntilMessagingCondition:'none',
    });
    assert.containsOnce(
        document.body,
        '.o_ChatWindowManager',
        "shouldhavechatwindowmanagerevenwhenmessagingisnotyetcreated"
    );

    //simulatemessagingbeingcreated
    messagingBeforeCreationDeferred.resolve();
    awaitnextAnimationFrame();

    assert.containsOnce(
        document.body,
        '.o_ChatWindowManager',
        "shouldstillcontainchatwindowmanageraftermessaginghasbeencreated"
    );
});

QUnit.test('initialmount',asyncfunction(assert){
    assert.expect(1);

    awaitthis.start();
    assert.containsOnce(
        document.body,
        '.o_ChatWindowManager',
        "shouldhavechatwindowmanager"
    );
});

QUnit.test('chatwindownewmessage:basicrendering',asyncfunction(assert){
    assert.expect(10);

    awaitthis.start();
    awaitafterNextRender(()=>
        document.querySelector(`.o_MessagingMenu_toggler`).click()
    );
    awaitafterNextRender(()=>
        document.querySelector(`.o_MessagingMenu_newMessageButton`).click()
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_ChatWindow`).length,
        1,
        "shouldhaveopenachatwindow"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_ChatWindow_header`).length,
        1,
        "shouldhaveaheader"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_ChatWindow_header.o_ChatWindowHeader_name`).length,
        1,
        "shouldhavenamepartinheader"
    );
    assert.strictEqual(
        document.querySelector(`.o_ChatWindow_header.o_ChatWindowHeader_name`).textContent,
        "Newmessage",
        "shoulddisplay'newmessage'intheheader"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_ChatWindow_header.o_ChatWindowHeader_command`).length,
        1,
        "shouldhave1commandinheader"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_ChatWindow_header.o_ChatWindowHeader_commandClose`).length,
        1,
        "shouldhavecommandtoclosechatwindow"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_ChatWindow_newMessageForm`).length,
        1,
        "shouldhaveanewmessagechatwindowcontainer"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_ChatWindow_newMessageFormLabel`).length,
        1,
        "shouldhaveapartinselectionwithlabel"
    );
    assert.strictEqual(
        document.querySelector(`.o_ChatWindow_newMessageFormLabel`).textContent.trim(),
        "To:",
        "shouldhavelabel'To:'inselection"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_ChatWindow_newMessageFormInput`).length,
        1,
        "shouldhaveaninputinselection"
    );
});

QUnit.test('chatwindownewmessage:focusedonopen',asyncfunction(assert){
    assert.expect(2);

    awaitthis.start();
    awaitafterNextRender(()=>
        document.querySelector(`.o_MessagingMenu_toggler`).click()
    );
    awaitafterNextRender(()=>
        document.querySelector(`.o_MessagingMenu_newMessageButton`).click()
    );
    assert.ok(
        document.querySelector(`.o_ChatWindow`).classList.contains('o-focused'),
        "chatwindowshouldbefocused"
    );
    assert.ok(
        document.activeElement,
        document.querySelector(`.o_ChatWindow_newMessageFormInput`),
        "chatwindowfocused=selectioninputfocused"
    );
});

QUnit.test('chatwindownewmessage:close',asyncfunction(assert){
    assert.expect(1);

    awaitthis.start();
    awaitafterNextRender(()=>
        document.querySelector(`.o_MessagingMenu_toggler`).click()
    );
    awaitafterNextRender(()=>
        document.querySelector(`.o_MessagingMenu_newMessageButton`).click()
    );
    awaitafterNextRender(()=>
        document.querySelector(`.o_ChatWindow_header.o_ChatWindowHeader_commandClose`).click()
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_ChatWindow`).length,
        0,
        "chatwindowshouldbeclosed"
    );
});

QUnit.test('chatwindownewmessage:fold',asyncfunction(assert){
    assert.expect(6);

    awaitthis.start();
    awaitafterNextRender(()=>document.querySelector(`.o_MessagingMenu_toggler`).click());
    awaitafterNextRender(()=>
        document.querySelector(`.o_MessagingMenu_newMessageButton`).click()
    );
    assert.doesNotHaveClass(
        document.querySelector(`.o_ChatWindow`),
        'o-folded',
        "chatwindowshouldnotbefoldedbydefault"
    );
    assert.containsOnce(
        document.body,
        '.o_ChatWindow_newMessageForm',
        "chatwindowshouldhavenewmessageform"
    );

    awaitafterNextRender(()=>document.querySelector(`.o_ChatWindow_header`).click());
    assert.hasClass(
        document.querySelector(`.o_ChatWindow`),
        'o-folded',
        "chatwindowshouldbecomefolded"
    );
    assert.containsNone(
        document.body,
        '.o_ChatWindow_newMessageForm',
        "chatwindowshouldnothavenewmessageform"
    );

    awaitafterNextRender(()=>document.querySelector(`.o_ChatWindow_header`).click());
    assert.doesNotHaveClass(
        document.querySelector(`.o_ChatWindow`),
        'o-folded',
        "chatwindowshouldbecomeunfolded"
    );
    assert.containsOnce(
        document.body,
        '.o_ChatWindow_newMessageForm',
        "chatwindowshouldhavenewmessageform"
    );
});

QUnit.test('openchatfrom"newmessage"chatwindowshouldopenchatinplaceofthis"newmessage"chatwindow',asyncfunction(assert){
    /**
     *InnerWithcomputationusesfollowinginfo:
     *([mocked]globalwindowwidth:@see`mail/static/src/utils/test_utils.js:start()`method)
     *(others:@seemail/static/src/models/chat_window_manager/chat_window_manager.js:visual)
     *
     *-chatwindowwidth:325px
     *-start/end/betweengapwidth:10px/10px/5px
     *-hiddenmenuwidth:200px
     *-globalwidth:1920px
     *
     *Enoughspacefor3visiblechatwindows:
     * 10+325+5+325+5+325+10=1000<1920
     */
    assert.expect(11);

    this.data['res.partner'].records.push({id:131,name:"Partner131"});
    this.data['res.users'].records.push({partner_id:131});
    this.data['mail.channel'].records.push(
        {is_minimized:true},
        {is_minimized:true},
    );
    constimSearchDef=makeDeferred();
    awaitthis.start({
        env:{
            browser:{
                innerWidth:1920,
            },
        },
        asyncmockRPC(route,args){
            constres=awaitthis._super(...arguments);
            if(args.method==='im_search'){
                imSearchDef.resolve();
            }
            returnres;
        }
    });
    assert.containsN(
        document.body,
        '.o_ChatWindow',
        2,
        "shouldhave2chatwindowsinitially"
    );
    assert.containsNone(
        document.body,
        '.o_ChatWindow.o-new-message',
        "shouldnothaveany'newmessage'chatwindowinitially"
    );

    //open"newmessage"chatwindow
    awaitafterNextRender(()=>
        document.querySelector(`.o_MessagingMenu_toggler`).click()
    );
    awaitafterNextRender(()=>
        document.querySelector(`.o_MessagingMenu_newMessageButton`).click()
    );
    assert.containsOnce(
        document.body,
        '.o_ChatWindow.o-new-message',
        "shouldhave'newmessage'chatwindowafterclicking'newmessage'inmessagingmenu"
    );
    assert.containsN(
        document.body,
        '.o_ChatWindow',
        3,
        "shouldhave3chatwindowafteropening'newmessage'chatwindow",
    );
    assert.containsOnce(
        document.body,
        '.o_ChatWindow_newMessageFormInput',
        "'newmessage'chatwindowshouldhavenewmessageforminput"
    );
    assert.hasClass(
        document.querySelector('.o_ChatWindow[data-visible-index="2"]'),
        'o-new-message',
        "'newmessage'chatwindowshouldbethelastchatwindowinitially",
    );

    awaitafterNextRender(()=>
        document.querySelector('.o_ChatWindow[data-visible-index="2"].o_ChatWindowHeader_commandShiftRight').click()
    );
    assert.hasClass(
        document.querySelector('.o_ChatWindow[data-visible-index="1"]'),
        'o-new-message',
        "'newmessage'chatwindowshouldhavemovedtothemiddleafterclickingshiftprevious",
    );

    //searchforauserin"newmessage"autocomplete
    document.execCommand('insertText',false,"131");
    document.querySelector(`.o_ChatWindow_newMessageFormInput`)
        .dispatchEvent(newwindow.KeyboardEvent('keydown'));
    document.querySelector(`.o_ChatWindow_newMessageFormInput`)
        .dispatchEvent(newwindow.KeyboardEvent('keyup'));
    //WaitforsearchRPCtoberesolved.Thefollowingawaitlinesare
    //necessarybecauseautocompleteisanexternallibthereforeitisnot
    //possibletouse`afterNextRender`.
    awaitimSearchDef;
    awaitnextAnimationFrame();
    constlink=document.querySelector('.ui-autocomplete.ui-menu-itema');
    assert.ok(
        link,
        "shouldhaveautocompletesuggestionaftertypingon'newmessage'input"
    );
    assert.strictEqual(
        link.textContent,
        "Partner131",
        "autocompletesuggestionshouldtargetthepartnermatchingsearchterm"
    );

    awaitafterNextRender(()=>link.click());
    assert.containsNone(
        document.body,
        '.o_ChatWindow.o-new-message',
        "shouldhaveremovedthe'newmessage'chatwindowafterselectingapartner"
    );
    assert.strictEqual(
        document.querySelector('.o_ChatWindow[data-visible-index="1"].o_ChatWindowHeader_name').textContent,
        "Partner131",
        "chatwindowwithselectedpartnershouldbeopenedinpositionwhere'newmessage'chatwindowwas,whichisinthemiddle"
    );
});

QUnit.test('newmessagechatwindowshouldcloseonselectingtheuserifchatwiththeuserisalreadyopen',asyncfunction(assert){
    assert.expect(2);

    this.data['res.partner'].records.push({id:131,name:"Partner131"});
    this.data['res.users'].records.push({id:12,partner_id:131});
    this.data['mail.channel'].records.push({
        channel_type:"chat",
        id:20,
        is_minimized:true,
        members:[this.data.currentPartnerId,131],
        name:"Partner131",
        public:'private',
        state:'open',
    });
    constimSearchDef=makeDeferred();
    awaitthis.start({
        asyncmockRPC(route,args){
            constres=awaitthis._super(...arguments);
            if(args.method==='im_search'){
                imSearchDef.resolve();
            }
            returnres;
        },
    });

    //open"newmessage"chatwindow
    awaitafterNextRender(()=>document.querySelector(`.o_MessagingMenu_toggler`).click());
    awaitafterNextRender(()=>document.querySelector(`.o_MessagingMenu_newMessageButton`).click());

    //searchforauserin"newmessage"autocomplete
    document.execCommand('insertText',false,"131");
    document.querySelector(`.o_ChatWindow_newMessageFormInput`)
        .dispatchEvent(newwindow.KeyboardEvent('keydown'));
    document.querySelector(`.o_ChatWindow_newMessageFormInput`)
        .dispatchEvent(newwindow.KeyboardEvent('keyup'));
    //WaitforsearchRPCtoberesolved.Thefollowingawaitlinesare
    //necessarybecauseautocompleteisanexternallibthereforeitisnot
    //possibletouse`afterNextRender`.
    awaitimSearchDef;
    awaitnextAnimationFrame();
    constlink=document.querySelector('.ui-autocomplete.ui-menu-itema');

    awaitafterNextRender(()=>link.click());
    assert.containsNone(
        document.body,
        '.o_ChatWindow_newMessageFormInput',
        "'newmessage'chatwindowshouldnotbethere"
    );
    assert.containsOnce(
        document.body,
        '.o_ChatWindow',
        "shouldhaveonlyonechatwindowafterselectinguserwhosechatisalreadyopen",
    );
});

QUnit.test('newmessageautocompleteshouldautomaticallyselectfirstresult',asyncfunction(assert){
    assert.expect(1);

    this.data['res.partner'].records.push({id:131,name:"Partner131"});
    this.data['res.users'].records.push({partner_id:131});
    constimSearchDef=makeDeferred();
    awaitthis.start({
        asyncmockRPC(route,args){
            constres=awaitthis._super(...arguments);
            if(args.method==='im_search'){
                imSearchDef.resolve();
            }
            returnres;
        },
    });

    //open"newmessage"chatwindow
    awaitafterNextRender(()=>
        document.querySelector(`.o_MessagingMenu_toggler`).click()
    );
    awaitafterNextRender(()=>
        document.querySelector(`.o_MessagingMenu_newMessageButton`).click()
    );

    //searchforauserin"newmessage"autocomplete
    document.execCommand('insertText',false,"131");
    document.querySelector(`.o_ChatWindow_newMessageFormInput`)
        .dispatchEvent(newwindow.KeyboardEvent('keydown'));
    document.querySelector(`.o_ChatWindow_newMessageFormInput`)
        .dispatchEvent(newwindow.KeyboardEvent('keyup'));
    //WaitforsearchRPCtoberesolved.Thefollowingawaitlinesare
    //necessarybecauseautocompleteisanexternallibthereforeitisnot
    //possibletouse`afterNextRender`.
    awaitimSearchDef;
    awaitnextAnimationFrame();
    assert.hasClass(
        document.querySelector('.ui-autocomplete.ui-menu-itema'),
        'ui-state-active',
        "firstautocompleteresultshouldbeautomaticallyselected",
    );
});

QUnit.test('chatwindow:basicrendering',asyncfunction(assert){
    assert.expect(11);

    //channelthatisexpectedtobefoundinthemessagingmenu
    //withrandomuniqueidandnamethatwillbeassertedduringthetest
    this.data['mail.channel'].records.push({id:20,name:"General"});
    awaitthis.start();

    awaitafterNextRender(()=>
        document.querySelector(`.o_MessagingMenu_toggler`).click()
    );
    awaitafterNextRender(()=>
        document.querySelector(`.o_NotificationList_preview`).click()
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_ChatWindow`).length,
        1,
        "shouldhaveopenachatwindow"
    );
    constchatWindow=document.querySelector(`.o_ChatWindow`);
    assert.strictEqual(
        chatWindow.dataset.threadLocalId,
        this.env.models['mail.thread'].findFromIdentifyingData({
            id:20,
            model:'mail.channel',
        }).localId,
        "shouldhaveopenachatwindowofchannel"
    );
    assert.strictEqual(
        chatWindow.querySelectorAll(`:scope.o_ChatWindow_header`).length,
        1,
        "shouldhaveheaderpart"
    );
    constchatWindowHeader=chatWindow.querySelector(`:scope.o_ChatWindow_header`);
    assert.strictEqual(
        chatWindowHeader.querySelectorAll(`:scope.o_ThreadIcon`).length,
        1,
        "shouldhavethreadiconinheaderpart"
    );
    assert.strictEqual(
        chatWindowHeader.querySelectorAll(`:scope.o_ChatWindowHeader_name`).length,
        1,
        "shouldhavethreadnameinheaderpart"
    );
    assert.strictEqual(
        chatWindowHeader.querySelector(`:scope.o_ChatWindowHeader_name`).textContent,
        "General",
        "shouldhavecorrectthreadnameinheaderpart"
    );
    assert.strictEqual(
        chatWindowHeader.querySelectorAll(`:scope.o_ChatWindowHeader_command`).length,
        2,
        "shouldhave2commandsinheaderpart"
    );
    assert.strictEqual(
        chatWindowHeader.querySelectorAll(`:scope.o_ChatWindowHeader_commandExpand`).length,
        1,
        "shouldhavecommandtoexpandthreadindiscuss"
    );
    assert.strictEqual(
        chatWindowHeader.querySelectorAll(`:scope.o_ChatWindowHeader_commandClose`).length,
        1,
        "shouldhavecommandtoclosechatwindow"
    );
    assert.strictEqual(
        chatWindow.querySelectorAll(`:scope.o_ChatWindow_thread`).length,
        1,
        "shouldhaveparttodisplaythreadcontentinsidechatwindow"
    );
    assert.ok(
        chatWindow.querySelector(`:scope.o_ChatWindow_thread`).classList.contains('o_ThreadView'),
        "threadpartshouldusecomponentThreadView"
    );
});

QUnit.test('chatwindow:fold',asyncfunction(assert){
    assert.expect(9);

    //channelthatisexpectedtobefoundinthemessagingmenu
    //withrandomUUID,willbeassertedduringthetest
    this.data['mail.channel'].records.push({uuid:'channel-uuid'});
    awaitthis.start({
        mockRPC(route,args){
            if(args.method==='channel_fold'){
                assert.step(`rpc:${args.method}/${args.kwargs.state}`);
            }
            returnthis._super(...arguments);
        },
    });
    //OpenThread
    awaitafterNextRender(()=>document.querySelector(`.o_MessagingMenu_toggler`).click());
    awaitafterNextRender(()=>
        document.querySelector(`.o_MessagingMenu_dropdownMenu.o_NotificationList_preview`).click()
    );
    assert.containsOnce(
        document.body,
        '.o_ChatWindow_thread',
        "chatwindowshouldhaveathread"
    );
    assert.verifySteps(
        ['rpc:channel_fold/open'],
        "shouldsyncfoldstate'open'withserverafteropeningchatwindow"
    );

    //Foldchatwindow
    awaitafterNextRender(()=>document.querySelector(`.o_ChatWindow_header`).click());
    assert.verifySteps(
        ['rpc:channel_fold/folded'],
        "shouldsyncfoldstate'folded'withserverafterfoldingchatwindow"
    );
    assert.containsNone(
        document.body,
        '.o_ChatWindow_thread',
        "chatwindowshouldnothaveanythread"
    );

    //Unfoldchatwindow
    awaitafterNextRender(()=>document.querySelector(`.o_ChatWindow_header`).click());
    assert.verifySteps(
        ['rpc:channel_fold/open'],
        "shouldsyncfoldstate'open'withserverafterunfoldingchatwindow"
    );
    assert.containsOnce(
        document.body,
        '.o_ChatWindow_thread',
        "chatwindowshouldhaveathread"
    );
});

QUnit.test('chatwindow:open/close',asyncfunction(assert){
    assert.expect(10);

    //channelthatisexpectedtobefoundinthemessagingmenu
    //withrandomUUID,willbeassertedduringthetest
    this.data['mail.channel'].records.push({uuid:'channel-uuid'});
    awaitthis.start({
        mockRPC(route,args){
            if(args.method==='channel_fold'){
                assert.step(`rpc:channel_fold/${args.kwargs.state}`);
            }
            returnthis._super(...arguments);
        },
    });
    assert.containsNone(
        document.body,
        '.o_ChatWindow',
        "shouldnothaveachatwindowinitially"
    );
    awaitafterNextRender(()=>document.querySelector(`.o_MessagingMenu_toggler`).click());
    awaitafterNextRender(()=>
        document.querySelector(`.o_MessagingMenu_dropdownMenu.o_NotificationList_preview`).click()
    );
    assert.containsOnce(
        document.body,
        '.o_ChatWindow',
        "shouldhaveachatwindowafterclickingonthreadpreview"
    );
    assert.verifySteps(
        ['rpc:channel_fold/open'],
        "shouldsyncfoldstate'open'withserverafteropeningchatwindow"
    );

    //Closechatwindow
    awaitafterNextRender(()=>document.querySelector(`.o_ChatWindowHeader_commandClose`).click());
    assert.containsNone(
        document.body,
        '.o_ChatWindow',
        "shouldnothaveachatwindowafterclosingit"
    );
    assert.verifySteps(
        ['rpc:channel_fold/closed'],
        "shouldsyncfoldstate'closed'withserverafterclosingchatwindow"
    );

    //Reopenchatwindow
    awaitafterNextRender(()=>document.querySelector(`.o_MessagingMenu_toggler`).click());
    awaitafterNextRender(()=>
        document.querySelector(`.o_MessagingMenu_dropdownMenu.o_NotificationList_preview`).click()
    );
    assert.containsOnce(
        document.body,
        '.o_ChatWindow',
        "shouldhaveachatwindowagainafterclickingonthreadpreviewagain"
    );
    assert.verifySteps(
        ['rpc:channel_fold/open'],
        "shouldsyncfoldstate'open'withserverafteropeningchatwindowagain"
    );
});

QUnit.test('Mobile:openingachatwindowshouldnotupdatechannelstateontheserver',asyncfunction(assert){
    assert.expect(2);

    this.data['mail.channel'].records.push({
        id:20,
        state:'closed',
    });
    awaitthis.start({
        env:{
            device:{
                isMobile:true,
            },
        },
    });
    awaitafterNextRender(()=>document.querySelector(`.o_MessagingMenu_toggler`).click());
    awaitafterNextRender(()=>document.querySelector(`.o_NotificationList_preview`).click());
    assert.containsOnce(
        document.body,
        '.o_ChatWindow',
        "shouldhaveachatwindowafterclickingonthreadpreview"
    );
    constchannels=awaitthis.env.services.rpc({
        model:'mail.channel',
        method:'read',
        args:[20],
    },{shadow:true});
    assert.strictEqual(
        channels[0].state,
        'closed',
        'openingachatwindowinmobileshouldnotupdatechannelstateontheserver',
    );
});

QUnit.test('Mobile:closingachatwindowshouldnotupdatechannelstateontheserver',asyncfunction(assert){
    assert.expect(3);

    this.data['mail.channel'].records.push({
        id:20,
        state:'open',
    });
    awaitthis.start({
        env:{
            device:{
                isMobile:true,
            },
        },
    });
    awaitafterNextRender(()=>document.querySelector(`.o_MessagingMenu_toggler`).click());
    awaitafterNextRender(()=>document.querySelector(`.o_NotificationList_preview`).click());
    assert.containsOnce(
        document.body,
        '.o_ChatWindow',
        "shouldhaveachatwindowafterclickingonthreadpreview"
    );
    //Closechatwindow
    awaitafterNextRender(()=>document.querySelector(`.o_ChatWindowHeader_commandClose`).click());
    assert.containsNone(
        document.body,
        '.o_ChatWindow',
        "shouldnothaveachatwindowafterclosingit"
    );
    constchannels=awaitthis.env.services.rpc({
        model:'mail.channel',
        method:'read',
        args:[20],
    },{shadow:true});
    assert.strictEqual(
        channels[0].state,
        'open',
        'closingthechatwindowshouldnotupdatechannelstateontheserver',
    );
});

QUnit.test("Mobile:chatwindowshouldn'topenautomaticallyafterreceivinganewmessage",asyncfunction(assert){
    assert.expect(1);

    this.data['res.partner'].records.push({id:10,name:"Demo"});
    this.data['res.users'].records.push({
        id:42,
        partner_id:10,
    });
    this.data['mail.channel'].records=[
        {
            channel_type:"chat",
            id:10,
            members:[this.data.currentPartnerId,10],
            uuid:'channel-10-uuid',
        },
    ];
    awaitthis.start({
        env:{
            device:{
                isMobile:true,
            },
        },
    });

    //simulatereceivingamessage
    awaitafterNextRender(()=>this.env.services.rpc({
        route:'/mail/chat_post',
        params:{
            context:{
                mockedUserId:42,
            },
            message_content:"hu",
            uuid:'channel-10-uuid',
        },
    }));
    assert.containsNone(
        document.body,
        '.o_ChatWindow',
        "Onmobile,thechatwindowshouldn'topenautomaticallyafterreceivinganewmessage"
    );
});

QUnit.test('chatwindow:closeonESCAPE',asyncfunction(assert){
    assert.expect(10);

    //expectedpartnertobefoundbymentionduringthetest
    this.data['res.partner'].records.push({name:"TestPartner"});
    //achatwindowwiththreadisexpectedtobeinitiallyopenforthistest
    this.data['mail.channel'].records.push({is_minimized:true});
    awaitthis.start({
        mockRPC(route,args){
            if(args.method==='channel_fold'){
                assert.step(`rpc:channel_fold/${args.kwargs.state}`);
            }
            returnthis._super(...arguments);
        },
    });
    assert.containsOnce(
        document.body,
        '.o_ChatWindow',
        "chatwindowshouldbeopenedinitially"
    );

    awaitafterNextRender(()=>
        document.querySelector(`.o_Composer_buttonEmojis`).click()
    );
    assert.containsOnce(
        document.body,
        '.o_EmojisPopover',
        "emojispopovershouldbeopenedafterclickonemojisbutton"
    );

    awaitafterNextRender(()=>{
        constev=newwindow.KeyboardEvent('keydown',{bubbles:true,key:"Escape"});
        document.querySelector(`.o_Composer_buttonEmojis`).dispatchEvent(ev);
    });
    assert.containsNone(
        document.body,
        '.o_EmojisPopover',
        "emojispopovershouldbeclosedafterpressingescapeonemojisbutton"
    );
    assert.containsOnce(
        document.body,
        '.o_ChatWindow',
        "chatwindowshouldstillbeopenedafterpressingescapeonemojisbutton"
    );

    awaitafterNextRender(()=>{
        document.querySelector(`.o_ComposerTextInput_textarea`).focus();
        document.execCommand('insertText',false,"@");
        document.querySelector(`.o_ComposerTextInput_textarea`)
            .dispatchEvent(newwindow.KeyboardEvent('keydown'));
        document.querySelector(`.o_ComposerTextInput_textarea`)
            .dispatchEvent(newwindow.KeyboardEvent('keyup'));
    });
    assert.hasClass(
        document.querySelector('.o_ComposerSuggestionList_list'),
        'show',
        "shoulddisplaymentionsuggestionsontyping'@'"
    );

    awaitafterNextRender(()=>{
        constev=newwindow.KeyboardEvent('keydown',{bubbles:true,key:"Escape"});
        document.querySelector(`.o_ComposerTextInput_textarea`).dispatchEvent(ev);
    });
    assert.containsNone(
        document.body,
        '.o_ComposerSuggestionList_list',
        "mentionsuggestionshouldbeclosedafterpressingescapeonmentionsuggestion"
    );
    assert.containsOnce(
        document.body,
        '.o_ChatWindow',
        "chatwindowshouldstillbeopenedafterpressingescapeonmentionsuggestion"
    );

    awaitafterNextRender(()=>{
        constev=newwindow.KeyboardEvent('keydown',{bubbles:true,key:"Escape"});
        document.querySelector(`.o_ComposerTextInput_textarea`).dispatchEvent(ev);
    });
    assert.containsNone(
        document.body,
        '.o_ChatWindow',
        "chatwindowshouldbeclosedafterpressingescapeiftherewasnootherpriorityescapehandler"
    );
    assert.verifySteps(['rpc:channel_fold/closed']);
});

QUnit.test('focusnextvisiblechatwindowwhenclosingcurrentchatwindowwithESCAPE',asyncfunction(assert){
    /**
     *computationusesfollowinginfo:
     *([mocked]globalwindowwidth:@see`mail/static/src/utils/test_utils.js:start()`method)
     *(others:@seemail/static/src/models/chat_window_manager/chat_window_manager.js:visual)
     *
     *-chatwindowwidth:325px
     *-start/end/betweengapwidth:10px/10px/5px
     *-hiddenmenuwidth:200px
     *-globalwidth:1920px
     *
     *Enoughspacefor2visiblechatwindows:
     * 10+325+5+325+10=670<1920
     */
    assert.expect(4);

    //2chatwindowswiththreadareexpectedtobeinitiallyopenforthistest
    this.data['mail.channel'].records.push(
        {is_minimized:true,state:'open'},
        {is_minimized:true,state:'open'}
    );
    awaitthis.start({
        env:{
            browser:{
                innerWidth:1920,
            },
        },
    });
    assert.containsN(
        document.body,
        '.o_ChatWindow.o_ComposerTextInput_textarea',
        2,
        "2chatwindowsshouldbepresentinitially"
    );
    assert.containsNone(
        document.body,
        '.o_ChatWindow.o-folded',
        "bothchatwindowsshouldbeopen"
    );

    awaitafterNextRender(()=>{
        constev=newwindow.KeyboardEvent('keydown',{bubbles:true,key:'Escape'});
        document.querySelector('.o_ComposerTextInput_textarea').dispatchEvent(ev);
    });
    assert.containsOnce(
        document.body,
        '.o_ChatWindow',
        "onlyonechatwindowshouldremainafterpressingescapeonfirstchatwindow"
    );
    assert.hasClass(
        document.querySelector('.o_ChatWindow'),
        'o-focused',
        "nextvisiblechatwindowshouldbefocusedafterpressingescapeonfirstchatwindow"
    );
});

QUnit.test('[technical]chatwindow:composerstateconservationontogglehomemenu',asyncfunction(assert){
    //technicalasshow/hidehomemenusimulationareinvolvedandhomemenuimplementation
    //haveside-effectsonDOMthatmaymakechatwindowcomponentsnotwork
    assert.expect(7);

    //channelthatisexpectedtobefoundinthemessagingmenu
    //withrandomuniqueidthatisneededtolinkmessages
    this.data['mail.channel'].records.push({id:20});
    awaitthis.start();
    awaitafterNextRender(()=>document.querySelector(`.o_MessagingMenu_toggler`).click());
    awaitafterNextRender(()=>
        document.querySelector(`.o_MessagingMenu_dropdownMenu.o_NotificationList_preview`).click()
    );
    //Setcontentofthecomposerofthechatwindow
    awaitafterNextRender(()=>{
        document.querySelector(`.o_ComposerTextInput_textarea`).focus();
        document.execCommand('insertText',false,'XDUforthewin!');
    });
    assert.containsNone(
        document.body,
        '.o_Composer.o_Attachment',
        "composershouldhavenoattachmentinitially"
    );
    //Setattachmentsofthecomposer
    constfiles=[
        awaitcreateFile({
            name:'textstateconservationontogglehomemenu.txt',
            content:'hello,world',
            contentType:'text/plain',
        }),
        awaitcreateFile({
            name:'text2stateconservationontogglehomemenu.txt',
            content:'hello,xduisdabestman',
            contentType:'text/plain',
        })
    ];
    awaitafterNextRender(()=>
        inputFiles(
            document.querySelector('.o_FileUploader_input'),
            files
        )
    );
    assert.strictEqual(
        document.querySelector(`.o_ComposerTextInput_textarea`).value,
        "XDUforthewin!",
        "chatwindowcomposerinitialtextinputshouldcontain'XDUforthewin!'"
    );
    assert.containsN(
        document.body,
        '.o_Composer.o_Attachment',
        2,
        "composershouldhave2totalattachmentsafteradding2attachments"
    );

    awaitthis.hideHomeMenu();
    assert.strictEqual(
        document.querySelector(`.o_ComposerTextInput_textarea`).value,
        "XDUforthewin!",
        "Chatwindowcomposershouldstillhavethesameinputafterhidinghomemenu"
    );
    assert.containsN(
        document.body,
        '.o_Composer.o_Attachment',
        2,
        "Chatwindowcomposershouldhave2attachmentsafterhidinghomemenu"
    );

    //Showhomemenu
    awaitthis.showHomeMenu();
    assert.strictEqual(
        document.querySelector(`.o_ComposerTextInput_textarea`).value,
        "XDUforthewin!",
        "chatwindowcomposershouldstillhavethesameinputshowinghomemenu"
    );
    assert.containsN(
        document.body,
        '.o_Composer.o_Attachment',
        2,
        "Chatwindowcomposershouldhave2attachmentsshowinghomemenu"
    );
});

QUnit.test('[technical]chatwindow:scrollconservationontogglehomemenu',asyncfunction(assert){
    //technicalasshow/hidehomemenusimulationareinvolvedandhomemenuimplementation
    //haveside-effectsonDOMthatmaymakechatwindowcomponentsnotwork
    assert.expect(2);

    this.data['mail.channel'].records.push({id:20});
    for(leti=0;i<10;i++){
        this.data['mail.message'].records.push({
            body:"notempty",
            channel_ids:[20],
        });
    }
    awaitthis.start();
    awaitafterNextRender(()=>document.querySelector(`.o_MessagingMenu_toggler`).click());
    awaitthis.afterEvent({
        eventName:'o-component-message-list-scrolled',
        func:()=>document.querySelector('.o_NotificationList_preview').click(),
        message:"shouldwaituntilchannel20scrolledtoitslastmessageafteropeningitfromthemessagingmenu",
        predicate:({scrollTop,thread})=>{
            constmessageList=document.querySelector('.o_ThreadView_messageList');
            return(
                thread&&
                thread.model==='mail.channel'&&
                thread.id===20&&
                isScrolledToBottom(messageList)
            );
        },
    });
    //Setascrollpositiontochatwindow
    awaitthis.afterEvent({
        eventName:'o-component-message-list-scrolled',
        func:()=>{
            document.querySelector(`.o_ThreadView_messageList`).scrollTop=142;
        },
        message:"shouldwaituntilchannel20scrolledto142aftersettingthisvaluemanually",
        predicate:({scrollTop,thread})=>{
            return(
                thread&&
                thread.model==='mail.channel'&&
                thread.id===20&&
                scrollTop===142
            );
        },
    });
    awaitafterNextRender(()=>this.hideHomeMenu());
    assert.strictEqual(
        document.querySelector(`.o_ThreadView_messageList`).scrollTop,
        142,
        "chatwindowscrollTopshouldstillbethesameafterhomemenuishidden"
    );

    awaitthis.afterEvent({
        eventName:'o-component-message-list-scrolled',
        func:()=>this.showHomeMenu(),
        message:"shouldwaituntilchannel20restoreditsscrollto142aftershowingthehomemenu",
        predicate:({scrollTop,thread})=>{
            return(
                thread&&
                thread.model==='mail.channel'&&
                thread.id===20&&
                scrollTop===142
            );
        },
    });
    assert.strictEqual(
        document.querySelector(`.o_ThreadView_messageList`).scrollTop,
        142,
        "chatwindowscrollTopshouldstillbethesameafterhomemenuisshown"
    );
});

QUnit.test('open2differentchatwindows:enoughscreenwidth[REQUIREFOCUS]',asyncfunction(assert){
    /**
     *computationusesfollowinginfo:
     *([mocked]globalwindowwidth:@see`mail/static/src/utils/test_utils.js:start()`method)
     *(others:@seemail/static/src/models/chat_window_manager/chat_window_manager.js:visual)
     *
     *-chatwindowwidth:325px
     *-start/end/betweengapwidth:10px/10px/5px
     *-hiddenmenuwidth:200px
     *-globalwidth:1920px
     *
     *Enoughspacefor2visiblechatwindows:
     * 10+325+5+325+10=670<1920
     */
    assert.expect(8);

    //2channelsareexpectedtobefoundinthemessagingmenu,eachwitha
    //randomuniqueidthatwillbereferencedinthetest
    this.data['mail.channel'].records.push({id:10},{id:20});
    awaitthis.start({
        env:{
            browser:{
                innerWidth:1920,//enoughtofitatleast2chatwindows
            },
        },
    });
    awaitafterNextRender(()=>document.querySelector(`.o_MessagingMenu_toggler`).click());
    awaitafterNextRender(()=>
        document.querySelector(`
            .o_MessagingMenu_dropdownMenu
            .o_NotificationList_preview[data-thread-local-id="${
                this.env.models['mail.thread'].findFromIdentifyingData({
                    id:10,
                    model:'mail.channel',
                }).localId
            }"]
        `).click()
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_ChatWindow`).length,
        1,
        "shouldhaveopenachatwindow"
    );
    assert.strictEqual(
        document.querySelectorAll(`
            .o_ChatWindow[data-thread-local-id="${
                this.env.models['mail.thread'].findFromIdentifyingData({
                    id:10,
                    model:'mail.channel',
                }).localId
            }"]
        `).length,
        1,
        "chatwindowofchatshouldbeopen"
    );
    assert.ok(
        document.querySelector(`
            .o_ChatWindow[data-thread-local-id="${
                this.env.models['mail.thread'].findFromIdentifyingData({
                    id:10,
                    model:'mail.channel',
                }).localId
            }"]
        `).classList.contains('o-focused'),
        "chatwindowofchatshouldhavefocus"
    );

    awaitafterNextRender(()=>document.querySelector(`.o_MessagingMenu_toggler`).click());
    awaitafterNextRender(()=>
        document.querySelector(`
            .o_MessagingMenu_dropdownMenu
            .o_NotificationList_preview[data-thread-local-id="${
                this.env.models['mail.thread'].findFromIdentifyingData({
                    id:20,
                    model:'mail.channel',
                }).localId
            }"]
        `).click()
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_ChatWindow`).length,
        2,
        "shouldhaveopenanewchatwindow"
    );
    assert.strictEqual(
        document.querySelectorAll(`
            .o_ChatWindow[data-thread-local-id="${
                this.env.models['mail.thread'].findFromIdentifyingData({
                    id:20,
                    model:'mail.channel',
                }).localId
            }"]
        `).length,
        1,
        "chatwindowofchannelshouldbeopen"
    );
    assert.strictEqual(
        document.querySelectorAll(`
            .o_ChatWindow[data-thread-local-id="${
                this.env.models['mail.thread'].findFromIdentifyingData({
                    id:10,
                    model:'mail.channel',
                }).localId
            }"]
        `).length,
        1,
        "chatwindowofchatshouldstillbeopen"
    );
    assert.ok(
        document.querySelector(`
            .o_ChatWindow[data-thread-local-id="${
                this.env.models['mail.thread'].findFromIdentifyingData({
                    id:20,
                    model:'mail.channel',
                }).localId
            }"]
        `).classList.contains('o-focused'),
        "chatwindowofchannelshouldhavefocus"
    );
    assert.notOk(
        document.querySelector(`
            .o_ChatWindow[data-thread-local-id="${
                this.env.models['mail.thread'].findFromIdentifyingData({
                    id:10,
                    model:'mail.channel',
                }).localId
            }"]
        `).classList.contains('o-focused'),
        "chatwindowofchatshouldnolongerhavefocus"
    );
});

QUnit.test('open2chatwindows:checkshiftoperationsareavailable',asyncfunction(assert){
    assert.expect(9);

    //2channelsareexpectedtobefoundinthemessagingmenu
    //onlytheirexistencematters,dataareirrelevant
    this.data['mail.channel'].records.push({},{});
    awaitthis.start();

    awaitafterNextRender(()=>{
        document.querySelector('.o_MessagingMenu_toggler').click();
    });
    awaitafterNextRender(()=>{
        document.querySelectorAll('.o_MessagingMenu_dropdownMenu.o_NotificationList_preview')[0].click();
    });
    awaitafterNextRender(()=>{
        document.querySelector('.o_MessagingMenu_toggler').click();
    });
    awaitafterNextRender(()=>{
        document.querySelectorAll('.o_MessagingMenu_dropdownMenu.o_NotificationList_preview')[1].click();
    });
    assert.containsN(
        document.body,
        '.o_ChatWindow',
        2,
        "shouldhaveopened2chatwindows"
    );
    assert.containsOnce(
        document.querySelectorAll('.o_ChatWindow')[0],
        '.o_ChatWindowHeader_commandShiftLeft',
        "firstchatwindowshouldbeallowedtoshiftleft"
    );
    assert.containsNone(
        document.querySelectorAll('.o_ChatWindow')[0],
        '.o_ChatWindowHeader_commandShiftRight',
        "firstchatwindowshouldnotbeallowedtoshiftright"
    );
    assert.containsNone(
        document.querySelectorAll('.o_ChatWindow')[1],
        '.o_ChatWindowHeader_commandShiftLeft',
        "secondchatwindowshouldnotbeallowedtoshiftleft"
    );
    assert.containsOnce(
        document.querySelectorAll('.o_ChatWindow')[1],
        '.o_ChatWindowHeader_commandShiftRight',
        "secondchatwindowshouldbeallowedtoshiftright"
    );

    constinitialFirstChatWindowThreadLocalId=
        document.querySelectorAll('.o_ChatWindow')[0].dataset.threadLocalId;
    constinitialSecondChatWindowThreadLocalId=
        document.querySelectorAll('.o_ChatWindow')[1].dataset.threadLocalId;
    awaitafterNextRender(()=>{
        document.querySelectorAll('.o_ChatWindow')[0]
            .querySelector(':scope.o_ChatWindowHeader_commandShiftLeft')
            .click();
    });
    assert.strictEqual(
        document.querySelectorAll('.o_ChatWindow')[0].dataset.threadLocalId,
        initialSecondChatWindowThreadLocalId,
        "Firstchatwindowshouldbesecondafterithasbeenshiftleft"
    );
    assert.strictEqual(
        document.querySelectorAll('.o_ChatWindow')[1].dataset.threadLocalId,
        initialFirstChatWindowThreadLocalId,
        "Secondchatwindowshouldbefirstafterthefirsthasbeenshiftedleft"
    );

    awaitafterNextRender(()=>{
        document.querySelectorAll('.o_ChatWindow')[1]
            .querySelector(':scope.o_ChatWindowHeader_commandShiftRight')
            .click();
    });
    assert.strictEqual(
        document.querySelectorAll('.o_ChatWindow')[0].dataset.threadLocalId,
        initialFirstChatWindowThreadLocalId,
        "Firstchatwindowshouldbebackatfirstplaceafterbeingshiftedleftthenright"
    );
    assert.strictEqual(
        document.querySelectorAll('.o_ChatWindow')[1].dataset.threadLocalId,
        initialSecondChatWindowThreadLocalId,
        "Secondchatwindowshouldbebackatsecondplaceafterfirstonehasbeenshiftedleftthenright"
    );
});

QUnit.test('open2foldedchatwindows:checkshiftoperationsareavailable',asyncfunction(assert){
    /**
     *computationusesfollowinginfo:
     *([mocked]globalwindowwidth:900px)
     *(others:@see`mail/static/src/models/chat_window_manager/chat_window_manager.js:visual`)
     *
     *-chatwindowwidth:325px
     *-start/end/betweengapwidth:10px/10px/5px
     *-globalwidth:900px
     *
     *2visiblechatwindows+hiddenmenu:
     * 10+325+5+325+10=675<900
     */
    assert.expect(13);

    this.data['res.partner'].records.push({id:7,name:"Demo"});
    constchannel={
        channel_type:"channel",
        is_minimized:true,
        is_pinned:true,
        state:'folded',
    };
    constchat={
        channel_type:"chat",
        is_minimized:true,
        is_pinned:true,
        members:[this.data.currentPartnerId,7],
        state:'folded',
    };
    this.data['mail.channel'].records.push(channel,chat);
    awaitthis.start({
        env:{
            browser:{
                innerWidth:900,
            },
        },
    });

    assert.containsN(
        document.body,
        '.o_ChatWindow',
        2,
        "shouldhaveopened2chatwindowsinitially"
    );
    assert.hasClass(
        document.querySelector('.o_ChatWindow[data-visible-index="0"]'),
        'o-folded',
        "firstchatwindowshouldbefolded"
    );
    assert.hasClass(
        document.querySelector('.o_ChatWindow[data-visible-index="1"]'),
        'o-folded',
        "secondchatwindowshouldbefolded"
    );
    assert.containsOnce(
        document.body,
        '.o_ChatWindow.o_ChatWindowHeader_commandShiftLeft',
        "thereshouldbeonlyonechatwindowallowedtoshiftlefteveniffolded"
    );
    assert.containsOnce(
        document.body,
        '.o_ChatWindow.o_ChatWindowHeader_commandShiftRight',
        "thereshouldbeonlyonechatwindowallowedtoshiftrighteveniffolded"
    );

    constinitialFirstChatWindowThreadLocalId=
        document.querySelector('.o_ChatWindow[data-visible-index="0"]').dataset.threadLocalId;
    constinitialSecondChatWindowThreadLocalId=
        document.querySelector('.o_ChatWindow[data-visible-index="1"]').dataset.threadLocalId;
    awaitafterNextRender(()=>
        document.querySelector('.o_ChatWindowHeader_commandShiftLeft').click()
    );
    assert.strictEqual(
        document.querySelector('.o_ChatWindow[data-visible-index="0"]').dataset.threadLocalId,
        initialSecondChatWindowThreadLocalId,
        "Firstchatwindowshouldbesecondafterithasbeenshiftleft"
    );
    assert.strictEqual(
        document.querySelector('.o_ChatWindow[data-visible-index="1"]').dataset.threadLocalId,
        initialFirstChatWindowThreadLocalId,
        "Secondchatwindowshouldbefirstafterthefirsthasbeenshiftedleft"
    );

    awaitafterNextRender(()=>
        document.querySelector('.o_ChatWindowHeader_commandShiftLeft').click()
    );
    assert.strictEqual(
        document.querySelector('.o_ChatWindow[data-visible-index="0"]').dataset.threadLocalId,
        initialFirstChatWindowThreadLocalId,
        "Firstchatwindowshouldbebackatfirstplace"
    );
    assert.strictEqual(
        document.querySelector('.o_ChatWindow[data-visible-index="1"]').dataset.threadLocalId,
        initialSecondChatWindowThreadLocalId,
        "Secondchatwindowshouldbebackatsecondplace"
    );

    awaitafterNextRender(()=>
        document.querySelector('.o_ChatWindowHeader_commandShiftRight').click()
    );
    assert.strictEqual(
        document.querySelector('.o_ChatWindow[data-visible-index="0"]').dataset.threadLocalId,
        initialSecondChatWindowThreadLocalId,
        "Firstchatwindowshouldbesecondafterithasbeenshiftright"
    );
    assert.strictEqual(
        document.querySelector('.o_ChatWindow[data-visible-index="1"]').dataset.threadLocalId,
        initialFirstChatWindowThreadLocalId,
        "Secondchatwindowshouldbefirstafterthefirsthasbeenshiftedright"
    );

    awaitafterNextRender(()=>
        document.querySelector('.o_ChatWindowHeader_commandShiftRight').click()
    );
    assert.strictEqual(
        document.querySelector('.o_ChatWindow[data-visible-index="0"]').dataset.threadLocalId,
        initialFirstChatWindowThreadLocalId,
        "Firstchatwindowshouldbebackatfirstplace"
    );
    assert.strictEqual(
        document.querySelector('.o_ChatWindow[data-visible-index="1"]').dataset.threadLocalId,
        initialSecondChatWindowThreadLocalId,
        "Secondchatwindowshouldbebackatsecondplace"
    );
});

QUnit.test('open3differentchatwindows:notenoughscreenwidth',asyncfunction(assert){
    /**
     *computationusesfollowinginfo:
     *([mocked]globalwindowwidth:900px)
     *(others:@see`mail/static/src/models/chat_window_manager/chat_window_manager.js:visual`)
     *
     *-chatwindowwidth:325px
     *-start/end/betweengapwidth:10px/10px/5px
     *-hiddenmenuwidth:200px
     *-globalwidth:1080px
     *
     *Enoughspacefor2visiblechatwindows,andonehiddenchatwindow:
     *3visiblechatwindows:
     * 10+325+5+325+5+325+10=1000<900
     *2visiblechatwindows+hiddenmenu:
     * 10+325+5+325+10+200+5=875<900
     */
    assert.expect(12);

    //3channelsareexpectedtobefoundinthemessagingmenu,eachwitha
    //randomuniqueidthatwillbereferencedinthetest
    this.data['mail.channel'].records.push({id:1},{id:2},{id:3});
    awaitthis.start({
        env:{
            browser:{
                innerWidth:900,//enoughtofit2chatwindowsbutnot3
            },
        },
    });

    //open,fromsystraymenu,chatwindowsofchannelswithId1,2,then3
    awaitafterNextRender(()=>
        document.querySelector(`.o_MessagingMenu_toggler`).click()
    );
    awaitafterNextRender(()=>
        document.querySelector(`
            .o_MessagingMenu_dropdownMenu
            .o_NotificationList_preview[data-thread-local-id="${
                this.env.models['mail.thread'].findFromIdentifyingData({
                    id:1,
                    model:'mail.channel',
                }).localId
            }"]
        `).click()
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_ChatWindow`).length,
        1,
        "shouldhaveopen1visiblechatwindow"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_ChatWindowManager_hiddenMenu`).length,
        0,
        "shouldnothavehiddenmenu"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_MessagingMenu_dropdownMenu`).length,
        0,
        "messagingmenushouldbehidden"
    );

    awaitafterNextRender(()=>
        document.querySelector(`.o_MessagingMenu_toggler`).click()
    );
    awaitafterNextRender(()=>
        document.querySelector(`
            .o_MessagingMenu_dropdownMenu
            .o_NotificationList_preview[data-thread-local-id="${
                this.env.models['mail.thread'].findFromIdentifyingData({
                    id:2,
                    model:'mail.channel',
                }).localId
            }"]
        `).click()
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_ChatWindow`).length,
        2,
        "shouldhaveopen2visiblechatwindows"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_ChatWindowManager_hiddenMenu`).length,
        0,
        "shouldnothavehiddenmenu"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_MessagingMenu_dropdownMenu`).length,
        0,
        "messagingmenushouldbehidden"
    );

    awaitafterNextRender(()=>
        document.querySelector(`.o_MessagingMenu_toggler`).click()
    );
    awaitafterNextRender(()=>
        document.querySelector(`
            .o_MessagingMenu_dropdownMenu
            .o_NotificationList_preview[data-thread-local-id="${
                this.env.models['mail.thread'].findFromIdentifyingData({
                    id:3,
                    model:'mail.channel',
                }).localId
            }"]
        `).click()
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_ChatWindow`).length,
        2,
        "shouldhaveopen2visiblechatwindows"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_ChatWindowManager_hiddenMenu`).length,
        1,
        "shouldhavehiddenmenu"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_MessagingMenu_dropdownMenu`).length,
        0,
        "messagingmenushouldbehidden"
    );
    assert.strictEqual(
        document.querySelectorAll(`
            .o_ChatWindow[data-thread-local-id="${
                this.env.models['mail.thread'].findFromIdentifyingData({
                    id:1,
                    model:'mail.channel',
                }).localId
            }"]
        `).length,
        1,
        "chatwindowofchannel1shouldbeopen"
    );
    assert.strictEqual(
        document.querySelectorAll(`
            .o_ChatWindow[data-thread-local-id="${
                this.env.models['mail.thread'].findFromIdentifyingData({
                    id:3,
                    model:'mail.channel',
                }).localId
            }"]
        `).length,
        1,
        "chatwindowofchannel3shouldbeopen"
    );
    assert.ok(
        document.querySelector(`
            .o_ChatWindow[data-thread-local-id="${
                this.env.models['mail.thread'].findFromIdentifyingData({
                    id:3,
                    model:'mail.channel',
                }).localId
            }"]
        `).classList.contains('o-focused'),
        "chatwindowofchannel3shouldhavefocus"
    );
});

QUnit.test('chatwindow:switchonTAB',asyncfunction(assert){
    assert.expect(10);

    //2channelsareexpectedtobefoundinthemessagingmenu
    //withrandomuniqueidandnamethatwillbeassertedduringthetest
    this.data['mail.channel'].records.push(
        {id:1,name:"channel1"},
        {id:2,name:"channel2"}
    );
    awaitthis.start();

    awaitafterNextRender(()=>
        document.querySelector(`.o_MessagingMenu_toggler`).click()
    );
    awaitafterNextRender(()=>
        document.querySelector(`
            .o_MessagingMenu_dropdownMenu
            .o_NotificationList_preview[data-thread-local-id="${
                this.env.models['mail.thread'].findFromIdentifyingData({
                    id:1,
                    model:'mail.channel',
                }).localId
            }"]`
        ).click()
    );

    assert.containsOnce(document.body,'.o_ChatWindow',"Only1chatWindowmustbeopened");
    constchatWindow=document.querySelector('.o_ChatWindow');
    assert.strictEqual(
        chatWindow.querySelector('.o_ChatWindowHeader_name').textContent,
        'channel1',
        "ThenameoftheonlychatWindowshouldbe'channel1'(channelwithID1)"
    );
    assert.strictEqual(
        chatWindow.querySelector('.o_ComposerTextInput_textarea'),
        document.activeElement,
        "ThechatWindowcomposermusthavefocus"
    );

    awaitafterNextRender(()=>
        triggerEvent(
            chatWindow.querySelector('.o_ChatWindow.o_ComposerTextInput_textarea'),
            'keydown',
            {key:'Tab'},
        )
    );
    assert.strictEqual(
        chatWindow.querySelector('.o_ChatWindow.o_ComposerTextInput_textarea'),
        document.activeElement,
        "ThechatWindowcomposerstillhasfocus"
    );

    awaitafterNextRender(()=>
        document.querySelector(`.o_MessagingMenu_toggler`).click()
    );
    awaitafterNextRender(()=>
        document.querySelector(`
            .o_MessagingMenu_dropdownMenu
            .o_NotificationList_preview[data-thread-local-id="${
                this.env.models['mail.thread'].findFromIdentifyingData({
                    id:2,
                    model:'mail.channel',
                }).localId
            }"]`
        ).click()
    );

    assert.containsN(document.body,'.o_ChatWindow',2,"2chatWindowsmustbeopened");
    constchatWindows=document.querySelectorAll('.o_ChatWindow');
    assert.strictEqual(
        chatWindows[0].querySelector('.o_ChatWindowHeader_name').textContent,
        'channel1',
        "Thenameofthe1stchatWindowshouldbe'channel1'(channelwithID1)"
    );
    assert.strictEqual(
        chatWindows[1].querySelector('.o_ChatWindowHeader_name').textContent,
        'channel2',
        "Thenameofthe2ndchatWindowshouldbe'channel2'(channelwithID2)"
    );
    assert.strictEqual(
        chatWindows[1].querySelector('.o_ComposerTextInput_textarea'),
        document.activeElement,
        "The2ndchatWindowcomposermusthavefocus(channelwithID2)"
    );

    awaitafterNextRender(()=>
        triggerEvent(
            chatWindows[1].querySelector('.o_ComposerTextInput_textarea'),
            'keydown',
            {key:'Tab'},
        )
    );
    assert.containsN(document.body,'.o_ChatWindow',2,"2chatWindowsshouldstillbeopened");
    assert.strictEqual(
        chatWindows[0].querySelector('.o_ComposerTextInput_textarea'),
        document.activeElement,
        "The1stchatWindowcomposermusthavefocus(channelwithID1)"
    );
});

QUnit.test('chatwindow:TABcyclewith3openchatwindows[REQUIREFOCUS]',asyncfunction(assert){
    /**
     *InnerWithcomputationusesfollowinginfo:
     *([mocked]globalwindowwidth:@see`mail/static/src/utils/test_utils.js:start()`method)
     *(others:@seemail/static/src/models/chat_window_manager/chat_window_manager.js:visual)
     *
     *-chatwindowwidth:325px
     *-start/end/betweengapwidth:10px/10px/5px
     *-hiddenmenuwidth:200px
     *-globalwidth:1920px
     *
     *Enoughspacefor3visiblechatwindows:
     * 10+325+5+325+5+325+10=1000<1920
     */
    assert.expect(6);

    this.data['mail.channel'].records.push(
        {
            is_minimized:true,
            is_pinned:true,
            state:'open',
        },
        {
            is_minimized:true,
            is_pinned:true,
            state:'open',
        },
        {
            is_minimized:true,
            is_pinned:true,
            state:'open',
        }
    );
    awaitthis.start({
        env:{
            browser:{
                innerWidth:1920,
            },
        },
    });
    assert.containsN(
        document.body,
        '.o_ChatWindow.o_ComposerTextInput_textarea',
        3,
        "initialy,3chatwindowsshouldbepresent"
    );
    assert.containsNone(
        document.body,
        '.o_ChatWindow.o-folded',
        "all3chatwindowsshouldbeopen"
    );

    awaitafterNextRender(()=>{
        document.querySelector(".o_ChatWindow[data-visible-index='2'].o_ComposerTextInput_textarea").focus();
    });
    assert.strictEqual(
        document.querySelector(".o_ChatWindow[data-visible-index='2'].o_ComposerTextInput_textarea"),
        document.activeElement,
        "ThechatWindowwithvisible-index2shouldhavethefocus"
    );

    awaitafterNextRender(()=>
        triggerEvent(
            document.querySelector(".o_ChatWindow[data-visible-index='2'].o_ComposerTextInput_textarea"),
            'keydown',
            {key:'Tab'},
        )
    );
    assert.strictEqual(
        document.querySelector(".o_ChatWindow[data-visible-index='1'].o_ComposerTextInput_textarea"),
        document.activeElement,
        "afterpressingtabonthechatWindowwithvisible-index2,thechatWindowwithvisible-index1shouldhavefocus"
    );

    awaitafterNextRender(()=>
        triggerEvent(
            document.querySelector(".o_ChatWindow[data-visible-index='1'].o_ComposerTextInput_textarea"),
            'keydown',
            {key:'Tab'},
        )
    );
    assert.strictEqual(
        document.querySelector(".o_ChatWindow[data-visible-index='0'].o_ComposerTextInput_textarea"),
        document.activeElement,
        "afterpressingtabonthechatwindowwithvisible-index1,thechatWindowwithvisible-index0shouldhavefocus"
    );

    awaitafterNextRender(()=>
        triggerEvent(
            document.querySelector(".o_ChatWindow[data-visible-index='0'].o_ComposerTextInput_textarea"),
            'keydown',
            {key:'Tab'},
        )
    );
    assert.strictEqual(
        document.querySelector(".o_ChatWindow[data-visible-index='2'].o_ComposerTextInput_textarea"),
        document.activeElement,
        "thechatWindowwithvisible-index2shouldhavethefocusafterpressingtabonthechatWindowwithvisible-index0"
    );
});

QUnit.test('chatwindowwithathread:keepscrollpositioninmessagelistonfolded',asyncfunction(assert){
    assert.expect(3);

    //channelthatisexpectedtobefoundinthemessagingmenu
    //witharandomuniqueid,neededtolinkmessages
    this.data['mail.channel'].records.push({id:20});
    for(leti=0;i<10;i++){
        this.data['mail.message'].records.push({
            body:"notempty",
            channel_ids:[20],
        });
    }
    awaitthis.start();
    awaitafterNextRender(()=>document.querySelector(`.o_MessagingMenu_toggler`).click());
    awaitthis.afterEvent({
        eventName:'o-component-message-list-scrolled',
        func:()=>document.querySelector('.o_NotificationList_preview').click(),
        message:"shouldwaituntilchannel20scrolledtoitslastmessageafteropeningitfromthemessagingmenu",
        predicate:({scrollTop,thread})=>{
            constmessageList=document.querySelector('.o_ThreadView_messageList');
            return(
                thread&&
                thread.model==='mail.channel'&&
                thread.id===20&&
                isScrolledToBottom(messageList)
            );
        },
    });
    //Setascrollpositiontochatwindow
    awaitthis.afterEvent({
        eventName:'o-component-message-list-scrolled',
        func:()=>{
            document.querySelector(`.o_ThreadView_messageList`).scrollTop=142;
        },
        message:"shouldwaituntilchannel20scrolledto142aftersettingthisvaluemanually",
        predicate:({scrollTop,thread})=>{
            return(
                thread&&
                thread.model==='mail.channel'&&
                thread.id===20&&
                scrollTop===142
            );
        },
    });
    assert.strictEqual(
        document.querySelector(`.o_ThreadView_messageList`).scrollTop,
        142,
        "verifychatwindowinitialscrollTop"
    );

    //foldchatwindow
    awaitafterNextRender(()=>document.querySelector('.o_ChatWindow_header').click());
    assert.containsNone(
        document.body,
        ".o_ThreadView",
        "chatwindowshouldbefoldedsonoThreadViewshouldbepresent"
    );

    //unfoldchatwindow
    awaitafterNextRender(()=>this.afterEvent({
        eventName:'o-component-message-list-scrolled',
        func:()=>document.querySelector('.o_ChatWindow_header').click(),
        message:"shouldwaituntilchannel20restoreditsscrollpositionto142",
        predicate:({scrollTop,thread})=>{
            return(
                thread&&
                thread.model==='mail.channel'&&
                thread.id===20&&
                scrollTop===142

            );
        },
    }));
    assert.strictEqual(
        document.querySelector(`.o_ThreadView_messageList`).scrollTop,
        142,
        "chatwindowscrollTopshouldstillbethesamewhenchatwindowisunfolded"
    );
});

QUnit.test('chatwindowshouldscrolltothenewlypostedmessagejustafterpostingit',asyncfunction(assert){
    assert.expect(1);

    this.data['mail.channel'].records.push({
        id:20,
        is_minimized:true,
        state:'open',
    });
    for(leti=0;i<10;i++){
        this.data['mail.message'].records.push({
            body:"notempty",
            channel_ids:[20],
        });
    }
    awaitthis.start();

    //Setcontentofthecomposerofthechatwindow
    awaitafterNextRender(()=>{
        document.querySelector('.o_ComposerTextInput_textarea').focus();
        document.execCommand('insertText',false,'WOLOLO');
    });
    //Sendanewmessageinthechatwindowtotriggerthescroll
    awaitafterNextRender(()=>
        triggerEvent(
            document.querySelector('.o_ChatWindow.o_ComposerTextInput_textarea'),
            'keydown',
            {key:'Enter'},
        )
    );
    constmessageList=document.querySelector('.o_MessageList');
    assert.ok(
        isScrolledToBottom(messageList),
        "chatwindowshouldscrolltothenewlypostedmessagejustafterpostingit"
    );
});

QUnit.test('chatwindow:postmessageonnon-mailingchannelwith"CTRL-Enter"keyboardshortcutforsmallscreensize',asyncfunction(assert){
    assert.expect(1);

    this.data['mail.channel'].records.push({
        id:20,
        is_minimized:true,
        mass_mailing:false,
    });
    awaitthis.start({
        env:{
            device:{
                isMobile:true,//hereisMobileisusedforthesmallscreensize,notactuallyforthemobiledevices
            },
        },
    });

    awaitafterNextRender(()=>document.querySelector(`.o_MessagingMenu_toggler`).click());
    awaitafterNextRender(()=>
        document.querySelector(`.o_MessagingMenu_dropdownMenu.o_NotificationList_preview`).click()
    );
    //insertsomeHTMLineditable
    awaitafterNextRender(()=>{
        document.querySelector(`.o_ComposerTextInput_textarea`).focus();
        document.execCommand('insertText',false,"Test");
    });
    awaitafterNextRender(()=>{
        constkevt=newwindow.KeyboardEvent('keydown',{ctrlKey:true,key:"Enter"});
        document.querySelector('.o_ComposerTextInput_textarea').dispatchEvent(kevt);
    });
    assert.containsOnce(
        document.body,
        '.o_Message',
        "shouldnowhavesinglemessageinchannelafterpostingmessagefrompressing'CTRL-Enter'intextinputofcomposerforsmallscreen"
    );
});

QUnit.test('[technical]chatwindow:composerstateconservationontogglehomemenuwhenfolded',asyncfunction(assert){
    //technicalasshow/hidehomemenusimulationareinvolvedandhomemenuimplementation
    //haveside-effectsonDOMthatmaymakechatwindowcomponentsnotwork
    assert.expect(6);

    //channelthatisexpectedtobefoundinthemessagingmenu
    //onlyitsexistencematters,dataareirrelevant
    this.data['mail.channel'].records.push({});
    awaitthis.start();
    awaitafterNextRender(()=>document.querySelector(`.o_MessagingMenu_toggler`).click());
    awaitafterNextRender(()=>
        document.querySelector(`.o_MessagingMenu_dropdownMenu.o_NotificationList_preview`).click()
    );
    //Setcontentofthecomposerofthechatwindow
    awaitafterNextRender(()=>{
        document.querySelector(`.o_ComposerTextInput_textarea`).focus();
        document.execCommand('insertText',false,'XDUforthewin!');
    });
    //Setattachmentsofthecomposer
    constfiles=[
        awaitcreateFile({
            name:'textstateconservationontogglehomemenu.txt',
            content:'hello,world',
            contentType:'text/plain',
        }),
        awaitcreateFile({
            name:'text2stateconservationontogglehomemenu.txt',
            content:'hello,xduisdabestman',
            contentType:'text/plain',
        })
    ];
    awaitafterNextRender(()=>
        inputFiles(
            document.querySelector('.o_FileUploader_input'),
            files
        )
    );
    assert.strictEqual(
        document.querySelector(`.o_ComposerTextInput_textarea`).value,
        "XDUforthewin!",
        "verifychatwindowcomposerinitialhtmlinput"
    );
    assert.containsN(
        document.body,
        '.o_Composer.o_Attachment',
        2,
        "verifychatwindowcomposerinitialattachmentcount"
    );

    //foldchatwindow
    awaitafterNextRender(()=>document.querySelector('.o_ChatWindow_header').click());
    awaitthis.hideHomeMenu();
    //unfoldchatwindow
    awaitafterNextRender(()=>document.querySelector('.o_ChatWindow_header').click());
    assert.strictEqual(
        document.querySelector(`.o_ComposerTextInput_textarea`).value,
        "XDUforthewin!",
        "Chatwindowcomposershouldstillhavethesameinputafterhidinghomemenu"
    );
    assert.containsN(
        document.body,
        '.o_Composer.o_Attachment',
        2,
        "Chatwindowcomposershouldhave2attachmentsafterhidinghomemenu"
    );

    //foldchatwindow
    awaitafterNextRender(()=>document.querySelector('.o_ChatWindow_header').click());
    awaitthis.showHomeMenu();
    //unfoldchatwindow
    awaitafterNextRender(()=>document.querySelector('.o_ChatWindow_header').click());
    assert.strictEqual(
        document.querySelector(`.o_ComposerTextInput_textarea`).value,
        "XDUforthewin!",
        "chatwindowcomposershouldstillhavethesameinputaftershowinghomemenu"
    );
    assert.containsN(
        document.body,
        '.o_Composer.o_Attachment',
        2,
        "Chatwindowcomposershouldhave2attachmentsaftershowinghomemenu"
    );
});

QUnit.test('[technical]chatwindowwithathread:keepscrollpositioninmessagelistontogglehomemenuwhenfolded',asyncfunction(assert){
    //technicalasshow/hidehomemenusimulationareinvolvedandhomemenuimplementation
    //haveside-effectsonDOMthatmaymakechatwindowcomponentsnotwork
    assert.expect(2);

    //channelthatisexpectedtobefoundinthemessagingmenu
    //withrandomuniqueid,neededtolinkmessages
    this.data['mail.channel'].records.push({id:20});
    for(leti=0;i<10;i++){
        this.data['mail.message'].records.push({
            body:"notempty",
            channel_ids:[20],
        });
    }
    awaitthis.start();
    awaitafterNextRender(()=>document.querySelector(`.o_MessagingMenu_toggler`).click());
    awaitthis.afterEvent({
        eventName:'o-component-message-list-scrolled',
        func:()=>document.querySelector('.o_NotificationList_preview').click(),
        message:"shouldwaituntilchannel20scrolledtoitslastmessageafteropeningitfromthemessagingmenu",
        predicate:({scrollTop,thread})=>{
            constmessageList=document.querySelector('.o_ThreadView_messageList');
            return(
                thread&&
                thread.model==='mail.channel'&&
                thread.id===20&&
                isScrolledToBottom(messageList)
            );
        },
    });
    //Setascrollpositiontochatwindow
    awaitthis.afterEvent({
        eventName:'o-component-message-list-scrolled',
        func:()=>document.querySelector(`.o_ThreadView_messageList`).scrollTop=142,
        message:"shouldwaituntilchannel20scrolledto142aftersettingthisvaluemanually",
        predicate:({scrollTop,thread})=>{
            return(
                thread&&
                thread.model==='mail.channel'&&
                thread.id===20&&
                scrollTop===142
            );
        },
    });
    //foldchatwindow
    awaitafterNextRender(()=>document.querySelector('.o_ChatWindow_header').click());
    awaitthis.hideHomeMenu();
    //unfoldchatwindow
    awaitthis.afterEvent({
        eventName:'o-component-message-list-scrolled',
        func:()=>document.querySelector('.o_ChatWindow_header').click(),
        message:"shouldwaituntilchannel20restoreditsscrollto142afterunfoldingit",
        predicate:({scrollTop,thread})=>{
            return(
                thread&&
                thread.model==='mail.channel'&&
                thread.id===20&&
                scrollTop===142
            );
        },
    });
    assert.strictEqual(
        document.querySelector(`.o_ThreadView_messageList`).scrollTop,
        142,
        "chatwindowscrollTopshouldstillbethesameafterhomemenuishidden"
    );

    //foldchatwindow
    awaitafterNextRender(()=>document.querySelector('.o_ChatWindow_header').click());
    //Showhomemenu
    awaitthis.showHomeMenu();
    //unfoldchatwindow
    awaitthis.afterEvent({
        eventName:'o-component-message-list-scrolled',
        func:()=>document.querySelector('.o_ChatWindow_header').click(),
        message:"shouldwaituntilchannel20restoreditsscrollpositiontothelastsavedvalue(142)",
        predicate:({scrollTop,thread})=>{
            return(
                thread&&
                thread.model==='mail.channel'&&
                thread.id===20&&
                scrollTop===142
            );
        },
    });
    assert.strictEqual(
        document.querySelector(`.o_ThreadView_messageList`).scrollTop,
        142,
        "chatwindowscrollTopshouldstillbethesameafterhomemenuisshown"
    );
});

QUnit.test('chatwindowdoesnotfetchmessagesifhidden',asyncfunction(assert){
    /**
     *computationusesfollowinginfo:
     *([mocked]globalwindowwidth:900px)
     *(others:@see`mail/static/src/models/chat_window_manager/chat_window_manager.js:visual`)
     *
     *-chatwindowwidth:325px
     *-start/end/betweengapwidth:10px/10px/5px
     *-hiddenmenuwidth:200px
     *-globalwidth:1080px
     *
     *Enoughspacefor2visiblechatwindows,andonehiddenchatwindow:
     *3visiblechatwindows:
     * 10+325+5+325+5+325+10=1000>900
     *2visiblechatwindows+hiddenmenu:
     * 10+325+5+325+10+200+5=875<900
     */
    assert.expect(14);

    //3channelsareexpectedtobefoundinthemessagingmenu,eachwitha
    //randomuniqueidthatwillbereferencedinthetest
    this.data['mail.channel'].records=[
        {
            id:10,
            is_minimized:true,
            name:"Channel#10",
            state:'open',
        },
        {
            id:11,
            is_minimized:true,
            name:"Channel#11",
            state:'open',
        },
        {
            id:12,
            is_minimized:true,
            name:"Channel#12",
            state:'open',
        },
    ];
    awaitthis.start({
        env:{
            browser:{
                innerWidth:900,
            },
        },
        mockRPC(route,args){
            if(args.method==='message_fetch'){
                //domainshouldbelike[['channel_id','in',[X]]]withXthechannelid
                constchannel_ids=args.kwargs.domain[0][2];
                assert.strictEqual(channel_ids.length,1,"messagesshouldbefetchedchannelperchannel");
                assert.step(`rpc:message_fetch:${channel_ids[0]}`);
            }
            returnthis._super(...arguments);
        },
    });

    assert.containsN(
        document.body,
        '.o_ChatWindow',
        2,
        "2chatwindowsshouldbevisible"
    );
    assert.containsNone(
        document.body,
        `.o_ChatWindow[data-thread-local-id="${
            this.env.models['mail.thread'].findFromIdentifyingData({
                id:12,
                model:'mail.channel',
            }).localId
        }"]`,
        "chatwindowforChannel#12shouldbehidden"
    );
    assert.containsOnce(
        document.body,
        '.o_ChatWindowHiddenMenu',
        "chatwindowhiddenmenushouldbedisplayed"
    );
    assert.verifySteps(
        ['rpc:message_fetch:10','rpc:message_fetch:11'],
        "messagesshouldbefetchedforthetwovisiblechatwindows"
    );

    awaitafterNextRender(()=>
        document.querySelector('.o_ChatWindowHiddenMenu_dropdownToggle').click()
    );
    assert.containsOnce(
        document.body,
        '.o_ChatWindowHiddenMenu_chatWindowHeader',
        "1hiddenchatwindowshouldbelistedinhiddenmenu"
    );

    awaitafterNextRender(()=>
        document.querySelector('.o_ChatWindowHiddenMenu_chatWindowHeader').click()
    );
    assert.containsN(
        document.body,
        '.o_ChatWindow',
        2,
        "2chatwindowsshouldstillbevisible"
    );
    assert.containsOnce(
        document.body,
        `.o_ChatWindow[data-thread-local-id="${
            this.env.models['mail.thread'].findFromIdentifyingData({
                id:12,
                model:'mail.channel',
            }).localId
        }"]`,
        "chatwindowforChannel#12shouldnowbevisible"
    );
    assert.verifySteps(
        ['rpc:message_fetch:12'],
        "messagesshouldnowbefetchedforChannel#12"
    );
});

QUnit.test('newmessageseparatorisshowninachatwindowofachatonreceivingnewmessageifthereisahistoryofconversation',asyncfunction(assert){
    assert.expect(3);

    this.data['res.partner'].records.push({id:10,name:"Demo"});
    this.data['res.users'].records.push({
        id:42,
        name:"Foreigneruser",
        partner_id:10,
    });
    this.data['mail.channel'].records=[
        {
            channel_type:"chat",
            id:10,
            is_minimized:true,
            is_pinned:false,
            members:[this.data.currentPartnerId,10],
            uuid:'channel-10-uuid',
        },
    ];
    this.data['mail.message'].records.push({
        body:"notempty",
        channel_ids:[10],
        model:'mail.channel',
        res_id:10,
    });
    awaitthis.start();

    //simulatereceivingamessage
    awaitafterNextRender(async()=>this.env.services.rpc({
        route:'/mail/chat_post',
        params:{
            context:{
                mockedUserId:42,
            },
            message_content:"hu",
            uuid:'channel-10-uuid',
        },
    }));
    assert.containsOnce(
        document.body,
        '.o_ChatWindow',
        "achatwindowshouldbevisibleafterreceivinganewmessagefromachat"
    );
    assert.containsN(
        document.body,
        '.o_Message',
        2,
        "chatwindowshouldhave2messages"
    );
    assert.containsOnce(
        document.body,
        '.o_MessageList_separatorNewMessages',
        "shoulddisplay'newmessages'separatorintheconversation,fromreceptionofnewmessages"
    );
});

QUnit.test('newmessageseparatorisnotshowninachatwindowofachatonreceivingnewmessageifthereisnohistoryofconversation',asyncfunction(assert){
    assert.expect(1);

    this.data['res.partner'].records.push({id:10,name:"Demo"});
    this.data['res.users'].records.push({
        id:42,
        name:"Foreigneruser",
        partner_id:10,
    });
    this.data['mail.channel'].records=[{
        channel_type:"chat",
        id:10,
        members:[this.data.currentPartnerId,10],
        uuid:'channel-10-uuid',
    }];
    awaitthis.start();

    //simulatereceivingamessage
    awaitafterNextRender(async()=>this.env.services.rpc({
        route:'/mail/chat_post',
        params:{
            context:{
                mockedUserId:42,
            },
            message_content:"hu",
            uuid:'channel-10-uuid',
        },
    }));
    assert.containsNone(
        document.body,
        '.o_MessageList_separatorNewMessages',
        "shouldnotdisplay'newmessages'separatorintheconversationofachatonreceivingnewmessageifthereisnohistoryofconversation"
    );
});

QUnit.test('focusingachatwindowofachatshouldmakenewmessageseparatordisappear[REQUIREFOCUS]',asyncfunction(assert){
    assert.expect(2);

    this.data['res.partner'].records.push({id:10,name:"Demo"});
    this.data['res.users'].records.push({
        id:42,
        name:"Foreigneruser",
        partner_id:10,
    });
    this.data['mail.channel'].records.push(
        {
            channel_type:"chat",
            id:10,
            is_minimized:true,
            is_pinned:false,
            members:[this.data.currentPartnerId,10],
            message_unread_counter:0,
            uuid:'channel-10-uuid',
        },
    );
    this.data['mail.message'].records.push({
        body:"notempty",
        channel_ids:[10],
        model:'mail.channel',
        res_id:10,
    });
    awaitthis.start();

    //simulatereceivingamessage
    awaitafterNextRender(()=>this.env.services.rpc({
        route:'/mail/chat_post',
        params:{
            context:{
                mockedUserId:42,
            },
            message_content:"hu",
            uuid:'channel-10-uuid',
        },
    }));
    assert.containsOnce(
        document.body,
        '.o_MessageList_separatorNewMessages',
        "shoulddisplay'newmessages'separatorintheconversation,fromreceptionofnewmessages"
    );

    awaitafterNextRender(()=>this.afterEvent({
        eventName:'o-thread-last-seen-by-current-partner-message-id-changed',
        func:()=>document.querySelector('.o_ComposerTextInput_textarea').focus(),
        message:"shouldwaituntillastseenbycurrentpartnermessageidchanged",
        predicate:({thread})=>{
            return(
                thread.id===10&&
                thread.model==='mail.channel'
            );
        },
    }));
    assert.containsNone(
        document.body,
        '.o_MessageList_separatorNewMessages',
        "newmessageseparatorshouldnolongerbeshown,afterfocusoncomposertextinputofchatwindow"
    );
});

QUnit.test('chatwindowshouldremainfoldedwhennewmessageisreceived',asyncfunction(assert){
    assert.expect(1);

    this.data['res.partner'].records.push({id:10,name:"Demo"});
    this.data['res.users'].records.push({
        id:42,
        name:"Foreigneruser",
        partner_id:10,
    });
    this.data['mail.channel'].records=[
        {
            channel_type:"chat",
            id:10,
            is_minimized:true,
            is_pinned:false,
            members:[this.data.currentPartnerId,10],
            state:'folded',
            uuid:'channel-10-uuid',
        },
    ];

    awaitthis.start();
    //simulatereceivinganewmessage
    awaitafterNextRender(async()=>this.env.services.rpc({
        route:'/mail/chat_post',
        params:{
            context:{
                mockedUserId:42,
            },
            message_content:"NewMessage2",
            uuid:'channel-10-uuid',
        },
    }));
    assert.hasClass(
        document.querySelector(`.o_ChatWindow`),
        'o-folded',
        "chatwindowshouldremainfolded"
    );
});

QUnit.skip('chatwindowscrollpositionshouldremainthesameafterswitchingleft',asyncfunction(assert){
    assert.expect(2);

    this.data['mail.channel'].records.push({
        id:20,
        is_minimized:true,
        state:'open',
    });
    this.data['mail.channel'].records.push({
        id:21,
        is_minimized:true,
        state:'open',
    });
    for(leti=0;i<10;i++){
        this.data['mail.message'].records.push({
            body:"notempty",
            channel_ids:[20],
        });
    }
    for(leti=0;i<10;i++){
        this.data['mail.message'].records.push({
            body:"notempty",
            channel_ids:[21],
        });
    }
    awaitthis.start();

    constthread1LocalId=this.env.models['mail.thread'].findFromIdentifyingData({
        id:20,
        model:'mail.channel',
    }).localId;
    constthread2LocalId=this.env.models['mail.thread'].findFromIdentifyingData({
        id:21,
        model:'mail.channel',
    }).localId;
    document.querySelector(`.o_ChatWindow[data-thread-local-id="${thread1LocalId}"].o_ThreadView_messageList`).scrollTop=100;
    document.querySelector(`.o_ChatWindow[data-thread-local-id="${thread2LocalId}"].o_ThreadView_messageList`).scrollTop=110;

    awaitthis.afterEvent({
        eventName:'o-thread-view-hint-processed',
        func:()=>document.querySelector('.o_ChatWindowHeader_commandShiftLeft').click(),
        message:"Shouldwaituntilthescrollisadjustedafteracommandshift.",
        predicate:({hint})=>{
            returnhint.type==='adjust-scroll';
        },
    });
    assert.strictEqual(
        document.querySelector(`.o_ChatWindow[data-thread-local-id="${thread2LocalId}"].o_ThreadView_messageList`).scrollTop,
        110,
        "Scrollpositionshouldremainthesameafterachatwindowshift"
    );
    assert.strictEqual(
        document.querySelector(`.o_ChatWindow[data-thread-local-id="${thread1LocalId}"].o_ThreadView_messageList`).scrollTop,
        100,
        "Scrollpositionshouldremainthesameafterachatwindowshift"
    );
});

QUnit.skip('chatwindowscrollpositionshouldremainthesameafterswitchingright',asyncfunction(assert){
    assert.expect(2);

    this.data['mail.channel'].records.push({
        id:20,
        is_minimized:true,
        state:'open',
    });
    this.data['mail.channel'].records.push({
        id:21,
        is_minimized:true,
        state:'open',
    });
    for(leti=0;i<10;i++){
        this.data['mail.message'].records.push({
            body:"notempty",
            channel_ids:[20],
        });
    }
    for(leti=0;i<10;i++){
        this.data['mail.message'].records.push({
            body:"notempty",
            channel_ids:[21],
        });
    }
    awaitthis.start();
    constthread1LocalId=this.env.models['mail.thread'].findFromIdentifyingData({
        id:20,
        model:'mail.channel',
    }).localId;
    constthread2LocalId=this.env.models['mail.thread'].findFromIdentifyingData({
        id:21,
        model:'mail.channel',
    }).localId;
    document.querySelector(`.o_ChatWindow[data-thread-local-id="${thread1LocalId}"].o_ThreadView_messageList`).scrollTop=100;
    document.querySelector(`.o_ChatWindow[data-thread-local-id="${thread2LocalId}"].o_ThreadView_messageList`).scrollTop=110;

    awaitthis.afterEvent({
        eventName:'o-thread-view-hint-processed',
        func:()=>document.querySelector('.o_ChatWindowHeader_commandShiftRight').click(),
        message:"Shouldwaituntilthescrollisadjustedafteracommandshift.",
        predicate:({hint})=>{
            returnhint.type==='adjust-scroll';
        },
    });
    assert.strictEqual(
        document.querySelector(`.o_ChatWindow[data-thread-local-id="${thread2LocalId}"].o_ThreadView_messageList`).scrollTop,
        110,
        "Scrollpositionshouldremainthesameafterachatwindowshift"
    );
    assert.strictEqual(
        document.querySelector(`.o_ChatWindow[data-thread-local-id="${thread1LocalId}"].o_ThreadView_messageList`).scrollTop,
        100,
        "Scrollpositionshouldremainthesameafterachatwindowshift"
    );
});


});
});
});

});
