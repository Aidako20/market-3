flectra.define('mail/static/src/components/chat_window/chat_window.js',function(require){
'usestrict';

constcomponents={
    AutocompleteInput:require('mail/static/src/components/autocomplete_input/autocomplete_input.js'),
    ChatWindowHeader:require('mail/static/src/components/chat_window_header/chat_window_header.js'),
    ThreadView:require('mail/static/src/components/thread_view/thread_view.js'),
};
constuseShouldUpdateBasedOnProps=require('mail/static/src/component_hooks/use_should_update_based_on_props/use_should_update_based_on_props.js');
constuseStore=require('mail/static/src/component_hooks/use_store/use_store.js');
constuseUpdate=require('mail/static/src/component_hooks/use_update/use_update.js');
const{isEventHandled}=require('mail/static/src/utils/utils.js');

constpatchMixin=require('web.patchMixin');

const{Component}=owl;
const{useRef}=owl.hooks;

classChatWindowextendsComponent{

    /**
     *@override
     */
    constructor(...args){
        super(...args);
        useShouldUpdateBasedOnProps();
        useStore(props=>{
            constchatWindow=this.env.models['mail.chat_window'].get(props.chatWindowLocalId);
            constthread=chatWindow?chatWindow.thread:undefined;
            return{
                chatWindow,
                chatWindowHasNewMessageForm:chatWindow&&chatWindow.hasNewMessageForm,
                chatWindowIsDoFocus:chatWindow&&chatWindow.isDoFocus,
                chatWindowIsFocused:chatWindow&&chatWindow.isFocused,
                chatWindowIsFolded:chatWindow&&chatWindow.isFolded,
                chatWindowThreadView:chatWindow&&chatWindow.threadView,
                chatWindowVisibleIndex:chatWindow&&chatWindow.visibleIndex,
                chatWindowVisibleOffset:chatWindow&&chatWindow.visibleOffset,
                isDeviceMobile:this.env.messaging.device.isMobile,
                localeTextDirection:this.env.messaging.locale.textDirection,
                thread,
                threadMassMailing:thread&&thread.mass_mailing,
                threadModel:thread&&thread.model,
            };
        });
        useUpdate({func:()=>this._update()});
        /**
         *Referenceoftheheaderofthechatwindow.
         *Usefultopreventclickonheaderfromwronglyfocusingthewindow.
         */
        this._chatWindowHeaderRef=useRef('header');
        /**
         *Referenceoftheautocompleteinput(new_messagechatwindowonly).
         *Usefulwhenfocusingthischatwindow,whichconsistsoffocusing
         *thisinput.
         */
        this._inputRef=useRef('input');
        /**
         *Referenceofthreadinthechatwindow(chatwindowwiththread
         *only).Usefulwhenfocusingthischatwindow,whichconsistsof
         *focusingthisthread.Willlikelyfocusthecomposerofthread,if
         *ithasone!
         */
        this._threadRef=useRef('thread');
        this._onWillHideHomeMenu=this._onWillHideHomeMenu.bind(this);
        this._onWillShowHomeMenu=this._onWillShowHomeMenu.bind(this);
        //thefollowingarepassedaspropstochildren
        this._onAutocompleteSelect=this._onAutocompleteSelect.bind(this);
        this._onAutocompleteSource=this._onAutocompleteSource.bind(this);
        this._saveThreadScrollTop=this._saveThreadScrollTop.bind(this);
        this._constructor(...args);
    }

    /**
     *Allowspatchingconstructor.
     */
    _constructor(){}

    mounted(){
        this.env.messagingBus.on('will_hide_home_menu',this,this._onWillHideHomeMenu);
        this.env.messagingBus.on('will_show_home_menu',this,this._onWillShowHomeMenu);
    }

    willUnmount(){
        this.env.messagingBus.off('will_hide_home_menu',this,this._onWillHideHomeMenu);
        this.env.messagingBus.off('will_show_home_menu',this,this._onWillShowHomeMenu);
    }

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *@returns{mail.chat_window}
     */
    getchatWindow(){
        returnthis.env.models['mail.chat_window'].get(this.props.chatWindowLocalId);
    }

    /**
     *Getthecontentofplaceholderfortheautocompleteinputof
     *'new_message'chatwindow.
     *
     *@returns{string}
     */
    getnewMessageFormInputPlaceholder(){
        returnthis.env._t("Searchuser...");
    }

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *Applyvisualpositionofthechatwindow.
     *
     *@private
     */
    _applyVisibleOffset(){
        consttextDirection=this.env.messaging.locale.textDirection;
        constoffsetFrom=textDirection==='rtl'?'left':'right';
        constoppositeFrom=offsetFrom==='right'?'left':'right';
        this.el.style[offsetFrom]=this.chatWindow.visibleOffset+'px';
        this.el.style[oppositeFrom]='auto';
    }

    /**
     *Focusthischatwindow.
     *
     *@private
     */
    _focus(){
        this.chatWindow.update({
            isDoFocus:false,
            isFocused:true,
        });
        if(this._inputRef.comp){
            this._inputRef.comp.focus();
        }
        if(this._threadRef.comp){
            this._threadRef.comp.focus();
        }
    }

    /**
     *Savethescrollpositionsofthechatwindowinthestore.
     *Thisisusefulinordertoremountchatwindowsandkeepprevious
     *scrollpositions.Thisisnecessarybecausewhentogglingon/off
     *homemenu,thechatwindowshavetoberemadefromscratch.
     *
     *@private
     */
    _saveThreadScrollTop(){
        if(
            !this._threadRef.comp||
            !this.chatWindow.threadViewer||
            !this.chatWindow.threadViewer.threadView
        ){
            return;
        }
        if(this.chatWindow.threadViewer.threadView.componentHintList.length>0){
            //thecurrentscrollpositionislikelyincorrectduetothe
            //presenceofhintstoadjustit
            return;
        }
        this.chatWindow.threadViewer.saveThreadCacheScrollHeightAsInitial(
            this._threadRef.comp.getScrollHeight()
        );
        this.chatWindow.threadViewer.saveThreadCacheScrollPositionsAsInitial(
            this._threadRef.comp.getScrollTop()
        );
    }

    /**
     *@private
     */
    _update(){
        if(!this.chatWindow){
            //chatwindowisbeingdeleted
            return;
        }
        if(this.chatWindow.isDoFocus){
            this._focus();
        }
        this._applyVisibleOffset();
    }

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *Calledwhenselectinganitemintheautocompleteinputofthe
     *'new_message'chatwindow.
     *
     *@private
     *@param{Event}ev
     *@param{Object}ui
     *@param{Object}ui.item
     *@param{integer}ui.item.id
     */
    async_onAutocompleteSelect(ev,ui){
        constchat=awaitthis.env.messaging.getChat({partnerId:ui.item.id});
        if(!chat){
            return;
        }
        this.env.messaging.chatWindowManager.openThread(chat,{
            makeActive:true,
            replaceNewMessage:true,
        });
    }

    /**
     *Calledwhentypingintheautocompleteinputofthe'new_message'chat
     *window.
     *
     *@private
     *@param{Object}req
     *@param{string}req.term
     *@param{function}res
     */
    _onAutocompleteSource(req,res){
        this.env.models['mail.partner'].imSearch({
            callback:(partners)=>{
                constsuggestions=partners.map(partner=>{
                    return{
                        id:partner.id,
                        value:partner.nameOrDisplayName,
                        label:partner.nameOrDisplayName,
                    };
                });
                res(_.sortBy(suggestions,'label'));
            },
            keyword:_.escape(req.term),
            limit:10,
        });
    }

    /**
     *Calledwhenclickingonheaderofchatwindow.Usuallyfoldsthechat
     *window.
     *
     *@private
     *@param{CustomEvent}ev
     */
    _onClickedHeader(ev){
        ev.stopPropagation();
        if(this.env.messaging.device.isMobile){
            return;
        }
        if(this.chatWindow.isFolded){
            this.chatWindow.unfold();
            this.chatWindow.focus();
        }else{
            this._saveThreadScrollTop();
            this.chatWindow.fold();
        }
    }

    /**
     *Calledwhenanelementinthethreadbecomesfocused.
     *
     *@private
     *@param{FocusEvent}ev
     */
    _onFocusinThread(ev){
        ev.stopPropagation();
        if(!this.chatWindow){
            //preventcrashondestroy
            return;
        }
        this.chatWindow.update({isFocused:true});
    }

    /**
     *Focusoutthechatwindow.
     *
     *@private
     */
    _onFocusout(){
        if(!this.chatWindow){
            //ignorefocusoutduetorecordbeingdeleted
            return;
        }
        this.chatWindow.update({isFocused:false});
    }

    /**
     *@private
     *@param{KeyboardEvent}ev
     */
    _onKeydown(ev){
        if(!this.chatWindow){
            //preventcrashduringdelete
            return;
        }
        switch(ev.key){
            case'Tab':
                ev.preventDefault();
                if(ev.shiftKey){
                    this.chatWindow.focusPreviousVisibleUnfoldedChatWindow();
                }else{
                    this.chatWindow.focusNextVisibleUnfoldedChatWindow();
                }
                break;
            case'Escape':
                if(isEventHandled(ev,'ComposerTextInput.closeSuggestions')){
                    break;
                }
                if(isEventHandled(ev,'Composer.closeEmojisPopover')){
                    break;
                }
                ev.preventDefault();
                this.chatWindow.focusNextVisibleUnfoldedChatWindow();
                this.chatWindow.close();
                break;
        }
    }

    /**
     *Savethescrollpositionsofthechatwindowinthestore.
     *Thisisusefulinordertoremountchatwindowsandkeepprevious
     *scrollpositions.Thisisnecessarybecausewhentogglingon/off
     *homemenu,thechatwindowshavetoberemadefromscratch.
     *
     *@private
     */
    async_onWillHideHomeMenu(){
        this._saveThreadScrollTop();
    }

    /**
     *Savethescrollpositionsofthechatwindowinthestore.
     *Thisisusefulinordertoremountchatwindowsandkeepprevious
     *scrollpositions.Thisisnecessarybecausewhentogglingon/off
     *homemenu,thechatwindowshavetoberemadefromscratch.
     *
     *@private
     */
    async_onWillShowHomeMenu(){
        this._saveThreadScrollTop();
    }

}

Object.assign(ChatWindow,{
    components,
    defaultProps:{
        hasCloseAsBackButton:false,
        isExpandable:false,
        isFullscreen:false,
    },
    props:{
        chatWindowLocalId:String,
        hasCloseAsBackButton:Boolean,
        isExpandable:Boolean,
        isFullscreen:Boolean,
    },
    template:'mail.ChatWindow',
});

returnpatchMixin(ChatWindow);

});
