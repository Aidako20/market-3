flectra.define('mail/static/src/components/discuss_sidebar/discuss_sidebar.js',function(require){
'usestrict';

constcomponents={
    AutocompleteInput:require('mail/static/src/components/autocomplete_input/autocomplete_input.js'),
    DiscussSidebarItem:require('mail/static/src/components/discuss_sidebar_item/discuss_sidebar_item.js'),
};
constuseShouldUpdateBasedOnProps=require('mail/static/src/component_hooks/use_should_update_based_on_props/use_should_update_based_on_props.js');
constuseStore=require('mail/static/src/component_hooks/use_store/use_store.js');
constuseUpdate=require('mail/static/src/component_hooks/use_update/use_update.js');

const{Component}=owl;
const{useRef}=owl.hooks;

classDiscussSidebarextendsComponent{

    /**
     *@override
     */
    constructor(...args){
        super(...args);
        useShouldUpdateBasedOnProps();
        useStore(
            (...args)=>this._useStoreSelector(...args),
            {compareDepth:this._useStoreCompareDepth()}
        );
        useUpdate({func:()=>this._update()});
        /**
         *Referenceofthequicksearchinput.Usefultofilterchannelsand
         *chatsbasedonthisinputcontent.
         */
        this._quickSearchInputRef=useRef('quickSearchInput');

        //bindsincepassedasprops
        this._onAddChannelAutocompleteSelect=this._onAddChannelAutocompleteSelect.bind(this);
        this._onAddChannelAutocompleteSource=this._onAddChannelAutocompleteSource.bind(this);
        this._onAddChatAutocompleteSelect=this._onAddChatAutocompleteSelect.bind(this);
        this._onAddChatAutocompleteSource=this._onAddChatAutocompleteSource.bind(this);
    }

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *@returns{mail.discuss}
     */
    getdiscuss(){
        returnthis.env.messaging&&this.env.messaging.discuss;
    }

    /**
     *@returns{string}
     */
    getFIND_OR_CREATE_CHANNEL(){
        returnthis.env._t("Findorcreateachannel...");
    }

    /**
     *@returns{mail.thread[]}
     */
    getorderedMailboxes(){
        returnthis.env.models['mail.thread']
            .all(thread=>thread.isPinned&&thread.model==='mail.box')
            .sort((mailbox1,mailbox2)=>{
                if(mailbox1===this.env.messaging.inbox){
                    return-1;
                }
                if(mailbox2===this.env.messaging.inbox){
                    return1;
                }
                if(mailbox1===this.env.messaging.starred){
                    return-1;
                }
                if(mailbox2===this.env.messaging.starred){
                    return1;
                }
                constmailbox1Name=mailbox1.displayName;
                constmailbox2Name=mailbox2.displayName;
                mailbox1Name<mailbox2Name?-1:1;
            });
    }

    /**
     *Returnthelistofchatsthatmatchthequicksearchvalueinput.
     *
     *@returns{mail.thread[]}
     */
    getquickSearchPinnedAndOrderedChats(){
        constallOrderedAndPinnedChats=this.env.models['mail.thread']
            .all(thread=>
                thread.channel_type==='chat'&&
                thread.isPinned&&
                thread.model==='mail.channel'
            )
            .sort((c1,c2)=>c1.displayName<c2.displayName?-1:1);
        if(!this.discuss.sidebarQuickSearchValue){
            returnallOrderedAndPinnedChats;
        }
        constqsVal=this.discuss.sidebarQuickSearchValue.toLowerCase();
        returnallOrderedAndPinnedChats.filter(chat=>{
            constnameVal=chat.displayName.toLowerCase();
            returnnameVal.includes(qsVal);
        });
    }

    /**
     *Returnthelistofchannelsthatmatchthequicksearchvalueinput.
     *
     *@returns{mail.thread[]}
     */
    getquickSearchOrderedAndPinnedMultiUserChannels(){
        constallOrderedAndPinnedMultiUserChannels=this.env.models['mail.thread']
            .all(thread=>
                thread.channel_type==='channel'&&
                thread.isPinned&&
                thread.model==='mail.channel'
            )
            .sort((c1,c2)=>{
                if(c1.displayName&&!c2.displayName){
                    return-1;
                }elseif(!c1.displayName&&c2.displayName){
                    return1;
                }elseif(c1.displayName&&c2.displayName&&c1.displayName!==c2.displayName){
                    returnc1.displayName.toLowerCase()<c2.displayName.toLowerCase()?-1:1;
                }else{
                    returnc1.id-c2.id;
                }
            });
        if(!this.discuss.sidebarQuickSearchValue){
            returnallOrderedAndPinnedMultiUserChannels;
        }
        constqsVal=this.discuss.sidebarQuickSearchValue.toLowerCase();
        returnallOrderedAndPinnedMultiUserChannels.filter(channel=>{
            constnameVal=channel.displayName.toLowerCase();
            returnnameVal.includes(qsVal);
        });
    }

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *@private
     */
    _update(){
        if(!this.discuss){
            return;
        }
        if(this._quickSearchInputRef.el){
            this._quickSearchInputRef.el.value=this.discuss.sidebarQuickSearchValue;
        }
    }

    /**
     *@private
     *@returns{Object}
     */
    _useStoreCompareDepth(){
        return{
            allOrderedAndPinnedChats:1,
            allOrderedAndPinnedMailboxes:1,
            allOrderedAndPinnedMultiUserChannels:1,
        };
    }

    /**
     *@private
     *@param{Object}props
     *@returns{Object}
     */
    _useStoreSelector(props){
        constdiscuss=this.env.messaging.discuss;
        return{
            allOrderedAndPinnedChats:this.quickSearchPinnedAndOrderedChats,
            allOrderedAndPinnedMailboxes:this.orderedMailboxes,
            allOrderedAndPinnedMultiUserChannels:this.quickSearchOrderedAndPinnedMultiUserChannels,
            allPinnedChannelAmount:
                this.env.models['mail.thread']
                .all(thread=>
                    thread.isPinned&&
                    thread.model==='mail.channel'
                ).length,
            discussIsAddingChannel:discuss&&discuss.isAddingChannel,
            discussIsAddingChat:discuss&&discuss.isAddingChat,
            discussSidebarQuickSearchValue:discuss&&discuss.sidebarQuickSearchValue,
        };
    }

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *@private
     *@param{Event}ev
     *@param{Object}ui
     *@param{Object}ui.item
     *@param{integer}ui.item.id
     */
    _onAddChannelAutocompleteSelect(ev,ui){
        this.discuss.handleAddChannelAutocompleteSelect(ev,ui);
    }

    /**
     *@private
     *@param{Object}req
     *@param{string}req.term
     *@param{function}res
     */
    _onAddChannelAutocompleteSource(req,res){
        this.discuss.handleAddChannelAutocompleteSource(req,res);
    }

    /**
     *@private
     *@param{Event}ev
     *@param{Object}ui
     *@param{Object}ui.item
     *@param{integer}ui.item.id
     */
    _onAddChatAutocompleteSelect(ev,ui){
        this.discuss.handleAddChatAutocompleteSelect(ev,ui);
    }

    /**
     *@private
     *@param{Object}req
     *@param{string}req.term
     *@param{function}res
     */
    _onAddChatAutocompleteSource(req,res){
        this.discuss.handleAddChatAutocompleteSource(req,res);
    }

    /**
     *Calledwhenclickingonaddchannelicon.
     *
     *@private
     *@param{MouseEvent}ev
     */
    _onClickChannelAdd(ev){
        ev.stopPropagation();
        this.discuss.update({isAddingChannel:true});
    }

    /**
     *Calledwhenclickingonchanneltitle.
     *
     *@private
     *@param{MouseEvent}ev
     */
    _onClickChannelTitle(ev){
        ev.stopPropagation();
        returnthis.env.bus.trigger('do-action',{
            action:{
                name:this.env._t("PublicChannels"),
                type:'ir.actions.act_window',
                res_model:'mail.channel',
                views:[[false,'kanban'],[false,'form']],
                domain:[['public','!=','private']]
            },
        });
    }

    /**
     *Calledwhenclickingonaddchaticon.
     *
     *@private
     *@param{MouseEvent}ev
     */
    _onClickChatAdd(ev){
        ev.stopPropagation();
        this.discuss.update({isAddingChat:true});
    }

    /**
     *@private
     *@param{CustomEvent}ev
     */
    _onHideAddingItem(ev){
        ev.stopPropagation();
        this.discuss.clearIsAddingItem();
    }

    /**
     *@private
     *@param{KeyboardEvent}ev
     */
    _onInputQuickSearch(ev){
        ev.stopPropagation();
        this.discuss.update({
            sidebarQuickSearchValue:this._quickSearchInputRef.el.value,
        });
    }

}

Object.assign(DiscussSidebar,{
    components,
    props:{},
    template:'mail.DiscussSidebar',
});

returnDiscussSidebar;

});
