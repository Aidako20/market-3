flectra.define('mail/static/src/components/attachment_box/attachment_box_tests.js',function(require){
"usestrict";

constcomponents={
    AttachmentBox:require('mail/static/src/components/attachment_box/attachment_box.js'),
};
const{
    afterEach,
    afterNextRender,
    beforeEach,
    createRootComponent,
    dragenterFiles,
    dropFiles,
    start,
}=require('mail/static/src/utils/test_utils.js');

const{file:{createFile}}=require('web.test_utils');

QUnit.module('mail',{},function(){
QUnit.module('components',{},function(){
QUnit.module('attachment_box',{},function(){
QUnit.module('attachment_box_tests.js',{
    beforeEach(){
        beforeEach(this);

        this.createAttachmentBoxComponent=async(thread,otherProps)=>{
            constprops=Object.assign({threadLocalId:thread.localId},otherProps);
            awaitcreateRootComponent(this,components.AttachmentBox,{
                props,
                target:this.widget.el,
            });
        };

        this.start=asyncparams=>{
            const{env,widget}=awaitstart(Object.assign({},params,{
                data:this.data,
            }));
            this.env=env;
            this.widget=widget;
        };
    },
    afterEach(){
        afterEach(this);
    },
});

QUnit.test('baseemptyrendering',asyncfunction(assert){
    assert.expect(4);

    awaitthis.start();
    constthread=this.env.models['mail.thread'].create({
        id:100,
        model:'res.partner',
    });
    awaitthis.createAttachmentBoxComponent(thread);
    assert.strictEqual(
        document.querySelectorAll(`.o_AttachmentBox`).length,
        1,
        "shouldhaveanattachmentbox"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_AttachmentBox_buttonAdd`).length,
        1,
        "shouldhaveabuttonadd"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_FileUploader_input`).length,
        1,
        "shouldhaveafileinput"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_AttachmentBox.o_Attachment`).length,
        0,
        "shouldnothaveanyattachment"
    );
});

QUnit.test('basenon-emptyrendering',asyncfunction(assert){
    assert.expect(6);

    this.data['ir.attachment'].records.push(
        {
            mimetype:'text/plain',
            name:'Blah.txt',
            res_id:100,
            res_model:'res.partner',
        },
        {
            mimetype:'text/plain',
            name:'Blu.txt',
            res_id:100,
            res_model:'res.partner',
        }
    );
    awaitthis.start({
        asyncmockRPC(route){
            if(route.includes('/mail/thread/data')){
                assert.step('/mail/thread/data');
            }
            returnthis._super(...arguments);
        },
    });
    constthread=this.env.models['mail.thread'].create({
        id:100,
        model:'res.partner',
    });
    awaitthread.fetchAttachments();
    awaitthis.createAttachmentBoxComponent(thread);
    assert.verifySteps(
        ['/mail/thread/data'],
        "shouldhavefetchedattachments"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_AttachmentBox`).length,
        1,
        "shouldhaveanattachmentbox"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_AttachmentBox_buttonAdd`).length,
        1,
        "shouldhaveabuttonadd"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_FileUploader_input`).length,
        1,
        "shouldhaveafileinput"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_attachmentBox_attachmentList`).length,
        1,
        "shouldhaveanattachmentlist"
    );
});

QUnit.test('attachmentbox:dropattachments',asyncfunction(assert){
    assert.expect(5);

    awaitthis.start();
    constthread=this.env.models['mail.thread'].create({
        id:100,
        model:'res.partner',
    });
    awaitthread.fetchAttachments();
    awaitthis.createAttachmentBoxComponent(thread);
    constfiles=[
        awaitcreateFile({
            content:'hello,world',
            contentType:'text/plain',
            name:'text.txt',
        }),
    ];
    assert.strictEqual(
        document.querySelectorAll('.o_AttachmentBox').length,
        1,
        "shouldhaveanattachmentbox"
    );

    awaitafterNextRender(()=>
        dragenterFiles(document.querySelector('.o_AttachmentBox'))
    );
    assert.ok(
        document.querySelector('.o_AttachmentBox_dropZone'),
        "shouldhaveadropzone"
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_AttachmentBox.o_Attachment`).length,
        0,
        "shouldhavenoattachmentbeforefilesaredropped"
    );

    awaitafterNextRender(()=>
        dropFiles(
            document.querySelector('.o_AttachmentBox_dropZone'),
            files
        )
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_AttachmentBox.o_Attachment`).length,
        1,
        "shouldhave1attachmentintheboxafterfilesdropped"
    );

    awaitafterNextRender(()=>
        dragenterFiles(document.querySelector('.o_AttachmentBox'))
    );
    constfile1=awaitcreateFile({
        content:'hello,world',
        contentType:'text/plain',
        name:'text2.txt',
    });
    constfile2=awaitcreateFile({
        content:'hello,world',
        contentType:'text/plain',
        name:'text3.txt',
    });
    awaitafterNextRender(()=>
        dropFiles(
            document.querySelector('.o_AttachmentBox_dropZone'),
            [file1,file2]
        )
    );
    assert.strictEqual(
        document.querySelectorAll(`.o_AttachmentBox.o_Attachment`).length,
        3,
        "shouldhave3attachmentsintheboxafterfilesdropped"
    );
});

QUnit.test('viewattachments',asyncfunction(assert){
    assert.expect(7);

    awaitthis.start({
        hasDialog:true,
    });
    constthread=this.env.models['mail.thread'].create({
        attachments:[
            ['insert',{
                id:143,
                mimetype:'text/plain',
                name:'Blah.txt'
            }],
            ['insert',{
                id:144,
                mimetype:'text/plain',
                name:'Blu.txt'
            }]
        ],
        id:100,
        model:'res.partner',
    });
    constfirstAttachment=this.env.models['mail.attachment'].findFromIdentifyingData({id:143});
    awaitthis.createAttachmentBoxComponent(thread);

    awaitafterNextRender(()=>
        document.querySelector(`
            .o_Attachment[data-attachment-local-id="${firstAttachment.localId}"]
            .o_Attachment_image
        `).click()
    );
    assert.containsOnce(
        document.body,
        '.o_Dialog',
        "adialogshouldhavebeenopenedonceattachmentimageisclicked",
    );
    assert.containsOnce(
        document.body,
        '.o_AttachmentViewer',
        "anattachmentviewershouldhavebeenopenedonceattachmentimageisclicked",
    );
    assert.strictEqual(
        document.querySelector('.o_AttachmentViewer_name').textContent,
        'Blah.txt',
        "attachmentvieweriframeshouldpointtoclickedattachment",
    );
    assert.containsOnce(
        document.body,
        '.o_AttachmentViewer_buttonNavigationNext',
        "attachmentviewershouldallowtoseenextattachment",
    );

    awaitafterNextRender(()=>
        document.querySelector('.o_AttachmentViewer_buttonNavigationNext').click()
    );
    assert.strictEqual(
        document.querySelector('.o_AttachmentViewer_name').textContent,
        'Blu.txt',
        "attachmentvieweriframeshouldpointtonextattachmentofattachmentbox",
    );
    assert.containsOnce(
        document.body,
        '.o_AttachmentViewer_buttonNavigationNext',
        "attachmentviewershouldallowtoseenextattachment",
    );

    awaitafterNextRender(()=>
        document.querySelector('.o_AttachmentViewer_buttonNavigationNext').click()
    );
    assert.strictEqual(
        document.querySelector('.o_AttachmentViewer_name').textContent,
        'Blah.txt',
        "attachmentvieweriframeshouldpointanewtofirstattachment",
    );
});

QUnit.test('removeattachmentshouldaskforconfirmation',asyncfunction(assert){
    assert.expect(5);

    awaitthis.start();
    constthread=this.env.models['mail.thread'].create({
        attachments:[
            ['insert',{
                id:143,
                mimetype:'text/plain',
                name:'Blah.txt'
            }],
        ],
        id:100,
        model:'res.partner',
    });
    awaitthis.createAttachmentBoxComponent(thread);
    assert.containsOnce(
        document.body,
        '.o_Attachment',
        "shouldhaveanattachment",
    );
    assert.containsOnce(
        document.body,
        '.o_Attachment_asideItemUnlink',
        "attachmentshouldhaveadeletebutton"
    );

    awaitafterNextRender(()=>document.querySelector('.o_Attachment_asideItemUnlink').click());
    assert.containsOnce(
        document.body,
        '.o_AttachmentDeleteConfirmDialog',
        "Aconfirmationdialogshouldhavebeenopened"
    );
    assert.strictEqual(
        document.querySelector('.o_AttachmentDeleteConfirmDialog_mainText').textContent,
        `Doyoureallywanttodelete"Blah.txt"?`,
        "Confirmationdialogshouldcontaintheattachmentdeleteconfirmationtext"
    );

    //Confirmthedeletion
    awaitafterNextRender(()=>document.querySelector('.o_AttachmentDeleteConfirmDialog_confirmButton').click());
    assert.containsNone(
        document.body,
        '.o_Attachment',
        "shouldnolongerhaveanattachment",
    );
});

});
});
});

});
