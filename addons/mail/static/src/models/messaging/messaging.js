flectra.define('mail/static/src/models/messaging/messaging.js',function(require){
'usestrict';

const{registerNewModel}=require('mail/static/src/model/model_core.js');
const{attr,many2many,many2one,one2many,one2one}=require('mail/static/src/model/model_field.js');

functionfactory(dependencies){

    classMessagingextendsdependencies['mail.model']{

        /**
         *@override
         */
        _willDelete(){
            if(this.env.services['bus_service']){
                this.env.services['bus_service'].off('window_focus',null,this._handleGlobalWindowFocus);
            }
            returnsuper._willDelete(...arguments);
        }

        /**
         *Startsmessagingandrelatedrecords.
         */
        asyncstart(){
            this._handleGlobalWindowFocus=this._handleGlobalWindowFocus.bind(this);
            this.env.services['bus_service'].on('window_focus',null,this._handleGlobalWindowFocus);
            awaitthis.async(()=>this.initializer.start());
            this.notificationHandler.start();
            this.update({isInitialized:true});
        }

        //----------------------------------------------------------------------
        //Public
        //----------------------------------------------------------------------

        /**
         *@returns{boolean}
         */
        isNotificationPermissionDefault(){
            constwindowNotification=this.env.browser.Notification;
            returnwindowNotification
                ?windowNotification.permission==='default'
                :false;
        }

        /**
         *Opentheformviewoftherecordwithprovidedidandmodel.
         *Getsthechatwiththeprovidedpersonandreturnsit.
         *
         *Ifachatisnotappropriate,anotificationisdisplayedinstead.
         *
         *@param{Object}param0
         *@param{integer}[param0.partnerId]
         *@param{integer}[param0.userId]
         *@param{Object}[options]
         *@returns{mail.thread|undefined}
         */
        asyncgetChat({partnerId,userId}){
            if(userId){
                constuser=this.env.models['mail.user'].insert({id:userId});
                returnuser.getChat();
            }
            if(partnerId){
                constpartner=this.env.models['mail.partner'].insert({id:partnerId});
                returnpartner.getChat();
            }
        }

        /**
         *Opensachatwiththeprovidedpersonandreturnsit.
         *
         *Ifachatisnotappropriate,anotificationisdisplayedinstead.
         *
         *@param{Object}personforwardedto@see`getChat()`
         *@param{Object}[options]forwardedto@see`mail.thread:open()`
         *@returns{mail.thread|undefined}
         */
        asyncopenChat(person,options){
            constchat=awaitthis.async(()=>this.getChat(person));
            if(!chat){
                return;
            }
            awaitthis.async(()=>chat.open(options));
            returnchat;
        }

        /**
         *Openstheformviewoftherecordwithprovidedidandmodel.
         *
         *@param{Object}param0
         *@param{integer}param0.id
         *@param{string}param0.model
         */
        asyncopenDocument({id,model}){
            this.env.bus.trigger('do-action',{
                action:{
                    type:'ir.actions.act_window',
                    res_model:model,
                    views:[[false,'form']],
                    res_id:id,
                },
            });
            if(this.env.messaging.device.isMobile){
                //Whenopeningdocumentschatwindowsneedtobeclosed
                this.env.messaging.chatWindowManager.closeAll();
                //messagingmenuhasahigherz-indexthanviewssoitmust
                //beclosedtoensurethevisibilityoftheview
                this.env.messaging.messagingMenu.close();
            }
        }

        /**
         *Opensthemostappropriateviewthatisaprofileforprovidedidand
         *model.
         *
         *@param{Object}param0
         *@param{integer}param0.id
         *@param{string}param0.model
         */
        asyncopenProfile({id,model}){
            if(model==='res.partner'){
                constpartner=this.env.models['mail.partner'].insert({id});
                returnpartner.openProfile();
            }
            if(model==='res.users'){
                constuser=this.env.models['mail.user'].insert({id});
                returnuser.openProfile();
            }
            if(model==='mail.channel'){
                letchannel=this.env.models['mail.thread'].findFromIdentifyingData({id,model:'mail.channel'});
                if(!channel){
                    channel=(awaitthis.async(()=>
                        this.env.models['mail.thread'].performRpcChannelInfo({ids:[id]})
                    ))[0];
                }
                if(!channel){
                    this.env.services['notification'].notify({
                        message:this.env._t("Youcanonlyopentheprofileofexistingchannels."),
                        type:'warning',
                    });
                    return;
                }
                returnchannel.openProfile();
            }
            returnthis.env.messaging.openDocument({id,model});
        }

        //----------------------------------------------------------------------
        //Private
        //----------------------------------------------------------------------

        /**
         *@private
         */
        _handleGlobalWindowFocus(){
            this.update({outOfFocusUnreadMessageCounter:0});
            this.env.bus.trigger('set_title_part',{
                part:'_chat',
            });
        }

    }

    Messaging.fields={
        cannedResponses:one2many('mail.canned_response'),
        chatWindowManager:one2one('mail.chat_window_manager',{
            default:[['create']],
            inverse:'messaging',
            isCausal:true,
        }),
        commands:one2many('mail.channel_command'),
        currentPartner:one2one('mail.partner'),
        currentUser:one2one('mail.user'),
        device:one2one('mail.device',{
            default:[['create']],
            isCausal:true,
        }),
        dialogManager:one2one('mail.dialog_manager',{
            default:[['create']],
            isCausal:true,
        }),
        discuss:one2one('mail.discuss',{
            default:[['create']],
            inverse:'messaging',
            isCausal:true,
        }),
        /**
         *MailboxHistory.
         */
        history:one2one('mail.thread'),
        /**
         *MailboxInbox.
         */
        inbox:one2one('mail.thread'),
        initializer:one2one('mail.messaging_initializer',{
            default:[['create']],
            inverse:'messaging',
            isCausal:true,
        }),
        isInitialized:attr({
            default:false,
        }),
        locale:one2one('mail.locale',{
            default:[['create']],
            isCausal:true,
        }),
        messagingMenu:one2one('mail.messaging_menu',{
            default:[['create']],
            inverse:'messaging',
            isCausal:true,
        }),
        /**
         *MailboxModeration.
         */
        moderation:one2one('mail.thread'),
        notificationGroupManager:one2one('mail.notification_group_manager',{
            default:[['create']],
            isCausal:true,
        }),
        notificationHandler:one2one('mail.messaging_notification_handler',{
            default:[['create']],
            inverse:'messaging',
            isCausal:true,
        }),
        outOfFocusUnreadMessageCounter:attr({
            default:0,
        }),
        partnerRoot:many2one('mail.partner'),
        /**
         *Determineswhichpartnershouldbeconsideredthepublicpartner,
         *whichisaspecialpartnernotablyusedinlivechat.
         *
         *@deprecatedinfavorof`publicPartners`becauseinmulti-website
         *setuptheremightbeadifferentpublicpartnerperwebsite.
         */
        publicPartner:many2one('mail.partner'),
        /**
         *Determineswhichpartnersshouldbeconsideredthepublicpartners,
         *whicharespecialpartnersnotablyusedinlivechat.
         */
        publicPartners:many2many('mail.partner'),
        /**
         *MailboxStarred.
         */
        starred:one2one('mail.thread'),
    };

    Messaging.modelName='mail.messaging';

    returnMessaging;
}

registerNewModel('mail.messaging',factory);

});
