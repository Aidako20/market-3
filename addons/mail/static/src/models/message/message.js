flectra.define('mail/static/src/models/message/message.js',function(require){
'usestrict';

constemojis=require('mail.emojis');
const{registerNewModel}=require('mail/static/src/model/model_core.js');
const{attr,many2many,many2one,one2many}=require('mail/static/src/model/model_field.js');
const{clear}=require('mail/static/src/model/model_field_command.js');
const{addLink,htmlToTextContentInline,parseAndTransform,timeFromNow}=require('mail.utils');

const{str_to_datetime}=require('web.time');

functionfactory(dependencies){

    classMessageextendsdependencies['mail.model']{

        //----------------------------------------------------------------------
        //Public
        //----------------------------------------------------------------------

        /**
         *@static
         *@param{mail.thread}thread
         *@param{string}threadStringifiedDomain
         */
        staticcheckAll(thread,threadStringifiedDomain){
            constthreadCache=thread.cache(threadStringifiedDomain);
            threadCache.update({checkedMessages:[['link',threadCache.messages]]});
        }

        /**
         *@static
         *@param{Object}data
         *@return{Object}
         */
        staticconvertData(data){
            constdata2={};
            if('attachment_ids'indata){
                if(!data.attachment_ids){
                    data2.attachments=[['unlink-all']];
                }else{
                    data2.attachments=[
                        ['insert-and-replace',data.attachment_ids.map(attachmentData=>
                            this.env.models['mail.attachment'].convertData(attachmentData)
                        )],
                    ];
                }
            }
            if('author_id'indata){
                if(!data.author_id){
                    data2.author=[['unlink-all']];
                }elseif(data.author_id[0]!==0){
                    //partnerid0isahackofmessage_formattorefertoan
                    //authornon-relatedtoapartner.display_nameequals
                    //email_from,sothisisomittedduetobeingredundant.
                    data2.author=[
                        ['insert',{
                            display_name:data.author_id[1],
                            id:data.author_id[0],
                        }],
                    ];
                }
            }
            if('body'indata){
                data2.body=data.body;
            }
            if('channel_ids'indata&&data.channel_ids){
                constchannels=data.channel_ids
                    .map(channelId=>
                        this.env.models['mail.thread'].findFromIdentifyingData({
                            id:channelId,
                            model:'mail.channel',
                        })
                    ).filter(channel=>!!channel);
                data2.serverChannels=[['replace',channels]];
            }
            if('date'indata&&data.date){
                data2.date=moment(str_to_datetime(data.date));
            }
            if('email_from'indata){
                data2.email_from=data.email_from;
            }
            if('history_partner_ids'indata){
                data2.isHistory=data.history_partner_ids.includes(this.env.messaging.currentPartner.id);
            }
            if('id'indata){
                data2.id=data.id;
            }
            if('is_discussion'indata){
                data2.is_discussion=data.is_discussion;
            }
            if('is_note'indata){
                data2.is_note=data.is_note;
            }
            if('is_notification'indata){
                data2.is_notification=data.is_notification;
            }
            if('message_type'indata){
                data2.message_type=data.message_type;
            }
            if('model'indata&&'res_id'indata&&data.model&&data.res_id){
                constoriginThreadData={
                    id:data.res_id,
                    model:data.model,
                };
                if('record_name'indata&&data.record_name){
                    originThreadData.name=data.record_name;
                }
                if('res_model_name'indata&&data.res_model_name){
                    originThreadData.model_name=data.res_model_name;
                }
                if('module_icon'indata){
                    originThreadData.moduleIcon=data.module_icon;
                }
                data2.originThread=[['insert',originThreadData]];
            }
            if('moderation_status'indata){
                data2.moderation_status=data.moderation_status;
            }
            if('needaction_partner_ids'indata){
                data2.isNeedaction=data.needaction_partner_ids.includes(this.env.messaging.currentPartner.id);
            }
            if('notifications'indata){
                data2.notifications=[['insert',data.notifications.map(notificationData=>
                    this.env.models['mail.notification'].convertData(notificationData)
                )]];
            }
            if('starred_partner_ids'indata){
                data2.isStarred=data.starred_partner_ids.includes(this.env.messaging.currentPartner.id);
            }
            if('subject'indata){
                data2.subject=data.subject;
            }
            if('subtype_description'indata){
                data2.subtype_description=data.subtype_description;
            }
            if('subtype_id'indata){
                data2.subtype_id=data.subtype_id;
            }
            if('tracking_value_ids'indata){
                data2.tracking_value_ids=data.tracking_value_ids;
            }

            returndata2;
        }

        /**
         *Markallmessagesofcurrentuserwithgivendomainasread.
         *
         *@static
         *@param{Array[]}domain
         */
        staticasyncmarkAllAsRead(domain){
            awaitthis.env.services.rpc({
                model:'mail.message',
                method:'mark_all_as_read',
                kwargs:{domain},
            });
        }

        /**
         *Markprovidedmessagesasread.Messagesthathavebeenmarkedas
         *readareacknowledgedbyserverwithresponseaslongpolling
         *notificationoffollowingformat:
         *
         *[[dbname,'res.partner',partnerId],{type:'mark_as_read'}]
         *
         *@seemail.messaging_notification_handler:_handleNotificationPartnerMarkAsRead()
         *
         *@static
         *@param{mail.message[]}messages
         */
        staticasyncmarkAsRead(messages){
            awaitthis.env.services.rpc({
                model:'mail.message',
                method:'set_message_done',
                args:[messages.map(message=>message.id)]
            });
        }

        /**
         *Appliesthemoderation`decision`ontheprovidedmessages.
         *
         *@static
         *@param{mail.message[]}messages
         *@param{string}decision:'accept','allow',ban','discard',or'reject'
         *@param{Object|undefined}[kwargs]optionaldatatopasson
         * messagemoderation.Thisisprovidedwhenrejectingthemessages
         * forwhichtitleandcommentgivereason(s)forreject.
         *@param{string}[kwargs.title]
         *@param{string}[kwargs.comment]
         */
        staticasyncmoderate(messages,decision,kwargs){
            constmessageIds=messages.map(message=>message.id);
            awaitthis.env.services.rpc({
                model:'mail.message',
                method:'moderate',
                args:[messageIds,decision],
                kwargs:kwargs,
            });
        }
        /**
         *Performsthe`message_fetch`RPCon`mail.message`.
         *
         *@static
         *@param{Array[]}domain
         *@param{integer}[limit]
         *@param{integer[]}[moderated_channel_ids]
         *@param{Object}[context]
         *@returns{mail.message[]}
         */
        staticasyncperformRpcMessageFetch(domain,limit,moderated_channel_ids,context){
            constmessagesData=awaitthis.env.services.rpc({
                model:'mail.message',
                method:'message_fetch',
                kwargs:{
                    context,
                    domain,
                    limit,
                    moderated_channel_ids,
                },
            },{shadow:true});
            constmessages=this.env.models['mail.message'].insert(messagesData.map(
                messageData=>this.env.models['mail.message'].convertData(messageData)
            ));
            //computeseenindicators(ifapplicable)
            for(constmessageofmessages){
                for(constthreadofmessage.threads){
                    if(thread.model!=='mail.channel'||thread.channel_type==='channel'){
                        //disabledonnon-channelthreadsand
                        //on`channel`channelsforperformancereasons
                        continue;
                    }
                    this.env.models['mail.message_seen_indicator'].insert({
                        channelId:thread.id,
                        messageId:message.id,
                    });
                }
            }
            returnmessages;
        }

        /**
         *@static
         *@param{mail.thread}thread
         *@param{string}threadStringifiedDomain
         */
        staticuncheckAll(thread,threadStringifiedDomain){
            constthreadCache=thread.cache(threadStringifiedDomain);
            threadCache.update({checkedMessages:[['unlink',threadCache.messages]]});
        }

        /**
         *Unstarallstarredmessagesofcurrentuser.
         */
        staticasyncunstarAll(){
            awaitthis.env.services.rpc({
                model:'mail.message',
                method:'unstar_all',
            });
        }

        /**
         *@param{mail.thread}thread
         *@param{string}threadStringifiedDomain
         *@returns{boolean}
         */
        isChecked(thread,threadStringifiedDomain){
            //akutodo
            constrelatedCheckedThreadCache=this.checkedThreadCaches.find(
                threadCache=>(
                    threadCache.thread===thread&&
                    threadCache.stringifiedDomain===threadStringifiedDomain
                )
            );
            return!!relatedCheckedThreadCache;
        }

        /**
         *Markthismessageasread,sothatitnolongerappearsincurrent
         *partnerInbox.
         */
        asyncmarkAsRead(){
            awaitthis.async(()=>this.env.services.rpc({
                model:'mail.message',
                method:'set_message_done',
                args:[[this.id]]
            }));
        }

        /**
         *Appliesthemoderation`decision`onthismessage.
         *
         *@param{string}decision:'accept','allow',ban','discard',or'reject'
         *@param{Object|undefined}[kwargs]optionaldatatopasson
         * messagemoderation.Thisisprovidedwhenrejectingthemessages
         * forwhichtitleandcommentgivereason(s)forreject.
         *@param{string}[kwargs.title]
         *@param{string}[kwargs.comment]
         */
        asyncmoderate(decision,kwargs){
            awaitthis.async(()=>this.constructor.moderate([this],decision,kwargs));
        }

        /**
         *Openstheviewthatallowstoresendthemessageincaseoffailure.
         */
        openResendAction(){
            this.env.bus.trigger('do-action',{
                action:'mail.mail_resend_message_action',
                options:{
                    additional_context:{
                        mail_message_to_resend:this.id,
                    },
                },
            });
        }

        /**
         *Refreshesthevalueof`dateFromNow`fieldtothe"currentnow".
         */
        refreshDateFromNow(){
            this.update({dateFromNow:this._computeDateFromNow()});
        }

        /**
         *ActiontoinitiatereplytocurrentmessageinDiscussInbox.Assumes
         *thatDiscussandInboxarealreadyopened.
         */
        replyTo(){
            this.env.messaging.discuss.replyToMessage(this);
        }

        /**
         *Togglecheckstateofthismessageinthecontextoftheprovided
         *threadanditsstringifiedDomain.
         *
         *@param{mail.thread}thread
         *@param{string}threadStringifiedDomain
         */
        toggleCheck(thread,threadStringifiedDomain){
            constthreadCache=thread.cache(threadStringifiedDomain);
            if(threadCache.checkedMessages.includes(this)){
                threadCache.update({checkedMessages:[['unlink',this]]});
            }else{
                threadCache.update({checkedMessages:[['link',this]]});
            }
        }

        /**
         *Togglethestarredstatusoftheprovidedmessage.
         */
        asynctoggleStar(){
            awaitthis.async(()=>this.env.services.rpc({
                model:'mail.message',
                method:'toggle_message_starred',
                args:[[this.id]]
            }));
        }

        //----------------------------------------------------------------------
        //Private
        //----------------------------------------------------------------------

        /**
         *@override
         */
        static_createRecordLocalId(data){
            return`${this.modelName}_${data.id}`;
        }

        /**
         *@returns{string}
         */
        _computeDateFromNow(){
            if(!this.date){
                returnclear();
            }
            returntimeFromNow(this.date);
        }

        /**
         *@returns{boolean}
         */
        _computeFailureNotifications(){
            return[['replace',this.notifications.filter(notifications=>
                ['exception','bounce'].includes(notifications.notification_status)
            )]];
        }

        /**
         *@private
         *@returns{boolean}
         */
        _computeHasCheckbox(){
            returnthis.isModeratedByCurrentPartner;
        }

        /**
         *@private
         *@returns{boolean}
         */
        _computeIsCurrentPartnerAuthor(){
            return!!(
                this.author&&
                this.messagingCurrentPartner&&
                this.messagingCurrentPartner===this.author
            );
        }

        /**
         *@private
         *@returns{boolean}
         */
        _computeIsBodyEqualSubtypeDescription(){
            if(!this.body||!this.subtype_description){
                returnfalse;
            }
            constinlineBody=htmlToTextContentInline(this.body);
            returninlineBody.toLowerCase()===this.subtype_description.toLowerCase();
        }

        /**
         *Themethoddoesnotattempttocoverallpossiblecasesofempty
         *messages,butmostlythosethathappenwithastandardflow.Indeed
         *itispreferabletobedefensiveandshowanemptymessagesometimes
         *insteadofhidinganon-emptymessage.
         *
         *Themainusecaseforwhenamessageshouldbecomeemptyisfora
         *messagepostedwithonlyanattachment(nobody)andthenthe
         *attachmentisdeleted.
         *
         *Themainusecaseforbeingdefensivewiththecheckiswhen
         *receivingamessagethathasnotextualcontentbuthasother
         *meaningfulHTMLtags(eg.justan<img/>).
         *
         *@private
         *@returns{boolean}
         */
        _computeIsEmpty(){
            constisBodyEmpty=(
                !this.body||
                [
                    '',
                    '<p></p>',
                    '<p><br></p>',
                    '<p><br/></p>',
                ].includes(this.body.replace(/\s/g,''))
            );
            return(
                isBodyEmpty&&
                this.attachments.length===0&&
                this.tracking_value_ids.length===0&&
                !this.subtype_description
            );
        }

        /**
         *@private
         *@returns{boolean}
         */
        _computeIsModeratedByCurrentPartner(){
            return(
                this.moderation_status==='pending_moderation'&&
                this.originThread&&
                this.originThread.isModeratedByCurrentPartner
            );
        }
        /**
         *@private
         *@returns{boolean}
         */
        _computeIsSubjectSimilarToOriginThreadName(){
            if(
                !this.subject||
                !this.originThread||
                !this.originThread.name
            ){
                returnfalse;
            }
            constthreadName=this.originThread.name.toLowerCase().trim();
            constprefixList=['re:','fw:','fwd:'];
            letcleanedSubject=this.subject.toLowerCase();
            letwasSubjectCleaned=true;
            while(wasSubjectCleaned){
                wasSubjectCleaned=false;
                if(threadName===cleanedSubject){
                    returntrue;
                }
                for(constprefixofprefixList){
                    if(cleanedSubject.startsWith(prefix)){
                        cleanedSubject=cleanedSubject.replace(prefix,'').trim();
                        wasSubjectCleaned=true;
                        break;
                    }
                }
            }
            returnfalse;
        }

        /**
         *@private
         *@returns{string}
         */
        _computeMessageTypeText(){
            if(this.message_type==='notification'){
                returnthis.env._t("Systemnotification");
            }
            if(!this.is_discussion&&!this.is_notification){
                returnthis.env._t("Note");
            }
            returnthis.env._t("Message");
        }

        /**
         *@private
         *@returns{mail.messaging}
         */
        _computeMessaging(){
            return[['link',this.env.messaging]];
        }

        /**
         *Thisvalueismeanttobebasedonfieldbodywhichis
         *returnedbytheserver(andhasbeensanitizedbeforestoredintodb).
         *Donotusethisvalueina't-raw'ifthemessagehasbeencreated
         *directlyfromuserinputandnotfromserverdataasit'snotescaped.
         *
         *@private
         *@returns{string}
         */
        _computePrettyBody(){
            if(!this.body){
                //bodynullindb,bodywillbefalseinsteadofemptystring
                returnclear();
            }
            letprettyBody;
            for(constemojiofemojis){
                const{unicode}=emoji;
                constregexp=newRegExp(
                    `(?:^|\\s|<[a-z]*>)(${unicode})(?=\\s|$|</[a-z]*>)`,
                    "g"
                );
                constoriginalBody=this.body;
                prettyBody=this.body.replace(
                    regexp,
                    `<spanclass="o_mail_emoji">${unicode}</span>`
                );
                //Idiot-prooflimit.Iftheuserhadtheamazingideaof
                //copy-pastingthousandsofemojis,theimagerenderingcanlead
                //tomemoryoverflowerrorsonsomebrowsers(e.g.Chrome).Setan
                //arbitrarylimitto200fromwhichwesimplydon'treplacethem
                //(anyway,theyarealreadyreplacedbytheunicodecounterpart).
                if(_.str.count(prettyBody,"o_mail_emoji")>200){
                    prettyBody=originalBody;
                }
            }
            //addanchortagstourls
            returnparseAndTransform(prettyBody,addLink);
        }

        /**
         *@private
         *@returns{mail.thread[]}
         */
        _computeThreads(){
            constthreads=[...this.serverChannels];
            if(this.isHistory){
                threads.push(this.env.messaging.history);
            }
            if(this.isNeedaction){
                threads.push(this.env.messaging.inbox);
            }
            if(this.isStarred){
                threads.push(this.env.messaging.starred);
            }
            if(this.env.messaging.moderation&&this.isModeratedByCurrentPartner){
                threads.push(this.env.messaging.moderation);
            }
            if(this.originThread){
                threads.push(this.originThread);
            }
            return[['replace',threads]];
        }

    }

    Message.fields={
        attachments:many2many('mail.attachment',{
            inverse:'messages',
        }),
        author:many2one('mail.partner',{
            inverse:'messagesAsAuthor',
        }),
        /**
         *Thisvalueismeanttobereturnedbytheserver
         *(andhasbeensanitizedbeforestoredintodb).
         *Donotusethisvalueina't-raw'ifthemessagehasbeencreated
         *directlyfromuserinputandnotfromserverdataasit'snotescaped.
         */
        body:attr({
            default:"",
        }),
        checkedThreadCaches:many2many('mail.thread_cache',{
            inverse:'checkedMessages',
        }),
        /**
         *Determinesthedateofthemessageasamomentobject.
         */
        date:attr(),
        /**
         *Statesthetimeelapsedsincedateuptonow.
         */
        dateFromNow:attr({
            compute:'_computeDateFromNow',
            dependencies:[
                'date',
            ],
        }),
        email_from:attr(),
        failureNotifications:one2many('mail.notification',{
            compute:'_computeFailureNotifications',
            dependencies:['notificationsStatus'],
        }),
        hasCheckbox:attr({
            compute:'_computeHasCheckbox',
            default:false,
            dependencies:['isModeratedByCurrentPartner'],
        }),
        id:attr(),
        isCurrentPartnerAuthor:attr({
            compute:'_computeIsCurrentPartnerAuthor',
            default:false,
            dependencies:[
                'author',
                'messagingCurrentPartner',
            ],
        }),
        /**
         *Stateswhether`body`and`subtype_description`containsimilar
         *values.
         *
         *Thisisnecessarytoavoiddisplayingbothofthemtogetherwhenthey
         *containduplicateinformation.Thiswillespeciallyhappenwith
         *messagesthatarepostedautomaticallyatthecreationofarecord
         *(messagesthatserveastrackingmessages).Theydohavehard-coded
         *"recordcreated"bodywhilebeingassignedasubtypewitha
         *descriptionthatstatesthesameinformation.
         *
         *Fixingnewermessagesispossiblebynotassigningthemaduplicate
         *bodycontent,butthecheckhereisstillnecessarytohandle
         *existingmessages.
         *
         *Limitations:
         *-Atranslatedsubtypedescriptionmightnotmatchanon-translatable
         *  bodycreatedbyauserwithadifferentlanguage.
         *-Theircontentmightbemostlybutnotexactlythesame.
         */
        isBodyEqualSubtypeDescription:attr({
            compute:'_computeIsBodyEqualSubtypeDescription',
            default:false,
            dependencies:[
                'body',
                'subtype_description',
            ],
        }),
        /**
         *Determinewhetherthemessagehastobeconsideredemptyornot.
         *
         *Anemptymessagehasnotext,noattachmentandnotrackingvalue.
         */
        isEmpty:attr({
            compute:'_computeIsEmpty',
            dependencies:[
                'attachments',
                'body',
                'subtype_description',
                'tracking_value_ids',
            ],
        }),
        isModeratedByCurrentPartner:attr({
            compute:'_computeIsModeratedByCurrentPartner',
            default:false,
            dependencies:[
                'moderation_status',
                'originThread',
                'originThreadIsModeratedByCurrentPartner',
            ],
        }),
        /**
         *Stateswhether`originThread.name`and`subject`containsimilar
         *valuesexceptitcontainstheextraprefixatthestart
         *ofthesubject.
         *
         *Thisisnecessarytoavoiddisplayingthesubject,if
         *thesubjectissameasthreadname.
         */
        isSubjectSimilarToOriginThreadName:attr({
            compute:'_computeIsSubjectSimilarToOriginThreadName',
            dependencies:[
                'originThread',
                'originThreadName',
                'subject',
            ],
        }),
        isTemporary:attr({
            default:false,
        }),
        isTransient:attr({
            default:false,
        }),
        is_discussion:attr({
            default:false,
        }),
        /**
         *Determinewhetherthemessagewasaneedaction.Usefultomakeit
         *presentinhistorymailbox.
         */
        isHistory:attr({
            default:false,
        }),
        /**
         *Determinewhetherthemessageisneedaction.Usefultomakeit
         *presentininboxmailboxandmessagingmenu.
         */
        isNeedaction:attr({
            default:false,
        }),
        is_note:attr({
            default:false,
        }),
        is_notification:attr({
            default:false,
        }),
        /**
         *Determinewhetherthemessageisstarred.Usefultomakeitpresent
         *instarredmailbox.
         */
        isStarred:attr({
            default:false,
        }),
        messageTypeText:attr({
            compute:'_computeMessageTypeText',
            dependencies:[
                'message_type',
                'is_discussion',
                'is_notification',
            ],
        }),
        message_type:attr(),
        messaging:many2one('mail.messaging',{
            compute:'_computeMessaging',
        }),
        messagingCurrentPartner:many2one('mail.partner',{
            related:'messaging.currentPartner',
        }),
        messagingHistory:many2one('mail.thread',{
            related:'messaging.history',
        }),
        messagingInbox:many2one('mail.thread',{
            related:'messaging.inbox',
        }),
        messagingModeration:many2one('mail.thread',{
            related:'messaging.moderation',
        }),
        messagingStarred:many2one('mail.thread',{
            related:'messaging.starred',
        }),
        moderation_status:attr(),
        notifications:one2many('mail.notification',{
            inverse:'message',
            isCausal:true,
        }),
        notificationsStatus:attr({
            default:[],
            related:'notifications.notification_status',
        }),
        /**
         *Originthreadofthismessage(ifany).
         */
        originThread:many2one('mail.thread',{
            inverse:'messagesAsOriginThread',
        }),
        originThreadIsModeratedByCurrentPartner:attr({
            default:false,
            related:'originThread.isModeratedByCurrentPartner',
        }),
        /**
         *ServesascomputedependencyforisSubjectSimilarToOriginThreadName
         */
        originThreadName:attr({
            related:'originThread.name',
        }),
        /**
         *Thisvalueismeanttobebasedonfieldbodywhichis
         *returnedbytheserver(andhasbeensanitizedbeforestoredintodb).
         *Donotusethisvalueina't-raw'ifthemessagehasbeencreated
         *directlyfromuserinputandnotfromserverdataasit'snotescaped.
         */
        prettyBody:attr({
            compute:'_computePrettyBody',
            default:"",
            dependencies:['body'],
        }),
        subject:attr(),
        subtype_description:attr(),
        subtype_id:attr(),
        /**
         *Allthreadsthatthismessageislinkedto.Thisfieldisread-only.
         */
        threads:many2many('mail.thread',{
            compute:'_computeThreads',
            dependencies:[
                'isHistory',
                'isModeratedByCurrentPartner',
                'isNeedaction',
                'isStarred',
                'messagingHistory',
                'messagingInbox',
                'messagingModeration',
                'messagingStarred',
                'originThread',
                'serverChannels',
            ],
            inverse:'messages',
        }),
        tracking_value_ids:attr({
            default:[],
        }),
        /**
         *Allchannelscontainingthismessageontheserver.
         *Equivalentofpythonfield`channel_ids`.
         */
        serverChannels:many2many('mail.thread',{
            inverse:'messagesAsServerChannel',
        }),
    };

    Message.modelName='mail.message';

    returnMessage;
}

registerNewModel('mail.message',factory);

});
