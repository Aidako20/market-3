flectra.define('mail/static/src/models/follower.follower.js',function(require){
'usestrict';

const{registerNewModel}=require('mail/static/src/model/model_core.js');
const{attr,many2many,many2one}=require('mail/static/src/model/model_field.js');

functionfactory(dependencies){

    classFollowerextendsdependencies['mail.model']{

        //----------------------------------------------------------------------
        //Public
        //----------------------------------------------------------------------

        /**
         *@static
         *@param{Object}data
         *@returns{Object}
         */
        staticconvertData(data){
            constdata2={};
            if('channel_id'indata){
                if(!data.channel_id){
                    data2.channel=[['unlink-all']];
                }else{
                    constchannelData={
                        id:data.channel_id,
                        model:'mail.channel',
                        name:data.name,
                    };
                    data2.channel=[['insert',channelData]];
                }
            }
            if('id'indata){
                data2.id=data.id;
            }
            if('is_active'indata){
                data2.isActive=data.is_active;
            }
            if('is_editable'indata){
                data2.isEditable=data.is_editable;
            }
            if('partner_id'indata){
                if(!data.partner_id){
                    data2.partner=[['unlink-all']];
                }else{
                    constpartnerData={
                        display_name:data.display_name,
                        email:data.email,
                        id:data.partner_id,
                        name:data.name,
                    };
                    data2.partner=[['insert',partnerData]];
                }
            }
            returndata2;
        }

        /**
         * Closesubtypesdialog
         */
        closeSubtypes(){
            this._subtypesListDialog.delete();
            this._subtypesListDialog=undefined;
        }

        /**
         *Opensthemostappropriateviewthatisaprofileforthisfollower.
         */
        asyncopenProfile(){
            if(this.partner){
                returnthis.partner.openProfile();
            }
            returnthis.channel.openProfile();
        }

        /**
         *Removethisfollowerfromitsrelatedthread.
         */
        asyncremove(){
            constpartner_ids=[];
            constchannel_ids=[];
            if(this.partner){
                partner_ids.push(this.partner.id);
            }else{
                channel_ids.push(this.channel.id);
            }
            awaitthis.async(()=>this.env.services.rpc({
                model:this.followedThread.model,
                method:'message_unsubscribe',
                args:[[this.followedThread.id],partner_ids,channel_ids]
            }));
            constfollowedThread=this.followedThread;
            this.delete();
            followedThread.fetchAndUpdateSuggestedRecipients();
        }

        /**
         *@param{mail.follower_subtype}subtype
         */
        selectSubtype(subtype){
            if(!this.selectedSubtypes.includes(subtype)){
                this.update({selectedSubtypes:[['link',subtype]]});
            }
        }

        /**
         *Show(editable)listofsubtypesofthisfollower.
         */
        asyncshowSubtypes(){
            constsubtypesData=awaitthis.async(()=>this.env.services.rpc({
                route:'/mail/read_subscription_data',
                params:{follower_id:this.id},
            }));
            this.update({subtypes:[['unlink-all']]});
            for(constdataofsubtypesData){
                constsubtype=this.env.models['mail.follower_subtype'].insert(
                    this.env.models['mail.follower_subtype'].convertData(data)
                );
                this.update({subtypes:[['link',subtype]]});
                if(data.followed){
                    this.update({selectedSubtypes:[['link',subtype]]});
                }else{
                    this.update({selectedSubtypes:[['unlink',subtype]]});
                }
            }
            this._subtypesListDialog=this.env.messaging.dialogManager.open('mail.follower_subtype_list',{
                follower:[['link',this]],
            });
        }

        /**
         *@param{mail.follower_subtype}subtype
         */
        unselectSubtype(subtype){
            if(this.selectedSubtypes.includes(subtype)){
                this.update({selectedSubtypes:[['unlink',subtype]]});
            }
        }

        /**
         *Updateserver-sidesubscriptionofsubtypesofthisfollower.
         */
        asyncupdateSubtypes(){
            if(this.selectedSubtypes.length===0){
                this.remove();
            }else{
                constkwargs={
                    subtype_ids:this.selectedSubtypes.map(subtype=>subtype.id),
                };
                if(this.partner){
                    kwargs.partner_ids=[this.partner.id];
                }else{
                    kwargs.channel_ids=[this.channel.id];
                }
                awaitthis.async(()=>this.env.services.rpc({
                    model:this.followedThread.model,
                    method:'message_subscribe',
                    args:[[this.followedThread.id]],
                    kwargs,
                }));
                this.env.services['notification'].notify({
                    type:'success',
                    message:this.env._t("Thesubscriptionpreferencesweresuccessfullyapplied."),
                });
            }
            this.closeSubtypes();
        }

        //----------------------------------------------------------------------
        //Private
        //----------------------------------------------------------------------

        /**
         *@override
         */
        static_createRecordLocalId(data){
            return`${this.modelName}_${data.id}`;
        }

        /**
         *@private
         *@returns{string}
         */
        _computeName(){
            if(this.channel){
                returnthis.channel.name;
            }
            if(this.partner){
                returnthis.partner.name;
            }
            return'';
        }

        /**
         *@private
         *@returns{integer}
         */
        _computeResId(){
            if(this.partner){
                returnthis.partner.id;
            }
            if(this.channel){
                returnthis.channel.id;
            }
            return0;
        }

        /**
         *@private
         *@returns{string}
         */
        _computeResModel(){
            if(this.partner){
                returnthis.partner.model;
            }
            if(this.channel){
                returnthis.channel.model;
            }
            return'';
        }

    }

    Follower.fields={
        resId:attr({
            compute:'_computeResId',
            default:0,
            dependencies:[
                'channelId',
                'partnerId',
            ],
        }),
        channel:many2one('mail.thread'),
        channelId:attr({
            related:'channel.id',
        }),
        channelModel:attr({
            related:'channel.model',
        }),
        channelName:attr({
            related:'channel.name',
        }),
        displayName:attr({
            related:'partner.display_name'
        }),
        followedThread:many2one('mail.thread',{
            inverse:'followers',
        }),
        id:attr(),
        isActive:attr({
            default:true,
        }),
        isEditable:attr({
            default:false,
        }),
        name:attr({
            compute:'_computeName',
            dependencies:[
                'channelName',
                'partnerName',
            ],
        }),
        partner:many2one('mail.partner'),
        partnerId:attr({
            related:'partner.id',
        }),
        partnerModel:attr({
            related:'partner.model',
        }),
        partnerName:attr({
            related:'partner.name',
        }),
        resModel:attr({
            compute:'_computeResModel',
            default:'',
            dependencies:[
                'channelModel',
                'partnerModel',
            ],
        }),
        selectedSubtypes:many2many('mail.follower_subtype'),
        subtypes:many2many('mail.follower_subtype'),
    };

    Follower.modelName='mail.follower';

    returnFollower;
}

registerNewModel('mail.follower',factory);

});
