flectra.define('mail/static/src/models/notification_group/notification_group.js',function(require){
'usestrict';

const{registerNewModel}=require('mail/static/src/model/model_core.js');
const{attr,many2one,one2many}=require('mail/static/src/model/model_field.js');

functionfactory(dependencies){

    classNotificationGroupextendsdependencies['mail.model']{

        //----------------------------------------------------------------------
        //Public
        //----------------------------------------------------------------------

        /**
         *Openstheviewthatallowstocancelallnotificationsofthegroup.
         */
        openCancelAction(){
            if(this.notification_type!=='email'){
                return;
            }
            this.env.bus.trigger('do-action',{
                action:'mail.mail_resend_cancel_action',
                options:{
                    additional_context:{
                        default_model:this.res_model,
                        unread_counter:this.notifications.length,
                    },
                },
            });
        }

        /**
         *Openstheviewthatdisplayseitherthesinglerecordofthegroupor
         *alltherecordsinthegroup.
         */
        openDocuments(){
            if(this.thread){
                this.thread.open();
            }else{
                this._openDocuments();
            }
        }

        //----------------------------------------------------------------------
        //Private
        //----------------------------------------------------------------------

        /**
         *@private
         *@returns{mail.thread|undefined}
         */
        _computeThread(){
            constnotificationsThreadIds=this.notifications
                  .filter(notification=>notification.message&&notification.message.originThread)
                  .map(notification=>notification.message.originThread.id);
            constthreadIds=newSet(notificationsThreadIds);
            if(threadIds.size!==1){
                return[['unlink']];
            }
            return[['insert',{
                id:notificationsThreadIds[0],
                model:this.res_model,
            }]];
        }

        /**
         *@override
         */
        static_createRecordLocalId(data){
            return`${this.modelName}_${data.id}`;
        }

        /**
         *Computethemostrecentdateinsidethenotificationmessages.
         *
         *@private
         *@returns{moment|undefined}
         */
         _computeDate(){
            constdates=this.notifications
                    .filter(notification=>notification.message&&notification.message.date)
                    .map(notification=>notification.message.date);
            if(dates.length===0){
                return[['clear']];
            }
            returnmoment.max(dates);
        }

        /**
         *Computethepositionofthegroupinsidethenotificationlist.
         *
         *@private
         *@returns{number}
         */
        _computeSequence(){
            return-Math.max(...this.notifications.map(notification=>notification.message.id));
        }

        /**
         *Openstheviewthatdisplaysalltherecordsofthegroup.
         *
         *@private
         */
        _openDocuments(){
            if(this.notification_type!=='email'){
                return;
            }
            this.env.bus.trigger('do-action',{
                action:{
                    name:this.env._t("MailFailures"),
                    type:'ir.actions.act_window',
                    view_mode:'kanban,list,form',
                    views:[[false,'kanban'],[false,'list'],[false,'form']],
                    target:'current',
                    res_model:this.res_model,
                    domain:[['message_has_error','=',true]],
                },
            });
            if(this.env.messaging.device.isMobile){
                //messagingmenuhasahigherz-indexthanviewssoitmust
                //beclosedtoensurethevisibilityoftheview
                this.env.messaging.messagingMenu.close();
            }
        }

    }

    NotificationGroup.fields={
        /**
         *Statesthemostrecentdateofallthenotificationmessage.
         */
        date:attr({
            compute:'_computeDate',
            dependencies:[
                'notifications',
                'notificationsMessage',
                'notificationsMessageDate',
            ],
        }),
        id:attr(),
        notification_type:attr(),
        notifications:one2many('mail.notification'),
        /**
         *Servesascomputedependency.
         */
         notificationsMessage:one2many('mail.message',{
            related:'notifications.message',
        }),
        /**
         *Servesascomputedependency.
         */
        notificationsMessageDate:attr({
            related:'notificationsMessage.date',
        }),
        /**
         *Servesascomputedependency.
         */
        notificationsMessageOriginThread:one2many('mail.thread',{
            related:'notificationsMessage.originThread',
        }),
        res_model:attr(),
        res_model_name:attr(),
        /**
         *Statesthepositionofthegroupinsidethenotificationlist.
         */
        sequence:attr({
            compute:'_computeSequence',
            default:0,
            dependencies:[
                'notifications',
                'notificationsMessage',
            ],
        }),
        /**
         *Relatedthreadwhenthenotificationgroupconcernsasinglethread.
         */
        thread:many2one('mail.thread',{
            compute:'_computeThread',
            dependencies:[
                'res_model',
                'notifications',
                'notificationsMessage',
                'notificationsMessageOriginThread',
            ],
        })
    };

    NotificationGroup.modelName='mail.notification_group';

    returnNotificationGroup;
}

registerNewModel('mail.notification_group',factory);

});
