flectra.define('mail/static/src/models/attachment/attachment.js',function(require){
'usestrict';

const{registerNewModel}=require('mail/static/src/model/model_core.js');
const{attr,many2many,many2one}=require('mail/static/src/model/model_field.js');
const{clear}=require('mail/static/src/model/model_field_command.js');

functionfactory(dependencies){

    letnextTemporaryId=-1;
    functiongetAttachmentNextTemporaryId(){
        constid=nextTemporaryId;
        nextTemporaryId-=1;
        returnid;
    }
    classAttachmentextendsdependencies['mail.model']{

        //----------------------------------------------------------------------
        //Public
        //----------------------------------------------------------------------

        /**
         *@static
         *@param{Object}data
         *@return{Object}
         */
        staticconvertData(data){
            constdata2={};
            if('checksum'indata){
                data2.checksum=data.checksum;
            }
            if('filename'indata){
                data2.filename=data.filename;
            }
            if('id'indata){
                data2.id=data.id;
            }
            if('is_main'indata){
                data2.is_main=data.is_main;
            }
            if('mimetype'indata){
                data2.mimetype=data.mimetype;
            }
            if('name'indata){
                data2.name=data.name;
            }

            //relation
            if('res_id'indata&&'res_model'indata){
                data2.originThread=[['insert',{
                    id:data.res_id,
                    model:data.res_model,
                }]];
            }

            returndata2;
        }

        /**
         *@override
         */
        staticcreate(data){
            constisMulti=typeofdata[Symbol.iterator]==='function';
            constdataList=isMulti?data:[data];
            for(constdataofdataList){
                if(!data.id){
                    data.id=getAttachmentNextTemporaryId();
                }
            }
            returnsuper.create(...arguments);
        }

        /**
         *Viewprovidedattachment(s),withgivenattachmentinitially.Prompts
         *theattachmentviewer.
         *
         *@static
         *@param{Object}param0
         *@param{mail.attachment}[param0.attachment]
         *@param{mail.attachments[]}param0.attachments
         *@returns{string|undefined}uniqueidofopendialog,ifopen
         */
        staticview({attachment,attachments}){
            consthasOtherAttachments=attachments&&attachments.length>0;
            if(!attachment&&!hasOtherAttachments){
                return;
            }
            if(!attachment&&hasOtherAttachments){
                attachment=attachments[0];
            }elseif(attachment&&!hasOtherAttachments){
                attachments=[attachment];
            }
            if(!attachments.includes(attachment)){
                return;
            }
            this.env.messaging.dialogManager.open('mail.attachment_viewer',{
                attachment:[['link',attachment]],
                attachments:[['replace',attachments]],
            });
        }

        /**
         *Removethisattachmentglobally.
         */
        asyncremove(){
            if(this.isUnlinkPending){
                return;
            }
            if(!this.isTemporary){
                this.update({isUnlinkPending:true});
                try{
                    awaitthis.async(()=>this.env.services.rpc({
                        model:'ir.attachment',
                        method:'unlink',
                        args:[this.id],
                    },{shadow:true}));
                }finally{
                    this.update({isUnlinkPending:false});
                }
            }elseif(this.uploadingAbortController){
                this.uploadingAbortController.abort();
            }
            this.delete();
        }

        //----------------------------------------------------------------------
        //Private
        //----------------------------------------------------------------------

        /**
         *@override
         */
        static_createRecordLocalId(data){
            return`${this.modelName}_${data.id}`;
        }

        /**
         *@private
         *@returns{string|FieldCommand}
         */
        _computeCheckSum(){
            returnthis.checksum===undefined?clear():this.checksum;
        }

        /**
         *@private
         *@returns{mail.composer[]}
         */
        _computeComposers(){
            if(this.isTemporary){
                return[];
            }
            constrelatedTemporaryAttachment=this.env.models['mail.attachment']
                .find(attachment=>
                    attachment.filename===this.filename&&
                    attachment.isTemporary
                );
            if(relatedTemporaryAttachment){
                constcomposers=relatedTemporaryAttachment.composers;
                relatedTemporaryAttachment.delete();
                return[['replace',composers]];
            }
            return[];
        }

        /**
         *@private
         *@returns{string|undefined}
         */
        _computeDefaultSource(){
            if(this.fileType==='image'){
                return`/web/image/${this.id}?unique=1&amp;signature=${this.checksum}&amp;model=ir.attachment`;
            }
            if(this.fileType==='application/pdf'){
                return`/web/static/lib/pdfjs/web/viewer.html?file=/web/content/${this.id}?model%3Dir.attachment#pagemode=none`;
            }
            if(this.fileType&&this.fileType.includes('text')){
                return`/web/content/${this.id}?model%3Dir.attachment`;
            }
            if(this.fileType==='youtu'){
                consturlArr=this.url.split('/');
                lettoken=urlArr[urlArr.length-1];
                if(token.includes('watch')){
                    token=token.split('v=')[1];
                    constamp=token.indexOf('&');
                    if(amp!==-1){
                        token=token.substring(0,amp);
                    }
                }
                return`https://www.youtube.com/embed/${token}`;
            }
            if(this.fileType==='video'){
                return`/web/content/${this.id}?model=ir.attachment`;
            }
            returnclear();
        }

        /**
         *@private
         *@returns{string|undefined}
         */
        _computeDisplayName(){
            constdisplayName=this.name||this.filename;
            if(displayName){
                returndisplayName;
            }
            returnclear();
        }

        /**
         *@private
         *@returns{string|undefined}
         */
        _computeExtension(){
            constextension=this.filename&&this.filename.split('.').pop();
            if(extension){
                returnextension;
            }
            returnclear();
        }

        /**
         *@private
         *@returns{string|undefined}
         */
        _computeFileType(){
            if(this.type==='url'&&!this.url){
                returnclear();
            }elseif(!this.mimetype){
                returnclear();
            }
            switch(this.mimetype){
                case'application/pdf':
                    return'application/pdf';
                case'image/bmp':
                case'image/gif':
                case'image/jpeg':
                case'image/png':
                case'image/svg+xml':
                case'image/tiff':
                case'image/x-icon':
                    return'image';
                case'application/javascript':
                case'application/json':
                case'text/css':
                case'text/html':
                case'text/plain':
                    return'text';
                case'audio/mpeg':
                case'video/x-matroska':
                case'video/mp4':
                case'video/webm':
                    return'video';
            }
            if(!this.url){
                returnclear();
            }
            if(this.url.match('(.png|.jpg|.gif)')){
                return'image';
            }
            if(this.url.includes('youtu')){
                return'youtu';
            }
            returnclear();
        }

        /**
         *@private
         *@returns{boolean}
         */
        _computeIsLinkedToComposer(){
            returnthis.composers.length>0;
        }

        /**
         *@private
         *@returns{boolean}
         */
        _computeIsTextFile(){
            if(!this.fileType){
                returnfalse;
            }
            returnthis.fileType==='text';
        }

        /**
         *@private
         *@returns{boolean}
         */
        _computeIsViewable(){
            switch(this.mimetype){
                case'application/javascript':
                case'application/json':
                case'application/pdf':
                case'audio/mpeg':
                case'image/bmp':
                case'image/gif':
                case'image/jpeg':
                case'image/png':
                case'image/svg+xml':
                case'image/tiff':
                case'image/x-icon':
                case'text/css':
                case'text/html':
                case'text/plain':
                case'video/x-matroska':
                case'video/mp4':
                case'video/webm':
                    returntrue;
                default:
                    returnfalse;
            }
        }

        /**
         *@deprecated
         *@private
         *@returns{string}
         */
        _computeMediaType(){
            returnthis.mimetype&&this.mimetype.split('/').shift();
        }

        /**
         *@private
         *@returns{AbortController|undefined}
         */
        _computeUploadingAbortController(){
            if(this.isTemporary){
                if(!this.uploadingAbortController){
                    constabortController=newAbortController();
                    abortController.signal.onabort=()=>{
                        this.env.messagingBus.trigger('o-attachment-upload-abort',{
                            attachment:this
                        });
                    };
                    returnabortController;
                }
                returnthis.uploadingAbortController;
            }
            returnundefined;
        }
    }

    Attachment.fields={
        activities:many2many('mail.activity',{
            inverse:'attachments',
        }),
        attachmentViewer:many2many('mail.attachment_viewer',{
            inverse:'attachments',
        }),
        checksum:attr(),
        /**
         *Deprecated,usechecksuminstead.
         */
        checkSum:attr({
            compute:'_computeCheckSum',
            dependencies:[
                'checksum',
            ],
        }),
        composers:many2many('mail.composer',{
            compute:'_computeComposers',
            inverse:'attachments',
        }),
        defaultSource:attr({
            compute:'_computeDefaultSource',
            dependencies:[
                'checksum',
                'fileType',
                'id',
                'url',
            ],
        }),
        displayName:attr({
            compute:'_computeDisplayName',
            dependencies:[
                'filename',
                'name',
            ],
        }),
        extension:attr({
            compute:'_computeExtension',
            dependencies:['filename'],
        }),
        filename:attr(),
        fileType:attr({
            compute:'_computeFileType',
            dependencies:[
                'mimetype',
                'type',
                'url',
            ],
        }),
        id:attr(),
        isLinkedToComposer:attr({
            compute:'_computeIsLinkedToComposer',
            dependencies:['composers'],
        }),
        is_main:attr(),
        isTemporary:attr({
            default:false,
        }),
        isTextFile:attr({
            compute:'_computeIsTextFile',
            dependencies:['fileType'],
        }),
        /**
         *TrueifanunlinkRPCispending,usedtopreventmultipleunlinkattempts.
         */
        isUnlinkPending:attr({
            default:false,
        }),
        isViewable:attr({
            compute:'_computeIsViewable',
            dependencies:[
                'mimetype',
            ],
        }),
        /**
         *@deprecated
         */
        mediaType:attr({
            compute:'_computeMediaType',
            dependencies:['mimetype'],
        }),
        messages:many2many('mail.message',{
            inverse:'attachments',
        }),
        mimetype:attr({
            default:'',
        }),
        name:attr(),
        originThread:many2one('mail.thread',{
            inverse:'originThreadAttachments',
        }),
        size:attr(),
        threads:many2many('mail.thread',{
            inverse:'attachments',
        }),
        type:attr(),
        /**
         *AbortControllerlinkedtotheuploadingprocessofthisattachment.
         *Usefulinordertocancelthein-progressuploadingofthisattachment.
         */
        uploadingAbortController:attr({
            compute:'_computeUploadingAbortController',
            dependencies:[
                'isTemporary',
                'uploadingAbortController',
            ],
        }),
        url:attr(),
    };

    Attachment.modelName='mail.attachment';

    returnAttachment;
}

registerNewModel('mail.attachment',factory);

});
