flectra.define('mail/static/src/models/activity/activity/js',function(require){
'usestrict';

const{registerNewModel}=require('mail/static/src/model/model_core.js');
const{attr,many2many,many2one}=require('mail/static/src/model/model_field.js');
const{clear}=require('mail/static/src/model/model_field_command.js');

functionfactory(dependencies){

    classActivityextendsdependencies['mail.model']{


        //----------------------------------------------------------------------
        //Public
        //----------------------------------------------------------------------

        /**
         *Deletetherecordfromdatabaseandlocally.
         */
        asyncdeleteServerRecord(){
            awaitthis.async(()=>this.env.services.rpc({
                model:'mail.activity',
                method:'unlink',
                args:[[this.id]],
            }));
            this.delete();
        }

        //----------------------------------------------------------------------
        //Public
        //----------------------------------------------------------------------

        /**
         *@static
         *@param{Object}data
         *@return{Object}
         */
        staticconvertData(data){
            constdata2={};
            if('activity_category'indata){
                data2.category=data.activity_category;
            }
            if('can_write'indata){
                data2.canWrite=data.can_write;
            }
            if('create_date'indata){
                data2.dateCreate=data.create_date;
            }
            if('date_deadline'indata){
                data2.dateDeadline=data.date_deadline;
            }
            if('force_next'indata){
                data2.force_next=data.force_next;
            }
            if('icon'indata){
                data2.icon=data.icon;
            }
            if('id'indata){
                data2.id=data.id;
            }
            if('note'indata){
                data2.note=data.note;
            }
            if('state'indata){
                data2.state=data.state;
            }
            if('summary'indata){
                data2.summary=data.summary;
            }

            //relation
            if('activity_type_id'indata){
                if(!data.activity_type_id){
                    data2.type=[['unlink-all']];
                }else{
                    data2.type=[
                        ['insert',{
                            displayName:data.activity_type_id[1],
                            id:data.activity_type_id[0],
                        }],
                    ];
                }
            }
            if('create_uid'indata){
                if(!data.create_uid){
                    data2.creator=[['unlink-all']];
                }else{
                    data2.creator=[
                        ['insert',{
                            id:data.create_uid[0],
                            display_name:data.create_uid[1],
                        }],
                    ];
                }
            }
            if('mail_template_ids'indata){
                data2.mailTemplates=[['insert',data.mail_template_ids]];
            }
            if('res_id'indata&&'res_model'indata){
                data2.thread=[['insert',{
                    id:data.res_id,
                    model:data.res_model,
                }]];
            }
            if('user_id'indata){
                if(!data.user_id){
                    data2.assignee=[['unlink-all']];
                }else{
                    data2.assignee=[
                        ['insert',{
                            id:data.user_id[0],
                            display_name:data.user_id[1],
                        }],
                    ];
                }
            }
            if('request_partner_id'indata){
                if(!data.request_partner_id){
                    data2.requestingPartner=[['unlink']];
                }else{
                    data2.requestingPartner=[
                        ['insert',{
                            id:data.request_partner_id[0],
                            display_name:data.request_partner_id[1],
                        }],
                    ];
                }
            }

            returndata2;
        }

        /**
         *Opens(legacy)formviewdialogtoeditcurrentactivityandupdates
         *theactivitywhendialogisclosed.
         *
         *@return{Promise}promisethatisfulfilledwhentheformhasbeenclosed
         */
        edit(){
            constaction={
                type:'ir.actions.act_window',
                name:this.env._t("ScheduleActivity"),
                res_model:'mail.activity',
                view_mode:'form',
                views:[[false,'form']],
                target:'new',
                context:{
                    default_res_id:this.thread.id,
                    default_res_model:this.thread.model,
                },
                res_id:this.id,
            };
            returnnewPromise(resolve=>{
                this.env.bus.trigger('do-action',{
                    action,
                    options:{
                        on_close:()=>{
                            resolve();
                            this.fetchAndUpdate();
                        },
                    },
                });
            });
        }

        asyncfetchAndUpdate(){
            const[data]=awaitthis.async(()=>this.env.services.rpc({
                model:'mail.activity',
                method:'activity_format',
                args:[this.id],
            },{shadow:true}));
            letshouldDelete=false;
            if(data){
                this.update(this.constructor.convertData(data));
            }else{
                shouldDelete=true;
            }
            this.thread.refreshActivities();
            this.thread.refresh();
            if(shouldDelete){
                this.delete();
            }
        }

        /**
         *@param{Object}param0
         *@param{mail.attachment[]}[param0.attachments=[]]
         *@param{string|boolean}[param0.feedback=false]
         */
        asyncmarkAsDone({attachments=[],feedback=false}){
            constattachmentIds=attachments.map(attachment=>attachment.id);
            awaitthis.async(()=>this.env.services.rpc({
                model:'mail.activity',
                method:'action_feedback',
                args:[[this.id]],
                kwargs:{
                    attachment_ids:attachmentIds,
                    feedback,
                },
            }));
            this.thread.refresh();
            this.delete();
        }

        /**
         *@param{Object}param0
         *@param{string}param0.feedback
         *@returns{Object}
         */
        asyncmarkAsDoneAndScheduleNext({feedback}){
            constaction=awaitthis.async(()=>this.env.services.rpc({
                model:'mail.activity',
                method:'action_feedback_schedule_next',
                args:[[this.id]],
                kwargs:{feedback},
            }));
            this.thread.refresh();
            constthread=this.thread;
            this.delete();
            if(!action){
                thread.refreshActivities();
                return;
            }
            this.env.bus.trigger('do-action',{
                action,
                options:{
                    on_close:()=>{
                        thread.refreshActivities();
                    },
                },
            });
        }

        //----------------------------------------------------------------------
        //Private
        //----------------------------------------------------------------------

        /**
         *@override
         */
        static_createRecordLocalId(data){
            return`${this.modelName}_${data.id}`;
        }

        /**
         *@private
         *@returns{boolean}
         */
        _computeIsCurrentPartnerAssignee(){
            if(!this.assigneePartner||!this.messagingCurrentPartner){
                returnfalse;
            }
            returnthis.assigneePartner===this.messagingCurrentPartner;
        }

        /**
         *@private
         *@returns{mail.messaging}
         */
        _computeMessaging(){
            return[['link',this.env.messaging]];
        }

        /**
         *Wysiwygeditorput`<p><br></p>`evenwithoutanoteontheactivity.
         *Thiscomputereplacesthisalmostemptyvaluebyanactualempty
         *value,toreducethesizetheemptynotetakesontheUI.
         *
         *@private
         *@returns{string|undefined}
         */
        _computeNote(){
            if(this.note==='<p><br></p>'){
                returnclear();
            }
            returnthis.note;
        }
    }

    Activity.fields={
        assignee:many2one('mail.user'),
        assigneePartner:many2one('mail.partner',{
            related:'assignee.partner',
        }),
        attachments:many2many('mail.attachment',{
            inverse:'activities',
        }),
        canWrite:attr({
            default:false,
        }),
        category:attr(),
        creator:many2one('mail.user'),
        dateCreate:attr(),
        dateDeadline:attr(),
        /**
         *Backupofthefeedbackcontentofanactivitytobemarkedasdoneinthepopover.
         *Feature-specifictorestoringthefeedbackcontentwhencomponentisre-mounted.
         *Inallothercases,thisfieldvalueshouldnotbetrusted.
         */
        feedbackBackup:attr(),
        force_next:attr({
            default:false,
        }),
        icon:attr(),
        id:attr(),
        isCurrentPartnerAssignee:attr({
            compute:'_computeIsCurrentPartnerAssignee',
            default:false,
            dependencies:[
                'assigneePartner',
                'messagingCurrentPartner',
            ],
        }),
        mailTemplates:many2many('mail.mail_template',{
            inverse:'activities',
        }),
        messaging:many2one('mail.messaging',{
            compute:'_computeMessaging',
        }),
        messagingCurrentPartner:many2one('mail.partner',{
            related:'messaging.currentPartner',
        }),
        /**
         *Thisvalueismeanttobereturnedbytheserver
         *(andhasbeensanitizedbeforestoredintodb).
         *Donotusethisvalueina't-raw'iftheactivityhasbeencreated
         *directlyfromuserinputandnotfromserverdataasit'snotescaped.
         */
        note:attr({
            compute:'_computeNote',
            dependencies:[
                'note',
            ],
        }),
        /**
         *Determinesthatanactivityislinkedtoarequestingpartnerornot.
         *Itwillbeusednotablyinwebsiteslidestoknowwhotriggeredthe
         *"requestaccess"activity.
         *Also,beusefulwhentheassigneduserisdifferentfromthe
         *"source"or"requesting"partner.
         */
        requestingPartner:many2one('mail.partner'),
        state:attr(),
        summary:attr(),
        /**
         *Determinestowhich"thread"(using`mail.activity.mixin`onthe
         *server)`this`belongsto.
         */
        thread:many2one('mail.thread',{
            inverse:'activities',
        }),
        type:many2one('mail.activity_type',{
            inverse:'activities',
        }),
    };

    Activity.modelName='mail.activity';

    returnActivity;
}

registerNewModel('mail.activity',factory);

});
