flectra.define('mail/static/src/models/thread_viewer/thread_viewer.js',function(require){
'usestrict';

const{registerNewModel}=require('mail/static/src/model/model_core.js');
const{attr,many2one,one2one}=require('mail/static/src/model/model_field.js');

functionfactory(dependencies){

    classThreadViewerextendsdependencies['mail.model']{

        //----------------------------------------------------------------------
        //Public
        //----------------------------------------------------------------------

        /**
         *@param{integer}scrollHeight
         *@param{mail.thread_cache}threadCache
         */
        saveThreadCacheScrollHeightAsInitial(scrollHeight,threadCache){
            threadCache=threadCache||this.threadCache;
            if(!threadCache){
                return;
            }
            if(this.chatter){
                //Initialscrollheightisdisabledforchatterbecauseitis
                //toocomplextohandlecorrectlyandlessimportant
                //functionally.
                return;
            }
            this.update({
                threadCacheInitialScrollHeights:Object.assign({},this.threadCacheInitialScrollHeights,{
                    [threadCache.localId]:scrollHeight,
                }),
            });
        }

        /**
         *@param{integer}scrollTop
         *@param{mail.thread_cache}threadCache
         */
        saveThreadCacheScrollPositionsAsInitial(scrollTop,threadCache){
            threadCache=threadCache||this.threadCache;
            if(!threadCache){
                return;
            }
            if(this.chatter){
                //Initialscrollpositionisdisabledforchatterbecauseitis
                //toocomplextohandlecorrectlyandlessimportant
                //functionally.
                return;
            }
            this.update({
                threadCacheInitialScrollPositions:Object.assign({},this.threadCacheInitialScrollPositions,{
                    [threadCache.localId]:scrollTop,
                }),
            });
        }

        //----------------------------------------------------------------------
        //Private
        //----------------------------------------------------------------------

        /**
         *@private
         *@returns{boolean}
         */
        _computeHasThreadView(){
            if(this.chatter){
                returnthis.chatter.hasThreadView;
            }
            if(this.chatWindow){
                returnthis.chatWindow.hasThreadView;
            }
            if(this.discuss){
                returnthis.discuss.hasThreadView;
            }
            returnthis.hasThreadView;
        }

        /**
         *@private
         *@returns{string}
         */
        _computeStringifiedDomain(){
            if(this.chatter){
                return'[]';
            }
            if(this.chatWindow){
                return'[]';
            }
            if(this.discuss){
                returnthis.discuss.stringifiedDomain;
            }
            returnthis.stringifiedDomain;
        }

        /**
         *@private
         *@returns{mail.thread|undefined}
         */
         _computeThread(){
            if(this.chatter){
                if(!this.chatter.thread){
                    return[['unlink']];
                }
                return[['link',this.chatter.thread]];
            }
            if(this.chatWindow){
                if(!this.chatWindow.thread){
                    return[['unlink']];
                }
                return[['link',this.chatWindow.thread]];
            }
            if(this.discuss){
                if(!this.discuss.thread){
                    return[['unlink']];
                }
                return[['link',this.discuss.thread]];
            }
            return[];
        }

        /**
         *@private
         *@returns{mail.thread_cache|undefined}
         */
        _computeThreadCache(){
            if(!this.thread){
                return[['unlink']];
            }
            return[['link',this.thread.cache(this.stringifiedDomain)]];
        }

        /**
         *@private
         *@returns{mail.thread_viewer|undefined}
         */
        _computeThreadView(){
            if(!this.hasThreadView){
                return[['unlink']];
            }
            if(this.threadView){
                return[];
            }
            return[['create']];
        }

    }

    ThreadViewer.fields={
        /**
         *Statesthe`mail.chatter`managing`this`.Thisfieldiscomputed
         *throughtheinverserelationandshouldbeconsideredread-only.
         */
        chatter:one2one('mail.chatter',{
            inverse:'threadViewer',
        }),
        /**
         *Servesascomputedependency.
         */
        chatterHasThreadView:attr({
            related:'chatter.hasThreadView',
        }),
        /**
         *Servesascomputedependency.
         */
        chatterThread:many2one('mail.thread',{
            related:'chatter.thread',
        }),
        /**
         *Statesthe`mail.chat_window`managing`this`.Thisfieldiscomputed
         *throughtheinverserelationandshouldbeconsideredread-only.
         */
        chatWindow:one2one('mail.chat_window',{
            inverse:'threadViewer',
        }),
        /**
         *Servesascomputedependency.
         */
        chatWindowHasThreadView:attr({
            related:'chatWindow.hasThreadView',
        }),
        /**
         *Servesascomputedependency.
         */
        chatWindowThread:many2one('mail.thread',{
            related:'chatWindow.thread',
        }),
        /**
         *Statesthe`mail.discuss`managing`this`.Thisfieldiscomputed
         *throughtheinverserelationandshouldbeconsideredread-only.
         */
        discuss:one2one('mail.discuss',{
            inverse:'threadViewer',
        }),
        /**
         *Servesascomputedependency.
         */
        discussHasThreadView:attr({
            related:'discuss.hasThreadView',
        }),
        /**
         *Servesascomputedependency.
         */
        discussStringifiedDomain:attr({
            related:'discuss.stringifiedDomain',
        }),
        /**
         *Servesascomputedependency.
         */
        discussThread:many2one('mail.thread',{
            related:'discuss.thread',
        }),
        /**
         *Determineswhether`this.thread`shouldbedisplayed.
         */
        hasThreadView:attr({
            compute:'_computeHasThreadView',
            default:false,
            dependencies:[
                'chatterHasThreadView',
                'chatWindowHasThreadView',
                'discussHasThreadView',
            ],
        }),
        /**
         *Determinesthedomaintoapplywhenfetchingmessagesfor`this.thread`.
         */
        stringifiedDomain:attr({
            compute:'_computeStringifiedDomain',
            default:'[]',
            dependencies:[
                'discussStringifiedDomain',
            ],
        }),
        /**
         *Determinesthe`mail.thread`thatshouldbedisplayedby`this`.
         */
        thread:many2one('mail.thread',{
            compute:'_computeThread',
            dependencies:[
                'chatterThread',
                'chatWindowThread',
                'discussThread',
            ],
        }),
        /**
         *Statesthe`mail.thread_cache`thatshouldbedisplayedby`this`.
         */
        threadCache:many2one('mail.thread_cache',{
            compute:'_computeThreadCache',
            dependencies:[
                'stringifiedDomain',
                'thread',
            ],
        }),
        /**
         *Determinestheinitialscrollheightofthreadcaches,whichisthe
         *scrollheightatthetimethelastscrollpositionwassaved.
         *Usefultoonlyrestorescrollpositionwhenthecorrespondingheight
         *isavailable,otherwisetherestoremakesnosense.
         */
        threadCacheInitialScrollHeights:attr({
            default:{},
        }),
        /**
         *Determinestheinitialscrollpositionsofthreadcaches.
         *Usefultorestorescrollpositiononchangingbacktothis
         *threadcache.Notethatthisisonlyappliedwhenopening
         *thethreadcache,becausescrollpositionmaychangefastso
         *saveisalreadythrottled.
         */
        threadCacheInitialScrollPositions:attr({
            default:{},
        }),
        /**
         *Statesthe`mail.thread_view`currentlydisplayedandmanagedby`this`.
         */
        threadView:one2one('mail.thread_view',{
            compute:'_computeThreadView',
            dependencies:[
                'hasThreadView',
            ],
            inverse:'threadViewer',
            isCausal:true,
        }),
    };

    ThreadViewer.modelName='mail.thread_viewer';

    returnThreadViewer;
}

registerNewModel('mail.thread_viewer',factory);

});
