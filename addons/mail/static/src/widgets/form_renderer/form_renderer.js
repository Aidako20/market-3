flectra.define('mail/static/src/widgets/form_renderer/form_renderer.js',function(require){
"usestrict";

constcomponents={
    ChatterContainer:require('mail/static/src/components/chatter_container/chatter_container.js'),
};

constFormRenderer=require('web.FormRenderer');
const{ComponentWrapper}=require('web.OwlCompatibility');

classChatterContainerWrapperComponentextendsComponentWrapper{}

/**
 *IncludetheFormRenderertoinstantiatethechatterareacontaining(a
 *subsetof)themailwidgets(mail_thread,mail_followersandmail_activity).
 */
FormRenderer.include({
    /**
     *@override
     */
    init(parent,state,params){
        this._super(...arguments);
        this.chatterFields=params.chatterFields;
        this.mailFields=params.mailFields;
        this._chatterContainerComponent=undefined;
        /**
         *Thetargetofchatter,ifchatterhastobeappendedtotheDOM.
         *Thisissetwhenarchcontains`div.oe_chatter`.
         */
        this._chatterContainerTarget=undefined;
        //Donotloadchatterinformviewdialogs
        this._isFromFormViewDialog=params.isFromFormViewDialog;
    },
    /**
     *@override
     */
    destroy(){
        this._super(...arguments);
        this._chatterContainerComponent=undefined;
        this.off('o_attachments_changed',this);
        this.off('o_chatter_rendered',this);
        this.off('o_message_posted',this);
        owl.Component.env.bus.off('mail.thread:promptAddFollower-closed',this);
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *Returnswhethertheformrendererhasachattertodisplayornot.
     *Thisisbasedonarch,whichshouldhave`div.oe_chatter`.
     *
     *@private
     *@returns{boolean}
     */
    _hasChatter(){
        return!!this._chatterContainerTarget;
    },
    /**
     *@private
     */
    _makeChatterContainerComponent(){
        constprops=this._makeChatterContainerProps();
        this._chatterContainerComponent=newChatterContainerWrapperComponent(
            this,
            components.ChatterContainer,
            props
        );
        //Notincustom_eventsbecauseothermodulesmayremovethislistener
        //whileattemptingtoextendthem.
        this.on('o_chatter_rendered',this,ev=>this._onChatterRendered(ev));
        if(this.chatterFields.hasRecordReloadOnMessagePosted){
            this.on('o_message_posted',this,ev=>{
                this.trigger_up('reload',{keepChanges:true});
            });
        }
        if(this.chatterFields.hasRecordReloadOnAttachmentsChanged){
            this.on('o_attachments_changed',this,ev=>this.trigger_up('reload',{keepChanges:true}));
        }
        if(this.chatterFields.hasRecordReloadOnFollowersUpdate){
            owl.Component.env.bus.on('mail.thread:promptAddFollower-closed',this,ev=>this.trigger_up('reload',{keepChanges:true}));
        }
    },
    /**
     *@private
     *@returns{Object}
     */
    _makeChatterContainerProps(){
        return{
            hasActivities:this.chatterFields.hasActivityIds,
            hasFollowers:this.chatterFields.hasMessageFollowerIds,
            hasMessageList:this.chatterFields.hasMessageIds,
            isAttachmentBoxVisibleInitially:this.chatterFields.isAttachmentBoxVisibleInitially,
            threadId:this.state.res_id,
            threadModel:this.state.model,
        };
    },
    /**
     *CreatetheDOMelementthatwillcontainthechatter.Thisismadein
     *aseparatemethodsoitcanbeoverridden(likeinmail_enterprisefor
     *example).
     *
     *@private
     *@returns{jQuery.Element}
     */
    _makeChatterContainerTarget(){
        const$el=$('<divclass="o_FormRenderer_chatterContainer"/>');
        this._chatterContainerTarget=$el[0];
        return$el;
    },
    /**
     *Mountthechatter
     *
     *Forcere-mountingchattercomponentinDOM.Thisisnecessary
     *becauseeachtime`_renderView`iscalled,itputsoldcontent
     *inafragment.
     *
     *@private
     */
    async_mountChatterContainerComponent(){
        try{
            awaitthis._chatterContainerComponent.mount(this._chatterContainerTarget);
        }catch(error){
            if(error.message!=="Mountingoperationcancelled"){
                throwerror;
            }
        }
    },
    /**
     *@override
     */
    _renderNode(node){
        if(node.tag==='div'&&node.attrs.class==='oe_chatter'){
            if(this._isFromFormViewDialog){
                return$('<div/>');
            }
            returnthis._makeChatterContainerTarget();
        }
        returnthis._super(...arguments);
    },
    /**
     *Overridesthefunctiontorenderthechatteroncetheformviewis
     *rendered.
     *
     *@override
     */
    async__renderView(){
        awaitthis._super(...arguments);
        if(this._hasChatter()){
            if(!this._chatterContainerComponent){
                this._makeChatterContainerComponent();
            }else{
                awaitthis._updateChatterContainerComponent();
            }
            awaitthis._mountChatterContainerComponent();
        }
    },
    /**
     *@private
     */
    async_updateChatterContainerComponent(){
        constprops=this._makeChatterContainerProps();
        try{
            awaitthis._chatterContainerComponent.update(props);
        }catch(error){
            if(error.message!=="Mountingoperationcancelled"){
                throwerror;
            }
        }
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *@abstract
     *@private
     *@param{FlectraEvent}ev
     *@param{Object}ev.data
     *@param{mail.attachment[]}ev.data.attachments
     *@param{mail.thread}ev.data.thread
     */
    _onChatterRendered(ev){},
});

});
