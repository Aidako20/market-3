flectra.define('mail/static/src/widgets/form_renderer/form_renderer_tests.js',function(require){
"usestrict";

const{makeDeferred}=require('mail/static/src/utils/deferred/deferred.js');
const{
    afterEach,
    afterNextRender,
    beforeEach,
    isScrolledToBottom,
    nextAnimationFrame,
    start,
}=require('mail/static/src/utils/test_utils.js');

constconfig=require('web.config');
constFormView=require('web.FormView');
const{
    dom:{triggerEvent},
}=require('web.test_utils');

QUnit.module('mail',{},function(){
QUnit.module('widgets',{},function(){
QUnit.module('form_renderer',{},function(){
QUnit.module('form_renderer_tests.js',{
    beforeEach(){
        beforeEach(this);

        //FIXMEarchscouldberemovedoncetask-2248306isdone
        //ThemockServerwilltrytogetthelistview
        //ofeveryrelationalfieldspresentinthemainview.
        //Inthecaseofmailfields,wedon'treallyneedthem,
        //buttheystillneedtobedefined.
        this.createView=async(viewParams,...args)=>{
            awaitafterNextRender(async()=>{
                constviewArgs=Object.assign(
                    {
                        archs:{
                            'mail.activity,false,list':'<tree/>',
                            'mail.followers,false,list':'<tree/>',
                            'mail.message,false,list':'<tree/>',
                        },
                    },
                    viewParams,
                );
                const{afterEvent,env,widget}=awaitstart(viewArgs,...args);
                this.afterEvent=afterEvent;
                this.env=env;
                this.widget=widget;
            });
        };
    },
    afterEach(){
        afterEach(this);
    },
});

QUnit.test('[technical]spinnerwhenmessagingisnotcreated',asyncfunction(assert){
    /**
     *Creationofmessaginginenvisasyncduetogenerationofmodelsbeing
     *async.Generationofmodelsisasyncbecauseitrequiresparsingofall
     *JSmodulesthatcontainpiecesofmodeldefinitions.
     *
     *Timeofhavingnomessagingisveryshort,almostimperceptiblebyuser
     *onUI,butthedisplayshouldnotcrashduringthiscriticaltimeperiod.
     */
    assert.expect(3);

    this.data['res.partner'].records.push({
        display_name:"secondpartner",
        id:12,
    });
    awaitthis.createView({
        data:this.data,
        hasView:true,
        messagingBeforeCreationDeferred:makeDeferred(),//blockmessagingcreation
        waitUntilMessagingCondition:'none',
        //Viewparams
        View:FormView,
        model:'res.partner',
        arch:`
            <formstring="Partners">
                <sheet>
                    <fieldname="name"/>
                </sheet>
                <divclass="oe_chatter"></div>
            </form>
        `,
        res_id:12,
    });
    assert.containsOnce(
        document.body,
        '.o_ChatterContainer',
        "shoulddisplaychattercontainerevenwhenmessagingisnotcreatedyet"
    );
    assert.containsOnce(
        document.body,
        '.o_ChatterContainer_noChatter',
        "chattercontainershouldnotdisplayanychatterwhenmessagingnotcreated"
    );
    assert.strictEqual(
        document.querySelector('.o_ChatterContainer').textContent,
        "Pleasewait...",
        "chattercontainershoulddisplayspinnerwhenmessagingnotyetcreated"
    );
});

QUnit.test('[technical]keepspinnerontransitionfrommessagingnon-createdtomessagingcreated(andnon-initialized)',asyncfunction(assert){
    /**
     *Creationofmessaginginenvisasyncduetogenerationofmodelsbeing
     *async.Generationofmodelsisasyncbecauseitrequiresparsingofall
     *JSmodulesthatcontainpiecesofmodeldefinitions.
     *
     *Timeofhavingnomessagingisveryshort,almostimperceptiblebyuser
     *onUI,butthedisplayshouldnotcrashduringthiscriticaltimeperiod.
     */
    assert.expect(4);

    constmessagingBeforeCreationDeferred=makeDeferred();
    this.data['res.partner'].records.push({
        display_name:"secondpartner",
        id:12,
    });
    awaitthis.createView({
        data:this.data,
        hasView:true,
        messagingBeforeCreationDeferred,
        asyncmockRPC(route,args){
            const_super=this._super.bind(this,...arguments);//limitationofclass.js
            if(route==='/mail/init_messaging'){
                awaitnewPromise(()=>{});//simulatemessagingneverinitialized
            }
            return_super();
        },
        waitUntilMessagingCondition:'none',
        //Viewparams
        View:FormView,
        model:'res.partner',
        arch:`
            <formstring="Partners">
                <sheet>
                    <fieldname="name"/>
                </sheet>
                <divclass="oe_chatter"></div>
            </form>
        `,
        res_id:12,
    });
    assert.strictEqual(
        document.querySelector('.o_ChatterContainer').textContent,
        "Pleasewait...",
        "chattercontainershoulddisplayspinnerwhenmessagingnotyetcreated"
    );
    assert.containsOnce(
        document.body,
        '.o_ChatterContainer_noChatter',
        "chattercontainershouldnotdisplayanychatterwhenmessagingnotcreated"
    );

    //simulatemessagingbecomecreated
    messagingBeforeCreationDeferred.resolve();
    awaitnextAnimationFrame();
    assert.strictEqual(
        document.querySelector('.o_ChatterContainer').textContent,
        "Pleasewait...",
        "chattercontainershouldstilldisplayspinnerwhenmessagingiscreatedbutnotinitialized"
    );
    assert.containsOnce(
        document.body,
        '.o_ChatterContainer_noChatter',
        "chattercontainershouldstillnotdisplayanychatterwhenmessagingnotinitialized"
    );
});

QUnit.test('spinnerwhenmessagingiscreatedbutnotinitialized',asyncfunction(assert){
    assert.expect(3);

    this.data['res.partner'].records.push({
        display_name:"secondpartner",
        id:12,
    });
    awaitthis.createView({
        data:this.data,
        hasView:true,
        asyncmockRPC(route,args){
            const_super=this._super.bind(this,...arguments);//limitationofclass.js
            if(route==='/mail/init_messaging'){
                awaitnewPromise(()=>{});//simulatemessagingneverinitialized
            }
            return_super();
        },
        waitUntilMessagingCondition:'created',
        //Viewparams
        View:FormView,
        model:'res.partner',
        arch:`
            <formstring="Partners">
                <sheet>
                    <fieldname="name"/>
                </sheet>
                <divclass="oe_chatter"></div>
            </form>
        `,
        res_id:12,
    });
    assert.containsOnce(
        document.body,
        '.o_ChatterContainer',
        "shoulddisplaychattercontainerevenwhenmessagingisnotfullyinitialized"
    );
    assert.containsOnce(
        document.body,
        '.o_ChatterContainer_noChatter',
        "chattercontainershouldnotdisplayanychatterwhenmessagingnotinitialized"
    );
    assert.strictEqual(
        document.querySelector('.o_ChatterContainer').textContent,
        "Pleasewait...",
        "chattercontainershoulddisplayspinnerwhenmessagingnotyetinitialized"
    );
});

QUnit.test('transitionnon-initializedmessagingtoinitializedmessaging:displayspinnerthenchatter',asyncfunction(assert){
    assert.expect(3);

    constmessagingBeforeInitializationDeferred=makeDeferred();
    this.data['res.partner'].records.push({
        display_name:"secondpartner",
        id:12,
    });
    awaitthis.createView({
        data:this.data,
        hasView:true,
        asyncmockRPC(route,args){
            const_super=this._super.bind(this,...arguments);//limitationofclass.js
            if(route==='/mail/init_messaging'){
                awaitmessagingBeforeInitializationDeferred;
            }
            return_super();
        },
        waitUntilMessagingCondition:'created',
        //Viewparams
        View:FormView,
        model:'res.partner',
        arch:`
            <formstring="Partners">
                <sheet>
                    <fieldname="name"/>
                </sheet>
                <divclass="oe_chatter"></div>
            </form>
        `,
        res_id:12,
    });
    assert.strictEqual(
        document.querySelector('.o_ChatterContainer').textContent,
        "Pleasewait...",
        "chattercontainershoulddisplayspinnerwhenmessagingnotyetinitialized"
    );
    assert.containsOnce(
        document.body,
        '.o_ChatterContainer_noChatter',
        "chattercontainershouldnotdisplayanychatterwhenmessagingnotinitialized"
    );

    //Simulatemessagingbecomesinitialized
    awaitafterNextRender(()=>messagingBeforeInitializationDeferred.resolve());
    assert.containsNone(
        document.body,
        '.o_ChatterContainer_noChatter',
        "chattercontainershouldnowdisplaychatterwhenmessagingbecomesinitialized"
    );
});

QUnit.test('basicchatterrendering',asyncfunction(assert){
    assert.expect(1);

    this.data['res.partner'].records.push({display_name:"secondpartner",id:12,});
    awaitthis.createView({
        data:this.data,
        hasView:true,
        //Viewparams
        View:FormView,
        model:'res.partner',
        arch:`
            <formstring="Partners">
                <sheet>
                    <fieldname="name"/>
                </sheet>
                <divclass="oe_chatter"></div>
            </form>
        `,
        res_id:12,
    });
    assert.strictEqual(
        document.querySelectorAll(`.o_Chatter`).length,
        1,
        "thereshouldbeachatter"
    );
});

QUnit.test('basicchatterrenderingwithoutfollowers',asyncfunction(assert){
    assert.expect(6);

    this.data['res.partner'].records.push({display_name:"secondpartner",id:12});
    awaitthis.createView({
        data:this.data,
        hasView:true,
        //Viewparams
        View:FormView,
        model:'res.partner',
        arch:`
            <formstring="Partners">
                <sheet>
                    <fieldname="name"/>
                </sheet>
                <divclass="oe_chatter">
                    <fieldname="activity_ids"/>
                    <fieldname="message_ids"/>
                </div>
            </form>
        `,
        res_id:12,
    });
    assert.containsOnce(
        document.body,
        '.o_Chatter',
        "thereshouldbeachatter"
    );
    assert.containsOnce(
        document.body,
        '.o_ChatterTopbar',
        "thereshouldbeachattertopbar"
    );
    assert.containsOnce(
        document.body,
        '.o_ChatterTopbar_buttonAttachments',
        "thereshouldbeanattachmentbutton"
    );
    assert.containsOnce(
        document.body,
        '.o_ChatterTopbar_buttonScheduleActivity',
        "thereshouldbeascheduleactivitybutton"
    );
    assert.containsNone(
        document.body,
        '.o_FollowerListMenu',
        "thereshouldbenofollowersmenubecausethe'message_follower_ids'fieldisnotpresentin'oe_chatter'"
    );
    assert.containsOnce(
        document.body,
        '.o_Chatter_thread',
        "thereshouldbeathread"
    );
});

QUnit.test('basicchatterrenderingwithoutactivities',asyncfunction(assert){
    assert.expect(6);

    this.data['res.partner'].records.push({display_name:"secondpartner",id:12});
    awaitthis.createView({
        data:this.data,
        hasView:true,
        //Viewparams
        View:FormView,
        model:'res.partner',
        arch:`
            <formstring="Partners">
                <sheet>
                    <fieldname="name"/>
                </sheet>
                <divclass="oe_chatter">
                    <fieldname="message_follower_ids"/>
                    <fieldname="message_ids"/>
                </div>
            </form>
        `,
        res_id:12,
    });
    assert.containsOnce(
        document.body,
        '.o_Chatter',
        "thereshouldbeachatter"
    );
    assert.containsOnce(
        document.body,
        '.o_ChatterTopbar',
        "thereshouldbeachattertopbar"
    );
    assert.containsOnce(
        document.body,
        '.o_ChatterTopbar_buttonAttachments',
        "thereshouldbeanattachmentbutton"
    );
    assert.containsNone(
        document.body,
        '.o_ChatterTopbar_buttonScheduleActivity',
        "thereshouldbenoscheduleactivitybuttonbecausethe'activity_ids'fieldisnotpresentin'oe_chatter'"
    );
    assert.containsOnce(
        document.body,
        '.o_FollowerListMenu',
        "thereshouldbeafollowersmenu"
    );
    assert.containsOnce(
        document.body,
        '.o_Chatter_thread',
        "thereshouldbeathread"
    );
});

QUnit.test('basicchatterrenderingwithoutmessages',asyncfunction(assert){
    assert.expect(6);

    this.data['res.partner'].records.push({display_name:"secondpartner",id:12});
    awaitthis.createView({
        data:this.data,
        hasView:true,
        //Viewparams
        View:FormView,
        model:'res.partner',
        arch:`
            <formstring="Partners">
                <sheet>
                    <fieldname="name"/>
                </sheet>
                <divclass="oe_chatter">
                    <fieldname="message_follower_ids"/>
                    <fieldname="activity_ids"/>
                </div>
            </form>
        `,
        res_id:12,
    });
    assert.containsOnce(
        document.body,
        '.o_Chatter',
        "thereshouldbeachatter"
    );
    assert.containsOnce(
        document.body,
        '.o_ChatterTopbar',
        "thereshouldbeachattertopbar"
    );
    assert.containsOnce(
        document.body,
        '.o_ChatterTopbar_buttonAttachments',
        "thereshouldbeanattachmentbutton"
    );
    assert.containsOnce(
        document.body,
        '.o_ChatterTopbar_buttonScheduleActivity',
        "thereshouldbeascheduleactivitybutton"
    );
    assert.containsOnce(
        document.body,
        '.o_FollowerListMenu',
        "thereshouldbeafollowersmenu"
    );
    assert.containsNone(
        document.body,
        '.o_Chatter_thread',
        "thereshouldbenothreadbecausethe'message_ids'fieldisnotpresentin'oe_chatter'"
    );
});

QUnit.test('chatterupdating',asyncfunction(assert){
    assert.expect(1);

    this.data['mail.message'].records.push({body:"notempty",model:'res.partner',res_id:12});
    this.data['res.partner'].records.push(
        {display_name:"firstpartner",id:11},
        {display_name:"secondpartner",id:12}
    );
    awaitthis.createView({
        data:this.data,
        hasView:true,
        //Viewparams
        View:FormView,
        model:'res.partner',
        res_id:11,
        viewOptions:{
            ids:[11,12],
            index:0,
        },
        arch:`
            <formstring="Partners">
                <sheet>
                    <fieldname="name"/>
                </sheet>
                <divclass="oe_chatter">
                    <fieldname="message_ids"/>
                </div>
            </form>
        `,
        waitUntilEvent:{
            eventName:'o-thread-view-hint-processed',
            message:"shouldwaituntilpartner11threadloadedmessagesinitially",
            predicate:({hint,threadViewer})=>{
                return(
                    hint.type==='messages-loaded'&&
                    threadViewer.thread.model==='res.partner'&&
                    threadViewer.thread.id===11
                );
            },
        }
    });

    awaitthis.afterEvent({
        eventName:'o-thread-view-hint-processed',
        func:()=>document.querySelector('.o_pager_next').click(),
        message:"shouldwaituntilpartner12threadloadedmessagesafterclickingonnext",
        predicate:({hint,threadViewer})=>{
            return(
                hint.type==='messages-loaded'&&
                threadViewer.thread.model==='res.partner'&&
                threadViewer.thread.id===12
            );
        },
    });
    assert.containsOnce(
        document.body,
        '.o_Message',
        "thereshouldbeamessageinpartner12thread"
    );
});

QUnit.test('chattershouldbecomeenabledwhencreationdone',asyncfunction(assert){
    assert.expect(10);

    awaitthis.createView({
        data:this.data,
        hasView:true,
        //Viewparams
        View:FormView,
        model:'res.partner',
        arch:`
            <formstring="Partners">
                <sheet>
                    <fieldname="name"/>
                </sheet>
                <divclass="oe_chatter">
                    <fieldname="message_ids"/>
                </div>
            </form>
        `,
        viewOptions:{
            mode:'edit',
        },
    });
    assert.containsOnce(
        document.body,
        '.o_Chatter',
        "thereshouldbeachatter"
    );
    assert.containsOnce(
        document.body,
        '.o_ChatterTopbar_buttonSendMessage',
        "thereshouldbeasendmessagebutton"
    );
    assert.containsOnce(
        document.body,
        '.o_ChatterTopbar_buttonLogNote',
        "thereshouldbealognotebutton"
    );
    assert.containsOnce(
        document.body,
        '.o_ChatterTopbar_buttonLogNote',
        "thereshouldbeanattachmentsbutton"
    );
    assert.ok(
        document.querySelector(`.o_ChatterTopbar_buttonSendMessage`).disabled,
        "sendmessagebuttonshouldbedisabled"
    );
    assert.ok(
        document.querySelector(`.o_ChatterTopbar_buttonLogNote`).disabled,
        "lognotebuttonshouldbedisabled"
    );
    assert.ok(
        document.querySelector(`.o_ChatterTopbar_buttonAttachments`).disabled,
        "attachmentsbuttonshouldbedisabled"
    );

    document.querySelectorAll('.o_field_char')[0].focus();
    document.execCommand('insertText',false,"hello");
    awaitafterNextRender(()=>{
        document.querySelector('.o_form_button_save').click();
    });
    assert.notOk(
        document.querySelector(`.o_ChatterTopbar_buttonSendMessage`).disabled,
        "sendmessagebuttonshouldnowbeenabled"
    );
    assert.notOk(
        document.querySelector(`.o_ChatterTopbar_buttonLogNote`).disabled,
        "lognotebuttonshouldnowbeenabled"
    );
    assert.notOk(
        document.querySelector(`.o_ChatterTopbar_buttonAttachments`).disabled,
        "attachmentsbuttonshouldnowbeenabled"
    );
});

QUnit.test('readmore/lesslinksarenotduplicatedwhenswitchingfromreadtoeditmode',asyncfunction(assert){
    assert.expect(5);

    this.data['mail.message'].records.push({
        author_id:100,
        //"data-o-mail-quote"addedbyserverisintendedtobecompactedinreadmore/lessblocks
        body:`
            <div>
                DearJoelWillis,<br>
                Thankyouforyourenquiry.<br>
                Ifyouhaveanyquestions,pleaseletusknow.
                <br><br>
                Thankyou,<br>
                <spandata-o-mail-quote="1">--<brdata-o-mail-quote="1">
                    System
                </span>
            </div>
        `,
        id:1000,
        model:'res.partner',
        res_id:2,
    });
    this.data['res.partner'].records.push({
        display_name:"Someone",
        id:100,
    });
    awaitthis.createView({
        data:this.data,
        hasView:true,
        //Viewparams
        View:FormView,
        model:'res.partner',
        res_id:2,
        arch:`
            <formstring="Partners">
                <sheet>
                    <fieldname="name"/>
                </sheet>
                <divclass="oe_chatter">
                    <fieldname="message_ids"/>
                </div>
            </form>
        `,
        waitUntilEvent:{
            eventName:'o-component-message-read-more-less-inserted',
            message:"shouldwaituntilreadmore/lessisinsertedinitially",
            predicate:({message})=>message.id===1000,
        },
    });
    assert.containsOnce(
        document.body,
        '.o_Chatter',
        "thereshouldbeachatter"
    );
    assert.containsOnce(
        document.body,
        '.o_Message',
        "thereshouldbeamessage"
    );
    assert.containsOnce(
        document.body,
        '.o_Message_readMoreLess',
        "thereshouldbeonlyonereadmore"
    );
    awaitafterNextRender(()=>this.afterEvent({
        eventName:'o-component-message-read-more-less-inserted',
        func:()=>document.querySelector('.o_form_button_edit').click(),
        message:"shouldwaituntilreadmore/lessisinsertedafterclickingonedit",
        predicate:({message})=>message.id===1000,
    }));
    assert.containsOnce(
        document.body,
        '.o_Message_readMoreLess',
        "thereshouldstillbeonlyonereadmoreafterswitchingtoeditmode"
    );

    awaitafterNextRender(()=>this.afterEvent({
        eventName:'o-component-message-read-more-less-inserted',
        func:()=>document.querySelector('.o_form_button_cancel').click(),
        message:"shouldwaituntilreadmore/lessisinsertedaftercancelingedit",
        predicate:({message})=>message.id===1000,
    }));
    assert.containsOnce(
        document.body,
        '.o_Message_readMoreLess',
        "thereshouldstillbeonlyonereadmoreafterswitchingbacktoreadmode"
    );
});

QUnit.test('readmorelinksbecomesreadlessafterbeingclicked',asyncfunction(assert){
    assert.expect(6);

    this.data['mail.message'].records=[{
        author_id:100,
        //"data-o-mail-quote"addedbyserverisintendedtobecompactedinreadmore/lessblocks
        body:`
            <div>
                DearJoelWillis,<br>
                Thankyouforyourenquiry.<br>
                Ifyouhaveanyquestions,pleaseletusknow.
                <br><br>
                Thankyou,<br>
                <spandata-o-mail-quote="1">--<brdata-o-mail-quote="1">
                    System
                </span>
            </div>
        `,
        id:1000,
        model:'res.partner',
        res_id:2,
    }];
    this.data['res.partner'].records.push({
        display_name:"Someone",
        id:100,
    });
    awaitthis.createView({
        data:this.data,
        hasView:true,
        //Viewparams
        View:FormView,
        model:'res.partner',
        res_id:2,
        arch:`
            <formstring="Partners">
                <sheet>
                    <fieldname="name"/>
                </sheet>
                <divclass="oe_chatter">
                    <fieldname="message_ids"/>
                </div>
            </form>
        `,
        waitUntilEvent:{
            eventName:'o-component-message-read-more-less-inserted',
            message:"shouldwaituntilreadmore/lessisinsertedinitially",
            predicate:({message})=>message.id===1000,
        },
    });
    assert.containsOnce(
        document.body,
        '.o_Chatter',
        "thereshouldbeachatter"
    );
    assert.containsOnce(
        document.body,
        '.o_Message',
        "thereshouldbeamessage"
    );
    assert.containsOnce(
        document.body,
        '.o_Message_readMoreLess',
        "thereshouldbeareadmore"
    );
    assert.strictEqual(
        document.querySelector('.o_Message_readMoreLess').textContent,
        'readmore',
        "readmore/lesslinkshouldcontain'readmore'astext"
    );

    awaitafterNextRender(()=>this.afterEvent({
        eventName:'o-component-message-read-more-less-inserted',
        func:()=>document.querySelector('.o_form_button_edit').click(),
        message:"shouldwaituntilreadmore/lessisinsertedafterclickingonedit",
        predicate:({message})=>message.id===1000,
    }));
    assert.strictEqual(
        document.querySelector('.o_Message_readMoreLess').textContent,
        'readmore',
        "readmore/lesslinkshouldcontain'readmore'astext"
    );

    document.querySelector('.o_Message_readMoreLess').click();
    assert.strictEqual(
        document.querySelector('.o_Message_readMoreLess').textContent,
        'readless',
        "readmore/lesslinkshouldcontain'readless'astextafterithasbeenclicked"
    );
});

QUnit.test('Formviewnotscrolledwhenswitchingrecord',asyncfunction(assert){
    assert.expect(6);

    this.data['res.partner'].records.push(
        {
            id:11,
            display_name:"Partner1",
            description:[...Array(60).keys()].join('\n'),
        },
        {
            id:12,
            display_name:"Partner2",
        }
    );

    constmessages=[...Array(60).keys()].map(id=>{
        return{
            model:'res.partner',
            res_id:id%2?11:12,
        };
    });
    this.data['mail.message'].records=messages;

    awaitthis.createView({
        data:this.data,
        hasView:true,
        //Viewparams
        View:FormView,
        model:'res.partner',
        arch:`
            <formstring="Partners">
                <sheet>
                    <fieldname="name"/>
                    <fieldname="description"/>
                </sheet>
                <divclass="oe_chatter">
                    <fieldname="message_ids"/>
                </div>
            </form>
        `,
        viewOptions:{
            currentId:11,
            ids:[11,12],
        },
        config:{
            device:{size_class:config.device.SIZES.LG},
        },
        env:{
            device:{size_class:config.device.SIZES.LG},
        },
    });

    constcontrollerContentEl=document.querySelector('.o_content');

    assert.strictEqual(
        document.querySelector('.breadcrumb-item.active').textContent,
        'Partner1',
        "Formviewshoulddisplaypartner'Partner1'"
    );
    assert.strictEqual(controllerContentEl.scrollTop,0,
        "Thetopoftheformviewisvisible"
    );

    awaitafterNextRender(async()=>{
        controllerContentEl.scrollTop=controllerContentEl.scrollHeight-controllerContentEl.clientHeight;
        awaittriggerEvent(
            document.querySelector('.o_ThreadView_messageList'),
            'scroll'
        );
    });
    assert.ok(
        isScrolledToBottom(controllerContentEl),
        "Thecontrollercontainershouldbescrolledtoitsbottom"
    );

    awaitafterNextRender(()=>
        document.querySelector('.o_pager_next').click()
    );
    assert.strictEqual(
        document.querySelector('.breadcrumb-item.active').textContent,
        'Partner2',
        "Theformviewshoulddisplaypartner'Partner2'"
    );
    assert.strictEqual(controllerContentEl.scrollTop,0,
        "Thetopoftheformviewshouldbevisiblewhenswitchingrecordfrompager"
    );

    awaitafterNextRender(()=>
        document.querySelector('.o_pager_previous').click()
    );
    assert.strictEqual(controllerContentEl.scrollTop,0,
        "Formview'sscrollpositionshouldhavebeenresetwhenswitchingbacktofirstrecord"
    );
});

QUnit.test('Attachmentsthathavebeenunlinkedfromservershouldbevisuallyunlinkedfromrecord',asyncfunction(assert){
    //Attachmentsthathavebeenfetchedfromarecordatcertaintimeandthen
    //removedfromtheservershouldbereflectedontheUIwhenthecurrent
    //partneraccessesthisrecordagain.
    assert.expect(2);

    this.data['res.partner'].records.push(
        {display_name:"Partner1",id:11},
        {display_name:"Partner2",id:12}
    );
    this.data['ir.attachment'].records.push(
        {
           id:11,
           mimetype:'text.txt',
           res_id:11,
           res_model:'res.partner',
        },
        {
           id:12,
           mimetype:'text.txt',
           res_id:11,
           res_model:'res.partner',
        }
    );
    awaitthis.createView({
        data:this.data,
        hasView:true,
        //Viewparams
        View:FormView,
        model:'res.partner',
        res_id:11,
        viewOptions:{
            ids:[11,12],
            index:0,
        },
        arch:`
            <formstring="Partners">
                <sheet>
                    <fieldname="name"/>
                </sheet>
                <divclass="oe_chatter">
                    <fieldname="message_ids"/>
                </div>
            </form>
        `,
    });
    assert.strictEqual(
        document.querySelector('.o_ChatterTopbar_buttonCount').textContent,
        '2',
        "Partner1shouldhave2attachmentsinitially"
    );

    //Theattachmentlinksareupdatedon(re)load,
    //sousingpagerisawaytoreloadtherecord"Partner1".
    awaitafterNextRender(()=>
        document.querySelector('.o_pager_next').click()
    );
    //Simulateunlinkingattachment12fromPartner1.
    this.data['ir.attachment'].records.find(a=>a.id===11).res_id=0;
    awaitafterNextRender(()=>
        document.querySelector('.o_pager_previous').click()
    );
    assert.strictEqual(
        document.querySelector('.o_ChatterTopbar_buttonCount').textContent,
        '1',
        "Partner1shouldnowhave1attachmentafterithasbeenunlinkedfromserver"
    );
});

QUnit.test('chatterjustcontains"creatinganewrecord"messageduringthecreationofanewrecordafterhavingdisplayedachatterforanexistingrecord',asyncfunction(assert){
    assert.expect(2);

    this.data['res.partner'].records.push({id:12});
    awaitthis.createView({
        data:this.data,
        hasView:true,
        View:FormView,
        model:'res.partner',
        res_id:12,
        arch:`
            <form>
                <divclass="oe_chatter">
                    <fieldname="message_ids"/>
                </div>
            </form>
        `,
    });

    awaitafterNextRender(()=>{
        document.querySelector('.o_form_button_create').click();
    });
    assert.containsOnce(
        document.body,
        '.o_Message',
        "Shouldhaveasinglemessagewhencreatinganewrecord"
    );
    assert.strictEqual(
        document.querySelector('.o_Message_content').textContent,
        'Creatinganewrecord...',
        "themessagecontentshouldbeinaccordtothecreationofthisrecord"
    );
});

QUnit.test('[TECHNICAL]unfoldedreadmore/lesslinksshouldnotfoldonmessageclickbesidesthosebuttonlinks',asyncfunction(assert){
    //messageclicktriggersare-render.Beforewritingofthistest,the
    //insertionofreadmore/lesslinksweredoneduringrender.Thismeant
    //anyre-renderwouldre-insertthereadmore/lesslinks.Ifsomebutton
    //linkswereunfolded,anyre-renderwouldfoldthemagain.
    //
    //Thispreviousbehaviorisundesirable,andresultstobothersomeUX
    //suchasinabilitytocopy/pasteunfoldedmessagecontentduetoclick
    //fromtextselectionautomaticallyfoldingallreadmore/lesslinks.
    assert.expect(3);

    this.data['mail.message'].records.push({
        author_id:100,
        //"data-o-mail-quote"addedbyserverisintendedtobecompactedinreadmore/lessblocks
        body:`
            <div>
                DearJoelWillis,<br>
                Thankyouforyourenquiry.<br>
                Ifyouhaveanyquestions,pleaseletusknow.
                <br><br>
                Thankyou,<br>
                <spandata-o-mail-quote="1">--<brdata-o-mail-quote="1">
                    System
                </span>
            </div>
        `,
        id:1000,
        model:'res.partner',
        res_id:2,
    });
    this.data['res.partner'].records.push({
        display_name:"Someone",
        id:100,
    });
    awaitthis.createView({
        data:this.data,
        hasView:true,
        //Viewparams
        View:FormView,
        model:'res.partner',
        res_id:2,
        arch:`
            <formstring="Partners">
                <sheet>
                    <fieldname="name"/>
                </sheet>
                <divclass="oe_chatter">
                    <fieldname="message_ids"/>
                </div>
            </form>
        `,
    });
    assert.strictEqual(
        document.querySelector('.o_Message_readMoreLess').textContent,
        "readmore",
        "readmore/lesslinkonmessageshouldbefoldedinitially(readmore)"
    );

    document.querySelector('.o_Message_readMoreLess').click(),
    assert.strictEqual(
        document.querySelector('.o_Message_readMoreLess').textContent,
        "readless",
        "readmore/lesslinkonmessageshouldbeunfoldedafteraclickfrominitialrendering(readless)"
    );

    awaitafterNextRender(
        ()=>document.querySelector('.o_Message').click(),
    );
    assert.strictEqual(
        document.querySelector('.o_Message_readMoreLess').textContent,
        "readless",
        "readmore/lesslinkonmessageshouldstillbeunfoldedafteraclickonmessageasideofthisbuttonclick(readless)"
    );
});

});
});
});

});
