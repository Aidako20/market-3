flectra.define('mail/static/src/widgets/discuss_invite_partner_dialog/discuss_invite_partner_dialog.js',function(require){
'usestrict';

constcore=require('web.core');
constDialog=require('web.Dialog');

const_lt=core._lt;
constQWeb=core.qweb;

/**
 *Widget:InvitePeopletoChannelDialog
 *
 *Popupcontaininga'many2many_tags'custominputtoselectmultiplepartners.
 *Searchesuseraccordingtotheinput,andtriggerseventwhenselectionis
 *validated.
 */
constPartnerInviteDialog=Dialog.extend({
    dialog_title:_lt("Invitepeople"),
    template:'mail.widgets.DiscussInvitePartnerDialog',
    /**
     *@override{web.Dialog}
     *@param{mail/static/src/widgets/discuss/discuss.js}parent
     *@param{Object}param1
     *@param{string}param1.activeThreadLocalId
     *@param{Object}param1.messagingEnv
     *@param{Object}param1.messagingEnv.store
     */
    init(parent,{activeThreadLocalId,messagingEnv}){
        constenv=messagingEnv;
        constchannel=env.models['mail.thread'].get(activeThreadLocalId);
        this.channelId=channel.id;
        this.env=env;
        this._super(parent,{
            title:_.str.sprintf(this.env._t("Invitepeopleto#%s"),owl.utils.escape(channel.displayName)),
            size:'medium',
            buttons:[{
                text:this.env._t("Invite"),
                close:true,
                classes:'btn-primary',
                click:ev=>this._invite(ev),
            }],
        });
    },
    /**
     *@override{web.Dialog}
     *@returns{Promise}
     */
    start(){
        this.$input=this.$('.o_input');
        this.$input.select2({
            width:'100%',
            allowClear:true,
            multiple:true,
            formatResult:item=>{
                letstatus;
                //TODOFIXMEfixthis,whydoweevenhaveanoldwidgethere
                if(item.id==='flectrabot'){
                    status='bot';
                }else{
                    constpartner=this.env.models['mail.partner'].findFromIdentifyingData({
                        id:item.id,
                    });
                    status=partner.im_status;
                }
                const$status=QWeb.render('mail.widgets.UserStatus',{status});
                return$('<span>').text(item.text).prepend($status);
            },
            query:query=>{
                this.env.models['mail.partner'].imSearch({
                    callback:partners=>{
                        letresults=partners.map(partner=>{
                            return{
                                id:partner.id,
                                label:partner.nameOrDisplayName,
                                text:partner.nameOrDisplayName,
                                value:partner.nameOrDisplayName,
                            };
                        });
                        results=_.sortBy(results,'label');
                        query.callback({results});
                    },
                    keyword:query.term,
                    limit:20,
                });
            }
        });
        returnthis._super(...arguments);
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *@private
     */
    async_invite(){
        constdata=this.$input.select2('data');
        if(data.length===0){
            return;
        }
        awaitthis._rpc({
            model:'mail.channel',
            method:'channel_invite',
            args:[this.channelId],
            kwargs:{
                partner_ids:_.pluck(data,'id')
            },
        });
        constnames=_.escape(_.pluck(data,'text').join(','));
        constnotification=_.str.sprintf(
            this.env._t("Youadded<b>%s</b>totheconversation."),
            names
        );
        this.env.services['notification'].notify({
            message:notification,
            type:'warning',
        });
    },
});

returnPartnerInviteDialog;

});
