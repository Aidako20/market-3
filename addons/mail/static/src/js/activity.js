flectra.define('mail.Activity',function(require){
"usestrict";

varmailUtils=require('mail.utils');

varAbstractField=require('web.AbstractField');
varBasicModel=require('web.BasicModel');
varconfig=require('web.config');
varcore=require('web.core');
varfield_registry=require('web.field_registry');
varsession=require('web.session');
varframework=require('web.framework');
vartime=require('web.time');

varQWeb=core.qweb;
var_t=core._t;
const_lt=core._lt;

/**
 *Fetchesactivitiesandpostprocessesthem.
 *
 *ThisstandalonefunctionperformsanRPC,buttodoso,itneedsaninstance
 *ofawidgetthatimplementsthe_rpc()function.
 *
 *@todoi'mnotveryproudofthewidgetinstancegiveninarguments,weshould
 *  probablytrytodoitabetterwayinthefuture.
 *
 *@param{Widget}selfawidgetinstancethatcanperformRPCs
 *@param{Array}idstheidsofactivitiestoread
 *@return{Promise<Array>}resolvedwiththeactivities
 */
function_readActivities(self,ids){
    if(!ids.length){
        returnPromise.resolve([]);
    }
    varcontext=self.getSession().user_context;
    if(self.record&&!_.isEmpty(self.record.getContext())){
        context=self.record.getContext();
    }
    returnself._rpc({
        model:'mail.activity',
        method:'activity_format',
        args:[ids],
        context:context,
    }).then(function(activities){
        //convertcreate_dateanddate_deadlinetomoments
        _.each(activities,function(activity){
            activity.create_date=moment(time.auto_str_to_date(activity.create_date));
            activity.date_deadline=moment(time.auto_str_to_date(activity.date_deadline));
        });
         //sortactivitiesbyduedate
        activities=_.sortBy(activities,'date_deadline');
        returnactivities;
    });
}

BasicModel.include({
    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *Fetchestheactivitiesdisplayedbytheactivityfieldwidgetinform
     *views.
     *
     *@private
     *@param{Object}record-anelementfromthelocalData
     *@param{string}fieldName
     *@return{Promise<Array>}resolvedwiththeactivities
     */
    _fetchSpecialActivity:function(record,fieldName){
        varlocalID=(record._changes&&fieldNameinrecord._changes)?
                        record._changes[fieldName]:
                        record.data[fieldName];
        return_readActivities(this,this.localData[localID].res_ids);
    },
});

/**
 *Setthe'label_delay'entryinactivitydataaccordingtothedeadlinedate
 *
 *@param{Array}activitieslistofactivityObject
 *@return{Array}:listofmodifiedactivityObject
 */
varsetDelayLabel=function(activities){
    vartoday=moment().startOf('day');
    _.each(activities,function(activity){
        vartoDisplay='';
        vardiff=activity.date_deadline.diff(today,'days',true);//truemeansnorounding
        if(diff===0){
            toDisplay=_t("Today");
        }else{
            if(diff<0){//overdue
                if(diff===-1){
                    toDisplay=_t("Yesterday");
                }else{
                    toDisplay=_.str.sprintf(_t("%ddaysoverdue"),Math.abs(diff));
                }
            }else{//due
                if(diff===1){
                    toDisplay=_t("Tomorrow");
                }else{
                    toDisplay=_.str.sprintf(_t("Duein%ddays"),Math.abs(diff));
                }
            }
        }
        activity.label_delay=toDisplay;
    });
    returnactivities;
};

/**
 *Setthefileuploadidentifierfor'upload_file'typeactivities
 *
 *@param{Array}activitieslistofactivityObject
 *@return{Array}:listofmodifiedactivityObject
 */
varsetFileUploadID=function(activities){
    _.each(activities,function(activity){
        if(activity.activity_category==='upload_file'){
            activity.fileuploadID=_.uniqueId('o_fileupload');
        }
    });
    returnactivities;
};

varBasicActivity=AbstractField.extend({
    events:{
        'click.o_edit_activity':'_onEditActivity',
        'changeinput.o_input_file':'_onFileChanged',
        'click.o_mark_as_done':'_onMarkActivityDone',
        'click.o_mark_as_done_upload_file':'_onMarkActivityDoneUploadFile',
        'click.o_activity_template_preview':'_onPreviewMailTemplate',
        'click.o_schedule_activity':'_onScheduleActivity',
        'click.o_activity_template_send':'_onSendMailTemplate',
        'click.o_unlink_activity':'_onUnlinkActivity',
    },
    init:function(){
        this._super.apply(this,arguments);
        this._draftFeedback={};
    },

    //------------------------------------------------------------
    //Public
    //------------------------------------------------------------

    /**
     *@param{integer}previousActivityTypeID
     *@return{Promise}
     */
    scheduleActivity:function(){
        varcallback=this._reload.bind(this,{activity:true,thread:true});
        returnthis._openActivityForm(false,callback);
    },

    //------------------------------------------------------------
    //Private
    //------------------------------------------------------------

    /**
     *Sendafeedbackandreloadpageinordertomarkactivityasdone
     *
     *@private
     *@param{Object}params
     *@param{integer}params.activityID
     *@param{integer[]}params.attachmentIds
     *@param{string}params.feedback
     *
     *@return{$.Promise}
     */
    _markActivityDone:function(params){
        varactivityID=params.activityID;
        varfeedback=params.feedback||false;
        varattachmentIds=params.attachmentIds||[];

        returnthis._sendActivityFeedback(activityID,feedback,attachmentIds)
            .then(this._reload.bind(this,{activity:true,thread:true}));
    },
    /**
     *Sendafeedbackandproposestoschedulenextactivity
     *previousActivityTypeIDwillbegiventonewactivitytoproposeactivity
     *typebasedonrecommendednextactivity
     *
     *@private
     *@param{Object}params
     *@param{integer}params.activityID
     *@param{string}params.feedback
     */
    _markActivityDoneAndScheduleNext:function(params){
        varactivityID=params.activityID;
        varfeedback=params.feedback;
        varself=this;
        this._rpc({
            model:'mail.activity',
            method:'action_feedback_schedule_next',
            args:[[activityID]],
            kwargs:{feedback:feedback},
            context:this.record.getContext(),
        }).then(
            function(rslt_action){
                if(rslt_action){
                    self.do_action(rslt_action,{
                        on_close:function(){
                            self.trigger_up('reload',{keepChanges:true});
                        },
                    });
                }else{
                    self.trigger_up('reload',{keepChanges:true});
                }
            }
        );
    },
    /**
     *@private
     *@param{integer}id
     *@param{function}callback
     *@return{Promise}
     */
    _openActivityForm:function(id,callback){
        varaction={
            type:'ir.actions.act_window',
            name:_t("ScheduleActivity"),
            res_model:'mail.activity',
            view_mode:'form',
            views:[[false,'form']],
            target:'new',
            context:{
                default_res_id:this.res_id,
                default_res_model:this.model,
            },
            res_id:id||false,
        };
        returnthis.do_action(action,{on_close:callback});
    },
    /**
     *@private
     *@param{integer}activityID
     *@param{string}feedback
     *@param{integer[]}attachmentIds
     *@return{Promise}
     */
    _sendActivityFeedback:function(activityID,feedback,attachmentIds){
        returnthis._rpc({
                model:'mail.activity',
                method:'action_feedback',
                args:[[activityID]],
                kwargs:{
                    feedback:feedback,
                    attachment_ids:attachmentIds||[],
                },
                context:this.record.getContext(),
            });
    },

    //------------------------------------------------------------
    //Handlers
    //------------------------------------------------------------

    /**
     *@private
     *@param{Object[]}activities
     */
    _bindOnUploadAction:function(activities){
        varself=this;
        _.each(activities,function(activity){
            if(activity.fileuploadID){
                $(window).on(activity.fileuploadID,function(){
                    framework.unblockUI();
                    //findthebuttonclickedanddisplaythefeedbackpopuponit
                    varfiles=Array.prototype.slice.call(arguments,1);
                    self._markActivityDone({
                        activityID:activity.id,
                        attachmentIds:_.pluck(files,'id')
                    }).then(function(){
                        self.trigger_up('reload',{keepChanges:true});
                    });
                });
            }
        });
    },
    /**Bindsafocusouthandleronabootstrappopover
     * Usefultodosomeoperationsonthepopover'sHTML,
     * likekeepingtheuser'sinputforthefeedback
     * @param{JQuery}$popover_el:theelementonwhich
     *   thepopover()methodhasbeencalled
     */
    _bindPopoverFocusout:function($popover_el){
        varself=this;
        //Retrievetheactualpopover'sHTML
        var$popover=$($popover_el.data("bs.popover").tip);
        varactivityID=$popover_el.data('activity-id');
        $popover.off('focusout');
        $popover.focusout(function(e){
            //outsideclickofpopoverhidethepopover
            //e.relatedTargetistheelementreceivingthefocus
            if(!$popover.is(e.relatedTarget)&&!$popover.find(e.relatedTarget).length){
                self._draftFeedback[activityID]=$popover.find('#activity_feedback').val();
                $popover.popover('hide');
            }
        });
    },

    /**
     *@private
     *@param{MouseEvent}ev
     *@returns{Promise}
     */
    _onEditActivity:function(ev){
        ev.preventDefault();
        varactivityID=$(ev.currentTarget).data('activity-id');
        returnthis._openActivityForm(activityID,this._reload.bind(this,{activity:true,thread:true}));
    },
    /**
     *@private
     *@param{FormEvent}ev
     */
    _onFileChanged:function(ev){
        ev.stopPropagation();
        ev.preventDefault();
        var$form=$(ev.currentTarget).closest('form');
        $form.submit();
        framework.blockUI();
    },
    /**
     *Calledwhenmarkinganactivityasdone
     *
     *Itletsthecurrentuserwriteafeedbackinapopupmenu.
     *Afterwritingthefeedbackandconfirmmarkasdone
     *issent,itmarksthisactivityasdoneforgoodwiththefeedbacklinked
     *toit.
     *
     *@private
     *@param{MouseEvent}ev
     */
    _onMarkActivityDone:function(ev){
        ev.stopPropagation();
        ev.preventDefault();
        varself=this;
        var$markDoneBtn=$(ev.currentTarget);
        varactivityID=$markDoneBtn.data('activity-id');
        varpreviousActivityTypeID=$markDoneBtn.data('previous-activity-type-id')||false;
        varforceNextActivity=$markDoneBtn.data('force-next-activity');

        if($markDoneBtn.data('toggle')==='collapse'){
            var$actLi=$markDoneBtn.parents('.o_log_activity');
            var$panel=self.$('#o_activity_form_'+activityID);

            if(!$panel.data('bs.collapse')){
                var$form=$(QWeb.render('mail.activity_feedback_form',{
                    previous_activity_type_id:previousActivityTypeID,
                    force_next:forceNextActivity
                }));
                $panel.append($form);
                self._onMarkActivityDoneActions($markDoneBtn,$form,activityID);

                //Closeandresetanyotheropenpanels
                _.each($panel.siblings('.o_activity_form'),function(el){
                    if($(el).data('bs.collapse')){
                        $(el).empty().collapse('dispose').removeClass('show');
                    }
                });

                //Scroll toselectedactivity
                $markDoneBtn.parents('.o_activity_log_container').scrollTo($actLi.position().top,100);
            }

            //Emptyandresetpanelonclose
            $panel.on('hidden.bs.collapse',function(){
                if($panel.data('bs.collapse')){
                    $actLi.removeClass('o_activity_selected');
                    $panel.collapse('dispose');
                    $panel.empty();
                }
            });

            this.$('.o_activity_selected').removeClass('o_activity_selected');
            $actLi.toggleClass('o_activity_selected');
            $panel.collapse('toggle');

        }elseif(!$markDoneBtn.data('bs.popover')){
            $markDoneBtn.popover({
                template:$(Popover.Default.template).addClass('o_mail_activity_feedback')[0].outerHTML,//Uglybutcannotfindanotherway
                container:$markDoneBtn,
                title:_t("Feedback"),
                html:true,
                trigger:'manual',
                placement:'right',//FIXME:thisshouldwork,maybeabuginthepopperlib
                content:function(){
                    var$popover=$(QWeb.render('mail.activity_feedback_form',{
                        previous_activity_type_id:previousActivityTypeID,
                        force_next:forceNextActivity
                    }));
                    self._onMarkActivityDoneActions($markDoneBtn,$popover,activityID);
                    return$popover;
                },
            }).on('shown.bs.popover',function(){
                var$popover=$($(this).data("bs.popover").tip);
                $(".o_mail_activity_feedback.popover").not($popover).popover("hide");
                $popover.addClass('o_mail_activity_feedback').attr('tabindex',0);
                $popover.find('#activity_feedback').focus();
                self._bindPopoverFocusout($(this));
            }).popover('show');
        }else{
            varpopover=$markDoneBtn.data('bs.popover');
            if($('#'+popover.tip.id).length===0){
               popover.show();
            }
        }
    },
    /**
    *Bindallnecessaryactionstothe'markasdone'form
    *
    *@private
    *@param{Object}$form
    *@param{integer}activityID
    */
    _onMarkActivityDoneActions:function($btn,$form,activityID){
        varself=this;
        $form.find('#activity_feedback').val(self._draftFeedback[activityID]);
        $form.on('click','.o_activity_popover_done',function(ev){
            ev.stopPropagation();
            self._markActivityDone({
                activityID:activityID,
                feedback:$form.find('#activity_feedback').val(),
            });
        });
        $form.on('click','.o_activity_popover_done_next',function(ev){
            ev.stopPropagation();
            self._markActivityDoneAndScheduleNext({
                activityID:activityID,
                feedback:$form.find('#activity_feedback').val(),
            });
        });
        $form.on('click','.o_activity_popover_discard',function(ev){
            ev.stopPropagation();
            if($btn.data('bs.popover')){
                $btn.popover('hide');
            }elseif($btn.data('toggle')==='collapse'){
                self.$('#o_activity_form_'+activityID).collapse('hide');
            }
        });
    },
    /**
     *@private
     *@param{MouseEvent}ev
     */
    _onMarkActivityDoneUploadFile:function(ev){
        ev.preventDefault();
        ev.stopPropagation();
        varfileuploadID=$(ev.currentTarget).data('fileupload-id');
        var$input=this.$("[target='"+fileuploadID+"']>input.o_input_file");
        $input.click();
    },
    /**
     *@private
     *@param{MouseEvent}ev
     *@returns{Promise}
     */
    _onPreviewMailTemplate:function(ev){
        ev.stopPropagation();
        ev.preventDefault();
        varself=this;
        vartemplateID=$(ev.currentTarget).data('template-id');
        varaction={
            name:_t('ComposeEmail'),
            type:'ir.actions.act_window',
            res_model:'mail.compose.message',
            views:[[false,'form']],
            target:'new',
            context:{
                default_res_id:this.res_id,
                default_model:this.model,
                default_use_template:true,
                default_template_id:templateID,
                force_email:true,
            },
        };
        returnthis.do_action(action,{on_close:function(){
            self.trigger_up('reload',{keepChanges:true});
        }});
    },
    /**
     *@private
     *@param{MouseEvent}ev
     *@returns{Promise}
     */
    _onSendMailTemplate:function(ev){
        ev.stopPropagation();
        ev.preventDefault();
        vartemplateID=$(ev.currentTarget).data('template-id');
        returnthis._rpc({
                model:this.model,
                method:'activity_send_mail',
                args:[[this.res_id],templateID],
            })
            .then(this._reload.bind(this,{activity:true,thread:true,followers:true}));
    },
    /**
     *@private
     *@param{MouseEvent}ev
     *@returns{Promise}
     */
    _onScheduleActivity:function(ev){
        ev.preventDefault();
        returnthis._openActivityForm(false,this._reload.bind(this));
    },

    /**
     *@private
     *@param{MouseEvent}ev
     *@param{Object}options
     *@returns{Promise}
     */
    _onUnlinkActivity:function(ev,options){
        ev.preventDefault();
        varactivityID=$(ev.currentTarget).data('activity-id');
        options=_.defaults(options||{},{
            model:'mail.activity',
            args:[[activityID]],
        });
        returnthis._rpc({
                model:options.model,
                method:'unlink',
                args:options.args,
            })
            .then(this._reload.bind(this,{activity:true}));
    },
    /**
     *Unbindeventtriggeredwhenafileisuploaded.
     *
     *@private
     *@param{Array}activities:listofactivitytounbind
     */
    _unbindOnUploadAction:function(activities){
        _.each(activities,function(activity){
            if(activity.fileuploadID){
                $(window).off(activity.fileuploadID);
            }
        });
    },
});

//-----------------------------------------------------------------------------
//ActivitiesWidgetforFormviews('mail_activity'widget)
//-----------------------------------------------------------------------------
//FIXMEseemstostillbeneededinsomecaseslikesystray
varActivity=BasicActivity.extend({
    className:'o_mail_activity',
    events:_.extend({},BasicActivity.prototype.events,{
        'clicka':'_onClickRedirect',
    }),
    specialData:'_fetchSpecialActivity',
    /**
     *@override
     */
    init:function(){
        this._super.apply(this,arguments);
        this._activities=this.record.specialData[this.name];
    },
    /**
     *@override
     */
    destroy:function(){
        this._unbindOnUploadAction();
        returnthis._super.apply(this,arguments);
    },

    //------------------------------------------------------------
    //Private
    //------------------------------------------------------------
    /**
     *@private
     *@param{Object}fieldsToReload
     */
    _reload:function(fieldsToReload){
        this.trigger_up('reload_mail_fields',fieldsToReload);
    },
    /**
     *@override
     *@private
     */
    _render:function(){
        _.each(this._activities,function(activity){
            varnote=mailUtils.parseAndTransform(activity.note||'',mailUtils.inline);
            varis_blank=(/^\s*$/).test(note);
            if(!is_blank){
                activity.note=mailUtils.parseAndTransform(activity.note,mailUtils.addLink);
            }else{
                activity.note='';
            }
        });
        varactivities=setFileUploadID(setDelayLabel(this._activities));
        if(activities.length){
            varnbActivities=_.countBy(activities,'state');
            this.$el.html(QWeb.render('mail.activity_items',{
                uid:session.uid,
                activities:activities,
                nbPlannedActivities:nbActivities.planned,
                nbTodayActivities:nbActivities.today,
                nbOverdueActivities:nbActivities.overdue,
                dateFormat:time.getLangDateFormat(),
                datetimeFormat:time.getLangDatetimeFormat(),
                session:session,
                widget:this,
            }));
            this._bindOnUploadAction(this._activities);
        }else{
            this._unbindOnUploadAction(this._activities);
            this.$el.empty();
        }
    },
    /**
     *@override
     *@private
     *@param{Object}record
     */
    _reset:function(record){
        this._super.apply(this,arguments);
        this._activities=this.record.specialData[this.name];
        //themailwidgetsbeingpersistent,oneneedtoupdatetheres_idonreset
        this.res_id=record.res_id;
    },

    //------------------------------------------------------------
    //Handlers
    //------------------------------------------------------------

    /**
     *@private
     *@param{MouseEvent}ev
     */
    _onClickRedirect:function(ev){
        varid=$(ev.currentTarget).data('oe-id');
        if(id){
            ev.preventDefault();
            varmodel=$(ev.currentTarget).data('oe-model');
            this.trigger_up('redirect',{
                res_id:id,
                res_model:model,
            });
        }
    },

});

//-----------------------------------------------------------------------------
//ActivitiesWidgetforKanbanviews('kanban_activity'widget)
//-----------------------------------------------------------------------------
varKanbanActivity=BasicActivity.extend({
    template:'mail.KanbanActivity',
    events:_.extend({},BasicActivity.prototype.events,{
        'show.bs.dropdown':'_onDropdownShow',
    }),
    fieldDependencies:_.extend({},BasicActivity.prototype.fieldDependencies,{
        activity_exception_decoration:{type:'selection'},
        activity_exception_icon:{type:'char'},
        activity_state:{type:'selection'},
    }),

    /**
     *@override
     */
    init:function(parent,name,record){
        this._super.apply(this,arguments);
        varselection={};
        _.each(record.fields.activity_state.selection,function(value){
            selection[value[0]]=value[1];
        });
        this.selection=selection;
        this._setState(record);
    },
    /**
     *@override
     */
    destroy:function(){
        this._unbindOnUploadAction();
        returnthis._super.apply(this,arguments);
    },
    //------------------------------------------------------------
    //Private
    //------------------------------------------------------------

    /**
     *@private
     */
    _reload:function(){
        this.trigger_up('reload',{db_id:this.record_id,keepChanges:true});
    },
    /**
     *@override
     *@private
     */
    _render:function(){
        //spanclassesneedtobeupdatedmanuallybecausethetemplatecannot
        //bere-renderedeaasily(becauseofthedropdownstate)
        constspanClasses=['fa','fa-lg','fa-fw'];
        spanClasses.push('o_activity_color_'+(this.activityState||'default'));
        if(this.recordData.activity_exception_decoration){
            spanClasses.push('text-'+this.recordData.activity_exception_decoration);
            spanClasses.push(this.recordData.activity_exception_icon);
        }else{
            spanClasses.push('fa-clock-o');
        }
        this.$('.o_activity_btn>span').removeClass().addClass(spanClasses.join(''));

        if(this.$el.hasClass('show')){
            //note:thispartoftherenderingmightbeasynchronous
            this._renderDropdown();
        }
    },
    /**
     *@private
     */
    _renderDropdown:function(){
        varself=this;
        this.$('.o_activity')
            .toggleClass('dropdown-menu-right',config.device.isMobile)
            .html(QWeb.render('mail.KanbanActivityLoading'));
        return_readActivities(this,this.value.res_ids).then(function(activities){
            activities=setFileUploadID(activities);
            self.$('.o_activity').html(QWeb.render('mail.KanbanActivityDropdown',{
                selection:self.selection,
                records:_.groupBy(setDelayLabel(activities),'state'),
                session:session,
                widget:self,
            }));
            self._bindOnUploadAction(activities);
        });
    },
    /**
     *@override
     *@private
     *@param{Object}record
     */
    _reset:function(record){
        this._super.apply(this,arguments);
        this._setState(record);
    },
    /**
     *@private
     *@param{Object}record
     */
    _setState:function(record){
        this.record_id=record.id;
        this.activityState=this.recordData.activity_state;
    },

    //------------------------------------------------------------
    //Handlers
    //------------------------------------------------------------

    /**
     *@private
     */
    _onDropdownShow:function(){
        this._renderDropdown();
    },
});

//-----------------------------------------------------------------------------
//ActivitiesWidgetforListviews('list_activity'widget)
//-----------------------------------------------------------------------------
constListActivity=KanbanActivity.extend({
    template:'mail.ListActivity',
    events:Object.assign({},KanbanActivity.prototype.events,{
        'click.dropdown-menu.o_activity':'_onDropdownClicked',
    }),
    fieldDependencies:_.extend({},KanbanActivity.prototype.fieldDependencies,{
        activity_summary:{type:'char'},
        activity_type_id:{type:'many2one',relation:'mail.activity.type'},
        activity_type_icon:{type:'char'},
    }),
    label:_lt('NextActivity'),

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *@override
     *@private
     */
    _render:asyncfunction(){
        awaitthis._super(...arguments);
        //setthe'special_click'propontheactivityicontopreventfrom
        //openingtherecordwhentheuserclicksonit(asitopensthe
        //activitydropdowninstead)
        this.$('.o_activity_btn>span').prop('special_click',true);
        if(this.value.count){
            lettext;
            if(this.recordData.activity_exception_decoration){
                text=_t('Warning');
            }else{
                text=this.recordData.activity_summary||
                          this.recordData.activity_type_id.data.display_name;
            }
            this.$('.o_activity_summary').text(text);
        }
        if(this.recordData.activity_type_icon){
            this.el.querySelector('.o_activity_btn>span').classList.replace('fa-clock-o',this.recordData.activity_type_icon);
        }
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *Asweareinalistview,wedon'twantclicksinsidetheactivity
     *dropdowntoopentherecordinaformview.
     *
     *@private
     *@param{MouseEvent}ev
     */
    _onDropdownClicked:function(ev){
        ev.stopPropagation();
    },
});

//-----------------------------------------------------------------------------
//ActivityExceptionWidgettodisplayExceptionicon('activity_exception'widget)
//-----------------------------------------------------------------------------

varActivityException=AbstractField.extend({
    noLabel:true,
    fieldDependencies:_.extend({},AbstractField.prototype.fieldDependencies,{
        activity_exception_icon:{type:'char'}
    }),

    //------------------------------------------------------------
    //Private
    //------------------------------------------------------------

    /**
     *Thereisnoeditmodeforthiswidget,theiconisalwaysreadonly.
     *
     *@override
     *@private
     */
    _renderEdit:function(){
        returnthis._renderReadonly();
    },

    /**
     *Displaystheexceptioniconifthereisone.
     *
     *@override
     *@private
     */
    _renderReadonly:function(){
        this.$el.empty();
        if(this.value){
            this.$el.attr({
                title:_t('Thisrecordhasanexceptionactivity.'),
                class:"pull-rightmt-1text-"+this.value+"fa"+this.recordData.activity_exception_icon
            });
        }
    }
});

field_registry
    .add('kanban_activity',KanbanActivity)
    .add('list_activity',ListActivity)
    .add('activity_exception',ActivityException);

returnActivity;

});
