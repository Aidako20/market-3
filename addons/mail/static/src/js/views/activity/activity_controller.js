flectra.define('mail.ActivityController',function(require){
"usestrict";

require('mail.Activity');
varBasicController=require('web.BasicController');
varcore=require('web.core');
varfield_registry=require('web.field_registry');
varViewDialogs=require('web.view_dialogs');

varKanbanActivity=field_registry.get('kanban_activity');
var_t=core._t;

varActivityController=BasicController.extend({
    custom_events:_.extend({},BasicController.prototype.custom_events,{
        empty_cell_clicked:'_onEmptyCell',
        send_mail_template:'_onSendMailTemplate',
        schedule_activity:'_onScheduleActivity',
    }),

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *@override
     *@paramparent
     *@parammodel
     *@paramrenderer
     *@param{Object}params
     *@param{String}params.titleThetitleusedinscheduleactivitydialog
     */
    init:function(parent,model,renderer,params){
        this._super.apply(this,arguments);
        this.title=params.title;
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *Overriddentoremovethepagerasitmakesnosenseinthisview.
     *
     *@override
     */
    _getPagingInfo:function(){
        returnnull;
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *@private
     */
    _onScheduleActivity:function(){
        varself=this;
        varstate=this.model.get(this.handle);
        newViewDialogs.SelectCreateDialog(this,{
            res_model:state.model,
            domain:this.model.originalDomain,
            title:_.str.sprintf(_t("Search:%s"),this.title),
            no_create:!this.activeActions.create,
            disable_multiple_selection:true,
            context:state.context,
            on_selected:function(record){
                varfakeRecord=state.getKanbanActivityData({},record[0]);
                varwidget=newKanbanActivity(self,'activity_ids',fakeRecord,{});
                widget.scheduleActivity();
            },
        }).open();
    },
    /**
     *@private
     *@param{FlectraEvent}ev
     */
    _onEmptyCell:function(ev){
        varstate=this.model.get(this.handle);
        this.do_action({
            type:'ir.actions.act_window',
            res_model:'mail.activity',
            view_mode:'form',
            view_type:'form',
            views:[[false,'form']],
            target:'new',
            context:{
                default_res_id:ev.data.resId,
                default_res_model:state.model,
                default_activity_type_id:ev.data.activityTypeId,
            },
            res_id:false,
        },{
            on_close:this.reload.bind(this),
        });
    },
    /**
     *@private
     *@param{CustomEvent}ev
     */
    _onSendMailTemplate:function(ev){
        vartemplateID=ev.data.templateID;
        varactivityTypeID=ev.data.activityTypeID;
        varstate=this.model.get(this.handle);
        vargroupedActivities=state.grouped_activities;
        varresIDS=[];
        Object.keys(groupedActivities).forEach(function(resID){
            varactivityByType=groupedActivities[resID];
            varactivity=activityByType[activityTypeID];
            if(activity){
                resIDS.push(parseInt(resID));
            }
        });
        this._rpc({
            model:this.model.modelName,
            method:'activity_send_mail',
            args:[resIDS,templateID],
        });
    },
});

returnActivityController;

});
