flectra.define('mail/static/src/js/main.js',function(require){
'usestrict';

constModelManager=require('mail/static/src/model/model_manager.js');

constenv=require('web.commonEnv');

const{Store}=owl;
const{EventBus}=owl.core;

asyncfunctioncreateMessaging(){
    awaitnewPromise(resolve=>{
        /**
         *CalledwhenallJSresourcesareloaded.Thisisusefulinorder
         *todosomeprocessingafterotherJSfileshavebeenparsed,for
         *examplenewmodelsorpatchedmodelsthatarecomingfrom
         *othermodules,becausesomeofthosepatchesmightneedtobe
         *appliedbeforemessaginginitialization.
         */
        window.addEventListener('load',resolve);
    });
    /**
     *AllJSresourcesareloaded,butnotnecessarilyprocessed.
     *Weassumenomessaging-relatedmodulesreturnanyPromise,
     *thereforetheyshouldbeprocessed*atmost*asynchronouslyat
     *"Promisetime".
     */
    awaitnewPromise(resolve=>setTimeout(resolve));
    /**
     *Somemodelsrequiresessiondata,likelocaletextdirection(dependson
     *fullyloadedtranslation).
     */
    awaitenv.session.is_bound;

    env.modelManager.start();
    /**
     *Createthemessagingsingletonrecord.
     */
    env.messaging=env.models['mail.messaging'].create();
}

/**
 *Messagingstore
 */
conststore=newStore({
    env,
    state:{
        messagingRevNumber:0,
    },
});

/**
 *Registryofmodels.
 */
env.models={};
/**
 *Environmentkeysusedinmessaging.
 */
Object.assign(env,{
    autofetchPartnerImStatus:true,
    destroyMessaging(){
        if(env.modelManager){
            env.modelManager.deleteAll();
            env.messaging=undefined;
        }
    },
    disableAnimation:false,
    isMessagingInitialized(){
        if(!this.messaging){
            returnfalse;
        }
        returnthis.messaging.isInitialized;
    },
    /**
     *StateswhethertheenvironmentisinQUnittestornot.
     *
     *UsefultopreventsomebehaviourinQUnittests,likeapplying
     *styleofattachmentthatusesurl.
     */
    isQUnitTest:false,
    loadingBaseDelayDuration:400,
    messaging:undefined,
    messagingBus:newEventBus(),
    /**
     *Promisewhichbecomesresolvedwhenmessagingiscreated.
     *
     *Usefulfordiscusswidgettoknowwhenmessagingiscreated,becausethis
     *isanessentialconditiontomakeitwork.
     */
    messagingCreatedPromise:createMessaging(),
    modelManager:newModelManager(env),
    store,
});

/**
 *Componentscannotuseweb.bus,becausetheycannotuse
 *EventDispatcherMixin,andwebclientcannoteasilyaccessenv.
 *Communicationbetweenwebclientandcomponentsbycore.bus
 *(usablebywebclient)andmessagingBus(usablebycomponents),which
 *themessagingserviceactsasmediatorsinceitcaneasilyuseboth
 *kindsofbuses.
 */
env.bus.on(
    'hide_home_menu',
    null,
    ()=>env.messagingBus.trigger('hide_home_menu')
);
env.bus.on(
    'show_home_menu',
    null,
    ()=>env.messagingBus.trigger('show_home_menu')
);
env.bus.on(
    'will_hide_home_menu',
    null,
    ()=>env.messagingBus.trigger('will_hide_home_menu')
);
env.bus.on(
    'will_show_home_menu',
    null,
    ()=>env.messagingBus.trigger('will_show_home_menu')
);

env.messagingCreatedPromise.then(()=>env.messaging.start());

});
