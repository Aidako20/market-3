flectra.define('mail.BasicView',function(require){
"usestrict";

constBasicView=require('web.BasicView');

constmailWidgets=['kanban_activity'];

BasicView.include({
    init:function(){
        this._super.apply(this,arguments);
        constpost_refresh=this._getFieldOption('message_ids','post_refresh',false);
        constfollowers_post_refresh=this._getFieldOption('message_follower_ids','post_refresh',false);
        this.chatterFields={
            hasActivityIds:this._hasField('activity_ids'),
            hasMessageFollowerIds:this._hasField('message_follower_ids'),
            hasMessageIds:this._hasField('message_ids'),
            hasRecordReloadOnAttachmentsChanged:post_refresh==='always',
            hasRecordReloadOnMessagePosted:!!post_refresh,
            hasRecordReloadOnFollowersUpdate:!!followers_post_refresh,
            isAttachmentBoxVisibleInitially:(
                this._getFieldOption('message_ids','open_attachments',false)||
                this._getFieldOption('message_follower_ids','open_attachments',false)
            ),
        };
        constfieldsInfo=this.fieldsInfo[this.viewType];
        this.rendererParams.chatterFields=this.chatterFields;

        //LEGACYforwidgetkanban_activity
        this.mailFields={};
        for(constfieldNameinfieldsInfo){
            constfieldInfo=fieldsInfo[fieldName];
            if(_.contains(mailWidgets,fieldInfo.widget)){
                this.mailFields[fieldInfo.widget]=fieldName;
                fieldInfo.__no_fetch=true;
            }
        }
        this.rendererParams.activeActions=this.controllerParams.activeActions;
        this.rendererParams.mailFields=this.mailFields;
    },
    /**
     *Getstheoptionvalueofafieldifpresent.
     *
     *@private
     *@param{string}fieldNamethedesiredfieldname
     *@param{string}optionNamethedesiredoptionname
     *@param{*}defaultValuethedefaultvalueifoptionorfieldisnotfound.
     *@returns{*}
     */
    _getFieldOption(fieldName,optionName,defaultValue){
        constfield=this.fieldsInfo[this.viewType][fieldName];
        if(field&&field.options&&field.options[optionName]!==undefined){
            returnfield.options[optionName];
        }
        returndefaultValue;
    },
    /**
     *Checkswhethertheviewhasagivenfield.
     *
     *@private
     *@param{string}fieldNamethedesiredfieldname
     *@returns{boolean}
     */
    _hasField(fieldName){
        return!!this.fieldsInfo[this.viewType][fieldName];
    },
});

});
