flectra.define('mail.systray.ActivityMenu',function(require){
"usestrict";

varcore=require('web.core');
varsession=require('web.session');
varSystrayMenu=require('web.SystrayMenu');
varWidget=require('web.Widget');
varTime=require('web.time');
varQWeb=core.qweb;

const{Component}=owl;

/**
 *Menuitemappendedinthesystraypartofthenavbar,redirectstothenext
 *activitiesofallapp
 */
varActivityMenu=Widget.extend({
    name:'activity_menu',
    template:'mail.systray.ActivityMenu',
    events:{
        'click.o_mail_activity_action':'_onActivityActionClick',
        'click.o_mail_preview':'_onActivityFilterClick',
        'show.bs.dropdown':'_onActivityMenuShow',
        'hide.bs.dropdown':'_onActivityMenuHide',
    },
    start:function(){
        this._$activitiesPreview=this.$('.o_mail_systray_dropdown_items');
        Component.env.bus.on('activity_updated',this,this._updateCounter);
        this._updateCounter();
        this._updateActivityPreview();
        returnthis._super();
    },
    //--------------------------------------------------
    //Private
    //--------------------------------------------------
    /**
     *MakeRPCandgetcurrentuser'sactivitydetails
     *@private
     */
    _getActivityData:function(){
        varself=this;

        returnself._rpc({
            model:'res.users',
            method:'systray_get_activities',
            args:[],
            kwargs:{context:session.user_context},
        }).then(function(data){
            self._activities=data;
            self.activityCounter=_.reduce(data,function(total_count,p_data){returntotal_count+p_data.total_count||0;},0);
            self.$('.o_notification_counter').text(self.activityCounter);
            self.$el.toggleClass('o_no_notification',!self.activityCounter);
        });
    },
    /**
     *Getparticularmodelviewtoredirectonclickofactivityscheduledonthatmodel.
     *@private
     *@param{string}model
     */
    _getActivityModelViewID:function(model){
        returnthis._rpc({
            model:model,
            method:'get_activity_view_id'
        });
    },
    /**
     *Returnviewstodisplaywhencomingfromsystraydependingonthemodel.
     *
     *@private
     *@param{string}model
     *@returns{Array[]}outputthelistofviewstodisplay.
     */
    _getViewsList(model){
        return[[false,'kanban'],[false,'list'],[false,'form']];
    },
    /**
     *Update(render)activitysystemtrayviewonactivityupdation.
     *@private
     */
    _updateActivityPreview:function(){
        varself=this;
        self._getActivityData().then(function(){
            self._$activitiesPreview.html(QWeb.render('mail.systray.ActivityMenu.Previews',{
                widget:self,
                Time:Time
            }));
        });
    },
    /**
     *updatecounterbasedonactivitystatus(createdorDone)
     *@private
     *@param{Object}[data]key,valuetodecideactivitycreatedordeleted
     *@param{String}[data.type]notificationtype
     *@param{Boolean}[data.activity_deleted]whenactivitydeleted
     *@param{Boolean}[data.activity_created]whenactivitycreated
     */
    _updateCounter:function(data){
        if(data){
            if(data.activity_created){
                this.activityCounter++;
            }
            if(data.activity_deleted&&this.activityCounter>0){
                this.activityCounter--;
            }
            this.$('.o_notification_counter').text(this.activityCounter);
            this.$el.toggleClass('o_no_notification',!this.activityCounter);
        }
    },

    //------------------------------------------------------------
    //Handlers
    //------------------------------------------------------------

    /**
     *Redirecttospecificactiongivenitsxmlidortotheactivity
     *viewofthecurrentmodelifnoxmlidisprovided
     *
     *@private
     *@param{MouseEvent}ev
     */
    _onActivityActionClick:function(ev){
        ev.stopPropagation();
        this.$('.dropdown-toggle').dropdown('toggle');
        vartargetAction=$(ev.currentTarget);
        varactionXmlid=targetAction.data('action_xmlid');
        if(actionXmlid){
            this.do_action(actionXmlid);
        }else{
            vardomain=[['activity_ids.user_id','=',session.uid]]
            if(targetAction.data('domain')){
                domain=domain.concat(targetAction.data('domain'))
            }
            
            this.do_action({
                type:'ir.actions.act_window',
                name:targetAction.data('model_name'),
                views:[[false,'activity'],[false,'kanban'],[false,'list'],[false,'form']],
                view_mode:'activity',
                res_model:targetAction.data('res_model'),
                domain:domain,
            },{
                clear_breadcrumbs:true,
            });
        }
    },

    /**
     *Redirecttoparticularmodelview
     *@private
     *@param{MouseEvent}event
     */
    _onActivityFilterClick:function(event){
        //fetchthedatafromthebuttonotherwisefetchtheonesfromtheparent(.o_mail_preview).
        vardata=_.extend({},$(event.currentTarget).data(),$(event.target).data());
        varcontext={};
        if(data.filter==='my'){
            context['search_default_activities_overdue']=1;
            context['search_default_activities_today']=1;
        }else{
            context['search_default_activities_'+data.filter]=1;
        }
        //Necessarybecauseactivity_idsofmail.activity.mixinhasauto_join
        //So,duplicatesarefakingthecountand"Loadmore"doesn'tshowup
        context['force_search_count']=1;
        
        vardomain=[['activity_ids.user_id','=',session.uid]]
        if(data.domain){
            domain=domain.concat(data.domain)
        }
        
        this.do_action({
            type:'ir.actions.act_window',
            name:data.model_name,
            res_model: data.res_model,
            views:this._getViewsList(data.res_model),
            search_view_id:[false],
            domain:domain,
            context:context,
        },{
            clear_breadcrumbs:true,
        });
    },
    /**
     *@private
     */
    _onActivityMenuShow:function(){
        document.body.classList.add('modal-open');
         this._updateActivityPreview();
    },
    /**
     *@private
     */
    _onActivityMenuHide:function(){
        document.body.classList.remove('modal-open');
    },
});

SystrayMenu.Items.push(ActivityMenu);

returnActivityMenu;

});
