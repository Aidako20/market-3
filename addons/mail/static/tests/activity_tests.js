flectra.define('mail.activity_view_tests',function(require){
'usestrict';

varActivityView=require('mail.ActivityView');
vartestUtils=require('web.test_utils');
constActivityRenderer=require('mail.ActivityRenderer');
constdomUtils=require('web.dom');

varcreateActionManager=testUtils.createActionManager;

varcreateView=testUtils.createView;

QUnit.module('mail',{},function(){
QUnit.module('activityview',{
    beforeEach:function(){
        this.data={
            task:{
                fields:{
                    id:{string:'ID',type:'integer'},
                    foo:{string:"Foo",type:"char"},
                    activity_ids:{
                        string:'Activities',
                        type:'one2many',
                        relation:'mail.activity',
                        relation_field:'res_id',
                    },
                },
                records:[
                    {id:13,foo:'MeetingRoomFurnitures',activity_ids:[1]},
                    {id:30,foo:'Officeplanning',activity_ids:[2,3]},
                ],
            },
            partner:{
                fields:{
                    display_name:{string:"Displayedname",type:"char"},
                },
                records:[{
                    id:2,
                    display_name:"firstpartner",
                }]
            },
            'mail.activity':{
                fields:{
                    res_id:{string:'Relateddocumentid',type:'integer'},
                    activity_type_id:{string:"Activitytype",type:"many2one",relation:"mail.activity.type"},
                    display_name:{string:"Displayname",type:"char"},
                    date_deadline:{string:"DueDate",type:"date"},
                    can_write:{string:"Canwrite",type:"boolean"},
                    state:{
                        string:'State',
                        type:'selection',
                        selection:[['overdue','Overdue'],['today','Today'],['planned','Planned']],
                    },
                    mail_template_ids:{string:"Mailtemplates",type:"many2many",relation:"mail.template"},
                    user_id:{string:"Assignedto",type:"many2one",relation:'partner'},
                },
                records:[
                    {
                        id:1,
                        res_id:13,
                        display_name:"Anactivity",
                        date_deadline:moment().add(3,"days").format("YYYY-MM-DD"),//now
                        can_write:true,

                        state:"planned",
                        activity_type_id:1,
                        mail_template_ids:[8,9],
                        user_id:2,
                    },{
                        id:2,
                        res_id:30,
                        display_name:"Anactivity",
                        date_deadline:moment().format("YYYY-MM-DD"),//now
                        can_write:true,
                        state:"today",
                        activity_type_id:1,
                        mail_template_ids:[8,9],
                        user_id:2,
                    },{
                        id:3,
                        res_id:30,
                        display_name:"Anactivity",
                        date_deadline:moment().subtract(2,"days").format("YYYY-MM-DD"),//now
                        can_write:true,
                        state:"overdue",
                        activity_type_id:2,
                        mail_template_ids:[],
                        user_id:2,
                    }
                ],
            },
            'mail.template':{
                fields:{
                    name:{string:"Name",type:"char"},
                },
                records:[
                    {id:8,name:"Template1"},
                    {id:9,name:"Template2"},
                ],
            },
            'mail.activity.type':{
                fields:{
                    mail_template_ids:{string:"Mailtemplates",type:"many2many",relation:"mail.template"},
                    name:{string:"Name",type:"char"},
                },
                records:[
                    {id:1,name:"Email",mail_template_ids:[8,9]},
                    {id:2,name:"Call"},
                    {id:3,name:"CallforDemo"},
                    {id:4,name:"ToDo"},
                ],
            },
        };
    }
});

varactivityDateFormat=function(date){
    returndate.toLocaleDateString(moment().locale(),{day:'numeric',month:'short'});
};

QUnit.test('activityview:simpleactivityrendering',asyncfunction(assert){
    assert.expect(14);
    varactivity=awaitcreateView({
        View:ActivityView,
        model:'task',
        data:this.data,
        arch:'<activitystring="Task">'+
                    '<templates>'+
                        '<divt-name="activity-box">'+
                            '<fieldname="foo"/>'+
                        '</div>'+
                    '</templates>'+
            '</activity>',
        intercepts:{
            do_action:function(event){
                assert.deepEqual(event.data.action,{
                    context:{
                        default_res_id:30,
                        default_res_model:"task",
                        default_activity_type_id:3,
                    },
                    res_id:false,
                    res_model:"mail.activity",
                    target:"new",
                    type:"ir.actions.act_window",
                    view_mode:"form",
                    view_type:"form",
                    views:[[false,"form"]]
                },
                "shoulddoado_actionwithcorrectparameters");
                event.data.options.on_close();
            },
        },
    });

    assert.containsOnce(activity,'table',
        'shouldhaveatable');
    var$th1=activity.$('tabletheadtr:firstth:nth-child(2)');
    assert.containsOnce($th1,'span:first:contains(Email)','shouldcontain"Email"inheaderoffirstcolumn');
    assert.containsOnce($th1,'.o_kanban_counter','shouldcontainaprogressbarinheaderoffirstcolumn');
    assert.hasAttrValue($th1.find('.o_kanban_counter_progress.progress-bar:first'),'data-original-title','1Planned',
        'thecounterprogressbarsshouldbecorrectlydisplayed');
    assert.hasAttrValue($th1.find('.o_kanban_counter_progress.progress-bar:nth-child(2)'),'data-original-title','1Today',
        'thecounterprogressbarsshouldbecorrectlydisplayed');
    var$th2=activity.$('tabletheadtr:firstth:nth-child(3)');
    assert.containsOnce($th2,'span:first:contains(Call)','shouldcontain"Call"inheaderofsecondcolumn');
    assert.hasAttrValue($th2.find('.o_kanban_counter_progress.progress-bar:nth-child(3)'),'data-original-title','1Overdue',
        'thecounterprogressbarsshouldbecorrectlydisplayed');
    assert.containsNone(activity,'tabletheadtr:firstth:nth-child(4).o_kanban_counter',
        'shouldnotcontainaprogressbarinheaderof3rdcolumn');
    assert.ok(activity.$('tabletbodytr:firsttd:first:contains(Officeplanning)').length,
        'shouldcontain"Officeplanning"infirstcolumoffirstrow');
    assert.ok(activity.$('tabletbodytr:nth-child(2)td:first:contains(MeetingRoomFurnitures)').length,
        'shouldcontain"MeetingRoomFurnitures"infirstcolumofsecondrow');

    vartoday=activityDateFormat(newDate());

    assert.ok(activity.$('tabletbodytr:firsttd:nth-child(2).today.o_closest_deadline:contains('+today+')').length,
        'shouldcontainanactivityfortodayinsecondcelloffirstline'+today);
    vartd='tabletbodytr:nth-child(1)td.o_activity_empty_cell';
    assert.containsN(activity,td,2,'shouldcontainanemptycellasnoactivityscheduledyet.');

    //scheduleanactivity(thistriggersado_action)
    awaittestUtils.fields.editAndTrigger(activity.$(td+':first'),null,['mouseenter','click']);
    assert.containsOnce(activity,'tabletfoottr.o_record_selector',
        'shouldcontainsearchmoreselectortochoosetherecordtoscheduleanactivityforit');

    activity.destroy();
});

QUnit.test('activityview:nocontentrendering',asyncfunction(assert){
    assert.expect(2);

    //resetincompatiblesetup
    this.data['mail.activity'].records=[];
    this.data.task.records.forEach(function(task){
        task.activity_ids=false;
    });
    this.data['mail.activity.type'].records=[];

    varactivity=awaitcreateView({
        View:ActivityView,
        model:'task',
        data:this.data,
        arch:'<activitystring="Task">'+
                '<templates>'+
                    '<divt-name="activity-box">'+
                        '<fieldname="foo"/>'+
                    '</div>'+
                '</templates>'+
            '</activity>',
    });

    assert.containsOnce(activity,'.o_view_nocontent',
        "shoulddisplaythenocontenthelper");
    assert.strictEqual(activity.$('.o_view_nocontent.o_view_nocontent_empty_folder').text().trim(),
        "Nodatatodisplay",
        "shoulddisplaythenocontenthelpertext");

    activity.destroy();
});

QUnit.test('activityview:batchsendmailonactivity',asyncfunction(assert){
    assert.expect(6);
    varactivity=awaitcreateView({
        View:ActivityView,
        model:'task',
        data:this.data,
        arch:'<activitystring="Task">'+
                '<templates>'+
                    '<divt-name="activity-box">'+
                        '<fieldname="foo"/>'+
                    '</div>'+
                '</templates>'+
            '</activity>',
        mockRPC:function(route,args){
            if(args.method==='activity_send_mail'){
                assert.step(JSON.stringify(args.args));
                returnPromise.resolve();
            }
            returnthis._super.apply(this,arguments);
        },
    });
    assert.notOk(activity.$('tabletheadtr:firstth:nth-child(2)span:nth-child(2).dropdown-menu.show').length,
        'dropdownshouldn\'tbedisplayed');

    testUtils.dom.click(activity.$('tabletheadtr:firstth:nth-child(2)span:nth-child(2)i.fa-ellipsis-v'));
    assert.ok(activity.$('tabletheadtr:firstth:nth-child(2)span:nth-child(2).dropdown-menu.show').length,
        'dropdownshouldhaveappeared');

    testUtils.dom.click(activity.$('tabletheadtr:firstth:nth-child(2)span:nth-child(2).dropdown-menu.show.o_send_mail_template:contains(Template2)'));
    assert.notOk(activity.$('tabletheadtr:firstth:nth-child(2)span:nth-child(2).dropdown-menu.show').length,
        'dropdownshouldn\'tbedisplayed');

    testUtils.dom.click(activity.$('tabletheadtr:firstth:nth-child(2)span:nth-child(2)i.fa-ellipsis-v'));
    testUtils.dom.click(activity.$('tabletheadtr:firstth:nth-child(2)span:nth-child(2).dropdown-menu.show.o_send_mail_template:contains(Template1)'));
    assert.verifySteps([
        '[[13,30],9]',//sendmailtemplate9ontasks13and30
        '[[13,30],8]', //sendmailtemplate8ontasks13and30
    ]);

    activity.destroy();
});

QUnit.test('activityview:activitywidget',asyncfunction(assert){
    assert.expect(16);

    constparams={
        View:ActivityView,
        model:'task',
        data:this.data,
        arch:'<activitystring="Task">'+
                '<templates>'+
                    '<divt-name="activity-box">'+
                        '<fieldname="foo"/>'+
                    '</div>'+
                '</templates>'+
            '</activity>',
        mockRPC:function(route,args){
            if(args.method==='activity_send_mail'){
                assert.deepEqual([[30],8],args.args,"Shouldsendtemplate8onrecord30");
                assert.step('activity_send_mail');
                returnPromise.resolve();
            }
            if(args.method==='action_feedback_schedule_next'){
                assert.deepEqual([[3]],args.args,"Shouldexecuteaction_feedback_schedule_nextonactivity3only");
                assert.equal(args.kwargs.feedback,"feedback2");
                assert.step('action_feedback_schedule_next');
                returnPromise.resolve({serverGeneratedAction:true});
            }
            returnthis._super.apply(this,arguments);
        },
        intercepts:{
            do_action:function(ev){
                varaction=ev.data.action;
                if(action.serverGeneratedAction){
                    assert.step('serverGeneratedAction');
                }elseif(action.res_model==='mail.compose.message'){
                    assert.deepEqual({
                        default_model:"task",
                        default_res_id:30,
                        default_template_id:8,
                        default_use_template:true,
                        force_email:true
                        },action.context);
                    assert.step("do_action_compose");
                }elseif(action.res_model==='mail.activity'){
                    assert.deepEqual({
                        "default_res_id":30,
                        "default_res_model":"task"
                    },action.context);
                    assert.step("do_action_activity");
                }else{
                    assert.step("Unexpectedaction");
                }
            },
        },
    };

    varactivity=awaitcreateView(params);
    vartoday=activity.$('tabletbodytr:firsttd:nth-child(2).today');
    vardropdown=today.find('.dropdown-menu.o_activity');

    awaittestUtils.dom.click(today.find('.o_closest_deadline'));
    assert.hasClass(dropdown,'show',"dropdownshouldbedisplayed");
    assert.ok(dropdown.find('.o_activity_color_today:contains(Today)').length,"Titleshouldbetoday");
    assert.ok(dropdown.find('.o_activity_title_entry[data-activity-id="2"]:firstdiv:contains(template8)').length,
        "template8shouldbeavailable");
    assert.ok(dropdown.find('.o_activity_title_entry[data-activity-id="2"]:eq(1)div:contains(template9)').length,
        "template9shouldbeavailable");

    awaittestUtils.dom.click(dropdown.find('.o_activity_title_entry[data-activity-id="2"]:first.o_activity_template_preview'));
    awaittestUtils.dom.click(dropdown.find('.o_activity_title_entry[data-activity-id="2"]:first.o_activity_template_send'));
    varoverdue=activity.$('tabletbodytr:firsttd:nth-child(3).overdue');
    awaittestUtils.dom.click(overdue.find('.o_closest_deadline'));
    dropdown=overdue.find('.dropdown-menu.o_activity');
    assert.notOk(dropdown.find('.o_activity_titledivdivdiv:firstspan').length,
        "Notemplateshouldbeavailable");

    awaittestUtils.dom.click(dropdown.find('.o_schedule_activity'));
    awaittestUtils.dom.click(overdue.find('.o_closest_deadline'));
    awaittestUtils.dom.click(dropdown.find('.o_mark_as_done'));
    dropdown.find('#activity_feedback').val("feedback2");

    awaittestUtils.dom.click(dropdown.find('.o_activity_popover_done_next'));
    assert.verifySteps([
        "do_action_compose",
        "activity_send_mail",
        "do_action_activity",
        "action_feedback_schedule_next",
        "serverGeneratedAction"
        ]);

    activity.destroy();
});
QUnit.test('activityview:nogroup_by_menuandnocomparison_menu',asyncfunction(assert){
    assert.expect(4);

    varactionManager=awaitcreateActionManager({
        actions:[{
            id:1,
            name:'TaskAction',
            res_model:'task',
            type:'ir.actions.act_window',
            views:[[false,'activity']],
        }],
        archs:{
            'task,false,activity':'<activitystring="Task">'+
                                    '<templates>'+
                                        '<divt-name="activity-box">'+
                                            '<fieldname="foo"/>'+
                                        '</div>'+
                                    '</templates>'+
                                '</activity>',
            'task,false,search':'<search></search>',
        },
        data:this.data,
        session:{
            user_context:{lang:'zz_ZZ'},
        },
        mockRPC:function(route,args){
            if(args.method==='get_activity_data'){
                assert.deepEqual(args.kwargs.context,{lang:'zz_ZZ'},
                    'Thecontextshouldhavebeenpassed');
            }
            returnthis._super.apply(this,arguments);
        },
    });

    awaitactionManager.doAction(1);

    assert.containsN(actionManager,'.o_search_options.o_dropdownbutton:visible',2,
        "onlytwoelementsshouldbeavailableinviewsearch");
    assert.isVisible(actionManager.$('.o_search_options.o_dropdown.o_filter_menu>button'),
        "filtershouldbeavailableinviewsearch");
    assert.isVisible(actionManager.$('.o_search_options.o_dropdown.o_favorite_menu>button'),
        "favoritesshouldbeavailableinviewsearch");
    actionManager.destroy();
});

QUnit.test('activityview:searchmoretoscheduleanactivityforarecordofarespectingmodel',asyncfunction(assert){
    assert.expect(5);
    _.extend(this.data.task.fields,{
        name:{string:"Name",type:"char"},
    });
    this.data.task.records[2]={id:31,name:"Task3"};
    varactivity=awaitcreateView({
        View:ActivityView,
        model:'task',
        data:this.data,
        arch:'<activitystring="Task">'+
                '<templates>'+
                    '<divt-name="activity-box">'+
                        '<fieldname="foo"/>'+
                    '</div>'+
                '</templates>'+
            '</activity>',
        archs:{
            "task,false,list":'<treestring="Task"><fieldname="name"/></tree>',
            "task,false,search":'<search></search>',
        },
        mockRPC:function(route,args){
            if(args.method==='name_search'){
                args.kwargs.name="Task";
            }
            returnthis._super.apply(this,arguments);
        },
        intercepts:{
            do_action:function(ev){
                assert.step('doAction');
                varexpectedAction={
                    context:{
                        default_res_id:{id:31,display_name:undefined},
                        default_res_model:"task",
                    },
                    name:"ScheduleActivity",
                    res_id:false,
                    res_model:"mail.activity",
                    target:"new",
                    type:"ir.actions.act_window",
                    view_mode:"form",
                    views:[[false,"form"]],
                };
                assert.deepEqual(ev.data.action,expectedAction,
                    "shouldexecuteanactionwithcorrectparams");
                ev.data.options.on_close();
            },
        },
    });

    assert.containsOnce(activity,'tabletfoottr.o_record_selector',
        'shouldcontainsearchmoreselectortochoosetherecordtoscheduleanactivityforit');
    awaittestUtils.dom.click(activity.$('tabletfoottr.o_record_selector'));
    //searchcreatedialog
    var$modal=$('.modal-lg');
    assert.strictEqual($modal.find('.o_data_row').length,3,"alltasksshouldbeavailabletoselect");
    //selectarecordtoscheduleanactivityforit(thistriggersado_action)
    testUtils.dom.click($modal.find('.o_data_row:last'));
    assert.verifySteps(['doAction']);

    activity.destroy();
});

QUnit.test('Activityview:discardanactivitycreationdialog',asyncfunction(assert){
    assert.expect(2);

    varactionManager=awaitcreateActionManager({
        actions:[{
            id:1,
            name:'TaskAction',
            res_model:'task',
            type:'ir.actions.act_window',
            views:[[false,'activity']],
        }],
        archs:{
            'task,false,activity':`
                <activitystring="Task">
                    <templates>
                        <divt-name="activity-box">
                            <fieldname="foo"/>
                        </div>
                    </templates>
                </activity>`,
            'task,false,search':'<search></search>',
            'mail.activity,false,form':`
                <form>
                    <fieldname="display_name"/>
                    <footer>
                        <buttonstring="Discard"class="btn-secondary"special="cancel"/>
                    </footer>
                </form>`
        },
        data:this.data,
        intercepts:{
            do_action(ev){
                actionManager.doAction(ev.data.action,ev.data.options);
            }
        },
        asyncmockRPC(route,args){
            if(args.method==='check_access_rights'){
                returntrue;
            }
            returnthis._super(...arguments);
        },
    });
    awaitactionManager.doAction(1);

    awaittestUtils.dom.click(actionManager.$('.o_activity_view.o_data_row.o_activity_empty_cell')[0]);
    assert.containsOnce(
        $,
        '.modal.o_technical_modal.show',
        "ActivityModalshouldbeopened");

    awaittestUtils.dom.click($('.modal.o_technical_modal.showbutton[special="cancel"]'));
    assert.containsNone(
        $,
        '.modal.o_technical_modal.show',
        "ActivityModalshouldbeclosed");

    actionManager.destroy();
});

QUnit.test("Activityview:on_destroy_callbackdoesn'tcrash",asyncfunction(assert){
    assert.expect(3);

    constparams={
        View:ActivityView,
        model:'task',
        data:this.data,
        arch:'<activitystring="Task">'+
                '<templates>'+
                    '<divt-name="activity-box">'+
                        '<fieldname="foo"/>'+
                    '</div>'+
                '</templates>'+
            '</activity>',
    };

    ActivityRenderer.patch('test_mounted_unmounted',T=>
        classextendsT{
            mounted(){
                assert.step('mounted');
            }
            willUnmount(){
                assert.step('willUnmount');
            }
    });

    constactivity=awaitcreateView(params);
    domUtils.detach([{widget:activity}]);

    assert.verifySteps([
        'mounted',
        'willUnmount'
    ]);

    ActivityRenderer.unpatch('test_mounted_unmounted');
    activity.destroy();
});

});
});
