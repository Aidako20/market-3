flectra.define('mail/static/tests/helpers/mock_models.js',function(require){
'usestrict';

constpatchMixin=require('web.patchMixin');

/**
 *Allowstogeneratemockedmodelsthatwillbeusedbythemockedserver.
 *Thisisdefinedasaclasstoallowpatchesbydependentmodulesandanew
 *dataobjectisgeneratedeverytimetoensureanytestcanmodifyitwithout
 *impactingothertests.
 */
classMockModels{

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *Returnsanewdatasetofmockedmodels.
     *
     *@static
     *@returns{Object}
     */
    staticgenerateData(){
        return{
            'ir.attachment':{
                fields:{
                    checksum:{string:'cheksum',type:'char'},
                    create_date:{type:'date'},
                    create_uid:{string:"CreatedBy",type:"many2one",relation:'res.users'},
                    datas:{string:"FileContent(base64)",type:'binary'},
                    mimetype:{string:"mimetype",type:'char'},
                    name:{string:"attachmentname",type:'char',required:true},
                    res_id:{string:"resid",type:'integer'},
                    res_model:{type:'char',string:"resmodel"},
                    type:{type:'selection',selection:[['url',"URL"],['binary',"BINARY"]]},
                    url:{string:'url',type:'char'},
                },
                records:[],
            },
            'mail.activity':{
                fields:{
                    activity_category:{string:"Category",type:'selection',selection:[['default','Other'],['upload_file','UploadFile']]},
                    activity_type_id:{string:"Activitytype",type:"many2one",relation:"mail.activity.type"},
                    can_write:{string:"Canwrite",type:"boolean"},
                    create_uid:{string:"CreatedBy",type:"many2one",relation:'res.users'},
                    display_name:{string:"Displayname",type:"char"},
                    date_deadline:{string:"DueDate",type:"date",default(){returnmoment().format('YYYY-MM-DD');}},
                    icon:{type:'char'},
                    note:{string:"Note",type:"html"},
                    res_id:{type:'integer'},
                    res_model:{type:'char'},
                    state:{string:'State',type:'selection',selection:[['overdue','Overdue'],['today','Today'],['planned','Planned']]},
                    user_id:{string:"Assignedto",type:"many2one",relation:'res.users'},
                },
                records:[],
            },
            'mail.activity.type':{
                fields:{
                    category:{string:'Category',type:'selection',selection:[['default','Other'],['upload_file','UploadFile']]},
                    decoration_type:{string:"DecorationType",type:"selection",selection:[['warning','Alert'],['danger','Error']]},
                    icon:{string:'icon',type:"char"},
                    name:{string:"Name",type:"char"},
                },
                records:[
                    {icon:'fa-envelope',id:1,name:"Email"},
                ],
            },
            'mail.channel':{
                fields:{
                    channel_type:{string:"ChannelType",type:"selection",default:'channel'},
                    //EquivalenttomembersbutrequiredduetosomeRPCgivingthisfieldindomain.
                    channel_partner_ids:{string:"ChannelPartnerIds",type:'many2many',relation:'res.partner'},
                    //Inpythonthisbelongstomail.channel.partner.Hereforsimplicity.
                    custom_channel_name:{string:"Customchannelname",type:'char'},
                    fetched_message_id:{string:"LastFetched",type:'many2one',relation:'mail.message'},
                    group_based_subscription:{string:"Groupbasedsubscription",type:"boolean",default:false},
                    id:{string:"Id",type:'integer'},
                    //Inpythonthisbelongstomail.channel.partner.Hereforsimplicity.
                    is_minimized:{string:"isMinimized",type:"boolean",default:false},
                    //Inpythonitismoderator_ids.Hereforsimplicity.
                    is_moderator:{string:"Iscurrentpartnermoderator?",type:"boolean",default:false},
                    //Inpythonthisbelongstomail.channel.partner.Hereforsimplicity.
                    is_pinned:{string:"isPinned",type:"boolean",default:true},
                    //Inpython:email_send.
                    mass_mailing:{string:"Sendmessagesbyemail",type:"boolean",default:false},
                    members:{string:"Members",type:'many2many',relation:'res.partner',default(){return[this.currentPartnerId];}},
                    message_unread_counter:{string:"#unreadmessages",type:'integer'},
                    moderation:{string:"Moderation",type:'boolean',default:false},
                    name:{string:"Name",type:"char",required:true},
                    public:{string:"Public",type:"boolean",default:'groups'},
                    seen_message_id:{string:"LastSeen",type:'many2one',relation:'mail.message'},
                    //Inpythonthisbelongstomail.channel.partner.Hereforsimplicity.
                    state:{string:"FoldState",type:"char",default:'open'},
                    //naiveandnonRFC-compliantUUID,goodenoughforthe
                    //stringcomparisonthataredonewithitduringtests
                    uuid:{string:"UUID",type:"char",required:true,default(){return_.uniqueId('mail.channel_uuid-');}},
                },
                records:[],
            },
            //Fakemodeltosimulate"hardcoded"commandsfrompython
            'mail.channel_command':{
                fields:{
                    channel_types:{type:'binary'},//arrayisexpected
                    help:{type:'char'},
                    name:{type:'char'},
                },
                records:[],
            },
            'mail.followers':{
                fields:{
                    channel_id:{type:'integer'},
                    email:{type:'char'},
                    id:{type:'integer'},
                    is_active:{type:'boolean'},
                    is_editable:{type:'boolean'},
                    name:{type:'char'},
                    partner_id:{type:'integer'},
                    res_id:{type:'many2one_reference'},
                    res_model:{type:'char'},
                    subtype_ids:{type:'many2many',relation:'mail.message.subtype'}
                },
                records:[],
            },
            'mail.message':{
                fields:{
                    attachment_ids:{string:"Attachments",type:'many2many',relation:'ir.attachment',default:[]},
                    author_id:{string:"Author",type:'many2one',relation:'res.partner',default(){returnthis.currentPartnerId;}},
                    body:{string:"Contents",type:'html',default:"<p></p>"},
                    channel_ids:{string:"Channels",type:'many2many',relation:'mail.channel'},
                    date:{string:"Date",type:'datetime',default(){returnmoment.utc().format("YYYY-MM-DDHH:mm:ss");}},
                    email_from:{string:"From",type:'char'},
                    history_partner_ids:{string:"PartnerswithHistory",type:'many2many',relation:'res.partner'},
                    id:{string:"Id",type:'integer'},
                    is_discussion:{string:"Discussion",type:'boolean'},
                    is_note:{string:"Note",type:'boolean'},
                    is_notification:{string:"Notification",type:'boolean'},
                    message_type:{string:"Type",type:'selection',default:'email'},
                    model:{string:"RelatedDocumentmodel",type:'char'},
                    needaction:{string:"NeedAction",type:'boolean'},
                    needaction_partner_ids:{string:"PartnerswithNeedAction",type:'many2many',relation:'res.partner'},
                    moderation_status:{string:"Moderationstatus",type:'selection',selection:[['pending_moderation',"PendingModeration"],['accepted',"Accepted"],['rejected',"Rejected"]],default:false},
                    notification_ids:{string:"Notifications",type:'one2many',relation:'mail.notification'},
                    partner_ids:{string:"Recipients",type:'many2many',relation:'res.partner'},
                    record_name:{string:"Name",type:'char'},
                    res_id:{string:"RelatedDocumentID",type:'integer'},
                    //Inpython,resultofaformatter.Hereforsimplicity.
                    res_model_name:{string:"ResModelName",type:'char'},
                    starred_partner_ids:{string:"FavoritedBy",type:'many2many',relation:'res.partner'},
                    subject:{string:"Subject",type:'char'},
                    subtype_id:{string:"Subtypeid",type:'many2one',relation:'mail.message.subtype'},
                    tracking_value_ids:{relation:'mail.tracking.value',string:"Trackingvalues",type:'one2many'},
                },
                records:[],
            },
            'mail.message.subtype':{
                fields:{
                    default:{type:'boolean',default:true},
                    description:{type:'text'},
                    hidden:{type:'boolean'},
                    internal:{type:'boolean'},
                    name:{type:'char'},
                    parent_id:{type:'many2one',relation:'mail.message.subtype'},
                    relation_field:{type:'char'},
                    res_model:{type:'char'},
                    sequence:{type:'integer',default:1},
                    //notafieldinPythonbutxmlidofdata
                    subtype_xmlid:{type:'char'},
                },
                records:[
                    {name:"Discussions",sequence:0,subtype_xmlid:'mail.mt_comment'},
                    {default:false,internal:true,name:"Note",sequence:100,subtype_xmlid:'mail.mt_note'},
                    {default:false,internal:true,name:"Activities",sequence:90,subtype_xmlid:'mail.mt_activities'},
                ],
            },
            'mail.notification':{
                fields:{
                    failure_type:{string:"FailureType",type:'selection',selection:[["SMTP","Connectionfailed(outgoingmailserverproblem)"],["RECIPIENT","Invalidemailaddress"],["BOUNCE","Emailaddressrejectedbydestination"],["UNKNOWN","Unknownerror"]]},
                    is_read:{string:"IsRead",type:'boolean',default:false},
                    mail_message_id:{string:"Message",type:'many2one',relation:'mail.message'},
                    notification_status:{string:"NotificationStatus",type:'selection',selection:[['ready','ReadytoSend'],['sent','Sent'],['bounce','Bounced'],['exception','Exception'],['canceled','Canceled']],default:'ready'},
                    notification_type:{string:"NotificationType",type:'selection',selection:[['email','HandlebyEmails'],['inbox','HandleinFlectra']],default:'email'},
                    res_partner_id:{string:"NeedactionRecipient",type:'many2one',relation:'res.partner'},
                },
                records:[],
            },
            'mail.shortcode':{
                fields:{
                    source:{type:'char'},
                    substitution:{type:'char'},
                },
                records:[],
            },
            'mail.tracking.value':{
                fields:{
                    changed_field:{string:'Changedfield',type:'char'},
                    field_type:{string:'Fieldtype',type:'char'},
                    new_value:{string:'Newvalue',type:'char'},
                    old_value:{string:'Oldvalue',type:'char'},
                },
                records:[],
            },
            'res.country':{
                fields:{
                    code:{string:"Code",type:'char'},
                    name:{string:"Name",type:'char'},
                },
                records:[],
            },
            'res.partner':{
                fields:{
                    active:{string:"Active",type:'boolean',default:true},
                    activity_ids:{string:"Activities",type:'one2many',relation:'mail.activity'},
                    contact_address_complete:{string:"Address",type:'char'},
                    country_id:{string:"Country",type:'many2one',relation:'res.country'},
                    description:{string:'description',type:'text'},
                    display_name:{string:"Displayedname",type:"char"},
                    email:{type:'char'},
                    image_128:{string:"Image128",type:'image'},
                    im_status:{string:"IMStatus",type:'char'},
                    message_follower_ids:{relation:'mail.followers',string:"Followers",type:"one2many"},
                    message_attachment_count:{string:'Attachmentcount',type:'integer'},
                    message_ids:{string:"Messages",type:'one2many',relation:'mail.message'},
                    name:{string:"Name",type:'char'},
                    partner_latitude:{string:"Latitude",type:'float'},
                    partner_longitude:{string:"Longitude",type:'float'},
                },
                records:[],
            },
            'res.users':{
                fields:{
                    active:{string:"Active",type:'boolean',default:true},
                    display_name:{string:"Displayname",type:"char"},
                    im_status:{string:"IMStatus",type:'char'},
                    name:{string:"Name",type:'char'},
                    partner_id:{string:"Relatedpartners",type:'many2one',relation:'res.partner'},
                },
                records:[],
            },
            'res.fake':{
                fields:{
                    activity_ids:{string:"Activities",type:'one2many',relation:'mail.activity'},
                    email_cc:{type:'char'},
                    partner_ids:{
                        string:"Relatedpartners",
                        type:'one2many',
                        relation:'res.partner'
                    },
                },
                records:[],
            },
        };
    }

}

returnpatchMixin(MockModels);

});
