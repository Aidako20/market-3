/**
 *Definesaproperpasswordfield(ratherthanjustanInputFieldoption)to
 *providea"passwordstrength"meterbasedonthedatabase'scurrent
 *policy&the2word16passwordpolicyrecommendedbyShay(2016)"Designing
 *PasswordPoliciesforStrengthandUsability".
 */
flectra.define('auth_password_policy.PasswordField',function(require){
"usestrict";
varfields=require('web.basic_fields');
varregistry=require('web.field_registry');
varpolicy=require('auth_password_policy');
varMeter=require('auth_password_policy.Meter');
var_formatValue=require('web.AbstractField').prototype._formatValue;

varPasswordField=fields.InputField.extend({
    className:'o_field_password',

    init:function(){
        this._super.apply(this,arguments);
        this.nodeOptions.isPassword=true;
        this._meter=newMeter(this,newpolicy.Policy({}),policy.recommendations);
    },
    willStart:function(){
        var_this=this;
        vargetPolicy=this._rpc({
            model:'res.users',
            method:'get_password_policy',
        }).then(function(p){
            _this._meter=newMeter(_this,newpolicy.Policy(p),policy.recommendations);
        });
        returnPromise.all([
            this._super.apply(this,arguments),
            getPolicy
        ]);
    },
    /**
     *Adda<meter>nexttotheinput(TODO:movetotemplate?)
     *
     *@override
     *@private
     */
    _renderEdit:function(){
        var_this=this;
        varmeter=this._meter;
        returnPromise.resolve(this._super.apply(this,arguments)).then(function(){
            returnmeter._widgetRenderAndInsert(function(t){
                //insertAfterdoesn'tworkandappendTomeansthemeteris
                //ignored(asthis.$elisaninput[type=password])
                _this.$el=t.add(meter.$el);
            },_this.$el);
        }).then(function(){
            //initialmeterupdatewhenre-editing
            meter.update(_this._getValue());
        });
    },
    /**
     *disableformattingforthiswidget,orthevaluegetsreplacedby
     *****beforebeingwrittenbackintothewidgetwhenswitchingfrom
     *readonlytoeditable(soinput->readonly->inputmore,the1stinput
     *isallreplacedby*snotjustindisplaybutinactualstorage)
     *
     *@override
     *@private
     */
    _formatValue:function(value){returnvalue||'';},
    /**
     *@override
     *@private
     */
    _renderReadonly:function(){
        this.$el.text(_formatValue.call(this,this.value));
    },
    /**
     *Updatemetervalueontheflyonvaluechange
     *
     *@override
     *@private
     */
    _onInput:function(){
        this._super();
        this._meter.update(this._getValue());
    }
});

registry.add("password_meter",PasswordField);
returnPasswordField;
});
