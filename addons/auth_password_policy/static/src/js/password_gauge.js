flectra.define('auth_password_policy',function(require){
"usestrict";
varcore=require('web.core');
var_t=core._t;

varPolicy=core.Class.extend({
    /**
     *
     *@param{Object}info
     *@param{Number}[info.minlength=0]
     *@param{Number}[info.minwords=0]
     *@param{Number}[info.minclasses=0]
     */
    init:function(info){
        this._minlength=info.minlength||1;
        this._minwords=info.minwords||1;
        this._minclasses=info.minclasses||1;
    },
    toString:function(){
        varmsgs=[];
        if(this._minlength>1){
            msgs.push(_.str.sprintf(_t("atleast%dcharacters"),this._minlength));
        }
        if(this._minwords>1){
            msgs.push(_.str.sprintf(_t("atleast%dwords"),this._minwords));
        }
        if(this._minclasses>1){
            msgs.push(_.str.sprintf(_t("atleast%dcharacterclasses"),this._minclasses));
        }
        returnmsgs.join(',')
    },
    score:function(password){
        varlengthscore=Math.min(
            password.length/this._minlength,
            1.0);
        //wewantthenumberof"words".Splittingonno-wordsdoesn'twork
        //becauseJSwilladdanemptystringwhenmatchingaleadingor
        //trailingpatterne.g."foo".split(/\W+/)willreturn['','foo','']
        //bysplittingonthewords,weshouldalwaysgetwordscount+1
        varwordscore= Math.min(
            //\wincludes_whichwedon'twant,socombine\Wand_then
            //invertittoknowwhat"word"is
            //
            //SadlyJSisabsolutegarbage,sothissplittingisbasically
            //solelyascii-basedunlesswewanttoincludecset
            //(http://inimino.org/~inimino/blog/javascript_cset)whichcan
            //generatenon-trivialcharacter-class-set-basedregexpatterns
            //forus.Wecouldgeneratetheregexstaticallybutthey'rehuge
            //andgnarlyashell.
            (password.split(/[^\W_]+/).length-1)/this._minwords,
            1.0
        );
        //Seeaboveforissuespertainingtocharacterclassification:
        //we'llclassifyusingtheasciirangebecausethat'sbasicallyour
        //onlyoption
        varclasses=
              ((/[a-z]/.test(password))?1:0)
            +((/[A-Z]/.test(password))?1:0)
            +((/\d/.test(password))?1:0)
            +((/[^A-Za-z\d]/.test(password))?1:0);
        varclassesscore=Math.min(classes/this._minclasses,1.0);

        returnlengthscore*wordscore*classesscore;
    },
});

return{
    /**
     *Computesthepassword'sscore,shouldberoughlycontinuous,under0.5
     *iftherequirementsdon'tpassandat1iftherecommendationsare
     *exceeded
     */
    computeScore:function(password,requirements,recommendations){
        varreq=requirements.score(password);
        varrec=recommendations.score(password);
        returnMath.pow(req,4)*(0.5+Math.pow(rec,2)/2);
    },
    Policy:Policy,
    //RecommendationsfromShay(2016):
    //Ourresearchhasshownthatthereareotherpoliciesthataremore
    //usableandmoresecure.Wefoundthreepolicies(2class12,3class12,
    //and2word16)thatwecandirectlyrecommendovercomp8
    //
    //Since2class12isasupersetof3class12and2word16,eitherpickitor
    //picktheothertwo(andgetthehighestscoreofthetwo).We're
    //pickingtheothertwo.
    recommendations:{
        score:function(password){
            return_.max(_.invoke(this.policies,'score',password));
        },
        policies:[
            newPolicy({minlength:16,minwords:2}),
            newPolicy({minlength:12,minclasses:3})
        ]
    }
}
});

flectra.define('auth_password_policy.Meter',function(require){
"usestrict";
varcore=require('web.core');
varpolicy=require('auth_password_policy');
varWidget=require('web.Widget');
var_t=core._t;

varPasswordPolicyMeter=Widget.extend({
    tagName:'meter',
    className:'o_password_meter',
    attributes:{
        min:0,
        low:0.5,
        high:0.99,
        max:1,
        value:0,
        optimum:1,
    },
    init:function(parent,required,recommended){
        this._super(parent);
        this._required=required;
        this._recommended=recommended;
    },
    start:function(){
        varhelpMessage=_t("Required:%s.\n\nHint:increaselength,usemultiplewordsandusenon-lettercharacterstoincreaseyourpassword'sstrength.");
        this.el.setAttribute(
            'title',_.str.sprintf(helpMessage,String(this._required)||_t("norequirements")));
        returnthis._super().then(function(){
        });
    },
    /**
     *Updatesthemeterwiththeinformationofthenewpassword:computes
     *the(requiredxrecommended)scoreandsetsthewidget'svalueasthat
     *
     *@param{String}password
     */
    update:function(password){
        this.el.value=policy.computeScore(password,this._required,this._recommended);
    }
});
returnPasswordPolicyMeter;
});
