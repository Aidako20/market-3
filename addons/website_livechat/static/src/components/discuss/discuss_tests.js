flectra.define('website_livechat/static/src/components/discuss/discuss_tests.js',function(require){
'usestrict';

const{
    afterEach,
    beforeEach,
    start,
}=require('mail/static/src/utils/test_utils.js');

QUnit.module('website_livechat',{},function(){
QUnit.module('components',{},function(){
QUnit.module('discuss',{},function(){
QUnit.module('discuss_tests.js',{
    beforeEach(){
        beforeEach(this);

        this.start=asyncparams=>{
            const{env,widget}=awaitstart(Object.assign({},params,{
                autoOpenDiscuss:true,
                data:this.data,
                hasDiscuss:true,
            }));
            this.env=env;
            this.widget=widget;
        };
    },
    afterEach(){
        afterEach(this);
    },
});

QUnit.test('renderingofvisitorbanner',asyncfunction(assert){
    assert.expect(13);

    this.data['res.country'].records.push({
        id:11,
        code:'FAKE',
    });
    this.data['website.visitor'].records.push({
        id:11,
        country_id:11,
        display_name:'Visitor#11',
        history:'Home→Contact',
        is_connected:true,
        lang:"English",
        website:"Generalwebsite",
    });
    this.data['mail.channel'].records.push({
        channel_type:'livechat',
        id:11,
        livechat_operator_id:this.data.currentPartnerId,
        livechat_visitor_id:11,
        members:[this.data.currentPartnerId,this.data.publicPartnerId],
    });
    awaitthis.start({
        discuss:{
            context:{
                active_id:'mail.channel_11',
            },
        },
    });
    assert.containsOnce(
        document.body,
        '.o_VisitorBanner',
        "shouldhaveavisitorbanner",
    );
    assert.containsOnce(
        document.body,
        '.o_VisitorBanner_avatar',
        "shouldshowthevisitoravatarinthebanner",
    );
    assert.strictEqual(
        document.querySelector('.o_VisitorBanner_avatar').dataset.src,
        "/mail/static/src/img/smiley/avatar.jpg",
        "shouldshowthedefaultavatar",
    );
    assert.containsOnce(
        document.body,
        '.o_VisitorBanner_onlineStatusIcon',
        "shouldshowthevisitoronlinestatusiconontheavatar",
    );
    assert.strictEqual(
        document.querySelector('.o_VisitorBanner_country').dataset.src,
        "/base/static/img/country_flags/FAKE.png",
        "shouldshowtheflagofthecountryofthevisitor",
    );
    assert.containsOnce(
        document.body,
        '.o_VisitorBanner_visitor',
        "shouldshowthevisitornameinthebanner",
    );
    assert.strictEqual(
        document.querySelector('.o_VisitorBanner_visitor').textContent,
        "Visitor#11",
        "shouldhave'Visitor#11'asvisitorname",
    );
    assert.containsOnce(
        document.body,
        '.o_VisitorBanner_language',
        "shouldshowthevisitorlanguageinthebanner",
    );
    assert.strictEqual(
        document.querySelector('.o_VisitorBanner_language').textContent,
        "English",
        "shouldhave'English'aslanguageofthevisitor",
    );
    assert.containsOnce(
        document.body,
        '.o_VisitorBanner_website',
        "shouldshowthevisitorwebsiteinthebanner",
    );
    assert.strictEqual(
        document.querySelector('.o_VisitorBanner_website').textContent,
        "Generalwebsite",
        "shouldhave'Generalwebsite'aswebsiteofthevisitor",
    );
    assert.containsOnce(
        document.body,
        '.o_VisitorBanner_history',
        "shouldshowthevisitorhistoryinthebanner",
    );
    assert.strictEqual(
        document.querySelector('.o_VisitorBanner_history').textContent,
        "Home→Contact",
        "shouldhave'Home→Contact'ashistoryofthevisitor",
    );
});

QUnit.test('livechatwithnon-loggedvisitorshouldshowvisitorbanner',asyncfunction(assert){
    assert.expect(1);

    this.data['res.country'].records.push({
        id:11,
        code:'FAKE',
    });
    this.data['website.visitor'].records.push({
        id:11,
        country_id:11,
        display_name:'Visitor#11',
        history:'Home→Contact',
        is_connected:true,
        lang:"English",
        website:"Generalwebsite",
    });
    this.data['mail.channel'].records.push({
        channel_type:'livechat',
        id:11,
        livechat_operator_id:this.data.currentPartnerId,
        livechat_visitor_id:11,
        members:[this.data.currentPartnerId,this.data.publicPartnerId],
    });
    awaitthis.start({
        discuss:{
            context:{
                active_id:'mail.channel_11',
            },
        },
    });
    assert.containsOnce(
        document.body,
        '.o_VisitorBanner',
        "shouldhaveavisitorbanner",
    );
});

QUnit.test('livechatwithloggedvisitorshouldshowvisitorbanner',asyncfunction(assert){
    assert.expect(2);

    this.data['res.country'].records.push({
        id:11,
        code:'FAKE',
    });
    this.data['res.partner'].records.push({
        id:12,
        name:'PartnerVisitor',
    });
    this.data['website.visitor'].records.push({
        id:11,
        country_id:11,
        display_name:'Visitor#11',
        history:'Home→Contact',
        is_connected:true,
        lang:"English",
        partner_id:12,
        website:"Generalwebsite",
    });
    this.data['mail.channel'].records.push({
        channel_type:'livechat',
        id:11,
        livechat_operator_id:this.data.currentPartnerId,
        livechat_visitor_id:11,
        members:[this.data.currentPartnerId,12],
    });
    awaitthis.start({
        discuss:{
            context:{
                active_id:'mail.channel_11',
            },
        },
    });
    assert.containsOnce(
        document.body,
        '.o_VisitorBanner',
        "shouldhaveavisitorbanner",
    );
    assert.strictEqual(
        document.querySelector('.o_VisitorBanner_visitor').textContent,
        "PartnerVisitor",
        "shouldhavepartnernameasdisplaynameofloggedvisitoronthevisitorbanner"
    );
});

QUnit.test('livechatwithoutvisitorshouldnotshowvisitorbanner',asyncfunction(assert){
    assert.expect(2);

    this.data['res.partner'].records.push({id:11});
    this.data['mail.channel'].records.push({
        channel_type:'livechat',
        id:11,
        livechat_operator_id:this.data.currentPartnerId,
        members:[this.data.currentPartnerId,11],
    });
    awaitthis.start({
        discuss:{
            context:{
                active_id:'mail.channel_11',
            },
        },
    });
    assert.containsOnce(
        document.body,
        '.o_MessageList',
        "shouldhaveamessagelist",
    );
    assert.containsNone(
        document.body,
        '.o_VisitorBanner',
        "shouldnothaveanyvisitorbanner",
    );
});

QUnit.test('non-livechatchannelshouldnotshowvisitorbanner',asyncfunction(assert){
    assert.expect(2);

    this.data['mail.channel'].records.push({id:11,name:"General"});
    awaitthis.start({
        discuss:{
            context:{
                active_id:'mail.channel_11',
            },
        },
    });
    assert.containsOnce(
        document.body,
        '.o_MessageList',
        "shouldhaveamessagelist",
    );
    assert.containsNone(
        document.body,
        '.o_VisitorBanner',
        "shouldnothaveanyvisitorbanner",
    );
});

});
});
});

});
