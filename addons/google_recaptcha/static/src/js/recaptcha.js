flectra.define('google_recaptcha.ReCaptchaV3',function(require){
"usestrict";

constajax=require('web.ajax');
constClass=require('web.Class');
constcore=require('web.core');

const_t=core._t;

constReCaptcha=Class.extend({
    /**
     *@override
     */
    init:function(){
        this._publicKey=flectra.reCaptchaPublicKey;
    },
    /**
     *Loadstherecaptchalibraries.
     *
     *@returns{Promise|boolean}promiseiflibsareloadingelsefalseifthereCaptchakeyisempty.
     */
    loadLibs:function(){
        if(this._publicKey){
            this._recaptchaReady=ajax.loadJS(`https://www.recaptcha.net/recaptcha/api.js?render=${encodeURIComponent(this._publicKey)}`)
                .then(()=>newPromise(resolve=>window.grecaptcha.ready(()=>resolve())));
            returnthis._recaptchaReady.then(()=>!!document.querySelector('.grecaptcha-badge'));
        }
        returnfalse;
    },
    /**
     *ReturnsanobjectwiththetokenifreCaptchacallsucceeds
     *Ifnokeyissetanobjectwithamessageisreturned
     *Ifanerroroccuredanobjectwiththeerrormessageisreturned
     *
     *@param{string}action
     *@returns{Promise|Object}
     */
    getToken:asyncfunction(action){
        if(!this._publicKey){
            return{
                message:_t("Norecaptchasitekeyset."),
            };
        }
        awaitthis._recaptchaReady;
        try{
            return{
                token:awaitwindow.grecaptcha.execute(this._publicKey,{action:action})
            };
        }catch(e){
            return{
                error:_t("Therecaptchasitekeyisinvalid."),
            };
        }
    },
});

return{
    ReCaptcha:ReCaptcha,
};
});
