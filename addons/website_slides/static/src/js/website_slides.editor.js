flectra.define('website_slides.editor',function(require){
"usestrict";

varcore=require('web.core');
varDialog=require('web.Dialog');
varQWeb=core.qweb;
varWebsiteNewMenu=require('website.newMenu');
varTagCourseDialog=require('website_slides.channel_tag.add').TagCourseDialog;
varwUtils=require('website.utils');

var_t=core._t;


varChannelCreateDialog=Dialog.extend({
    template:'website.slide.channel.create',
    xmlDependencies:Dialog.prototype.xmlDependencies.concat(
        ['/website_slides/static/src/xml/website_slides_channel.xml',
         '/website_slides/static/src/xml/website_slides_channel_tag.xml']
    ),
    events:_.extend({},Dialog.prototype.events,{
        'changeinput#tag_ids':'_onChangeTag',
    }),
    custom_events:_.extend({},Dialog.prototype.custom_events,{
        'tag_refresh':'_onTagRefresh',
        'tag_remove_new':'_onTagRemoveNew',
    }),
    /**
     *@override
     *@param{Object}parent
     *@param{Object}options
     */
    init:function(parent,options){
        options=_.defaults(options||{},{
            title:_t("NewCourse"),
            size:'medium',
            buttons:[{
                text:_t("Create"),
                classes:'btn-primary',
                click:this._onClickFormSubmit.bind(this)
            },{
                text:_t("Discard"),
                close:true
            },]
        });
        this._super(parent,options);
    },
    start:function(){
        varself=this;
        returnthis._super.apply(this,arguments).then(function(){
            var$input=self.$('#tag_ids');
            $input.select2({
                width:'100%',
                allowClear:true,
                formatNoMatches:false,
                multiple:true,
                selection_data:false,
                formatSelection:function(data,container,fmt){
                    if(data.tag){
                        data.text=data.tag;
                    }
                    returnfmt(data.text);
                },
                createSearchChoice:function(term,data){
                    varaddedTags=$(this.opts.element).select2('data');
                    if(_.filter(_.union(addedTags,data),function(tag){
                        returntag.text.toLowerCase().localeCompare(term.toLowerCase())===0;
                    }).length===0){
                        if(this.opts.can_create){
                            return{
                                id:_.uniqueId('tag_'),
                                create:true,
                                tag:term,
                                text:_.str.sprintf(_t("CreatenewTag'%s'"),term),
                            };
                        }else{
                            returnundefined;
                        }
                    }
                },
                fill_data:function(query,data){
                    varthat=this,
                        tags={results:[]};
                    _.each(data,function(obj){
                        if(that.matcher(query.term,obj.name)){
                            tags.results.push({id:obj.id,text:obj.name});
                        }
                    });
                    query.callback(tags);
                },
                query:function(query){
                    varthat=this;
                    //fetchdataonlyonceandstoreit
                    if(!this.selection_data){
                        self._rpc({
                            route:'/slides/channel/tag/search_read',
                            params:{
                                fields:['name'],
                                domain:[],
                            }
                        }).then(function(data){
                            that.can_create=data.can_create;
                                that.fill_data(query,data.read_results);
                                that.selection_data=data.read_results;
                        });
                    }else{
                        this.fill_data(query,this.selection_data);
                    }
                }
            });
        });
    },
    _onClickFormSubmit:function(ev){
        var$form=this.$("#slide_channel_add_form");
        var$title=this.$("#title");
        if(!$title[0].value){
            $title.addClass('border-danger');
            this.$("#title-required").removeClass('d-none');
        }else{
            $form.submit();
        }
    },
    _onChangeTag:function(ev){
        varself=this;
        vartags=$(ev.currentTarget).select2('data');
        tags.forEach(function(element){
            if(element.create){
                newTagCourseDialog(self,{defaultTag:element.text}).open();
            }
        });
    },
    /**
     *ReplacethenewtagIDbyitsrealID
     *@paramev
     *@private
     */
    _onTagRefresh:function(ev){
        var$tag_ids=$('#tag_ids');
        vartags=$tag_ids.select2('data');
        tags.forEach(function(element){
            if(element.create){
                element.id=ev.data.tag_id;
                element.create=false;
            }
        });
        $tag_ids.select2('data',tags);
        //Setselection_datatofalsetoforcetagreload
        $tag_ids.data('select2').opts.selection_data=false;
    },
    /**
     *Removethecreatedtagiftheuserclickson'Discard'onthecreatetagDialog
     *@private
     */
    _onTagRemoveNew:function(){
        vartags=$('#tag_ids').select2('data');
        tags=tags.filter(function(value){
            return!value.create;
        });
        $('#tag_ids').select2('data',tags);
    },
});

WebsiteNewMenu.include({
    actions:_.extend({},WebsiteNewMenu.prototype.actions||{},{
        new_slide_channel:'_createNewSlideChannel',
    }),

    //--------------------------------------------------------------------------
    //Actions
    //--------------------------------------------------------------------------

    /**
     *Displaysthepopuptocreateanewslidechannel,
     *andredirectstheusertothischannel.
     *
     *@private
     *@returns{Promise}Unresolvedifthereisaredirection
     */
     _createNewSlideChannel:function(){
        varself=this;
        vardef=newPromise(function(resolve){
            vardialog=newChannelCreateDialog(self,{});
            dialog.open();
            dialog.on('closed',self,resolve);
        });
        returndef;
     },
});
});
