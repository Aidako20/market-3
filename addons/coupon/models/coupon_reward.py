#-*-coding:utf-8-*-
#PartofFlectra.SeeLICENSEfileforfullcopyrightandlicensingdetails.

fromflectraimportapi,fields,models,_
fromflectra.exceptionsimportValidationError


classCouponReward(models.Model):
    _name='coupon.reward'
    _description="CouponReward"
    _rec_name='reward_description'

    #VFEFIXMEmulticompany
    """Rewardsarenotrestrictedtoacompany...
    Youcouldhaveareward_product_idlimitedtoaspecificcompanyA.
    ButstillusethisrewardasrewardofaprogramofcompanyB...
    """
    reward_description=fields.Char('RewardDescription')
    reward_type=fields.Selection([
        ('discount','Discount'),
        ('product','FreeProduct'),
        ],string='RewardType',default='discount',
        help="Discount-Rewardwillbeprovidedasdiscount.\n"+
        "FreeProduct-Freeproductwillbeprovideasreward\n"+
        "FreeShipping-Freeshippingwillbeprovidedasreward(Needdeliverymodule)")
    #ProductReward
    reward_product_id=fields.Many2one('product.product',string="FreeProduct",
        help="RewardProduct")
    reward_product_quantity=fields.Integer(string="Quantity",default=1,help="Rewardproductquantity")
    #DiscountReward
    discount_type=fields.Selection([
        ('percentage','Percentage'),
        ('fixed_amount','FixedAmount')],default="percentage",
        help="Percentage-Enteredpercentagediscountwillbeprovided\n"+
        "Amount-Enteredfixedamountdiscountwillbeprovided")
    discount_percentage=fields.Float(string="Discount",default=10,
        help='Thediscountinpercentage,between1and100')
    discount_apply_on=fields.Selection([
        ('on_order','OnOrder'),
        ('cheapest_product','OnCheapestProduct'),
        ('specific_products','OnSpecificProducts')],default="on_order",
        help="OnOrder-Discountonwholeorder\n"+
        "Cheapestproduct-Discountoncheapestproductoftheorder\n"+
        "Specificproducts-Discountonselectedspecificproducts")
    discount_specific_product_ids=fields.Many2many('product.product',string="Products",
        help="Productsthatwillbediscountedifthediscountisappliedonspecificproducts")
    discount_max_amount=fields.Float(default=0,
        help="Maximumamountofdiscountthatcanbeprovided")
    discount_fixed_amount=fields.Float(string="FixedAmount",help='Thediscountinfixedamount')
    reward_product_uom_id=fields.Many2one(related='reward_product_id.product_tmpl_id.uom_id',string='UnitofMeasure',readonly=True)
    discount_line_product_id=fields.Many2one('product.product',string='RewardLineProduct',copy=False,
        help="Productusedinthesalesordertoapplythediscount.Eachcouponprogramhasitsownrewardproductforreportingpurpose")

    @api.constrains('discount_percentage')
    def_check_discount_percentage(self):
        ifself.filtered(lambdareward:reward.discount_type=='percentage'and(reward.discount_percentage<0orreward.discount_percentage>100)):
            raiseValidationError(_('Discountpercentageshouldbebetween1-100'))

    defname_get(self):
        """
        Returnsacompletedescriptionofthereward
        """
        result=[]
        forrewardinself:
            reward_string=""
            ifreward.reward_type=='product':
                reward_string=_("FreeProduct-%s",reward.reward_product_id.name)
            elifreward.reward_type=='discount':
                ifreward.discount_type=='percentage':
                    reward_percentage=str(reward.discount_percentage)
                    ifreward.discount_apply_on=='on_order':
                        reward_string=_("%s%%discountontotalamount",reward_percentage)
                    elifreward.discount_apply_on=='specific_products':
                        iflen(reward.discount_specific_product_ids)>1:
                            reward_string=_("%s%%discountonproducts",reward_percentage)
                        else:
                            reward_string=_(
                                "%(percentage)s%%discounton%(product_name)s",
                                percentage=reward_percentage,
                                product_name=reward.discount_specific_product_ids.name
                            )
                    elifreward.discount_apply_on=='cheapest_product':
                        reward_string=_("%s%%discountoncheapestproduct",reward_percentage)
                elifreward.discount_type=='fixed_amount':
                    program=self.env['coupon.program'].search([('reward_id','=',reward.id)])
                    reward_string=_(
                        "%(amount)s%(currency)sdiscountontotalamount",
                        amount=reward.discount_fixed_amount,
                        currency=program.currency_id.name
                    )
            result.append((reward.id,reward_string))
        returnresult
