flectra.define('product.generate_pricelist',function(require){
'usestrict';

varAbstractAction=require('web.AbstractAction');
varcore=require('web.core');
varFieldMany2One=require('web.relational_fields').FieldMany2One;
varStandaloneFieldManagerMixin=require('web.StandaloneFieldManagerMixin');
varWidget=require('web.Widget');

varQWeb=core.qweb;
var_t=core._t;

varQtyTagWidget=Widget.extend({
    template:'product.report_pricelist_qty',
    events:{
        'click.o_remove_qty':'_onClickRemoveQty',
    },
    /**
     *@override
     */
    init:function(parent,defaulQuantities){
        this._super.apply(this,arguments);
        this.quantities=defaulQuantities;
        this.MAX_QTY=5;
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *Addaquantitywhenadd(+)buttonclicked.
     *
     *@private
     */
    _onClickAddQty:function(){
        if(this.quantities.length>=this.MAX_QTY){
            this.do_notify(false,_.str.sprintf(
                _t("Atmost%dquantitiescanbedisplayedsimultaneously.Removeaselectedquantitytoaddothers."),
                this.MAX_QTY
            ));
            return;
        }
        constqty=parseInt(this.$('.o_product_qty').val());
        if(qty&&qty>0){
            //Checkqtyalreadyexist
            if(this.quantities.indexOf(qty)===-1){
                this.quantities.push(qty);
                this.quantities=this.quantities.sort((a,b)=>a-b);
                this.trigger_up('qty_changed',{quantities:this.quantities});
                this.renderElement();
            }else{
                this.displayNotification({
                    message:_.str.sprintf(_t("Quantityalreadypresent(%d)."),qty),
                    type:'info'
                });
            }
        }else{
            this.do_notify(false,_t("Pleaseenterapositivewholenumber"));
        }
    },
    /**
     *Removequantity.
     *
     *@private
     *@param{jQueryEvent}ev
     */
    _onClickRemoveQty:function(ev){
        constqty=parseInt($(ev.currentTarget).closest('.badge').data('qty'));
        this.quantities=this.quantities.filter(q=>q!==qty);
        this.trigger_up('qty_changed',{quantities:this.quantities});
        this.renderElement();
    },
});

varGeneratePriceList=AbstractAction.extend(StandaloneFieldManagerMixin,{
    hasControlPanel:true,
    events:{
        'click.o_action':'_onClickAction',
        'submitform':'_onSubmitForm',
    },
    custom_events:Object.assign({},StandaloneFieldManagerMixin.custom_events,{
        field_changed:'_onFieldChanged',
        qty_changed:'_onQtyChanged',
    }),
    /**
     *@override
     */
    init:function(parent,params){
        this._super.apply(this,arguments);
        StandaloneFieldManagerMixin.init.call(this);
        this.context=params.context;
        //incasethewindowgotrefreshed
        if(params.params&&params.params.active_ids&&typeof(params.params.active_ids==='string')){
            try{
                this.context.active_ids=params.params.active_ids.split(',').map(id=>parseInt(id));
                this.context.active_model=params.params.active_model;
            }catch(e){
                console.log('unabletoloadidsfromtheurlfragment🙁');
            }
        }
        if(!this.context.active_model){
            //startedwithoutanactivemodule,assumeproducttemplates
            this.context.active_model='product.template';
        }
        this.context.quantities=[1,5,10];
    },
    /**
     *@override
     */
    willStart:function(){
        letgetPricelit;
        //startedwithoutaselectedpricelistincontext?justgetthefirstone
        if(this.context.default_pricelist){
            getPricelit=Promise.resolve([this.context.default_pricelist]);
        }else{
            getPricelit=this._rpc({
                model:'product.pricelist',
                method:'search',
                args:[[]],
                kwargs:{limit:1}
            })
        }
        constfieldSetup=getPricelit.then(pricelistIds=>{
            returnthis.model.makeRecord('report.product.report_pricelist',[{
                name:'pricelist_id',
                type:'many2one',
                relation:'product.pricelist',
                value:pricelistIds[0],
            }]);
        }).then(recordID=>{
            constrecord=this.model.get(recordID);
            this.many2one=newFieldMany2One(this,'pricelist_id',record,{
                mode:'edit',
                attrs:{
                    can_create:false,
                    can_write:false,
                    options:{no_open:true},
                },
            });
            this._registerWidget(recordID,'pricelist_id',this.many2one);
        });
        returnPromise.all([fieldSetup,this._getHtml(),this._super()]);
    },
    /**
     *@override
     */
    start:function(){
        this.controlPanelProps.cp_content=this._renderComponent();
        returnthis._super.apply(this,arguments).then(()=>{
            this.$('.o_content').html(this.reportHtml);
        });
    },
    /**
     *Includethecurrentmodel(template/variant)inthestatetoallowrefreshingwithoutlosing
     *thepropercontext.
     *@override
     */
    getState:function(){
        return{
            active_model:this.context.active_model,
        };
    },
    getTitle:function(){
        return_t('PricelistReport');
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *Gettemplatetodisplayreport.
     *
     *@private
     *@returns{Promise}
     */
    _getHtml:function(){
        returnthis._rpc({
            model:'report.product.report_pricelist',
            method:'get_html',
            kwargs:{context:this.context},
        }).then(result=>{
            this.reportHtml=result;
        });
    },
    /**
     *Reloadreport.
     *
     *@private
     *@returns{Promise}
     */
    _reload:function(){
        returnthis._getHtml().then(()=>{
            this.$('.o_content').html(this.reportHtml);
        });
    },
    /**
     *Rendersearchviewandprintbutton.
     *
     *@private
     */
    _renderComponent:function(){
        const$buttons=$('<button>',{
            class:'btnbtn-primary',
            text:_t("Print"),
        }).on('click',this._onClickPrint.bind(this));

        const$searchview=$(QWeb.render('product.report_pricelist_search'));
        this.many2one.appendTo($searchview.find('.o_pricelist'));

        this.qtyTagWidget=newQtyTagWidget(this,this.context.quantities);
        this.qtyTagWidget.replace($searchview.find('.o_product_qty'));
        return{$buttons,$searchview};
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *Openformviewofparticularrecordwhenlinkclicked.
     *
     *@private
     *@param{jQueryEvent}ev
     */
    _onClickAction:function(ev){
        ev.preventDefault();
        this.do_action({
            type:'ir.actions.act_window',
            res_model:$(ev.currentTarget).data('model'),
            res_id:$(ev.currentTarget).data('res-id'),
            views:[[false,'form']],
            target:'self',
        });
    },
    /**
     *PrintreportinPDFwhenbuttonclicked.
     *
     *@private
     */
    _onClickPrint:function(){
        constreportName=_.str.sprintf('product.report_pricelist?active_model=%s&active_ids=%s&pricelist_id=%s&quantities=%s',
            this.context.active_model,
            this.context.active_ids||'',
            this.context.pricelist_id||'',
            this.context.quantities.toString()||'1',
        );
        returnthis.do_action({
            type:'ir.actions.report',
            report_type:'qweb-pdf',
            report_name:reportName,
            report_file:'product.report_pricelist',
        });
    },
    /**
     *Reloadreportwhenpricelistchanged.
     *
     *@override
     */
    _onFieldChanged:function(event){
        this.context.pricelist_id=event.data.changes.pricelist_id.id;
        StandaloneFieldManagerMixin._onFieldChanged.apply(this,arguments);
        this._reload();
    },
    /**
     *Reloadreportwhenquantitieschanged.
     *
     *@private
     *@param{FlectraEvent}ev
     *@param{integer[]}event.data.quantities
     */
    _onQtyChanged:function(ev){
        this.context.quantities=ev.data.quantities;
        this._reload();
    },
    _onSubmitForm:function(ev){
        ev.preventDefault();
        ev.stopPropagation();
        this.qtyTagWidget._onClickAddQty();
    },
});

core.action_registry.add('generate_pricelist',GeneratePriceList);

return{
    GeneratePriceList,
    QtyTagWidget
};

});
