#-*-coding:utf-8-*-
#PartofFlectra.SeeLICENSEfileforfullcopyrightandlicensingdetails.

fromdatetimeimportdatetime
importtime

fromflectra.tests.commonimportTransactionCase
fromflectra.toolsimportfloat_compare,test_reports


classTestProductPricelist(TransactionCase):

    defsetUp(self):
        super(TestProductPricelist,self).setUp()
        self.ProductPricelist=self.env['product.pricelist']
        self.res_partner_4=self.env['res.partner'].create({'name':'ReadyMat'})
        self.res_partner_1=self.env['res.partner'].create({'name':'WoodCorner'})
        self.category_5_id=self.env['product.category'].create({
            'name':'OfficeFurniture',
            'parent_id':self.env.ref('product.product_category_1').id
        }).id
        self.computer_SC234=self.env['product.product'].create({
            'name':'DeskCombination',
            'categ_id':self.category_5_id,
        })
        self.ipad_retina_display=self.env['product.product'].create({
            'name':'CustomizableDesk',
        })
        self.custom_computer_kit=self.env['product.product'].create({
            'name':'CornerDeskRightSit',
            'categ_id':self.category_5_id,
        })
        self.ipad_mini=self.env['product.product'].create({
            'name':'LargeCabinet',
            'categ_id':self.category_5_id,
            'standard_price':800.0,
        })
        self.monitor=self.env['product.product'].create({
            'name':'Supernicemonitor',
            'categ_id':self.category_5_id,
            'list_price':1000.0,
        })

        self.env['product.supplierinfo'].create([
            {
                'name':self.res_partner_1.id,
                'product_tmpl_id':self.ipad_mini.product_tmpl_id.id,
                'delay':3,
                'min_qty':1,
                'price':750,
            },{
                'name':self.res_partner_4.id,
                'product_tmpl_id':self.ipad_mini.product_tmpl_id.id,
                'delay':3,
                'min_qty':1,
                'price':790,
            },{
                'name':self.res_partner_4.id,
                'product_tmpl_id':self.ipad_mini.product_tmpl_id.id,
                'delay':3,
                'min_qty':3,
                'price':785,
            },{
                'name':self.res_partner_4.id,
                'product_tmpl_id':self.monitor.product_tmpl_id.id,
                'delay':3,
                'min_qty':3,
                'price':100,
            }
        ])
        self.apple_in_ear_headphones=self.env['product.product'].create({
            'name':'StorageBox',
            'categ_id':self.category_5_id,
        })
        self.laptop_E5023=self.env['product.product'].create({
            'name':'OfficeChair',
            'categ_id':self.category_5_id,
        })
        self.laptop_S3450=self.env['product.product'].create({
            'name':'AcousticBlocScreens',
            'categ_id':self.category_5_id,
        })

        self.uom_unit_id=self.ref('uom.product_uom_unit')
        self.list0=self.ref('product.list0')

        self.new_currency=self.env['res.currency'].create({
            'name':'WonderfulCurrency',
            'symbol':':)',
            'rate_ids':[(0,0,{'rate':10,'name':time.strftime('%Y-%m-%d')})],
        })

        self.ipad_retina_display.write({'uom_id':self.uom_unit_id,'categ_id':self.category_5_id})
        self.customer_pricelist=self.ProductPricelist.create({
            'name':'CustomerPricelist',
            'item_ids':[(0,0,{
                'name':'Defaultpricelist',
                'compute_price':'formula',
                'base':'pricelist',
                'base_pricelist_id':self.list0
            }),(0,0,{
                'name':'10%DiscountonAssembleComputer',
                'applied_on':'1_product',
                'product_tmpl_id':self.ipad_retina_display.product_tmpl_id.id,
                'compute_price':'formula',
                'base':'list_price',
                'price_discount':10
            }),(0,0,{
                'name':'1surchangeonLaptop',
                'applied_on':'1_product',
                'product_tmpl_id':self.laptop_E5023.product_tmpl_id.id,
                'compute_price':'formula',
                'base':'list_price',
                'price_surcharge':1
            }),(0,0,{
                'name':'5%DiscountonallComputerrelatedproducts',
                'applied_on':'2_product_category',
                'min_quantity':2,
                'compute_price':'formula',
                'base':'list_price',
                'categ_id':self.category_5_id,
                'price_discount':5
            }),(0,0,{
                'name':'30%Discountonallproducts',
                'applied_on':'3_global',
                'date_start':'2011-12-27',
                'date_end':'2011-12-31',
                'compute_price':'formula',
                'price_discount':30,
                'base':'list_price'
            }),(0,0,{
                 'name':'Fixedonallproducts',
                 'applied_on':'1_product',
                 'product_tmpl_id':self.monitor.product_tmpl_id.id,
                 'date_start':'2020-04-0609:00:00',
                 'date_end':'2020-04-0912:00:00',
                 'compute_price':'formula',
                 'price_discount':50,
                 'base':'list_price'
             })]
        })

    deftest_10_calculation_price_of_products_pricelist(self):
        """Testcalculationofproductpricebasedonpricelist"""
        #IchecksalepriceofCustomizableDesk
        context={}
        context.update({'pricelist':self.customer_pricelist.id,'quantity':1})
        ipad_retina_display=self.ipad_retina_display.with_context(context)
        msg="Wrongsaleprice:CustomizableDesk.shouldbe%sinsteadof%s"%(ipad_retina_display.price,(ipad_retina_display.lst_price-ipad_retina_display.lst_price*(0.10)))
        self.assertEqual(float_compare(ipad_retina_display.price,(ipad_retina_display.lst_price-ipad_retina_display.lst_price*(0.10)),precision_digits=2),0,msg)

        #IchecksalepriceofLaptop.
        laptop_E5023=self.laptop_E5023.with_context(context)
        msg="Wrongsaleprice:Laptop.shouldbe%sinsteadof%s"%(laptop_E5023.price,(laptop_E5023.lst_price+1))
        self.assertEqual(float_compare(laptop_E5023.price,laptop_E5023.lst_price+1,precision_digits=2),0,msg)

        #IchecksalepriceofITcomponent.
        apple_headphones=self.apple_in_ear_headphones.with_context(context)
        msg="Wrongsaleprice:ITcomponent.shouldbe%sinsteadof%s"%(apple_headphones.price,apple_headphones.lst_price)
        self.assertEqual(float_compare(apple_headphones.price,apple_headphones.lst_price,precision_digits=2),0,msg)

        #IchecksalepriceofITcomponentifmorethan3Unit.
        context.update({'quantity':5})
        laptop_S3450=self.laptop_S3450.with_context(context)
        msg="Wrongsaleprice:ITcomponentifmorethan3Unit.shouldbe%sinsteadof%s"%(laptop_S3450.price,(laptop_S3450.lst_price-laptop_S3450.lst_price*(0.05)))
        self.assertEqual(float_compare(laptop_S3450.price,laptop_S3450.lst_price-laptop_S3450.lst_price*(0.05),precision_digits=2),0,msg)

        #IchecksalepriceofLCDMonitor.
        context.update({'quantity':1})
        ipad_mini=self.ipad_mini.with_context(context)
        msg="Wrongsaleprice:LCDMonitor.shouldbe%sinsteadof%s"%(ipad_mini.price,ipad_mini.lst_price)
        self.assertEqual(float_compare(ipad_mini.price,ipad_mini.lst_price,precision_digits=2),0,msg)

        #IchecksalepriceofLCDMonitoronendofyear.
        context.update({'quantity':1,'date':'2011-12-31'})
        ipad_mini=self.ipad_mini.with_context(context)
        msg="Wrongsaleprice:LCDMonitoronendofyear.shouldbe%sinsteadof%s"%(ipad_mini.price,ipad_mini.lst_price-ipad_mini.lst_price*(0.30))
        self.assertEqual(float_compare(ipad_mini.price,ipad_mini.lst_price-ipad_mini.lst_price*(0.30),precision_digits=2),0,msg)

        #IcheckcostpriceofLCDMonitor.
        context.update({'quantity':1,'date':False,'partner_id':self.res_partner_4.id})
        ipad_mini=self.ipad_mini.with_context(context)
        partner=self.res_partner_4.with_context(context)
        msg="Wrongcostprice:LCDMonitor.shouldbe790insteadof%s"%ipad_mini._select_seller(partner_id=partner,quantity=1.0).price
        self.assertEqual(float_compare(ipad_mini._select_seller(partner_id=partner,quantity=1.0).price,790,precision_digits=2),0,msg)

        #IcheckcostpriceofLCDMonitorifmorethan3Unit.
        context.update({'quantity':3})
        ipad_mini=self.ipad_mini.with_context(context)
        partner=self.res_partner_4.with_context(context)
        msg="Wrongcostprice:LCDMonitorifmorethan3Unit.shouldbe785insteadof%s"%ipad_mini._select_seller(partner_id=partner,quantity=3.0).price
        self.assertEqual(float_compare(ipad_mini._select_seller(partner_id=partner,quantity=3.0).price,785,precision_digits=2),0,msg)

        #Checkifthepricelistisappliedatprecisedatetime
        context.update({'quantity':1,'date':datetime.strptime('2020-04-0508:00:00','%Y-%m-%d%H:%M:%S')})
        monitor=self.monitor.with_context(context)
        partner=self.res_partner_4.with_context(context)
        msg="Wrongcostprice:LCDMonitor.shouldbe1000insteadof%s"%monitor._select_seller(
            partner_id=partner,quantity=1.0).price
        self.assertEqual(
            float_compare(monitor.price,monitor.lst_price,precision_digits=2),0,
            msg)
        context.update({'quantity':1,'date':datetime.strptime('2020-04-0610:00:00','%Y-%m-%d%H:%M:%S')})
        monitor=self.monitor.with_context(context)
        msg="Wrongcostprice:LCDMonitor.shouldbe500insteadof%s"%monitor._select_seller(
            partner_id=partner,quantity=1.0).price
        self.assertEqual(
            float_compare(monitor.price,monitor.lst_price/2,precision_digits=2),0,
            msg)

    deftest_20_price_different_currency_pricelist(self):
        pricelist=self.ProductPricelist.create({
            'name':'CurrencyPricelist',
            'currency_id':self.new_currency.id,
            'item_ids':[(0,0,{
                'compute_price':'formula',
                'base':'list_price',
                'price_surcharge':100
            })]
        })
        product=self.monitor.with_context({
            'pricelist':pricelist.id,'quantity':1
        })
        #productpriceusethecurrencyofthepricelist
        self.assertEqual(product.price,10100)

    deftest_21_price_diff_cur_min_margin_pricelist(self):
        pricelist=self.ProductPricelist.create({
            'name':'CurrencywithMarginPricelist',
            'currency_id':self.new_currency.id,
            'item_ids':[(0,0,{
                'compute_price':'formula',
                'base':'list_price',
                'price_min_margin':10,
                'price_max_margin':100,
            })]
        })
        product=self.monitor.with_context({
            'pricelist':pricelist.id,'quantity':1
        })
        #productpriceusethecurrencyofthepricelist
        self.assertEqual(product.price,10010)

    deftest_22_price_diff_cur_max_margin_pricelist(self):
        pricelist=self.ProductPricelist.create({
            'name':'CurrencywithMarginPricelist',
            'currency_id':self.new_currency.id,
            'item_ids':[(0,0,{
                'compute_price':'formula',
                'base':'list_price',
                'price_surcharge':100,
                'price_max_margin':90
            })]
        })
        product=self.monitor.with_context({
            'pricelist':pricelist.id,'quantity':1
        })
        #productpriceusethecurrencyofthepricelist
        self.assertEqual(product.price,10090)

    deftest_23_diff_curr_rounding(self):
        """Makesureroundingisappliedafterthecurrencyconversion"""
        pricelist=self.ProductPricelist.create({
            'name':'CurrencyPricelist',
            'currency_id':self.new_currency.id,
            'item_ids':[(0,0,{
                'compute_price':'formula',
                'base':'list_price',
                'price_discount':42.328745867,
                'price_round':1.00,
            })]
        })

        product=self.computer_SC234
        product.lst_price=450.0
        product=product.with_context({
            'pricelist':pricelist.id,'quantity':1
        })

        self.assertEqual(product.price,2595)
