#-*-coding:utf-8-*-
#PartofFlectra.SeeLICENSEfileforfullcopyrightandlicensingdetails.

fromflectraimportapi,fields,models,tools,exceptions,_
fromflectra.osvimportexpression


classLeaveReport(models.Model):
    _name="hr.leave.report"
    _description='TimeOffSummary/Report'
    _auto=False
    _order="date_fromDESC,employee_id"

    employee_id=fields.Many2one('hr.employee',string="Employee",readonly=True)
    name=fields.Char('Description',readonly=True)
    number_of_days=fields.Float('NumberofDays',readonly=True)
    leave_type=fields.Selection([
        ('allocation','Allocation'),
        ('request','TimeOff')
        ],string='RequestType',readonly=True)
    department_id=fields.Many2one('hr.department',string='Department',readonly=True)
    category_id=fields.Many2one('hr.employee.category',string='EmployeeTag',readonly=True)
    holiday_status_id=fields.Many2one("hr.leave.type",string="LeaveType",readonly=True)
    state=fields.Selection([
        ('draft','ToSubmit'),
        ('cancel','Cancelled'),
        ('confirm','ToApprove'),
        ('refuse','Refused'),
        ('validate1','SecondApproval'),
        ('validate','Approved')
        ],string='Status',readonly=True)
    holiday_type=fields.Selection([
        ('employee','ByEmployee'),
        ('category','ByEmployeeTag')
    ],string='AllocationMode',readonly=True)
    date_from=fields.Datetime('StartDate',readonly=True)
    date_to=fields.Datetime('EndDate',readonly=True)
    payslip_status=fields.Boolean('Reportedinlastpayslips',readonly=True)

    definit(self):
        tools.drop_view_if_exists(self._cr,'hr_leave_report')

        self._cr.execute("""
            CREATEorREPLACEviewhr_leave_reportas(
                SELECTrow_number()over(ORDERBYleaves.employee_id)asid,
                leaves.employee_idasemployee_id,leaves.nameasname,
                leaves.number_of_daysasnumber_of_days,leaves.leave_typeasleave_type,
                leaves.category_idascategory_id,leaves.department_idasdepartment_id,
                leaves.holiday_status_idasholiday_status_id,leaves.stateasstate,
                leaves.holiday_typeasholiday_type,leaves.date_fromasdate_from,
                leaves.date_toasdate_to,leaves.payslip_statusaspayslip_status
                from(select
                    allocation.employee_idasemployee_id,
                    allocation.private_nameasname,
                    allocation.number_of_daysasnumber_of_days,
                    allocation.category_idascategory_id,
                    allocation.department_idasdepartment_id,
                    allocation.holiday_status_idasholiday_status_id,
                    allocation.stateasstate,
                    allocation.holiday_type,
                    nullasdate_from,
                    nullasdate_to,
                    FALSEaspayslip_status,
                    'allocation'asleave_type
                fromhr_leave_allocationasallocation
                unionallselect
                    request.employee_idasemployee_id,
                    request.private_nameasname,
                    (request.number_of_days*-1)asnumber_of_days,
                    request.category_idascategory_id,
                    request.department_idasdepartment_id,
                    request.holiday_status_idasholiday_status_id,
                    request.stateasstate,
                    request.holiday_type,
                    request.date_fromasdate_from,
                    request.date_toasdate_to,
                    request.payslip_statusaspayslip_status,
                    'request'asleave_type
                fromhr_leaveasrequest)leaves
            );
        """)

    @api.model
    defaction_time_off_analysis(self):
        domain=[('holiday_type','=','employee')]

        ifself.env.context.get('active_ids'):
            domain=expression.AND([
                domain,
                [('employee_id','in',self.env.context.get('active_ids',[]))]
            ])

        return{
            'name':_('TimeOffAnalysis'),
            'type':'ir.actions.act_window',
            'res_model':'hr.leave.report',
            'view_mode':'tree,pivot,form',
            'search_view_id':self.env.ref('hr_holidays.view_hr_holidays_filter_report').id,
            'domain':domain,
            'context':{
                'search_default_group_type':True,
                'search_default_year':True,
                'search_default_validated':True,
            }
        }

    @api.model
    defread_group(self,domain,fields,groupby,offset=0,limit=None,orderby=False,lazy=True):
        ifnotself.user_has_groups('hr_holidays.group_hr_holidays_user')and'name'ingroupby:
            raiseexceptions.UserError(_('Suchgroupingisnotallowed.'))
        returnsuper(LeaveReport,self).read_group(domain,fields,groupby,offset=offset,limit=limit,orderby=orderby,lazy=lazy)
