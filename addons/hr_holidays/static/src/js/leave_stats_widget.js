flectra.define('hr_holidays.LeaveStatsWidget',function(require){
    "usestrict";

    vartime=require('web.time');
    varWidget=require('web.Widget');
    varwidget_registry=require('web.widget_registry');
    varfieldUtils=require('web.field_utils');

    varLeaveStatsWidget=Widget.extend({
        template:'hr_holidays.leave_stats',

        /**
         *@override
         *@param{Widget|null}parent
         *@param{Object}params
         */
        init:function(parent,params){
            this._setState(params);
            this._super(parent);
        },

        //--------------------------------------------------------------------------
        //Public
        //--------------------------------------------------------------------------

        /**
         *@overridetofetchdatabeforerendering.
         */
        willStart:function(){
            returnPromise.all([this._super(),this._fetchLeaveTypesData(),this._fetchDepartmentLeaves()]);
        },

        /**
         *Fetchnewdataifneeded(accordingtoupdatedfields)andre-renderthewidget.
         *Calledbythebasicrendererwhentheviewchanges.
         *@param{Object}state
         *@returns{Promise}
         */
        updateState:function(state){
            varself=this;
            varto_await=[];
            varupdatedFields=this._setState(state);

            if(_.intersection(updatedFields,['employee','date']).length){
                to_await.push(this._fetchLeaveTypesData());
            }
            if(_.intersection(updatedFields,['department','date']).length){
                to_await.push(this._fetchDepartmentLeaves());
            }
            returnPromise.all(to_await).then(function(){
                self.renderElement();
            });
        },

        //--------------------------------------------------------------------------
        //Private
        //--------------------------------------------------------------------------

        /**
         *Updatethestate
         *@param{Object}state
         *@returns{String[]}listofupdatedfields
         */
        _setState:function(state){
            varupdatedFields=[];
            if(state.data.employee_id.res_id!==(this.employee&&this.employee.res_id)){
                updatedFields.push('employee');
                this.employee=state.data.employee_id;
            }
            if(state.data.department_id.res_id!==(this.department&&this.department.res_id)){
                updatedFields.push('department');
                this.department=state.data.department_id;
            }
            if(state.data.date_from!==this.date){
                updatedFields.push('date');
                this.date=state.data.date_from;
            }
            returnupdatedFields;
        },

        /**
         *Fetchleavestakenbymembersof``this.department``inthe
         *monthof``this.date``.
         *Threefieldsarefetchedforeachleave,namely:employee_id,date_from
         *anddate_to.
         *Theresultingdataisassignedto``this.departmentLeaves``
         *@private
         *@returns{Promise}
         */
        _fetchDepartmentLeaves:function(){
            if(!this.date||!this.department){
                this.departmentLeaves=null;
                returnPromise.resolve();
            }
            varself=this;
            varmonth_date_from=this.date.clone().startOf('month');
            varmonth_date_to=this.date.clone().endOf('month');
            returnthis._rpc({
                model:'hr.leave',
                method:'search_read',
                args:[
                    [['department_id','=',this.department.res_id],
                    ['state','=','validate'],
                    ['holiday_type','=','employee'],
                    ['date_from','<=',month_date_to],
                    ['date_to','>=',month_date_from]],
                    ['employee_id','date_from','date_to','number_of_days'],
                ],
            }).then(function(data){
                vardateFormat=time.getLangDateFormat();
                self.departmentLeaves=data.map(function(leave){
                    //Formatdatetimestodate(intheuser'sformat)
                    return_.extend(leave,{
                        date_from:fieldUtils.parse.datetime(
                            leave.date_from,
                            false,
                            {isUTC:true}).local().format(dateFormat),
                        date_to:fieldUtils.parse.datetime(
                            leave.date_to,
                            false,
                            {isUTC:true}).local().format(dateFormat),
                        number_of_days:leave.number_of_days,
                    });
                });
            });
        },

        /**
         *Fetchthenumberofleaves,groupedbyleavetype,takenby``this.employee``
         *intheyearof``this.date``.
         *Theresultingdataisassignedto``this.leavesPerType``
         *@private
         *@returns{Promise}
         */
        _fetchLeaveTypesData:function(){
            if(!this.date||!this.employee){
                this.leavesPerType=null;
                returnPromise.resolve();
            }
            varself=this;
            varyear_date_from=this.date.clone().startOf('year');
            varyear_date_to=this.date.clone().endOf('year');
            returnthis._rpc({
                model:'hr.leave',
                method:'read_group',
                kwargs:{
                    domain:[['employee_id','=',this.employee.res_id],['state','=','validate'],['date_from','<=',year_date_to],['date_to','>=',year_date_from]],
                    fields:['holiday_status_id','number_of_days:sum'],
                    groupby:['holiday_status_id'],
                },
            }).then(function(data){
                self.leavesPerType=data;
            });
        }
    });

    widget_registry.add('hr_leave_stats',LeaveStatsWidget);

    returnLeaveStatsWidget;
});
