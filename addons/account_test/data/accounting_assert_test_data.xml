<?xmlversion="1.0"encoding="utf-8"?>
<flectra>

    <recordmodel="accounting.assert.test"id="account_test_01">
        <fieldname="sequence">1</field>
        <fieldname="name">Test1:Generalbalance</field>
        <fieldname="desc">Checkthebalance:Debitsum=Creditsum</field>
        <fieldname="code_exec"><![CDATA[sql="""SELECT
sum(debit)-sum(credit)asbalance
FROM account_move_line
"""
cr.execute(sql)
result=[]
res=cr.dictfetchall()
ifres[0]['balance']!=0.0andres[0]['balance']isnotNone:
  result.append(_('*Thedifferenceofthebalanceis:'))
  result.append(res)
]]></field>
    </record>

    <recordmodel="accounting.assert.test"id="account_test_03">
        <fieldname="sequence">3</field>
        <fieldname="name">Test3:Movementlines</field>
        <fieldname="desc">Checkifmovementlinesarebalancedandhavethesamedateandperiod</field>
        <fieldname="code_exec"><![CDATA[order_columns=['am_date','ml_date','am.date','ml.date','am.id']
sql="""SELECT
  am.idasmove_id,
  sum(debit)-sum(credit)asbalance,
  am.date,
  ml.date,
  am.dateasam_date,
  ml.dateasml_date
FROMaccount_moveam,account_move_lineml
WHERE
  ml.move_id=am.id
GROUPBYam.name,am.id,am.state,am.date,ml.date,am.date,ml.date,am.date,ml.date
HAVINGabs(sum(ml.debit-ml.credit))<>0oram.date!=ml.dateor(am.date!=ml.date)
"""
cr.execute(sql)
res=cr.dictfetchall()
ifres:
    res.insert(0,_('*Thetestfailedforthesemovementlines:'))
result=res

]]></field>
    </record>

<!--TODO:rewritetestsincethemodelofreconciliationhaschanged-->
<!--    <recordmodel="accounting.assert.test"id="account_test_04">
        <fieldname="sequence">4</field>
        <fieldname="name">Test4:Totallyreconciledjournalitems</field>
        <fieldname="desc">Checkifthetotallyreconciledjournalitemsarebalanced</field>
        <fieldname="code_exec"><![CDATA[res=[]
cr.execute("SELECTdistinctreconcile_idfromaccount_move_linewherereconcile_idisnotnull")
rec_ids=cr.dictfetchall()
forrecordinrec_ids:
  cr.execute("SELECTdistinctr.name,r.idfromaccount_journalj,account_periodp,account_move_reconciler,account_movem,account_move_linemlwherem.journal_id=j.idandm.date=p.idandml.reconcile_id=%sandml.move_id=m.idandml.reconcile_id=r.idgroupbyr.id,r.namehavingsum(ml.debit)-sum(ml.credit)<>0",(record['reconcile_id'],))
  reconcile_ids=cr.dictfetchall()
  ifreconcile_ids:
    res.append(','.join(["Reconcilename:%(name)s,id=%(id)s"%rforrinreconcile_ids]))
result=res
ifresult:
    result.insert(0,_('*Thetestfailedforthesereconcileditems(id/name):'))
]]></field>
    </record>-->

    <recordmodel="accounting.assert.test"id="account_test_05">
        <fieldname="sequence">5</field>
        <fieldname="name">Test5.1 :PayableandReceivableaccountantlinesofreconciledinvoices</field>
        <fieldname="desc">CheckthatreconciledinvoiceforSales/PurchaseshasreconciledentriesforPayableandReceivableAccounts</field>
        <fieldname="code_exec"><![CDATA[res=[]
cr.execute("SELECTdistinctinv.number,inv.idfromaccount_invoiceinv,account_movem,account_move_lineml,account_accountawherem.id=ml.move_idandml.account_id=a.idanda.internal_typein('receivable','payable')andinv.move_id=m.idandml.reconciledistrue;")
records=cr.dictfetchall()
rec=[r['id']forrinrecords]
res=reconciled_inv()
invoices=set(rec).difference(set(res))
result=[recforrecinrecordsifrec['id']ininvoices]
ifresult:
    result.insert(0,_('*Invoicesthatneedtobechecked:'))
]]></field>
    </record>

    <recordmodel="accounting.assert.test"id="account_test_05_2">
        <fieldname="sequence">6</field>
        <fieldname="name">Test5.2 :ReconciliedinvoicesandPayable/Receivableaccounts</field>
        <fieldname="desc">Checkthatreconciledaccountmoves,thatdefinePayableandReceivableaccounts,arebelongingtoreconciledinvoices</field>
        <fieldname="code_exec"><![CDATA[res=reconciled_inv()
result=[]
ifres:
    cr.execute("SELECTdistinctinv.number,inv.idfromaccount_invoiceinv,account_move_lineml,account_accounta,account_movemwherem.id=ml.move_idandinv.move_id=m.idandinv.id=inv.move_idandml.reconciledisfalseanda.internal_typein('receivable','payable')andml.account_id=a.idandinv.idin%s",(tuple(res),))
    records=cr.dictfetchall()
    result=[recforrecinrecords]
    ifresult:
        result.insert(0,_('*Invoicesthatneedtobechecked:'))
]]></field>
    </record>

    <recordmodel="accounting.assert.test"id="account_test_06">
        <fieldname="sequence">7</field>
        <fieldname="name">Test6 :Invoicesstatus</field>
        <fieldname="desc">Checkthatpaid/reconciledinvoicesarenotin'Open'state</field>
        <fieldname="code_exec"><![CDATA[
fromflectraimport_
res=[]
column_order=['number','id','name','state']
ifreconciled_inv():
  cr.execute("selectinv.name,inv.state,inv.id,inv.numberfromaccount_invoiceinvwhereinv.state!='paid'andidin%s",(tuple(reconciled_inv()),))
  res=cr.dictfetchall()
result=res
ifresult:
    result.insert(0,_('*Invoicesthatneedtobechecked:'))
]]></field>
    </record>

    <recordmodel="accounting.assert.test"id="account_test_07">
        <fieldname="sequence">8</field>
        <fieldname="name">Test7:Closingbalanceonbankstatements</field>
        <fieldname="desc">CheckonbankstatementthattheClosingBalance=StartingBalance+sumofstatementlines</field>
        <fieldname="code_exec"><![CDATA[column_order=['name','difference']
cr.execute("SELECTs.balance_start+sum(m.amount)-s.balance_end_realasdifference,s.namefromaccount_bank_statementsinnerjoinaccount_bank_statement_linemonm.statement_id=s.idgroupbys.id,s.balance_start,s.balance_end_real,s.namehavingabs(s.balance_start+sum(m.amount)-s.balance_end_real)>0.000000001;")
result=cr.dictfetchall()
ifresult:
    result.insert(0,_('*Unbalancedbankstatementthatneedtobechecked:'))
]]></field>
    </record>
    <!--TODOaccount.periodhasbeenremoved-->
    <!--<recordmodel="accounting.assert.test"id="account_test_08">
        <fieldname="sequence">9</field>
        <fieldname="name">Test8:Accountsandpartnersonaccountmoves</field>
        <fieldname="desc">Checkthatgeneralaccountsandpartnersonaccountmovesareactive</field>
        <fieldname="code_exec"><![CDATA[column_order=['partner_name','partner_active','account_name','move_line_id','period']
res=[]
cr.execute("SELECTl.idasmove_line_id,a.nameasaccount_name,a.codeasaccount_code,r.nameaspartner_name,r.activeaspartner_active,p.nameasperiodfromaccount_periodp,res_partnerr,account_accounta,account_move_linelwherel.account_id=a.idandl.partner_id=r.idand(notr.activeornota.active)andl.period_id=p.id")
res=cr.dictfetchall()
result=res
ifresult:
  result.insert(0,_('*Hereisthelistofinactivepartnersandmovementlinesthatarenotcorrect:'))
]]></field>
    </record>-->
</flectra>
