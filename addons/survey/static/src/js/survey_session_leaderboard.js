flectra.define('survey.session_leaderboard',function(require){
'usestrict';

varpublicWidget=require('web.public.widget');
varSESSION_CHART_COLORS=require('survey.session_colors');

publicWidget.registry.SurveySessionLeaderboard=publicWidget.Widget.extend({
    init:function(parent,options){
        this._super.apply(this,arguments);

        this.surveyAccessToken=options.surveyAccessToken;
        this.$sessionResults=options.sessionResults;

        this.BAR_MIN_WIDTH='3rem';
        this.BAR_WIDTH='24rem';
        this.BAR_HEIGHT='3.8rem';
    },

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *Showsthequestionleaderboardonscreen.
     *It'sbasedontheattendeesscore(descending).
     *
     *Wefadeoutthe$sessionResultstofadeinourrenderedtemplate.
     *
     *Thewidthoftheprogressbarsissetaftertherenderingtoenableawidthcssanimation.
     */
    showLeaderboard:function(fadeOut,isScoredQuestion){
        varself=this;

        varresolveFadeOut;
        varfadeOutPromise;
        if(fadeOut){
            fadeOutPromise=newPromise(function(resolve,reject){resolveFadeOut=resolve;});
            self.$sessionResults.fadeOut(400,function(){
                resolveFadeOut();
            });
        }else{
            fadeOutPromise=Promise.resolve();
            self.$sessionResults.hide();
            self.$('.o_survey_session_leaderboard_container').empty();
        }

        varleaderboardPromise=this._rpc({
            route:_.str.sprintf('/survey/session/leaderboard/%s',this.surveyAccessToken)
        });

        Promise.all([fadeOutPromise,leaderboardPromise]).then(function(results){
            varleaderboardResults=results[1];
            var$renderedTemplate=$(leaderboardResults);
            self.$('.o_survey_session_leaderboard_container').append($renderedTemplate);

            self.$('.o_survey_session_leaderboard_item').each(function(index){
                varrgb=SESSION_CHART_COLORS[index%10];
                $(this)
                    .find('.o_survey_session_leaderboard_bar')
                    .css('background-color',`rgba(${rgb},1)`);
                $(this)
                    .find('.o_survey_session_leaderboard_bar_question')
                    .css('background-color',`rgba(${rgb},${0.4})`);
            });

            self.$el.fadeIn(400,asyncfunction(){
                if(isScoredQuestion){
                    awaitself._prepareScores();
                    awaitself._showQuestionScores();
                    awaitself._sumScores();
                    awaitself._reorderScores();
                }
            });
        });
    },

    /**
     *Inversetheprocess,fadingoutourtemplatetofadeintthe$sessionResults.
     */
    hideLeaderboard:function(){
        varself=this;
        this.$el.fadeOut(400,function(){
            self.$('.o_survey_session_leaderboard_container').empty();
            self.$sessionResults.fadeIn(400);
        });
    },

    /**
     *ThismethodanimatesthepassedjQueryelementfrom0pointsto{totalScore}points.
     *Itwillcreateanice"animated"effectofacounterincreasingby{increment}untilit
     *reachestheactualscore.
     *
     *@param{$.Element}$scoreEltheelementtoanimate
     *@param{Integer}currentScorethecurrentlydisplayedscore
     *@param{Integer}totalScoretototalscoretoanimateto
     *@param{Integer}incrementthebaseincrementofeachanimationiteration
     *@param{Boolean}plusSignwetherornotweadda"+"beforethescore
     *@private
     */
    _animateScoreCounter:function($scoreEl,currentScore,totalScore,increment,plusSign){
        varself=this;
        setTimeout(function(){
            varnextScore=currentScore+increment;
            if(nextScore>totalScore){
                nextScore=totalScore;
            }
            $scoreEl.text(`${plusSign?'+':''}${Math.round(nextScore)}p`);

            if(nextScore<totalScore){
                self._animateScoreCounter($scoreEl,nextScore,totalScore,increment,plusSign);
            }
        },25);
    },

    /**
     *Helpertomoveascorebarfromitscurrentpositionintheleaderboard
     *toanewposition.
     *
     *@param{$.Element}$scorethescorebartomove
     *@param{Integer}positionthenewpositionintheleaderboard
     *@param{Integer}offsetanoffsetin'rem'
     *@param{Integer}timeouttimetowaitwhilemovingbeforeresolvingthepromise
     */
    _animateMoveTo:function($score,position,offset,timeout){
        varanimationDone;
        varanimationPromise=newPromise(function(resolve){
            animationDone=resolve;
        });
        $score.css('top',`calc(calc(${this.BAR_HEIGHT}*${position})+${offset}rem)`);
        setTimeout(animationDone,timeout);
        returnanimationPromise;
    },

    /**
     *Takestheleaderboardpriortothecurrentquestionresults
     *andreduceallscoresbarstoasmallwidth(3rem).
     *Wekeepthesmallscorebarsonscreenfor1s.
     *
     *Thisvisuallypreparesthedisplayofpointsforthecurrentquestion.
     *
     *@private
     */
    _prepareScores:function(){
        varself=this;
        varanimationDone;
        varanimationPromise=newPromise(function(resolve){
            animationDone=resolve;
        });
        setTimeout(function(){
            this.$('.o_survey_session_leaderboard_bar').each(function(){
                varcurrentScore=parseInt($(this)
                    .closest('.o_survey_session_leaderboard_item')
                    .data('currentScore'))
                if(currentScore&&currentScore!==0){
                    $(this).css('transition',`width1scubic-bezier(.4,0,.4,1)`);
                    $(this).css('width',self.BAR_MIN_WIDTH);
                }
            });
            setTimeout(animationDone,1000);
        },300);

        returnanimationPromise;
    },

    /**
     *Nowthatwehavesummedthescoreforthecurrentquestiontothetotalscore
     *oftheuserandre-weightedthebarsaccordingly,weneedtore-ordereverything
     *tomatchthenewranking.
     *
     *Inadditiontomovingthebarstotheirnewposition,wecreatea"bounce"effect
     *bymovingthebaralittlebitmoretothetoporbottom(dependingonifit'smovingup
     *therankingordown),themovingittheotherwayaround,thenmovingittoitsfinal
     *position.
     *
     *(Feelscomplicatedwhenexplainedbutit'sfairlysimpleonceyouseewhatitdoes).
     *
     *@private
     */
    _reorderScores:function(){
        varself=this;
        varanimationDone;
        varanimationPromise=newPromise(function(resolve){
            animationDone=resolve;
        });
        setTimeout(function(){
            self.$('.o_survey_session_leaderboard_item').each(asyncfunction(){
                var$score=$(this);
                varcurrentPosition=parseInt($(this).data('currentPosition'));
                varnewPosition=parseInt($(this).data('newPosition'));
                if(currentPosition!==newPosition){
                    varoffset=newPosition>currentPosition?2:-2;
                    awaitself._animateMoveTo($score,newPosition,offset,300);
                    $score.css('transition','topease-in-out.1s');
                    awaitself._animateMoveTo($score,newPosition,offset*-0.3,100);
                    awaitself._animateMoveTo($score,newPosition,0,0);
                    animationDone();
                }
            });
        },1800);

        returnanimationPromise;
    },

    /**
     *Willdisplaythescoreforthecurrentquestion.
     *Wesimultaneously:
     *-increasethewidthof"questionbar"
     *  (fadedoutbarrightnexttotheglobalscoreone)
     *-animatethescoreforthequestion(ex:from+0pto+40p)
     *
     *(Wekeepaminimumwidthof3remtobeabletodisplay'+30p'withinthebar).
     *
     *@private
     */
    _showQuestionScores:function(){
        varself=this;
        varanimationDone;
        varanimationPromise=newPromise(function(resolve){
            animationDone=resolve;
        });
        setTimeout(function(){
            this.$('.o_survey_session_leaderboard_bar_question').each(function(){
                var$barEl=$(this);
                varwidth=`calc(calc(100%-${self.BAR_WIDTH})*${$barEl.data('widthRatio')}+${self.BAR_MIN_WIDTH})`;
                $barEl.css('transition','width1sease-out');
                $barEl.css('width',width);

                var$scoreEl=$barEl
                    .find('.o_survey_session_leaderboard_bar_question_score')
                    .text('0p');
                varquestionScore=parseInt($barEl.data('questionScore'));
                if(questionScore&&questionScore>0){
                    varincrement=parseInt($barEl.data('maxQuestionScore')/40);
                    if(!increment||increment===0){
                        increment=1;
                    }
                    $scoreEl.text('+0p');
                    console.log($barEl.data('maxQuestionScore'));
                    setTimeout(function(){
                        self._animateScoreCounter(
                            $scoreEl,
                            0,
                            questionScore,
                            increment,
                            true);
                    },400);
                }
                setTimeout(animationDone,1400);
            });
        },300);

        returnanimationPromise;
    },

    /**
     *Afterdisplayingthescoreforthecurrentquestion,wesumthetotalscore
     *oftheusersofarwiththescoreofthecurrentquestion.
     *
     *Ex:
     *Wehave('#'fortotalscorebeforequestionand'='forcurrentquestionscore):
     *210p####===================================+30pJohn
     *Wewant:
     *240p###################################====+30pJohn
     *
     *Ofcourse,wealsohavetoweightthebarsbasedonthemaximumscore.
     *SoifJohnherehas50%ofthepointsoftheleaderuser,boththequestionscorebar
     *andthetotalscorebarneedtohavetheirwidthdividedby2:
     *240p##################==+30pJohn
     *
     *Thewidthofbothbarsmoveatthesametimetoreachtheirnewposition,
     *withananimationonthewidthproperty.
     *Thenewwidthofthe"questionbar"shouldrepresenttheratioofwonpoints
     *whencomparedtothetotalpoints.
     *(Wekeepaminimumwidthof3remtobeabletodisplay'+30p'withinthebar).
     *
     *Theupdatedtotalscoreisanimatedtowardsthenewvalue.
     *wekeepthisonscreenfor500msbeforereorderingthebars.
     *
     *@private
     */
    _sumScores:function(){
        varself=this;
        varanimationDone;
        varanimationPromise=newPromise(function(resolve){
            animationDone=resolve;
        });
        //valuesthatfeltthebestafteralotoftesting
        vargrowthAnimation='cubic-bezier(.5,0,.66,1.11)';
        setTimeout(function(){
            this.$('.o_survey_session_leaderboard_item').each(function(){
                varcurrentScore=parseInt($(this).data('currentScore'));
                varupdatedScore=parseInt($(this).data('updatedScore'));
                varincrement=parseInt($(this).data('maxQuestionScore')/40);
                if(!increment||increment===0){
                    increment=1;
                }
                self._animateScoreCounter(
                    $(this).find('.o_survey_session_leaderboard_score'),
                    currentScore,
                    updatedScore,
                    increment,
                    false);

                varmaxUpdatedScore=parseInt($(this).data('maxUpdatedScore'));
                varbaseRatio=updatedScore/maxUpdatedScore;
                varquestionScore=parseInt($(this).data('questionScore'));
                varquestionRatio=questionScore/
                    (updatedScore&&updatedScore!==0?updatedScore:1);
                //wekeepaminfixedwithof3remtobeabletodisplay"+5p"
                //eveniftheuseralreadyhas1.000.000points
                varquestionWith=`calc(calc(calc(100%-${self.BAR_WIDTH})*${questionRatio*baseRatio})+${self.BAR_MIN_WIDTH})`;
                $(this)
                    .find('.o_survey_session_leaderboard_bar_question')
                    .css('transition',`widthease.5s${growthAnimation}`)
                    .css('width',questionWith);

                varupdatedScoreRatio=1-questionRatio;
                varupdatedScoreWidth=`calc(calc(100%-${self.BAR_WIDTH})*${updatedScoreRatio*baseRatio})`;
                $(this)
                    .find('.o_survey_session_leaderboard_bar')
                    .css('min-width','0px')
                    .css('transition',`widthease.5s${growthAnimation}`)
                    .css('width',updatedScoreWidth);

                setTimeout(animationDone,500);
            });
        },1400);

        returnanimationPromise;
    }
});

returnpublicWidget.registry.SurveySessionLeaderboard;

});
