#-*-coding:utf-8-*-
#PartofFlectra.SeeLICENSEfileforfullcopyrightandlicensingdetails.
frompsycopg2importsql

fromflectraimporttools
fromflectraimportapi,fields,models


classFleetReport(models.Model):
    _name="fleet.vehicle.cost.report"
    _description="FleetAnalysisReport"
    _auto=False
    _order='date_startdesc'

    company_id=fields.Many2one('res.company','Company',readonly=True)
    vehicle_id=fields.Many2one('fleet.vehicle','Vehicle',readonly=True)
    name=fields.Char('VehicleName',readonly=True)
    driver_id=fields.Many2one('res.partner','Driver',readonly=True)
    fuel_type=fields.Char('Fuel',readonly=True)
    date_start=fields.Date('Date',readonly=True)

    cost=fields.Float('Cost',readonly=True)
    cost_type=fields.Selection(string='CostType',selection=[
        ('contract','Contract'),
        ('service','Service')
    ],readonly=True)

    definit(self):
        query="""
WITHservice_costsAS(
    SELECT
        ve.idASvehicle_id,
        ve.company_idAScompany_id,
        ve.nameASname,
        ve.driver_idASdriver_id,
        ve.fuel_typeASfuel_type,
        date(date_trunc('month',d))ASdate_start,
        COALESCE(sum(se.amount),0)AS
        COST,
        'service'AScost_type
    FROM
        fleet_vehicleve
    CROSSJOINgenerate_series((
            SELECT
                min(date)
                FROMfleet_vehicle_log_services),CURRENT_DATE+'1month'::interval,'1month')d
        LEFTJOINfleet_vehicle_log_servicesseONse.vehicle_id=ve.id
            ANDdate_trunc('month',se.date)=date_trunc('month',d)
    WHERE
        ve.activeANDse.activeANDse.state!='cancelled'
    GROUPBY
        ve.id,
        ve.company_id,
        ve.name,
        date_start,
        d
    ORDERBY
        ve.id,
        date_start
),
contract_costsAS(
    SELECT
        ve.idASvehicle_id,
        ve.company_idAScompany_id,
        ve.nameASname,
        ve.driver_idASdriver_id,
        ve.fuel_typeASfuel_type,
        date(date_trunc('month',d))ASdate_start,
        (COALESCE(sum(co.amount),0)+COALESCE(sum(cod.cost_generated*extract(dayFROMleast(date_trunc('month',d)+interval'1month',cod.expiration_date)-greatest(date_trunc('month',d),cod.start_date))),0)+COALESCE(sum(com.cost_generated),0)+COALESCE(sum(coy.cost_generated),0))AS
        COST,
        'contract'AScost_type
    FROM
        fleet_vehicleve
    CROSSJOINgenerate_series((
            SELECT
                min(acquisition_date)
                FROMfleet_vehicle),CURRENT_DATE+'1month'::interval,'1month')d
        LEFTJOINfleet_vehicle_log_contractcoONco.vehicle_id=ve.id
            ANDdate_trunc('month',co.date)=date_trunc('month',d)
        LEFTJOINfleet_vehicle_log_contractcodONcod.vehicle_id=ve.id
            ANDdate_trunc('month',cod.start_date)<=date_trunc('month',d)
            ANDdate_trunc('month',cod.expiration_date)>=date_trunc('month',d)
            ANDcod.cost_frequency='daily'
    LEFTJOINfleet_vehicle_log_contractcomONcom.vehicle_id=ve.id
        ANDdate_trunc('month',com.start_date)<=date_trunc('month',d)
        ANDdate_trunc('month',com.expiration_date)>=date_trunc('month',d)
        ANDcom.cost_frequency='monthly'
    LEFTJOINfleet_vehicle_log_contractcoyONcoy.vehicle_id=ve.id
        ANDdate_trunc('month',coy.date)=date_trunc('month',d)
        ANDdate_trunc('month',coy.start_date)<=date_trunc('month',d)
        ANDdate_trunc('month',coy.expiration_date)>=date_trunc('month',d)
        ANDcoy.cost_frequency='yearly'
WHERE
    ve.active
GROUPBY
    ve.id,
    ve.company_id,
    ve.name,
    date_start,
    d
ORDERBY
    ve.id,
    date_start
)
SELECT
    vehicle_idASid,
    company_id,
    vehicle_id,
    name,
    driver_id,
    fuel_type,
    date_start,
    COST,
    'service'ascost_type
FROM
    service_costssc
UNIONALL(
    SELECT
        vehicle_idASid,
        company_id,
        vehicle_id,
        name,
        driver_id,
        fuel_type,
        date_start,
        COST,
        'contract'ascost_type
    FROM
        contract_costscc)
"""
        tools.drop_view_if_exists(self.env.cr,self._table)
        self.env.cr.execute(
            sql.SQL("""CREATEorREPLACEVIEW{}as({})""").format(
                sql.Identifier(self._table),
                sql.SQL(query)
            ))
