#-*-coding:utf-8-*-
#PartofFlectra.SeeLICENSEfileforfullcopyrightandlicensingdetails.
fromflectra.osvimportexpression
fromflectra.toolsimportfloat_is_zero,float_compare
fromflectra.addons.sale_timesheet.tests.common_reportingimportTestCommonReporting
fromflectra.testsimporttagged,Form


@tagged('-at_install','post_install')
classTestReporting(TestCommonReporting):

    deftest_profitability_report(self):

        #thistestsupposeeverythingisinthesamecurrencyasthecurrentone
        currency=self.env.company.currency_id
        rounding=currency.rounding

        project_global_stat=self.env['project.profitability.report'].search([('project_id','=',self.project_global.id)]).read()[0]
        self.assertTrue(float_is_zero(project_global_stat['amount_untaxed_invoiced'],precision_rounding=rounding),"Theinvoicedamountoftheglobalprojectshouldbe0.0")
        self.assertTrue(float_is_zero(project_global_stat['amount_untaxed_to_invoice'],precision_rounding=rounding),"Theamounttoinvoiceoftheglobalprojectshouldbe0.0")
        self.assertTrue(float_is_zero(project_global_stat['timesheet_unit_amount'],precision_rounding=rounding),"Thetimesheetunitamountoftheglobalprojectshouldbe0.0")
        self.assertTrue(float_is_zero(project_global_stat['timesheet_cost'],precision_rounding=rounding),"Thetimesheetcostoftheglobalprojectshouldbe0.0")
        self.assertTrue(float_is_zero(project_global_stat['expense_amount_untaxed_to_invoice'],precision_rounding=rounding),"Theexpensecosttoreinvoiceoftheglobalprojectshouldbe0.0")
        self.assertTrue(float_is_zero(project_global_stat['expense_amount_untaxed_invoiced'],precision_rounding=rounding),"Theexpenseinvoicedamountoftheglobalprojectshouldbe0.0")
        self.assertTrue(float_is_zero(project_global_stat['expense_cost'],precision_rounding=rounding),"Theexpensecostoftheglobalprojectshouldbe0.0")
        self.assertTrue(float_is_zero(project_global_stat['other_revenues'],precision_rounding=rounding),"Theotherrevenuesoftheglobalprojectshouldbe0.0")

        #confirmsalesorders
        self.sale_order_1.action_confirm()
        self.sale_order_2.action_confirm()
        self.sale_order_3.action_confirm()
        self.env['project.profitability.report'].flush()

        project_so_1=self.so_line_deliver_project.project_id
        project_so_2=self.so_line_order_project.project_id
        project_so_3=self.so_line_deliver_manual_project.project_id

        task_so_1=self.so_line_deliver_project.task_id
        task_so_2=self.so_line_order_project.task_id
        task_so_3=self.so_line_deliver_manual_project.task_id

        task_in_global_1=self.so_line_deliver_task.task_id
        task_in_global_2=self.so_line_order_task.task_id

        #deliverprojectshouldnotbeimpacted,asnotimesheetareloggedyet
        project_so_1_stat=self.env['project.profitability.report'].read_group([('project_id','in',project_so_1.ids)],['project_id','amount_untaxed_to_invoice','amount_untaxed_invoiced','timesheet_unit_amount','timesheet_cost','expense_cost','expense_amount_untaxed_to_invoice','expense_amount_untaxed_invoiced','other_revenues'],['project_id'])[0]
        self.assertTrue(float_is_zero(project_so_1_stat['amount_untaxed_invoiced'],precision_rounding=rounding),"TheinvoicedamountoftheprojectfromSO1shouldbe0.0")
        self.assertTrue(float_is_zero(project_so_1_stat['amount_untaxed_to_invoice'],precision_rounding=rounding),"TheamounttoinvoiceoftheprojectfromSO1shouldbe0.0")
        self.assertTrue(float_is_zero(project_so_1_stat['timesheet_unit_amount'],precision_rounding=rounding),"ThetimesheetunitamountoftheprojectfromSO1shouldbe0.0")
        self.assertTrue(float_is_zero(project_so_1_stat['timesheet_cost'],precision_rounding=rounding),"ThetimesheetcostoftheprojectfromSO1shouldbe0.0")
        self.assertTrue(float_is_zero(project_so_1_stat['expense_amount_untaxed_to_invoice'],precision_rounding=rounding),"TheexpensecosttoreinvoiceoftheprojectfromSO1shouldbe0.0")
        self.assertTrue(float_is_zero(project_so_1_stat['expense_amount_untaxed_invoiced'],precision_rounding=rounding),"TheexpenseinvoicedamountoftheprojectfromSO1shouldbe0.0")
        self.assertTrue(float_is_zero(project_so_1_stat['expense_cost'],precision_rounding=rounding),"TheexpensecostoftheprojectfromSO1shouldbe0.0")
        self.assertTrue(float_is_zero(project_so_1_stat['other_revenues'],precision_rounding=rounding),"TheotherrevenuesoftheprojectfromSO1shouldbe0.0")

        #orderprojectshouldbetoinvoice,butnothinghasbeendeliveredyet
        project_so_2_stat=self.env['project.profitability.report'].read_group([('project_id','in',project_so_2.ids)],['project_id','amount_untaxed_to_invoice','amount_untaxed_invoiced','timesheet_unit_amount','timesheet_cost','expense_cost','expense_amount_untaxed_to_invoice','expense_amount_untaxed_invoiced','other_revenues'],['project_id'])[0]
        self.assertTrue(float_is_zero(project_so_2_stat['amount_untaxed_invoiced'],precision_rounding=rounding),"TheinvoicedamountoftheprojectfromSO2shouldbe0.0")
        self.assertEqual(float_compare(project_so_2_stat['amount_untaxed_to_invoice'],self.so_line_order_project.price_unit*self.so_line_order_project.qty_to_invoice,precision_rounding=rounding),0,"TheamounttoinvoiceshouldbetheonefromtheSOline,asweareinorderedquantity")
        self.assertTrue(float_is_zero(project_so_2_stat['timesheet_unit_amount'],precision_rounding=rounding),"ThetimesheetunitamountoftheprojectfromSO2shouldbe0.0")
        self.assertTrue(float_is_zero(project_so_2_stat['timesheet_cost'],precision_rounding=rounding),"ThetimesheetcostoftheprojectfromSO2shouldbe0.0")
        self.assertTrue(float_is_zero(project_so_2_stat['expense_amount_untaxed_to_invoice'],precision_rounding=rounding),"TheexpensecosttoreinvoiceoftheprojectfromSO2shouldbe0.0")
        self.assertTrue(float_is_zero(project_so_2_stat['expense_amount_untaxed_invoiced'],precision_rounding=rounding),"Theexpenseinvoicedamountoftheglobalprojectshouldbe0.0")
        self.assertTrue(float_is_zero(project_so_2_stat['expense_cost'],precision_rounding=rounding),"TheexpensecostoftheprojectfromSO2shouldbe0.0")
        self.assertTrue(float_is_zero(project_so_2_stat['other_revenues'],precision_rounding=rounding),"TheotherrevenuesoftheprojectfromSO2shouldbe0.0")

        #fixedpriceprojectshouldnotbeimpacted,asnodeliveredquantityareloggedyet
        project_so_3_stat=self.env['project.profitability.report'].read_group([('project_id','in',project_so_3.ids)],['project_id','amount_untaxed_to_invoice','amount_untaxed_invoiced','timesheet_unit_amount','timesheet_cost','expense_cost','expense_amount_untaxed_to_invoice','expense_amount_untaxed_invoiced','other_revenues'],['project_id'])[0]
        self.assertTrue(float_is_zero(project_so_3_stat['amount_untaxed_invoiced'],precision_rounding=rounding),"TheinvoicedamountoftheprojectfromSO3shouldbe0.0")
        self.assertTrue(float_is_zero(project_so_3_stat['amount_untaxed_to_invoice'],precision_rounding=rounding),"TheamounttoinvoiceoftheprojectfromSO3shouldbe0.0")
        self.assertTrue(float_is_zero(project_so_3_stat['timesheet_unit_amount'],precision_rounding=rounding),"ThetimesheetunitamountoftheprojectfromSO3shouldbe0.0")
        self.assertTrue(float_is_zero(project_so_3_stat['timesheet_cost'],precision_rounding=rounding),"ThetimesheetcostoftheprojectfromSO3shouldbe0.0")
        self.assertTrue(float_is_zero(project_so_3_stat['expense_amount_untaxed_to_invoice'],precision_rounding=rounding),"TheexpensecosttoreinvoiceoftheprojectfromSO3shouldbe0.0")
        self.assertTrue(float_is_zero(project_so_3_stat['expense_amount_untaxed_invoiced'],precision_rounding=rounding),"TheexpenseinvoicedamountoftheprojectfromSO3shouldbe0.0")
        self.assertTrue(float_is_zero(project_so_3_stat['expense_cost'],precision_rounding=rounding),"TheexpensecostoftheprojectfromSO3shouldbe0.0")
        self.assertTrue(float_is_zero(project_so_3_stat['other_revenues'],precision_rounding=rounding),"TheotherrevenuesoftheprojectfromSO3shouldbe0.0")

        #globalprojectnowcontain3tasks:'deliver'oneswhichhavenoeffect(notimesheetordeliveredyet),andthe'order'onewhichshouldupdatethe'toinvoice'amount
        project_global_stat=self.env['project.profitability.report'].read_group([('project_id','in',self.project_global.ids)],['project_id','amount_untaxed_to_invoice','amount_untaxed_invoiced','timesheet_unit_amount','timesheet_cost','expense_cost','expense_amount_untaxed_to_invoice','expense_amount_untaxed_invoiced','other_revenues'],['project_id'])[0]
        self.assertTrue(float_is_zero(project_global_stat['amount_untaxed_invoiced'],precision_rounding=rounding),"Theinvoicedamountoftheglobalprojectshouldbe0.0")
        self.assertEqual(float_compare(project_global_stat['amount_untaxed_to_invoice'],self.so_line_order_task.price_unit*self.so_line_order_task.qty_to_invoice,precision_rounding=rounding),0,"Theamounttoinvoiceofglobalprojectshouldtakethetaskin'orederedqty'intoaccount")
        self.assertTrue(float_is_zero(project_global_stat['timesheet_unit_amount'],precision_rounding=rounding),"Thetimesheetunitamountoftheglobalprojectshouldbe0.0")
        self.assertTrue(float_is_zero(project_global_stat['timesheet_cost'],precision_rounding=rounding),"Thetimesheetcostoftheglobalprojectshouldbe0.0")
        self.assertTrue(float_is_zero(project_global_stat['expense_amount_untaxed_to_invoice'],precision_rounding=rounding),"Theexpensecosttoreinvoiceoftheglobalprojectshouldbe0.0")
        self.assertTrue(float_is_zero(project_global_stat['expense_amount_untaxed_invoiced'],precision_rounding=rounding),"Theexpenseinvoicedamountoftheglobalprojectshouldbe0.0")
        self.assertTrue(float_is_zero(project_global_stat['expense_cost'],precision_rounding=rounding),"Theexpensecostoftheglobalprojectshouldbe0.0")
        self.assertTrue(float_is_zero(project_global_stat['other_revenues'],precision_rounding=rounding),"Theotherrevenuesoftheglobalprojectshouldbe0.0")

        #loggedsometimesheets:onprojectonly,thenontaskswithdifferentemployees
        timesheet1=self._log_timesheet_user(project_so_1,2)
        timesheet2=self._log_timesheet_user(project_so_2,2)
        timesheet3=self._log_timesheet_user(project_so_1,3,task_so_1)
        timesheet4=self._log_timesheet_user(project_so_2,3,task_so_2)
        timesheet5=self._log_timesheet_manager(project_so_1,1,task_so_1)
        timesheet6=self._log_timesheet_manager(project_so_2,1,task_so_2)
        timesheet7=self._log_timesheet_manager(self.project_global,3,task_in_global_1)
        timesheet8=self._log_timesheet_manager(self.project_global,3,task_in_global_2)
        timesheet9=self._log_timesheet_user(project_so_3,4,task_so_3)
        self.env['project.profitability.report'].flush()

        #deliverprojectshouldnowhavecostandsomethingtoinvoice
        project_so_1_stat=self.env['project.profitability.report'].read_group([('project_id','in',project_so_1.ids)],['project_id','amount_untaxed_to_invoice','amount_untaxed_invoiced','timesheet_unit_amount','timesheet_cost','expense_cost','expense_amount_untaxed_to_invoice','expense_amount_untaxed_invoiced','other_revenues'],['project_id'])[0]
        project_so_1_timesheet_cost=timesheet1.amount+timesheet3.amount+timesheet5.amount
        project_so_1_timesheet_sold_unit=timesheet1.unit_amount+timesheet3.unit_amount+timesheet5.unit_amount
        self.assertTrue(float_is_zero(project_so_1_stat['amount_untaxed_invoiced'],precision_rounding=rounding),"TheinvoicedamountoftheprojectfromSO1shouldbe0.0")
        self.assertEqual(float_compare(project_so_1_stat['amount_untaxed_to_invoice'],self.so_line_deliver_project.price_unit*project_so_1_timesheet_sold_unit,precision_rounding=rounding),0,"TheamounttoinvoiceoftheprojectfromSO1shouldonlyincludetimesheetlinkedtotask")
        self.assertEqual(float_compare(project_so_1_stat['timesheet_unit_amount'],project_so_1_timesheet_sold_unit,precision_rounding=rounding),0,"ThetimesheetunitamountoftheprojectfromSO1shouldincludealltimesheetinproject")
        self.assertEqual(float_compare(project_so_1_stat['timesheet_cost'],project_so_1_timesheet_cost,precision_rounding=rounding),0,"ThetimesheetcostoftheprojectfromSO1shouldincludealltimesheet")
        self.assertTrue(float_is_zero(project_so_1_stat['expense_amount_untaxed_to_invoice'],precision_rounding=rounding),"TheexpensecosttoreinvoiceoftheprojectfromSO1shouldbe0.0")
        self.assertTrue(float_is_zero(project_so_1_stat['expense_amount_untaxed_invoiced'],precision_rounding=rounding),"TheexpenseinvoicedamountoftheprojectfromSO1shouldbe0.0")
        self.assertTrue(float_is_zero(project_so_1_stat['expense_cost'],precision_rounding=rounding),"TheexpensecostoftheprojectfromSO1shouldbe0.0")
        self.assertTrue(float_is_zero(project_so_1_stat['other_revenues'],precision_rounding=rounding),"Theotherrevenuesofthedeliverprojectshouldbe0.0")

        #orderprojectstillhavesomethingtoinvoicebuthascostsnow
        project_so_2_stat=self.env['project.profitability.report'].read_group([('project_id','in',project_so_2.ids)],['project_id','amount_untaxed_to_invoice','amount_untaxed_invoiced','timesheet_unit_amount','timesheet_cost','expense_cost','expense_amount_untaxed_to_invoice','expense_amount_untaxed_invoiced','other_revenues'],['project_id'])[0]
        project_so_2_timesheet_cost=timesheet2.amount+timesheet4.amount+timesheet6.amount
        project_so_2_timesheet_sold_unit=timesheet2.unit_amount+timesheet4.unit_amount+timesheet6.unit_amount
        self.assertTrue(float_is_zero(project_so_2_stat['amount_untaxed_invoiced'],precision_rounding=rounding),"TheinvoicedamountoftheprojectfromSO2shouldbe0.0")
        self.assertEqual(float_compare(project_so_2_stat['amount_untaxed_to_invoice'],self.so_line_order_project.price_unit*self.so_line_order_project.qty_to_invoice,precision_rounding=rounding),0,"TheamounttoinvoiceshouldbetheonefromtheSOline,asweareinorderedquantity")
        self.assertEqual(float_compare(project_so_2_stat['timesheet_unit_amount'],project_so_2_timesheet_sold_unit,precision_rounding=rounding),0,"ThetimesheetunitamountoftheprojectfromSO2shouldincludealltimesheet")
        self.assertEqual(float_compare(project_so_2_stat['timesheet_cost'],project_so_2_timesheet_cost,precision_rounding=rounding),0,"ThetimesheetcostoftheprojectfromSO2shouldincludealltimesheet")
        self.assertTrue(float_is_zero(project_so_2_stat['expense_amount_untaxed_to_invoice'],precision_rounding=rounding),"TheexpensecosttoreinvoiceoftheprojectfromSO2shouldbe0.0")
        self.assertTrue(float_is_zero(project_so_2_stat['expense_amount_untaxed_invoiced'],precision_rounding=rounding),"TheexpenseinvoicedamountoftheprojectfromSO1shouldbe0.0")
        self.assertTrue(float_is_zero(project_so_2_stat['expense_cost'],precision_rounding=rounding),"TheexpensecostoftheprojectfromSO2shouldbe0.0")
        self.assertTrue(float_is_zero(project_so_2_stat['other_revenues'],precision_rounding=rounding),"TheotherrevenuesoftheprojectfromSO2shouldbe0.0")

        #fixedpriceprojectshouldowhavecostandnothingtoinvoiceasnodeliveredquantityareloggedyet
        project_so_3_stat=self.env['project.profitability.report'].read_group([('project_id','in',project_so_3.ids)],['project_id','amount_untaxed_to_invoice','amount_untaxed_invoiced','timesheet_unit_amount','timesheet_cost','expense_cost','expense_amount_untaxed_to_invoice','expense_amount_untaxed_invoiced','other_revenues'],['project_id'])[0]
        project_so_3_timesheet_cost=timesheet9.amount
        project_so_3_timesheet_sold_unit=timesheet9.unit_amount
        self.assertTrue(float_is_zero(project_so_3_stat['amount_untaxed_invoiced'],precision_rounding=rounding),"TheinvoicedamountoftheprojectfromSO3shouldbe0.0")
        self.assertTrue(float_is_zero(project_so_3_stat['amount_untaxed_to_invoice'],precision_rounding=rounding),"TheamounttoinvoiceoftheprojectfromSO3shouldbe0.0")
        self.assertEqual(float_compare(project_so_3_stat['timesheet_unit_amount'],project_so_3_timesheet_sold_unit,precision_rounding=rounding),0,"ThetimesheetunitamountoftheprojectfromSO3")
        self.assertEqual(float_compare(project_so_3_stat['timesheet_cost'],project_so_3_timesheet_cost,precision_rounding=rounding),0,"ThetimesheetcostoftheprojectfromSO3")
        self.assertTrue(float_is_zero(project_so_3_stat['expense_amount_untaxed_to_invoice'],precision_rounding=rounding),"TheexpensecosttoreinvoiceoftheprojectfromSO3shouldbe0.0")
        self.assertTrue(float_is_zero(project_so_3_stat['expense_amount_untaxed_invoiced'],precision_rounding=rounding),"TheexpenseinvoicedamountoftheprojectfromSO3shouldbe0.0")
        self.assertTrue(float_is_zero(project_so_3_stat['expense_cost'],precision_rounding=rounding),"TheexpensecostoftheprojectfromSO3shouldbe0.0")
        self.assertTrue(float_is_zero(project_so_3_stat['other_revenues'],precision_rounding=rounding),"TheotherrevenuesoftheprojectfromSO3shouldbe0.0")

        #globalprojectshouldhavemoretoinvoice,andshouldnowhavecosts
        project_global_stat=self.env['project.profitability.report'].read_group([('project_id','in',self.project_global.ids)],['project_id','amount_untaxed_to_invoice','amount_untaxed_invoiced','timesheet_unit_amount','timesheet_cost','expense_cost','expense_amount_untaxed_to_invoice','expense_amount_untaxed_invoiced','other_revenues'],['project_id'])[0]
        project_global_timesheet_cost=timesheet7.amount+timesheet8.amount
        project_global_timesheet_unit=timesheet7.unit_amount+timesheet8.unit_amount
        project_global_to_invoice=(self.so_line_order_task.price_unit*self.so_line_order_task.product_uom_qty)+(self.so_line_deliver_task.price_unit*timesheet7.unit_amount)
        self.assertTrue(float_is_zero(project_global_stat['amount_untaxed_invoiced'],precision_rounding=rounding),"Theinvoicedamountoftheglobalprojectshouldbe0.0")
        self.assertEqual(float_compare(project_global_stat['amount_untaxed_to_invoice'],project_global_to_invoice,precision_rounding=rounding),0,"Theamounttoinvoiceofglobalprojectshouldtakethetaskin'orederedqty'andthedeliveredtimesheetsintoaccount")
        self.assertEqual(float_compare(project_global_stat['timesheet_unit_amount'],project_global_timesheet_unit,precision_rounding=rounding),0,"Thetimesheetunitamountoftheglobalprojectshouldincludealltimesheet")
        self.assertEqual(float_compare(project_global_stat['timesheet_cost'],project_global_timesheet_cost,precision_rounding=rounding),0,"Thetimesheetcostoftheglobalprojectshouldincludealltimesheet")
        self.assertTrue(float_is_zero(project_global_stat['expense_amount_untaxed_to_invoice'],precision_rounding=rounding),"Theexpensecosttoreinvoiceoftheglobalprojectshouldbe0.0")
        self.assertTrue(float_is_zero(project_global_stat['expense_amount_untaxed_invoiced'],precision_rounding=rounding),"TheexpenseinvoicedamountoftheprojectfromSO1shouldbe0.0")
        self.assertTrue(float_is_zero(project_global_stat['expense_cost'],precision_rounding=rounding),"Theexpensecostoftheglobalprojectshouldbe0.0")
        self.assertTrue(float_is_zero(project_global_stat['other_revenues'],precision_rounding=rounding),"Theotherrevenuesoftheglobalprojectshouldbe0.0")

        self.so_line_deliver_manual_project.write({'qty_delivered':7.0})
        self.env['project.profitability.report'].flush()

        #deliverprojectshouldnowhavecostandsomethingtoinvoice
        project_so_1_stat=self.env['project.profitability.report'].read_group([('project_id','in',project_so_1.ids)],['project_id','amount_untaxed_to_invoice','amount_untaxed_invoiced','timesheet_unit_amount','timesheet_cost','expense_cost','expense_amount_untaxed_to_invoice','expense_amount_untaxed_invoiced','other_revenues'],['project_id'])[0]
        project_so_1_timesheet_cost=timesheet1.amount+timesheet3.amount+timesheet5.amount
        project_so_1_timesheet_sold_unit=timesheet1.unit_amount+timesheet3.unit_amount+timesheet5.unit_amount
        self.assertTrue(float_is_zero(project_so_1_stat['amount_untaxed_invoiced'],precision_rounding=rounding),"TheinvoicedamountoftheprojectfromSO1shouldbe0.0")
        self.assertEqual(float_compare(project_so_1_stat['amount_untaxed_to_invoice'],self.so_line_deliver_project.price_unit*project_so_1_timesheet_sold_unit,precision_rounding=rounding),0,"TheamounttoinvoiceoftheprojectfromSO1shouldonlyincludetimesheetlinkedtotask")
        self.assertEqual(float_compare(project_so_1_stat['timesheet_unit_amount'],project_so_1_timesheet_sold_unit,precision_rounding=rounding),0,"ThetimesheetunitamountoftheprojectfromSO1shouldincludealltimesheetinproject")
        self.assertEqual(float_compare(project_so_1_stat['timesheet_cost'],project_so_1_timesheet_cost,precision_rounding=rounding),0,"ThetimesheetcostoftheprojectfromSO1shouldincludealltimesheet")
        self.assertTrue(float_is_zero(project_so_1_stat['expense_amount_untaxed_to_invoice'],precision_rounding=rounding),"TheexpensecosttoreinvoiceoftheprojectfromSO1shouldbe0.0")
        self.assertTrue(float_is_zero(project_so_1_stat['expense_amount_untaxed_invoiced'],precision_rounding=rounding),"TheexpenseinvoicedamountoftheprojectfromSO1shouldbe0.0")
        self.assertTrue(float_is_zero(project_so_1_stat['expense_cost'],precision_rounding=rounding),"TheexpensecostoftheprojectfromSO1shouldbe0.0")
        self.assertTrue(float_is_zero(project_so_1_stat['other_revenues'],precision_rounding=rounding),"Theotherrevenuesofthedeliverprojectshouldbe0.0")

        #orderprojectstillhavesomethingtoinvoicebuthascostsnow
        project_so_2_stat=self.env['project.profitability.report'].read_group([('project_id','in',project_so_2.ids)],['project_id','amount_untaxed_to_invoice','amount_untaxed_invoiced','timesheet_unit_amount','timesheet_cost','expense_cost','expense_amount_untaxed_to_invoice','expense_amount_untaxed_invoiced','other_revenues'],['project_id'])[0]
        project_so_2_timesheet_cost=timesheet2.amount+timesheet4.amount+timesheet6.amount
        project_so_2_timesheet_sold_unit=timesheet2.unit_amount+timesheet4.unit_amount+timesheet6.unit_amount
        self.assertTrue(float_is_zero(project_so_2_stat['amount_untaxed_invoiced'],precision_rounding=rounding),"TheinvoicedamountoftheprojectfromSO2shouldbe0.0")
        self.assertEqual(float_compare(project_so_2_stat['amount_untaxed_to_invoice'],self.so_line_order_project.price_unit*self.so_line_order_project.qty_to_invoice,precision_rounding=rounding),0,"TheamounttoinvoiceshouldbetheonefromtheSOline,asweareinorderedquantity")
        self.assertEqual(float_compare(project_so_2_stat['timesheet_unit_amount'],project_so_2_timesheet_sold_unit,precision_rounding=rounding),0,"ThetimesheetunitamountoftheprojectfromSO2shouldincludealltimesheet")
        self.assertEqual(float_compare(project_so_2_stat['timesheet_cost'],project_so_2_timesheet_cost,precision_rounding=rounding),0,"ThetimesheetcostoftheprojectfromSO2shouldincludealltimesheet")
        self.assertTrue(float_is_zero(project_so_2_stat['expense_amount_untaxed_to_invoice'],precision_rounding=rounding),"TheexpensecosttoreinvoiceoftheprojectfromSO2shouldbe0.0")
        self.assertTrue(float_is_zero(project_so_2_stat['expense_amount_untaxed_invoiced'],precision_rounding=rounding),"TheexpenseinvoicedamountoftheprojectfromSO1shouldbe0.0")
        self.assertTrue(float_is_zero(project_so_2_stat['expense_cost'],precision_rounding=rounding),"TheexpensecostoftheprojectfromSO2shouldbe0.0")
        self.assertTrue(float_is_zero(project_so_2_stat['other_revenues'],precision_rounding=rounding),"TheotherrevenuesoftheprojectfromSO2shouldbe0.0")

        #fixedpriceprojectshouldowhavecostandsomethingtoinvoiceassomedeliveredquantityareloggedin
        project_so_3_stat=self.env['project.profitability.report'].read_group([('project_id','in',project_so_3.ids)],['project_id','amount_untaxed_to_invoice','amount_untaxed_invoiced','timesheet_unit_amount','timesheet_cost','expense_cost','expense_amount_untaxed_to_invoice','expense_amount_untaxed_invoiced','other_revenues'],['project_id'])[0]
        project_so_3_timesheet_cost=timesheet9.amount
        project_so_3_timesheet_sold_unit=timesheet9.unit_amount
        self.assertTrue(float_is_zero(project_so_3_stat['amount_untaxed_invoiced'],precision_rounding=rounding),"TheinvoicedamountoftheprojectfromSO3shouldbe0.0")
        self.assertEqual(float_compare(project_so_3_stat['amount_untaxed_to_invoice'],self.so_line_deliver_manual_project.price_unit*self.so_line_deliver_manual_project.qty_to_invoice,precision_rounding=rounding),0,"TheamounttoinvoiceoftheprojectfromSO3shouldbe0.0")
        self.assertEqual(float_compare(project_so_3_stat['timesheet_unit_amount'],project_so_3_timesheet_sold_unit,precision_rounding=rounding),0,"ThetimesheetunitamountoftheprojectfromSO3")
        self.assertEqual(float_compare(project_so_3_stat['timesheet_cost'],project_so_3_timesheet_cost,precision_rounding=rounding),0,"ThetimesheetcostoftheprojectfromSO3")
        self.assertTrue(float_is_zero(project_so_3_stat['expense_amount_untaxed_to_invoice'],precision_rounding=rounding),"TheexpensecosttoreinvoiceoftheprojectfromSO3shouldbe0.0")
        self.assertTrue(float_is_zero(project_so_3_stat['expense_amount_untaxed_invoiced'],precision_rounding=rounding),"TheexpenseinvoicedamountoftheprojectfromSO3shouldbe0.0")
        self.assertTrue(float_is_zero(project_so_3_stat['expense_cost'],precision_rounding=rounding),"TheexpensecostoftheprojectfromSO3shouldbe0.0")
        self.assertTrue(float_is_zero(project_so_3_stat['other_revenues'],precision_rounding=rounding),"TheotherrevenuesoftheprojectfromSO3shouldbe0.0")

        #globalprojectshouldhavemoretoinvoice,andshouldnowhavecosts
        project_global_stat=self.env['project.profitability.report'].read_group([('project_id','in',self.project_global.ids)],['project_id','amount_untaxed_to_invoice','amount_untaxed_invoiced','timesheet_unit_amount','timesheet_cost','expense_cost','expense_amount_untaxed_to_invoice','expense_amount_untaxed_invoiced','other_revenues'],['project_id'])[0]
        project_global_timesheet_cost=timesheet7.amount+timesheet8.amount
        project_global_timesheet_unit=timesheet7.unit_amount+timesheet8.unit_amount
        project_global_to_invoice=(self.so_line_order_task.price_unit*self.so_line_order_task.product_uom_qty)+(self.so_line_deliver_task.price_unit*timesheet7.unit_amount)
        self.assertTrue(float_is_zero(project_global_stat['amount_untaxed_invoiced'],precision_rounding=rounding),"Theinvoicedamountoftheglobalprojectshouldbe0.0")
        self.assertEqual(float_compare(project_global_stat['amount_untaxed_to_invoice'],project_global_to_invoice,precision_rounding=rounding),0,"Theamounttoinvoiceofglobalprojectshouldtakethetaskin'orederedqty'andthedeliveredtimesheetsintoaccount")
        self.assertEqual(float_compare(project_global_stat['timesheet_unit_amount'],project_global_timesheet_unit,precision_rounding=rounding),0,"Thetimesheetunitamountoftheglobalprojectshouldincludealltimesheet")
        self.assertEqual(float_compare(project_global_stat['timesheet_cost'],project_global_timesheet_cost,precision_rounding=rounding),0,"Thetimesheetcostoftheglobalprojectshouldincludealltimesheet")
        self.assertTrue(float_is_zero(project_global_stat['expense_amount_untaxed_to_invoice'],precision_rounding=rounding),"Theexpensecosttoreinvoiceoftheglobalprojectshouldbe0.0")
        self.assertTrue(float_is_zero(project_global_stat['expense_amount_untaxed_invoiced'],precision_rounding=rounding),"TheexpenseinvoicedamountoftheprojectfromSO1shouldbe0.0")
        self.assertTrue(float_is_zero(project_global_stat['expense_cost'],precision_rounding=rounding),"Theexpensecostoftheglobalprojectshouldbe0.0")
        self.assertTrue(float_is_zero(project_global_stat['other_revenues'],precision_rounding=rounding),"Theotherrevenuesoftheglobalprojectshouldbe0.0")

        InvoiceWizard=self.env['sale.advance.payment.inv'].with_context(mail_notrack=True)

        #invoicetheSalesOrderSO1(basedondeliveredqty)
        context={
            "active_model":'sale.order',
            "active_ids":[self.sale_order_1.id],
            "active_id":self.sale_order_1.id,
            'open_invoices':True,
        }
        payment=InvoiceWizard.create({
            'advance_payment_method':'delivered',
        })
        action_invoice=payment.with_context(context).create_invoices()
        invoice_id=action_invoice['res_id']
        invoice_1=self.env['account.move'].browse(invoice_id)
        invoice_1.action_post()
        self.env['project.profitability.report'].flush()

        #deliverprojectshouldnowhavecostandsomethinginvoiced
        project_so_1_stat=self.env['project.profitability.report'].read_group([('project_id','in',project_so_1.ids)],['project_id','amount_untaxed_to_invoice','amount_untaxed_invoiced','timesheet_unit_amount','timesheet_cost','expense_cost','expense_amount_untaxed_to_invoice','expense_amount_untaxed_invoiced','other_revenues'],['project_id'])[0]
        project_so_1_timesheet_cost=timesheet1.amount+timesheet3.amount+timesheet5.amount
        project_so_1_timesheet_sold_unit=timesheet1.unit_amount+timesheet3.unit_amount+timesheet5.unit_amount

        self.assertEqual(float_compare(project_so_1_stat['amount_untaxed_invoiced'],self.so_line_deliver_project.price_unit*project_so_1_timesheet_sold_unit,precision_rounding=rounding),0,"TheinvoicedamountoftheprojectfromSO1shouldonlyincludetimesheetlinkedtotask")
        self.assertTrue(float_is_zero(project_so_1_stat['amount_untaxed_to_invoice'],precision_rounding=rounding),"TheamounttoinvoiceoftheprojectfromSO1shouldbe0.0")
        self.assertEqual(float_compare(project_so_1_stat['timesheet_unit_amount'],project_so_1_timesheet_sold_unit,precision_rounding=rounding),0,"ThetimesheetunitamountoftheprojectfromSO1shouldincludealltimesheetinproject")
        self.assertEqual(float_compare(project_so_1_stat['timesheet_cost'],project_so_1_timesheet_cost,precision_rounding=rounding),0,"ThetimesheetcostoftheprojectfromSO1shouldincludealltimesheet")
        self.assertTrue(float_is_zero(project_so_1_stat['expense_amount_untaxed_to_invoice'],precision_rounding=rounding),"TheexpensecosttoreinvoiceoftheprojectfromSO1shouldbe0.0")
        self.assertTrue(float_is_zero(project_so_1_stat['expense_amount_untaxed_invoiced'],precision_rounding=rounding),"TheexpenseinvoicedamountoftheprojectfromSO1shouldbe0.0")
        self.assertTrue(float_is_zero(project_so_1_stat['expense_cost'],precision_rounding=rounding),"TheexpensecostoftheprojectfromSO1shouldbe0.0")
        self.assertTrue(float_is_zero(project_so_1_stat['other_revenues'],precision_rounding=rounding),"Theotherrevenuesofthedeliverprojectshouldbe0.0")

        #orderprojecthasstillnothinginvoiced
        project_so_2_stat=self.env['project.profitability.report'].read_group([('project_id','in',project_so_2.ids)],['project_id','amount_untaxed_to_invoice','amount_untaxed_invoiced','timesheet_unit_amount','timesheet_cost','expense_cost','expense_amount_untaxed_to_invoice','expense_amount_untaxed_invoiced','other_revenues'],['project_id'])[0]
        project_so_2_timesheet_cost=timesheet2.amount+timesheet4.amount+timesheet6.amount
        project_so_2_timesheet_sold_unit=timesheet2.unit_amount+timesheet4.unit_amount+timesheet6.unit_amount
        self.assertTrue(float_is_zero(project_so_2_stat['amount_untaxed_invoiced'],precision_rounding=rounding),"TheinvoicedamountoftheprojectfromSO2shouldbe0.0")
        self.assertEqual(float_compare(project_so_2_stat['amount_untaxed_to_invoice'],self.so_line_order_project.price_unit*self.so_line_order_project.qty_to_invoice,precision_rounding=rounding),0,"TheamounttoinvoiceshouldbetheonefromtheSOline,asweareinorderedquantity")
        self.assertEqual(float_compare(project_so_2_stat['timesheet_unit_amount'],project_so_2_timesheet_sold_unit,precision_rounding=rounding),0,"ThetimesheetunitamountoftheprojectfromSO2shouldincludealltimesheet")
        self.assertEqual(float_compare(project_so_2_stat['timesheet_cost'],project_so_2_timesheet_cost,precision_rounding=rounding),0,"ThetimesheetcostoftheprojectfromSO2shouldincludealltimesheet")
        self.assertTrue(float_is_zero(project_so_2_stat['expense_amount_untaxed_to_invoice'],precision_rounding=rounding),"TheexpensecosttoreinvoiceoftheprojectfromSO2shouldbe0.0")
        self.assertTrue(float_is_zero(project_so_2_stat['expense_amount_untaxed_invoiced'],precision_rounding=rounding),"TheexpenseinvoicedamountoftheprojectfromSO1shouldbe0.0")
        self.assertTrue(float_is_zero(project_so_2_stat['expense_cost'],precision_rounding=rounding),"TheexpensecostoftheprojectfromSO2shouldbe0.0")
        self.assertTrue(float_is_zero(project_so_2_stat['other_revenues'],precision_rounding=rounding),"TheotherrevenuesoftheprojectfromSO2shouldbe0.0")

        #fixedpriceprojecthasstillnothinginvoice
        project_so_3_stat=self.env['project.profitability.report'].read_group([('project_id','in',project_so_3.ids)],['project_id','amount_untaxed_to_invoice','amount_untaxed_invoiced','timesheet_unit_amount','timesheet_cost','expense_cost','expense_amount_untaxed_to_invoice','expense_amount_untaxed_invoiced','other_revenues'],['project_id'])[0]
        project_so_3_timesheet_cost=timesheet9.amount
        project_so_3_timesheet_sold_unit=timesheet9.unit_amount
        self.assertTrue(float_is_zero(project_so_3_stat['amount_untaxed_invoiced'],precision_rounding=rounding),"TheinvoicedamountoftheprojectfromSO3shouldbe0.0")
        self.assertEqual(float_compare(project_so_3_stat['amount_untaxed_to_invoice'],self.so_line_deliver_manual_project.price_unit*self.so_line_deliver_manual_project.qty_to_invoice,precision_rounding=rounding),0,"TheamounttoinvoiceoftheprojectfromSO3shouldbe0.0")
        self.assertEqual(float_compare(project_so_3_stat['timesheet_unit_amount'],project_so_3_timesheet_sold_unit,precision_rounding=rounding),0,"ThetimesheetunitamountoftheprojectfromSO3")
        self.assertEqual(float_compare(project_so_3_stat['timesheet_cost'],project_so_3_timesheet_cost,precision_rounding=rounding),0,"ThetimesheetcostoftheprojectfromSO3")
        self.assertTrue(float_is_zero(project_so_3_stat['expense_amount_untaxed_to_invoice'],precision_rounding=rounding),"TheexpensecosttoreinvoiceoftheprojectfromSO3shouldbe0.0")
        self.assertTrue(float_is_zero(project_so_3_stat['expense_amount_untaxed_invoiced'],precision_rounding=rounding),"TheexpenseinvoicedamountoftheprojectfromSO3shouldbe0.0")
        self.assertTrue(float_is_zero(project_so_3_stat['expense_cost'],precision_rounding=rounding),"TheexpensecostoftheprojectfromSO3shouldbe0.0")
        self.assertTrue(float_is_zero(project_so_3_stat['other_revenues'],precision_rounding=rounding),"TheotherrevenuesoftheprojectfromSO3shouldbe0.0")

        #globalprojectshouldhavemoretoinvoice,andshouldnowhavecosts
        project_global_stat=self.env['project.profitability.report'].read_group([('project_id','in',self.project_global.ids)],['project_id','amount_untaxed_to_invoice','amount_untaxed_invoiced','timesheet_unit_amount','timesheet_cost','expense_cost','expense_amount_untaxed_to_invoice','expense_amount_untaxed_invoiced','other_revenues'],['project_id'])[0]
        project_global_timesheet_cost=timesheet7.amount+timesheet8.amount
        project_global_timesheet_unit=timesheet7.unit_amount+timesheet8.unit_amount
        project_global_to_invoice=self.so_line_order_task.price_unit*self.so_line_order_task.product_uom_qty
        project_global_invoiced=self.so_line_deliver_task.price_unit*timesheet7.unit_amount
        self.assertEqual(float_compare(project_global_stat['amount_untaxed_invoiced'],project_global_invoiced,precision_rounding=rounding),0,"Theinvoicedamountoftheglobalprojectshouldbe0.0")
        self.assertEqual(float_compare(project_global_stat['amount_untaxed_to_invoice'],project_global_to_invoice,precision_rounding=rounding),0,"Theamounttoinvoiceofglobalprojectshouldtakethetaskin'orederedqty'andthedeliveredtimesheetsintoaccount")
        self.assertEqual(float_compare(project_global_stat['timesheet_unit_amount'],project_global_timesheet_unit,precision_rounding=rounding),0,"Thetimesheetunitamountoftheglobalprojectshouldincludealltimesheet")
        self.assertEqual(float_compare(project_global_stat['timesheet_cost'],project_global_timesheet_cost,precision_rounding=rounding),0,"Thetimesheetcostoftheglobalprojectshouldincludealltimesheet")
        self.assertTrue(float_is_zero(project_global_stat['expense_amount_untaxed_to_invoice'],precision_rounding=rounding),"Theexpensecosttoreinvoiceoftheglobalprojectshouldbe0.0")
        self.assertTrue(float_is_zero(project_global_stat['expense_amount_untaxed_invoiced'],precision_rounding=rounding),"TheexpenseinvoicedamountoftheprojectfromSO1shouldbe0.0")
        self.assertTrue(float_is_zero(project_global_stat['expense_cost'],precision_rounding=rounding),"Theexpensecostoftheglobalprojectshouldbe0.0")
        self.assertTrue(float_is_zero(project_global_stat['other_revenues'],precision_rounding=rounding),"Theotherrevenuesoftheglobalprojectshouldbe0.0")

        #invoicetheSalesOrderSO2
        context={
            "active_model":'sale.order',
            "active_ids":[self.sale_order_2.id],
            "active_id":self.sale_order_2.id,
            'open_invoices':True,
        }
        payment=InvoiceWizard.create({
            'advance_payment_method':'delivered',
        })
        action_invoice=payment.with_context(context).create_invoices()
        invoice_id=action_invoice['res_id']
        invoice_2=self.env['account.move'].browse(invoice_id)
        invoice_2.action_post()
        self.env['project.profitability.report'].flush()

        #deliverprojectshouldnotbeimpactedbytheinvoiceoftheotherSO
        project_so_1_stat=self.env['project.profitability.report'].read_group([('project_id','in',project_so_1.ids)],['project_id','amount_untaxed_to_invoice','amount_untaxed_invoiced','timesheet_unit_amount','timesheet_cost','expense_cost','expense_amount_untaxed_to_invoice','expense_amount_untaxed_invoiced','other_revenues'],['project_id'])[0]
        project_so_1_timesheet_cost=timesheet1.amount+timesheet3.amount+timesheet5.amount
        project_so_1_timesheet_sold_unit=timesheet1.unit_amount+timesheet3.unit_amount+timesheet5.unit_amount
        self.assertEqual(float_compare(project_so_1_stat['amount_untaxed_invoiced'],self.so_line_deliver_project.price_unit*project_so_1_timesheet_sold_unit,precision_rounding=rounding),0,"TheinvoicedamountoftheprojectfromSO1shouldonlyincludetimesheetlinkedtotask")
        self.assertTrue(float_is_zero(project_so_1_stat['amount_untaxed_to_invoice'],precision_rounding=rounding),"TheamounttoinvoiceoftheprojectfromSO1shouldbe0.0")
        self.assertEqual(float_compare(project_so_1_stat['timesheet_unit_amount'],project_so_1_timesheet_sold_unit,precision_rounding=rounding),0,"ThetimesheetunitamountoftheprojectfromSO1shouldincludealltimesheetinproject")
        self.assertEqual(float_compare(project_so_1_stat['timesheet_cost'],project_so_1_timesheet_cost,precision_rounding=rounding),0,"ThetimesheetcostoftheprojectfromSO1shouldincludealltimesheet")
        self.assertTrue(float_is_zero(project_so_1_stat['expense_amount_untaxed_to_invoice'],precision_rounding=rounding),"TheexpensecosttoreinvoiceoftheprojectfromSO1shouldbe0.0")
        self.assertTrue(float_is_zero(project_so_1_stat['expense_amount_untaxed_invoiced'],precision_rounding=rounding),"TheexpenseinvoicedamountoftheprojectfromSO1shouldbe0.0")
        self.assertTrue(float_is_zero(project_so_1_stat['expense_cost'],precision_rounding=rounding),"TheexpensecostoftheprojectfromSO1shouldbe0.0")
        self.assertTrue(float_is_zero(project_so_1_stat['other_revenues'],precision_rounding=rounding),"Theotherrevenuesofthedeliverprojectshouldbe0.0")

        #orderprojectisnowtotallyinvoiced,asweareinorderedqty
        project_so_2_stat=self.env['project.profitability.report'].read_group([('project_id','in',project_so_2.ids)],['project_id','amount_untaxed_to_invoice','amount_untaxed_invoiced','timesheet_unit_amount','timesheet_cost','expense_cost','expense_amount_untaxed_to_invoice','expense_amount_untaxed_invoiced','other_revenues'],['project_id'])[0]
        project_so_2_timesheet_cost=timesheet2.amount+timesheet4.amount+timesheet6.amount
        project_so_2_timesheet_sold_unit=timesheet2.unit_amount+timesheet4.unit_amount+timesheet6.unit_amount
        self.assertEqual(float_compare(project_so_2_stat['amount_untaxed_invoiced'],self.so_line_order_project.price_unit*self.so_line_order_project.product_uom_qty,precision_rounding=rounding),0,"TheinvoicedamountshouldbetheonefromtheSOline,asweareinorderedquantity")
        self.assertTrue(float_is_zero(project_so_2_stat['amount_untaxed_to_invoice'],precision_rounding=rounding),"Theamounttoinvoiceshouldbetheone0.0,asallorderedquantityisinvoiced")
        self.assertEqual(float_compare(project_so_2_stat['timesheet_unit_amount'],project_so_2_timesheet_sold_unit,precision_rounding=rounding),0,"ThetimesheetunitamountoftheprojectfromSO2shouldincludealltimesheet")
        self.assertEqual(float_compare(project_so_2_stat['timesheet_cost'],project_so_2_timesheet_cost,precision_rounding=rounding),0,"ThetimesheetcostoftheprojectfromSO2shouldincludealltimesheet")
        self.assertTrue(float_is_zero(project_so_2_stat['expense_amount_untaxed_to_invoice'],precision_rounding=rounding),"TheexpensecosttoreinvoiceoftheprojectfromSO2shouldbe0.0")
        self.assertTrue(float_is_zero(project_so_2_stat['expense_amount_untaxed_invoiced'],precision_rounding=rounding),"TheexpenseinvoicedamountoftheprojectfromSO1shouldbe0.0")
        self.assertTrue(float_is_zero(project_so_2_stat['expense_cost'],precision_rounding=rounding),"TheexpensecostoftheprojectfromSO2shouldbe0.0")
        self.assertTrue(float_is_zero(project_so_2_stat['other_revenues'],precision_rounding=rounding),"TheotherrevenuesoftheprojectfromSO2shouldbe0.0")

        #fixedpriceprojecthasstillnothinginvoice
        project_so_3_stat=self.env['project.profitability.report'].read_group([('project_id','in',project_so_3.ids)],['project_id','amount_untaxed_to_invoice','amount_untaxed_invoiced','timesheet_unit_amount','timesheet_cost','expense_cost','expense_amount_untaxed_to_invoice','expense_amount_untaxed_invoiced','other_revenues'],['project_id'])[0]
        project_so_3_timesheet_cost=timesheet9.amount
        project_so_3_timesheet_sold_unit=timesheet9.unit_amount
        self.assertTrue(float_is_zero(project_so_3_stat['amount_untaxed_invoiced'],precision_rounding=rounding),"TheinvoicedamountoftheprojectfromSO3shouldbe0.0")
        self.assertEqual(float_compare(project_so_3_stat['amount_untaxed_to_invoice'],self.so_line_deliver_manual_project.price_unit*self.so_line_deliver_manual_project.qty_to_invoice,precision_rounding=rounding),0,"TheamounttoinvoiceoftheprojectfromSO3shouldbe0.0")
        self.assertEqual(float_compare(project_so_3_stat['timesheet_unit_amount'],project_so_3_timesheet_sold_unit,precision_rounding=rounding),0,"ThetimesheetunitamountoftheprojectfromSO3")
        self.assertEqual(float_compare(project_so_3_stat['timesheet_cost'],project_so_3_timesheet_cost,precision_rounding=rounding),0,"ThetimesheetcostoftheprojectfromSO3")
        self.assertTrue(float_is_zero(project_so_3_stat['expense_amount_untaxed_to_invoice'],precision_rounding=rounding),"TheexpensecosttoreinvoiceoftheprojectfromSO3shouldbe0.0")
        self.assertTrue(float_is_zero(project_so_3_stat['expense_amount_untaxed_invoiced'],precision_rounding=rounding),"TheexpenseinvoicedamountoftheprojectfromSO3shouldbe0.0")
        self.assertTrue(float_is_zero(project_so_3_stat['expense_cost'],precision_rounding=rounding),"TheexpensecostoftheprojectfromSO3shouldbe0.0")
        self.assertTrue(float_is_zero(project_so_3_stat['other_revenues'],precision_rounding=rounding),"TheotherrevenuesoftheprojectfromSO3shouldbe0.0")

        #globalprojectshouldbetotallyinvoiced
        project_global_stat=self.env['project.profitability.report'].read_group([('project_id','in',self.project_global.ids)],['project_id','amount_untaxed_to_invoice','amount_untaxed_invoiced','timesheet_unit_amount','timesheet_cost','expense_cost','expense_amount_untaxed_to_invoice','expense_amount_untaxed_invoiced','other_revenues'],['project_id'])[0]
        project_global_timesheet_cost=timesheet7.amount+timesheet8.amount
        project_global_timesheet_unit=timesheet7.unit_amount+timesheet8.unit_amount
        project_global_invoiced=self.so_line_order_task.price_unit*self.so_line_order_task.product_uom_qty+self.so_line_deliver_task.price_unit*timesheet7.unit_amount
        self.assertEqual(float_compare(project_global_stat['amount_untaxed_invoiced'],project_global_invoiced,precision_rounding=rounding),0,"Theinvoicedamountoftheglobalprojectshouldbe0.0")
        self.assertTrue(float_is_zero(project_global_stat['amount_untaxed_to_invoice'],precision_rounding=rounding),"Theamounttoinvoiceofglobalprojectshouldtakethetaskin'orederedqty'andthedeliveredtimesheetsintoaccount")
        self.assertEqual(float_compare(project_global_stat['timesheet_unit_amount'],project_global_timesheet_unit,precision_rounding=rounding),0,"Thetimesheetunitamountoftheglobalprojectshouldincludealltimesheet")
        self.assertEqual(float_compare(project_global_stat['timesheet_cost'],project_global_timesheet_cost,precision_rounding=rounding),0,"Thetimesheetcostoftheglobalprojectshouldincludealltimesheet")
        self.assertTrue(float_is_zero(project_global_stat['expense_amount_untaxed_to_invoice'],precision_rounding=rounding),"Theexpensecosttoreinvoiceoftheglobalprojectshouldbe0.0")
        self.assertTrue(float_is_zero(project_global_stat['expense_amount_untaxed_invoiced'],precision_rounding=rounding),"TheexpenseinvoicedamountoftheprojectfromSO1shouldbe0.0")
        self.assertTrue(float_is_zero(project_global_stat['expense_cost'],precision_rounding=rounding),"Theexpensecostoftheglobalprojectshouldbe0.0")
        self.assertTrue(float_is_zero(project_global_stat['other_revenues'],precision_rounding=rounding),"Theotherrevenuesoftheglobalprojectshouldbe0.0")

        #invoicetheSalesOrderSO3
        context={
            "active_model":'sale.order',
            "active_ids":[self.sale_order_3.id],
            "active_id":self.sale_order_3.id,
            'open_invoices':True,
        }
        payment=InvoiceWizard.create({
            'advance_payment_method':'delivered',
        })
        action_invoice=payment.with_context(context).create_invoices()
        invoice_id=action_invoice['res_id']
        invoice_3=self.env['account.move'].browse(invoice_id)
        invoice_3.action_post()
        self.env['project.profitability.report'].flush()

        #deliverprojectshouldnotbeimpactedbytheinvoiceoftheotherSO
        project_so_1_stat=self.env['project.profitability.report'].read_group([('project_id','in',project_so_1.ids)],['project_id','amount_untaxed_to_invoice','amount_untaxed_invoiced','timesheet_unit_amount','timesheet_cost','expense_cost','expense_amount_untaxed_to_invoice','expense_amount_untaxed_invoiced','other_revenues'],['project_id'])[0]
        project_so_1_timesheet_cost=timesheet1.amount+timesheet3.amount+timesheet5.amount
        project_so_1_timesheet_sold_unit=timesheet1.unit_amount+timesheet3.unit_amount+timesheet5.unit_amount
        self.assertEqual(float_compare(project_so_1_stat['amount_untaxed_invoiced'],self.so_line_deliver_project.price_unit*project_so_1_timesheet_sold_unit,precision_rounding=rounding),0,"TheinvoicedamountoftheprojectfromSO1shouldonlyincludetimesheetlinkedtotask")
        self.assertTrue(float_is_zero(project_so_1_stat['amount_untaxed_to_invoice'],precision_rounding=rounding),"TheamounttoinvoiceoftheprojectfromSO1shouldbe0.0")
        self.assertEqual(float_compare(project_so_1_stat['timesheet_unit_amount'],project_so_1_timesheet_sold_unit,precision_rounding=rounding),0,"ThetimesheetunitamountoftheprojectfromSO1shouldincludealltimesheetinproject")
        self.assertEqual(float_compare(project_so_1_stat['timesheet_cost'],project_so_1_timesheet_cost,precision_rounding=rounding),0,"ThetimesheetcostoftheprojectfromSO1shouldincludealltimesheet")
        self.assertTrue(float_is_zero(project_so_1_stat['expense_amount_untaxed_to_invoice'],precision_rounding=rounding),"TheexpensecosttoreinvoiceoftheprojectfromSO1shouldbe0.0")
        self.assertTrue(float_is_zero(project_so_1_stat['expense_amount_untaxed_invoiced'],precision_rounding=rounding),"TheexpenseinvoicedamountoftheprojectfromSO1shouldbe0.0")
        self.assertTrue(float_is_zero(project_so_1_stat['expense_cost'],precision_rounding=rounding),"TheexpensecostoftheprojectfromSO1shouldbe0.0")
        self.assertTrue(float_is_zero(project_so_1_stat['other_revenues'],precision_rounding=rounding),"Theotherrevenuesofthedeliverprojectshouldbe0.0")

        #orderprojectshouldnotbeimpactedbytheinvoiceoftheotherSO
        project_so_2_stat=self.env['project.profitability.report'].read_group([('project_id','in',project_so_2.ids)],['project_id','amount_untaxed_to_invoice','amount_untaxed_invoiced','timesheet_unit_amount','timesheet_cost','expense_cost','expense_amount_untaxed_to_invoice','expense_amount_untaxed_invoiced','other_revenues'],['project_id'])[0]
        project_so_2_timesheet_cost=timesheet2.amount+timesheet4.amount+timesheet6.amount
        project_so_2_timesheet_sold_unit=timesheet2.unit_amount+timesheet4.unit_amount+timesheet6.unit_amount
        self.assertEqual(float_compare(project_so_2_stat['amount_untaxed_invoiced'],self.so_line_order_project.price_unit*self.so_line_order_project.product_uom_qty,precision_rounding=rounding),0,"TheinvoicedamountshouldbetheonefromtheSOline,asweareinorderedquantity")
        self.assertTrue(float_is_zero(project_so_2_stat['amount_untaxed_to_invoice'],precision_rounding=rounding),"Theamounttoinvoiceshouldbetheone0.0,asallorderedquantityisinvoiced")
        self.assertEqual(float_compare(project_so_2_stat['timesheet_unit_amount'],project_so_2_timesheet_sold_unit,precision_rounding=rounding),0,"ThetimesheetunitamountoftheprojectfromSO2shouldincludealltimesheet")
        self.assertEqual(float_compare(project_so_2_stat['timesheet_cost'],project_so_2_timesheet_cost,precision_rounding=rounding),0,"ThetimesheetcostoftheprojectfromSO2shouldincludealltimesheet")
        self.assertTrue(float_is_zero(project_so_2_stat['expense_amount_untaxed_to_invoice'],precision_rounding=rounding),"TheexpensecosttoreinvoiceoftheprojectfromSO2shouldbe0.0")
        self.assertTrue(float_is_zero(project_so_2_stat['expense_amount_untaxed_invoiced'],precision_rounding=rounding),"TheexpenseinvoicedamountoftheprojectfromSO1shouldbe0.0")
        self.assertTrue(float_is_zero(project_so_2_stat['expense_cost'],precision_rounding=rounding),"TheexpensecostoftheprojectfromSO2shouldbe0.0")
        self.assertTrue(float_is_zero(project_so_2_stat['other_revenues'],precision_rounding=rounding),"TheotherrevenuesoftheprojectfromSO2shouldbe0.0")

        #fixedpriceprojectisnowpartiallyinvoiced,asweareindeliveredqty
        project_so_3_stat=self.env['project.profitability.report'].read_group([('project_id','in',project_so_3.ids)],['project_id','amount_untaxed_to_invoice','amount_untaxed_invoiced','timesheet_unit_amount','timesheet_cost','expense_cost','expense_amount_untaxed_to_invoice','expense_amount_untaxed_invoiced','other_revenues'],['project_id'])[0]
        project_so_3_timesheet_cost=timesheet9.amount
        project_so_3_timesheet_sold_unit=timesheet9.unit_amount
        self.assertEqual(float_compare(project_so_3_stat['amount_untaxed_invoiced'],self.so_line_deliver_manual_project.price_unit*self.so_line_deliver_manual_project.qty_delivered,precision_rounding=rounding),0,"TheinvoicedamountoftheprojectfromSO3shouldbethedeliveredquantity*theunitprice")
        self.assertTrue(float_is_zero(project_so_3_stat['amount_untaxed_to_invoice'],precision_rounding=rounding),"TheamounttoinvoiceoftheprojectfromSO3shouldbe0.0")
        self.assertEqual(float_compare(project_so_3_stat['timesheet_unit_amount'],project_so_3_timesheet_sold_unit,precision_rounding=rounding),0,"ThetimesheetunitamountoftheprojectfromSO3")
        self.assertEqual(float_compare(project_so_3_stat['timesheet_cost'],project_so_3_timesheet_cost,precision_rounding=rounding),0,"ThetimesheetcostoftheprojectfromSO3")
        self.assertTrue(float_is_zero(project_so_3_stat['expense_amount_untaxed_to_invoice'],precision_rounding=rounding),"TheexpensecosttoreinvoiceoftheprojectfromSO3shouldbe0.0")
        self.assertTrue(float_is_zero(project_so_3_stat['expense_amount_untaxed_invoiced'],precision_rounding=rounding),"TheexpenseinvoicedamountoftheprojectfromSO3shouldbe0.0")
        self.assertTrue(float_is_zero(project_so_3_stat['expense_cost'],precision_rounding=rounding),"TheexpensecostoftheprojectfromSO3shouldbe0.0")
        self.assertTrue(float_is_zero(project_so_3_stat['other_revenues'],precision_rounding=rounding),"TheotherrevenuesoftheprojectfromSO3shouldbe0.0")

        #globalprojectshouldbetotallyinvoiced
        project_global_stat=self.env['project.profitability.report'].read_group([('project_id','in',self.project_global.ids)],['project_id','amount_untaxed_to_invoice','amount_untaxed_invoiced','timesheet_unit_amount','timesheet_cost','expense_cost','expense_amount_untaxed_to_invoice','expense_amount_untaxed_invoiced','other_revenues'],['project_id'])[0]
        project_global_timesheet_cost=timesheet7.amount+timesheet8.amount
        project_global_timesheet_unit=timesheet7.unit_amount+timesheet8.unit_amount
        project_global_invoiced=self.so_line_order_task.price_unit*self.so_line_order_task.product_uom_qty+self.so_line_deliver_task.price_unit*timesheet7.unit_amount
        self.assertEqual(float_compare(project_global_stat['amount_untaxed_invoiced'],project_global_invoiced,precision_rounding=rounding),0,"Theinvoicedamountoftheglobalprojectshouldbe0.0")
        self.assertTrue(float_is_zero(project_global_stat['amount_untaxed_to_invoice'],precision_rounding=rounding),"Theamounttoinvoiceofglobalprojectshouldtakethetaskin'orederedqty'andthedeliveredtimesheetsintoaccount")
        self.assertEqual(float_compare(project_global_stat['timesheet_unit_amount'],project_global_timesheet_unit,precision_rounding=rounding),0,"Thetimesheetunitamountoftheglobalprojectshouldincludealltimesheet")
        self.assertEqual(float_compare(project_global_stat['timesheet_cost'],project_global_timesheet_cost,precision_rounding=rounding),0,"Thetimesheetcostoftheglobalprojectshouldincludealltimesheet")
        self.assertTrue(float_is_zero(project_global_stat['expense_amount_untaxed_to_invoice'],precision_rounding=rounding),"Theexpensecosttoreinvoiceoftheglobalprojectshouldbe0.0")
        self.assertTrue(float_is_zero(project_global_stat['expense_amount_untaxed_invoiced'],precision_rounding=rounding),"TheexpenseinvoicedamountoftheprojectfromSO1shouldbe0.0")
        self.assertTrue(float_is_zero(project_global_stat['expense_cost'],precision_rounding=rounding),"Theexpensecostoftheglobalprojectshouldbe0.0")
        self.assertTrue(float_is_zero(project_global_stat['other_revenues'],precision_rounding=rounding),"Theotherrevenuesoftheglobalprojectshouldbe0.0")

        #simulatetheautocreationoftheSOlineforexpense,likeweconfirmavendorbill.
        so_line_expense=self.env['sale.order.line'].create({
            'name':self.product_expense.name,
            'product_id':self.product_expense.id,
            'product_uom_qty':0.0,
            'product_uom':self.product_expense.uom_id.id,
            'price_unit':self.product_expense.list_price, #reinvoiceatsalesprice
            'order_id':self.sale_order_1.id,
            'is_expense':True,
        })

        #addexpenseAAL:20%marginwhenreinvoicing
        AnalyticLine=self.env['account.analytic.line']
        expense1=AnalyticLine.create({
            'name':'expenseonproject_so_1',
            'account_id':project_so_1.analytic_account_id.id,
            'so_line':so_line_expense.id,
            'employee_id':self.employee_user.id,
            'unit_amount':4,
            'amount':4*self.product_expense.list_price*-1,
            'product_id':self.product_expense.id,
            'product_uom_id':self.product_expense.uom_id.id,
        })
        expense2=AnalyticLine.create({
            'name':'expenseonglobalproject',
            'account_id':self.project_global.analytic_account_id.id,
            'employee_id':self.employee_user.id,
            'unit_amount':2,
            'amount':2*self.product_expense.list_price*-1,
            'product_id':self.product_expense.id,
            'product_uom_id':self.product_expense.uom_id.id,
        })
        self.env['project.profitability.report'].flush()

        #deliverprojectshouldnowhaveexpensecost,andexpensetoreinvoiceasthereisastillopensalesorderlinkedtotheAA1
        project_so_1_stat=self.env['project.profitability.report'].read_group([('project_id','in',project_so_1.ids)],['project_id','amount_untaxed_to_invoice','amount_untaxed_invoiced','timesheet_unit_amount','timesheet_cost','expense_cost','expense_amount_untaxed_to_invoice','expense_amount_untaxed_invoiced','other_revenues'],['project_id'])[0]
        project_so_1_timesheet_cost=timesheet1.amount+timesheet3.amount+timesheet5.amount
        project_so_1_timesheet_sold_unit=timesheet1.unit_amount+timesheet3.unit_amount+timesheet5.unit_amount
        self.assertEqual(float_compare(project_so_1_stat['amount_untaxed_invoiced'],self.so_line_deliver_project.price_unit*project_so_1_timesheet_sold_unit,precision_rounding=rounding),0,"TheinvoicedamountoftheprojectfromSO1shouldonlyincludetimesheetlinkedtotask")
        self.assertTrue(float_is_zero(project_so_1_stat['amount_untaxed_to_invoice'],precision_rounding=rounding),"TheamounttoinvoiceoftheprojectfromSO1shouldbe0.0")
        self.assertEqual(float_compare(project_so_1_stat['timesheet_unit_amount'],project_so_1_timesheet_sold_unit,precision_rounding=rounding),0,"ThetimesheetunitamountoftheprojectfromSO1shouldincludealltimesheetinproject")
        self.assertEqual(float_compare(project_so_1_stat['timesheet_cost'],project_so_1_timesheet_cost,precision_rounding=rounding),0,"ThetimesheetcostoftheprojectfromSO1shouldincludealltimesheet")
        self.assertEqual(float_compare(project_so_1_stat['expense_amount_untaxed_to_invoice'],-1*expense1.amount,precision_rounding=rounding),0,"TheexpensecosttoreinvoiceoftheprojectfromSO1shouldbe0.0")
        self.assertTrue(float_is_zero(project_so_1_stat['expense_amount_untaxed_invoiced'],precision_rounding=rounding),"TheexpenseinvoicedamountoftheprojectfromSO1shouldbe0.0")
        self.assertEqual(float_compare(project_so_1_stat['expense_cost'],expense1.amount,precision_rounding=rounding),0,"TheexpensecostoftheprojectfromSO1shouldbe0.0")
        self.assertTrue(float_is_zero(project_so_1_stat['other_revenues'],precision_rounding=rounding),"Theotherrevenuesofthedeliverprojectshouldbe0.0")

        #orderprojectisnotimpactedbytheexpenses
        project_so_2_stat=self.env['project.profitability.report'].read_group([('project_id','in',project_so_2.ids)],['project_id','amount_untaxed_to_invoice','amount_untaxed_invoiced','timesheet_unit_amount','timesheet_cost','expense_cost','expense_amount_untaxed_to_invoice','expense_amount_untaxed_invoiced','other_revenues'],['project_id'])[0]
        project_so_2_timesheet_cost=timesheet2.amount+timesheet4.amount+timesheet6.amount
        project_so_2_timesheet_sold_unit=timesheet2.unit_amount+timesheet4.unit_amount+timesheet6.unit_amount
        self.assertEqual(float_compare(project_so_2_stat['amount_untaxed_invoiced'],self.so_line_order_project.price_unit*self.so_line_order_project.product_uom_qty,precision_rounding=rounding),0,"TheinvoicedamountshouldbetheonefromtheSOline,asweareinorderedquantity")
        self.assertTrue(float_is_zero(project_so_2_stat['amount_untaxed_to_invoice'],precision_rounding=rounding),"Theamounttoinvoiceshouldbetheone0.0,asallorderedquantityisinvoiced")
        self.assertEqual(float_compare(project_so_2_stat['timesheet_unit_amount'],project_so_2_timesheet_sold_unit,precision_rounding=rounding),0,"ThetimesheetunitamountoftheprojectfromSO2shouldincludealltimesheet")
        self.assertEqual(float_compare(project_so_2_stat['timesheet_cost'],project_so_2_timesheet_cost,precision_rounding=rounding),0,"ThetimesheetcostoftheprojectfromSO2shouldincludealltimesheet")
        self.assertTrue(float_is_zero(project_so_2_stat['expense_amount_untaxed_to_invoice'],precision_rounding=rounding),"TheexpensecosttoreinvoiceoftheprojectfromSO2shouldbe0.0")
        self.assertTrue(float_is_zero(project_so_2_stat['expense_amount_untaxed_invoiced'],precision_rounding=rounding),"TheexpenseinvoicedamountoftheprojectfromSO1shouldbe0.0")
        self.assertTrue(float_is_zero(project_so_2_stat['expense_cost'],precision_rounding=rounding),"TheexpensecostoftheprojectfromSO2shouldbe0.0")
        self.assertTrue(float_is_zero(project_so_2_stat['other_revenues'],precision_rounding=rounding),"TheotherrevenuesoftheprojectfromSO2shouldbe0.0")

        #globalprojectshouldhaveanexpense,butnotreinvoiceable
        project_global_stat=self.env['project.profitability.report'].read_group([('project_id','in',self.project_global.ids)],['project_id','amount_untaxed_to_invoice','amount_untaxed_invoiced','timesheet_unit_amount','timesheet_cost','expense_cost','expense_amount_untaxed_to_invoice','expense_amount_untaxed_invoiced','other_revenues'],['project_id'])[0]
        project_global_timesheet_cost=timesheet7.amount+timesheet8.amount
        project_global_timesheet_unit=timesheet7.unit_amount+timesheet8.unit_amount
        project_global_invoiced=self.so_line_order_task.price_unit*self.so_line_order_task.product_uom_qty+self.so_line_deliver_task.price_unit*timesheet7.unit_amount
        self.assertEqual(float_compare(project_global_stat['amount_untaxed_invoiced'],project_global_invoiced,precision_rounding=rounding),0,"Theinvoicedamountoftheglobalprojectshouldbe0.0")
        self.assertTrue(float_is_zero(project_global_stat['amount_untaxed_to_invoice'],precision_rounding=rounding),"Theamounttoinvoiceofglobalprojectshouldtakethetaskin'orederedqty'andthedeliveredtimesheetsintoaccount")
        self.assertEqual(float_compare(project_global_stat['timesheet_unit_amount'],project_global_timesheet_unit,precision_rounding=rounding),0,"Thetimesheetunitamountoftheglobalprojectshouldincludealltimesheet")
        self.assertEqual(float_compare(project_global_stat['timesheet_cost'],project_global_timesheet_cost,precision_rounding=rounding),0,"Thetimesheetcostoftheglobalprojectshouldincludealltimesheet")
        self.assertTrue(float_is_zero(project_global_stat['expense_amount_untaxed_to_invoice'],precision_rounding=rounding),"Theexpensecosttoreinvoiceoftheglobalprojectshouldbe0.0")
        self.assertTrue(float_is_zero(project_global_stat['expense_amount_untaxed_invoiced'],precision_rounding=rounding),"TheexpenseinvoicedamountoftheprojectfromSO1shouldbe0.0")
        self.assertEqual(float_compare(project_global_stat['expense_cost'],expense2.amount,precision_rounding=rounding),0,"Theexpensecostoftheglobalprojectshouldbe0.0")
        self.assertTrue(float_is_zero(project_global_stat['other_revenues'],precision_rounding=rounding),"Theotherrevenuesoftheglobalprojectshouldbe0.0")

    deftest_reversed_downpayment(self):
        #thistestsupposeeverythingisinthesamecurrencyasthecurrentone
        currency=self.env.company.currency_id
        rounding=currency.rounding

        self.sale_order_2.action_confirm()
        context={
            'active_model':'sale.order',
            'active_ids':self.sale_order_2.ids,
            'active_id':self.sale_order_2.id,
            'default_journal_id':self.company_data['default_journal_sale'].id,
            'open_invoices':True,
        }
        #Let'sdoaninvoiceforadepositof100
        downpayment=self.env['sale.advance.payment.inv'].with_context(context).create({
            'advance_payment_method':'percentage',
            'amount':10,
        })
        action_invoice=downpayment.create_invoices()
        invoice_id=action_invoice['res_id']
        invoice_downpayment=self.env['account.move'].browse(invoice_id)
        invoice_downpayment.action_post()
        posted_invoice_res_ids=[invoice_id]
        downpayment2=self.env['sale.advance.payment.inv'].with_context(context).create({
            'advance_payment_method':'percentage',
            'amount':25,
        })
        action_invoice=downpayment2.create_invoices()
        invoice_downpayment2=self.env['account.move'].search(expression.AND([action_invoice['domain'],[('id','notin',posted_invoice_res_ids)]]))
        invoice_downpayment2.action_post()
        posted_invoice_res_ids+=invoice_downpayment2.ids
        milestone_to_invoice=self.so_line_order_project.price_unit*self.so_line_order_project.qty_to_invoice
        timesheets_to_invoice=self.so_line_order_task.price_unit*self.so_line_order_task.qty_to_invoice
        total_product_price=milestone_to_invoice+timesheets_to_invoice
        credit_note_wizard=self.env['account.move.reversal'].with_context({
            'active_ids':invoice_downpayment2.ids,
            'active_id':invoice_downpayment2.id,
            'active_model':'account.move'
        }).create({
            'refund_method':'refund',
            'reason':'reasontestcreate',
        })
        action_moves=credit_note_wizard.reverse_moves()
        credit_id=action_moves['res_id']
        invoice_credit=self.env['account.move'].browse(credit_id)
        invoice_credit.action_post()
        posted_invoice_res_ids+=invoice_credit.ids
        project_so_2=self.so_line_order_project.project_id
        task_so_2=self.so_line_order_project.task_id
        task_in_global_2=self.so_line_order_task.task_id

        self.env['project.profitability.report'].flush()
        project_so_2_stat=self.env['project.profitability.report'].read_group(
            [('project_id','in',project_so_2.ids)],
            ['project_id','amount_untaxed_to_invoice','amount_untaxed_invoiced','timesheet_unit_amount','timesheet_cost','expense_cost','expense_amount_untaxed_to_invoice','expense_amount_untaxed_invoiced','other_revenues'],
            ['project_id']
        )[0]
        self.assertEqual(float_compare(project_so_2_stat['amount_untaxed_invoiced'],0.1*total_product_price,precision_rounding=rounding),0,
                         "Theinvoicedamountistheamountofdownpaymentsnotreversed")
        self.assertEqual(float_compare(project_so_2_stat['amount_untaxed_to_invoice'],milestone_to_invoice-0.1*total_product_price,precision_rounding=rounding),0,
                         "Theamounttoinvoiceisthemilestoneproductminusthedownpaymentnotreversed")
        self.assertTrue(float_is_zero(project_so_2_stat['timesheet_unit_amount'],precision_rounding=rounding),
                        "ThetimesheetunitamountoftheprojectfromSO2is0")
        self.assertTrue(float_is_zero(project_so_2_stat['timesheet_cost'],precision_rounding=rounding),
                        "ThetimesheetcostoftheprojectfromSO2is0")
        self.assertTrue(float_is_zero(project_so_2_stat['expense_amount_untaxed_to_invoice'],precision_rounding=rounding),
                        "TheexpensecosttoreinvoiceoftheprojectfromSO2shouldbe0.0")
        self.assertTrue(float_is_zero(project_so_2_stat['expense_amount_untaxed_invoiced'],precision_rounding=rounding),
                        "TheexpenseinvoicedamountoftheprojectfromSO2shouldbe0.0")
        self.assertTrue(float_is_zero(project_so_2_stat['expense_cost'],precision_rounding=rounding),
                        "TheexpensecostoftheprojectfromSO2shouldbe0.0")
        self.assertTrue(float_is_zero(project_so_2_stat['other_revenues'],precision_rounding=rounding),
                        "TheotherrevenuesoftheprojectfromSO2shouldbe0.0")

        #loggedsometimesheets:onprojectonly,thenontaskswithdifferentemployees
        timesheet2=self._log_timesheet_user(project_so_2,2)
        timesheet4=self._log_timesheet_user(project_so_2,3,task_so_2)
        timesheet6=self._log_timesheet_manager(project_so_2,2,task_so_2)
        timesheet8=self._log_timesheet_manager(self.project_global,3,task_in_global_2)

        #simulatetheautocreationoftheSOlineforexpense,likeweconfirmavendorbill.
        so_line_expense=self.env['sale.order.line'].create({
            'name':self.product_expense.name,
            'product_id':self.product_expense.id,
            'product_uom_qty':0.0,
            'product_uom':self.product_expense.uom_id.id,
            'price_unit':self.product_expense.list_price, #reinvoiceatsalesprice
            'order_id':self.sale_order_2.id,
            'is_expense':True,
        })

        expense1=self.env['account.analytic.line'].create({
            'name':'expenseonproject_so_2',
            'account_id':project_so_2.analytic_account_id.id,
            'so_line':so_line_expense.id,
            'employee_id':self.employee_user.id,
            'unit_amount':4,
            'amount':4*self.product_expense.list_price*-1,
            'product_id':self.product_expense.id,
            'product_uom_id':self.product_expense.uom_id.id,
        })

        self.env['project.profitability.report'].flush()

        project_so_2_stat=self.env['project.profitability.report'].read_group(
            [('project_id','in',project_so_2.ids)],
            ['project_id','amount_untaxed_to_invoice','amount_untaxed_invoiced','timesheet_unit_amount','timesheet_cost','expense_cost','expense_amount_untaxed_to_invoice','expense_amount_untaxed_invoiced','other_revenues'],
            ['project_id']
        )[0]
        project_so_2_timesheet_cost=timesheet2.amount+timesheet4.amount+timesheet6.amount
        project_so_2_timesheet_sold_unit=timesheet2.unit_amount+timesheet4.unit_amount+timesheet6.unit_amount
        self.assertEqual(float_compare(project_so_2_stat['amount_untaxed_invoiced'],0.1*total_product_price,precision_rounding=rounding),0,
                         "TheinvoicedamountoftheprojectfromSO2shouldonlyincludedownpaymentnotreversed")
        self.assertEqual(float_compare(project_so_2_stat['amount_untaxed_to_invoice'],milestone_to_invoice-0.1*total_product_price,precision_rounding=rounding),0,
                         "TheamounttoinvoiceoftheprojectfromSO2shouldincludethemilestonetoinvoiceminusthedownpayment")
        self.assertEqual(float_compare(project_so_2_stat['timesheet_unit_amount'],project_so_2_timesheet_sold_unit,precision_rounding=rounding),0,
                         "ThetimesheetunitamountoftheprojectfromSO2shouldincludealltimesheetinproject")
        self.assertEqual(float_compare(project_so_2_stat['timesheet_cost'],project_so_2_timesheet_cost,precision_rounding=rounding),0,
                         "ThetimesheetcostoftheprojectfromSO2shouldincludealltimesheet")
        self.assertEqual(float_compare(project_so_2_stat['expense_amount_untaxed_to_invoice'],-expense1.amount,precision_rounding=rounding),0,
                         "TheexpensecosttoreinvoiceoftheprojectfromSO2shouldbetheexpenseamount")
        self.assertTrue(float_is_zero(project_so_2_stat['expense_amount_untaxed_invoiced'],precision_rounding=rounding),
                        "TheexpenseinvoicedamountoftheprojectfromSO2shouldbe0.0")
        self.assertEqual(float_compare(project_so_2_stat['expense_cost'],expense1.amount,precision_rounding=rounding),0,
                         "TheexpensecostoftheprojectfromSO1shouldbeexpenseamount")
        self.assertTrue(float_is_zero(project_so_2_stat['other_revenues'],precision_rounding=rounding),
                        "TheotherrevenuesoftheprojectfromSO2shouldbe0.0")

        #invoicetheSalesOrderSO2
        context={
            "active_model":'sale.order',
            "active_ids":self.sale_order_2.ids,
            "active_id":self.sale_order_2.id,
            'open_invoices':True,
            'mail_notrack':True,
        }
        payment=self.env['sale.advance.payment.inv'].with_context(mail_notrack=True).create({
            'advance_payment_method':'delivered',
        })
        action_invoice=payment.with_context(context).create_invoices()
        invoice_payment=self.env['account.move'].search(expression.AND([action_invoice['domain'],[('id','notin',posted_invoice_res_ids)]]))
        invoice_payment.action_post()
        self.env['project.profitability.report'].flush()

        project_so_2_stat=self.env['project.profitability.report'].read_group(
            [('project_id','in',project_so_2.ids)],
            ['project_id','amount_untaxed_to_invoice','amount_untaxed_invoiced','timesheet_unit_amount','timesheet_cost','expense_cost','expense_amount_untaxed_to_invoice','expense_amount_untaxed_invoiced','other_revenues'],
            ['project_id']
        )[0]
        self.assertEqual(float_compare(project_so_2_stat['amount_untaxed_invoiced'],milestone_to_invoice,precision_rounding=rounding),0,
                         "TheinvoicedamountoftheprojectfromSO2shouldonlyincludetimesheetlinkedtotask")
        self.assertTrue(float_is_zero(project_so_2_stat['amount_untaxed_to_invoice'],precision_rounding=rounding),
                        "TheamounttoinvoiceoftheprojectfromSO2shouldbe0.0")
        self.assertEqual(float_compare(project_so_2_stat['timesheet_unit_amount'],project_so_2_timesheet_sold_unit,precision_rounding=rounding),0,
                         "ThetimesheetunitamountoftheprojectfromSO2shouldincludealltimesheetinproject")
        self.assertEqual(float_compare(project_so_2_stat['timesheet_cost'],project_so_2_timesheet_cost,precision_rounding=rounding),0,
                         "ThetimesheetcostoftheprojectfromSO2shouldincludealltimesheet")
        self.assertTrue(float_is_zero(project_so_2_stat['expense_amount_untaxed_to_invoice'],precision_rounding=rounding),
                        "TheexpensetoinvoiceamountoftheprojectfromSO2shouldbe0.0")
        self.assertEqual(float_compare(project_so_2_stat['expense_amount_untaxed_invoiced'],-1*expense1.amount,precision_rounding=rounding),0,
                         "TheexpensecostreinvoicedoftheprojectfromSO2shouldbetheexpenseamount")
        self.assertEqual(float_compare(project_so_2_stat['expense_cost'],expense1.amount,precision_rounding=rounding),0,
                         "TheexpensecostoftheprojectfromSO2shouldbetheexpenseamount")
        self.assertTrue(float_is_zero(project_so_2_stat['other_revenues'],precision_rounding=rounding),
                        "TheotherrevenuesoftheprojectfromSO2shouldbe0.0")

        credit_note_wizard=self.env['account.move.reversal'].with_context({
            'active_ids':invoice_payment.ids,
            'active_id':invoice_payment.id,
            'active_model':'account.move'
        }).create({
            'refund_method':'refund',
            'reason':'reasontestcreate',
        })
        action_moves=credit_note_wizard.reverse_moves()
        credit_id=action_moves['res_id']
        invoice_credit=self.env['account.move'].browse(credit_id)
        invoice_credit.action_post()
        self.env['project.profitability.report'].flush()

        project_so_2_stat=self.env['project.profitability.report'].read_group(
            [('project_id','in',project_so_2.ids)],
            ['project_id','amount_untaxed_to_invoice','amount_untaxed_invoiced','timesheet_unit_amount','timesheet_cost','expense_cost','expense_amount_untaxed_to_invoice','expense_amount_untaxed_invoiced','other_revenues'],
            ['project_id']
        )[0]
        self.assertEqual(float_compare(project_so_2_stat['amount_untaxed_invoiced'],0.1*total_product_price,precision_rounding=rounding),0,
                         "TheinvoicedamountoftheprojectfromSO2shouldonlyincludedownpaymentnotreversed")
        self.assertEqual(float_compare(project_so_2_stat['amount_untaxed_to_invoice'],milestone_to_invoice-0.1*total_product_price,precision_rounding=rounding),0,
                         "TheamounttoinvoiceoftheprojectfromSO2shouldincludethemilestonetoinvoiceminusthedownpayment")
        self.assertEqual(float_compare(project_so_2_stat['timesheet_unit_amount'],project_so_2_timesheet_sold_unit,precision_rounding=rounding),0,
                         "ThetimesheetunitamountoftheprojectfromSO2shouldincludealltimesheetinproject")
        self.assertEqual(float_compare(project_so_2_stat['timesheet_cost'],project_so_2_timesheet_cost,precision_rounding=rounding),0,
                         "ThetimesheetcostoftheprojectfromSO2shouldincludealltimesheet")
        self.assertEqual(float_compare(project_so_2_stat['expense_amount_untaxed_to_invoice'],-expense1.amount,precision_rounding=rounding),0,
                         "TheexpensecosttoreinvoiceoftheprojectfromSO2shouldbetheexpenseamount")
        self.assertTrue(float_is_zero(project_so_2_stat['expense_amount_untaxed_invoiced'],precision_rounding=rounding),
                        "TheexpenseinvoicedamountoftheprojectfromSO2shouldbe0.0")
        self.assertEqual(float_compare(project_so_2_stat['expense_cost'],expense1.amount,precision_rounding=rounding),0,
                         "TheexpensecostoftheprojectfromSO1shouldbeexpenseamount")
        self.assertTrue(float_is_zero(project_so_2_stat['other_revenues'],precision_rounding=rounding),
                        "TheotherrevenuesoftheprojectfromSO2shouldbe0.0")

    deftest_milestone_no_tracking(self):
        #thistestsupposeeverythingisinthesamecurrencyasthecurrentone
        currency=self.env.company.currency_id
        rounding=currency.rounding
        so_line_deliver_no_task=self.env['sale.order.line'].create({
            'name':self.product_delivery_manual1.name,
            'product_id':self.product_delivery_manual1.id,
            'product_uom_qty':50,
            'product_uom':self.product_delivery_manual1.uom_id.id,
            'price_unit':self.product_delivery_manual1.list_price,
            'order_id':self.sale_order_2.id,
        })
        so_line_deliver_no_task.write({'qty_delivered':1.0})
        self.sale_order_2.action_confirm()
        milestone_to_invoice=self.so_line_order_project.price_unit*self.so_line_order_project.qty_to_invoice
        milestone_no_task=so_line_deliver_no_task.price_unit*so_line_deliver_no_task.qty_to_invoice
        self.env['project.profitability.report'].flush()

        project_so_2=self.so_line_order_project.project_id
        project_so_2_stat=self.env['project.profitability.report'].read_group(
            [('project_id','in',project_so_2.ids)],
            ['project_id','amount_untaxed_to_invoice','amount_untaxed_invoiced','timesheet_unit_amount','timesheet_cost','expense_cost','expense_amount_untaxed_to_invoice','expense_amount_untaxed_invoiced','other_revenues'],
            ['project_id']
        )[0]
        self.assertTrue(float_is_zero(project_so_2_stat['amount_untaxed_invoiced'],precision_rounding=rounding),
                         "TheinvoicedamountoftheprojectfromSO2shouldbe0.0")
        self.assertEqual(float_compare(project_so_2_stat['amount_untaxed_to_invoice'],milestone_to_invoice+milestone_no_task,precision_rounding=rounding),0,
                         "TheamounttoinvoiceoftheprojectfromSO2shouldincludethemilestonetoinvoice")
        self.assertTrue(float_is_zero(project_so_2_stat['timesheet_unit_amount'],precision_rounding=rounding),
                        "ThetimesheetunitamountoftheprojectfromSO2shouldbe0.0")
        self.assertTrue(float_is_zero(project_so_2_stat['timesheet_cost'],precision_rounding=rounding),
                        "ThetimesheetcostoftheprojectfromSO2shouldbe0.0")
        self.assertTrue(float_is_zero(project_so_2_stat['expense_amount_untaxed_to_invoice'],precision_rounding=rounding),
                        "TheexpensecosttoreinvoiceoftheprojectfromSO2shouldbe0.0")
        self.assertTrue(float_is_zero(project_so_2_stat['expense_amount_untaxed_invoiced'],precision_rounding=rounding),
                        "TheexpenseinvoicedamountoftheprojectfromSO2shouldbe0.0")
        self.assertTrue(float_is_zero(project_so_2_stat['expense_cost'],precision_rounding=rounding),
                        "TheexpensecostoftheprojectfromSO2shouldbe0.0")
        self.assertTrue(float_is_zero(project_so_2_stat['other_revenues'],precision_rounding=rounding),
                        "TheotherrevenuesoftheprojectfromSO2shouldbe0.0")

        task_using_milestone_not_tracked=self.env['project.task'].create({
            'name':'Taskwithmilestonenottracked',
            'project_id':project_so_2.id,
            'partner_id':project_so_2.partner_id.id,
            'sale_line_id':so_line_deliver_no_task.id,
        })
        self.env['project.profitability.report'].flush()
        project_so_2_stat=self.env['project.profitability.report'].read_group(
            [('project_id','in',project_so_2.ids)],
            ['project_id','amount_untaxed_to_invoice','amount_untaxed_invoiced','timesheet_unit_amount','timesheet_cost','expense_cost','expense_amount_untaxed_to_invoice','expense_amount_untaxed_invoiced','other_revenues'],
            ['project_id']
        )[0]
        self.assertTrue(float_is_zero(project_so_2_stat['amount_untaxed_invoiced'],precision_rounding=rounding),
                        "TheinvoicedamountoftheprojectfromSO2shouldbe0.0")
        self.assertEqual(float_compare(project_so_2_stat['amount_untaxed_to_invoice'],milestone_to_invoice+milestone_no_task,precision_rounding=rounding),0,
                         "TheamounttoinvoiceoftheprojectfromSO2shouldincludethemilestonetoinvoicelinkedtotheprojectorproject'stask")
        self.assertTrue(float_is_zero(project_so_2_stat['timesheet_unit_amount'],precision_rounding=rounding),
                        "ThetimesheetunitamountoftheprojectfromSO2shouldbe0.0")
        self.assertTrue(float_is_zero(project_so_2_stat['timesheet_cost'],precision_rounding=rounding),
                        "ThetimesheetcostoftheprojectfromSO2shouldbe0.0")
        self.assertTrue(float_is_zero(project_so_2_stat['expense_amount_untaxed_to_invoice'],precision_rounding=rounding),
                        "TheexpensecosttoreinvoiceoftheprojectfromSO2shouldbe0.0")
        self.assertTrue(float_is_zero(project_so_2_stat['expense_amount_untaxed_invoiced'],precision_rounding=rounding),
                        "TheexpenseinvoicedamountoftheprojectfromSO2shouldbe0.0")
        self.assertTrue(float_is_zero(project_so_2_stat['expense_cost'],precision_rounding=rounding),
                        "TheexpensecostoftheprojectfromSO2shouldbe0.0")
        self.assertTrue(float_is_zero(project_so_2_stat['other_revenues'],precision_rounding=rounding),
                        "TheotherrevenuesoftheprojectfromSO2shouldbe0.0")

        timesheet=self._log_timesheet_user(project_so_2,3,task_using_milestone_not_tracked)
        self.env['project.profitability.report'].flush()
        project_so_2_stat=self.env['project.profitability.report'].read_group(
            [('project_id','in',project_so_2.ids)],
            ['project_id','amount_untaxed_to_invoice','amount_untaxed_invoiced','timesheet_unit_amount','timesheet_cost','expense_cost','expense_amount_untaxed_to_invoice','expense_amount_untaxed_invoiced','other_revenues'],
            ['project_id']
        )[0]
        project_so_2_timesheet_cost=timesheet.amount
        project_so_2_timesheet_sold_unit=timesheet.unit_amount
        self.assertTrue(float_is_zero(project_so_2_stat['amount_untaxed_invoiced'],precision_rounding=rounding),
                        "TheinvoicedamountoftheprojectfromSO2shouldonlyincludedownpaymentnotreversed")
        self.assertEqual(float_compare(project_so_2_stat['amount_untaxed_to_invoice'],milestone_to_invoice+milestone_no_task,precision_rounding=rounding),0,
                         "TheamounttoinvoiceoftheprojectfromSO2shouldincludethemilestonetoinvoiceminusthedownpayment")
        self.assertEqual(float_compare(project_so_2_stat['timesheet_unit_amount'],project_so_2_timesheet_sold_unit,precision_rounding=rounding),0,
                         "ThetimesheetunitamountoftheprojectfromSO2shouldincludealltimesheetinproject")
        self.assertEqual(float_compare(project_so_2_stat['timesheet_cost'],project_so_2_timesheet_cost,precision_rounding=rounding),0,
                         "ThetimesheetcostoftheprojectfromSO2shouldincludealltimesheet")
        self.assertTrue(float_is_zero(project_so_2_stat['expense_amount_untaxed_to_invoice'],precision_rounding=rounding),
                        "TheexpensecosttoreinvoiceoftheprojectfromSO2shouldbe0.0")
        self.assertTrue(float_is_zero(project_so_2_stat['expense_amount_untaxed_invoiced'],precision_rounding=rounding),
                        "TheexpenseinvoicedamountoftheprojectfromSO2shouldbe0.0")
        self.assertTrue(float_is_zero(project_so_2_stat['expense_cost'],precision_rounding=rounding),
                        "TheexpensecostoftheprojectfromSO2shouldbe0.0")
        self.assertTrue(float_is_zero(project_so_2_stat['other_revenues'],precision_rounding=rounding),
                        "TheotherrevenuesoftheprojectfromSO2shouldbe0.0")
        #invoicetheSalesOrderSO2
        context={
            "active_model":'sale.order',
            "active_ids":self.sale_order_2.ids,
            "active_id":self.sale_order_2.id,
            'open_invoices':True,
            'mail_notrack':True,
        }
        payment=self.env['sale.advance.payment.inv'].with_context(mail_notrack=True).create({
            'advance_payment_method':'delivered',
        })
        action_invoice=payment.with_context(context).create_invoices()
        invoice_payment=self.env['account.move'].browse(action_invoice['res_id'])
        invoice_payment.action_post()
        self.env['project.profitability.report'].flush()
        project_so_2_stat=self.env['project.profitability.report'].read_group(
            [('project_id','in',project_so_2.ids)],
            ['project_id','amount_untaxed_to_invoice','amount_untaxed_invoiced','timesheet_unit_amount','timesheet_cost','expense_cost','expense_amount_untaxed_to_invoice','expense_amount_untaxed_invoiced','other_revenues'],
            ['project_id']
        )[0]
        self.assertEqual(float_compare(project_so_2_stat['amount_untaxed_invoiced'],milestone_to_invoice+milestone_no_task,precision_rounding=rounding),0,
                         "TheinvoicedamountoftheprojectfromSO2shouldincludethemilestoneinvoiced")
        self.assertTrue(float_is_zero(project_so_2_stat['amount_untaxed_to_invoice'],precision_rounding=rounding),
                        "TheamounttoinvoiceoftheprojectfromSO2shouldincludethemilestonetoinvoice")
        self.assertEqual(float_compare(project_so_2_stat['timesheet_unit_amount'],project_so_2_timesheet_sold_unit,precision_rounding=rounding),0,
                         "ThetimesheetunitamountoftheprojectfromSO2shouldincludealltimesheetinproject")
        self.assertEqual(float_compare(project_so_2_stat['timesheet_cost'],project_so_2_timesheet_cost,precision_rounding=rounding),0,
                         "ThetimesheetcostoftheprojectfromSO2shouldincludealltimesheet")
        self.assertTrue(float_is_zero(project_so_2_stat['expense_amount_untaxed_to_invoice'],precision_rounding=rounding),
                        "TheexpensecosttoreinvoiceoftheprojectfromSO2shouldbe0.0")
        self.assertTrue(float_is_zero(project_so_2_stat['expense_amount_untaxed_invoiced'],precision_rounding=rounding),
                        "TheexpenseinvoicedamountoftheprojectfromSO2shouldbe0.0")
        self.assertTrue(float_is_zero(project_so_2_stat['expense_cost'],precision_rounding=rounding),
                        "TheexpensecostoftheprojectfromSO2shouldbe0.0")
        self.assertTrue(float_is_zero(project_so_2_stat['other_revenues'],precision_rounding=rounding),
                        "TheotherrevenuesoftheprojectfromSO2shouldbe0.0")

    deftest_profitability_credit_note_bill(self):
        """Testwhethertheprofitabilityiszeroedbycreditnoteonavendorbill."""
        ProjectProfitabilityReport=self.env['project.profitability.report']
        analytic_account=self.project_global.analytic_account_id
        product=self.env['product.product'].with_context(mail_notrack=True,mail_create_nolog=True).create({
            'name':"Product",
            'standard_price':100.0,
            'list_price':100.0,
            'taxes_id':False,
        })
        test_bill=self.env['account.move'].create({
            'move_type':'in_invoice',
            'currency_id':self.env.user.company_id.currency_id,
            'partner_id':self.partner_a,
            'invoice_date':'2021-01-01',
            'invoice_line_ids':[(0,0,{
                'quantity':1,
                'product_id':product.id,
                'price_unit':100.0,
                'analytic_account_id':analytic_account.id,
            })]
        })
        test_bill.action_post()
        ProjectProfitabilityReport.flush()

        project_stat=ProjectProfitabilityReport.read_group([('project_id','in',self.project_global.ids)],['project_id','amount_untaxed_to_invoice','amount_untaxed_invoiced','timesheet_unit_amount','timesheet_cost','expense_cost','expense_amount_untaxed_to_invoice','expense_amount_untaxed_invoiced','other_revenues'],['project_id'])[0]
        self.assertAlmostEqual(project_stat['amount_untaxed_invoiced'],0,msg="Theinvoicedamountoftheprojectshouldbezero,beforecreditnote.")
        self.assertAlmostEqual(project_stat['amount_untaxed_to_invoice'],0,msg="Theamounttoinvoiceoftheprojectshouldbezero,beforecreditnote.")
        self.assertAlmostEqual(project_stat['timesheet_unit_amount'],0,msg="Thetimesheetunitamountoftheprojectshouldbezero,beforecreditnote.")
        self.assertAlmostEqual(project_stat['timesheet_cost'],0,msg="Thetimesheetcostoftheprojectshouldbezero,beforecreditnote.")
        self.assertAlmostEqual(project_stat['expense_amount_untaxed_to_invoice'],0,msg="Theexpensecosttoreinvoiceoftheprojectshouldbezero,beforecreditnote.")
        self.assertAlmostEqual(project_stat['expense_amount_untaxed_invoiced'],0,msg="Theexpenseinvoicedamountoftheprojectshouldbezero,beforecreditnote.")
        self.assertAlmostEqual(project_stat['expense_cost'],test_bill.amount_total_signed,msg="Theexpensecostoftheprojectshouldbeequaltothetheinvoicelineprice,beforecreditnote.")
        self.assertAlmostEqual(project_stat['other_revenues'],0,msg="Theotherrevenuesoftheprojectshouldbezero,beforecreditnote")

        credit_note_wizard=self.env['account.move.reversal'].with_context({
            'active_model':'account.move',
            'active_ids':test_bill.ids,
            'active_id':test_bill.id,
        }).create({
            'refund_method':'cancel',
            'reason':'noreason',
        })
        credit_note_wizard.reverse_moves()
        ProjectProfitabilityReport.flush()

        project_stat=ProjectProfitabilityReport.read_group([('project_id','in',self.project_global.ids)],['project_id','amount_untaxed_to_invoice','amount_untaxed_invoiced','timesheet_unit_amount','timesheet_cost','expense_cost','expense_amount_untaxed_to_invoice','expense_amount_untaxed_invoiced','other_revenues'],['project_id'])[0]
        self.assertAlmostEqual(project_stat['amount_untaxed_invoiced'],0,msg="Theinvoicedamountoftheprojectshouldbezero,aftercreditnote.")
        self.assertAlmostEqual(project_stat['amount_untaxed_to_invoice'],0,msg="Theamounttoinvoiceoftheprojectshouldbezero,aftercreditnote.")
        self.assertAlmostEqual(project_stat['timesheet_unit_amount'],0,msg="Thetimesheetunitamountoftheprojectshouldbezero,aftercreditnote.")
        self.assertAlmostEqual(project_stat['timesheet_cost'],0,msg="Thetimesheetcostoftheprojectshouldbezero,aftercreditnote.")
        self.assertAlmostEqual(project_stat['expense_amount_untaxed_to_invoice'],0,msg="Theexpensecosttoreinvoiceoftheprojectshouldbezero,aftercreditnote.")
        self.assertAlmostEqual(project_stat['expense_amount_untaxed_invoiced'],0,msg="Theexpenseinvoicedamountoftheprojectshouldbezero,aftercreditnote.")
        self.assertAlmostEqual(project_stat['expense_cost'],0,msg="Theexpensecostoftheprojectshouldbezero,asitisbalancedbycreditnote.")
        self.assertAlmostEqual(project_stat['other_revenues'],0,msg="Theotherrevenues(creditnote)oftheprojectshouldbezero(nottakenintoaccount),aftercreditnote.")

    deftest_profitability_credit_note_invoice(self):
        """Testwhethertheprofitabilitydoesn'tchangewithcustomerinvoiceoritscreditnote."""
        ProjectProfitabilityReport=self.env['project.profitability.report']
        analytic_account=self.project_global.analytic_account_id
        product=self.env['product.product'].with_context(mail_notrack=True,mail_create_nolog=True).create({
            'name':"Product",
            'standard_price':100.0,
            'list_price':100.0,
            'taxes_id':False,
        })
        test_invoice=self.env['account.move'].create({
            'move_type':'out_invoice',
            'currency_id':self.env.user.company_id.currency_id,
            'partner_id':self.partner_a,
            'invoice_date':'2021-01-01',
            'invoice_line_ids':[(0,0,{
                'quantity':1,
                'product_id':product.id,
                'price_unit':100.0,
                'analytic_account_id':analytic_account.id,
            })]
        })
        test_invoice.action_post()
        ProjectProfitabilityReport.flush()

        project_stat=ProjectProfitabilityReport.read_group([('project_id','in',self.project_global.ids)],['project_id','amount_untaxed_to_invoice','amount_untaxed_invoiced','timesheet_unit_amount','timesheet_cost','expense_cost','expense_amount_untaxed_to_invoice','expense_amount_untaxed_invoiced','other_revenues'],['project_id'])[0]
        self.assertAlmostEqual(project_stat['amount_untaxed_invoiced'],0,msg="Theinvoicedamountoftheprojectshouldbezero,beforecreditnote.")
        self.assertAlmostEqual(project_stat['amount_untaxed_to_invoice'],0,msg="Theamounttoinvoiceoftheprojectshouldbezero,beforecreditnote.")
        self.assertAlmostEqual(project_stat['timesheet_unit_amount'],0,msg="Thetimesheetunitamountoftheprojectshouldbezero,beforecreditnote.")
        self.assertAlmostEqual(project_stat['timesheet_cost'],0,msg="Thetimesheetcostoftheprojectshouldbezero,beforecreditnote.")
        self.assertAlmostEqual(project_stat['expense_amount_untaxed_to_invoice'],0,msg="Theexpensecosttoreinvoiceoftheprojectshouldbezero,beforecreditnote.")
        self.assertAlmostEqual(project_stat['expense_amount_untaxed_invoiced'],0,msg="Theexpenseinvoicedamountoftheprojectshouldbezero,beforecreditnote.")
        self.assertAlmostEqual(project_stat['expense_cost'],0,msg="Theexpensecostoftheprojectshouldbezero,beforecreditnote.")
        self.assertAlmostEqual(project_stat['other_revenues'],test_invoice.amount_total_signed,msg="Theotherrevenuesoftheprojectshouldbeequaltothetheinvoicelineprice,aftercreditnote.")

        credit_note_wizard=self.env['account.move.reversal'].with_context({
            'active_model':'account.move',
            'active_ids':test_invoice.ids,
            'active_id':test_invoice.id,
        }).create({
            'refund_method':'cancel',
            'reason':'noreason',
        })
        credit_note_wizard.reverse_moves()
        ProjectProfitabilityReport.flush()

        project_stat=ProjectProfitabilityReport.read_group([('project_id','in',self.project_global.ids)],['project_id','amount_untaxed_to_invoice','amount_untaxed_invoiced','timesheet_unit_amount','timesheet_cost','expense_cost','expense_amount_untaxed_to_invoice','expense_amount_untaxed_invoiced','other_revenues'],['project_id'])[0]
        self.assertAlmostEqual(project_stat['amount_untaxed_invoiced'],0,msg="Theinvoicedamountoftheprojectshouldbezero,aftercreditnote.")
        self.assertAlmostEqual(project_stat['amount_untaxed_to_invoice'],0,msg="Theamounttoinvoiceoftheprojectshouldbezero,aftercreditnote.")
        self.assertAlmostEqual(project_stat['timesheet_unit_amount'],0,msg="Thetimesheetunitamountoftheprojectshouldbezero,aftercreditnote.")
        self.assertAlmostEqual(project_stat['timesheet_cost'],0,msg="Thetimesheetcostoftheprojectshouldbezero,aftercreditnote.")
        self.assertAlmostEqual(project_stat['expense_amount_untaxed_to_invoice'],0,msg="Theexpensecosttoreinvoiceoftheprojectshouldbezero,aftercreditnote.")
        self.assertAlmostEqual(project_stat['expense_amount_untaxed_invoiced'],0,msg="Theexpenseinvoicedamountoftheprojectshouldbezero,aftercreditnote.")
        self.assertAlmostEqual(project_stat['expense_cost'],0,msg="Theexpensecosts(creditnote)oftheprojectshouldbezero(nottakenintoaccount),aftercreditnote.")
        self.assertAlmostEqual(project_stat['other_revenues'],0,msg="Theotherrevenuesoftheprojectshouldbezero,asitisbalancedbycreditnote.")

    deftest_profitability_partial_refund_invoice(self):
        ProjectProfitabilityReport=self.env['project.profitability.report']
        analytic_account=self.project_global.analytic_account_id
        product=self.env['product.product'].with_context(mail_notrack=True,mail_create_nolog=True).create({
            'name':"Product",
            'standard_price':100.0,
            'list_price':100.0,
            'taxes_id':False,
        })
        test_invoice=self.env['account.move'].create({
            'move_type':'out_invoice',
            'currency_id':self.env.user.company_id.currency_id,
            'partner_id':self.partner_a,
            'invoice_date':'2021-01-01',
            'invoice_line_ids':[(0,0,{
                'quantity':2,
                'product_id':product.id,
                'price_unit':100.0,
                'analytic_account_id':analytic_account.id,
            })]
        })
        test_invoice.action_post()
        ProjectProfitabilityReport.flush()

        project_stat=ProjectProfitabilityReport.read_group([('project_id','in',self.project_global.ids)],['project_id','amount_untaxed_to_invoice','amount_untaxed_invoiced','timesheet_unit_amount','timesheet_cost','expense_cost','expense_amount_untaxed_to_invoice','expense_amount_untaxed_invoiced','other_revenues'],['project_id'])[0]
        self.assertAlmostEqual(project_stat['amount_untaxed_invoiced'],0,msg="Theinvoicedamountoftheprojectshouldbezero,beforecreditnote.")
        self.assertAlmostEqual(project_stat['amount_untaxed_to_invoice'],0,msg="Theamounttoinvoiceoftheprojectshouldbezero,beforecreditnote.")
        self.assertAlmostEqual(project_stat['timesheet_unit_amount'],0,msg="Thetimesheetunitamountoftheprojectshouldbezero,beforecreditnote.")
        self.assertAlmostEqual(project_stat['timesheet_cost'],0,msg="Thetimesheetcostoftheprojectshouldbezero,beforecreditnote.")
        self.assertAlmostEqual(project_stat['expense_amount_untaxed_to_invoice'],0,msg="Theexpensecosttoreinvoiceoftheprojectshouldbezero,beforecreditnote.")
        self.assertAlmostEqual(project_stat['expense_amount_untaxed_invoiced'],0,msg="Theexpenseinvoicedamountoftheprojectshouldbezero,beforecreditnote.")
        self.assertAlmostEqual(project_stat['expense_cost'],0,msg="Theexpensecostoftheprojectshouldbezero,beforecreditnote.")
        self.assertAlmostEqual(project_stat['other_revenues'],test_invoice.amount_total_signed,msg="Theotherrevenuesoftheprojectshouldbeequaltothetheinvoicelineprice,aftercreditnote.")

        refund_note_wizard=self.env['account.move.reversal'].with_context({
            'active_model':'account.move',
            'active_ids':test_invoice.ids,
            'active_id':test_invoice.id,
        }).create({
            'refund_method':'refund',
            'reason':'noreason',
        })
        refund=self.env['account.move'].browse(refund_note_wizard.reverse_moves()["res_id"])

        move_form=Form(refund)
        withmove_form.invoice_line_ids.edit(0)asline_form:
            line_form.quantity=1
        refund=move_form.save()
        refund.action_post()
        ProjectProfitabilityReport.flush()

        project_stat=ProjectProfitabilityReport.read_group([('project_id','in',self.project_global.ids)],['project_id','amount_untaxed_to_invoice','amount_untaxed_invoiced','timesheet_unit_amount','timesheet_cost','expense_cost','expense_amount_untaxed_to_invoice','expense_amount_untaxed_invoiced','other_revenues'],['project_id'])[0]
        self.assertAlmostEqual(project_stat['amount_untaxed_invoiced'],0,msg="Theinvoicedamountoftheprojectshouldbezero,aftercreditnote.")
        self.assertAlmostEqual(project_stat['amount_untaxed_to_invoice'],0,msg="Theamounttoinvoiceoftheprojectshouldbezero,aftercreditnote.")
        self.assertAlmostEqual(project_stat['timesheet_unit_amount'],0,msg="Thetimesheetunitamountoftheprojectshouldbezero,aftercreditnote.")
        self.assertAlmostEqual(project_stat['timesheet_cost'],0,msg="Thetimesheetcostoftheprojectshouldbezero,aftercreditnote.")
        self.assertAlmostEqual(project_stat['expense_amount_untaxed_to_invoice'],0,msg="Theexpensecosttoreinvoiceoftheprojectshouldbezero,aftercreditnote.")
        self.assertAlmostEqual(project_stat['expense_amount_untaxed_invoiced'],0,msg="Theexpenseinvoicedamountoftheprojectshouldbezero,aftercreditnote.")
        self.assertAlmostEqual(project_stat['expense_cost'],0,msg="Theexpensecosts(creditnote)oftheprojectshouldbezero(nottakenintoaccount),aftercreditnote.")
        self.assertAlmostEqual(project_stat['other_revenues'],test_invoice.amount_total_signed+refund.amount_total_signed,msg="Theotherrevenuesoftheprojectshouldbezero,asitisbalancedbycreditnote.")


    deftest_profitability_partial_refund_vendor_bill(self):
        ProjectProfitabilityReport=self.env['project.profitability.report']
        analytic_account=self.project_global.analytic_account_id
        product=self.env['product.product'].with_context(mail_notrack=True,mail_create_nolog=True).create({
            'name':"Product",
            'standard_price':100.0,
            'list_price':100.0,
            'taxes_id':False,
        })
        test_invoice=self.env['account.move'].create({
            'move_type':'in_invoice',
            'currency_id':self.env.user.company_id.currency_id,
            'partner_id':self.partner_a,
            'invoice_date':'2021-01-01',
            'invoice_line_ids':[(0,0,{
                'quantity':2,
                'product_id':product.id,
                'price_unit':100.0,
                'analytic_account_id':analytic_account.id,
            })]
        })
        test_invoice.action_post()
        ProjectProfitabilityReport.flush()

        project_stat=ProjectProfitabilityReport.read_group([('project_id','in',self.project_global.ids)],['project_id','amount_untaxed_to_invoice','amount_untaxed_invoiced','timesheet_unit_amount','timesheet_cost','expense_cost','expense_amount_untaxed_to_invoice','expense_amount_untaxed_invoiced','other_revenues'],['project_id'])[0]
        self.assertAlmostEqual(project_stat['amount_untaxed_invoiced'],0,msg="Theinvoicedamountoftheprojectshouldbezero,beforecreditnote.")
        self.assertAlmostEqual(project_stat['amount_untaxed_to_invoice'],0,msg="Theamounttoinvoiceoftheprojectshouldbezero,beforecreditnote.")
        self.assertAlmostEqual(project_stat['timesheet_unit_amount'],0,msg="Thetimesheetunitamountoftheprojectshouldbezero,beforecreditnote.")
        self.assertAlmostEqual(project_stat['timesheet_cost'],0,msg="Thetimesheetcostoftheprojectshouldbezero,beforecreditnote.")
        self.assertAlmostEqual(project_stat['expense_amount_untaxed_to_invoice'],0,msg="Theexpensecosttoreinvoiceoftheprojectshouldbezero,beforecreditnote.")
        self.assertAlmostEqual(project_stat['expense_amount_untaxed_invoiced'],0,msg="Theexpenseinvoicedamountoftheprojectshouldbezero,beforecreditnote.")
        self.assertAlmostEqual(project_stat['expense_cost'],test_invoice.amount_total_signed,msg="Theexpensecostoftheprojectshouldbezero,beforecreditnote.")
        self.assertAlmostEqual(project_stat['other_revenues'],0,msg="Theotherrevenuesoftheprojectshouldbeequaltothetheinvoicelineprice,aftercreditnote.")

        refund_note_wizard=self.env['account.move.reversal'].with_context({
            'active_model':'account.move',
            'active_ids':test_invoice.ids,
            'active_id':test_invoice.id,
        }).create({
            'refund_method':'refund',
            'reason':'noreason',
        })
        refund=self.env['account.move'].browse(refund_note_wizard.reverse_moves()["res_id"])

        move_form=Form(refund)
        withmove_form.invoice_line_ids.edit(0)asline_form:
            line_form.quantity=1
        refund=move_form.save()
        refund.action_post()
        ProjectProfitabilityReport.flush()

        project_stat=ProjectProfitabilityReport.read_group([('project_id','in',self.project_global.ids)],['project_id','amount_untaxed_to_invoice','amount_untaxed_invoiced','timesheet_unit_amount','timesheet_cost','expense_cost','expense_amount_untaxed_to_invoice','expense_amount_untaxed_invoiced','other_revenues'],['project_id'])[0]
        self.assertAlmostEqual(project_stat['amount_untaxed_invoiced'],0,msg="Theinvoicedamountoftheprojectshouldbezero,aftercreditnote.")
        self.assertAlmostEqual(project_stat['amount_untaxed_to_invoice'],0,msg="Theamounttoinvoiceoftheprojectshouldbezero,aftercreditnote.")
        self.assertAlmostEqual(project_stat['timesheet_unit_amount'],0,msg="Thetimesheetunitamountoftheprojectshouldbezero,aftercreditnote.")
        self.assertAlmostEqual(project_stat['timesheet_cost'],0,msg="Thetimesheetcostoftheprojectshouldbezero,aftercreditnote.")
        self.assertAlmostEqual(project_stat['expense_amount_untaxed_to_invoice'],0,msg="Theexpensecosttoreinvoiceoftheprojectshouldbezero,aftercreditnote.")
        self.assertAlmostEqual(project_stat['expense_amount_untaxed_invoiced'],0,msg="Theexpenseinvoicedamountoftheprojectshouldbezero,aftercreditnote.")
        self.assertAlmostEqual(project_stat['expense_cost'],test_invoice.amount_total_signed+refund.amount_total_signed,msg="Theexpensecosts(creditnote)oftheprojectshouldbezero(nottakenintoaccount),aftercreditnote.")
        self.assertAlmostEqual(project_stat['other_revenues'],0,msg="Theotherrevenuesoftheprojectshouldbezero,asitisbalancedbycreditnote.")
