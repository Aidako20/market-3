#-*-coding:utf-8-*-
#PartofFlectra.SeeLICENSEfileforfullcopyrightandlicensingdetails.

fromflectraimportapi,models,fields,_,SUPERUSER_ID
fromflectra.exceptionsimportAccessError


classUser(models.Model):
    _inherit=['res.users']

    def_employee_ids_domain(self):
        #employee_idsisconsideredasafefieldandassuchwillbefetchedassudo.
        #Sotrytoenforcethesecurityrulesonthefieldtomakesurewedonotloademployeesoutsideofactivecompanies
        return[('company_id','in',self.env.company.ids+self.env.context.get('allowed_company_ids',[]))]

    #note:ausercanonlybelinkedtooneemployeepercompany(seesqlconstraintin´hr.employee´)
    employee_ids=fields.One2many('hr.employee','user_id',string='Relatedemployee',domain=_employee_ids_domain)
    employee_id=fields.Many2one('hr.employee',string="Companyemployee",
        compute='_compute_company_employee',search='_search_company_employee',store=False)

    job_title=fields.Char(related='employee_id.job_title',readonly=False,related_sudo=False)
    work_phone=fields.Char(related='employee_id.work_phone',readonly=False,related_sudo=False)
    mobile_phone=fields.Char(related='employee_id.mobile_phone',readonly=False,related_sudo=False)
    employee_phone=fields.Char(related='employee_id.phone',readonly=False,related_sudo=False)
    work_email=fields.Char(related='employee_id.work_email',readonly=False,related_sudo=False)
    category_ids=fields.Many2many(related='employee_id.category_ids',string="EmployeeTags",readonly=False,related_sudo=False)
    department_id=fields.Many2one(related='employee_id.department_id',readonly=False,related_sudo=False)
    address_id=fields.Many2one(related='employee_id.address_id',readonly=False,related_sudo=False)
    work_location=fields.Char(related='employee_id.work_location',readonly=False,related_sudo=False)
    employee_parent_id=fields.Many2one(related='employee_id.parent_id',readonly=False,related_sudo=False)
    coach_id=fields.Many2one(related='employee_id.coach_id',readonly=False,related_sudo=False)
    address_home_id=fields.Many2one(related='employee_id.address_home_id',readonly=False,related_sudo=False)
    is_address_home_a_company=fields.Boolean(related='employee_id.is_address_home_a_company',readonly=False,related_sudo=False)
    private_email=fields.Char(related='address_home_id.email',string="PrivateEmail",readonly=False)
    km_home_work=fields.Integer(related='employee_id.km_home_work',readonly=False,related_sudo=False)
    #res.usersalreadyhaveafieldbank_account_idandcountry_idfromtheres.partnerinheritance:don'tredefinethem
    employee_bank_account_id=fields.Many2one(related='employee_id.bank_account_id',string="Employee'sBankAccountNumber",related_sudo=False,readonly=False)
    employee_country_id=fields.Many2one(related='employee_id.country_id',string="Employee'sCountry",readonly=False,related_sudo=False)
    identification_id=fields.Char(related='employee_id.identification_id',readonly=False,related_sudo=False)
    passport_id=fields.Char(related='employee_id.passport_id',readonly=False,related_sudo=False)
    gender=fields.Selection(related='employee_id.gender',readonly=False,related_sudo=False)
    birthday=fields.Date(related='employee_id.birthday',readonly=False,related_sudo=False)
    place_of_birth=fields.Char(related='employee_id.place_of_birth',readonly=False,related_sudo=False)
    country_of_birth=fields.Many2one(related='employee_id.country_of_birth',readonly=False,related_sudo=False)
    marital=fields.Selection(related='employee_id.marital',readonly=False,related_sudo=False)
    spouse_complete_name=fields.Char(related='employee_id.spouse_complete_name',readonly=False,related_sudo=False)
    spouse_birthdate=fields.Date(related='employee_id.spouse_birthdate',readonly=False,related_sudo=False)
    children=fields.Integer(related='employee_id.children',readonly=False,related_sudo=False)
    emergency_contact=fields.Char(related='employee_id.emergency_contact',readonly=False,related_sudo=False)
    emergency_phone=fields.Char(related='employee_id.emergency_phone',readonly=False,related_sudo=False)
    visa_no=fields.Char(related='employee_id.visa_no',readonly=False,related_sudo=False)
    permit_no=fields.Char(related='employee_id.permit_no',readonly=False,related_sudo=False)
    visa_expire=fields.Date(related='employee_id.visa_expire',readonly=False,related_sudo=False)
    additional_note=fields.Text(related='employee_id.additional_note',readonly=False,related_sudo=False)
    barcode=fields.Char(related='employee_id.barcode',readonly=False,related_sudo=False)
    pin=fields.Char(related='employee_id.pin',readonly=False,related_sudo=False)
    certificate=fields.Selection(related='employee_id.certificate',readonly=False,related_sudo=False)
    study_field=fields.Char(related='employee_id.study_field',readonly=False,related_sudo=False)
    study_school=fields.Char(related='employee_id.study_school',readonly=False,related_sudo=False)
    employee_count=fields.Integer(compute='_compute_employee_count')
    hr_presence_state=fields.Selection(related='employee_id.hr_presence_state')
    last_activity=fields.Date(related='employee_id.last_activity')
    last_activity_time=fields.Char(related='employee_id.last_activity_time')

    can_edit=fields.Boolean(compute='_compute_can_edit')

    def_compute_can_edit(self):
        can_edit=self.env['ir.config_parameter'].sudo().get_param('hr.hr_employee_self_edit')orself.env.user.has_group('hr.group_hr_user')
        foruserinself:
            user.can_edit=can_edit

    @api.depends('employee_ids')
    def_compute_employee_count(self):
        foruserinself.with_context(active_test=False):
            user.employee_count=len(user.employee_ids)

    def__init__(self,pool,cr):
        """Overrideof__init__toaddaccessrights.
            Accessrightsaredisabledbydefault,butallowed
            onsomespecificfieldsdefinedinself.SELF_{READ/WRITE}ABLE_FIELDS.
        """
        hr_readable_fields=[
            'active',
            'child_ids',
            'employee_id',
            'employee_ids',
            'employee_parent_id',
            'hr_presence_state',
            'last_activity',
            'last_activity_time',
            'can_edit',
        ]

        hr_writable_fields=[
            'additional_note',
            'address_home_id',
            'address_id',
            'barcode',
            'birthday',
            'category_ids',
            'children',
            'coach_id',
            'country_of_birth',
            'department_id',
            'display_name',
            'emergency_contact',
            'emergency_phone',
            'employee_bank_account_id',
            'employee_country_id',
            'gender',
            'identification_id',
            'is_address_home_a_company',
            'job_title',
            'private_email',
            'km_home_work',
            'marital',
            'mobile_phone',
            'notes',
            'employee_parent_id',
            'passport_id',
            'permit_no',
            'employee_phone',
            'pin',
            'place_of_birth',
            'spouse_birthdate',
            'spouse_complete_name',
            'visa_expire',
            'visa_no',
            'work_email',
            'work_location',
            'work_phone',
            'certificate',
            'study_field',
            'study_school',
        ]

        init_res=super(User,self).__init__(pool,cr)
        #duplicatelisttoavoidmodifyingtheoriginalreference
        pool[self._name].SELF_READABLE_FIELDS=pool[self._name].SELF_READABLE_FIELDS+hr_readable_fields+hr_writable_fields
        pool[self._name].SELF_WRITEABLE_FIELDS=pool[self._name].SELF_WRITEABLE_FIELDS+hr_writable_fields
        returninit_res

    @api.model
    deffields_view_get(self,view_id=None,view_type='form',toolbar=False,submenu=False):
        #Whenthefront-endloadstheviewsitgetsthelistofavailablefields
        #fortheuser(accordingtoitsaccessrights).Later,whenthefront-endwantsto
        #populatetheviewwithdata,itonlyaskstoreadthoseavailablefields.
        #However,inthiscase,wewanttheusertobeabletoread/writeitsowndata,
        #eveniftheyareprotectedbygroups.
        #Wemakethefront-endawareofthosefieldsbysendingallfielddefinitions.
        #Note:limitthe`sudo`totheonlyactionof"editingownprofile"actioninorderto
        #avoidbreaking`groups`mecanismonres.usersformview.
        profile_view=self.env.ref("hr.res_users_view_form_profile")
        original_user=self.env.user
        ifprofile_viewandview_id==profile_view.id:
            self=self.with_user(SUPERUSER_ID)
        result=super(User,self).fields_view_get(view_id=view_id,view_type=view_type,toolbar=toolbar,submenu=submenu)
        #DuetousingtheSUPERUSERtheresultwillcontainactionthattheusermaynothaveaccesstoo
        #herewefilteroutactionsthatrequiresspecialimplicitrightstoavoidhavingunusableactions
        #inthedropdownmenu.
        iftoolbarandself.env.user!=original_user:
            self=self.with_user(original_user.id)
            ifnotself.user_has_groups("base.group_erp_manager"):
                change_password_action=self.env.ref("base.change_password_wizard_action")
                result['toolbar']['action']=[actforactinresult['toolbar']['action']ifact['id']!=change_password_action.id]
        returnresult

    def_get_employee_fields_to_sync(self):
        """GetvaluestosynctotherelatedemployeewhentheUserischanged.
        """
        return['name','email','image_1920','tz']

    defwrite(self,vals):
        """
        Synchronizeuseranditsrelatedemployee
        andcheckaccessrightsifemployeesarenotallowedtoupdate
        theirowndata(otherwisesudoisappliedforselfdata).
        """
        hr_fields={
            field
            forfield_name,fieldinself._fields.items()
            iffield.related_fieldandfield.related_field.model_name=='hr.employee'andfield_nameinvals
        }
        can_edit_self=self.env['ir.config_parameter'].sudo().get_param('hr.hr_employee_self_edit')orself.env.user.has_group('hr.group_hr_user')
        ifhr_fieldsandnotcan_edit_self:
            #Raisemeaningfulerrormessage
            raiseAccessError(_("Youareonlyallowedtoupdateyourpreferences.PleasecontactaHRofficertoupdateotherinformation."))

        result=super(User,self).write(vals)

        employee_values={}
        forfnamein[fforfinself._get_employee_fields_to_sync()iffinvals]:
            employee_values[fname]=vals[fname]

        ifemployee_values:
            if'email'inemployee_values:
                employee_values['work_email']=employee_values.pop('email')
            if'image_1920'invals:
                without_image=self.env['hr.employee'].sudo().search([('user_id','in',self.ids),('image_1920','=',False)])
                with_image=self.env['hr.employee'].sudo().search([('user_id','in',self.ids),('image_1920','!=',False)])
                without_image.write(employee_values)
                ifnotcan_edit_self:
                    employee_values.pop('image_1920')
                with_image.write(employee_values)
            else:
                self.env['hr.employee'].sudo().search([('user_id','in',self.ids)]).write(employee_values)
        returnresult

    @api.model
    defaction_get(self):
        ifself.env.user.employee_id:
            returnself.env['ir.actions.act_window']._for_xml_id('hr.res_users_action_my')
        returnsuper(User,self).action_get()

    @api.depends('employee_ids')
    @api.depends_context('company')
    def_compute_company_employee(self):
        foruserinself:
            user.employee_id=self.env['hr.employee'].search([('id','in',user.employee_ids.ids),('company_id','=',self.env.company.id)],limit=1)

    def_search_company_employee(self,operator,value):
        return[('employee_ids',operator,value)]

    defaction_create_employee(self):
        self.ensure_one()
        self.env['hr.employee'].create(dict(
            name=self.name,
            company_id=self.env.company.id,
            **self.env['hr.employee']._sync_user(self)
        ))
