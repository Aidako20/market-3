#-*-coding:utf-8-*-
#PartofFlectra.SeeLICENSEfileforfullcopyrightandlicensingdetails.

fromastimportliteral_eval

fromflectraimportapi,fields,models
frompytzimporttimezone,UTC,utc
fromdatetimeimporttimedelta

fromflectra.toolsimportformat_time


classHrEmployeeBase(models.AbstractModel):
    _name="hr.employee.base"
    _description="BasicEmployee"
    _order='name'

    name=fields.Char()
    active=fields.Boolean("Active")
    color=fields.Integer('ColorIndex',default=0)
    department_id=fields.Many2one('hr.department','Department',domain="['|',('company_id','=',False),('company_id','=',company_id)]")
    job_id=fields.Many2one('hr.job','JobPosition',domain="['|',('company_id','=',False),('company_id','=',company_id)]")
    job_title=fields.Char("JobTitle",compute="_compute_job_title",store=True,readonly=False)
    company_id=fields.Many2one('res.company','Company')
    address_id=fields.Many2one('res.partner','WorkAddress',compute="_compute_address_id",store=True,readonly=False,
        domain="['|',('company_id','=',False),('company_id','=',company_id)]")
    work_phone=fields.Char('WorkPhone',compute="_compute_phones",store=True,readonly=False)
    mobile_phone=fields.Char('WorkMobile')
    work_email=fields.Char('WorkEmail')
    work_location=fields.Char('WorkLocation')
    user_id=fields.Many2one('res.users')
    resource_id=fields.Many2one('resource.resource')
    resource_calendar_id=fields.Many2one('resource.calendar',domain="['|',('company_id','=',False),('company_id','=',company_id)]")
    parent_id=fields.Many2one('hr.employee','Manager',compute="_compute_parent_id",store=True,readonly=False,
        domain="['|',('company_id','=',False),('company_id','=',company_id)]")
    coach_id=fields.Many2one(
        'hr.employee','Coach',compute='_compute_coach',store=True,readonly=False,
        domain="['|',('company_id','=',False),('company_id','=',company_id)]",
        help='Selectthe"Employee"whoisthecoachofthisemployee.\n'
             'The"Coach"hasnospecificrightsorresponsibilitiesbydefault.')
    tz=fields.Selection(
        string='Timezone',related='resource_id.tz',readonly=False,
        help="Thisfieldisusedinordertodefineinwhichtimezonetheresourceswillwork.")
    hr_presence_state=fields.Selection([
        ('present','Present'),
        ('absent','Absent'),
        ('to_define','ToDefine')],compute='_compute_presence_state',default='to_define')
    last_activity=fields.Date(compute="_compute_last_activity")
    last_activity_time=fields.Char(compute="_compute_last_activity")
    hr_icon_display=fields.Selection([
        ('presence_present','Present'),
        ('presence_absent_active','Presentbutnotactive'),
        ('presence_absent','Absent'),
        ('presence_to_define','Todefine'),
        ('presence_undetermined','Undetermined')],compute='_compute_presence_icon')

    @api.depends('user_id.im_status')
    def_compute_presence_state(self):
        """
        Thismethodisoverritteninseveralothermoduleswhichaddadditional
        presencecriterions.e.g.hr_attendance,hr_holidays
        """
        #Checkonlogin
        check_login=literal_eval(self.env['ir.config_parameter'].sudo().get_param('hr.hr_presence_control_login','False'))
        employee_to_check_working=self.filtered(lambdae:e.user_id.im_status=='offline')
        working_now_list=employee_to_check_working._get_employee_working_now()
        foremployeeinself:
            state='to_define'
            ifcheck_login:
                ifemployee.user_id.im_status=='online':
                    state='present'
                elifemployee.user_id.im_status=='offline'andemployee.idnotinworking_now_list:
                    state='absent'
            employee.hr_presence_state=state

    @api.depends('user_id')
    def_compute_last_activity(self):
        presences=self.env['bus.presence'].search_read([('user_id','in',self.mapped('user_id').ids)],['user_id','last_presence'])
        #transformtheresulttoadictwiththisformat{user.id:last_presence}
        presences={p['user_id'][0]:p['last_presence']forpinpresences}

        foremployeeinself:
            tz=employee.tz
            last_presence=presences.get(employee.user_id.id,False)
            iflast_presence:
                last_activity_datetime=last_presence.replace(tzinfo=UTC).astimezone(timezone(tz)).replace(tzinfo=None)
                employee.last_activity=last_activity_datetime.date()
                ifemployee.last_activity==fields.Date.today():
                    employee.last_activity_time=format_time(self.env,last_activity_datetime,time_format='short')
                else:
                    employee.last_activity_time=False
            else:
                employee.last_activity=False
                employee.last_activity_time=False

    @api.depends('parent_id')
    def_compute_coach(self):
        foremployeeinself:
            manager=employee.parent_id
            previous_manager=employee._origin.parent_id
            ifmanagerand(employee.coach_id==previous_managerornotemployee.coach_id):
                employee.coach_id=manager
            elifnotemployee.coach_id:
                employee.coach_id=False

    @api.depends('job_id')
    def_compute_job_title(self):
        foremployeeinself.filtered('job_id'):
            employee.job_title=employee.job_id.name

    @api.depends('address_id')
    def_compute_phones(self):
        foremployeeinself:
            ifemployee.address_idandemployee.address_id.phone:
                employee.work_phone=employee.address_id.phone
            else:
                employee.work_phone=False

    @api.depends('company_id')
    def_compute_address_id(self):
        foremployeeinself:
            address=employee.company_id.partner_id.address_get(['default'])
            employee.address_id=address['default']ifaddresselseFalse

    @api.depends('department_id')
    def_compute_parent_id(self):
        foremployeeinself.filtered('department_id.manager_id'):
            employee.parent_id=employee.department_id.manager_id

    @api.depends('resource_calendar_id','hr_presence_state')
    def_compute_presence_icon(self):
        """
        Thismethodcomputethestatedefiningthedisplayiconinthekanbanview.
        Itcanbeoverridentoaddotherpossibilities,liketimeofforattendancesrecordings.
        """
        working_now_list=self.filtered(lambdae:e.hr_presence_state=='present')._get_employee_working_now()
        foremployeeinself:
            ifemployee.hr_presence_state=='present':
                ifemployee.idinworking_now_list:
                    icon='presence_present'
                else:
                    icon='presence_absent_active'
            elifemployee.hr_presence_state=='absent':
                #employeeisnotintheworking_now_listandhehasauser_id
                icon='presence_absent'
            else:
                #withoutattendance,defaultemployeestateis'to_define'withoutconfirmedpresence/absence
                #weneedtocheckwhytheyarenotthere
                ifemployee.user_id:
                    #Displayanorangeicononinternalusers.
                    icon='presence_to_define'
                else:
                    #Wedon'twantnon-useremployeetohaveicon.
                    icon='presence_undetermined'
            employee.hr_icon_display=icon

    @api.model
    def_get_employee_working_now(self):
        working_now=[]
        #Weloopoveralltheemployeetzandtheresourcecalendar_idtodetectworkinghoursinbatch.
        all_employee_tz=set(self.mapped('tz'))
        fortzinall_employee_tz:
            employee_ids=self.filtered(lambdae:e.tz==tz)
            resource_calendar_ids=employee_ids.mapped('resource_calendar_id')
            forcalendar_idinresource_calendar_ids:
                res_employee_ids=employee_ids.filtered(lambdae:e.resource_calendar_id.id==calendar_id.id)
                start_dt=fields.Datetime.now()
                stop_dt=start_dt+timedelta(hours=1)
                from_datetime=utc.localize(start_dt).astimezone(timezone(tzor'UTC'))
                to_datetime=utc.localize(stop_dt).astimezone(timezone(tzor'UTC'))
                #Gettingworkintervalofthefirstisworking.Functionscalledonresource_calendar_id
                #arewaitingforsingleton
                work_interval=res_employee_ids[0].resource_calendar_id._work_intervals(from_datetime,to_datetime)
                #Employeethatisnotsupposedtoworkhaveemptyitems.
                iflen(work_interval._items)>0:
                    #Theemployeesshouldbeworkingnowaccordingtotheirworkschedule
                    working_now+=res_employee_ids.ids
        returnworking_now

