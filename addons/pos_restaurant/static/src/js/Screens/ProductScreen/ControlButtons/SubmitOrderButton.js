flectra.define('pos_restaurant.SubmitOrderButton',function(require){
    'usestrict';

    constPosComponent=require('point_of_sale.PosComponent');
    constProductScreen=require('point_of_sale.ProductScreen');
    const{useListener}=require('web.custom_hooks');
    constRegistries=require('point_of_sale.Registries');

    /**
     *IMPROVEMENT:Perhapsthisclassisquitecomplicatedforitsworth.
     *Thisisbecauseitneedstolistentochangestothecurrentorder.
     *Also,thecurrentorderchangeswhentheselectedOrderinposischanged.
     *Aftersettingnewcurrentorder,weupdatethelisteners.
     */
    classSubmitOrderButtonextendsPosComponent{
        constructor(){
            super(...arguments);
            useListener('click',this.onClick);
            this._currentOrder=this.env.pos.get_order();
            this._currentOrder.orderlines.on('change',this.render,this);
            this.env.pos.on('change:selectedOrder',this._updateCurrentOrder,this);
        }
        willUnmount(){
            this._currentOrder.orderlines.off('change',null,this);
            this.env.pos.off('change:selectedOrder',null,this);
        }
        asynconClick(){
            constorder=this.env.pos.get_order();
            if(order.hasChangesToPrint()){
                constisPrintSuccessful=awaitorder.printChanges();
                if(isPrintSuccessful){
                    order.saveChanges();
                }else{
                    awaitthis.showPopup('ErrorPopup',{
                        title:'Printingfailed',
                        body:'Failedinprintingthechangesintheorder',
                    });
                }
            }
        }
        getaddedClasses(){
            if(!this._currentOrder)return{};
            constchanges=this._currentOrder.hasChangesToPrint();
            constskipped=changes?false:this._currentOrder.hasSkippedChanges();
            return{
                highlight:changes,
                altlight:skipped,
            };
        }
        _updateCurrentOrder(pos,newSelectedOrder){
            this._currentOrder.orderlines.off('change',null,this);
            if(newSelectedOrder){
                this._currentOrder=newSelectedOrder;
                this._currentOrder.orderlines.on('change',this.render,this);
            }
        }
    }
    SubmitOrderButton.template='SubmitOrderButton';

    ProductScreen.addControlButton({
        component:SubmitOrderButton,
        condition:function(){
            returnthis.env.pos.printers.length;
        },
    });

    Registries.Component.add(SubmitOrderButton);

    returnSubmitOrderButton;
});
