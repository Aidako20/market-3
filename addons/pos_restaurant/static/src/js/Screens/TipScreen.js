flectra.define('pos_restaurant.TipScreen',function(require){
    'usestrict';

    constRegistries=require('point_of_sale.Registries');
    constPosComponent=require('point_of_sale.PosComponent');
    const{parse}=require('web.field_utils');
    const{useContext}=owl.hooks;

    classTipScreenextendsPosComponent{
        constructor(){
            super(...arguments);
            this.state=useContext(this.currentOrder.uiState.TipScreen);
            this._totalAmount=this.currentOrder.get_total_with_tax();
        }
        mounted(){
            this.printTipReceipt();
        }
        getoverallAmountStr(){
            consttipAmount=parse.float(this.state.inputTipAmount||'0');
            constoriginal=this.env.pos.format_currency(this.totalAmount);
            consttip=this.env.pos.format_currency(tipAmount);
            constoverall=this.env.pos.format_currency(this.totalAmount+tipAmount);
            return`${original}+${tip}tip=${overall}`;
        }
        gettotalAmount(){
            returnthis._totalAmount;
        }
        getcurrentOrder(){
            returnthis.env.pos.get_order();
        }
        getpercentageTips(){
            return[
                {percentage:'15%',amount:0.15*this.totalAmount},
                {percentage:'20%',amount:0.2*this.totalAmount},
                {percentage:'25%',amount:0.25*this.totalAmount},
            ];
        }
        asyncvalidateTip(){
            constamount=parse.float(this.state.inputTipAmount)||0;
            constorder=this.env.pos.get_order();
            constserverId=this.env.pos.validated_orders_name_server_id_map[order.name];

            if(!serverId){
                this.showPopup('ErrorPopup',{
                    title:'Unsyncedorder',
                    body:'Thisorderisnotyetsyncedtoserver.Makesureitissyncedthentryagain.',
                });
                return;
            }

            if(!amount){
                awaitthis.rpc({
                    method:'set_no_tip',
                    model:'pos.order',
                    args:[serverId],
                });
                this.goNextScreen();
                return;
            }

            if(amount>0.25*this.totalAmount){
                const{confirmed}=awaitthis.showPopup('ConfirmPopup',{
                    title:'Areyousure?',
                    body:`${this.env.pos.format_currency(
                        amount
                    )}ismorethan25%oftheorder'stotalamount.Areyousureofthistipamount?`,
                });
                if(!confirmed)return;
            }

            //setthetipbytemporarilyallowingordermodification
            order.finalized=false;
            order.set_tip(amount);
            order.finalized=true;

            constpaymentline=this.env.pos.get_order().get_paymentlines()[0];
            if(paymentline.payment_method.payment_terminal){
                paymentline.amount+=amount;
                awaitpaymentline.payment_method.payment_terminal.send_payment_adjust(paymentline.cid);
            }

            //set_tipcallsadd_productwhichsetsthenewlineastheselected_orderline
            consttip_line=order.selected_orderline;
            awaitthis.rpc({
                method:'set_tip',
                model:'pos.order',
                args:[serverId,tip_line.export_as_JSON()],
            });
            this.goNextScreen();
        }
        goNextScreen(){
            this.env.pos.get_order().finalize();
            const{name,props}=this.nextScreen;
            this.showScreen(name,props);
        }
        getnextScreen(){
            if(this.env.pos.config.module_pos_restaurant&&this.env.pos.config.iface_floorplan){
                consttable=this.env.pos.table;
                return{name:'FloorScreen',props:{floor:table?table.floor:null}};
            }else{
                return{name:'ProductScreen'};
            }
        }
        asyncprintTipReceipt(){
            constreceipts=[
                this.currentOrder.selected_paymentline.ticket,
                this.currentOrder.selected_paymentline.cashier_receipt
            ];

            for(leti=0;i<receipts.length;i++){
                constdata=receipts[i];
                varreceipt=this.env.qweb.renderToString('TipReceipt',{
                    receipt:this.currentOrder.getOrderReceiptEnv().receipt,
                    data:data,
                    total:this.env.pos.format_currency(this.totalAmount),
                });

                if(this.env.pos.proxy.printer){
                    awaitthis._printIoT(receipt);
                }else{
                    awaitthis._printWeb(receipt);
                }
            }
        }

        async_printIoT(receipt){
            constprintResult=awaitthis.env.pos.proxy.printer.print_receipt(receipt);
            if(!printResult.successful){
                awaitthis.showPopup('ErrorPopup',{
                    title:printResult.message.title,
                    body:printResult.message.body,
                });
            }
        }

        async_printWeb(receipt){
            try{
                $(this.el).find('.pos-receipt-container').html(receipt);
                window.print();
            }catch(err){
                awaitthis.showPopup('ErrorPopup',{
                    title:this.env._t('Printingisnotsupportedonsomebrowsers'),
                    body:this.env._t(
                        'Printingisnotsupportedonsomebrowsersduetonodefaultprintingprotocol'+
                            'isavailable.ItispossibletoprintyourticketsbymakinguseofanIoTBox.'
                    ),
                });
            }
        }
    }
    TipScreen.template='pos_restaurant.TipScreen';

    Registries.Component.add(TipScreen);

    returnTipScreen;
});
