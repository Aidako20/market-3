flectra.define('pos_restaurant.TicketScreen',function(require){
    'usestrict';

    constPosComponent=require('point_of_sale.PosComponent');
    constTicketScreen=require('point_of_sale.TicketScreen');
    constRegistries=require('point_of_sale.Registries');
    const{useAutofocus}=require('web.custom_hooks');
    const{posbus}=require('point_of_sale.utils');
    const{parse}=require('web.field_utils');
    const{useState,useContext}=owl.hooks;

    constPosResTicketScreen=(TicketScreen)=>
        classextendsTicketScreen{
            close(){
                super.close();
                if(!this.env.pos.config.iface_floorplan){
                    //Makesurethe'table-set'eventistriggered
                    //toproperlyrerenderthecomponentsthatlistenstoit.
                    posbus.trigger('table-set');
                }
            }
            getfilterOptions(){
                const{Payment,Open,Tipping}=this.getOrderStates();
                varfilterOptions=super.filterOptions;
                if(this.env.pos.config.set_tip_after_payment){
                    varidx=filterOptions.indexOf(Payment);
                    filterOptions[idx]=Open;
                }
                return[...filterOptions,Tipping];
            }
            get_screenToStatusMap(){
                const{Open,Tipping}=this.getOrderStates();
                returnObject.assign(super._screenToStatusMap,{
                    PaymentScreen:this.env.pos.config.set_tip_after_payment?Open:super._screenToStatusMap.PaymentScreen,
                    TipScreen:Tipping,
                });
            }
            getTable(order){
                return`${order.table.floor.name}(${order.table.name})`;
            }
            get_searchFields(){
                if(!this.env.pos.config.iface_floorplan){
                    returnsuper._searchFields;
                }
                returnObject.assign({},super._searchFields,{
                    Table:(order)=>`${order.table.floor.name}(${order.table.name})`,
                });
            }
            _setOrder(order){
                if(!this.env.pos.config.iface_floorplan||this.env.pos.table){
                    super._setOrder(order);
                }else{
                    this.env.pos.set_table(order.table,order);
                }
            }
            getshowNewTicketButton(){
                returnthis.env.pos.config.iface_floorplan?Boolean(this.env.pos.table):super.showNewTicketButton;
            }
            getorderList(){
                if(this.env.pos.table){
                    returnsuper.orderList;
                }else{
                    returnthis.env.pos.get('orders').models;
                }
            }
            asyncsettleTips(){
                //settipineachorder
                for(constorderofthis.filteredOrderList){
                    consttipAmount=parse.float(order.uiState.TipScreen.state.inputTipAmount||'0');
                    constserverId=this.env.pos.validated_orders_name_server_id_map[order.name];
                    if(!serverId){
                        console.warn(`${order.name}isnotyetsync.Syncittoserverbeforesettingatip.`);
                    }else{
                        constresult=awaitthis.setTip(order,serverId,tipAmount);
                        if(!result)break;
                    }
                }
            }
            asyncsetTip(order,serverId,amount){
                try{
                    constpaymentline=order.get_paymentlines()[0];
                    if(paymentline.payment_method.payment_terminal){
                        paymentline.amount+=amount;
                        this.env.pos.set_order(order,{silent:true});
                        awaitpaymentline.payment_method.payment_terminal.send_payment_adjust(paymentline.cid);
                    }

                    if(!amount){
                        awaitthis.setNoTip();
                    }else{
                        order.finalized=false;
                        order.set_tip(amount);
                        order.finalized=true;
                        consttip_line=order.selected_orderline;
                        awaitthis.rpc({
                            method:'set_tip',
                            model:'pos.order',
                            args:[serverId,tip_line.export_as_JSON()],
                        });
                    }
                    order.finalize();
                    returntrue;
                }catch(error){
                    const{confirmed}=awaitthis.showPopup('ConfirmPopup',{
                        title:'Failedtosettip',
                        body:`Failedtosettipto${order.name}.Doyouwanttoproceedonsettingthetipsoftheremaining?`,
                    });
                    returnconfirmed;
                }
            }
            asyncsetNoTip(){
                awaitthis.rpc({
                    method:'set_no_tip',
                    model:'pos.order',
                    args:[serverId],
                });
            }
            getOrderStates(){
                returnObject.assign(super.getOrderStates(),{
                    Tipping:this.env._t('Tipping'),
                    Open:this.env._t('Open'),
                });
            }
        };

    Registries.Component.extend(TicketScreen,PosResTicketScreen);

    classTipCellextendsPosComponent{
        constructor(){
            super(...arguments);
            this.state=useState({isEditing:false});
            this.orderUiState=useContext(this.props.order.uiState.TipScreen);
            useAutofocus({selector:'input'});
        }
        gettipAmountStr(){
            returnthis.env.pos.format_currency(parse.float(this.orderUiState.inputTipAmount||'0'));
        }
        onBlur(){
            this.state.isEditing=false;
        }
        onKeydown(event){
            if(event.key==='Enter'){
                this.state.isEditing=false;
            }
        }
        editTip(){
            this.state.isEditing=true;
        }
    }
    TipCell.template='TipCell';

    Registries.Component.add(TipCell);

    return{TicketScreen,TipCell};
});
