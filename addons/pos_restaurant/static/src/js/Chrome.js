flectra.define('pos_restaurant.chrome',function(require){
    'usestrict';

    constChrome=require('point_of_sale.Chrome');
    constRegistries=require('point_of_sale.Registries');

    constNON_IDLE_EVENTS='mousemovemousedowntouchstarttouchendtouchmoveclickscrollkeypress'.split(/\s+/);
    letIDLE_TIMER_SETTER;

    constPosResChrome=(Chrome)=>
        classextendsChrome{
            /**
             *@override
             */
            asyncstart(){
                awaitsuper.start();
                if(this.env.pos.config.iface_floorplan){
                    this._setActivityListeners();
                }
            }
            /**
             *@override
             *Donotset`FloorScreen`totheorder.
             */
            _setScreenData(name){
                if(name==='FloorScreen')return;
                super._setScreenData(...arguments);
            }
            /**
             *@override
             *`FloorScreen`isthestartscreeniftherearefloors.
             */
            getstartScreen(){
                if(this.env.pos.config.iface_floorplan){
                    consttable=this.env.pos.table;
                    return{name:'FloorScreen',props:{floor:table?table.floor:null}};
                }else{
                    returnsuper.startScreen;
                }
            }
            /**
             *@override
             *Orderissettonullwhentableisselected.Thereisnosaved
             *screenfornullordersoshow`FloorScreen`instead.
             */
            _showSavedScreen(pos,newSelectedOrder){
                if(!newSelectedOrder){
                    this.showScreen('FloorScreen',{floor:pos.table?pos.table.floor:null});
                }else{
                    super._showSavedScreen(pos,newSelectedOrder);
                }
            }
            _setActivityListeners(){
                IDLE_TIMER_SETTER=this._setIdleTimer.bind(this);
                for(consteventofNON_IDLE_EVENTS){
                    window.addEventListener(event,IDLE_TIMER_SETTER);
                }
            }
            _setIdleTimer(){
                if(this._shouldResetIdleTimer()){
                    clearTimeout(this.idleTimer);
                    this.idleTimer=setTimeout(()=>{
                        this._actionAfterIdle();
                    },60000);
                }
            }
            _actionAfterIdle(){
                if(this.tempScreen.isShown){
                    this.trigger('close-temp-screen');
                }
                consttable=this.env.pos.table;
                this.showScreen('FloorScreen',{floor:table?table.floor:null});
            }
            _shouldResetIdleTimer(){
                returnthis.env.pos.config.iface_floorplan&&this.mainScreen.name!=='FloorScreen';
            }
            __showScreen(){
                super.__showScreen(...arguments);
                this._setIdleTimer();
            }
            /**
             *@override
             *Beforeclosingpos,weremovetheeventlistenerssetonwindow
             *fordetectingactivitiesoutsideFloorScreen.
             */
            async_closePos(){
                if(IDLE_TIMER_SETTER){
                    for(consteventofNON_IDLE_EVENTS){
                        window.removeEventListener(event,IDLE_TIMER_SETTER);
                    }
                }
                awaitsuper._closePos();
            }
        };

    Registries.Component.extend(Chrome,PosResChrome);

    returnChrome;
});
