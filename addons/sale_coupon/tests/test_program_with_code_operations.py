#-*-coding:utf-8-*-
#PartofFlectra.SeeLICENSEfileforfullcopyrightandlicensingdetails.

fromflectra.addons.sale_coupon.tests.commonimportTestSaleCouponCommon
fromflectra.exceptionsimportUserError


classTestProgramWithCodeOperations(TestSaleCouponCommon):
    #Testthebasicoperation(apply_coupon)onancouponprogramonwhichweshould
    #applytherewardwhenthecodeiscorrectorremovetherewardautomaticallywhentherewardis
    #notvalidanymore.

    deftest_program_usability(self):
        #Afterclicking"Generatecoupons",thereisnodomainsoitshows"Matchallrecords".
        #Butwhenyouclick,domainisfalse(defaultfieldvalue;emptystring)soitwon'tgenerateanything.
        #Thisisevenmoreweirdbecauseifyouaddsomethinginthedomainandthendeleteit,
        #youvisuallycomebacktotheinitialstateexceptthedomainbecame'[]'insteadof''.
        #Inthiscase,itwillgeneratethecouponforeverypartner.
        #Thus,weshouldensurethatifyouleavethedomainuntouched,itgeneratesacouponforeachpartner
        #ashintedonthescreen('Matchallrecords(Xrecords)')
        self.env['coupon.generate.wizard'].with_context(active_id=self.code_promotion_program.id).create({
            'generation_type':'nbr_customer',
        }).generate_coupon()
        self.assertEqual(len(self.code_promotion_program.coupon_ids),len(self.env['res.partner'].search([])),"Itshouldhavegeneratedacouponforeverypartner")

    deftest_program_basic_operation_coupon_code(self):
        #Testcase:Generateacouponformycustomer,andaddarewardthenremoveitautomatically

        self.code_promotion_program.reward_type='discount'

        self.env['coupon.generate.wizard'].with_context(active_id=self.code_promotion_program.id).create({
            'generation_type':'nbr_customer',
            'partners_domain':"[('id','in',[%s])]"%(self.steve.id),
        }).generate_coupon()
        coupon=self.code_promotion_program.coupon_ids

        #Testthevalidcodeonawrongsalesorder
        wrong_partner_order=self.env['sale.order'].create({
            'partner_id':self.env['res.partner'].create({'name':'MyPartner'}).id,
        })
        withself.assertRaises(UserError):
            self.env['sale.coupon.apply.code'].with_context(active_id=wrong_partner_order.id).create({
                'coupon_code':coupon.code
            }).process_coupon()

        #Testnowonavalidsalesorder
        order=self.empty_order
        order.write({'order_line':[
            (0,False,{
                'product_id':self.product_A.id,
                'name':'1ProductA',
                'product_uom':self.uom_unit.id,
                'product_uom_qty':1.0,
            })
        ]})
        self.env['sale.coupon.apply.code'].with_context(active_id=order.id).create({
            'coupon_code':coupon.code
        }).process_coupon()
        order.recompute_coupon_lines()
        self.assertEqual(len(order.order_line.ids),2)
        self.assertEqual(coupon.state,'used')

        #RemovetheproductAfromthesaleorder
        order.write({'order_line':[(2,order.order_line[0].id,False)]})
        order.recompute_coupon_lines()
        self.assertEqual(len(order.order_line.ids),0)
        self.assertEqual(coupon.state,'new')

    deftest_program_coupon_double_consuming(self):
        #Testcase:
        #-Generateacoupon
        #-addtoasaleorderA,cancelthesaleorder
        #-addtoasaleorderB,confirmtheorder
        #-gobacktoA,resettodraftandconfirm

        self.code_promotion_program.reward_type='discount'

        self.env['coupon.generate.wizard'].with_context(active_id=self.code_promotion_program.id).create({
            'generation_type':'nbr_coupon',
            'nbr_coupons':1,
        }).generate_coupon()
        coupon=self.code_promotion_program.coupon_ids

        sale_order_a=self.empty_order.copy()
        sale_order_b=self.empty_order.copy()

        sale_order_a.write({'order_line':[
            (0,False,{
                'product_id':self.product_A.id,
                'name':'1ProductA',
                'product_uom':self.uom_unit.id,
                'product_uom_qty':1.0,
            })
        ]})
        self.env['sale.coupon.apply.code'].with_context(active_id=sale_order_a.id).create({
            'coupon_code':coupon.code
        }).process_coupon()
        sale_order_a.recompute_coupon_lines()
        self.assertEqual(len(sale_order_a.order_line.ids),2)
        self.assertEqual(coupon.state,'used')
        self.assertEqual(coupon.sales_order_id,sale_order_a)

        sale_order_a.action_cancel()

        sale_order_b.write({'order_line':[
            (0,False,{
                'product_id':self.product_A.id,
                'name':'1ProductA',
                'product_uom':self.uom_unit.id,
                'product_uom_qty':1.0,
            })
        ]})
        self.env['sale.coupon.apply.code'].with_context(active_id=sale_order_b.id).create({
            'coupon_code':coupon.code
        }).process_coupon()
        sale_order_b.recompute_coupon_lines()
        self.assertEqual(len(sale_order_b.order_line.ids),2)
        self.assertEqual(coupon.state,'used')
        self.assertEqual(coupon.sales_order_id,sale_order_b)

        sale_order_b.action_confirm()

        sale_order_a.action_draft()
        sale_order_a.action_confirm()
        #rewardlineremovedautomatically
        self.assertEqual(len(sale_order_a.order_line.ids),1)

    deftest_coupon_code_with_pricelist(self):
        #Testcase:Generateacoupon(10%discount)andapplyitonanorderwithaspecificpricelist(10%discount)

        self.env['coupon.generate.wizard'].with_context(active_id=self.code_promotion_program_with_discount.id).create({
            'generation_type':'nbr_coupon',
            'nbr_coupons':1,
        }).generate_coupon()
        coupon=self.code_promotion_program_with_discount.coupon_ids

        first_pricelist=self.env['product.pricelist'].create({
            'name':'Firstpricelist',
            'discount_policy':'with_discount',
            'item_ids':[(0,0,{
                'compute_price':'percentage',
                'base':'list_price',
                'percent_price':10,
                'applied_on':'3_global',
                'name':'Firstdiscount'
            })]
        })

        order=self.empty_order
        order.pricelist_id=first_pricelist
        order.write({'order_line':[
            (0,False,{
                'product_id':self.product_C.id,
                'name':'1ProductC',
                'product_uom':self.uom_unit.id,
                'product_uom_qty':1.0,
            })
        ]})
        self.env['sale.coupon.apply.code'].with_context(active_id=order.id).create({
            'coupon_code':coupon.code
        }).process_coupon()
        order.recompute_coupon_lines()
        self.assertEqual(len(order.order_line.ids),2)
        self.assertEqual(coupon.state,'used')
        self.assertEqual(order.amount_total,81,"SOtotalshouldbe81:(10%of100withpricelist)+10%of90withcouponcode")

    deftest_on_next_order_reward_promotion_program(self):
        #Theflow:
        #1.Createaprogram`A`thatgivesafree`ProductB`onnextorderifyoubuyaan`productA`
        #   Thisprogramshouldbecode_neededwithcode`free_B_on_next_order`
        #2.Createaprogram`B`thatgives10%discountonnextorderautomatically
        #3.CreateaSOwitha`thirdproduct`andrecomputecoupon,youSHOULDgetacoupon(fromprogram`B`)foryournextorderthatwilldiscount10%
        #4.Trytoapply`A`,itshoulderrorsincewedidnotbuyanyproductA.
        #5.AddaproductAtothecartandtrytoapply`A`again,thistimeitshouldwork
        #6.Verifyyouhave2generatedcouponsandvalidatetheSO(sothe2generatedcouponswillbevalid)
        #7.CreateanewSO(withthesamepartner)andtrytoapplycoupongeneratedby`A`.itSHOULDerrorsincewedon'thaveany`ProductB`inthecart
        #8.AddaProductBinthecart
        #9.Trytoapplyonceagaincoupongeneratedby`A`,itshouldgiveyouthefreeproductB
        #10.Trytoapplycoupongeneratedby`B`,itshouldgiveyou10%discount.
        #=>SOwillthenbe0$untilwerecomputetheorderlines

        #1.
        self.immediate_promotion_program.write({
            'promo_applicability':'on_next_order',
            'promo_code_usage':'code_needed',
            'promo_code':'free_B_on_next_order',
        })
        #2.
        self.p1=self.env['coupon.program'].create({
            'name':'Codefor10%onnextorder',
            'discount_type':'percentage',
            'discount_percentage':10.0,
            'program_type':'promotion_program',
            'promo_code_usage':'no_code_needed',
            'promo_applicability':'on_next_order',
        })
        #3.
        order=self.empty_order.copy()
        self.third_product=self.env['product.product'].create({
            'name':'ThridProduct',
            'list_price':5,
            'sale_ok':True
        })
        order.write({'order_line':[
            (0,False,{
                'product_id':self.third_product.id,
                'name':'1ThirdProduct',
                'product_uom':self.uom_unit.id,
                'product_uom_qty':1.0,
            })
        ]})
        order.recompute_coupon_lines()
        self.assertEqual(len(self.p1.coupon_ids.ids),1,"Youshouldgetacouponforyounextorderthatwilloffer10%discount")
        #4.
        withself.assertRaises(UserError):
            self.env['sale.coupon.apply.code'].with_context(active_id=order.id).create({
                'coupon_code':'free_B_on_next_order'
            }).process_coupon()
        #5.
        order.write({'order_line':[
            (0,False,{
                'product_id':self.product_A.id,
                'name':'1ProductA',
                'product_uom':self.uom_unit.id,
                'product_uom_qty':1.0,
            })
        ]})
        self.env['sale.coupon.apply.code'].with_context(active_id=order.id).create({
            'coupon_code':'free_B_on_next_order'
        }).process_coupon()
        #6.
        self.assertEqual(len(order.generated_coupon_ids),2,"YoushouldgetasecondcouponforyournextorderthatwillofferafreeProductB")
        order.action_confirm()
        #7.
        order_bis=self.empty_order
        withself.assertRaises(UserError):
            self.env['sale.coupon.apply.code'].with_context(active_id=order_bis.id).create({
                'coupon_code':order.generated_coupon_ids[1].code
            }).process_coupon()
        #8.
        order_bis.write({'order_line':[
            (0,False,{
                'product_id':self.product_B.id,
                'name':'1ProductB',
                'product_uom':self.uom_unit.id,
                'product_uom_qty':1.0,
            })
        ]})
        #9.
        self.env['sale.coupon.apply.code'].with_context(active_id=order_bis.id).create({
            'coupon_code':order.generated_coupon_ids[1].code
        }).process_coupon()
        self.assertEqual(len(order_bis.order_line),2,"YoushouldgetafreeProductB")
        #10.
        self.env['sale.coupon.apply.code'].with_context(active_id=order_bis.id).create({
            'coupon_code':order.generated_coupon_ids[0].code
        }).process_coupon()
        self.assertEqual(len(order_bis.order_line),3,"Youshouldgeta10%discountline")
        self.assertEqual(order_bis.amount_total,0,"SOtotalshouldbenull:(Paidproduct-Freeproduct=0)+10%ofnothing")

    deftest_on_next_order_reward_promotion_program_with_requirements(self):
        self.immediate_promotion_program.write({
            'promo_applicability':'on_next_order',
            'promo_code_usage':'code_needed',
            'promo_code':'free_B_on_next_order',
            'rule_minimum_amount':700,
            'rule_minimum_amount_tax_inclusion':'tax_excluded'
        })
        order=self.empty_order.copy()
        self.product_A.lst_price=700
        order.write({'order_line':[
            (0,False,{
                'product_id':self.product_A.id,
                'name':'1ProductA',
                'product_uom':self.uom_unit.id,
                'product_uom_qty':1.0,
            })
        ]})
        self.env['sale.coupon.apply.code'].with_context(active_id=order.id).create({
            'coupon_code':'free_B_on_next_order'
        }).process_coupon()
        self.assertEqual(len(self.immediate_promotion_program.coupon_ids.ids),1,"YoushouldgetacouponforyounextorderthatwillofferafreeproductB")
        order_bis=self.empty_order
        order_bis.write({'order_line':[
            (0,False,{
                'product_id':self.product_B.id,
                'name':'1ProductB',
                'product_uom':self.uom_unit.id,
                'product_uom_qty':1.0,
            })
        ]})
        withself.assertRaises(UserError):
            #ItshoulderrorsincewedidnotvalidatedthepreviousSO,sothecouponis`reserved`butnot`new`
            self.env['sale.coupon.apply.code'].with_context(active_id=order_bis.id).create({
                'coupon_code':order.generated_coupon_ids[0].code
            }).process_coupon()
        order.action_confirm()
        #ItshouldnoterroreveniftheSOdoesnothavetherequirements(700$and1productA),sincetheserequirementswhereonlyusedtogeneratethecouponthatwearenowapplying
        self.env['sale.coupon.apply.code'].with_context(active_id=order_bis.id).create({
            'coupon_code':order.generated_coupon_ids[0].code
        }).process_coupon()
        self.assertEqual(len(order_bis.order_line),2,"Youshouldget1regularproduct_Band1freeproduct_B")
        order_bis.recompute_coupon_lines()
        self.assertEqual(len(order_bis.order_line),2,"Freeproductfromacoupongeneratedfromapromotionprogramonnextordershouldnotdissapear")

    deftest_edit_and_reapply_promotion_program(self):
        #Theflow:
        #1.Createaprogramautoapplied,givingafixedamountdiscount
        #2.CreateaSOandapplytheprogram
        #3.Changetheprogram,requiringamandatorycode
        #4.ReapplytheprogramonthesameSOviacode

        #1.
        self.p1=self.env['coupon.program'].create({
            'name':'Promofixedamount',
            'promo_code_usage':'no_code_needed',
            'discount_type':'fixed_amount',
            'discount_fixed_amount':10.0,
            'program_type':'promotion_program',
        })
        #2.
        order=self.empty_order.copy()
        order.write({'order_line':[
            (0,False,{
                'product_id':self.product_A.id,
                'name':'1ProductA',
                'product_uom':self.uom_unit.id,
                'product_uom_qty':1.0,
            })
        ]})
        order.recompute_coupon_lines()
        self.assertEqual(len(order.order_line),2,"Youshouldgetadiscountline")
        #3.
        self.p1.write({
            'promo_code_usage':'code_needed',
            'promo_code':'test',
            })
        order.recompute_coupon_lines()
        #4.
        withself.assertRaises(UserError):
            self.env['sale.coupon.apply.code'].with_context(active_id=order.id).create({
                'coupon_code':'test'
            }).process_coupon()
        self.assertEqual(len(order.order_line),2,"Youshouldgetadiscountline")

    deftest_apply_program_no_reward_link(self):
        #Teststhatapplyingapromocodethatdoesnotgeneraterewardlines
        # doesnotlinkontheorder
        self.env['coupon.program'].create({
            'name':'Codefor10%onorders',
            'promo_code_usage':'code_needed',
            'promo_code':'test_10pc',
            'discount_type':'percentage',
            'discount_percentage':10.0,
            'program_type':'promotion_program',
        })
        self.empty_order.write({'order_line':[
            (0,False,{
                'product_id':self.product_C.id,
                'name':'1ProductC',
                'product_uom':self.uom_unit.id,
                'product_uom_qty':1.0,
                'price_unit':0,
            })
        ]})
        self.env['sale.coupon.apply.code'].with_context(active_id=self.empty_order.id).create({
            'coupon_code':'test_10pc',
        }).process_coupon()
        self.assertFalse(self.empty_order.code_promo_program_id,'Theprogramshouldnotbelinkedtotheorder')

        #Sameforacoupon'scode
        self.env['coupon.generate.wizard'].with_context(active_id=self.code_promotion_program_with_discount.id).create({
            'generation_type':'nbr_coupon',
            'nbr_coupons':1,
        }).generate_coupon()
        coupon=self.code_promotion_program_with_discount.coupon_ids
        self.env['sale.coupon.apply.code'].with_context(active_id=self.empty_order.id).create({
            'coupon_code':coupon.code,
        }).process_coupon()
        self.assertFalse(self.empty_order.applied_coupon_ids,'Nocouponshouldbelinkedtotheorder')
        self.assertEqual(coupon.state,'new','Couponshouldbeinanewstate')
