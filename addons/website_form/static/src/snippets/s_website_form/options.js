flectra.define('website_form_editor',function(require){
'usestrict';

constcore=require('web.core');
constFormEditorRegistry=require('website_form.form_editor_registry');
constoptions=require('web_editor.snippets.options');

constqweb=core.qweb;
const_t=core._t;

constFormEditor=options.Class.extend({
    xmlDependencies:[
        '/website_form/static/src/xml/website_form_editor.xml',
        '/google_recaptcha/static/src/xml/recaptcha.xml',
    ],

    //----------------------------------------------------------------------
    //Private
    //----------------------------------------------------------------------

    /**
     *Returnsapromisewhichisresolvedoncetherecordsofthefield
     *havebeenretrieved.
     *
     *@private
     *@param{Object}field
     *@returns{Promise<Object>}
     */
    _fetchFieldRecords:asyncfunction(field){
        //Converttherequiredbooleantoavaluedirectlyusable
        //inqwebjstoavoidduplicatingthisinthetemplates
        field.required=field.required?1:null;

        if(field.records){
            returnfield.records;
        }
        //Setselectionasrecordstoavoidaddedconplexity
        if(field.type==='selection'){
            field.records=field.selection.map(el=>({
                id:el[0],
                display_name:el[1],
            }));
        }elseif(field.relation&&field.relation!=='ir.attachment'){
            field.records=awaitthis._rpc({
                model:field.relation,
                method:'search_read',
                args:[
                    field.domain,
                    ['display_name']
                ],
            });
        }
        returnfield.records;
    },
    /**
     *GeneratesanewID.
     *
     *@private
     *@returns{string}ThenewID
     */
    _generateUniqueID(){
        return`o${Math.random().toString(36).substring(2,15)}`;
    },
    /**
     *Returnsafieldobject
     *
     *@private
     *@param{string}typethetypeofthefield
     *@param{string}nameThenameofthefieldusedalsoaslabel
     *@returns{Object}
     */
    _getCustomField:function(type,name){
        return{
            name:name,
            string:name,
            custom:true,
            type:type,
            //Defaultvaluesforx2manyfieldsandselection
            records:[{
                id:_t('Option1'),
                display_name:_t('Option1'),
            },{
                id:_t('Option2'),
                display_name:_t('Option2'),
            },{
                id:_t('Option3'),
                display_name:_t('Option3'),
            }],
        };
    },
    /**
     *ReturnsthedefaultformatInfosofafield.
     *
     *@private
     *@returns{Object}
     */
    _getDefaultFormat:function(){
        return{
            labelWidth:this.$target[0].querySelector('.s_website_form_label').style.width,
            labelPosition:'left',
            multiPosition:'horizontal',
            requiredMark:this._isRequiredMark(),
            optionalMark:this._isOptionalMark(),
            mark:this._getMark(),
        };
    },
    /**
     *@private
     *@returns{string}
     */
    _getMark:function(){
        returnthis.$target[0].dataset.mark;
    },
    /**
     *@private
     *@returns{boolean}
     */
    _isOptionalMark:function(){
        returnthis.$target[0].classList.contains('o_mark_optional');
    },
    /**
     *@private
     *@returns{boolean}
     */
    _isRequiredMark:function(){
        returnthis.$target[0].classList.contains('o_mark_required');
    },
    /**
     *@private
     *@param{Object}field
     *@returns{HTMLElement}
     */
    _renderField:function(field){
        field.id=this._generateUniqueID();
        consttemplate=document.createElement('template');
        template.innerHTML=qweb.render("website_form.field_"+field.type,{field:field}).trim();
        returntemplate.content.firstElementChild;
    },
});

constFieldEditor=FormEditor.extend({
    /**
     *@override
     */
    init:function(){
        this._super.apply(this,arguments);
        this.formEl=this.$target[0].closest('form');
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *ReturnsthetargetasafieldObject
     *
     *@private
     *@returns{Object}
     */
    _getActiveField:function(){
        letfield;
        constlabelText=this.$target.find('.s_website_form_label_content').text();
        if(this._isFieldCustom()){
            field=this._getCustomField(this.$target[0].dataset.type,labelText);
        }else{
            field=Object.assign({},this.fields[this._getFieldName()]);
            field.string=labelText;
            field.type=this._getFieldType();
        }
        field.records=this._getListItems();
        this._setActiveProperties(field);
        returnfield;
    },
    /**
     *Returnstheformatobjectofafieldcontaining
     *theposition,labelWidthandbootstrapcolclass
     *
     *@private
     *@returns{Object}
     */
    _getFieldFormat:function(){
        letrequiredMark,optionalMark;
        constmark=this.$target[0].querySelector('.s_website_form_mark');
        if(mark){
            requiredMark=this._isFieldRequired();
            optionalMark=!requiredMark;
        }
        constmultipleInput=this._getMultipleInputs();
        constformat={
            labelPosition:this._getLabelPosition(),
            labelWidth:this.$target[0].querySelector('.s_website_form_label').style.width,
            multiPosition:multipleInput&&multipleInput.dataset.display||'horizontal',
            col:[...this.$target[0].classList].filter(el=>el.match(/^col-/g)).join(''),
            requiredMark:requiredMark,
            optionalMark:optionalMark,
            mark:mark&&mark.textContent,
        };
        returnformat;
    },
    /**
     *Returnsthenameofthefield
     *
     *@private
     *@returns{string}
     */
    _getFieldName:function(){
        constmultipleName=this.$target[0].querySelector('.s_website_form_multiple');
        returnmultipleName?multipleName.dataset.name:this.$target[0].querySelector('.s_website_form_input').name;
    },
    /**
     *Returnsthetypeofthe field,canbeusedforbothcustomandexistingfields
     *
     *@private
     *@returns{string}
     */
    _getFieldType:function(){
        returnthis.$target[0].dataset.type;
    },
    /**
     *@private
     *@returns{string}
     */
    _getLabelPosition:function(){
        constlabel=this.$target[0].querySelector('.s_website_form_label');
        if(this.$target[0].querySelector('.row:not(.s_website_form_multiple)')){
            returnlabel.classList.contains('text-right')?'right':'left';
        }else{
            returnlabel.classList.contains('d-none')?'none':'top';
        }
    },
    /**
     *Returnsthemultiplecheckbox/radioelementifitexistelsenull
     *
     *@private
     *@returns{HTMLElement}
     */
    _getMultipleInputs:function(){
        returnthis.$target[0].querySelector('.s_website_form_multiple');
    },
    /**
     *@private
     *@returns{string}
     */
    _getPlaceholder:function(){
        constinput=this._getPlaceholderInput();
        returninput?input.placeholder:'';
    },
    /**
     *Returnsthefield'sinputifitisplaceholdercompatible,elsenull
     *
     *@private
     *@returns{HTMLElement}
     */
    _getPlaceholderInput:function(){
        returnthis.$target[0].querySelector('input[type="text"],input[type="email"],input[type="number"],input[type="tel"],input[type="url"],textarea');
    },
    /**
     *Returnstrueifthefieldisacustomfield,falseifitisanexistingfield
     *
     *@private
     *@returns{boolean}
     */
    _isFieldCustom:function(){
        return!!this.$target[0].classList.contains('s_website_form_custom');
    },
    /**
     *Returnstrueifthefieldisrequiredbythemodelorbytheuser.
     *
     *@private
     *@returns{boolean}
     */
    _isFieldRequired:function(){
        constclassList=this.$target[0].classList;
        returnclassList.contains('s_website_form_required')||classList.contains('s_website_form_model_required');
    },
    /**
     *SettheactivefieldpropertiesonthefieldObject
     *
     *@param{Object}fieldFieldtocompletewiththeactivefieldinfo
     */
    _setActiveProperties(field){
        constclassList=this.$target[0].classList;
        consttextarea=this.$target[0].querySelector('textarea');
        field.placeholder=this._getPlaceholder();
        field.rows=textarea&&textarea.rows;
        field.required=classList.contains('s_website_form_required');
        field.modelRequired=classList.contains('s_website_form_model_required');
        field.hidden=classList.contains('s_website_form_field_hidden');
        field.formatInfo=this._getFieldFormat();
    },
    /**
     *Settheplaceholderonthecurrentfieldiftheinputallowit
     *
     *@private
     *@param{string}value
     */
    _setPlaceholder:function(value){
        constinput=this._getPlaceholderInput();
        if(input){
            input.placeholder=value;
        }
    },
});

options.registry.WebsiteFormEditor=FormEditor.extend({
    events:_.extend({},options.Class.prototype.events||{},{
        'click.toggle-edit-message':'_onToggleEndMessageClick',
    }),

    /**
     *@override
     */
    willStart:asyncfunction(){
        const_super=this._super.bind(this);

        //Hidechangeformparametersoptionforforms
        //e.g.Usershouldnotbeenabletochangeexistingjobapplicationform
        //toopportunityformin'Applyjob'page.
        this.modelCantChange=this.$target.attr('hide-change-model')!==undefined;
        if(this.modelCantChange){
            return_super(...arguments);
        }

        //Getlistofwebsite_formcompatiblemodels.
        this.models=awaitthis._rpc({
            model:"ir.model",
            method:"search_read",
            args:[
                [['website_form_access','=',true]],
                ['id','model','name','website_form_label','website_form_key']
            ],
        });

        consttargetModelName=this.$target[0].dataset.model_name||'mail.mail';
        this.activeForm=_.findWhere(this.models,{model:targetModelName});
        //CreatetheFormActionselect
        this.selectActionEl=document.createElement('we-select');
        this.selectActionEl.setAttribute('string','Action');
        this.selectActionEl.dataset.noPreview='true';
        this.models.forEach(el=>{
            constoption=document.createElement('we-button');
            option.textContent=el.website_form_label;
            option.dataset.selectAction=el.id;
            this.selectActionEl.append(option);
        });

        return_super(...arguments);
    },
    /**
     *@override
     */
    start:function(){
        constproms=[this._super(...arguments)];
        //Disabletextedition
        this.$target.attr('contentEditable',false);
        //Makebuttonandrecaptchaeditable
        this.$target.find('.s_website_form_send,.s_website_form_recaptcha').attr('contentEditable',true);
        //Getpotentialmessage
        this.$message=this.$target.parent().find('.s_website_form_end_message');
        this.showEndMessage=false;
        //Iftheformhasnomodelitmeansanewsnippethasbeendropped.
        //ApplythedefaultmodelselectedinwillStartonit.
        if(!this.$target[0].dataset.model_name){
            proms.push(this._applyFormModel());
        }
        returnPromise.all(proms);
    },
    /**
     *@override
     */
    cleanForSave:function(){
        constmodel=this.$target[0].dataset.model_name;
        //becauseapparentlythiscanbecalledonthewrongwidgetand
        //wemaynothaveamodel,orfields...
        if(model){
            //wemaybere-whitelistingalreadywhitelistedfields.Doesn't
            //reallymatter.
            constfields=[...this.$target[0].querySelectorAll('.s_website_form_field:not(.s_website_form_custom).s_website_form_input')].map(el=>el.name);
            if(fields.length){
                //ideallywe'donlydothisifsavingtheform
                //succeeds...butnoideahowtodothat
                this._rpc({
                    model:'ir.model.fields',
                    method:'formbuilder_whitelist',
                    args:[model,_.uniq(fields)],
                });
            }
        }
        if(this.$message.length){
            this.$target.removeClass('d-none');
            this.$message.addClass("d-none");
        }

        //Cleardefaultvaluescomingfromdata-for/data-valuesattributes
        this.$target.find('input[name],textarea[name]').each(function(){
            varoriginal=$(this).data('website_form_original_default_value');
            if(original!==undefined&&$(this).val()===original){
                $(this).val('').removeAttr('value');
            }
        });
    },
    /**
     *@override
     */
    updateUI:asyncfunction(){
        //IfwewanttorerenderthexmlweneedtoavoidtheupdateUI
        //astheyareasynchronousandtheuimighttrytoupdatewhile
        //wearebuildingtheUserValueWidgets.
        if(this.rerender){
            this.rerender=false;
            awaitthis._rerenderXML();
            return;
        }
        awaitthis._super.apply(this,arguments);
        //EndMessageUI
        this.updateUIEndMessage();
    },
    /**
     *@seethis.updateUI
     */
    updateUIEndMessage:function(){
        this.$target.toggleClass("d-none",this.showEndMessage);
        this.$message.toggleClass("d-none",!this.showEndMessage);
        this.$el.find(".toggle-edit-message").toggleClass('text-primary',this.showEndMessage);
    },
    /**
     *@override
     */
    notify:function(name,data){
        this._super(...arguments);
        if(name==='field_mark'){
            this._setLabelsMark();
        }elseif(name==='add_field'){
            constfield=this._getCustomField('char','CustomText');
            field.formatInfo=data.formatInfo;
            field.formatInfo.requiredMark=this._isRequiredMark();
            field.formatInfo.optionalMark=this._isOptionalMark();
            field.formatInfo.mark=this._getMark();
            constfieldEl=this._renderField(field);
            data.$target.after(fieldEl);
            this.trigger_up('activate_snippet',{
                $snippet:$(fieldEl),
            });
        }
    },

    //--------------------------------------------------------------------------
    //Options
    //--------------------------------------------------------------------------

    /**
     *Selectthevalueofafield(hidden)thatwillbeusedonthemodelasapreset.
     *ie:TheJobyouapplyforiftheformisonthatjob'spage.
     */
    addActionField:function(previewMode,value,params){
        constfieldName=params.fieldName;
        if(params.isSelect==='true'){
            value=parseInt(value);
        }
        this._addHiddenField(value,fieldName);
    },
    /**
     *ChangestheonSuccessevent.
     */
    onSuccess:function(previewMode,value,params){
        this.$target[0].dataset.successMode=value;
        if(value==='message'){
            if(!this.$message.length){
                this.$message=$(qweb.render('website_form.s_website_form_end_message'));
            }
            this.$target.after(this.$message);
        }else{
            this.showEndMessage=false;
            this.$message.remove();
        }
    },
    /**
     *Selectthemodeltocreatewiththeform.
     */
    selectAction:asyncfunction(previewMode,value,params){
        if(this.modelCantChange){
            return;
        }
        awaitthis._applyFormModel(parseInt(value));
        this.rerender=true;
    },
    /**
     *@override
     */
    selectClass:function(previewMode,value,params){
        this._super(...arguments);
        if(params.name==='field_mark_select'){
            this._setLabelsMark();
        }
    },
    /**
     *Setthemarkstringontheform
     */
    setMark:function(previewMode,value,params){
        this.$target[0].dataset.mark=value.trim();
        this._setLabelsMark();
    },
    /**
     *Toggletherecaptchalegalterms
     */
    toggleRecaptchaLegal:function(previewMode,value,params){
        constrecaptchaLegalEl=this.$target[0].querySelector('.s_website_form_recaptcha');
        if(recaptchaLegalEl){
            recaptchaLegalEl.remove();
        }else{
            consttemplate=document.createElement('template');
            constlabelWidth=this.$target[0].querySelector('.s_website_form_label').style.width;
            template.innerHTML=qweb.render("webite_form.s_website_form_recaptcha_legal",{labelWidth:labelWidth});
            constlegal=template.content.firstElementChild;
            legal.setAttribute('contentEditable',true);
            this.$target.find('.s_website_form_submit').before(legal);
        }
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *@override
     */
    _computeWidgetState:function(methodName,params){
        switch(methodName){
            case'selectAction':
                returnthis.activeForm.id;
            case'addActionField':{
                constvalue=this.$target.find(`.s_website_form_dnoneinput[name="${params.fieldName}"]`).val();
                if(value){
                    returnvalue;
                }else{
                    returnparams.isSelect?'0':'';
                }
            }
            case'onSuccess':
                returnthis.$target[0].dataset.successMode;
            case'setMark':
                returnthis._getMark();
            case'toggleRecaptchaLegal':
                return!this.$target[0].querySelector('.s_website_form_recaptcha')||'';
        }
        returnthis._super(...arguments);
    },
    /**
     *@override
     */
    _renderCustomXML:function(uiFragment){
        if(this.modelCantChange){
            return;
        }
        //AddActionselect
        constfirstOption=uiFragment.childNodes[0];
        uiFragment.insertBefore(this.selectActionEl.cloneNode(true),firstOption);

        //AddActionrelatedoptions
        constformKey=this.activeForm.website_form_key;
        constformInfo=FormEditorRegistry.get(formKey);
        if(!formInfo||!formInfo.fields){
            return;
        }
        constproms=formInfo.fields.map(field=>this._fetchFieldRecords(field));
        returnPromise.all(proms).then(()=>{
            formInfo.fields.forEach(field=>{
                letoption;
                switch(field.type){
                    case'many2one':
                        option=this._buildSelect(field);
                        break;
                    case'char':
                        option=this._buildInput(field);
                        break;
                }
                if(field.required){
                    //Trytoretrievehiddenvalueinform,else,
                    //getdefaultvalueorformany2onefieldsthefirstoption.
                    constcurrentValue=this.$target.find(`.s_website_form_dnoneinput[name="${field.name}"]`).val();
                    constdefaultValue=field.defaultValue||field.records[0].id;
                    this._addHiddenField(currentValue||defaultValue,field.name);
                }
                uiFragment.insertBefore(option,firstOption);
            });
        });
    },
    /**
     *Addahiddenfieldtotheform
     *
     *@private
     *@param{string}value
     *@param{string}fieldName
     */
    _addHiddenField:function(value,fieldName){
        this.$target.find(`.s_website_form_dnone:has(input[name="${fieldName}"])`).remove();
        if(value){
            consthiddenField=qweb.render('website_form.field_hidden',{
                field:{
                    name:fieldName,
                    value:value,
                },
            });
            this.$target.find('.s_website_form_submit').before(hiddenField);
        }
    },
    /**
     *Returnsawe-inputelementfromthefield
     *
     *@private
     *@param{Object}field
     *@returns{HTMLElement}
     */
    _buildInput:function(field){
        constinputEl=document.createElement('we-input');
        inputEl.dataset.noPreview='true';
        inputEl.dataset.fieldName=field.name;
        inputEl.dataset.addActionField='';
        inputEl.setAttribute('string',field.string);
        inputEl.classList.add('o_we_large_input');
        returninputEl;
    },
    /**
     *Returnsawe-selectelementwithfield'srecordsasit'soptions
     *
     *@private
     *@param{Object}field
     *@return{HTMLElement}
     */
    _buildSelect:function(field){
        constselectEl=document.createElement('we-select');
        selectEl.dataset.noPreview='true';
        selectEl.dataset.fieldName=field.name;
        selectEl.dataset.isSelect='true';
        selectEl.setAttribute('string',field.string);
        if(!field.required){
            constnoneButton=document.createElement('we-button');
            noneButton.textContent='None';
            noneButton.dataset.addActionField=0;
            selectEl.append(noneButton);
        }
        field.records.forEach(el=>{
            constbutton=document.createElement('we-button');
            button.textContent=el.display_name;
            button.dataset.addActionField=el.id;
            selectEl.append(button);
        });
        returnselectEl;
    },
    /**
     *Applythemodelontheformchangingit'sfields
     *
     *@private
     *@param{Integer}modelId
     */
    _applyFormModel:asyncfunction(modelId){
        letoldFormInfo;
        if(modelId){
            constoldFormKey=this.activeForm.website_form_key;
            if(oldFormKey){
                oldFormInfo=FormEditorRegistry.get(oldFormKey);
            }
            this.$target.find('.s_website_form_field').remove();
            this.activeForm=_.findWhere(this.models,{id:modelId});
        }
        constformKey=this.activeForm.website_form_key;
        constformInfo=FormEditorRegistry.get(formKey);
        //Successpage
        if(!this.$target[0].dataset.successMode){
            this.$target[0].dataset.successMode='redirect';
        }
        if(this.$target[0].dataset.successMode==='redirect'){
            constcurrentSuccessPage=this.$target[0].dataset.successPage;
            if(formInfo&&formInfo.successPage){
                this.$target[0].dataset.successPage=formInfo.successPage;
            }elseif(!oldFormInfo||(oldFormInfo!==formInfo&&oldFormInfo.successPage&&currentSuccessPage===oldFormInfo.successPage)){
                this.$target[0].dataset.successPage='/contactus-thank-you';
            }
        }
        //Modelname
        this.$target[0].dataset.model_name=this.activeForm.model;
        //Loadtemplate
        if(formInfo){
            constformatInfo=this._getDefaultFormat();
            awaitformInfo.formFields.forEach(asyncfield=>{
                field.formatInfo=formatInfo;
                awaitthis._fetchFieldRecords(field);
                this.$target.find('.s_website_form_submit,.s_website_form_recaptcha').first().before(this._renderField(field));
            });
        }
    },
    /**
     *Setthecorrectmarkonallfields.
     *
     *@private
     */
    _setLabelsMark:function(){
        this.$target[0].querySelectorAll('.s_website_form_mark').forEach(el=>el.remove());
        constmark=this._getMark();
        if(!mark){
            return;
        }
        letfieldsToMark=[];
        constrequiredSelector='.s_website_form_model_required,.s_website_form_required';
        constfields=Array.from(this.$target[0].querySelectorAll('.s_website_form_field'));
        if(this._isRequiredMark()){
            fieldsToMark=fields.filter(el=>el.matches(requiredSelector));
        }elseif(this._isOptionalMark()){
            fieldsToMark=fields.filter(el=>!el.matches(requiredSelector));
        }
        fieldsToMark.forEach(field=>{
            letspan=document.createElement('span');
            span.classList.add('s_website_form_mark');
            span.textContent=`${mark}`;
            field.querySelector('.s_website_form_label').appendChild(span);
        });
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *@private
     */
    _onToggleEndMessageClick:function(){
        this.showEndMessage=!this.showEndMessage;
        this.updateUIEndMessage();
        this.trigger_up('activate_snippet',{
            $snippet:this.showEndMessage?this.$message:this.$target,
        });
    },
});

constauthorizedFieldsCache={};

options.registry.WebsiteFieldEditor=FieldEditor.extend({
    events:_.extend({},FieldEditor.prototype.events,{
        'clickwe-button.o_we_select_remove_option':'_onRemoveItemClick',
        'clickwe-button.o_we_list_add_optional':'_onAddCustomItemClick',
        'clickwe-button.o_we_list_add_existing':'_onAddExistingItemClick',
        'clickwe-listwe-select':'_onAddItemSelectClick',
        'inputwe-listinput':'_onListItemInput',
    }),

    /**
     *@override
     */
    init:function(){
        this._super.apply(this,arguments);
        this.rerender=true;
    },
    /**
     *@override
     */
    willStart:asyncfunction(){
        const_super=this._super.bind(this);
        //Gettheauthorizedexistingfieldsfortheformmodel
        constmodel=this.formEl.dataset.model_name;
        letgetFields;
        if(modelinauthorizedFieldsCache){
            getFields=authorizedFieldsCache[model];
        }else{
            getFields=this._rpc({
                model:"ir.model",
                method:"get_authorized_fields",
                args:[model],
            });
            authorizedFieldsCache[model]=getFields;
        }

        this.existingFields=awaitgetFields.then(fields=>{
            this.fields=_.each(fields,function(field,fieldName){
                field.name=fieldName;
                field.domain=field.domain||[];
            });
            //Createthebuttonsforthetypewe-select
            returnObject.keys(fields).map(key=>{
                constfield=fields[key];
                constbutton=document.createElement('we-button');
                button.textContent=field.string;
                button.dataset.existingField=field.name;
                returnbutton;
            }).sort((a,b)=>(a.textContent>b.textContent)?1:(a.textContent<b.textContent)?-1:0);
        });
        return_super(...arguments);
    },
    /**
     *@override
     */
    cleanForSave:function(){
        this.$target[0].querySelectorAll('#editable_select').forEach(el=>el.remove());
        constselect=this._getSelect();
        if(select&&this.listTable){
            select.style.display='';
            select.innerHTML='';
            //Rebuildtheselectfromthewe-list
            this.listTable.querySelectorAll('input').forEach(el=>{
                constoption=document.createElement('option');
                option.textContent=el.value;
                option.value=this._isFieldCustom()?el.value:el.name;
                select.appendChild(option);
            });
        }
    },
    /**
     *@override
     */
    updateUI:asyncfunction(){
        //SeeFormupdateUI
        if(this.rerender){
            constselect=this._getSelect();
            if(select&&!this.$target[0].querySelector('#editable_select')){
                select.style.display='none';
                consteditableSelect=document.createElement('div');
                editableSelect.id='editable_select';
                editableSelect.classList='form-controls_website_form_input';
                select.parentElement.appendChild(editableSelect);
            }
            this.rerender=false;
            awaitthis._rerenderXML().then(()=>this._renderList());
            return;
        }
        awaitthis._super.apply(this,arguments);
    },
    /**
     *@override
     */
    onFocus:function(){
        //Otherfieldstypemighthavechangetoanexistingtype.
        //Weneedtoreloadtheexistingtypelist.
        this.rerender=true;
    },
    /**
     *Rerenderstheclonetoavoididduplicates.
     *Renderingthelistbeforereplacingthefieldisneeded
     *forselects,inordertobuildthis.listTable.
     *
     *@override
     */
    onClone(){
        this._renderList();
        constfield=this._getActiveField();
        constfieldEl=this._renderField(field);
        this._replaceFieldElement(fieldEl);
    },

    //----------------------------------------------------------------------
    //Options
    //----------------------------------------------------------------------

    /**
     *Replacethecurrentfieldwiththecustomfieldselected.
     */
    customField:asyncfunction(previewMode,value,params){
        //BothcustomFieldandexistingFieldarecalledwhenselectinganoption
        //valueis''forthemethodthatshouldnotbecalled.
        if(!value){
            return;
        }
        constname=this.el.querySelector(`[data-custom-field="${value}"]`).textContent;
        constfield=this._getCustomField(value,`Custom${name}`);
        this._setActiveProperties(field);
        awaitthis._replaceField(field);
        this.rerender=true;
    },
    /**
     *Replacethecurrentfieldwiththeexistingfieldselected.
     */
    existingField:asyncfunction(previewMode,value,params){
        //seecustomField
        if(!value){
            return;
        }
        constfield=Object.assign({},this.fields[value]);
        this._setActiveProperties(field);
        awaitthis._replaceField(field);
        this.rerender=true;
    },
    /**
     *Setthenameofthefieldonthelabel
     */
    setLabelText:function(previewMode,value,params){
        this.$target.find('.s_website_form_label_content').text(value);
        if(this._isFieldCustom()){
            constmultiple=this.$target[0].querySelector('.s_website_form_multiple');
            if(multiple){
                multiple.dataset.name=value;
            }
            this.$target[0].querySelectorAll('.s_website_form_input').forEach(el=>el.name=value);
        }
    },
    /*
    *Settheplaceholderoftheinput
    */
    setPlaceholder:function(previewMode,value,params){
        this._setPlaceholder(value);
    },
    /**
     *Replacethefieldwiththesamefieldhavingthelabelinadifferentposition.
     */
    selectLabelPosition:asyncfunction(previewMode,value,params){
        constfield=this._getActiveField();
        field.formatInfo.labelPosition=value;
        awaitthis._replaceField(field);
        this.rerender=true;
    },
    selectType:asyncfunction(previewMode,value,params){
        constfield=this._getActiveField();
        field.type=value;
        awaitthis._replaceField(field);
    },
    /**
     *Selectthedisplayofthemulticheckboxfield(vertical&horizontal)
     */
    multiCheckboxDisplay:function(previewMode,value,params){
        consttarget=this._getMultipleInputs();
        target.querySelectorAll('.checkbox,.radio').forEach(el=>{
            if(value==='horizontal'){
                el.classList.add('col-lg-4','col-md-6');
            }else{
                el.classList.remove('col-lg-4','col-md-6');
            }
        });
        target.dataset.display=value;
    },
    /**
     *Setthefieldasrequiredornot
     */
    toggleRequired:function(previewMode,value,params){
        constisRequired=this.$target[0].classList.contains(params.activeValue);
        this.$target[0].classList.toggle(params.activeValue,!isRequired);
        this.$target[0].querySelectorAll('input,select,textarea').forEach(el=>el.toggleAttribute('required',!isRequired));
        this.trigger_up('option_update',{
            optionName:'WebsiteFormEditor',
            name:'field_mark',
        });
    },

    //----------------------------------------------------------------------
    //Private
    //----------------------------------------------------------------------

    /**
     *@override
     */
    _computeWidgetState:function(methodName,params){
        switch(methodName){
            case'customField':
                returnthis._isFieldCustom()?this._getFieldType():'';
            case'existingField':
                returnthis._isFieldCustom()?'':this._getFieldName();
            case'setLabelText':
                returnthis.$target.find('.s_website_form_label_content').text();
            case'setPlaceholder':
                returnthis._getPlaceholder();
            case'selectLabelPosition':
                returnthis._getLabelPosition();
            case'selectType':
                returnthis._getFieldType();
            case'multiCheckboxDisplay':{
                consttarget=this._getMultipleInputs();
                returntarget?target.dataset.display:'';
            }
            case'toggleRequired':
                returnthis.$target[0].classList.contains(params.activeValue)?params.activeValue:'false';
        }
        returnthis._super(...arguments);
    },
    /**
     *@override
     */
    _computeWidgetVisibility:function(widgetName,params){
        switch(widgetName){
            case'char_input_type_opt':
                return!this.$target[0].classList.contains('s_website_form_custom')&&['char','email','tel','url'].includes(this.$target[0].dataset.type);
            case'multi_check_display_opt':
                return!!this._getMultipleInputs();
            case'placeholder_opt':
                return!!this._getPlaceholderInput();
            case'required_opt':
            case'hidden_opt':
            case'type_opt':
                return!this.$target[0].classList.contains('s_website_form_model_required');
        }
        returnthis._super(...arguments);
    },
    /**
     *@override
     */
    _renderCustomXML:function(uiFragment){
        constselectEl=uiFragment.querySelector('we-select[data-name="type_opt"]');
        constcurrentFieldName=this._getFieldName();
        constfieldsInForm=Array.from(this.formEl.querySelectorAll('.s_website_form_field:not(.s_website_form_custom).s_website_form_input')).map(el=>el.name).filter(el=>el!==currentFieldName);
        constavailableFields=this.existingFields.filter(el=>!fieldsInForm.includes(el.dataset.existingField));
        if(availableFields.length){
            consttitle=document.createElement('we-title');
            title.textContent='Existingfields';
            availableFields.unshift(title);
            availableFields.forEach(option=>selectEl.append(option.cloneNode(true)));
        }
    },
    /**
     *Replacesthetargetcontentwiththefieldprovided.
     *
     *@private
     *@param{Object}field
     *@returns{Promise}
     */
    _replaceField:asyncfunction(field){
        awaitthis._fetchFieldRecords(field);
        constfieldEl=this._renderField(field);
        this._replaceFieldElement(fieldEl);
    },
    /**
     *Replacesthetargetwithprovidedfield.
     *
     *@private
     *@param{HTMLElement}fieldEl
     */
    _replaceFieldElement(fieldEl){
        [...this.$target[0].childNodes].forEach(node=>node.remove());
        [...fieldEl.childNodes].forEach(node=>this.$target[0].appendChild(node));
        [...fieldEl.attributes].forEach(el=>this.$target[0].removeAttribute(el.nodeName));
        [...fieldEl.attributes].forEach(el=>this.$target[0].setAttribute(el.nodeName,el.nodeValue));
    },

    /**
     *TodoafterrerenderXMLtoaddthelisttotheoptions
     *
     *@private
     */
    _renderList:function(){
        letaddItemButton,addItemTitle,listTitle;
        constselect=this._getSelect();
        constmultipleInputs=this._getMultipleInputs();
        this.listTable=document.createElement('table');
        constisCustomField=this._isFieldCustom();

        if(select){
            listTitle='OptionsList';
            addItemTitle='AddnewOption';
            select.querySelectorAll('option').forEach(opt=>{
                this._addItemToTable(opt.value,opt.textContent.trim());
            });
            this._renderListItems();
        }elseif(multipleInputs){
            listTitle=multipleInputs.querySelector('.radio')?'RadioList':'CheckboxList';
            addItemTitle='AddnewCheckbox';
            multipleInputs.querySelectorAll('.checkbox,.radio').forEach(opt=>{
                this._addItemToTable(opt.querySelector('input').value,opt.querySelector('.s_website_form_check_label').textContent.trim());
            });
        }else{
            return;
        }

        if(isCustomField){
            addItemButton=document.createElement('we-button');
            addItemButton.textContent=addItemTitle;
            addItemButton.classList.add('o_we_list_add_optional');
            addItemButton.dataset.noPreview='true';
        }else{
            addItemButton=document.createElement('we-select');
            addItemButton.classList.add('o_we_user_value_widget');//Tododontuseuservaluewidgetclass
            consttogglerEl=document.createElement('we-toggler');
            togglerEl.textContent=addItemTitle;
            addItemButton.appendChild(togglerEl);
            constselectMenuEl=document.createElement('we-selection-items');
            addItemButton.appendChild(selectMenuEl);
            this._loadListDropdown(selectMenuEl);
        }
        constselectInputEl=document.createElement('we-list');
        consttitle=document.createElement('we-title');
        title.textContent=listTitle;
        selectInputEl.appendChild(title);
        consttableWrapper=document.createElement('div');
        tableWrapper.classList.add('oe_we_table_wraper');
        tableWrapper.appendChild(this.listTable);
        selectInputEl.appendChild(tableWrapper);
        selectInputEl.appendChild(addItemButton);
        this.el.insertBefore(selectInputEl,this.el.querySelector('[data-set-placeholder]'));
        this._makeListItemsSortable();
    },
    /**
     *Loadthedropdownofthelistwiththerecordsmissingfromthelist.
     *
     *@private
     *@param{HTMLElement}selectMenu
     */
    _loadListDropdown:function(selectMenu){
        selectMenu=selectMenu||this.el.querySelector('we-listwe-selection-items');
        if(selectMenu){
            selectMenu.innerHTML='';
            constfield=Object.assign({},this.fields[this._getFieldName()]);
            this._fetchFieldRecords(field).then(()=>{
                letbuttonItems;
                constoptionIds=Array.from(this.listTable.querySelectorAll('input')).map(opt=>{
                    returnfield.type==='selection'?opt.name:parseInt(opt.name);
                });
                constavailableRecords=(field.records||[]).filter(el=>!optionIds.includes(el.id));
                if(availableRecords.length){
                    buttonItems=availableRecords.map(el=>{
                        constoption=document.createElement('we-button');
                        option.classList.add('o_we_list_add_existing');
                        option.dataset.addOption=el.id;
                        option.dataset.noPreview='true';
                        option.textContent=el.display_name;
                        returnoption;
                    });
                }else{
                    consttitle=document.createElement('we-title');
                    title.textContent='Nomorerecords';
                    buttonItems=[title];
                }
                buttonItems.forEach(button=>selectMenu.appendChild(button));
            });
        }
    },
    /**
     *@private
     */
    _makeListItemsSortable:function(){
        $(this.listTable).sortable({
            axis:'y',
            handle:'.o_we_drag_handle',
            items:'tr',
            cursor:'move',
            opacity:0.6,
            stop:(event,ui)=>{
                this._renderListItems();
            },
        });
    },
    /**
     *@private
     *@param{string}id
     *@param{string}text
     */
    _addItemToTable:function(id,text){
        constisCustomField=this._isFieldCustom();
        constdraggableEl=document.createElement('we-button');
        draggableEl.classList.add('o_we_drag_handle','o_we_link','fa','fa-fw','fa-arrows');
        draggableEl.dataset.noPreview='true';
        constinputEl=document.createElement('input');
        inputEl.type='text';
        if(text){
            inputEl.value=text;
        }
        if(!isCustomField&&id){
            inputEl.name=id;
        }
        inputEl.disabled=!isCustomField;
        consttrEl=document.createElement('tr');
        constbuttonEl=document.createElement('we-button');
        buttonEl.classList.add('o_we_select_remove_option','o_we_link','o_we_text_danger','fa','fa-fw','fa-minus');
        buttonEl.dataset.removeOption=id;
        buttonEl.dataset.noPreview='true';
        constdraggableTdEl=document.createElement('td');
        constinputTdEl=document.createElement('td');
        constbuttonTdEl=document.createElement('td');
        draggableTdEl.appendChild(draggableEl);
        trEl.appendChild(draggableTdEl);
        inputTdEl.appendChild(inputEl);
        trEl.appendChild(inputTdEl);
        buttonTdEl.appendChild(buttonEl);
        trEl.appendChild(buttonTdEl);
        this.listTable.appendChild(trEl);
        if(isCustomField){
            inputEl.focus();
        }
    },
    /**
     *Applythewe-listonthetargetandrebuildtheinput(s)
     *
     *@private
     */
    _renderListItems:function(){
        constmultiInputsWrap=this._getMultipleInputs();
        constselectWrap=this.$target[0].querySelector('#editable_select');
        constisRequiredField=this._isFieldRequired();
        constname=this._getFieldName();
        if(multiInputsWrap){
            consttype=multiInputsWrap.querySelector('.radio')?'radio':'checkbox';
            multiInputsWrap.innerHTML='';
            constparams={
                field:{
                    name:name,
                    id:this._generateUniqueID(),
                    required:isRequiredField,
                    formatInfo:{
                        multiPosition:multiInputsWrap.dataset.display,
                    }
                }
            };
            this._getListItems().forEach((record,idx)=>{
                params.record_index=idx;
                params.record=record;
                consttemplate=document.createElement('template');
                template.innerHTML=qweb.render(`website_form.${type}`,params);
                multiInputsWrap.appendChild(template.content.firstElementChild);
            });
        }elseif(selectWrap){
            selectWrap.innerHTML='';
            this.listTable.querySelectorAll('input').forEach(el=>{
                constoption=document.createElement('div');
                option.id=(el.name||el.value);
                option.classList.add('s_website_form_select_item');
                option.textContent=el.value;
                selectWrap.appendChild(option);
            });
        }
    },
    /**
     *Returnsanarraybasedonthewe-listcontainingthefield'srecords
     *
     *@returns{Array}
     */
    _getListItems:function(){
        if(!this.listTable){
            returnnull;
        }
        constisCustomField=this._isFieldCustom();
        constrecords=[];
        this.listTable.querySelectorAll('input').forEach(el=>{
            constid=isCustomField?el.value:el.name;
            records.push({
                id:id,
                display_name:el.value,
            });
        });
        returnrecords;
    },
    /**
     *Returnstheselectelementifitexistelsenull
     *
     *@private
     *@returns{HTMLElement}
     */
    _getSelect:function(){
        returnthis.$target[0].querySelector('select');
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *@private
     *@param{Event}ev
     */
    _onRemoveItemClick:function(ev){
        ev.target.closest('tr').remove();
        this._loadListDropdown();
        this._renderListItems();
    },
    /**
     *@private
     *@param{Event}ev
     */
    _onAddCustomItemClick:function(ev){
        this._addItemToTable();
        this._makeListItemsSortable();
        this._renderListItems();
    },
    /**
     *@private
     *@param{Event}ev
     */
    _onAddExistingItemClick:function(ev){
        constvalue=ev.currentTarget.dataset.addOption;
        this._addItemToTable(value,ev.currentTarget.textContent);
        this._makeListItemsSortable();
        this._loadListDropdown();
        this._renderListItems();
    },
    /**
     *@private
     *@param{Event}ev
     */
    _onAddItemSelectClick:function(ev){
        ev.currentTarget.querySelector('we-toggler').classList.toggle('active');
    },
    /**
     *@private
     */
    _onListItemInput:function(){
        this._renderListItems();
    },
});

options.registry.AddFieldForm=FormEditor.extend({
    isTopOption:true,

    //--------------------------------------------------------------------------
    //Options
    //--------------------------------------------------------------------------

    /**
     *Addacharfieldattheendoftheform.
     *Newfieldissetasactive
     */
    addField:asyncfunction(previewMode,value,params){
        constfield=this._getCustomField('char','CustomText');
        field.formatInfo=this._getDefaultFormat();
        constfieldEl=this._renderField(field);
        this.$target.find('.s_website_form_submit,.s_website_form_recaptcha').first().before(fieldEl);
        this.trigger_up('activate_snippet',{
            $snippet:$(fieldEl),
        });
    },
});

options.registry.AddField=FieldEditor.extend({
    isTopOption:true,

    //--------------------------------------------------------------------------
    //Options
    //--------------------------------------------------------------------------

    /**
     *Addacharfieldwithactivefieldpropertiesaftertheactivefield.
     *Newfieldissetasactive
     */
    addField:asyncfunction(previewMode,value,params){
        this.trigger_up('option_update',{
            optionName:'WebsiteFormEditor',
            name:'add_field',
            data:{
                formatInfo:this._getFieldFormat(),
                $target:this.$target,
            },
        });
    },
});

//Superclassforoptionsthatneedtodisableabuttonfromthesnippetoverlay
constDisableOverlayButtonOption=options.Class.extend({
    //Disableabuttonofthesnippetoverlay
    disableButton:function(buttonName,message){
        //TODOrefactorinmaster
        constclassName='oe_snippet_'+buttonName;
        this.$overlay.add(this.$overlay.data('$optionsSection')).on('click','.'+className,this.preventButton);
        const$button=this.$overlay.add(this.$overlay.data('$optionsSection')).find('.'+className);
        $button.attr('title',message).tooltip({delay:0});
        //TODOInmaster:add`o_disabled`butkeepactualclass.
        $button.removeClass(className);//Disablethefunctionnality
    },

    preventButton:function(event){
        //Snippetoptionsbindtheirfunctionsbeforetheeditor,sowe
        //can'tcleanlyunbindtheeditoronRemovefunctionfromhere
        event.preventDefault();
        event.stopImmediatePropagation();
    }
});

//Disableduplicatebuttonformodelfields
options.registry.WebsiteFormFieldModel=DisableOverlayButtonOption.extend({
    start:function(){
        this.disableButton('clone',_t('Youcan\'tduplicateamodelfield.'));
        returnthis._super.apply(this,arguments);
    }
});

//Disabledeletebuttonformodelrequiredfields
options.registry.WebsiteFormFieldRequired=DisableOverlayButtonOption.extend({
    start:function(){
        this.disableButton('remove',_t('Youcan\'tremoveafieldthatisrequiredbythemodelitself.'));
        returnthis._super.apply(this,arguments);
    }
});

//Disabledeleteandduplicatebuttonforsubmit
options.registry.WebsiteFormSubmitRequired=DisableOverlayButtonOption.extend({
    start:function(){
        this.disableButton('remove',_t('Youcan\'tremovethesubmitbuttonoftheform'));
        this.disableButton('clone',_t('Youcan\'tduplicatethesubmitbuttonoftheform.'));
        returnthis._super.apply(this,arguments);
    }
});
});
