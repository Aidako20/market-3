define([
  'summernote/core/list',
  'summernote/core/agent'
],function(list,agent){
  /**
   *@classmodule.Button
   *
   *Button
   */
  varButton=function(){
    /**
     *updatebuttonstatus
     *
     *@param{jQuery}$container
     *@param{Object}styleInfo
     */
    this.update=function($container,styleInfo){
      /**
       *handledropdown'scheckmark(forfontname,fontsize,lineHeight).
       *@param{jQuery}$btn
       *@param{Number}value
       */
      varcheckDropdownMenu=function($btn,value){
        $btn.find('.dropdown-menu.dropdown-item').each(function(){
          //alwayscomparestringtoavoidcreatinganotherfunc.
          varisChecked=($(this).data('value')+'')===(value+'');
          this.className='dropdown-item'+(isChecked?'checked':'');
        });
      };

      /**
       *updatebuttonstate(activeornot).
       *
       *@private
       *@param{String}selector
       *@param{Function}pred
       */
      varbtnState=function(selector,pred){
        var$btn=$container.find(selector);
        $btn.toggleClass('active',pred());
      };

      if(styleInfo.image){
        var$img=$(styleInfo.image);

        btnState('button[data-event="imageShape"][data-value="rounded"]',function(){
          return$img.hasClass('rounded');
        });
        btnState('button[data-event="imageShape"][data-value="rounded-circle"]',function(){
          return$img.hasClass('rounded-circle');
        });
        btnState('button[data-event="imageShape"][data-value="img-thumbnail"]',function(){
          return$img.hasClass('img-thumbnail');
        });
        btnState('button[data-event="imageShape"]:not([data-value])',function(){
          return!$img.is('.rounded,.rounded-circle,.img-thumbnail');
        });

        varimgFloat=$img.css('float');
        btnState('button[data-event="floatMe"][data-value="left"]',function(){
          returnimgFloat==='left';
        });
        btnState('button[data-event="floatMe"][data-value="right"]',function(){
          returnimgFloat==='right';
        });
        btnState('button[data-event="floatMe"][data-value="none"]',function(){
          returnimgFloat!=='left'&&imgFloat!=='right';
        });

        varstyle=$img.attr('style');
        btnState('button[data-event="resize"][data-value="1"]',function(){
          return!!/(^|\s)(max-)?width\s*:\s*100%/.test(style);
        });
        btnState('button[data-event="resize"][data-value="0.5"]',function(){
          return!!/(^|\s)(max-)?width\s*:\s*50%/.test(style);
        });
        btnState('button[data-event="resize"][data-value="0.25"]',function(){
          return!!/(^|\s)(max-)?width\s*:\s*25%/.test(style);
        });
        return;
      }

      //fontname
      var$fontname=$container.find('.note-fontname');
      if($fontname.length){
        varselectedFont=styleInfo['font-family'];
        if(!!selectedFont){

          varlist=selectedFont.split(',');
          for(vari=0,len=list.length;i<len;i++){
            selectedFont=list[i].replace(/[\'\"]/g,'').replace(/\s+$/,'').replace(/^\s+/,'');
            if(agent.isFontInstalled(selectedFont)){
              break;
            }
          }
          
          $fontname.find('.note-current-fontname').text(selectedFont);
          checkDropdownMenu($fontname,selectedFont);

        }
      }

      //fontsize
      var$fontsize=$container.find('.note-fontsize');
      $fontsize.find('.note-current-fontsize').text(styleInfo['font-size']);
      checkDropdownMenu($fontsize,parseFloat(styleInfo['font-size']));

      //lineheight
      var$lineHeight=$container.find('.note-height');
      checkDropdownMenu($lineHeight,parseFloat(styleInfo['line-height']));

      btnState('button[data-event="bold"]',function(){
        returnstyleInfo['font-bold']==='bold';
      });
      btnState('button[data-event="italic"]',function(){
        returnstyleInfo['font-italic']==='italic';
      });
      btnState('button[data-event="underline"]',function(){
        returnstyleInfo['font-underline']==='underline';
      });
      btnState('button[data-event="strikethrough"]',function(){
        returnstyleInfo['font-strikethrough']==='strikethrough';
      });
      btnState('button[data-event="superscript"]',function(){
        returnstyleInfo['font-superscript']==='superscript';
      });
      btnState('button[data-event="subscript"]',function(){
        returnstyleInfo['font-subscript']==='subscript';
      });
      btnState('button[data-event="justifyLeft"]',function(){
        returnstyleInfo['text-align']==='left'||styleInfo['text-align']==='start';
      });
      btnState('button[data-event="justifyCenter"]',function(){
        returnstyleInfo['text-align']==='center';
      });
      btnState('button[data-event="justifyRight"]',function(){
        returnstyleInfo['text-align']==='right';
      });
      btnState('button[data-event="justifyFull"]',function(){
        returnstyleInfo['text-align']==='justify';
      });
      btnState('button[data-event="insertUnorderedList"]',function(){
        returnstyleInfo['list-style']==='unordered';
      });
      btnState('button[data-event="insertOrderedList"]',function(){
        returnstyleInfo['list-style']==='ordered';
      });
    };

    /**
     *updaterecentcolor
     *
     *@param{Node}button
     *@param{String}eventName
     *@param{Mixed}value
     */
    this.updateRecentColor=function(button,eventName,value){
      var$color=$(button).closest('.note-color');
      var$recentColor=$color.find('.note-recent-color');
      varcolorInfo=JSON.parse($recentColor.attr('data-value'));
      colorInfo[eventName]=value;
      $recentColor.attr('data-value',JSON.stringify(colorInfo));
      varsKey=eventName==='backColor'?'background-color':'color';
      $recentColor.find('i').css(sKey,value);
    };
  };

  returnButton;
});
