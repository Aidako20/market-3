flectra.define('web_editor.test_utils',function(require){
"usestrict";

varajax=require('web.ajax');
varMockServer=require('web.MockServer');
vartestUtils=require('web.test_utils');
varWidget=require('web.Widget');
varWysiwyg=require('web_editor.wysiwyg');
varoptions=require('web_editor.snippets.options');

constCOLOR_PICKER_TEMPLATE=`
    <tt-name="web_editor.colorpicker">
        <colorpicker>
            <divclass="o_colorpicker_section"data-name="theme"data-display="ThemeColors"data-icon-class="fafa-flask">
                <buttondata-color="o-color-1"/>
                <buttondata-color="o-color-2"/>
                <buttondata-color="o-color-3"/>
                <buttondata-color="o-color-4"/>
                <buttondata-color="o-color-5"/>
            </div>
            <divclass="o_colorpicker_section"data-name="transparent_grayscale"data-display="TransparentColors"data-icon-class="fafa-eye-slash">
                <buttonclass="o_btn_transparent"/>
                <buttondata-color="black-25"/>
                <buttondata-color="black-50"/>
                <buttondata-color="black-75"/>
                <buttondata-color="white-25"/>
                <buttondata-color="white-50"/>
                <buttondata-color="white-75"/>
            </div>
            <divclass="o_colorpicker_section"data-name="common"data-display="CommonColors"data-icon-class="fafa-paint-brush"/>
        </colorpicker>
    </t>`;
constSNIPPETS_TEMPLATE=`
    <h2id="snippets_menu">Addblocks</h2>
    <divid="o_scroll">
        <divid="snippet_structure"class="o_panel">
            <divclass="o_panel_header">FirstPanel</div>
            <divclass="o_panel_body">
                <divname="Separator"data-oe-type="snippet"data-oe-thumbnail="/website/static/src/img/snippets_thumbs/s_separator.png">
                    <divclass="s_hrpt32pb32">
                        <hrclass="s_hr_1pxs_hr_solidw-100mx-auto"/>
                    </div>
                </div>
                <divname="Content"data-oe-type="snippet"data-oe-thumbnail="/website/static/src/img/snippets_thumbs/s_text_block.png">
                    <sectionname="Content+Options"class="test_option_allpt32pb32"data-oe-type="snippet"data-oe-thumbnail="/website/static/src/img/snippets_thumbs/s_text_block.png">
                        <divclass="container">
                            <divclass="row">
                                <divclass="col-lg-10offset-lg-1pt32pb32">
                                    <h2>Title</h2>
                                    <pclass="leado_default_snippet_text">Content</p>
                                </div>
                            </div>
                        </div>
                    </section>
                </div>
            </div>
        </div>
    </div>
    <divid="snippet_options"class="d-none">
        <divdata-js="many2one"data-selector="[data-oe-many2one-model]:not([data-oe-readonly])"data-no-check="true"/>
        <divdata-js="content"
            data-selector=".s_hr,.test_option_all"
            data-drop-in=".note-editable"
            data-drop-near="p,h1,h2,h3,blockquote,.s_hr"/>
        <divdata-js="sizing_y"data-selector=".s_hr,.test_option_all"/>
        <divdata-selector=".test_option_all">
            <we-colorpickerstring="BackgroundColor"data-select-style="true"data-css-property="background-color"data-color-prefix="bg-"/>
        </div>
        <divdata-js="BackgroundImage"data-selector=".test_option_all">
            <we-buttondata-choose-image="true"data-no-preview="true">
                <iclass="fafa-picture-o"/>BackgroundImage
            </we-button>
        </div>
        <divdata-js="option_test"data-selector=".s_hr">
            <we-selectstring="Alignment">
                <we-buttondata-select-class="align-items-start">Top</we-button>
                <we-buttondata-select-class="align-items-center">Middle</we-button>
                <we-buttondata-select-class="align-items-end">Bottom</we-button>
                <we-buttondata-select-class="align-items-stretch">Equalheight</we-button>
            </we-select>
        </div>
    </div>`;

MockServer.include({
    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *@override
     *@private
     *@returns{Promise}
     */
    async_performRpc(route,args){
        if(args.model==="ir.ui.view"){
            if(args.method==='read_template'&&args.args[0]==="web_editor.colorpicker"){
                returnCOLOR_PICKER_TEMPLATE;
            }
            if(args.method==='render_public_asset'&&args.args[0]==="web_editor.snippets"){
                returnSNIPPETS_TEMPLATE;
            }
        }
        returnthis._super(...arguments);
    },
});

/**
 *Optionswithanimationandeditionfortest.
 */
options.registry.option_test=options.Class.extend({
    cleanForSave:function(){
        this.$target.addClass('cleanForSave');
    },
    onBuilt:function(){
        this.$target.addClass('built');
    },
    onBlur:function(){
        this.$target.removeClass('focus');
    },
    onClone:function(){
        this.$target.addClass('clone');
        this.$target.removeClass('focus');
    },
    onFocus:function(){
        this.$target.addClass('focus');
    },
    onMove:function(){
        this.$target.addClass('move');
    },
    onRemove:function(){
        this.$target.closest('.note-editable').addClass('snippet_has_removed');
    },
});


/**
 *ConstructorWysiwygTestwhyeditableandunbreakablenodeusedintest.
 */
varWysiwygTest=Wysiwyg.extend({
    _parentToDestroyForTest:null,
    /**
     *Override'destroy'ofdiscusssothatitcalls'destroy'ontheparent.
     *
     *@override
     */
    destroy:function(){
        unpatch();
        this._super();
        this.$target.remove();
        this._parentToDestroyForTest.destroy();
    },
});


functionpatch(){
    testUtils.mock.patch(ajax,{
        loadAsset:function(xmlId){
            if(xmlId==='template.assets'){
                returnPromise.resolve({
                    cssLibs:[],
                    cssContents:['body{background-color:red;}']
                });
            }
            if(xmlId==='template.assets_all_style'){
                returnPromise.resolve({
                    cssLibs:$('link[href]:not([type="image/x-icon"])').map(function(){
                        return$(this).attr('href');
                    }).get(),
                    cssContents:['body{background-color:red;}']
                });
            }
            throw'Wrongtemplate';
        },
    });
}

functionunpatch(){
    testUtils.mock.unpatch(ajax);
}

/**
 *@param{object}data
 *@returns{object}
 */
functionwysiwygData(data){
    return_.defaults({},data,{
        'ir.ui.view':{
            fields:{
                display_name:{
                    string:"Displayedname",
                    type:"char",
                },
            },
            records:[],
            read_template(args){
                if(args[0]==='web_editor.colorpicker'){
                    returnCOLOR_PICKER_TEMPLATE;
                }
            },
            render_template(args){
                if(args[0]==='web_editor.snippets'){
                    returnSNIPPETS_TEMPLATE;
                }
            },
        },
        'ir.attachment':{
            fields:{
                display_name:{
                    string:"display_name",
                    type:'char',
                },
                description:{
                    string:"description",
                    type:'char',
                },
                mimetype:{
                    string:"mimetype",
                    type:'char',
                },
                checksum:{
                    string:"checksum",
                    type:'char',
                },
                url:{
                    string:"url",
                    type:'char',
                },
                type:{
                    string:"type",
                    type:'char',
                },
                res_id:{
                    string:"res_id",
                    type:'integer',
                },
                res_model:{
                    string:"res_model",
                    type:'char',
                },
                public:{
                    string:"public",
                    type:'boolean',
                },
                access_token:{
                    string:"access_token",
                    type:'char',
                },
                image_src:{
                    string:"image_src",
                    type:'char',
                },
                image_width:{
                    string:"image_width",
                    type:'integer',
                },
                image_height:{
                    string:"image_height",
                    type:'integer',
                },
                original_id:{
                    string:"original_id",
                    type:'many2one',
                    relation:'ir.attachment',
                },
            },
            records:[{
                id:1,
                name:'image',
                description:'',
                mimetype:'image/png',
                checksum:false,
                url:'/web/image/123/transparent.png',
                type:'url',
                res_id:0,
                res_model:false,
                public:true,
                access_token:false,
                image_src:'/web/image/123/transparent.png',
                image_width:256,
                image_height:256,
            }],
            generate_access_token:function(){
                return;
            },
        },
    });
}

/**
 *Createthewysiwyginstancefortest(containspatch,usefullir.ui.view,snippets).
 *
 *@param{object}params
 */
asyncfunctioncreateWysiwyg(params){
    patch();
    params.data=wysiwygData(params.data);

    varparent=newWidget();
    awaittestUtils.mock.addMockEnvironment(parent,params);

    varwysiwygOptions=_.extend({},params.wysiwygOptions,{
        recordInfo:{
            context:{},
            res_model:'module.test',
            res_id:1,
        },
        useOnlyTestUnbreakable:params.useOnlyTestUnbreakable,
    });

    varwysiwyg=newWysiwygTest(parent,wysiwygOptions);
    wysiwyg._parentToDestroyForTest=parent;

    var$textarea=$('<textarea/>');
    if(wysiwygOptions.value){
        $textarea.val(wysiwygOptions.value);
    }
    varselector=params.debug?'body':'#qunit-fixture';
    $textarea.prependTo($(selector));
    if(params.debug){
        $('body').addClass('debug');
    }
    returnwysiwyg.attachTo($textarea).then(function(){
        if(wysiwygOptions.snippets){
            vardefSnippets=testUtils.makeTestPromise();
            testUtils.mock.intercept(wysiwyg,"snippets_loaded",function(){
                defSnippets.resolve(wysiwyg);
            });
            returndefSnippets;
        }
        returnwysiwyg;
    });
}


/**
 *Charcodes.
 */
vardom=$.summernote.dom;
varkeyboardMap={
    "8":"BACKSPACE",
    "9":"TAB",
    "13":"ENTER",
    "16":"SHIFT",
    "17":"CONTROL",
    "18":"ALT",
    "19":"PAUSE",
    "20":"CAPS_LOCK",
    "27":"ESCAPE",
    "32":"SPACE",
    "33":"PAGE_UP",
    "34":"PAGE_DOWN",
    "35":"END",
    "36":"HOME",
    "37":"LEFT",
    "38":"UP",
    "39":"RIGHT",
    "40":"DOWN",
    "45":"INSERT",
    "46":"DELETE",
    "91":"OS_KEY",//'leftcommand':WindowsKey(Windows)orCommandKey(Mac)
    "93":"CONTEXT_MENU",//'rightcommand'
};
_.each(_.range(40,127),function(keyCode){
    if(!keyboardMap[keyCode]){
        keyboardMap[keyCode]=String.fromCharCode(keyCode);
    }
});

/**
 *Performaseriesoftests(`keyboardTests`)forusingkeyboardinputs.
 *
 *@seewysiwyg_keyboard_tests.js
 *@seewysiwyg_tests.js
 *
 *@param{jQuery}$editable
 *@param{object}assert
 *@param{object[]}keyboardTests
 *@param{string}keyboardTests.name
 *@param{string}keyboardTests.content
 *@param{object[]}keyboardTests.steps
 *@param{string}keyboardTests.steps.start
 *@param{string}[keyboardTests.steps.end]default:steps.start
 *@param{string}keyboardTests.steps.key
 *@param{object}keyboardTests.test
 *@param{string}[keyboardTests.test.content]
 *@param{string}[keyboardTests.test.start]
 *@param{string}[keyboardTests.test.end]default:steps.start
 *@param{function($editable,assert)}[keyboardTests.test.check]
 *@param{Number}addTests
 */
vartestKeyboard=function($editable,assert,keyboardTests,addTests){
    vartests=_.compact(_.pluck(keyboardTests,'test'));
    vartestNumber=_.compact(_.pluck(tests,'start')).length+
        _.compact(_.pluck(tests,'content')).length+
        _.compact(_.pluck(tests,'check')).length+
        (addTests|0);
    assert.expect(testNumber);

    functionkeydown(target,keypress){
        var$target=$(target.tagName?target:target.parentNode);
        if(!keypress.keyCode){
            keypress.keyCode=+_.findKey(keyboardMap,function(key){
                returnkey===keypress.key;
            });
        }else{
            keypress.key=keyboardMap[keypress.keyCode]||String.fromCharCode(keypress.keyCode);
        }
        keypress.keyCode=keypress.keyCode;
        varevent=$.Event("keydown",keypress);
        $target.trigger(event);

        if(!event.isDefaultPrevented()){
            if(keypress.key.length===1){
                textInput($target[0],keypress.key);
            }else{
                console.warn('Native"'+keypress.key+'"isnotsupportedintest');
            }
        }
        $target.trigger($.Event("keyup",keypress));
        return$target;
    }

    function_select(selector){
        //eg:".class:contents()[0]->1"selectsthefirstcontentsofthe'class'class,withanoffsetof1
        varreDOMSelection=/^(.+?)(:contents(\(\)\[|\()([0-9]+)[\]|\)])?(->([0-9]+))?$/;
        varsel=selector.match(reDOMSelection);
        var$node=$editable.find(sel[1]);
        varpoint={
            node:sel[3]?$node.contents()[+sel[4]]:$node[0],
            offset:sel[5]?+sel[6]:0,
        };
        if(!point.node||point.offset>(point.node.tagName?point.node.childNodes:point.node.textContent).length){
            assert.notOk("Nodenotfound:'"+selector+"'"+(point.node?"(container:'"+(point.node.outerHTML||point.node.textContent)+"')":""));
        }
        returnpoint;
    }

    functionselectText(start,end){
        start=_select(start);
        vartarget=start.node;
        $(target.tagName?target:target.parentNode).trigger("mousedown");
        if(end){
            end=_select(end);
            Wysiwyg.setRange(start.node,start.offset,end.node,end.offset);
        }else{
            Wysiwyg.setRange(start.node,start.offset);
        }
        target=end?end.node:start.node;
        $(target.tagName?target:target.parentNode).trigger('mouseup');
    }

    functionendOfAreaBetweenTwoNodes(point){
        //movethepositionbecausesomebrowsermakethecaretontheendofthepreviousareaafternormalize
        if(
            !point.node.tagName&&
            point.offset===point.node.textContent.length&&
            !/\S|\u00A0/.test(point.node.textContent)
        ){
            point=dom.nextPoint(dom.nextPoint(point));
            while(point.node.tagName&&point.node.textContent.length){
                point=dom.nextPoint(point);
            }
        }
        returnpoint;
    }

    vardefPollTest=Promise.resolve();

    functionpollTest(test){
        vardef=Promise.resolve();
        $editable.data('wysiwyg').setValue(test.content);

        functionpoll(step){
            vardef=testUtils.makeTestPromise();
            if(step.start){
                selectText(step.start,step.end);
                if(!Wysiwyg.getRange($editable[0])){
                    throw'Wrongrange!\n'+
                        'Test:'+test.name+'\n'+
                        'Selection:'+step.start+'"to"'+step.end+'"\n'+
                        'DOM:'+$editable.html();
                }
            }
            setTimeout(function(){
                if(step.keyCode||step.key){
                    vartarget=Wysiwyg.getRange($editable[0]).ec;
                    if(window.location.search.indexOf('notrycatch')!==-1){
                        keydown(target,{
                            key:step.key,
                            keyCode:step.keyCode,
                            ctrlKey:!!step.ctrlKey,
                            shiftKey:!!step.shiftKey,
                            altKey:!!step.altKey,
                            metaKey:!!step.metaKey,
                        });
                    }else{
                        try{
                            keydown(target,{
                                key:step.key,
                                keyCode:step.keyCode,
                                ctrlKey:!!step.ctrlKey,
                                shiftKey:!!step.shiftKey,
                                altKey:!!step.altKey,
                                metaKey:!!step.metaKey,
                            });
                        }catch(e){
                            assert.notOk(e.name+'\n\n'+e.stack,test.name);
                        }
                    }
                }
                setTimeout(function(){
                    if(step.keyCode||step.key){
                        var$target=$(target.tagName?target:target.parentNode);
                        $target.trigger($.Event('keyup',{
                            key:step.key,
                            keyCode:step.keyCode,
                            ctrlKey:!!step.ctrlKey,
                            shiftKey:!!step.shiftKey,
                            altKey:!!step.altKey,
                            metaKey:!!step.metaKey,
                        }));
                    }
                    setTimeout(def.resolve.bind(def));
                });
            });
            returndef;
        }
        while(test.steps.length){
            def=def.then(poll.bind(null,test.steps.shift()));
        }

        returndef.then(function(){
            if(!test.test){
                return;
            }

            if(test.test.check){
                test.test.check($editable,assert);
            }

            //testcontent
            if(test.test.content){
                varvalue=$editable.data('wysiwyg').getValue({
                    keepPopover:true,
                });
                varallInvisible=/\u200B/g;
                value=value.replace(allInvisible,'&#8203;');
                varresult=test.test.content.replace(allInvisible,'&#8203;');
                assert.strictEqual(value,result,test.name);

                if(test.test.start&&value!==result){
                    assert.notOk("WrongDOM(seepreviousassert)",test.name+"(carretposition)");
                    return;
                }
            }

            $editable[0].normalize();

            //testcarretposition
            if(test.test.start){
                varstart=_select(test.test.start);
                varrange=Wysiwyg.getRange($editable[0]);
                if((range.sc!==range.ec||range.so!==range.eo)&&!test.test.end){
                    assert.ok(false,test.name+":thecarretisnotcolapsedandthe'end'selectorintestismissing");
                    return;
                }
                varend=test.test.end?_select(test.test.end):start;
                if(start.node&&end.node){
                    range=Wysiwyg.getRange($editable[0]);
                    varstartPoint=endOfAreaBetweenTwoNodes({
                        node:range.sc,
                        offset:range.so,
                    });
                    varendPoint=endOfAreaBetweenTwoNodes({
                        node:range.ec,
                        offset:range.eo,
                    });
                    varsameDOM=(startPoint.node.outerHTML||startPoint.node.textContent)===(start.node.outerHTML||start.node.textContent);
                    varstringify=function(obj){
                        if(!sameDOM){
                            deleteobj.sameDOMsameNode;
                        }
                        returnJSON.stringify(obj,null,2)
                            .replace(/"([^"\s-]+)":/g,"\$1:")
                            .replace(/([^\\])"/g,"\$1'")
                            .replace(/\\"/g,'"');
                    };
                    assert.deepEqual(stringify({
                            startNode:startPoint.node.outerHTML||startPoint.node.textContent,
                            startOffset:startPoint.offset,
                            endPoint:endPoint.node.outerHTML||endPoint.node.textContent,
                            endOffset:endPoint.offset,
                            sameDOMsameNode:sameDOM&&startPoint.node===start.node,
                        }),
                        stringify({
                            startNode:start.node.outerHTML||start.node.textContent,
                            startOffset:start.offset,
                            endPoint:end.node.outerHTML||end.node.textContent,
                            endOffset:end.offset,
                            sameDOMsameNode:true,
                        }),
                        test.name+"(carretposition)");
                }
            }
        });
    }
    while(keyboardTests.length){
        defPollTest=defPollTest.then(pollTest.bind(null,keyboardTests.shift()));
    }

    returndefPollTest;
};


/**
 *Selectanodeinthedomwithisoffset.
 *
 *@param{String}startSelector
 *@param{String}endSelector
 *@param{jQuery}$editable
 *@returns{Object}{sc,so,ec,eo}
 */
varselect=(function(){
    var__select=function(selector,$editable){
        varsel=selector.match(/^(.+?)(:contents\(\)\[([0-9]+)\]|:contents\(([0-9]+)\))?(->([0-9]+))?$/);
        var$node=$editable.find(sel[1]);
        return{
            node:sel[2]?$node.contents()[sel[3]?+sel[3]:+sel[4]]:$node[0],
            offset:sel[5]?+sel[6]:0,
        };
    };
    returnfunction(startSelector,endSelector,$editable){
        varstart=__select(startSelector,$editable);
        varend=endSelector?__select(endSelector,$editable):start;
        return{
            sc:start.node,
            so:start.offset,
            ec:end.node,
            eo:end.offset,
        };
    };
})();

/**
 *Triggerakeydownevent.
 *
 *@param{StringorNumber}key(nameorcode)
 *@param{jQuery}$editable
 *@param{Object}[options]
 *@param{Boolean}[options.firstDeselect](default:false)truetodeselectbeforepressing
 */
varkeydown=function(key,$editable,options){
    varkeyPress={};
    if(typeofkey==='string'){
        keyPress.key=key;
        keyPress.keyCode=+_.findKey(keyboardMap,function(k){
            returnk===key;
        });
    }else{
        keyPress.key=keyboardMap[key]||String.fromCharCode(key);
        keyPress.keyCode=key;
    }
    varrange=Wysiwyg.getRange($editable[0]);
    if(!range){
        console.error("Editorhavenotanyrange");
        return;
    }
    if(options&&options.firstDeselect){
        range.sc=range.ec;
        range.so=range.eo;
        Wysiwyg.setRange(range.sc,range.so,range.ec,range.eo);
    }
    vartarget=range.ec;
    var$target=$(target.tagName?target:target.parentNode);
    varevent=$.Event("keydown",keyPress);
    $target.trigger(event);

    if(!event.isDefaultPrevented()){
        if(keyPress.key.length===1){
            textInput($target[0],keyPress.key);
        }else{
            console.warn('Native"'+keyPress.key+'"isnotsupportedintest');
        }
    }
};

vartextInput=function(target,char){
    varev=newCustomEvent('textInput',{
        bubbles:true,
        cancelBubble:false,
        cancelable:true,
        composed:true,
        data:char,
        defaultPrevented:false,
        detail:0,
        eventPhase:3,
        isTrusted:true,
        returnValue:true,
        sourceCapabilities:null,
        type:"textInput",
        which:0,
    });
    ev.data=char;
    target.dispatchEvent(ev);

    if(!ev.defaultPrevented){
        document.execCommand("insertText",0,ev.data);
    }
};

return{
    wysiwygData:wysiwygData,
    createWysiwyg:createWysiwyg,
    testKeyboard:testKeyboard,
    select:select,
    keydown:keydown,
    patch:patch,
    unpatch:unpatch,
};


});
