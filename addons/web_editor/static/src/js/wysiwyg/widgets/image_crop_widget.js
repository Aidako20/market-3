flectra.define('wysiwyg.widgets.ImageCropWidget',function(require){
'usestrict';

constcore=require('web.core');
constWidget=require('web.Widget');
const{applyModifications,cropperDataFields,activateCropper,loadImage,loadImageInfo}=require('web_editor.image_processing');

const_t=core._t;

constImageCropWidget=Widget.extend({
    template:['wysiwyg.widgets.crop'],
    xmlDependencies:['/web_editor/static/src/xml/wysiwyg.xml'],
    events:{
        'click.crop_options[data-action]':'_onCropOptionClick',
        //zoomeventistriggeredbythecropperjslibrarywhentheuserzooms.
        'zoom':'_onCropZoom',
    },

    /**
     *@constructor
     */
    init(parent,media){
        this._super(...arguments);
        this.media=media;
        this.$media=$(media);
        //Neededforeditorsiniframes.
        this.document=media.ownerDocument;
        //key:ratioidentifier,label:displayedtouser,value:usedbycropperlib
        this.aspectRatios={
            "0/0":{label:_t("Free"),value:0},
            "16/9":{label:"16:9",value:16/9},
            "4/3":{label:"4:3",value:4/3},
            "1/1":{label:"1:1",value:1},
            "2/3":{label:"2:3",value:2/3},
        };
        constsrc=this.media.getAttribute('src');
        constdata=Object.assign({},media.dataset);
        this.initialSrc=src;
        this.aspectRatio=data.aspectRatio||"0/0";
        this.mimetype=data.mimetype||src.endsWith('.png')?'image/png':'image/jpeg';
    },
    /**
     *@override
     */
    asyncwillStart(){
        awaitthis._super.apply(this,arguments);
        awaitloadImageInfo(this.media,this._rpc.bind(this));
        constisIllustration=/^\/web_editor\/shape\/illustration\//.test(this.media.dataset.originalSrc);
        if(this.media.dataset.originalSrc&&!isIllustration){
            this.originalSrc=this.media.dataset.originalSrc;
            this.originalId=this.media.dataset.originalId;
            return;
        }
        //Couldn'tfindanattachment:notcroppable.
        this.uncroppable=true;
    },
    /**
     *@override
     */
    asyncstart(){
        if(this.uncroppable){
            this.displayNotification({
              type:'warning',
              title:_t("Thisimageisanexternalimage"),
              message:_t("Thistypeofimageisnotsupportedforcropping.<br/>Ifyouwanttocropit,pleasefirstdownloaditfromtheoriginalsourceanduploaditinFlectra."),
            });
            returnthis.destroy();
        }
        const_super=this._super.bind(this);
        const$cropperWrapper=this.$('.o_we_cropper_wrapper');

        //Replacingthesrcwiththeoriginal'ssothatthelayoutiscorrect.
        awaitloadImage(this.originalSrc,this.media);
        this.$cropperImage=this.$('.o_we_cropper_img');
        constcropperImage=this.$cropperImage[0];
        [cropperImage.style.width,cropperImage.style.height]=[this.$media.width()+'px',this.$media.height()+'px'];

        //Overlayingthecropperimageovertherealimage
        constoffset=this.$media.offset();
        offset.left+=parseInt(this.$media.css('padding-left'));
        offset.top+=parseInt(this.$media.css('padding-right'));
        $cropperWrapper.offset(offset);

        awaitloadImage(this.originalSrc,cropperImage);
        awaitactivateCropper(cropperImage,this.aspectRatios[this.aspectRatio].value,this.media.dataset);
        core.bus.trigger('deactivate_snippet');

        this._onDocumentMousedown=this._onDocumentMousedown.bind(this);
        //Weusecapturesothatthehandleriscalledbeforeothereditorhandlers
        //likesave,suchthatwecanrestorethesrcbeforeasave.
        this.document.addEventListener('mousedown',this._onDocumentMousedown,{capture:true});
        return_super(...arguments);
    },
    /**
     *@override
     */
    destroy(){
        if(this.$cropperImage){
            this.$cropperImage.cropper('destroy');
            this.document.removeEventListener('mousedown',this._onDocumentMousedown,{capture:true});
        }
        this.media.setAttribute('src',this.initialSrc);
        returnthis._super(...arguments);
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *UpdatestheDOMimagewithcroppeddataandassociatesrequired
     *informationforapotentialfuturesave(whererequiredcroppeddata
     *attachmentswillbecreated).
     *
     *@private
     */
    async_save(){
        //Markthemediaforlatercreationofcroppedattachment
        this.media.classList.add('o_modified_image_to_save');

        [...cropperDataFields,'aspectRatio'].forEach(attr=>{
            deletethis.media.dataset[attr];
            constvalue=this._getAttributeValue(attr);
            if(value){
                this.media.dataset[attr]=value;
            }
        });
        deletethis.media.dataset.resizeWidth;
        this.initialSrc=awaitapplyModifications(this.media);
        this.$media.trigger('image_cropped');
        this.destroy();
    },
    /**
     *Returnsanattribute'svalueforsaving.
     *
     *@private
     */
    _getAttributeValue(attr){
        if(cropperDataFields.includes(attr)){
            returnthis.$cropperImage.cropper('getData')[attr];
        }
        returnthis[attr];
    },
    /**
     *Resetsthecropboxtopreventitgoingoutsidetheimage.
     *
     *@private
     */
    _resetCropBox(){
        this.$cropperImage.cropper('clear');
        this.$cropperImage.cropper('crop');
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *Calledwhenacropoptionisclicked->changethecropareaaccordingly.
     *
     *@private
     *@param{MouseEvent}ev
     */
    _onCropOptionClick(ev){
        const{action,value,scaleDirection}=ev.currentTarget.dataset;
        switch(action){
            case'ratio':
                this.$cropperImage.cropper('reset');
                this.aspectRatio=value;
                this.$cropperImage.cropper('setAspectRatio',this.aspectRatios[this.aspectRatio].value);
                break;
            case'zoom':
            case'reset':
                this.$cropperImage.cropper(action,value);
                break;
            case'rotate':
                this.$cropperImage.cropper(action,value);
                this._resetCropBox();
                break;
            case'flip':{
                constamount=this.$cropperImage.cropper('getData')[scaleDirection]*-1;
                returnthis.$cropperImage.cropper(scaleDirection,amount);
            }
            case'apply':
                returnthis._save();
            case'discard':
                returnthis.destroy();
        }
    },
    /**
     *Discardscropiftheuserclicksoutsideofthewidget.
     *
     *@private
     *@param{MouseEvent}ev
     */
    _onDocumentMousedown(ev){
        if(document.body.contains(ev.target)&&this.$(ev.target).length===0){
            returnthis.destroy();
        }
    },
    /**
     *Resetsthecropboxonzoomtopreventcropboxoverflowing.
     *
     *@private
     */
    async_onCropZoom(){
        //Waitforthezoomeventtobefullyprocessedbeforereseting.
        awaitnewPromise(res=>setTimeout(res,0));
        this._resetCropBox();
    },
});

returnImageCropWidget;
});
