flectra.define('web_editor.ColorPalette',function(require){
'usestrict';

constajax=require('web.ajax');
constcore=require('web.core');
constsession=require('web.session');
const{ColorpickerWidget}=require('web.Colorpicker');
constWidget=require('web.Widget');
constsummernoteCustomColors=require('web_editor.rte.summernote_custom_colors');
constweUtils=require('web_editor.utils');

constqweb=core.qweb;

constColorPaletteWidget=Widget.extend({
    //!forxmlDependencies,seeloadDependenciesfunction
    template:'web_editor.snippet.option.colorpicker',
    events:{
        'click.o_we_color_btn':'_onColorButtonClick',
        'mouseenter.o_we_color_btn':'_onColorButtonEnter',
        'mouseleave.o_we_color_btn':'_onColorButtonLeave',
        'click.o_we_colorpicker_switch_pane_btn':'_onSwitchPaneButtonClick',
    },
    custom_events:{
        'colorpicker_select':'_onColorPickerSelect',
        'colorpicker_preview':'_onColorPickerPreview',
    },
    /**
     *@override
     *
     *@param{Object}[options]
     *@param{string}[options.selectedColor]Theclassorcssattributecolorselectedbydefault.
     *@param{boolean}[options.resetButton=true]Whethertodisplayornottheresetbutton.
     *@param{string[]}[options.excluded=[]]Sectionsnottodisplay.
     *@param{string[]}[options.excludeSectionOf]Extrasectiontoexclude:theonecontainingthenamedcolor.
     *@param{JQuery}[options.$editable=$()]Editablecontentfromwhichthecustomcolorsareretrieved.
     */
    init:function(parent,options){
        this._super.apply(this,arguments);
        this.summernoteCustomColorsArray=[].concat(...summernoteCustomColors);
        this.style=window.getComputedStyle(document.documentElement);
        this.options=_.extend({
            selectedColor:false,
            resetButton:true,
            excluded:[],
            excludeSectionOf:null,
            $editable:$(),
            withCombinations:false,
        },options||{});

        this.selectedColor='';
        this.resetButton=this.options.resetButton;
        this.withCombinations=this.options.withCombinations;

        this.trigger_up('request_editable',{callback:val=>this.options.$editable=val});
    },
    /**
     *@override
     */
    willStart:asyncfunction(){
        awaitthis._super(...arguments);
        awaitColorPaletteWidget.loadDependencies(this);
    },
    /**
     *@override
     */
    start:asyncfunction(){
        constres=this._super.apply(this,arguments);

        const$colorSection=this.$('.o_colorpicker_sections[data-color-tab="theme-colors"]');
        const$clpicker=qweb.has_template('web_editor.colorpicker')
            ?$(qweb.render('web_editor.colorpicker'))
            :$(`<colorpicker><divclass="o_colorpicker_section"data-name="common"></div></colorpicker>`);
        $clpicker.find('button').addClass('o_we_color_btn');
        $clpicker.appendTo($colorSection);

        //Removeexcludedpalettes(note:onlyhidethemtostillbeable
        //toremovetheirrelatedcolorsontheDOMtarget)
        _.each(this.options.excluded,exc=>{
            this.$('[data-name="'+exc+'"]').addClass('d-none');
        });
        if(this.options.excludeSectionOf){
            this.$('[data-name]:has([data-color="'+this.options.excludeSectionOf+'"])').addClass('d-none');
        }

        this.el.querySelectorAll('.o_colorpicker_section').forEach(elem=>{
            $(elem).prepend('<div>'+(elem.dataset.display||'')+'</div>');
        });

        //Rendercommoncolors
        if(!this.options.excluded.includes('common')){
            const$commonColorSection=this.$('[data-name="common"]');
            summernoteCustomColors.forEach((colorRow,i)=>{
                if(i===0){
                    return;//Ignorethesummernotegraypaletteanduseours
                }
                const$div=$('<div/>',{class:'clearfix'}).appendTo($commonColorSection);
                colorRow.forEach(color=>{
                    $div.append(this._createColorButton(color,['o_common_color']));
                });
            });
        }

        //Computeclasscolors
        constcompatibilityColorNames=['primary','secondary','alpha','beta','gamma','delta','epsilon','success','info','warning','danger'];
        this.colorNames=[...compatibilityColorNames];
        this.colorToColorNames={};
        this.el.querySelectorAll('button[data-color]').forEach(elem=>{
            constcolorName=elem.dataset.color;
            const$color=$(elem);
            constisCCName=weUtils.isColorCombinationName(colorName);
            if(isCCName){
                $color.find('.o_we_cc_preview_wrapper').addClass(`o_cco_cc${colorName}`);
            }else{
                $color.addClass(`bg-${colorName}`);
            }
            this.colorNames.push(colorName);
            if(!isCCName&&!elem.classList.contains('d-none')){
                constcolor=weUtils.getCSSVariableValue(colorName,this.style);
                this.colorToColorNames[color]=colorName;
            }
        });

        //SelectselectedColorandbuildcustomColors.
        //IfnocolorisselectedselectedColorisanemptystring(transparentisinterpretedasnocolor)
        if(this.options.selectedColor){
            letselectedColor=this.options.selectedColor;
            if(compatibilityColorNames.includes(selectedColor)){
                selectedColor=weUtils.getCSSVariableValue(selectedColor,this.style)||selectedColor;
            }
            selectedColor=ColorpickerWidget.normalizeCSSColor(selectedColor);
            if(selectedColor!=='rgba(0,0,0,0)'){
                this.selectedColor=this.colorToColorNames[selectedColor]||selectedColor;
            }
        }
        this._buildCustomColors();
        this._markSelectedColor();

        //Colorpicker
        letdefaultColor=this.selectedColor;
        if(defaultColor&&!ColorpickerWidget.isCSSColor(defaultColor)){
            defaultColor=weUtils.getCSSVariableValue(defaultColor,this.style);
        }
        this.colorPicker=newColorpickerWidget(this,{
            defaultColor:defaultColor,
        });
        awaitthis.colorPicker.prependTo($colorSection);

        //TODOAddedasafix.Inmaster,thewidgetshouldprobablynotbe
        //instantiatedatall.
        if(this.options.excluded.includes('custom')){
            this.colorPicker.$el.addClass('d-none');
        }

        returnres;
    },
    /**
     *Returnalistofthecolornamesusedinthecolorpalette
     */
    getColorNames:function(){
        returnthis.colorNames;
    },
    /**
     *Setsthecurrentlyselectedcolor
     *
     *@param{string}colorrgb[a]
     */
    setSelectedColor:function(color){
        this._selectColor({color:color});
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *@private
     */
    _buildCustomColors:function(){
        if(this.options.excluded.includes('custom')){
            return;
        }
        this.el.querySelectorAll('.o_custom_color').forEach(el=>el.remove());
        constexistingColors=newSet(this.summernoteCustomColorsArray.concat(
            Object.keys(this.colorToColorNames)
        ));
        this.trigger_up('get_custom_colors',{
            onSuccess:(colors)=>{
                colors.forEach(color=>{
                    this._addCustomColor(existingColors,color);
                });
            },
        });
        weUtils.getCSSVariableValue('custom-colors',this.style).split('').forEach(v=>{
            constcolor=weUtils.getCSSVariableValue(v.substring(1,v.length-1),this.style);
            if(ColorpickerWidget.isCSSColor(color)){
                this._addCustomColor(existingColors,color);
            }
        });
        _.each(this.options.$editable.find('[style*="color"]'),el=>{
            for(constcolorPropof['color','backgroundColor']){
                this._addCustomColor(existingColors,el.style[colorProp]);
            }
        });
        if(this.selectedColor){
            this._addCustomColor(existingColors,this.selectedColor);
        }
    },
    /**
     *AddthecolortothecustomcolorsectionifitisnotintheexistingColors.
     *
     *@param{string[]}existingColorsColorscurrentlyinthecolorpicker
     *@param{string}colorColortoaddtothecuustomcolors
     */
    _addCustomColor:function(existingColors,color){
        if(!color){
            return;
        }
        if(!ColorpickerWidget.isCSSColor(color)){
            color=weUtils.getCSSVariableValue(color,this.style);
        }
        constnormColor=ColorpickerWidget.normalizeCSSColor(color);
        if(!existingColors.has(normColor)){
            this._addCustomColorButton(normColor);
            existingColors.add(normColor);
        }
    },
    /**
     *Addacustombuttoninthecorespondingsection.
     *
     *@private
     *@param{string}color
     *@param{string[]}classes-classesaddedtothebutton
     *@returns{jQuery}
     */
    _addCustomColorButton:function(color,classes=[]){
        classes.push('o_custom_color');
        const$themeSection=this.$('.o_colorpicker_section[data-name="theme"]');
        const$button=this._createColorButton(color,classes);
        return$button.appendTo($themeSection);
    },
    /**
     *Returnacolorbutton.
     *
     *@param{string}color
     *@param{string[]}classes-classesaddedtothebutton
     *@returns{jQuery}
     */
    _createColorButton:function(color,classes){
        return$('<button/>',{
            class:'o_we_color_btn'+classes.join(''),
            style:'background-color:'+color+';',
        });
    },
    /**
     *Getsnormalizedinformationaboutacolorbutton.
     *
     *@private
     *@param{HTMLElement}buttonEl
     *@returns{Object}
     */
    _getButtonInfo:function(buttonEl){
        constbgColor=buttonEl.style.backgroundColor;
        return{
            color:bgColor?ColorpickerWidget.normalizeCSSColor(bgColor):buttonEl.dataset.color||'',
            target:buttonEl,
        };
    },
    /**
     *SettheselectedColorandtriggeranevent
     *
     *@param{Object}color
     *@param{string}[eventName]
     */
    _selectColor:function(colorInfo,eventName){
        this.selectedColor=colorInfo.color=this.colorToColorNames[colorInfo.color]||colorInfo.color;
        if(eventName){
            this.trigger_up(eventName,colorInfo);
        }
        this._buildCustomColors();
        this._markSelectedColor();
        this.colorPicker.setSelectedColor(colorInfo.color);
    },
    /**
     *Marktheselectedcolor
     *
     *@private
     */
    _markSelectedColor:function(){
        this.el.querySelectorAll('button.selected').forEach(el=>el.classList.remove('selected'));
        constselectedButton=this.el.querySelector(`button[data-color="${this.selectedColor}"],button[style*="background-color:${this.selectedColor};"]`);
        if(selectedButton){
            selectedButton.classList.add('selected');
        }
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *Calledwhenacolorbuttonisclicked.
     *
     *@private
     *@param{Event}ev
     */
    _onColorButtonClick:function(ev){
        constbuttonEl=ev.currentTarget;
        constcolorInfo=this._getButtonInfo(buttonEl);
        this._selectColor(colorInfo,'color_picked');
    },
    /**
     *Calledwhenacolorbuttonisentered.
     *
     *@private
     *@param{Event}ev
     */
    _onColorButtonEnter:function(ev){
        ev.stopPropagation();
        this.trigger_up('color_hover',this._getButtonInfo(ev.currentTarget));
    },
    /**
     *Calledwhenacolorbuttonisleftthedatacoloristhecolorcurrentlyselected.
     *
     *@private
     *@param{Event}ev
     */
    _onColorButtonLeave:function(ev){
        ev.stopPropagation();
        this.trigger_up('color_leave',{
            color:this.selectedColor,
            target:ev.target,
        });
    },
    /**
     *Calledwhenanupdateismadeonthecolorpicker.
     *
     *@private
     *@param{Event}ev
     */
    _onColorPickerPreview:function(ev){
        this.trigger_up('color_hover',{
            color:ev.data.cssColor,
            target:this.colorPicker.el,
        });
    },
    /**
     *Calledwhenacolorisselectedonthecolorpicker(mouseup).
     *
     *@private
     *@param{Event}ev
     */
    _onColorPickerSelect:function(ev){
        this._selectColor({
            color:ev.data.cssColor,
            target:this.colorPicker.el,
        },'custom_color_picked');
    },
    /**
     *@private
     *@param{Event}ev
     */
    _onSwitchPaneButtonClick(ev){
        ev.stopPropagation();
        this.el.querySelectorAll('.o_we_colorpicker_switch_pane_btn').forEach(el=>{
            el.classList.remove('active');
        });
        ev.currentTarget.classList.add('active');
        this.el.querySelectorAll('.o_colorpicker_sections').forEach(el=>{
            el.classList.toggle('d-none',el.dataset.colorTab!==ev.currentTarget.dataset.target);
        });
    },
});

//------------------------------------------------------------------------------
//Static
//------------------------------------------------------------------------------

/**
 *LoadColorPaletteWidgetdependencies.Thisallowstoloadthemwithout
 *instantiatingthewidgetitself.
 *
 *@static
 */
letcolorpickerTemplateProm;
ColorPaletteWidget.loadDependencies=asyncfunction(rpcCapableObj){
    constproms=[ajax.loadXML('/web_editor/static/src/xml/snippets.xml',qweb)];

    //Publicuserusingtheeditormayhaveacolorpalettebutwith
    //thedefaultsummernoteones.
    if(!session.is_website_user){
        //WecancallthecolorPalettemultipletimesbutonlyneed1rpc
        if(!colorpickerTemplateProm&&!qweb.has_template('web_editor.colorpicker')){
            colorpickerTemplateProm=rpcCapableObj._rpc({
                model:'ir.ui.view',
                method:'read_template',
                args:['web_editor.colorpicker'],
            }).then(template=>{
                returnqweb.add_template('<templates>'+template+'</templates>');
            });
        }
        proms.push(colorpickerTemplateProm);
    }

    returnPromise.all(proms);
};

return{
    ColorPaletteWidget:ColorPaletteWidget,
};
});
