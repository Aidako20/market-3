flectra.define('web_editor.ace',function(require){
'usestrict';

varajax=require('web.ajax');
varconfig=require('web.config');
varconcurrency=require('web.concurrency');
varcore=require('web.core');
vardom=require('web.dom');
varDialog=require('web.Dialog');
varWidget=require('web.Widget');
varlocalStorage=require('web.local_storage');

var_t=core._t;

/**
 *Formatsacontent-checkresult(@seecheckXML,checkSCSS).
 *
 *@param{boolean}isValid
 *@param{integer}[errorLine]neededifisValidisfalse
 *@param{string}[errorMessage]neededifisValidisfalse
 *@returns{Object}
 */
function_getCheckReturn(isValid,errorLine,errorMessage){
    return{
        isValid:isValid,
        error:isValid?null:{
            line:errorLine,
            message:errorMessage,
        },
    };
}
/**
 *ChecksthesyntaxvalidityofsomeXML.
 *
 *@param{string}xml
 *@returns{Object}@see_getCheckReturn
 */
functioncheckXML(xml){
    if(typeofwindow.DOMParser!='undefined'){
        varxmlDoc=(newwindow.DOMParser()).parseFromString(xml,'text/xml');
        varerror=xmlDoc.getElementsByTagName('parsererror');
        if(error.length>0){
            consterrorEl=error[0];
            constsourceTextEls=errorEl.querySelectorAll('sourcetext');
            letcodeEls=null;
            if(sourceTextEls.length){
                codeEls=[...sourceTextEls].map(el=>{
                    constcodeEl=document.createElement('code');
                    codeEl.textContent=el.textContent;
                    constbrEl=document.createElement('br');
                    brEl.classList.add('o_we_source_text_origin');
                    el.parentElement.insertBefore(brEl,el);
                    returncodeEl;
                });
                for(constelofsourceTextEls){
                    el.remove();
                }
            }
            for(constelof[...errorEl.querySelectorAll(':not(code):not(pre):not(br)')]){
                constpEl=document.createElement('p');
                for(constcElof[...el.childNodes]){
                    pEl.appendChild(cEl);
                }
                el.parentElement.insertBefore(pEl,el);
                el.remove();
            }
            errorEl.innerHTML=errorEl.innerHTML.replace(/\r?\n/g,'<br/>');
            errorEl.querySelectorAll('.o_we_source_text_origin').forEach((el,i)=>{
                el.after(codeEls[i]);
            });
            return_getCheckReturn(false,parseInt(error[0].innerHTML.match(/[Ll]ine[^\d]+(\d+)/)[1],10),errorEl.innerHTML);
        }
    }elseif(typeofwindow.ActiveXObject!='undefined'&&newwindow.ActiveXObject('Microsoft.XMLDOM')){
        varxmlDocIE=newwindow.ActiveXObject('Microsoft.XMLDOM');
        xmlDocIE.async='false';
        xmlDocIE.loadXML(xml);
        if(xmlDocIE.parseError.line>0){
            return_getCheckReturn(false,xmlDocIE.parseError.line,xmlDocIE.parseError.reason);
        }
    }
    return_getCheckReturn(true);
}
/**
 *FormatssomeXMLsothatithasproperindentationandstructure.
 *
 *@param{string}xml
 *@returns{string}formattedxml
 */
functionformatXML(xml){
    //donothingifaninlinescriptispresenttoavoidbreakingit
    if(/<script(?:[^>]*)?>[^<][\s\S]*<\/script>/i.test(xml)){
        returnxml;
    }
    returnwindow.vkbeautify.xml(xml,4);
}
/**
 *ChecksthesyntaxvalidityofsomeSCSS.
 *
 *@param{string}scss
 *@returns{Object}@see_getCheckReturn
 */
varcheckSCSS=(function(){
    varmapping={
        '{':'}','}':'{',
        '(':')',')':'(',
        '[':']',']':'[',
    };
    varopenings=['{','(','['];
    varclosings=['}',')',']'];

    returnfunction(scss){
        varstack=[];
        varline=1;
        for(vari=0;i<scss.length;i++){
            if(_.contains(openings,scss[i])){
                stack.push(scss[i]);
            }elseif(_.contains(closings,scss[i])){
                if(stack.pop()!==mapping[scss[i]]){
                    return_getCheckReturn(false,line,_t("Unexpected")+scss[i]);
                }
            }elseif(scss[i]==='\n'){
                line++;
            }
        }
        if(stack.length>0){
            return_getCheckReturn(false,line,_t("Expected")+mapping[stack.pop()]);
        }
        return_getCheckReturn(true);
    };
})();
/**
 *FormatssomeSCSSsothatithasproperindentationandstructure.
 *
 *@todoRightnow,thisdoesreturnthegivenSCSScontent,untouched.
 *@param{string}scss
 *@returns{string}formattedscss
 */
functionformatSCSS(scss){
    returnscss;
}

/**
 *Allowstovisualizeresources(bydefault,XMLviews)andeditthem.
 */
varViewEditor=Widget.extend({
    template:'web_editor.ace_view_editor',
    xmlDependencies:['/web_editor/static/src/xml/ace.xml'],
    jsLibs:[
        '/web/static/lib/ace/ace.js',
        [
            '/web/static/lib/ace/javascript_highlight_rules.js',
            '/web/static/lib/ace/mode-xml.js',
            '/web/static/lib/ace/mode-scss.js',
            '/web/static/lib/ace/mode-js.js',
            '/web/static/lib/ace/theme-monokai.js'
        ]
    ],
    events:{
        'click.o_ace_type_switcher_choice':'_onTypeChoice',
        'change.o_res_list':'_onResChange',
        'click.o_ace_filter':'_onFilterChange',
        'clickbutton[data-action=save]':'_onSaveClick',
        'clickbutton[data-action=reset]':'_onResetClick',
        'clickbutton[data-action=format]':'_onFormatClick',
        'clickbutton[data-action=close]':'_onCloseClick',
        'click#ace-view-id>.alert-warning.close':'_onCloseWarningClick'
    },

    /**
     *Initializestheparameterssothattheaceeditorknowswhichinformation
     *ithastoload.
     *
     *@constructor
     *@param{Widget}parent
     *@param{string|integer}viewKey
     *       xml_idoridoftheviewwhoselinkedresourceshavetobeloaded.
     *@param{Object}[options]
     *@param{string|integer}[options.initialResID]
     *       aspecificviewID/SCSSURLtoloadonstart(otherwisethemain
     *       viewIDassociatedwiththespecifiedviewKeywillbeused)
     *@param{string}[options.position=right]
     *@param{boolean}[options.doNotLoadViews=false]
     *@param{boolean}[options.doNotLoadSCSS=false]
     *@param{boolean}[options.doNotLoadJS=false]
     *@param{boolean}[options.includeBundles=false]
     *@param{string}[options.filesFilter=custom]
     *@param{string[]}[options.defaultBundlesRestriction]
     */
    init:function(parent,viewKey,options){
        this._super.apply(this,arguments);

        this.context=options.context;

        this.viewKey=viewKey;
        this.options=_.defaults({},options,{
            position:'right',
            doNotLoadViews:false,
            doNotLoadSCSS:false,
            doNotLoadJS:false,
            includeBundles:false,
            filesFilter:'custom',
            defaultBundlesRestriction:[],
        });

        this.resources={xml:{},scss:{},js:{}};
        this.editingSessions={xml:{},scss:{},js:{}};
        this.currentType='xml';

        //Alias
        this.views=this.resources.xml;
        this.scss=this.resources.scss;
        this.js=this.resources.js;
    },
    /**
     *Loadseverythingtheacelibraryneedstowork.
     *Italsoloadstheresourcestovisualize(@see_loadResources).
     *
     *@override
     */
    willStart:function(){
        returnPromise.all([
            this._super.apply(this,arguments),
            this._loadResources()
        ]);
    },
    /**
     *InitializesthelibraryandinitialviewoncetheDOMisready.Italso
     *initializestheresizefeatureoftheaceeditor.
     *
     *@override
     */
    start:function(){
        this.$viewEditor=this.$('#ace-view-editor');

        this.$typeSwitcherChoices=this.$('.o_ace_type_switcher_choice');
        this.$typeSwitcherBtn=this.$('.o_ace_type_switcher>.dropdown-toggle');

        this.$lists={
            xml:this.$('#ace-view-list'),
            scss:this.$('#ace-scss-list'),
            js:this.$('#ace-js-list'),
        };
        this.$includeBundlesArea=this.$('.oe_include_bundles');
        this.$includeAllSCSSArea=this.$('.o_include_all_scss');
        this.$viewID=this.$('#ace-view-id>span');
        this.$warningMessage=this.$('#ace-view-id>.alert-warning');

        this.$formatButton=this.$('button[data-action=format]');
        this.$resetButton=this.$('button[data-action=reset]');

        this.aceEditor=window.ace.edit(this.$viewEditor[0]);
        this.aceEditor.setTheme('ace/theme/monokai');
        this.$editor=this.$('.ace_editor');

        varrefX=0;
        varresizing=false;
        varminWidth=400;
        vardebounceStoreEditorWidth=_.debounce(storeEditorWidth,500);

        this._updateViewSelectDOM();

        varinitResID;
        varinitType;
        if(this.options.initialResID){
            initResID=this.options.initialResID;
            if(_.isString(initResID)&&initResID[0]==='/'){
                if(_.str.endsWith(initResID,'.scss')){
                    initType='scss';
                }else{
                    initType='js';
                }
            }else{
                initType='xml';
            }
        }else{
            if(!this.options.doNotLoadSCSS){
                initResID=this.sortedSCSS[0][1][0].url;//firstbundle,scssfiles,firstone
                initType='scss';
            }
            if(!this.options.doNotLoadJS){
                initResID=this.sortedJS[0][1][0].url;//firstbundle,jsfiles,firstone
                initType='js';
            }
            if(!this.options.doNotLoadViews){
                if(typeofthis.viewKey==="number"){
                    initResID=this.viewKey;
                }else{
                    varview=_.findWhere(this.views,{xml_id:this.viewKey});
                    if(!view){
                        view=_.findWhere(this.views,{key:this.viewKey});
                    }
                    initResID=view.id;
                }
                initType='xml';
            }
        }
        if(initResID){
            this._displayResource(initResID,initType);
        }

        if(!this.sortedViews.length||!this.sortedSCSS.length){
            _.defer((function(){
                this._switchType(this.sortedViews.length?'xml':'scss');
                this.$typeSwitcherBtn.parent('.btn-group').addClass('d-none');
            }).bind(this));
        }

        $(document).on('mouseup.ViewEditor',stopResizing.bind(this)).on('mousemove.ViewEditor',updateWidth.bind(this));
        if(this.options.position==='left'){
            this.$('.ace_scroller').after($('<div>').addClass('ace_resize_bar'));
            this.$('.ace_gutter').css({'cursor':'default'});
            this.$el.on('mousedown.ViewEditor','.ace_resize_bar',startResizing.bind(this));
        }else{
            this.$el.on('mousedown.ViewEditor','.ace_gutter',startResizing.bind(this));
        }

        resizeEditor.call(this,readEditorWidth.call(this));

        returnthis._super.apply(this,arguments);

        functionresizeEditor(target){
            varwidth=Math.min(document.body.clientWidth,Math.max(parseInt(target,10),minWidth));
            this.$editor.width(width);
            this.aceEditor.resize();
            this.$el.width(width);

            if(this.$errorLine){
                this.$errorLine.popover('update');
            }
        }
        functionstoreEditorWidth(){
            localStorage.setItem('ace_editor_width',this.$el.width());
        }
        functionreadEditorWidth(){
            varwidth=localStorage.getItem('ace_editor_width');
            returnparseInt(width||720,10);
        }
        functionstartResizing(e){
            refX=e.pageX;
            resizing=true;
        }
        functionstopResizing(){
            if(resizing){
                resizing=false;

                if(this.errorSession){
                    //Totriggeranupdateoftheerrordisplay
                    this.errorSession.setScrollTop(this.errorSession.getScrollTop()+1);
                }
            }
        }
        functionupdateWidth(e){
            if(!resizing)return;

            varoffset=e.pageX-refX;
            if(this.options.position==='left'){
                offset=-offset;
            }
            varwidth=this.$el.width()-offset;
            refX=e.pageX;
            resizeEditor.call(this,width);
            debounceStoreEditorWidth.call(this);
        }
    },
    /**
     *@override
     */
    destroy:function(){
        this._super.apply(this,arguments);
        this.$el.off('.ViewEditor');
        $(document).off('.ViewEditor');
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *Initializesatexteditorforthespecifiedresource.
     *
     *@private
     *@param{integer|string}resID-theID/URLoftheview/scss/jsfile
     *@param{string}[type](defaulttothecurrentlyselectedone)
     *@returns{ace.EditSession}
     */
    _buildEditingSession:function(resID,type){
        varself=this;
        type=type||this.currentType;
        vareditingSession=newwindow.ace.EditSession(this.resources[type][resID].arch);
        editingSession.setUseWorker(false);
        editingSession.setMode('ace/mode/'+(type||this.currentType));
        editingSession.setUndoManager(newwindow.ace.UndoManager());
        editingSession.on('change',function(){
            _.defer(function(){
                self._toggleDirtyInfo(resID);
                self._showErrorLine();
            });
        });
        returneditingSession;
    },
    /**
     *Forcestheview/scss/jsfileidentifiedbyitsID/URLtobedisplayedinthe
     *editor.ThemethodwillupdatetheresourceselectDOMelementaswellif
     *necessary.
     *
     *@private
     *@param{integer|string}resID
     *@param{string}[type]-thetypeofresource(either'xml','scss'or'js')
     */
    _displayResource:function(resID,type){
        if(type){
            this._switchType(type);
        }

        if(!this.resources[this.currentType].hasOwnProperty(resID)){
            //Thiscouldhappeniftryingtoswitchtoafilewhichisnot
            //visiblewiththedefaultfilters.Inthatcase,wepreferthe
            //usertohavetoswitchexplicitelytotherightfiltersagain.
            return;
        }

        vareditingSession=this.editingSessions[this.currentType][resID];
        if(!editingSession){
            editingSession=this.editingSessions[this.currentType][resID]=this._buildEditingSession(resID);
        }
        this.aceEditor.setSession(editingSession);

        if(this.currentType==='xml'){
            this.$viewID.text(_.str.sprintf(_t("TemplateID:%s"),this.views[resID].key));
        }elseif(this.currentType==='scss'){
            this.$viewID.text(_.str.sprintf(_t("SCSSfile:%s"),resID));
        }else{
            this.$viewID.text(_.str.sprintf(_t("JSfile:%s"),resID));
        }
        constisCustomized=this._isCustomResource(resID);
        this.$lists[this.currentType].select2('val',resID);

        this.$resetButton.toggleClass('d-none',this.currentType==='xml'||!isCustomized);

        this.$warningMessage.toggleClass('d-none',
            this.currentType!=='xml'&&(resID.indexOf('/user_custom_')>=0)||isCustomized);

        this.aceEditor.resize(true);
    },
    /**
     *Formatsthecurrentresourcebeingvizualized.
     *(@seeformatXML,formatSCSS)
     *
     *@private
     */
    _formatResource:function(){
        varres=this.aceEditor.getValue();
        varcheck=(this.currentType==='xml'?checkXML:checkSCSS)(res);
        if(check.isValid){
            this.aceEditor.setValue((this.currentType==='xml'?formatXML:formatSCSS)(res));
        }else{
            this._showErrorLine(check.error.line,check.error.message,this._getSelectedResource());
        }
    },
    /**
     *Returnsthecurrentlyselectedresourcedata.
     *
     *@private
     *@returns{integer|string}viewIDorscssfileURL
     */
    _getSelectedResource:function(){
        varvalue=this.$lists[this.currentType].select2('val');
        returnparseInt(value,10)||value;
    },
    /**
     *Checksresourceiscustomizedornot.
     *
     *@private
     *@param{integer|string}resID
     */
    _isCustomResource(resID){
        //TODOweshouldbeabletodetectiftheXMLtemplateiscustomized
        //tonotshowthewarninginthatcase
        letisCustomized=false;
        if(this.currentType==='scss'){
            isCustomized=this.scss[resID].customized;
        }elseif(this.currentType==='js'){
            isCustomized=this.js[resID].customized;
        }
        returnisCustomized;
    },
    /**
     *Loadsdatatheaceeditorwillvizualizeandprocessit.Defaultbehavior
     *isloadingtheactivateviews,indexthemandbuildtheirhierarchy.
     *
     *@private
     *@returns{Promise}
     */
    _loadResources:function(){
        //Resetresources
        this.resources={xml:{},scss:{},js:{}};
        this.editingSessions={xml:{},scss:{},js:{}};
        this.views=this.resources.xml;
        this.scss=this.resources.scss;
        this.js=this.resources.js;

        //Loadresources
        returnthis._rpc({
            route:'/web_editor/get_assets_editor_resources',
            params:{
                key:this.viewKey,
                get_views:!this.options.doNotLoadViews,
                get_scss:!this.options.doNotLoadSCSS,
                get_js:!this.options.doNotLoadJS,
                bundles:this.options.includeBundles,
                bundles_restriction:this.options.filesFilter==='all'?[]:this.options.defaultBundlesRestriction,
                only_user_custom_files:this.options.filesFilter==='custom',
            },
        }).then((function(resources){
            _processViews.call(this,resources.views||[]);
            _processJSorSCSS.call(this,resources.scss||[],'scss');
            _processJSorSCSS.call(this,resources.js||[],'js');
        }).bind(this));

        function_processViews(views){
            //OnlykeeptheactiveviewsandindexthembyID.
            _.extend(this.views,_.indexBy(_.filter(views,function(view){
                returnview.active;
            }),'id'));

            //Initializea0levelforeachviewandassignthemanarraycontainingtheirchildren.
            varself=this;
            varroots=[];
            _.each(this.views,function(view){
                view.level=0;
                view.children=[];
            });
            _.each(this.views,function(view){
                varparentId=view.inherit_id[0];
                varparent=parentId&&self.views[parentId];
                if(parent){
                    parent.children.push(view);
                }else{
                    roots.push(view);
                }
            });

            //Assignthecorrectlevelbasedonchildrenkeyandsaveasortedarraywhere
            //eachviewisfollowedbytheirchildren.
            this.sortedViews=[];
            functionvisit(view,level){
                view.level=level;
                self.sortedViews.push(view);
                _.each(view.children,function(child){
                    visit(child,level+1);
                });
            }
            _.each(roots,function(root){
                visit(root,0);
            });
        }

        function_processJSorSCSS(data,type){
            //ThereceivedscssorjsdataisalreadysortedbybundleandDOMorder
            if(type==='scss'){
                this.sortedSCSS=data;
            }else{
                this.sortedJS=data;
            }

            //StoretheURLungroupedbybundleandusetheURLaskey(resourceID)
            varresources=type==='scss'?this.scss:this.js;
            _.each(data,function(bundleInfos){
                _.each(bundleInfos[1],function(info){info.bundle_xmlid=bundleInfos[0].xmlid;});
                _.extend(resources,_.indexBy(bundleInfos[1],'url'));
            });
        }
    },
    /**
     *Forcestheview/scss/jsfileidentifiedbyitsID/URLtoberesettotheway
     *itwasbeforetheuserstartededitingit.
     *
     *@todoviewsresetisnotsupportedyet
     *
     *@private
     *@param{integer|string}[resID](defaulttothecurrentlyselectedone)
     *@param{string}[type](defaulttothecurrentlyselectedone)
     *@returns{Promise}
     */
    _resetResource:function(resID,type){
        resID=resID||this._getSelectedResource();
        type=type||this.currentType;

        if(this.currentType==='xml'){
            returnPromise.reject(_t("Resetingviewsisnotsupportedyet"));
        }else{
            varresource=type==='scss'?this.scss[resID]:this.js[resID];
            returnthis._rpc({
                route:'/web_editor/reset_asset',
                params:{
                    url:resID,
                    bundle_xmlid:resource.bundle_xmlid,
                },
            });
        }
    },
    /**
     *SavesauniqueSCSSorJSfile.
     *
     *@private
     *@param{Object}session-containsthe'id'(url)andthe'text'ofthe
     *                        SCSSorJSfiletosave.
     *@return{Promise}statusindicatesifthesaveisfinishedorifan
     *                   erroroccured.
     */
    _saveSCSSorJS:function(session){
        varself=this;
        varsessionIdEndsWithJS=_.string.endsWith(session.id,'.js');
        varbundleXmlID=sessionIdEndsWithJS?this.js[session.id].bundle_xmlid:this.scss[session.id].bundle_xmlid;
        varfileType=sessionIdEndsWithJS?'js':'scss';
        returnself._rpc({
            route:'/web_editor/save_asset',
            params:{
                url:session.id,
                bundle_xmlid:bundleXmlID,
                content:session.text,
                file_type:fileType,
            },
        }).then(function(){
            self._toggleDirtyInfo(session.id,fileType,false);
        });
    },
    /**
     *Saveseveryresourcethathasbeenmodified.Ifonecannotbesaved,none
     *issavedandanerrormessageisdisplayed.
     *
     *@private
     *@return{Promise}statusindicatesifthesaveisfinishedorifan
     *                   erroroccured.
     */
    _saveResources:function(){
        varself=this;
        vartoSave={};
        varerrorFound=false;
        _.each(this.editingSessions,(function(editingSessions,type){
            if(errorFound)return;

            vardirtySessions=_.pick(editingSessions,function(session){
                returnsession.getUndoManager().hasUndo();
            });
            toSave[type]=_.map(dirtySessions,function(session,resID){
                return{
                    id:parseInt(resID,10)||resID,
                    text:session.getValue(),
                };
            });

            this._showErrorLine();
            for(vari=0;i<toSave[type].length&&!errorFound;i++){
                varcheck=(type==='xml'?checkXML:checkSCSS)(toSave[type][i].text);
                if(!check.isValid){
                    this._showErrorLine(check.error.line,check.error.message,toSave[type][i].id,type);
                    errorFound=toSave[type][i];
                }
            }
        }).bind(this));
        if(errorFound)returnPromise.reject(errorFound);

        vardefs=[];
        varmutex=newconcurrency.Mutex();
        _.each(toSave,(function(_toSave,type){
            //ChildviewsfirstasCOWonaparentwoulddeletethem
            _toSave=_.sortBy(_toSave,'id').reverse();
            _.each(_toSave,function(session){
                defs.push(mutex.exec(function(){
                    return(type==='xml'?self._saveView(session):self._saveSCSSorJS(session));
                }));
            });
        }).bind(this));

        varself=this;
        returnPromise.all(defs).guardedCatch(function(results){
            //someoverrideshandleerrorsthemselves
            if(results===undefined){
                return;
            }
            varerror=results[1];
            Dialog.alert(self,'',{
                title:_t("Servererror"),
                $content:$('<div/>').html(
                    _t("Aservererroroccured.Pleasecheckyoucorrectlysignedinandthatthefileyouaresavingiscorrectlyformatted.")
                    +'<br/>'
                    +error
                )
            });
        });
    },
    /**
     *SavesanuniqueXMLview.
     *
     *@private
     *@param{Object}session-the'id'andthe'text'oftheviewtosave.
     *@returns{Promise}statusindicatesifthesaveisfinishedorifan
     *                    erroroccured.
     */
    _saveView:function(session){
        varself=this;
        returnnewPromise(function(resolve,reject){
            self._rpc({
                model:'ir.ui.view',
                method:'write',
                args:[[session.id],{arch:session.text}],
            },{
                noContextKeys:'lang',
            }).then(function(){
                self._toggleDirtyInfo(session.id,'xml',false);
                resolve();
            },function(source,error){
                reject(session,error);
            });
        });
    },
    /**
     *Showsalinewhichproducedanerror.Redcolorisaddedtotheeditor,
     *thecursormovetothelineandamessageisopenedonclickontheline
     *number.Ifcalledwithoutargument,theeffectsareremoved.
     *
     *@private
     *@param{integer}[line]-thelinenumbertohighlight
     *@param{string}[message]-toshowonclickonthelinenumber
     *@param{integer|string}[resID]
     *@param{string}[type]
     */
    _showErrorLine:function(line,message,resID,type){
        if(line===undefined||line<=0){
            __restore.call(this);
            return;
        }

        if(type){
            this._switchType(type);
        }

        if(this._getSelectedResource()===resID){
            __showErrorLine.call(this,line);
        }else{
            varonChangeSession=(function(){
                this.aceEditor.off('changeSession',onChangeSession);
                _.delay(__showErrorLine.bind(this,line),400);
            }).bind(this);
            this.aceEditor.on('changeSession',onChangeSession);
            this._displayResource(resID,this.currentType);
        }

        function__restore(){
            if(this.errorSession){
                this.errorSession.off('change',this.errorSessionChangeCallback);
                this.errorSession.off('changeScrollTop',this.errorSessionScrollCallback);
                this.errorSession=undefined;
            }
            __restoreErrorLine.call(this);

            if(this.$errorContent){//TODOremoveinmaster
                this.$errorContent.removeClass('o_error');
                this.$errorContent=undefined;
            }
        }

        function__restoreErrorLine(){
            if(this.$errorLine){
                this.$errorLine.removeClass('o_error');
                this.$errorLine.popover('hide');
                this.$errorLine.popover('dispose');
                this.$errorLine=undefined;
            }
        }

        function__updateErrorLineDisplay(line){
            __restoreErrorLine.call(this);

            const$lines=this.$viewEditor.find('.ace_gutter-cell');
            this.$errorLine=$lines.filter(function(i,el){
                returnparseInt($(el).text())===line;
            });
            if(!this.$errorLine.length){
                const$firstLine=$lines.first();
                constfirstLineNumber=parseInt($firstLine.text());
                this.$errorLine=line<firstLineNumber?$lines.eq(1):$lines.eq($lines.length-2);
            }
            this.$errorLine.addClass('o_error');
            this.$errorLine.popover({
                animation:false,
                html:true,
                content:message,
                placement:'left',
                container:'body',
                trigger:'manual',
                template:'<divclass="popovero_ace_error_popover"role="tooltip"><divclass="arrow"></div><h3class="popover-header"></h3><divclass="popover-body"></div></div>'
            });
            this.$errorLine.popover('show');
        }

        function__showErrorLine(line){
            this.$errorContent=this.$viewEditor.find('.ace_scroller').addClass('o_error');//TODOremoveinmaster

            this.errorSession=this.aceEditor.getSession();
            this.errorSessionChangeCallback=__restore.bind(this);
            this.errorSession.on('change',this.errorSessionChangeCallback);
            this.errorSessionScrollCallback=_.debounce(__updateErrorLineDisplay.bind(this,line),10);
            this.errorSession.on('changeScrollTop',this.errorSessionScrollCallback);

            __updateErrorLineDisplay.call(this,line);

            setTimeout(()=>this.aceEditor.gotoLine(line),100);
        }
    },
    /**
     *SwitchestotheSCSS,XMLorJSedition.Callingthismethodwilladaptall
     *DOMelementstokeeptheeditorconsistent.
     *
     *@private
     *@param{string}type-either'xml','scss'or'js'
     */
    _switchType:function(type){
        this.currentType=type;
        this.$typeSwitcherBtn.html(this.$typeSwitcherChoices.filter('[data-type='+type+']').html());
        _.each(this.$lists,function($list,_type){$list.toggleClass('d-none',type!==_type);});
        this.$lists[type].change();

        this.$includeBundlesArea.toggleClass('d-none',this.currentType!=='xml'||!config.isDebug());
        this.$includeAllSCSSArea.toggleClass('d-none',this.currentType!=='scss'||!config.isDebug());
        this.$includeAllSCSSArea.find('[data-value="restricted"]').toggleClass('d-none',this.options.defaultBundlesRestriction.length===0);
        this.$formatButton.toggleClass('d-none',this.currentType!=='xml');
    },
    /**
     *UpdatestheselectoptionDOMelementassociatedwithaparticularresID
     *toindicateiftheoptionisdirtyornot.
     *
     *@private
     *@param{integer|string}resID
     *@param{string}[type](defaulttothecurrentlyselectedone)
     *@param{boolean}[isDirty]trueiftheviewisdirty,defaulttocontent
     *                           ofUndoManager
     */
    _toggleDirtyInfo:function(resID,type,isDirty){
        type=type||this.currentType;

        if(!resID||!this.editingSessions[type][resID])return;

        var$option=this.$lists[type].find('[value="'+resID+'"]');
        if(isDirty===undefined){
            isDirty=this.editingSessions[type][resID].getUndoManager().hasUndo();
        }
        $option.data('dirty',isDirty);
    },
    /**
     *Rendersthecontentoftheview/file<select/>DOMelementaccordingto
     *currentwidgetdata.
     *
     *@private
     */
    _updateViewSelectDOM:function(){
        varcurrentId=this._getSelectedResource();

        varself=this;
        this.$lists.xml.empty();
        _.each(this.sortedViews,function(view){
            self.$lists.xml.append($('<option/>',{
                value:view.id,
                text:view.name,
                selected:currentId===view.id,
                'data-level':view.level,
                'data-debug':view.xml_id,
            }));
        });

        this.$lists.scss.empty();
        _populateList(this.sortedSCSS,this.$lists.scss,5);

        this.$lists.js.empty();
        _populateList(this.sortedJS,this.$lists.js,3);

        this.$lists.xml.select2('destroy');
        this.$lists.xml.select2({
            formatResult:_formatDisplay.bind(this,false),
            formatSelection:_formatDisplay.bind(this,true),
        });
        this.$lists.xml.data('select2').dropdown.addClass('o_ace_select2_dropdown');
        this.$lists.scss.select2('destroy');
        this.$lists.scss.select2({
            formatResult:_formatDisplay.bind(this,false),
            formatSelection:_formatDisplay.bind(this,true),
        });
        this.$lists.scss.data('select2').dropdown.addClass('o_ace_select2_dropdown');
        this.$lists.js.select2('destroy');
        this.$lists.js.select2({
            formatResult:_formatDisplay.bind(this,false),
            formatSelection:_formatDisplay.bind(this,true),
        });
        this.$lists.js.data('select2').dropdown.addClass('o_ace_select2_dropdown');

        function_populateList(sortedData,$list,lettersToRemove){
            _.each(sortedData,function(bundleInfos){
                var$optgroup=$('<optgroup/>',{
                    label:bundleInfos[0].name,
                }).appendTo($list);
                _.each(bundleInfos[1],function(dataInfo){
                    varname=dataInfo.url.substring(_.lastIndexOf(dataInfo.url,'/')+1,dataInfo.url.length-lettersToRemove);
                    $optgroup.append($('<option/>',{
                        value:dataInfo.url,
                        text:name,
                        selected:currentId===dataInfo.url,
                        'data-debug':dataInfo.url,
                        'data-customized':dataInfo.customized
                    }));
                });
            });
        }

        function_formatDisplay(isSelected,data){
            var$elem=$(data.element);

            vartext=data.text||'';
            if(!isSelected){
                text=Array(($elem.data('level')||0)+1).join('-')+''+text;
            }
            var$div=$('<div/>', {
                text:text,
                class:'o_ace_select2_result',
            });

            if($elem.data('dirty')||$elem.data('customized')){
                $div.prepend($('<span/>',{
                    class:'mr8fafa-floppy-o'+($elem.data('dirty')?'text-warning':'text-success'),
                }));
            }

            if(!isSelected&&config.isDebug()&&$elem.data('debug')){
                $div.append($('<span/>',{
                    text:'('+$elem.data('debug')+')',
                    class:'ml4smalltext-muted',
                }));
            }

            return$div;
        }
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *Calledwhentheclosebuttonisclicked->hidestheaceeditor.
     *
     *@private
     */
    _onCloseClick:function(){
        this._showErrorLine();
        this.do_hide();
    },
    /**
     *Calledwhentheformatbuttonisclicked->formatthecurrentresource.
     *
     *@private
     */
    _onFormatClick:function(){
        this._formatResource();
    },
    /**
     *Calledwhenafilterdropdownitemiscliked.Reloadtheresources
     *accordingtothenewfilterandmakeitvisuallyactive.
     *
     *@private
     *@param{Event}ev
     */
    _onFilterChange:function(ev){
        var$item=$(ev.target);
        $item.addClass('active').siblings().removeClass('active');
        if($item.data('type')==='xml'){
            this.options.includeBundles=$(ev.target).data('value')==='all';
        }else{
            this.options.filesFilter=$item.data('value');
        }
        this._loadResources().then(this._updateViewSelectDOM.bind(this));
    },
    /**
     *Calledwhenanotherresourceisselected->displaysit.
     *
     *@private
     */
    _onResChange:function(){
        this._displayResource(this._getSelectedResource());
    },
    /**
     *Calledwhentheresetbuttonisclicked->resetstheresourcestoits
     *originalstandardflectrastate.
     *
     *@private
     */
    _onResetClick:function(){
        varself=this;
        Dialog.confirm(this,_t("Ifyouresetthisfile,allyourcustomizationswillbelostasitwillberevertedtothedefaultfile."),{
            title:_t("Careful!"),
            confirm_callback:function(){
                self._resetResource(self._getSelectedResource());
            },
        });
    },
    /**
     *Calledwhenthesavebuttonisclicked->savesthedirtyresourcesand
     *reloads.
     *
     *@private
     */
    _onSaveClick:function(ev){
        constrestore=dom.addButtonLoadingEffect(ev.currentTarget);
        this._saveResources().then(restore).guardedCatch(restore);
    },
    /**
     *Calledwhentheuserwantstoswitchfromxmltoscssorvice-versa->
     *adaptresourceschoicesanddisplaysaresourceofthattype.
     *
     *@private
     *@param{Event}ev
     */
    _onTypeChoice:function(ev){
        ev.preventDefault();
        this._switchType($(ev.target).data('type'));
    },
    /**
     *AllowstohidethewarningmessagewithoutremovingitfromtheDOM
     *->bydefaultBootstrapremovesalertfromtheDOM
     */
    _onCloseWarningClick:function(){
        this.$warningMessage.addClass('d-none');
    },
});

returnViewEditor;
});
