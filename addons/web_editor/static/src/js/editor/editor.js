flectra.define('web_editor.editor',function(require){
'usestrict';

varDialog=require('web.Dialog');
varWidget=require('web.Widget');
varcore=require('web.core');
varrte=require('web_editor.rte');
varsnippetsEditor=require('web_editor.snippet.editor');
varsummernoteCustomColors=require('web_editor.rte.summernote_custom_colors');

var_t=core._t;

varEditorMenuBar=Widget.extend({
    template:'web_editor.editorbar',
    xmlDependencies:['/web_editor/static/src/xml/editor.xml'],
    events:{
        'clickbutton[data-action=save]':'_onSaveClick',
        'clickbutton[data-action=cancel]':'_onCancelClick',
    },
    custom_events:{
        request_editable:'_onRequestEditable',
        request_history_undo_record:'_onHistoryUndoRecordRequest',
        request_save:'_onSaveRequest',
    },

    /**
     *InitializesRTEandsnippetsmenu.
     *
     *@constructor
     */
    init:function(parent,options){
        varself=this;
        varres=this._super.apply(this,arguments);
        varEditor=options.Editor||rte.Class;
        this.rte=newEditor(this,{
            getConfig:function($editable){
                varparam=self._getDefaultConfig($editable);
                if(options.generateOptions){
                    param=options.generateOptions(param);
                }
                returnparam;
            },
            saveElement:options.saveElement,
        });
        this.rte.on('rte:start',this,function(){
            self.trigger('rte:start');
        });

        //Snippetsedition
        var$editable=this.rte.editable();
        window.__EditorMenuBar_$editable=$editable;//TODOremovethishackasap

        if(options.snippets){
            this.snippetsMenu=newsnippetsEditor.Class(this,Object.assign({
                $el:$editable,
                selectorEditableArea:'.o_editable',
            },options));
        }

        returnres;
    },
    /**
     *@override
     */
    start:function(){
        varself=this;
        vardefs=[this._super.apply(this,arguments)];

        core.bus.on('editor_save_request',this,this.save);
        core.bus.on('editor_discard_request',this,this.cancel);

        $('.dropdown-toggle').dropdown();

        $(document).on('keyup',function(event){
            if((event.keyCode===8||event.keyCode===46)){
                var$target=$(event.target).closest('.o_editable');
                if(!$target.is(':has(*:not(p):not(br))')&&!$target.text().match(/\S/)){
                    $target.empty();
                }
            }
        });
        $(document).on('click','.note-editable',function(ev){
            ev.preventDefault();
        });
        $(document).on('submit','.note-editableform.btn',function(ev){
            ev.preventDefault();//Disableformsubmitionineditablemode
        });
        $(document).on('hide.bs.dropdown','.dropdown',function(ev){
            //Preventdropdownclosingwhenacontenteditablechildrenisfocused
            if(ev.originalEvent
                    &&$(ev.target).has(ev.originalEvent.target).length
                    &&$(ev.originalEvent.target).is('[contenteditable]')){
                ev.preventDefault();
            }
        });

        this.rte.start();

        varflag=false;
        window.onbeforeunload=function(event){
            if(rte.history.getEditableHasUndo().length&&!flag){
                flag=true;
                _.defer(function(){flag=false;});
                return_t('Thisdocumentisnotsaved!');
            }
        };

        //Snippetsmenu
        if(self.snippetsMenu){
            defs.push(this.snippetsMenu.insertAfter(this.$el));
        }
        this.rte.editable().find('*').off('mousedownmouseupclick');

        returnPromise.all(defs).then(function(){
            self.trigger_up('edit_mode');
        });
    },
    /**
     *@override
     */
    destroy:function(){
        this._super.apply(this,arguments);
        core.bus.off('editor_save_request',this,this._onSaveRequest);
        core.bus.off('editor_discard_request',this,this._onDiscardRequest);
    },

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *Askstheuserifhereallywantstodiscarditschanges(ifthereare
     *someofthem),thensimplyreloadthepageifhewantsto.
     *
     *@param{boolean}[reload=true]
     *       trueifthepagehastobereloadedwhentheuseranswersyes
     *       (donothingotherwisebutaddthistoallowclassextension)
     *@returns{Promise}
     */
    cancel:function(reload){
        varself=this;
        returnnewPromise(function(resolve,reject){
            if(!rte.history.getEditableHasUndo().length){
                resolve();
            }else{
                varconfirm=Dialog.confirm(this,_t("Ifyoudiscardthecurrentedits,allunsavedchangeswillbelost.Youcancanceltoreturntoeditmode."),{
                    confirm_callback:resolve,
                });
                confirm.on('closed',self,reject);
            }
        }).then(function(){
            if(reload!==false){
                window.onbeforeunload=null;
                returnself._reload();
            }
        });
    },
    /**
     *Asksthesnippetstocleanthemself,thensavesthepage,thenreloadsit
     *ifaskedto.
     *
     *@param{boolean}[reload=true]
     *       trueifthepagehastobereloadedafterthesave
     *@returns{Promise}
     */
    save:asyncfunction(reload){
        vardefs=[];
        this.trigger_up('ready_to_save',{defs:defs});
        awaitPromise.all(defs);

        if(this.snippetsMenu){
            awaitthis.snippetsMenu.cleanForSave();
        }
        awaitthis.getParent().saveModifiedImages(this.rte.editable());
        awaitthis.rte.save();

        if(reload!==false){
            returnthis._reload();
        }
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *@private
     */
    _getDefaultConfig:function($editable){
        return{
            'airMode':true,
            'focus':false,
            'airPopover':[
                ['style',['style']],
                ['font',['bold','italic','underline','clear']],
                ['fontsize',['fontsize']],
                ['color',['color']],
                ['para',['ul','ol','paragraph']],
                ['table',['table']],
                ['insert',['link','picture']],
                ['history',['undo','redo']],
            ],
            'styleWithSpan':false,
            'inlinemedia':['p'],
            'lang':'flectra',
            'onChange':function(html,$editable){
                $editable.trigger('content_changed');
            },
            'colors':summernoteCustomColors,
        };
    },
    /**
     *Reloadsthepageinnon-editablemode,withtherightscrolling.
     *
     *@private
     *@returns{Promise}(neverresolved,thepageisreloadinganyway)
     */
    _reload:function(){
        window.location.hash='scrollTop='+window.document.body.scrollTop;
        if(window.location.search.indexOf('enable_editor')>=0){
            window.location.href=window.location.href.replace(/&?enable_editor(=[^&]*)?/g,'');
        }else{
            window.location.reload(true);
        }
        returnnewPromise(function(){});
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *Calledwhenthe"Discard"buttonisclicked->discardsthechanges.
     *
     *@private
     */
    _onCancelClick:function(){
        this.cancel();
    },
    /**
     *Calledwhenanelementaskestorecordanhistoryundo->recordsit.
     *
     *@private
     *@param{FlectraEvent}ev
     */
    _onHistoryUndoRecordRequest:function(ev){
        this.rte.historyRecordUndo(ev.data.$target,ev.data.event);
    },
    /**
     *Calledwhenthe"Save"buttonisclicked->savesthechanges.
     *
     *@private
     */
    _onSaveClick:function(){
        this.save();
    },
    /**
     *Calledwhenadiscardrequestisreceived->discardthepagecontent
     *changes.
     *
     *@private
     *@param{FlectraEvent}ev
     */
    _onDiscardRequest:function(ev){
        this.cancel(ev.data.reload).then(ev.data.onSuccess,ev.data.onFailure);
    },
    /**
     *Calledwhenasaverequestisreceived->savesthepagecontent.
     *
     *@private
     *@param{FlectraEvent}ev
     */
    _onSaveRequest:function(ev){
        ev.stopPropagation();
        this.save(ev.data.reload).then(ev.data.onSuccess,ev.data.onFailure);
    },
    /**
     *@private
     *@param{FlectraEvent}ev
     */
    _onRequestEditable:function(ev){
        ev.data.callback(this.rte.editable());
    },
});

return{
    Class:EditorMenuBar,
};
});
