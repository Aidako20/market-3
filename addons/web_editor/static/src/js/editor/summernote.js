flectra.define('web_editor.summernote',function(require){
'usestrict';

varcore=require('web.core');
require('summernote/summernote');//waitthatsummernoteisloaded
varweDefaultOptions=require('web_editor.wysiwyg.default_options');

var_t=core._t;

//SummernoteLib(neekhacktomakeaccessible:methodandobject)
//varagent=$.summernote.core.agent;
vardom=$.summernote.core.dom;
varrange=$.summernote.core.range;
varlist=$.summernote.core.list;
varkey=$.summernote.core.key;
vareventHandler=$.summernote.eventHandler;
vareditor=eventHandler.modules.editor;
varrenderer=$.summernote.renderer;
varoptions=$.summernote.options;

//Browser-unifyexecCommand
varoldJustify={};
_.each(['Left','Right','Full','Center'],function(align){
    oldJustify[align]=editor['justify'+align];
    editor['justify'+align]=function($editable,value){
        //Beforecallingthestandardfunction,checkallelementswhichhave
        //an'align'attributeandmarkthemwiththeirvalue
        var$align=$editable.find('[align]');
        _.each($align,function(el){
            var$el=$(el);
            $el.data('__align',$el.attr('align'));
        });

        //Callthestandardfunction
        oldJustify[align].apply(this,arguments);

        //Then:

        //Removethetext-alignofelementswhichlostthe'align'attribute
        var$newAlign=$editable.find('[align]');
        $align.not($newAlign).css('text-align','');

        //Transformthe'align'attributeintothe'text-align'css
        //propertyforelementswhichreceivedthe'align'attributeorwhose
        //'align'attributechanged
        _.each($newAlign,function(el){
            var$el=$(el);

            varoldAlignValue=$align.data('__align');
            varalignValue=$el.attr('align');
            if(oldAlignValue===alignValue){
                //Iftheelementalreadyhadan'align'attributeandthatit
                //didnotchanged,donothing(compatibility)
                return;
            }

            $el.removeAttr('align');
            $el.css('text-align',alignValue);

            //Notethefirststep(removingthetext-alignofelemntswhich
            //lostthe'align'attribute)iskindathesameasthisone,but
            //thisonehandlestheelementswhichhavebeeneditedwithchrome
            //orwiththisnewsystem
            $el.find('*').css('text-align','');
        });

        //Unmarktheelements
        $align.removeData('__align');
    };
});


//Addmethodstosummernote

dom.hasContentAfter=function(node){
    varnext;
    if(dom.isEditable(node))return;
    while(node.nextSibling){
        next=node.nextSibling;
        if(next.tagName||dom.isVisibleText(next)||dom.isBR(next))returnnext;
        node=next;
    }
};
dom.hasContentBefore=function(node){
    varprev;
    if(dom.isEditable(node))return;
    while(node.previousSibling){
        prev=node.previousSibling;
        if(prev.tagName||dom.isVisibleText(prev)||dom.isBR(prev))returnprev;
        node=prev;
    }
};
dom.ancestorHaveNextSibling=function(node,pred){
    pred=pred||dom.hasContentAfter;
    while(!dom.isEditable(node)&&(!node.nextSibling||!pred(node))){node=node.parentNode;}
    returnnode;
};
dom.ancestorHavePreviousSibling=function(node,pred){
    pred=pred||dom.hasContentBefore;
    while(!dom.isEditable(node)&&(!node.previousSibling||!pred(node))){node=node.parentNode;}
    returnnode;
};
dom.nextElementSibling=function(node){
    while(node){
        node=node.nextSibling;
        if(node&&node.tagName){
            break;
        }
    }
    returnnode;
};
dom.previousElementSibling=function(node){
    while(node){
        node=node.previousSibling;
        if(node&&node.tagName){
            break;
        }
    }
    returnnode;
};
dom.lastChild=function(node){
    while(node.lastChild){node=node.lastChild;}
    returnnode;
};
dom.firstChild=function(node){
    while(node.firstChild){node=node.firstChild;}
    returnnode;
};
dom.lastElementChild=function(node,deep){
    node=deep?dom.lastChild(node):node.lastChild;
    return!node||node.tagName?node:dom.previousElementSibling(node);
};
dom.firstElementChild=function(node,deep){
    node=deep?dom.firstChild(node):node.firstChild;
    return!node||node.tagName?node:dom.nextElementSibling(node);
};
dom.isEqual=function(prev,cur){
    if(prev.tagName!==cur.tagName){
        returnfalse;
    }
    if((prev.attributes?prev.attributes.length:0)!==(cur.attributes?cur.attributes.length:0)){
        returnfalse;
    }

    functionstrip(text){
        returntext&&text.replace(/^\s+|\s+$/g,'').replace(/\s+/g,'');
    }
    varatt,att2;
    loop_prev:
    for(varainprev.attributes){
        att=prev.attributes[a];
        for(varbincur.attributes){
            att2=cur.attributes[b];
            if(att.name===att2.name){
                if(strip(att.value)!==strip(att2.value))returnfalse;
                continueloop_prev;
            }
        }
        returnfalse;
    }
    returntrue;
};
dom.hasOnlyStyle=function(node){
    for(vari=0;i<node.attributes.length;i++){
        varattr=node.attributes[i];
        if(attr.attributeName!=='style'){
            returnfalse;
        }
    }
    returntrue;
};
dom.hasProgrammaticStyle=function(node){
    varstyles=["float","display","position","top","left","right","bottom"];
    for(vari=0;i<node.style.length;i++){
      varstyle=node.style[i];
      if(styles.indexOf(style)!==-1){
          returntrue;
      }
    }
    returnfalse;
};
dom.mergeFilter=function(prev,cur,parent){
    //mergetextnodes
    if(prev&&(dom.isText(prev)||(['H1','H2','H3','H4','H5','H6','LI','P'].indexOf(prev.tagName)!==-1&&prev!==cur.parentNode))&&dom.isText(cur)){
        returntrue;
    }
    if(prev&&prev.tagName==="P"&&dom.isText(cur)){
        returntrue;
    }
    if(prev&&dom.isText(cur)&&!dom.isVisibleText(cur)&&(dom.isText(prev)||dom.isVisibleText(prev))){
        returntrue;
    }
    if(prev&&!dom.isBR(prev)&&dom.isEqual(prev,cur)&&
        ((prev.tagName&&dom.getComputedStyle(prev).display==="inline"&&
          cur.tagName&&dom.getComputedStyle(cur).display==="inline"))){
        returntrue;
    }
    if(dom.isEqual(parent,cur)&&
        ((parent.tagName&&dom.getComputedStyle(parent).display==="inline"&&
          cur.tagName&&dom.getComputedStyle(cur).display==="inline"))){
        returntrue;
    }
    if(parent&&cur.tagName==="FONT"&&(!cur.firstChild||(!cur.attributes.getNamedItem('style')&&!cur.className.length))){
        returntrue;
    }
    //Onbackspace,webkitbrowserscreatea<span>withabunchof
    //inlinestyles"remembering"wheretheycomefrom.
    //chancesarewehade.g.
    // <p>foo</p>
    // <p>bar</p>
    //mergedthelinesgettingthisinwebkit
    // <p>foo<span>bar</span></p>
    if(parent&&cur.tagName==="SPAN"&&dom.hasOnlyStyle(cur)&&!dom.hasProgrammaticStyle(cur)){
        returntrue;
    }
};
dom.doMerge=function(prev,cur){
    if(prev.tagName){
        if(prev.childNodes.length&&!prev.textContent.match(/\S/)&&dom.firstElementChild(prev)&&dom.isBR(dom.firstElementChild(prev))){
            prev.removeChild(dom.firstElementChild(prev));
        }
        if(cur.tagName){
            while(cur.firstChild){
                prev.appendChild(cur.firstChild);
            }
            cur.parentNode.removeChild(cur);
        }else{
            prev.appendChild(cur);
        }
    }else{
        if(cur.tagName){
            vardeep=cur;
            while(deep.tagName&&deep.firstChild){deep=deep.firstChild;}
            prev.appendData(deep.textContent);
            cur.parentNode.removeChild(cur);
        }else{
            prev.appendData(cur.textContent);
            cur.parentNode.removeChild(cur);
        }
    }
};
dom.merge=function(node,begin,so,end,eo,mergeFilter,all){
    mergeFilter=mergeFilter||dom.mergeFilter;
    var_merged=false;
    varadd=all||false;

    if(!begin){
        begin=node;
        while(begin.firstChild){begin=begin.firstChild;}
        so=0;
    }elseif(begin.tagName&&begin.childNodes[so]){
        begin=begin.childNodes[so];
        so=0;
    }
    if(!end){
        end=node;
        while(end.lastChild){end=end.lastChild;}
        eo=end.textContent.length-1;
    }elseif(end.tagName&&end.childNodes[so]){
        end=end.childNodes[so];
        so=0;
    }

    begin=dom.firstChild(begin);
    if(dom.isText(begin)&&so>begin.textContent.length){
        so=0;
    }
    end=dom.firstChild(end);
    if(dom.isText(end)&&eo>end.textContent.length){
        eo=0;
    }

    function__merge(node){
        varmerged=false;
        varprev;
        for(vark=0;k<node.childNodes.length;k++){
            varcur=node.childNodes[k];

            if(cur===begin){
                if(!all)add=true;
            }

            __merge(cur);
            dom.orderClass(dom.node(cur));

            if(!add||!cur)continue;
            if(cur===end){
                if(!all)add=false;
            }

            //createthefirstprevvalue
            if(!prev){
                if(mergeFilter.call(dom,prev,cur,node)){
                    prev=prev||cur.previousSibling;
                    dom.moveTo(cur,cur.parentNode,cur);
                    k--;
                }else{
                    prev=cur;
                }
                continue;
            }elseif(mergeFilter.call(dom,null,cur,node)){//mergewithparent
                prev=prev||cur.previousSibling;
                dom.moveTo(cur,cur.parentNode,cur);
                k--;
                continue;
            }

            //mergenodes
            if(mergeFilter.call(dom,prev,cur,node)){
                varp=prev;
                varc=cur;
                //computeprev/endandoffset
                if(prev.tagName){
                    if(cur.tagName){
                        if(cur===begin)begin=prev;
                        if(cur===end)end=prev;
                    }
                }else{
                    if(cur.tagName){
                        vardeep=cur;
                        while(deep.tagName&&deep.lastChild){deep=deep.lastChild;}
                        if(deep===begin){
                            so+=prev.textContent.length;
                            begin=prev;
                        }
                        if(deep===end){
                            eo+=prev.textContent.length;
                            end=prev;
                        }
                    }else{
                        //mergetextnodes
                        if(cur===begin){
                            so+=prev.textContent.length;
                            begin=prev;
                        }
                        if(cur===end){
                            eo+=prev.textContent.length;
                            end=prev;
                        }
                    }
                }

                dom.doMerge(p,c);

                merged=true;
                k--;
                continue;
            }

            prev=cur;
        }

        //anotherlooptomergethenewshibbingnodes
        if(merged){
            _merged=true;
            __merge(node);
        }
    }
    if(node){
        __merge(node);
    }

    return{
        merged:_merged,
        sc:begin,
        ec:end,
        so:so,
        eo:eo
    };
};
dom.autoMerge=function(target,previous){
    varnode=dom.lastChild(target);
    varnodes=[];
    vartemp;

    while(node){
        nodes.push(node);
        temp=(previous?dom.hasContentBefore(node):dom.hasContentAfter(node));
        if(temp){
            if(!dom.isText(node)&&!dom.isMergable(node)&&temp.tagName!==node.tagName){
                nodes=[];
            }
            break;
        }
        node=node.parentNode;
    }

    while(nodes.length){
        node=nodes.pop();
        if(node&&(temp=(previous?dom.hasContentBefore(node):dom.hasContentAfter(node)))&&
            temp.tagName===node.tagName&&
            !dom.isText(node)&&
            dom.isMergable(node)&&
            !dom.isNotBreakable(node)&&!dom.isNotBreakable(previous?dom.previousElementSibling(node):dom.nextElementSibling(node))){

            if(previous){
                dom.doMerge(temp,node);
            }else{
                dom.doMerge(node,temp);
            }
        }
    }
};
dom.removeSpace=function(node,begin,so,end,eo){
    varremoved=false;
    varadd=node===begin;

    if(node===begin&&begin===end&&dom.isBR(node)){
        return{
            removed:removed,
            sc:begin,
            ec:end,
            so:so,
            eo:eo
        };
    }

    (function__remove_space(node){
        if(!node)return;
        vart_begin,t_end;
        for(vark=0;k<node.childNodes.length;k++){
            varcur=node.childNodes[k];

            if(cur===begin)add=true;

            if(cur.tagName&&cur.tagName!=="SCRIPT"&&cur.tagName!=="STYLE"&&dom.getComputedStyle(cur).whiteSpace!=="pre"){
                __remove_space(cur);
            }

            if(!add)continue;
            if(cur===end)add=false;

            //removebeginemptytextnode
            if(node.childNodes.length>1&&dom.isText(cur)&&!dom.isVisibleText(cur)){
                removed=true;
                if(cur===begin){
                        t_begin=dom.hasContentBefore(dom.ancestorHavePreviousSibling(cur));
                        if(t_begin){
                            so=0;
                            begin=dom.lastChild(t_begin);
                        }
                }
                if(cur===end){
                        t_end=dom.hasContentAfter(dom.ancestorHaveNextSibling(cur));
                        if(t_end){
                            eo=1;
                            end=dom.firstChild(t_end);
                            if(dom.isText(end)){
                                eo=end.textContent.length;
                            }
                    }
                }
                cur.parentNode.removeChild(cur);
                begin=dom.lastChild(begin);
                end=dom.lastChild(end);
                k--;
                continue;
            }

            //convertHTMLspace
            if(dom.isText(cur)){
                vartext;
                vartemp;
                var_temp;
                varexp1=/[\t\n\r]+/g;
                varexp2=/(?!([]|\u00A0)|^)\u00A0(?!([]|\u00A0)|$)/g;
                if(cur===begin){
                    temp=cur.textContent.substr(0,so);
                    _temp=temp.replace(exp1,'').replace(exp2,'');
                    so-=temp.length-_temp.length;
                }
                if(cur===end){
                    temp=cur.textContent.substr(0,eo);
                    _temp=temp.replace(exp1,'').replace(exp2,'');
                    eo-=temp.length-_temp.length;
                }
                text=cur.textContent.replace(exp1,'').replace(exp2,'');
                removed=removed||cur.textContent.length!==text.length;
                cur.textContent=text;
            }
        }
    })(node);

    return{
        removed:removed,
        sc:begin,
        ec:end,
        so:!dom.isBR(begin)&&so>0?so:0,
        eo:dom.isBR(end)?0:eo
    };
};
dom.removeBetween=function(sc,so,ec,eo,towrite){
    vartext;
    if(ec.tagName){
        if(ec.childNodes[eo]){
            ec=ec.childNodes[eo];
            eo=0;
        }else{
            ec=dom.lastChild(ec);
            eo=dom.nodeLength(ec);
        }
    }
    if(sc.tagName){
        sc=sc.childNodes[so]||dom.firstChild(ec);
        so=0;
        if(!dom.hasContentBefore(sc)&&towrite){
            sc.parentNode.insertBefore(document.createTextNode('\u00A0'),sc);
        }
    }
    if(!eo&&sc!==ec){
        ec=dom.lastChild(dom.hasContentBefore(dom.ancestorHavePreviousSibling(ec))||ec);
        eo=ec.textContent.length;
    }

    varancestor=dom.commonAncestor(sc.tagName?sc.parentNode:sc,ec.tagName?ec.parentNode:ec)||dom.ancestor(sc,dom.isEditable);

    if(!dom.isContentEditable(ancestor)){
        return{
            sc:sc,
            so:so,
            ec:sc,
            eo:eo
        };
    }

    if(ancestor.tagName){
        varancestor_sc=sc;
        varancestor_ec=ec;
        while(ancestor!==ancestor_sc&&ancestor!==ancestor_sc.parentNode){ancestor_sc=ancestor_sc.parentNode;}
        while(ancestor!==ancestor_ec&&ancestor!==ancestor_ec.parentNode){ancestor_ec=ancestor_ec.parentNode;}


        varnode=dom.node(sc);
        if(!dom.isNotBreakable(node)&&!dom.isVoid(sc)){
            sc=dom.splitTree(ancestor_sc,{'node':sc,'offset':so});
        }
        varbefore=dom.hasContentBefore(dom.ancestorHavePreviousSibling(sc));

        varafter;
        if(ec.textContent.slice(eo,Infinity).match(/\S|\u00A0/)){
            after=dom.splitTree(ancestor_ec,{'node':ec,'offset':eo});
        }else{
            after=dom.hasContentAfter(dom.ancestorHaveNextSibling(ec));
        }

        varnodes=dom.listBetween(sc,ec);

        varancestor_first_last=function(node){
            returnnode===before||node===after;
        };

        for(vari=0;i<nodes.length;i++){
            if(!dom.ancestor(nodes[i],ancestor_first_last)&&!$.contains(nodes[i],before)&&!$.contains(nodes[i],after)&&!dom.isEditable(nodes[i])){
                nodes[i].parentNode.removeChild(nodes[i]);
            }
        }

        if(dom.listAncestor(after).length <=dom.listAncestor(before).length){
            sc=dom.lastChild(before||ancestor);
            so=dom.nodeLength(sc);
        }else{
            sc=dom.firstChild(after);
            so=0;
        }

        if(dom.isVoid(node)){
            //wedon'tneedtoappendabr
        }elseif(towrite&&!node.firstChild&&node.parentNode&&!dom.isNotBreakable(node)){
            varbr=$("<br/>")[0];
            node.appendChild(sc);
            sc=br;
            so=0;
        }elseif(!ancestor.children.length&&!ancestor.textContent.match(/\S|\u00A0/)){
            sc=$("<br/>")[0];
            so=0;
            $(ancestor).prepend(sc);
        }elseif(dom.isText(sc)){
            text=sc.textContent.replace(/[\t\n\r]+$/,'\u00A0');
            so=Math.min(so,text.length);
            sc.textContent=text;
        }
    }else{
        text=ancestor.textContent;
        ancestor.textContent=text.slice(0,so)+text.slice(eo,Infinity).replace(/^[\t\n\r]+/,'\u00A0');
    }

    eo=so;
    if(!dom.isBR(sc)&&!dom.isVisibleText(sc)&&!dom.isText(dom.hasContentBefore(sc))&&!dom.isText(dom.hasContentAfter(sc))){
        ancestor=dom.node(sc);
        text=document.createTextNode('\u00A0');
        $(sc).before(text);
        sc=text;
        so=0;
        eo=1;
    }

    varparentNode=sc&&sc.parentNode;
    if(parentNode&&sc.tagName==='BR'){
        sc=parentNode;
        ec=parentNode;
    }

    return{
        sc:sc,
        so:so,
        ec:sc,
        eo:eo
    };
};
dom.indent=function(node){
    varstyle=dom.isCell(node)?'paddingLeft':'marginLeft';
    varmargin=parseFloat(node.style[style]||0)+1.5;
    node.style[style]=margin+"em";
    returnmargin;
};
dom.outdent=function(node){
    varstyle=dom.isCell(node)?'paddingLeft':'marginLeft';
    varmargin=parseFloat(node.style[style]||0)-1.5;
    node.style[style]=margin>0?margin+"em":"";
    returnmargin;
};
dom.scrollIntoViewIfNeeded=function(node){
    node=dom.node(node);

    var$span;
    if(dom.isBR(node)){
        $span=$('<span/>').text('\u00A0');
        $(node).after($span);
        node=$span[0];
    }

    if(node.scrollIntoViewIfNeeded){
        node.scrollIntoViewIfNeeded(false);
    }else{
        varoffsetParent=node.offsetParent;
        while(offsetParent){
            varelY=0;
            varelH=node.offsetHeight;
            varparent=node;

            while(offsetParent&&parent){
                elY+=node.offsetTop;

                //getifaparenthaveascrollbar
                parent=node.parentNode;
                while(parent!==offsetParent&&
                    (parent.tagName==="BODY"||["auto","scroll"].indexOf(dom.getComputedStyle(parent).overflowY)===-1)){
                    parent=parent.parentNode;
                }
                node=parent;

                if(parent!==offsetParent){
                    elY-=parent.offsetTop;
                    parent=null;
                }

                offsetParent=node.offsetParent;
            }

            if((node.tagName==="BODY"||["auto","scroll"].indexOf(dom.getComputedStyle(node).overflowY)!==-1)&&
                (node.scrollTop+node.clientHeight)<(elY+elH)){
                node.scrollTop=(elY+elH)-node.clientHeight;
            }
        }
    }

    if($span){
        $span.remove();
    }

    return;
};
dom.moveTo=function(node,target,before){
    varnodes=[];
    while(node.firstChild){
        nodes.push(node.firstChild);
        if(before){
            target.insertBefore(node.firstChild,before);
        }else{
            target.appendChild(node.firstChild);
        }
    }
    node.parentNode.removeChild(node);
    returnnodes;
};
dom.isMergable=function(node){
    returnnode.tagName&&"h1h2h3h4h5h6pbboldiucodesupstrongsmallliaulolfont".indexOf(node.tagName.toLowerCase())!==-1;
};
dom.isSplitable=function(node){
    returnnode.tagName&&"h1h2h3h4h5h6pbboldiucodesupstrongsmallliafont".indexOf(node.tagName.toLowerCase())!==-1;
};
dom.isRemovableEmptyNode=function(node){
    return"h1h2h3h4h5h6pbboldiucodesupstrongsmallliaulolfontspanbr".indexOf(node.tagName.toLowerCase())!==-1;
};
dom.isForbiddenNode=function(node){
    returnnode.tagName==="BR"||$(node).is(".fa,img");
};
/**
 *@todo'so'and'eo'wereaddedasabugfixandarenotgiveneverytime.They
 *howevershouldbeasthefunctionmaybewrongwithoutthem(forexample,
 *whenaskingthelistbetweenanelementanditsparent,asthereisnopath
 *fromthebeginningoftheformertothebeginningofthelater).
 */
dom.listBetween=function(sc,ec,so,eo){
    varnodes=[];
    varancestor=dom.commonAncestor(sc,ec);
    dom.walkPoint({'node':sc,'offset':so||0},{'node':ec,'offset':eo||0},function(point){
        if(ancestor!==point.node||ancestor===sc||ancestor===ec){
            nodes.push(point.node);
        }
    });
    returnlist.unique(nodes);
};
dom.isNotBreakable=function(node){
    //avoidtripleclick=>crappydom
    return!dom.isText(node)&&!dom.isBR(dom.firstChild(node))&&dom.isVoid(dom.firstChild(node));
};
dom.isContentEditable=function(node){
    return$(node).closest('[contenteditable]').prop('contenteditable')==='true';
};
dom.isContentEditableFalse=function(node){
    return$(node).closest('[contenteditable]').prop('contenteditable')==='false';
};
dom.isFont=function(node){
    varnodeName=node&&node.nodeName.toUpperCase();
    returnnode&&(nodeName==="FONT"||
        (nodeName==="SPAN"&&(
            node.className.match(/(^|\s)fa(\s|$)/i)||
            node.className.match(/(^|\s)(text|bg)-/i)||
            (node.attributes.style&&node.attributes.style.value.match(/(^|\s)(color|background-color|font-size):/i)))));
};
dom.isVisibleText=function(textNode){
  return!!textNode.textContent.match(/\S|\u00A0/);
};
varold_isVisiblePoint=dom.isVisiblePoint;
dom.isVisiblePoint=function(point){
  returnpoint.node.nodeType!==8&&old_isVisiblePoint.apply(this,arguments);
};
dom.orderStyle=function(node){
  varstyle=node.getAttribute('style');
  if(!style)returnnull;
  style=style.replace(/[\s\n\r]+/,'').replace(/^?;??|?;??$/g,'').replace(/?;?/g,';');
  if(!style.length){
      node.removeAttribute("style");
      returnnull;
  }
  style=style.split(";");
  style.sort();
  style=style.join(";")+";";
  node.setAttribute('style',style);
  returnstyle;
};
dom.orderClass=function(node){
    varclassName=node.getAttribute&&node.getAttribute('class');
    if(!className)returnnull;
    className=className.replace(/[\s\n\r]+/,'').replace(/^|$/g,'').replace(/+/g,'');
    if(!className.length){
        node.removeAttribute("class");
        returnnull;
    }
    className=className.split("");
    className.sort();
    className=className.join("");
    node.setAttribute('class',className);
    returnclassName;
};
dom.node=function(node){
    returndom.isText(node)?node.parentNode:node;
};
dom.moveContent=function(from,to){
  if(from===to){
    return;
  }
  if(from.parentNode===to){
    while(from.lastChild){
      dom.insertAfter(from.lastChild,from);
    }
  }else{
    while(from.firstChild&&from.firstChild!==to){
      to.appendChild(from.firstChild);
    }
  }
};
dom.getComputedStyle=function(node){
    returnnode.nodeType===Node.COMMENT_NODE?{}:window.getComputedStyle(node);
};

//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

range.WrappedRange.prototype.reRange=function(keep_end,isNotBreakable){
    varsc=this.sc;
    varso=this.so;
    varec=this.ec;
    vareo=this.eo;
    isNotBreakable=isNotBreakable||dom.isNotBreakable;

    //searchthefirstsnippeteditablenode
    varstart=keep_end?ec:sc;
    while(start){
        if(isNotBreakable(start,sc,so,ec,eo)){
            break;
        }
        start=start.parentNode;
    }

    //checkiftheendcarethavethesamenode
    varlastFilterEnd;
    varend=keep_end?sc:ec;
    while(end){
        if(start===end){
            break;
        }
        if(isNotBreakable(end,sc,so,ec,eo)){
            lastFilterEnd=end;
        }
        end=end.parentNode;
    }
    if(lastFilterEnd){
        end=lastFilterEnd;
    }
    if(!end){
        end=document.getElementsByTagName('body')[0];
    }

    //ifsamenode,keeprange
    if(start===end||!start){
        returnthis;
    }

    //reduceorextendtherangetodon'tbreakaisNotBreakablearea
    if($.contains(start,end)){

        if(keep_end){
                sc=dom.lastChild(dom.hasContentBefore(dom.ancestorHavePreviousSibling(end))||sc);
            so=sc.textContent.length;
        }elseif(!eo){
                ec=dom.lastChild(dom.hasContentBefore(dom.ancestorHavePreviousSibling(end))||ec);
            eo=ec.textContent.length;
        }else{
                ec=dom.firstChild(dom.hasContentAfter(dom.ancestorHaveNextSibling(end))||ec);
            eo=0;
        }
    }else{

        if(keep_end){
            sc=dom.firstChild(start);
            so=0;
        }else{
            ec=dom.lastChild(start);
            eo=ec.textContent.length;
        }
    }

    returnnewrange.WrappedRange(sc,so,ec,eo);
};
/**
 *Returnstheimagetherangeisinormatches(ifany,falseotherwise).
 *
 *@todothisimplementationmaynotcoverallcornercasesbutshoulddothe
 *trickforallreproductibleones
 *@returns{DOMElement|boolean}
 */
range.WrappedRange.prototype.isOnImg=function(){
    //Ifnotaselectionbutacursorposition,justcheckifapoint's
    //ancestorisanimageornot
    if(this.sc===this.ec&&this.so===this.eo){
        returndom.ancestor(this.sc,dom.isImg);
    }

    varstartPoint={node:this.sc,offset:this.so};
    varendPoint={node:this.ec,offset:this.eo};

    varnb=0;
    varimage;
    vartextNode;
    dom.walkPoint(startPoint,endPoint,function(point){
        //Iftheelementhaschildren(notatextnodeandnotemptynode),
        //theelementcannotbeconsideredasselected(thesechildrenwill
        //beprocessedtodeterminethat)
        if(dom.hasChildren(point.node)){
            return;
        }

        //Checkifanancestorofthecurrentpointisanimage
        varpointImg=dom.ancestor(point.node,dom.isImg);
        varisText=dom.isText(point.node);

        //Checkifavisibleelementisselected,i.e.
        //-Ifanancestorofthecurrentisanimagewedidnotseeyet
        //-Ifthepointisnotinabroratext(soanodewithnochildren)
        //-Ifthepointisinanonemptytextnodewealreadysaw
        if(pointImg?
            (image!==pointImg):
            ((!dom.isBR(point.node)&&!isText)||(textNode===point.node&&point.node.textContent.match(/\S|\u00A0/)))){
            nb++;
        }

        //Ifanancestorofthecurrentpointisanimage,thensaveitasthe
        //imagewearelookingfor
        if(pointImg){
            image=pointImg;
        }
        //Ifthecurrentpointisatextnodesaveitasthelasttextnode
        //seen(ifweseeitagain,thismightmeanitisselected)
        if(isText){
            textNode=point.node;
        }
    });

    returnnb===1&&image;
};
range.WrappedRange.prototype.deleteContents=function(towrite){
    if(this.sc===this.ec&&this.so===this.eo){
        returnthis;
    }

    varr;
    varimage=this.isOnImg();
    if(image){
        //Iftherangematches/isinanimage,thentheimageistoberemoved
        //andthecursormovedtoitspreviousposition
        varparentNode=image.parentNode;
        varindex=_.indexOf(parentNode.childNodes,image);
        parentNode.removeChild(image);
        r=newrange.WrappedRange(parentNode,index,parentNode,index);
    }else{
        r=dom.removeBetween(this.sc,this.so,this.ec,this.eo,towrite);
    }

    $(dom.node(r.sc)).trigger("click");//triggerclicktodisableandreanableeditorandimagehandler
    returnnewrange.WrappedRange(r.sc,r.so,r.ec,r.eo);
};
range.WrappedRange.prototype.clean=function(mergeFilter,all){
    varnode=dom.node(this.sc===this.ec?this.sc:this.commonAncestor());
        node=node||$(this.sc).closest('[contenteditable]')[0];
    if(node.childNodes.length<=1){
        returnthis;
    }

    varmerge=dom.merge(node,this.sc,this.so,this.ec,this.eo,mergeFilter,all);
    varrem=dom.removeSpace(node.parentNode,merge.sc,merge.so,merge.ec,merge.eo);

    if(merge.merged||rem.removed){
        returnrange.create(rem.sc,rem.so,rem.ec,rem.eo);
    }
    returnthis;
};
range.WrappedRange.prototype.remove=function(mergeFilter){
};
range.WrappedRange.prototype.isOnCellFirst=function(){
    varnode=dom.ancestor(this.sc,function(node){return["LI","DIV","TD","TH"].indexOf(node.tagName)!==-1;});
    returnnode&&["TD","TH"].indexOf(node.tagName)!==-1;
};
range.WrappedRange.prototype.isContentEditable=function(){
    returndom.isContentEditable(this.sc)&&(this.sc===this.ec||dom.isContentEditable(this.ec));
};

//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

renderer.tplButtonInfo.fontsize=function(lang,options){
    varitems=options.fontSizes.reduce(function(memo,v){
        returnmemo+'<adata-event="fontSize"href="#"class="dropdown-item"data-value="'+v+'">'+
                  '<iclass="fafa-check"></i>'+v+
                '</a>';
    },'');

    varsLabel='<spanclass="note-current-fontsize">11</span>';
    returnrenderer.getTemplate().button(sLabel,{
        title:lang.font.size,
        dropdown:'<divclass="dropdown-menu">'+items+'</div>'
    });
};

renderer.tplButtonInfo.color=function(lang,options){
    varforeColorButtonLabel='<iclass="'+options.iconPrefix+options.icons.color.recent+'"></i>';
    varbackColorButtonLabel='<iclass="'+options.iconPrefix+'paint-brush"></i>';
    //TODORemoverecentcolorbuttonifpossible.
    //ItisstillputtoavoidJSerrorswhenclickingotherbuttonsasthe
    //editorstillexpectsittoexist.
    varrecentColorButton=renderer.getTemplate().button(foreColorButtonLabel,{
        className:'note-recent-colord-none',
        title:lang.color.foreground,
        event:'color',
        value:'{"backColor":"#B35E9B"}'
    });
    varforeColorButton=renderer.getTemplate().button(foreColorButtonLabel,{
        className:'note-fore-color-preview',
        title:lang.color.foreground,
        dropdown:renderer.getTemplate().dropdown('<li><divdata-event-name="foreColor"class="colorPalette"/></li>'),
    });
    varbackColorButton=renderer.getTemplate().button(backColorButtonLabel,{
        className:'note-back-color-preview',
        title:lang.color.background,
        dropdown:renderer.getTemplate().dropdown('<li><divdata-event-name="backColor"class="colorPalette"/></li>'),
    });
    returnrecentColorButton+foreColorButton+backColorButton;
};

renderer.tplButtonInfo.checklist=function(lang,options){
    return'<button'+
            'type="button"'+
            'class="btnbtn-secondarybtn-sm"'+
            'title="'+_t('Checklist')+'"'+
            'data-event="insertCheckList"'+
            'tabindex="-1"'+
            'data-name="ul"'+
        '><iclass="fafa-check-square"></i></button>';
};

//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

key.nameFromCode[46]='DELETE';
key.nameFromCode[27]='ESCAPE';

options.keyMap.pc['BACKSPACE']='backspace';
options.keyMap.pc['DELETE']='delete';
options.keyMap.pc['ENTER']='enter';
options.keyMap.pc['ESCAPE']='cancel';
options.keyMap.mac['SHIFT+TAB']='untab';
options.keyMap.pc['UP']='up';
options.keyMap.pc['DOWN']='down';

options.keyMap.mac['BACKSPACE']='backspace';
options.keyMap.mac['DELETE']='delete';
options.keyMap.mac['ENTER']='enter';
options.keyMap.mac['ESCAPE']='cancel';
options.keyMap.mac['UP']='up';
options.keyMap.mac['DOWN']='down';

options.styleTags=weDefaultOptions.styleTags;

$.summernote.pluginEvents.insertTable=function(event,editor,layoutInfo,sDim){
  var$editable=layoutInfo.editable();
  $editable.focus();
  vardimension=sDim.split('x');
  varr=range.create();
  if(!r)return;
  r=r.deleteContents(true);

  vartable=editor.table.createTable(dimension[0],dimension[1]);
  varparent=r.sc;
  while(dom.isText(parent.parentNode)||dom.isRemovableEmptyNode(parent.parentNode)){
    parent=parent.parentNode;
  }
  varnode=dom.splitTree(parent,{'node':r.sc,'offset':r.so})||r.sc;
  node.parentNode.insertBefore(table,node);

  if($(node).text()===''||node.textContent==='\u00A0'){
    node.parentNode.removeChild(node);
  }

  editor.afterCommand($editable);
  event.preventDefault();
  returnfalse;
};
$.summernote.pluginEvents.tab=function(event,editor,layoutInfo,outdent){
    var$editable=layoutInfo.editable();
    $editable.data('NoteHistory').recordUndo($editable,'tab');
    varr=range.create();
    outdent=outdent||false;
    event.preventDefault();

    if(r&&(dom.ancestor(r.sc,dom.isCell)||dom.ancestor(r.ec,dom.isCell))){
        if(r.isCollapsed()&&r.isOnCell()&&r.isOnCellFirst()){
            vartd=dom.ancestor(r.sc,dom.isCell);
            if(!outdent&&!dom.nextElementSibling(td)&&!dom.nextElementSibling(td.parentNode)){
                varlast=dom.lastChild(td);
                range.create(last,dom.nodeLength(last),last,dom.nodeLength(last)).select();
                $.summernote.pluginEvents.enter(event,editor,layoutInfo);
            }elseif(outdent&&!dom.previousElementSibling(td)&&!$(td.parentNode).text().match(/\S/)){
                $.summernote.pluginEvents.backspace(event,editor,layoutInfo);
            }else{
                editor.table.tab(r,outdent);
            }
        }else{
            $.summernote.pluginEvents.indent(event,editor,layoutInfo,outdent);
        }
    }elseif(r&&r.isCollapsed()){
        if(!r.sc.textContent.slice(0,r.so).match(/\S/)&&r.isOnList()){
            if(outdent){
                $.summernote.pluginEvents.outdent(event,editor,layoutInfo);
            }else{
                $.summernote.pluginEvents.indent(event,editor,layoutInfo);
            }
        }else{
            varnext;
            if(!outdent){
                if(dom.isText(r.sc)){
                    next=r.sc.splitText(r.so);
                }else{
                    next=document.createTextNode('');
                    $(r.sc.childNodes[r.so]).before(next);
                }
                editor.typing.insertTab($editable,r,options.tabsize);
                r=range.create(next,0,next,0);
                r=dom.merge(r.sc.parentNode,r.sc,r.so,r.ec,r.eo,null,true);
                range.create(r.sc,r.so,r.ec,r.eo).select();
            }else{
                r=dom.merge(r.sc.parentNode,r.sc,r.so,r.ec,r.eo,null,true);
                r=range.create(r.sc,r.so,r.ec,r.eo);
                if(r.sc.splitText){
                    next=r.sc.splitText(r.so);
                    r.sc.textContent=r.sc.textContent.replace(/(\u00A0)+$/g,'');
                    next.textContent=next.textContent.replace(/^(\u00A0)+/g,'');
                    range.create(r.sc,r.sc.textContent.length,r.sc,r.sc.textContent.length).select();
                }
            }
        }
    }
    returnfalse;
};
$.summernote.pluginEvents.untab=function(event,editor,layoutInfo){
    return$.summernote.pluginEvents.tab(event,editor,layoutInfo,true);
};
$.summernote.pluginEvents.up=function(event,editor,layoutInfo){
    varr=range.create();
    varnode=dom.firstChild(r.sc.childNodes[r.so]||r.sc);
    if(!r.isOnCell()){
        return;
    }
    //checkifanancestorbetweennodeandcellhascontentbefore
    varancestor=dom.ancestor(node,function(ancestorNode){
        returndom.hasContentBefore(ancestorNode)||dom.isCell(ancestorNode);
    });
    if(!dom.isCell(ancestor)&&(!dom.isBR(dom.hasContentBefore(ancestor))||!dom.isText(node)||dom.isVisibleText(node)||dom.hasContentBefore(dom.hasContentBefore(ancestor)))){
        return;
    }
    event.preventDefault();
    vartd=dom.ancestor(r.sc,dom.isCell);
    vartr=td.parentNode;
    vartarget=tr.previousElementSibling&&tr.previousElementSibling.children[_.indexOf(tr.children,td)];
    if(!target){
        target=(dom.ancestorHavePreviousSibling(tr)||tr).previousSibling;
    }
    if(target){
        range.create(dom.lastChild(target),dom.lastChild(target).textContent.length).select();
    }
};
$.summernote.pluginEvents.down=function(event,editor,layoutInfo){
    varr=range.create();
    varnode=dom.firstChild(r.sc.childNodes[r.so]||r.sc);
    if(!r.isOnCell()){
        return;
    }
    //checkifanancestorbetweennodeandcellhascontentafter
    varancestor=dom.ancestor(node,function(ancestorNode){
        returndom.hasContentAfter(ancestorNode)||dom.isCell(ancestorNode);
    });
    if(!dom.isCell(ancestor)&&(!dom.isBR(dom.hasContentAfter(ancestor))||!dom.isText(node)||dom.isVisibleText(node)||dom.hasContentAfter(dom.hasContentAfter(ancestor)))){
        return;
    }
    event.preventDefault();
    vartd=dom.ancestor(r.sc,dom.isCell);
    vartr=td.parentNode;
    vartarget=tr.nextElementSibling&&tr.nextElementSibling.children[_.indexOf(tr.children,td)];
    if(!target){
        target=(dom.ancestorHaveNextSibling(tr)||tr).nextSibling;
    }
    if(target){
        range.create(dom.firstChild(target),0).select();
    }
};
$.summernote.pluginEvents.enter=function(event,editor,layoutInfo){
    var$editable=layoutInfo.editable();
    $editable.data('NoteHistory').recordUndo($editable,'enter');

    varr=range.create();
    if(!r.isContentEditable()){
        event.preventDefault();
        returnfalse;
    }
    if(!r.isCollapsed()){
        r=r.deleteContents();
        r.select();
    }

    varbr=$("<br/>")[0];

    //setselectionoutsideofAifrangeisatbeginningorend
    varelem=dom.isBR(elem)?elem.parentNode:dom.node(r.sc);
    if(elem.tagName==="A"){
        if(r.so===0&&dom.firstChild(elem)===r.sc){
            r.ec=r.sc=dom.hasContentBefore(elem)||$(dom.createText('')).insertBefore(elem)[0];
            r.eo=r.so=dom.nodeLength(r.sc);
            r.select();
        }elseif(dom.nodeLength(r.sc)===r.so&&dom.lastChild(elem)===r.sc){
            r.ec=r.sc=dom.hasContentAfter(elem)||dom.insertAfter(dom.createText(''),elem);
            r.eo=r.so=0;
            r.select();
        }
    }

    varnode;
    var$node;
    var$clone;
    varcontentBefore=r.sc.textContent.slice(0,r.so).match(/\S|\u00A0/);
    if(!contentBefore&&dom.isText(r.sc)){
        node=r.sc.previousSibling;
        while(!contentBefore&&node&&dom.isText(node)){
            contentBefore=dom.isVisibleText(node);
            node=node.previousSibling;
        }
    }

    node=dom.node(r.sc);
    varexist=r.sc.childNodes[r.so]||r.sc;
    exist=dom.isVisibleText(exist)||dom.isBR(exist)?exist:dom.hasContentAfter(exist)||(dom.hasContentBefore(exist)||exist);

    //table:addatr
    vartd=dom.ancestor(node,dom.isCell);
    if(td&&!dom.nextElementSibling(node)&&!dom.nextElementSibling(td)&&!dom.nextElementSibling(td.parentNode)&&(!dom.isText(r.sc)||!r.sc.textContent.slice(r.so).match(/\S|\u00A0/))){
        $node=$(td.parentNode);
        $clone=$node.clone();
        $clone.children().html(dom.blank);
        $node.after($clone);
        node=dom.firstElementChild($clone[0])||$clone[0];
        range.create(node,0,node,0).select();
        dom.scrollIntoViewIfNeeded(br);
        event.preventDefault();
        returnfalse;
    }

    varlast=node;
    while(node&&dom.isSplitable(node)&&!dom.isList(node)){
        last=node;
        node=node.parentNode;
    }

    if(last===node&&!dom.isBR(node)){
        node=r.insertNode(br,true);
        if(isFormatNode(last.firstChild)&&$(last).closest(options.styleTags.join(',')).length){
            dom.moveContent(last.firstChild,last);
            last.removeChild(last.firstChild);
        }
        do{
            node=dom.hasContentAfter(node);
        }while(node&&dom.isBR(node));

        //createanotherbrbecausetheusercan'tseethenewlinewithonlybrinablock
        if(!node&&(!br.nextElementSibling||!dom.isBR(br.nextElementSibling))){
            $(br).before($("<br/>")[0]);
        }
        node=br.nextSibling||br;
    }elseif(last===node&&dom.isBR(node)){
        $(node).after(br);
        node=br;
    }elseif(!r.so&&r.isOnList()&&!r.sc.textContent.length&&!dom.ancestor(r.sc,dom.isLi).nextElementSibling){
        //doubleenterontheendofalist=newlineoutofthelist
        $('<p></p>').append(br).insertAfter(dom.ancestor(r.sc,dom.isList));
        node=br;
    }elseif(dom.isBR(exist)&&$(r.sc).closest('blockquote,pre').length&&!dom.hasContentAfter($(exist.parentNode).closest('blockquote*,pre*').length?exist.parentNode:exist)){
        //doubleenterontheendofablockquote&pre=newlineoutofthelist
        $('<p></p>').append(br).insertAfter($(r.sc).closest('blockquote,pre'));
        node=br;
    }elseif(dom.isEditable(dom.node(r.sc))){
        //ifwearedirectlyinaneditable,onlySHIFT+ENTERshouldaddanewline
        node=null;
    }elseif(last===r.sc){
        if(dom.isBR(last)){
            last=last.parentNode;
        }
        $node=$(last);
        $clone=$node.clone().text("");
        $node.after($clone);
        node=dom.node(dom.firstElementChild($clone[0])||$clone[0]);
        $(node).html(br);
        node=br;
    }else{
        node=dom.splitTree(last,{'node':r.sc,'offset':r.so})||r.sc;
        if(!contentBefore){
            //dom.nodechoosestheparentifnodeistext
            varcur=dom.node(dom.lastChild(node.previousSibling));
            if(!dom.isBR(cur)){
                //Weshouldconcatwhatwasbeforewitha<br>
                $(cur).html(cur.innerHTML+br.outerHTML);
            }
        }
        if(!dom.isVisibleText(node)){
            node=dom.firstChild(node);
            $(dom.node(dom.isBR(node)?node.parentNode:node)).html(br);
            node=br;
        }
    }

    if(node){
        node=dom.firstChild(node);
        if(dom.isBR(node)){
            range.createFromNode(node).select();
        }else{
            range.create(node,0).select();
        }
        dom.scrollIntoViewIfNeeded(node);
    }
    event.preventDefault();
    returnfalse;
};
$.summernote.pluginEvents.visible=function(event,editor,layoutInfo){
    var$editable=layoutInfo.editable();
    $editable.data('NoteHistory').recordUndo($editable,"visible");

    varr=range.create();
    if(!r)return;

    if(!r.isCollapsed()){
        if((dom.isCell(dom.node(r.sc))||dom.isCell(dom.node(r.ec)))&&dom.node(r.sc)!==dom.node(r.ec)){
            remove_table_content(r);
            r=range.create(r.ec,0);
        }
        r.select();
    }

    //don'twriteinforbiddentag(likespanforfontawsome)
    varnode=dom.firstChild(r.sc.tagName&&r.so?r.sc.childNodes[r.so]||r.sc:r.sc);
    while(node.parentNode){
        if(dom.isForbiddenNode(node)){
            vartext=node.previousSibling;
            if(text&&dom.isText(text)&&dom.isVisibleText(text)){
                range.create(text,text.textContent.length,text,text.textContent.length).select();
            }else{
                text=node.parentNode.insertBefore(document.createTextNode("."),node);
                range.create(text,1,text,1).select();
                setTimeout(function(){
                    vartext=range.create().sc;
                    text.textContent=text.textContent.replace(/^./,'');
                    range.create(text,text.textContent.length,text,text.textContent.length).select();
                },0);
            }
            break;
        }
        node=node.parentNode;
    }

    returntrue;
};

functionremove_table_content(r){
    varnodes=dom.listBetween(r.sc,r.ec,r.so,r.eo);
    if(dom.isText(r.sc)){
        r.sc.textContent=r.sc.textContent.slice(0,r.so);
    }
    if(dom.isText(r.ec)){
        r.ec.textContent=r.ec.textContent.slice(r.eo);
    }
    for(variinnodes){
        varnode=nodes[i];
        if(node===r.sc||node===r.ec||$.contains(node,r.sc)||$.contains(node,r.ec)){
            continue;
        }elseif(dom.isCell(node)){
            $(node).html("<br/>");
        }elseif(node.parentNode){
            do{
                varparent=node.parentNode;
                parent.removeChild(node);
                node=parent;
            }while(!dom.isVisibleText(node)&&!dom.firstElementChild(node)&&
                !dom.isCell(node)&&
                node.parentNode&&!$(node.parentNode).hasClass('o_editable'));
        }
    }
    returnfalse;
}

$.summernote.pluginEvents.delete=function(event,editor,layoutInfo){
    var$editable=layoutInfo.editable();
    $editable.data('NoteHistory').recordUndo($editable,"delete");

    varr=range.create();
    if(!r)return;
    if(!r.isContentEditable()){
        event.preventDefault();
        returnfalse;
    }
    if(!r.isCollapsed()){
        if(dom.isCell(dom.node(r.sc))||dom.isCell(dom.node(r.ec))){
            remove_table_content(r);
            range.create(r.ec,0).select();
        }else{
            r=r.deleteContents();
            r.select();
        }
        event.preventDefault();
        returnfalse;
    }

    vartarget=r.ec;
    varoffset=r.eo;
    if(target.tagName&&target.childNodes[offset]){
        target=target.childNodes[offset];
        offset=0;
    }

    varnode=dom.node(target);
    vardata=dom.merge(node,target,offset,target,offset,null,true);
    data=dom.removeSpace(node.parentNode,data.sc,data.so,data.ec,data.eo);
    r=range.create(data.sc,data.so);
    r.select();
    target=r.sc;
    offset=r.so;

    while(!dom.hasContentAfter(node)&&!dom.hasContentBefore(node)&&!dom.isImg(node)){node=node.parentNode;}

    varcontentAfter=target.textContent.slice(offset,Infinity).match(/\S|\u00A0/);
    varcontent=target.textContent.replace(/[\t\r\n]+$/,'');
    vartemp;
    vartemp2;
    varnext;

    //media
    if(dom.isImg(node)||(!contentAfter&&dom.isImg(dom.hasContentAfter(node)))){
        varparent;
        varindex;
        if(!dom.isImg(node)){
            node=dom.hasContentAfter(node);
        }
        while(dom.isImg(node)){
            parent=node.parentNode;
            index=dom.position(node);
            if(index>0){
                next=node.previousSibling;
                r=range.create(next,next.textContent.length);
            }else{
                r=range.create(parent,0);
            }
            if(!dom.hasContentAfter(node)&&!dom.hasContentBefore(node)){
                parent.appendChild($('<br/>')[0]);
            }
            parent.removeChild(node);
            node=parent;
            r.select();
        }
    }
    //emptytag
    elseif(!content.length&&target.tagName&&dom.isRemovableEmptyNode(dom.isBR(target)?target.parentNode:target)){
        if(node===$editable[0]||$.contains(node,$editable[0])){
            event.preventDefault();
            returnfalse;
        }
        varbefore=false;
        next=dom.hasContentAfter(dom.ancestorHaveNextSibling(node));
        if(!dom.isContentEditable(next)){
            before=true;
            next=dom.hasContentBefore(dom.ancestorHavePreviousSibling(node));
        }
        dom.removeSpace(next.parentNode,next,0,next,0);//cleanbeforejumpfornotselectinvisiblespacebetween2tag
        next=dom.firstChild(next);
        node.parentNode.removeChild(node);
        range.create(next,before?next.textContent.length:0).select();
    }
    //normalfeatureifsametagandnottheend
    elseif(contentAfter){
        returntrue;
    }
    //mergewiththenexttextnode
    elseif(dom.isText(target)&&(temp=dom.hasContentAfter(target))&&dom.isText(temp)){
        returntrue;
    }
    //mergewiththenextblock
    elseif((temp=dom.ancestorHaveNextSibling(target))&&
            !r.isOnCell()&&
            dom.isMergable(temp)&&
            dom.isMergable(temp2=dom.hasContentAfter(temp))&&
            temp.tagName===temp2.tagName&&
            (temp.tagName!=="LI"||!$('ul,ol',temp).length)&&(temp2.tagName!=="LI"||!$('ul,ol',temp2).length)&&//protectli
            !dom.isNotBreakable(temp)&&
            !dom.isNotBreakable(temp2)){
        dom.autoMerge(target,false);
        next=dom.firstChild(dom.hasContentAfter(dom.ancestorHaveNextSibling(target)));
        if(dom.isBR(next)){
            if(dom.position(next)===0){
                range.create(next.parentNode,0).select();
            }
            else{
                range.create(next.previousSibling,next.previousSibling.textContent.length).select();
            }
            next.parentNode.removeChild(next);
        }else{
            range.create(next,0).select();
        }
    }
    //jumptonextnodefordelete
    elseif((temp=dom.ancestorHaveNextSibling(target))&&(temp2=dom.hasContentAfter(temp))&&dom.isContentEditable(temp2)){

        dom.removeSpace(temp2.parentNode,temp2,0,temp,0);//cleanbeforejumpfornotselectinvisiblespacebetween2tag
        temp2=dom.firstChild(temp2);

        r=range.create(temp2,0);
        r.select();

        if((dom.isText(temp)||dom.getComputedStyle(temp).display==="inline")&&(dom.isText(temp2)||dom.getComputedStyle(temp2).display==="inline")){
            if(dom.isText(temp2)){
                temp2.textContent=temp2.textContent.replace(/^\s*\S/,'');
            }else{
                $.summernote.pluginEvents.delete(event,editor,layoutInfo);
            }
        }
    }

    $(dom.node(r.sc)).trigger("click");//triggerclicktodisableandreanableeditorandimagehandler
    event.preventDefault();
    returnfalse;
};
$.summernote.pluginEvents.backspace=function(event,editor,layoutInfo){
    var$editable=layoutInfo.editable();
    $editable.data('NoteHistory').recordUndo($editable,"backspace");

    varr=range.create();
    if(!r)return;
    if(!r.isContentEditable()){
        event.preventDefault();
        returnfalse;
    }
    if(!r.isCollapsed()){
        if(dom.isCell(dom.node(r.sc))||dom.isCell(dom.node(r.ec))){
            remove_table_content(r);
            range.create(r.sc,dom.nodeLength(r.sc)).select();
        }else{
            r=r.deleteContents();
            r.select();
        }
        event.preventDefault();
        returnfalse;
    }

    vartarget=r.sc;
    varoffset=r.so;
    if(target.tagName&&target.childNodes[offset]){
        target=target.childNodes[offset];
        offset=0;
    }

    varnode=dom.node(target);
    vardata=dom.merge(node,target,offset,target,offset,null,true);
    data=dom.removeSpace(node.parentNode,data.sc,data.so,data.ec,data.eo);
    r=dom.isVoid(data.sc)?range.createFromNode(data.sc):range.create(data.sc,data.so);
    r.select();
    target=r.sc;
    offset=r.so;
    if(target.tagName&&target.childNodes[offset]){
        target=target.childNodes[offset];
        offset=0;
        node=dom.node(target);
    }

    while(node.parentNode&&!dom.hasContentAfter(node)&&!dom.hasContentBefore(node)&&!dom.isImg(node)){node=node.parentNode;}

    varcontentBefore=target.textContent.slice(0,offset).match(/\S|\u00A0/);
    varcontent=target.textContent.replace(/[\t\r\n]+$/,'');
    vartemp;
    vartemp2;
    varprev;

    //deletemedia
    if(dom.isImg(node)||(!contentBefore&&dom.isImg(dom.hasContentBefore(node)))){
        if(!dom.isImg(node)){
            node=dom.hasContentBefore(node);
        }
        range.createFromNode(node).select();
        $.summernote.pluginEvents.delete(event,editor,layoutInfo);
    }
    //tabletrtd
    elseif(r.isOnCell()&&!offset&&(target===(temp=dom.ancestor(target,dom.isCell))||target===temp.firstChild||(dom.isText(temp.firstChild)&&!dom.isVisibleText(temp.firstChild)&&target===temp.firstChild.nextSibling))){
        if(dom.previousElementSibling(temp)){
            vartd=dom.previousElementSibling(temp);
            node=td.lastChild||td;
        }else{
            vartr=temp.parentNode;
            varprevTr=dom.previousElementSibling(tr);
            if(!$(temp.parentNode).text().match(/\S|\u00A0/)){
                if(prevTr){
                    node=dom.lastChild(dom.lastElementChild(prevTr));
                }else{
                    node=dom.lastChild(dom.hasContentBefore(dom.ancestorHavePreviousSibling(tr))||$editable.get(0));
                }
                $(tr).empty();
                if(!$(tr).closest('table').has('td,th').length){
                    $(tr).closest('table').remove();
                }
                $(tr).remove();
                range.create(node,node.textContent.length,node,node.textContent.length).select();
            }else{
                node=dom.lastElementChild(prevTr).lastChild||dom.lastElementChild(prevTr);
            }
        }
        if(dom.isBR(node)){
            range.createFromNode(node).select();
        }else{
            range.create(node,dom.nodeLength(node)).select();
        }
    }
    //emptytag
    elseif(!content.length&&target.tagName&&dom.isRemovableEmptyNode(target)){
        if(node===$editable[0]||$.contains(node,$editable[0])){
            event.preventDefault();
            returnfalse;
        }
        varbefore=true;
        prev=dom.hasContentBefore(dom.ancestorHavePreviousSibling(node));
        if(!dom.isContentEditable(prev)){
            before=false;
            prev=dom.hasContentAfter(dom.ancestorHaveNextSibling(node));
        }
        dom.removeSpace(prev.parentNode,prev,0,prev,0);//cleanbeforejumpfornotselectinvisiblespacebetween2tag
        prev=dom.lastChild(prev);
        node.parentNode.removeChild(node);
        range.createFromNode(prev).select();
        range.create(prev,before?prev.textContent.length:0).select();
    }
    //normalfeatureifsametagandnotthebegin
    elseif(contentBefore){
        returntrue;
    }
    //mergewiththeprevioustextnode
    elseif(dom.isText(target)&&(temp=dom.hasContentBefore(target))&&(dom.isText(temp)||dom.isBR(temp))){
        returntrue;
    }
    //mergewiththepreviousblock
    elseif((temp=dom.ancestorHavePreviousSibling(target))&&
            dom.isMergable(temp)&&
            dom.isMergable(temp2=dom.hasContentBefore(temp))&&
            temp.tagName===temp2.tagName&&
            (temp.tagName!=="LI"||!$('ul,ol',temp).length)&&(temp2.tagName!=="LI"||!$('ul,ol',temp2).length)&&//protectli
            !dom.isNotBreakable(temp)&&
            !dom.isNotBreakable(temp2)){
        prev=dom.firstChild(target);
        dom.autoMerge(target,true);
        range.create(prev,0).select();
    }
    //jumptopreviousnodefordelete
    elseif((temp=dom.ancestorHavePreviousSibling(target))&&(temp2=dom.hasContentBefore(temp))&&dom.isContentEditable(temp2)){

        dom.removeSpace(temp2.parentNode,temp2,0,temp,0);//cleanbeforejumpfornotselectinvisiblespacebetween2tag
        temp2=dom.lastChild(temp2);

        r=range.create(temp2,temp2.textContent.length,temp2,temp2.textContent.length);
        r.select();

        if((dom.isText(temp)||dom.getComputedStyle(temp).display==="inline")&&(dom.isText(temp2)||dom.getComputedStyle(temp2).display==="inline")){
            if(dom.isText(temp2)){
                temp2.textContent=temp2.textContent.replace(/\S\s*$/,'');
            }else{
                $.summernote.pluginEvents.backspace(event,editor,layoutInfo);
            }
        }
    }

    r=range.create();
    if(r){
        $(dom.node(r.sc)).trigger("click");//triggerclicktodisableandreanableeditorandimagehandler
        dom.scrollIntoViewIfNeeded(r.sc.parentNode.previousElementSibling||r.sc);
    }

    event.preventDefault();
    returnfalse;
};

functionisFormatNode(node){
    returnnode.tagName&&options.styleTags.indexOf(node.tagName.toLowerCase())!==-1;
}

$.summernote.pluginEvents.insertUnorderedList=function(event,editor,layoutInfo,type){
    var$editable=layoutInfo.editable();
    $editable.focus();
    $editable.data('NoteHistory').recordUndo($editable);

    type=type||"UL";
    varsorted=type==="OL";

    varparent;
    varr=range.create();
    if(!r)return;
    varnode=r.sc;
    while(node&&node!==$editable[0]){

        parent=node.parentNode;
        if(node.tagName===(sorted?"UL":"OL")){

            varul=document.createElement(sorted?"ol":"ul");
            ul.className=node.className;
            if(type!=='checklist'){
                ul.classList.remove('o_checklist');
            }else{
                ul.classList.add('o_checklist');
            }
            parent.insertBefore(ul,node);
            while(node.firstChild){
                ul.appendChild(node.firstChild);
            }
            parent.removeChild(node);
            r.select();
            return;

        }elseif(node.tagName===(sorted?"OL":"UL")){

            if(type==='checklist'&&!node.classList.contains('o_checklist')){
                node.classList.add('o_checklist');
                return;
            }elseif(type==='UL'&&node.classList.contains('o_checklist')){
                node.classList.remove('o_checklist');
                return;
            }

            varlis=[];
            for(vari=0;i<node.children.length;i++){
                lis.push(node.children[i]);
            }

            if(parent.tagName==="LI"){
                node=parent;
                parent=node.parentNode;
                _.each(lis,function(li){
                    parent.insertBefore(li,node);
                });
            }else{
                _.each(lis,function(li){
                    while(li.firstChild){
                        parent.insertBefore(li.firstChild,node);
                    }
                });
            }

            parent.removeChild(node);
            r.select();
            return;

        }
        node=parent;
    }

    varp0=r.sc;
    while(p0&&p0.parentNode&&p0.parentNode!==$editable[0]&&!isFormatNode(p0)){
        p0=p0.parentNode;
    }
    if(!p0)return;
    varp1=r.ec;
    while(p1&&p1.parentNode&&p1.parentNode!==$editable[0]&&!isFormatNode(p1)){
        p1=p1.parentNode;
    }
    if(!p0.parentNode||p0.parentNode!==p1.parentNode){
        return;
    }

    parent=p0.parentNode;
    ul=document.createElement(sorted?"ol":"ul");
    if(type==='checklist'){
        ul.classList.add('o_checklist');
    }
    parent.insertBefore(ul,p0);
    varchildNodes=parent.childNodes;
    varbrs=[];
    varbegin=false;
    for(i=0;i<childNodes.length;i++){
        if(begin&&dom.isBR(childNodes[i])){
            parent.removeChild(childNodes[i]);
            i--;
        }
        if((!dom.isText(childNodes[i])&&!isFormatNode(childNodes[i]))||(!ul.firstChild&&childNodes[i]!==p0)||
            $.contains(ul,childNodes[i])||(dom.isText(childNodes[i])&&!childNodes[i].textContent.match(/\S|u00A0/))){
            continue;
        }
        begin=true;
        varli=document.createElement('li');
        ul.appendChild(li);
        li.appendChild(childNodes[i]);
        if(li.firstChild===p1){
            break;
        }
        i--;
    }
    if(dom.isBR(childNodes[i])){
        parent.removeChild(childNodes[i]);
    }

    for(i=0;i<brs.length;i++){
        parent.removeChild(brs[i]);
    }
    r.clean().select();
    event.preventDefault();

    returnfalse;
};
$.summernote.pluginEvents.insertOrderedList=function(event,editor,layoutInfo){
    $.summernote.pluginEvents.insertUnorderedList(event,editor,layoutInfo,"OL");
};
$.summernote.pluginEvents.insertCheckList=function(event,editor,layoutInfo){
    $.summernote.pluginEvents.insertUnorderedList(event,editor,layoutInfo,"checklist");
    $(range.create().sc.parentNode).trigger('input');//toupdatechecklist-id
};
$.summernote.pluginEvents.indent=function(event,editor,layoutInfo,outdent){
    var$editable=layoutInfo.editable();
    $editable.data('NoteHistory').recordUndo($editable);
    varr=range.create();
    if(!r)return;

    varflag=false;
    functionindentUL(UL,start,end){
        varnext;
        varprevious;
        vartagName=UL.tagName;
        varnode=UL.firstChild;
        varul=document.createElement(tagName);
        ul.className=UL.className;
        varli=document.createElement("li");
        li.classList.add('o_indent');
        li.appendChild(ul);

        if(flag){
            flag=1;
        }

        //createandfillulintoali
        while(node){
            if(flag===1||node===start||$.contains(node,start)){
                flag=true;
                if(previous){
                    if(dom.isList(previous.lastChild)){
                        ul=previous.lastChild;
                    }else{
                        previous.appendChild(ul);
                    }
                }else{
                    node.parentNode.insertBefore(li,node);
                }
            }
            next=dom.nextElementSibling(node);
            if(flag){
                ul.appendChild(node);
            }
            if(node===end||$.contains(node,end)){
                flag=false;
                break;
            }
            previous=node;
            node=next;
        }

        vartemp;
        varprev=dom.previousElementSibling(li);
        if(prev&&prev.tagName==="LI"&&(temp=dom.firstElementChild(prev))&&temp.tagName===tagName&&((dom.firstElementChild(prev)||prev.firstChild)!==ul)){
            dom.doMerge(dom.firstElementChild(prev)||prev.firstChild,ul);
            li=prev;
            li.parentNode.removeChild(dom.nextElementSibling(li));
        }
        next=dom.nextElementSibling(li);
        if(next&&next.tagName==="LI"&&(temp=dom.firstElementChild(next))&&temp.tagName===tagName&&(dom.firstElementChild(li)!==dom.firstElementChild(next))){
            dom.doMerge(dom.firstElementChild(li),dom.firstElementChild(next));
            li.parentNode.removeChild(dom.nextElementSibling(li));
        }
    }
    functionoutdenttUL(UL,start,end){
        varnext;
        varnode=UL.firstChild;
        varparent=UL.parentNode;
        varli=UL.parentNode.tagName==="LI"?UL.parentNode:UL;
        varul=UL.parentNode.tagName==="LI"?UL.parentNode.parentNode:UL.parentNode;
        start=dom.ancestor(start,dom.isLi);
        end=dom.ancestor(end,dom.isLi);

        if(ul.tagName!=="UL"&&ul.tagName!=="OL")return;

        //createandfillulintoali
        while(node){
            if(node===start||$.contains(node,start)){
                flag=true;
                if(dom.previousElementSibling(node)&&li.tagName==="LI"){
                    li=dom.splitTree(li,dom.prevPoint({'node':node,'offset':0}));
                }
            }
            next=dom.nextElementSibling(node);
            if(flag){
                var$succeeding=$(node).nextAll();
                ul=node.parentNode;
                if(dom.previousElementSibling(ul)){
                    dom.insertAfter(node,li);
                }else{
                    li.parentNode.insertBefore(node,li);
                }
                $succeeding.insertAfter(node);
                if(!ul.children.length){
                    if(ul.parentNode.tagName==="LI"&&!dom.previousElementSibling(ul)){
                        ul=ul.parentNode;
                    }
                    ul.parentNode.removeChild(ul);
                }
                flag=false;
                break;
            }

            if(node===end||$.contains(node,end)){
                flag=false;
                break;
            }
            node=next;
        }

        dom.merge(parent,start,0,end,1,null,true);
    }
    functionindentOther(p,start,end){
        if(p===start||$.contains(p,start)||$.contains(start,p)){
            flag=true;
        }
        if(flag){
            if(outdent){
                dom.outdent(p);
            }else{
                dom.indent(p);
            }
        }
        if(p===end||$.contains(p,end)||$.contains(end,p)){
            flag=false;
        }
    }

    varancestor=r.commonAncestor();
    var$dom=$(ancestor);

    if(!dom.isList(ancestor)){
        if(dom.isList(ancestor.parentNode)){
            $dom=$(ancestor.parentNode);
        }else{
            //toindentaselection,weindentthechildnodesofthecommon
            //ancestorthatcontainsthisselection
            $dom=$(dom.node(ancestor)).children();
        }
    }
    if(!$dom.not('br').length){
        //ifselectionisinsidealist,weindentitslistitems
        $dom=$(dom.ancestor(r.sc,dom.isList));
        if(!$dom.length){
            //iftheselectioniscontainedinasingleHTMLnode,weindent
            //thefirstancestor'contentblock'(P,H1,PRE,...)orTD
            $dom=$(r.sc).closest(options.styleTags.join(',')+',td');
        }
    }

    //ifselecttr,takethefirsttd
    $dom=$dom.map(function(){returnthis.tagName==="TR"?dom.firstElementChild(this):this;});

    $dom.each(function(){
        if(flag||$.contains(this,r.sc)){
            if(dom.isList(this)){
                if(outdent){
                    outdenttUL(this,r.sc,r.ec);
                }else{
                    indentUL(this,r.sc,r.ec);
                }
            }elseif(isFormatNode(this)||dom.ancestor(this,dom.isCell)){
                indentOther(this,r.sc,r.ec);
            }
        }
    });

    if($dom.length){
        var$parent=$dom.parent();

        //removetextnodesbetweenlists
        var$ul=$parent.find('ul,ol');
        if(!$ul.length){
            $ul=$(dom.ancestor(r.sc,dom.isList));
        }
        $ul.each(function(){
            if(this.previousSibling&&
                this.previousSibling!==dom.previousElementSibling(this)&&
                !this.previousSibling.textContent.match(/\S/)){
                this.parentNode.removeChild(this.previousSibling);
            }
            if(this.nextSibling&&
                this.nextSibling!==dom.nextElementSibling(this)&&
                !this.nextSibling.textContent.match(/\S/)){
                this.parentNode.removeChild(this.nextSibling);
            }
        });

        //mergesameulorol
        r=dom.merge($parent[0],r.sc,r.so,r.ec,r.eo,function(prev,cur){
                if(prev&&dom.isList(prev)&&dom.isEqual(prev,cur)){
                    returntrue;
                }
            },true);
        range.create(r.sc,r.so,r.ec,r.eo).select();
    }
    event.preventDefault();
    returnfalse;
};
$.summernote.pluginEvents.outdent=function(event,editor,layoutInfo){
    return$.summernote.pluginEvents.indent(event,editor,layoutInfo,true);
};

$.summernote.pluginEvents.formatBlock=function(event,editor,layoutInfo,sTagName){
    $.summernote.pluginEvents.applyFont(event,editor,layoutInfo,null,null,"Default");
    var$editable=layoutInfo.editable();
    $editable.focus();
    $editable.data('NoteHistory').recordUndo($editable);
    event.preventDefault();

    varr=range.create();
    if(!r){
        return;
    }
    //selectcontentsincecontainer(thatfirefoxselects)mayberemoved
    if(r.so===0){
        r.sc=dom.firstChild(r.sc);
    }
    if(dom.nodeLength(r.ec)>=r.eo){
        r.ec=dom.lastChild(r.ec);
        r.eo=dom.nodeLength(r.ec);
    }
    r=range.create(r.sc,r.so,r.ec,r.eo);
    r.reRange().select();

    if(sTagName==="blockquote"||sTagName==="pre"){
      sTagName=$.summernote.core.agent.isMSIE?'<'+sTagName+'>':sTagName;
      document.execCommand('FormatBlock',false,sTagName);
      return;
    }

    //fixbyflectrabecauseifyouselectastyleinaliwithnoptagalltheuliswrappedbythestyletag
    varnodes=dom.listBetween(r.sc,r.ec,r.so,r.eo);
    for(vari=0;i<nodes.length;i++){
        if(dom.isBR(nodes[i])||(dom.isText(nodes[i])&&dom.isVisibleText(nodes[i]))||dom.isB(nodes[i])||dom.isU(nodes[i])||dom.isS(nodes[i])||dom.isI(nodes[i])||dom.isFont(nodes[i])){
            varancestor=dom.ancestor(nodes[i],isFormatNode);
            if($(ancestor).parent().is('blockquote')){
                //firefoxmaywrapformattingblockinblockquote
                $(ancestor).unwrap();
            }
            if(!ancestor){
                dom.wrap(nodes[i],sTagName);
            }elseif(ancestor.tagName.toLowerCase()!==sTagName){
                vartag=document.createElement(sTagName);
                ancestor.parentNode.insertBefore(tag,ancestor);
                dom.moveContent(ancestor,tag);
                if(ancestor.className){
                    tag.className=ancestor.className;
                }
                ancestor.parentNode.removeChild(ancestor);
            }
        }
    }
    r.select();
};
$.summernote.pluginEvents.removeFormat=function(event,editor,layoutInfo,value){
    var$editable=layoutInfo.editable();
    $editable.data('NoteHistory').recordUndo($editable);
    varr=range.create();
    if(!r)return;
    varnode=range.create().sc.parentNode;
    document.execCommand('removeFormat');
    document.execCommand('removeFormat');
    r=range.create();
    if(!r)return;
    r=dom.merge(node,r.sc,r.so,r.ec,r.eo,null,true);
    range.create(r.sc,r.so,r.ec,r.eo).select();
    event.preventDefault();
    returnfalse;
};

eventHandler.modules.editor.undo=function($popover){
    if(!$popover.attr('disabled'))$popover.data('NoteHistory').undo();
};
eventHandler.modules.editor.redo=function($popover){
    if(!$popover.attr('disabled')) $popover.data('NoteHistory').redo();
};

//Getcolorandbackgroundcolorofnodetoupdaterecentcolorbutton
varfn_from_node=eventHandler.modules.editor.style.fromNode;
eventHandler.modules.editor.style.fromNode=function($node){
    varstyleInfo=fn_from_node.apply(this,arguments);
    styleInfo['color']=$node.css('color');
    styleInfo['background-color']=$node.css('background-color');
    returnstyleInfo;
};

//useimagetoolbarifcurrentrangeisonimage
varfn_editor_currentstyle=eventHandler.modules.editor.currentStyle;
eventHandler.modules.editor.currentStyle=function(target){
    varstyleInfo=fn_editor_currentstyle.apply(this,arguments);
    //withourchangesforinlineeditor,thetargetedelementcouldbeabuttonoftheeditor
    if(!styleInfo.image||!dom.isEditable(styleInfo.image)){
        styleInfo.image=undefined;
        varr=range.create();
        if(r&&r.isOnEditable()){
            styleInfo.image=r.isOnImg();
        }
    }
    //Fixwhenthetargetisalink:thetext-alignbuttonsstateshould
    //indicatethealignmentofthelinkintheparent,notthetextinside
    //thelink(whichisnotpossibletocustomizewithsummernote).Summernotefixed
    //thisintheirnewestversion...byjustnotshowingtheactivebutton
    //foralignments.
    if(styleInfo.anchor){
        styleInfo['text-align']=$(styleInfo.anchor).parent().css('text-align');
    }
    returnstyleInfo;
};

options.fontSizes=weDefaultOptions.fontSizes;
$.summernote.pluginEvents.applyFont=function(event,editor,layoutInfo,color,bgcolor,size){
    varr=range.create();
    if(!r)return;
    varstartPoint=r.getStartPoint();
    varendPoint=r.getEndPoint();

    if(r.isCollapsed()&&!dom.isFont(r.sc)){
        return{
            sc:startPoint.node,
            so:startPoint.offset,
            ec:endPoint.node,
            offset:endPoint.offset
        };
    }

    if(startPoint.node.tagName&&startPoint.node.childNodes[startPoint.offset]){
        startPoint.node=startPoint.node.childNodes[startPoint.offset];
        startPoint.offset=0;
    }
    if(endPoint.node.tagName&&endPoint.node.childNodes[endPoint.offset]){
        endPoint.node=endPoint.node.childNodes[endPoint.offset];
        endPoint.offset=0;
    }

    //getfirstandlastpoint
    varancestor;
    varnode;
    if(endPoint.offset&&endPoint.offset!==dom.nodeLength(endPoint.node)){
      ancestor=dom.ancestor(endPoint.node,dom.isFont)||endPoint.node;
      dom.splitTree(ancestor,endPoint);
    }
    if(startPoint.offset&&startPoint.offset!==dom.nodeLength(startPoint.node)){
      ancestor=dom.ancestor(startPoint.node,dom.isFont)||startPoint.node;
      node=dom.splitTree(ancestor,startPoint);
      if(endPoint.node===startPoint.node){
        endPoint.node=node;
        endPoint.offset=dom.nodeLength(node);
      }
      startPoint.node=node;
      startPoint.offset=0;
    }

    //getlistofnodestochange
    varnodes=[];
    dom.walkPoint(startPoint,endPoint,function(point){
      varnode=point.node;
      if(((dom.isText(node)&&dom.isVisibleText(node))||
          (dom.isFont(node)&&!dom.isVisibleText(node)))&&
          (node!==endPoint.node||endPoint.offset)){

          nodes.push(point.node);

      }
    });
    nodes=list.unique(nodes);

        //Ificofa
    if(r.isCollapsed()){
        nodes.push(startPoint.node);
    }

    //applyfont:foreColor,backColor,size(thecolorcanbeuseaclasstext-...orbg-...)
    varfont,$font,fonts=[],className;
    vari;
    if(color||bgcolor||size){
      for(i=0;i<nodes.length;i++){
        node=nodes[i];

        font=dom.ancestor(node,dom.isFont);
        if(!font){
          if(node.textContent.match(/^[]|[]$/)){
            node.textContent=node.textContent.replace(/^[]|[]$/g,'\u00A0');
          }

          font=dom.create("font");
          node.parentNode.insertBefore(font,node);
          font.appendChild(node);
        }

        fonts.push(font);

        className=font.className.split(/\s+/);

        vark;
        if(color){
          for(k=0;k<className.length;k++){
            if(className[k].length&&className[k].slice(0,5)==="text-"){
              className.splice(k,1);
              k--;
            }
          }

          if(color.indexOf('text-')!==-1){
            font.className=className.join("")+""+color;
            font.style.color="inherit";
          }else{
            font.className=className.join("");
            font.style.color=color;
          }
        }
        if(bgcolor){
          for(k=0;k<className.length;k++){
            if(className[k].length&&className[k].slice(0,3)==="bg-"){
              className.splice(k,1);
              k--;
            }
          }

          if(bgcolor.indexOf('bg-')!==-1){
            font.className=className.join("")+""+bgcolor;
            font.style.backgroundColor="inherit";
          }else{
            font.className=className.join("");
            font.style.backgroundColor=bgcolor;
          }
        }
        if(size){
          font.style.fontSize="inherit";
          if(!isNaN(size)&&Math.abs(parseInt(dom.getComputedStyle(font).fontSize,10)-size)/size>0.05){
            font.style.fontSize=size+"px";
          }
        }
      }
    }

    //removeemptyvalues
    //wemustremovethevaluein2steps(applayinheritthenremove)becausesome
    //browserlikechromehavesometimeanerrorfortherenderingand/orkeepinherit
    for(i=0;i<fonts.length;i++){
        font=fonts[i];
        if(font.style.backgroundColor==="inherit"){
            font.style.backgroundColor="";
        }
        if(font.style.color==="inherit"){
            font.style.color="";
        }
        if(font.style.fontSize==="inherit"){
            font.style.fontSize="";
        }

        $font=$(font);

        if(!$font.css("color")&&!$font.css("background-color")&&!$font.css("font-size")){
            $font.removeAttr("style");
        }
        if(!font.className.length){
            $font.removeAttr("class");
        }
    }

    //selectnodestoclean(toremoveemptyfontandmergesamenodes)
    nodes=[];
    dom.walkPoint(startPoint,endPoint,function(point){
      nodes.push(point.node.childNodes[point.offset]||point.node);
    });
    nodes=list.unique(nodes);

    functionremove(node,to){
      if(node===endPoint.node){
        endPoint=dom.prevPoint(endPoint);
      }
      if(to){
        dom.moveContent(node,to);
      }
      dom.remove(node);
    }

    //removenodewithoutattributes(movecontent),andmergethesamenodes
     varclassName2,style,style2,hasBefore,hasAfter;
     varnoContent=['none',null,undefined];
     for(i=0;i<nodes.length;i++){
      node=nodes[i];

      if(dom.isText(node)&&!node.nodeValue){
        remove(node);
        continue;
      }

      font=dom.ancestor(node,dom.isFont);
      node=font||dom.ancestor(node,dom.isSpan);

      if(!node){
        continue;
      }

      $font=$(node);
      className=dom.orderClass(node);
      style=dom.orderStyle(node);
      hasBefore=noContent.indexOf(window.getComputedStyle(node,'::before').content)===-1;
      hasAfter=noContent.indexOf(window.getComputedStyle(node,'::after').content)===-1;

      if(!className&&!style&&!hasBefore&&!hasAfter){
        remove(node,node.parentNode);
        continue;
      }

      if(font=dom.ancestor(node.previousSibling,dom.isFont)){
        className2=font.getAttribute('class');
        style2=font.getAttribute('style');
        if(node!==font&&className===className2&&style===style2){
          remove(node,font);
          continue;
        }
      }
     }

    range.create(startPoint.node,startPoint.offset,endPoint.node,endPoint.offset).select();
};
$.summernote.pluginEvents.fontSize=function(event,editor,layoutInfo,value){
  var$editable=layoutInfo.editable();
  event.preventDefault();
  $.summernote.pluginEvents.applyFont(event,editor,layoutInfo,null,null,value);
  editor.afterCommand($editable);
};
$.summernote.pluginEvents.color=function(event,editor,layoutInfo,sObjColor){
  varoColor=JSON.parse(sObjColor);
  varforeColor=oColor.foreColor,backColor=oColor.backColor;

  if(foreColor){$.summernote.pluginEvents.foreColor(event,editor,layoutInfo,foreColor);}
  if(backColor){$.summernote.pluginEvents.backColor(event,editor,layoutInfo,backColor);}
};
$.summernote.pluginEvents.foreColor=function(event,editor,layoutInfo,foreColor,preview){
  var$editable=layoutInfo.editable();
  $.summernote.pluginEvents.applyFont(event,editor,layoutInfo,foreColor,null,null);
  if(!preview){
    editor.afterCommand($editable);
  }
};
$.summernote.pluginEvents.backColor=function(event,editor,layoutInfo,backColor,preview){
  var$editable=layoutInfo.editable();
  varr=range.create();
  if(!r)return;
  if(r.isCollapsed()&&r.isOnCell()){
    varcell=dom.ancestor(r.sc,dom.isCell);
    cell.className=cell.className.replace(newRegExp('(^|\\s+)bg-[^\\s]+(\\s+|$)','gi'),'');
    cell.style.backgroundColor="";
    if(backColor.indexOf('bg-')!==-1){
      cell.className+=''+backColor;
    }elseif(backColor!=='inherit'){
      cell.style.backgroundColor=backColor;
    }
    return;
  }
  $.summernote.pluginEvents.applyFont(event,editor,layoutInfo,null,backColor,null);
  if(!preview){
    editor.afterCommand($editable);
  }
};

options.onCreateLink=function(sLinkUrl){
    if(sLinkUrl.indexOf('mailto:')===0||sLinkUrl.indexOf('tel:')===0){
      sLinkUrl=sLinkUrl.replace(/^tel:([0-9]+)$/,'tel://$1');
    }elseif(sLinkUrl.indexOf('@')!==-1&&sLinkUrl.indexOf(':')===-1){
      sLinkUrl= 'mailto:'+sLinkUrl;
    }elseif(sLinkUrl.indexOf('://')===-1&&sLinkUrl[0]!=='/'
               &&sLinkUrl[0]!=='#'&&sLinkUrl.slice(0,2)!=='${'){
      sLinkUrl='http://'+sLinkUrl;
    }
    returnsLinkUrl;
};

functionsummernote_table_scroll(event){
    varr=range.create();
    if(r&&r.isOnCell()){
        $('.o_table_handler').remove();
    }
}
functionsummernote_table_update(oStyle){
    varr=range.create();
    if(!oStyle.range||!r||!r.isOnCell()||!r.isOnCellFirst()){
        $('.o_table_handler').remove();
        return;
    }
    vartable=dom.ancestor(oStyle.range.sc,dom.isTable);
    if(!table){//iftheeditabletagisinsidethetable
        return;
    }
    var$editable=$(table).closest('.o_editable');

    $('.o_table_handler').remove();

    var$dels=$();
    var$adds=$();
    var$tds=$('tr:first',table).children();
    $tds.each(function(){
        var$td=$(this);
        varpos=$td.offset();

        var$del=$('<spanclass="o_table_handlerfafa-minus-square"/>').appendTo('body');
        $del.data('td',this);
        $dels=$dels.add($del);
        $del.css({
            left:((pos.left+$td.outerWidth()/2)-6)+"px",
            top:(pos.top-6)+"px"
        });

        var$add=$('<spanclass="o_table_handlerfafa-plus-square"/>').appendTo('body');
        $add.data('td',this);
        $adds=$adds.add($add);
        $add.css({
            left:(pos.left-6)+"px",
            top:(pos.top-6)+"px"
        });
    });

    var$last=$tds.last();
    varpos=$last.offset();
    var$add=$('<spanclass="o_table_handlerfafa-plus-square"/>').appendTo('body');
    $adds=$adds.add($add);
    $add.css({
        left:(pos.left+$last.outerWidth()-6)+"px",
        top:(pos.top-6)+"px"
    });

    var$table=$(table);
    $dels.data('table',table).on('mousedown',function(event){
        vartd=$(this).data('td');
        $editable.data('NoteHistory').recordUndo($editable);

        varnewTd;
        if($(td).siblings().length){
            vareq=$(td).index();
            $table.find('tr').each(function(){
                $('>td:eq('+eq+')',this).remove();
            });
            newTd=$table.find('tr:first>td:eq('+eq+'),tr:first>td:last').first();
        }else{
            varprev=dom.lastChild(dom.hasContentBefore(dom.ancestorHavePreviousSibling($table[0])));
            $table.remove();
            $('.o_table_handler').remove();
            r=range.create(prev,prev.textContent.length);
            r.select();
            $(r.sc).trigger('mouseup');
            return;
        }

        $('.o_table_handler').remove();
        range.create(newTd[0],0,newTd[0],0).select();
        newTd.trigger('mouseup');
    });
    $adds.data('table',table).on('mousedown',function(event){
        vartd=$(this).data('td');
        $editable.data('NoteHistory').recordUndo($editable);

        varnewTd;
        if(td){
            vareq=$(td).index();
            $table.find('tr').each(function(){
                $('td:eq('+eq+')',this).before('<td>'+dom.blank+'</td>');
            });
            newTd=$table.find('tr:firsttd:eq('+eq+')');
        }else{
            $table.find('tr').each(function(){
                $(this).append('<td>'+dom.blank+'</td>');
            });
            newTd=$table.find('tr:firsttd:last');
        }

        $('.o_table_handler').remove();
        range.create(newTd[0],0,newTd[0],0).select();
        newTd.trigger('mouseup');
    });

    $dels.css({
        'position':'absolute',
        'cursor':'pointer',
        'background-color':'#fff',
        'color':'#ff0000'
    });
    $adds.css({
        'position':'absolute',
        'cursor':'pointer',
        'background-color':'#fff',
        'color':'#00ff00'
    });
}
varfn_popover_update=eventHandler.modules.popover.update;
eventHandler.modules.popover.update=function($popover,oStyle,isAirMode){
    fn_popover_update.call(this,$popover,oStyle,isAirMode);
    if((isAirMode?$popover:$popover.parent()).find('.note-table').length){
        summernote_table_update(oStyle);
    }
};

functionmouseDownChecklist(e){
    if(!dom.isLi(e.target)||!$(e.target).parent('ul.o_checklist').length||e.offsetX>0){
        return;
    }
    e.stopPropagation();
    e.preventDefault();
    varchecked=$(e.target).hasClass('o_checked');
    $(e.target).toggleClass('o_checked',!checked);
    var$sublevel=$(e.target).next('ul.o_checklist,li:has(>ul.o_checklist)').find('>li,ul.o_checklist>li');
    var$parents=$(e.target).parents('ul.o_checklist').map(function(){
        returnthis.parentNode.tagName==='LI'?this.parentNode:this;
    });
    if(checked){
        $sublevel.removeClass('o_checked');
        do{
            $parents=$parents.prev('ul.o_checklistli').removeClass('o_checked');
        }while($parents.length);
    }else{
        $sublevel.addClass('o_checked');
        var$lis;
        do{
            $lis=$parents.not(':has(li[id^="checklist-id"]:not(.o_checked))').prev('ul.o_checklistli:not(.o_checked)');
            $lis.addClass('o_checked');
        }while($lis.length);
    }
}

varfn_attach=eventHandler.attach;
eventHandler.attach=function(oLayoutInfo,options){
    var$editable=oLayoutInfo.editor().hasClass('note-editable')?oLayoutInfo.editor():oLayoutInfo.editor().find('.note-editable');
    fn_attach.call(this,oLayoutInfo,options);
    $editable.on("scroll",summernote_table_scroll);
    $editable.on("mousedown",mouseDownChecklist);
};
varfn_detach=eventHandler.detach;
eventHandler.detach=function(oLayoutInfo,options){
    var$editable=oLayoutInfo.editor().hasClass('note-editable')?oLayoutInfo.editor():oLayoutInfo.editor().find('.note-editable');
    fn_detach.call(this,oLayoutInfo,options);
    $editable.off("scroll",summernote_table_scroll);
    $editable.off("mousedown",mouseDownChecklist);
    $('.o_table_handler').remove();
};

options.icons.image.image="file-image-o";
$.summernote.lang['en-US'].image.image="File/Image";

return$.summernote;
});
