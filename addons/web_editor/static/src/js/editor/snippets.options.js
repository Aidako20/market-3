flectra.define('web_editor.snippets.options',function(require){
'usestrict';

varcore=require('web.core');
const{ColorpickerWidget}=require('web.Colorpicker');
constDialog=require('web.Dialog');
const{scrollTo}=require('web.dom');
constrpc=require('web.rpc');
consttime=require('web.time');
constutils=require('web.utils');
varWidget=require('web.Widget');
varColorPaletteWidget=require('web_editor.ColorPalette').ColorPaletteWidget;
constweUtils=require('web_editor.utils');
const{
    normalizeColor,
    getBgImageURL,
    isBackgroundImageAttribute,
}=weUtils;
varweWidgets=require('wysiwyg.widgets');
const{
    loadImage,
    loadImageInfo,
    applyModifications,
    removeOnImageChangeAttrs,
}=require('web_editor.image_processing');

varqweb=core.qweb;
var_t=core._t;

/**
 *@param{HTMLElement}el
 *@param{string}[title]
 *@param{Object}[options]
 *@param{string[]}[options.classes]
 *@param{string}[options.tooltip]
 *@param{string}[options.placeholder]
 *@param{Object}[options.dataAttributes]
 *@returns{HTMLElement}-theoriginal'el'argument
 */
function_addTitleAndAllowedAttributes(el,title,options){
    lettooltipEl=el;
    if(title){
        consttitleEl=_buildTitleElement(title);
        tooltipEl=titleEl;
        el.appendChild(titleEl);
    }

    if(options&&options.classes){
        el.classList.add(...options.classes);
    }
    if(options&&options.tooltip){
        tooltipEl.title=options.tooltip;
    }
    if(options&&options.placeholder){
        el.setAttribute('placeholder',options.placeholder);
    }
    if(options&&options.dataAttributes){
        for(constkeyinoptions.dataAttributes){
            el.dataset[key]=options.dataAttributes[key];
        }
    }

    returnel;
}
/**
 *@param{string}tagName
 *@param{string}title-@see_addTitleAndAllowedAttributes
 *@param{Object}options-@see_addTitleAndAllowedAttributes
 *@returns{HTMLElement}
 */
function_buildElement(tagName,title,options){
    constel=document.createElement(tagName);
    return_addTitleAndAllowedAttributes(el,title,options);
}
/**
 *@param{string}title
 *@returns{HTMLElement}
 */
function_buildTitleElement(title){
    consttitleEl=document.createElement('we-title');
    //Asastablefix,tonottouchXMLtemplatesandbreakexisting
    //translations,the⌙characterisautomaticallyreplacedby└whichmakes
    //moresensefortheusecaseandshouldworkproperlyinallbrowsers.The
    //⌙characterisactuallyrenderedmirroredonWindows11Chrome(and
    //others)asthefontusedforthoseunicodecharactersislefttothe
    //browser.Wecouldforceafontofourownbutit'sprobablynotworthit.
    //TODOabettersolutionwithaSVGorCSSsolutionhastobedonein
    //master.Thatwouldunifythelookofthesymbolacrossallbrowsersand
    //alsopreventspecialcharacterstobeplacedintranslations.
    titleEl.textContent=title.replace(/⌙/g,'└');
    returntitleEl;
}
/**
 *@param{string}src
 *@returns{HTMLElement}
 */
const_buildImgElementCache={};
asyncfunction_buildImgElement(src){
    if(!(srcin_buildImgElementCache)){
        _buildImgElementCache[src]=(async()=>{
            if(src.split('.').pop()==='svg'){
                constresponse=awaitwindow.fetch(src);
                consttext=awaitresponse.text();
                constparser=newwindow.DOMParser();
                constxmlDoc=parser.parseFromString(text,'text/xml');
                returnxmlDoc.getElementsByTagName('svg')[0];
            }else{
                constimgEl=document.createElement('img');
                imgEl.src=src;
                returnimgEl;
            }
        })();
    }
    constnode=await_buildImgElementCache[src];
    returnnode.cloneNode(true);
}
/**
 *BuildthecorrectDOMforawe-rowelement.
 *
 *@param{string}[title]-@see_buildElement
 *@param{Object}[options]-@see_buildElement
 *@param{HTMLElement[]}[options.childNodes]
 *@returns{HTMLElement}
 */
function_buildRowElement(title,options){
    constgroupEl=_buildElement('we-row',title,options);

    constrowEl=document.createElement('div');
    groupEl.appendChild(rowEl);

    if(options&&options.childNodes){
        options.childNodes.forEach(node=>rowEl.appendChild(node));
    }

    returngroupEl;
}
/**
 *BuildthecorrectDOMforawe-collapseelement.
 *
 *@param{string}[title]-@see_buildElement
 *@param{Object}[options]-@see_buildElement
 *@param{HTMLElement[]}[options.childNodes]
 *@returns{HTMLElement}
 */
function_buildCollapseElement(title,options){
    constgroupEl=_buildElement('we-collapse',title,options);
    consttitleEl=groupEl.querySelector('we-title');

    constchildren=options&&options.childNodes||[];
    if(titleEl){
        titleEl.remove();
        children.unshift(titleEl);
    }
    leti=0;
    for(i=0;i<children.length;i++){
        groupEl.appendChild(children[i]);
        if(children[i].nodeType===Node.ELEMENT_NODE){
            break;
        }
    }

    consttogglerEl=document.createElement('we-toggler');
    togglerEl.classList.add('o_we_collapse_toggler');
    if(_t.database.parameters.direction==='rtl'){
        togglerEl.classList.add('o_we_collapse_toggler_rtl');
    }
    groupEl.appendChild(togglerEl);

    constcontainerEl=document.createElement('div');
    children.slice(i+1).forEach(node=>containerEl.appendChild(node));
    groupEl.appendChild(containerEl);

    returngroupEl;
}
/**
 *Createsaproxyforanobjectwhereonepropertyisreplacedbyadifferent
 *value.Thisvalueiscapturedintheclosureandcanbereadandwrittento.
 *
 *@param{Object}obj-theobjectforwhichtocreateaproxy
 *@param{string}propertyName-thename/keyofthepropertytoreplace
 *@param{*}value-theinitialvaluetogivetotheproperty'scopy
 *@returns{Proxy}aproxyoftheobjectwiththepropertyreplaced
 */
functioncreatePropertyProxy(obj,propertyName,value){
    returnnewProxy(obj,{
        get:function(obj,prop){
            if(prop===propertyName){
                returnvalue;
            }
            returnobj[prop];
        },
        set:function(obj,prop,val){
            if(prop===propertyName){
                return(value=val);
            }
            returnReflect.set(...arguments);
        },
    });
}

//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

constNULL_ID='__NULL__';

/**
 *Baseclassforcomponentstobeusedinsnippetoptionswidgetstoretrieve
 *uservalues.
 */
constUserValueWidget=Widget.extend({
    className:'o_we_user_value_widget',
    custom_events:{
        'user_value_update':'_onUserValueNotification',
    },

    /**
     *@constructor
     */
    init:function(parent,title,options,$target){
        this._super(...arguments);
        this.title=title;
        this.options=options;
        this._userValueWidgets=[];
        this._value='';
        this.$target=$target;
    },
    /**
     *@override
     */
    asyncwillStart(){
        awaitthis._super(...arguments);
        if(this.options.dataAttributes.img){
            this.imgEl=await_buildImgElement(this.options.dataAttributes.img);
        }
    },
    /**
     *@override
     */
    _makeDescriptive:function(){
        const$el=this._super(...arguments);
        constel=$el[0];
        _addTitleAndAllowedAttributes(el,this.title,this.options);
        this.containerEl=document.createElement('div');

        if(this.imgEl){
            this.containerEl.appendChild(this.imgEl);
        }

        el.appendChild(this.containerEl);
        return$el;
    },
    /**
     *@override
     */
    asyncstart(){
        awaitthis._super(...arguments);

        if(this.el.classList.contains('o_we_img_animate')){
            constbuildImgExtensionSwitcher=(from,to)=>{
                constregex=newRegExp(`${from}$`,'i');
                returnev=>{
                    constimg=ev.currentTarget.getElementsByTagName("img")[0];
                    img.src=img.src.replace(regex,to);
                };
            };
            this.$el.on('mouseenter.img_animate',buildImgExtensionSwitcher('png','gif'));
            this.$el.on('mouseleave.img_animate',buildImgExtensionSwitcher('gif','png'));
        }
    },
    /**
     *@override
     */
    destroy(){
        //Checkif$elexistsincasethewidgetisdestroyedbeforeithas
        //beenfullyinitialized.
        //TODOthereisprobablybettertodo.Thiscasewasfoundonlyin
        //tours,wheretheeditorisleftbeforethewidgeticonisloaded.
        if(this.$el){
            this.$el.off('.img_animate');
        }
        this._super(...arguments);
    },

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *Closesthewidget(onlymeaningfulforwidgetsthatcanbeclosed).
     */
    close:function(){
        if(!this.el){
            //Incasethemethodiscalledwhilethewidgetisnotfully
            //initializedyet.Noneedtopreventthatcase:askinganon
            //initializedwidgettocloseitselfshouldjustnotbeaproblem
            //andjustbeignored.
            return;
        }
        if(!this.el.classList.contains('o_we_widget_opened')){
            //Smalloptimization:itwouldnormallynotmatteraskingto
            //removeaclassofanelementifitdoesnotalreadyhaveitbut
            //inthiscasewedomore:wetrigger_upaneventandasktoclose
            //allsubwidgets.Whenweasktheeditortocloseallwidgets...
            //itmakessensenotlettingeverysubbuttonofeveryselect
            //trigger_upanevent.Thisallowstoavoidtensofthousandsof
            //instructionsbeingdoneateachclickintheeditor.
            return;
        }
        this.trigger_up('user_value_widget_closing');
        this.el.classList.remove('o_we_widget_opened');
        this._userValueWidgets.forEach(widget=>widget.close());
    },
    /**
     *Simulatesthecorrecteventontheelementtomakeitactive.
     */
    enable(){
        this.$el.click();
    },
    /**
     *@param{string}name
     *@returns{UserValueWidget|null}
     */
    findWidget:function(name){
        for(constwidgetofthis._userValueWidgets){
            if(widget.getName()===name){
                returnwidget;
            }
            constdepWidget=widget.findWidget(name);
            if(depWidget){
                returndepWidget;
            }
        }
        returnnull;
    },
    /**
     *Returnsthevaluethatthewidgetwouldholdifitwasactive,bydefault
     *theinternalvalueitholds.
     *
     *@param{string}[methodName]
     *@returns{string}
     */
    getActiveValue:function(methodName){
        returnthis._value;
    },
    /**
     *Returnsthedefaultvaluethewidgetholdswheninactive,bydefaultthe
     *first"possiblevalue".
     *
     *@param{string}[methodName]
     *@returns{string}
     */
    getDefaultValue:function(methodName){
        constpossibleValues=this._methodsParams.optionsPossibleValues[methodName];
        returnpossibleValues&&possibleValues[0]||'';
    },
    /**
     *@returns{string[]}
     */
    getDependencies:function(){
        returnthis._dependencies;
    },
    /**
     *Returnsthenamesoftheoptionmethodsassociatedtothewidget.Those
     *areloadedwith@seeloadMethodsData.
     *
     *@returns{string[]}
     */
    getMethodsNames:function(){
        returnthis._methodsNames;
    },
    /**
     *Returnstheoptionparametersassociatedtothewidget(foragiven
     *methodnameornot).Mostareloadedwith@seeloadMethodsData.
     *
     *@param{string}[methodName]
     *@returns{Object}
     */
    getMethodsParams:function(methodName){
        constparams=_.extend({},this._methodsParams);
        if(methodName){
            params.possibleValues=params.optionsPossibleValues[methodName]||[];
            params.activeValue=this.getActiveValue(methodName);
            params.defaultValue=this.getDefaultValue(methodName);
        }
        returnparams;
    },
    /**
     *@returns{string}emptystringifnonameisusedbythewidget
     */
    getName:function(){
        returnthis._methodsParams.name||'';
    },
    /**
     *Returnstheuservaluethatthewidgetcurrentlyholds.Thevalueisa
     *string,thisisthevaluethatwillbereceivedintheoptionmethods
     *ofSnippetOptionWidgetinstances.
     *
     *@param{string}[methodName]
     *@returns{string}
     */
    getValue:function(methodName){
        constisActive=this.isActive();
        if(!methodName||!this._methodsNames.includes(methodName)){
            returnisActive?'true':'';
        }
        if(isActive){
            returnthis.getActiveValue(methodName);
        }
        returnthis.getDefaultValue(methodName);
    },
    /**
     *Returnswhetherornotthewidgetisactive(holdsavalue).
     *
     *@returns{boolean}
     */
    isActive:function(){
        returnthis._value&&this._value!==NULL_ID;
    },
    /**
     *Indicatesifthewidgetcancontainsubuservaluewidgetsornot.
     *
     *@returns{boolean}
     */
    isContainer:function(){
        returnfalse;
    },
    /**
     *Indicatesifthewidgetisbeingpreviewedornot:theuseris
     *manipulatingit.Basecase:ifaninternal<input/>elementisfocused.
     *
     *@returns{boolean}
     */
    isPreviewed:function(){
        constfocusEl=document.activeElement;
        if(focusEl&&focusEl.tagName==='INPUT'
                &&(this.el===focusEl||this.el.contains(focusEl))){
            returntrue;
        }
        returnthis.el.classList.contains('o_we_preview');
    },
    /**
     *Loadsoptionmethodnamesandoptionmethodparameters.
     *
     *@param{string[]}validMethodNames
     *@param{Object}extraParams
     */
    loadMethodsData:function(validMethodNames,extraParams){
        this._methodsNames=[];
        this._methodsParams=_.extend({},extraParams);
        this._methodsParams.optionsPossibleValues={};
        this._dependencies=[];
        this._triggerWidgetsNames=[];
        this._triggerWidgetsValues=[];

        for(constkeyinthis.el.dataset){
            constdataValue=this.el.dataset[key].trim();

            if(key==='dependencies'){
                this._dependencies.push(...dataValue.split(/\s*,\s*/g));
            }elseif(key==='trigger'){
                this._triggerWidgetsNames.push(...dataValue.split(/\s*,\s*/g));
            }elseif(key==='triggerValue'){
                this._triggerWidgetsValues.push(...dataValue.split(/\s*,\s*/g));
            }elseif(validMethodNames.includes(key)){
                this._methodsNames.push(key);
                this._methodsParams.optionsPossibleValues[key]=dataValue.split(/\s*\|\s*/g);
            }else{
                this._methodsParams[key]=dataValue;
            }
        }
        this._userValueWidgets.forEach(widget=>{
            constinheritedParams=_.extend({},this._methodsParams);
            inheritedParams.optionsPossibleValues=null;
            widget.loadMethodsData(validMethodNames,inheritedParams);
            constsubMethodsNames=widget.getMethodsNames();
            constsubMethodsParams=widget.getMethodsParams();

            for(constmethodNameofsubMethodsNames){
                if(!this._methodsNames.includes(methodName)){
                    this._methodsNames.push(methodName);
                    this._methodsParams.optionsPossibleValues[methodName]=[];
                }
                for(constsubPossibleValueofsubMethodsParams.optionsPossibleValues[methodName]){
                    this._methodsParams.optionsPossibleValues[methodName].push(subPossibleValue);
                }
            }
        });
        for(constmethodNameofthis._methodsNames){
            constarr=this._methodsParams.optionsPossibleValues[methodName];
            constuniqArr=arr.filter((v,i,arr)=>i===arr.indexOf(v));
            this._methodsParams.optionsPossibleValues[methodName]=uniqArr;
        }
    },
    /**
     *@param{boolean}[previewMode=false]
     *@param{boolean}[isSimulatedEvent=false]
     */
    notifyValueChange:function(previewMode,isSimulatedEvent){
        //Ifthewidgethasnoassociatedmethod,itshouldnotnotifyuser
        //valuechanges
        if(!this._methodsNames.length){
            return;
        }

        //Inthecasewenotifyachangeupdate,forceapreviewupdateifit
        //wasnotalreadypreviewed
        constisPreviewed=this.isPreviewed();
        if(!previewMode&&!isPreviewed){
            this.notifyValueChange(true);
        }

        constdata={
            previewMode:previewMode||false,
            isSimulatedEvent:!!isSimulatedEvent,
        };
        //TODOimprovethis.Thepreviewstatehastobeupdatedonlywhenthe
        //actualoption_selectisgonnabecalled...butthisisdelayedbya
        //mutex.So,duringtesttours,wewouldnotifyboth'preview'and
        //'reset'beforethe'preview'handlingisdone:andsothewidget
        //wouldnotbeconsideredinpreviewduringthat'preview'handling.
        if(previewMode===true||previewMode===false){
            //Note:thewidgetsneedtobeconsideredinpreviewmodeduring
            //non-previewhandling(apreviewedcheckboxisconsideredhaving
            //aninvertedstate)...butif,forexample,amodalopensbefore
            //handlingthatnon-preview,a'reset'willbethrownthusremoving
            //thepreviewclass.Soweforceitinnon-previewtoo.
            data.prepare=()=>this.el.classList.add('o_we_preview');
        }elseif(previewMode==='reset'){
            data.prepare=()=>this.el.classList.remove('o_we_preview');
        }

        this.trigger_up('user_value_update',data);
    },
    /**
     *Opensthewidget(onlymeaningfulforwidgetsthatcanbeopened).
     */
    open(){
        this.trigger_up('user_value_widget_opening');
        this.el.classList.add('o_we_widget_opened');
    },
    /**
     *Addsthegivenwidgettotheknownlistofuservaluesub-widgets(useful
     *forcontainerwidgets).
     *
     *@param{UserValueWidget}widget
     */
    registerSubWidget:function(widget){
        this._userValueWidgets.push(widget);
    },
    /**
     *Setstheuservaluethatthewidgetshouldcurrentlyhold,forthe
     *givenmethodname.
     *
     *Note:awidgettypicallyonlyholdsonevaluefortheonlymethodit
     *supports.However,widgetscanhaveseveralmethods;inthatcase,the
     *valueistypicallyreceivedforafirstmethodandreceivingthevalue
     *forotheronesshouldnotaffectthewidget(otherwise,itmeansthe
     *methodsareconflictingwitheachother).
     *
     *@param{string}value
     *@param{string}[methodName]
     */
    asyncsetValue(value,methodName){
        this._value=value;
        this.el.classList.remove('o_we_preview');
    },
    /**
     *@param{boolean}show
     */
    toggleVisibility:function(show){
        this.el.classList.toggle('d-none',!show);
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *@private
     *@param{FlectraEvent|Event}
     *@returns{boolean}
     */
    _handleNotifierEvent:function(ev){
        if(!ev){
            returntrue;
        }
        if(ev._seen){
            returnfalse;
        }
        ev._seen=true;
        if(ev.preventDefault){
            ev.preventDefault();
        }
        returntrue;
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *Shouldbecalledwhenanusereventonthewidgetindicatesavalue
     *change.
     *
     *@private
     *@param{FlectraEvent|Event}[ev]
     */
    _onUserValueChange:function(ev){
        if(this._handleNotifierEvent(ev)){
            this.notifyValueChange(false);
        }
    },
    /**
     *Allowscontainerwidgetstoaddadditionaldataifneeded.
     *
     *@private
     *@param{FlectraEvent}ev
     */
    _onUserValueNotification:function(ev){
        ev.data.widget=this;

        if(!ev.data.triggerWidgetsNames){
            ev.data.triggerWidgetsNames=[];
        }
        ev.data.triggerWidgetsNames.push(...this._triggerWidgetsNames);

        if(!ev.data.triggerWidgetsValues){
            ev.data.triggerWidgetsValues=[];
        }
        ev.data.triggerWidgetsValues.push(...this._triggerWidgetsValues);
    },
    /**
     *Shouldbecalledwhenanusereventonthewidgetindicatesavalue
     *preview.
     *
     *@private
     *@param{FlectraEvent|Event}[ev]
     */
    _onUserValuePreview:function(ev){
        if(this._handleNotifierEvent(ev)){
            this.notifyValueChange(true);
        }
    },
    /**
     *Shouldbecalledwhenanusereventonthewidgetindicatesavalue
     *reset.
     *
     *@private
     *@param{FlectraEvent|Event}[ev]
     */
    _onUserValueReset:function(ev){
        if(this._handleNotifierEvent(ev)){
            this.notifyValueChange('reset');
        }
    },
});

constButtonUserValueWidget=UserValueWidget.extend({
    tagName:'we-button',
    events:{
        'click':'_onButtonClick',
        'click[role="button"]':'_onInnerButtonClick',
        'mouseenter':'_onUserValuePreview',
        'mouseleave':'_onUserValueReset',
    },

    /**
     *@override
     */
    start:function(parent,title,options){
        if(this.options&&this.options.childNodes){
            this.options.childNodes.forEach(node=>this.containerEl.appendChild(node));
        }

        returnthis._super(...arguments);
    },

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *@override
     */
    getActiveValue:function(methodName){
        constpossibleValues=this._methodsParams.optionsPossibleValues[methodName];
        returnpossibleValues&&possibleValues[possibleValues.length-1]||'';
    },
    /**
     *@override
     */
    isActive:function(){
        return(this.isPreviewed()!==this.el.classList.contains('active'));
    },
    /**
     *@override
     */
    loadMethodsData:function(validMethodNames){
        this._super.apply(this,arguments);
        for(constmethodNameofthis._methodsNames){
            constpossibleValues=this._methodsParams.optionsPossibleValues[methodName];
            if(possibleValues.length<=1){
                possibleValues.unshift('');
            }
        }
    },
    /**
     *@override
     */
    asyncsetValue(value,methodName){
        awaitthis._super(...arguments);
        letactive=!!value;
        if(methodName){
            if(!this._methodsNames.includes(methodName)){
                return;
            }
            active=(this.getActiveValue(methodName)===value);
        }
        this.el.classList.toggle('active',active);
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *@private
     */
    _onButtonClick:function(ev){
        if(!ev._innerButtonClicked){
            this._onUserValueChange(ev);
        }
    },
    /**
     *@private
     */
    _onInnerButtonClick:function(ev){
        //Cannotjuststoppropagationastheclickneedstobepropagatedto
        //potentialparentwidgetsforeventdelegationonthoseinnerbuttons.
        ev._innerButtonClicked=true;
    },
});

constCheckboxUserValueWidget=ButtonUserValueWidget.extend({
    className:(ButtonUserValueWidget.prototype.className||'')+'o_we_checkbox_wrapper',

    /**
     *@override
     */
    start:function(){
        constcheckboxEl=document.createElement('we-checkbox');
        this.containerEl.appendChild(checkboxEl);

        returnthis._super(...arguments);
    },

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *@override
     */
    enable(){
        this.$('we-checkbox').click();
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *@override
     */
    _onButtonClick(ev){
        if(!ev.target.closest('we-title,we-checkbox')){
            //Onlyconsiderclicksonthelabelandthecheckboxcontrolitself
            return;
        }
        returnthis._super(...arguments);
    },
});

constBaseSelectionUserValueWidget=UserValueWidget.extend({
    /**
     *@override
     */
    asyncstart(){
        awaitthis._super(...arguments);

        this.menuEl=document.createElement('we-selection-items');
        if(this.options&&this.options.childNodes){
            this.options.childNodes.forEach(node=>this.menuEl.appendChild(node));
        }
        this.containerEl.appendChild(this.menuEl);
    },

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *@override
     */
    getMethodsParams(methodName){
        constparams=this._super(...arguments);
        constactiveWidget=this._getActiveSubWidget();
        if(!activeWidget){
            returnparams;
        }
        returnObject.assign(activeWidget.getMethodsParams(...arguments),params);
    },
    /**
     *@override
     */
    getValue(methodName){
        constactiveWidget=this._getActiveSubWidget();
        if(activeWidget){
            returnactiveWidget.getActiveValue(methodName);
        }
        returnthis._super(...arguments);
    },
    /**
     *@override
     */
    isContainer(){
        returntrue;
    },
    /**
     *@override
     */
    asyncsetValue(value,methodName){
        const_super=this._super.bind(this);
        for(constwidgetofthis._userValueWidgets){
            awaitwidget.setValue(NULL_ID,methodName);
        }
        for(constwidgetof[...this._userValueWidgets].reverse()){
            awaitwidget.setValue(value,methodName);
            if(widget.isActive()){
                //Onlyoneselectitemcanbetrueatatime,weconsiderthe
                //lastoneifmultiplewouldbeactive.
                return;
            }
        }
        await_super(...arguments);
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *@private
     *@returns{UserValueWidget|undefined}
     */
    _getActiveSubWidget(){
        constpreviewedWidget=this._userValueWidgets.find(widget=>widget.isPreviewed());
        if(previewedWidget){
            returnpreviewedWidget;
        }
        returnthis._userValueWidgets.find(widget=>widget.isActive());
    },
});

constSelectUserValueWidget=BaseSelectionUserValueWidget.extend({
    tagName:'we-select',
    events:{
        'click':'_onClick',
    },

    /**
     *@override
     */
    asyncstart(){
        awaitthis._super(...arguments);
        if(!this.menuEl.children.length){
            //Removeemptytextnodessothat:emptycssrulecanwork
            //TODOthishasbeenaddedhereasafixtobeextracareful.In
            //masterweshouldjustavoidaddingtextnodesinside
            //we-selection-itemsinthefirstplace.
            while(this.menuEl.firstChild
                    &&!this.menuEl.firstChild.data.trim().length){
                this.menuEl.firstChild.remove();
            }
        }

        if(this.options&&this.options.valueEl){
            this.containerEl.insertBefore(this.options.valueEl,this.menuEl);
        }

        this.menuTogglerEl=document.createElement('we-toggler');
        this.icon=this.el.dataset.icon||false;
        if(this.icon){
            this.el.classList.add('o_we_icon_select');
            consticonEl=document.createElement('i');
            iconEl.classList.add('fa','fa-fw',this.icon);
            this.menuTogglerEl.appendChild(iconEl);
        }
        this.containerEl.insertBefore(this.menuTogglerEl,this.menuEl);

        constdropdownCaretEl=document.createElement('span');
        dropdownCaretEl.classList.add('o_we_dropdown_caret');
        this.containerEl.appendChild(dropdownCaretEl);
    },

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *@override
     */
    close:function(){
        this._super(...arguments);
        if(this.menuTogglerEl){
            this.menuTogglerEl.classList.remove('active');
        }
    },
    /**
     *@override
     */
    isPreviewed:function(){
        returnthis._super(...arguments)||this.menuTogglerEl.classList.contains('active');
    },
    /**
     *@override
     */
    open(){
        this._super(...arguments);
        this.menuTogglerEl.classList.add('active');
    },
    /**
     *@override
     */
    asyncsetValue(){
        awaitthis._super(...arguments);

        if(this.icon){
            return;
        }

        if(this.menuTogglerItemEl){
            this.menuTogglerItemEl.remove();
            this.menuTogglerItemEl=null;
        }

        lettextContent='';
        constactiveWidget=this._userValueWidgets.find(widget=>!widget.isPreviewed()&&widget.isActive());
        if(activeWidget){
            constsvgTag=activeWidget.el.querySelector('svg');//usefultoavoidsearchingtextcontentinsvgelement
            constvalue=(activeWidget.el.dataset.selectLabel||(!svgTag&&activeWidget.el.textContent.trim()));
            constimgSrc=activeWidget.el.dataset.img;
            if(value){
                textContent=value;
            }elseif(imgSrc){
                this.menuTogglerItemEl=document.createElement('img');
                this.menuTogglerItemEl.src=imgSrc;
            }else{
                constfakeImgEl=activeWidget.el.querySelector('.o_we_fake_img_item');
                if(fakeImgEl){
                    this.menuTogglerItemEl=fakeImgEl.cloneNode(true);
                }
            }
        }else{
            textContent="/";
        }

        this.menuTogglerEl.textContent=textContent;
        if(this.menuTogglerItemEl){
            this.menuTogglerEl.appendChild(this.menuTogglerItemEl);
        }
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *@private
     *@param{Event}ev
     */
    _shouldIgnoreClick(ev){
        return!!ev.target.closest('[role="button"]');
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *Calledwhentheselectisclickedanywhere->open/closeit.
     *
     *@private
     */
    _onClick:function(ev){
        if(this._shouldIgnoreClick(ev)){
            return;
        }

        if(!this.menuTogglerEl.classList.contains('active')){
            this.open();
        }else{
            this.close();
        }
        constactiveButton=this._userValueWidgets.find(widget=>widget.isActive());
        if(activeButton){
            this.menuEl.scrollTop=activeButton.el.offsetTop-(this.menuEl.offsetHeight/2);
        }
    },
});

constButtonGroupUserValueWidget=BaseSelectionUserValueWidget.extend({
    tagName:'we-button-group',
});

constUnitUserValueWidget=UserValueWidget.extend({
    /**
     *@override
     */
    start:asyncfunction(){
        constunit=this.el.dataset.unit||'';
        this.el.dataset.unit=unit;
        if(this.el.dataset.saveUnit===undefined){
            this.el.dataset.saveUnit=unit;
        }

        returnthis._super(...arguments);
    },

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *@override
     */
    getActiveValue:function(methodName){
        constactiveValue=this._super(...arguments);

        constparams=this._methodsParams;
        if(!params.unit){
            returnactiveValue;
        }

        constdefaultValue=this.getDefaultValue(methodName,false);

        returnactiveValue.split(/\s+/g).map(v=>{
            constnumValue=parseFloat(v);
            if(isNaN(numValue)){
                returndefaultValue;
            }else{
                constvalue=weUtils.convertNumericToUnit(numValue,params.unit,params.saveUnit,params.cssProperty,this.$target);
                return`${this._floatToStr(value)}${params.saveUnit}`;
            }
        }).join('');
    },
    /**
     *@override
     *@param{boolean}[useInputUnit=false]
     */
    getDefaultValue:function(methodName,useInputUnit){
        constdefaultValue=this._super(...arguments);

        constparams=this._methodsParams;
        if(!params.unit){
            returndefaultValue;
        }

        constunit=useInputUnit?params.unit:params.saveUnit;
        constnumValue=weUtils.convertValueToUnit(defaultValue||'0',unit,params.cssProperty,this.$target);
        if(isNaN(numValue)){
            returndefaultValue;
        }
        return`${this._floatToStr(numValue)}${unit}`;
    },
    /**
     *@override
     */
    isActive:function(){
        constisSuperActive=this._super(...arguments);
        constparams=this._methodsParams;
        if(!params.unit){
            returnisSuperActive;
        }
        returnisSuperActive&&this._floatToStr(parseFloat(this._value))!=='0';
    },
    /**
     *@override
     */
    asyncsetValue(value,methodName){
        constparams=this._methodsParams;
        if(params.unit){
            value=value.split('').map(v=>{
                constnumValue=weUtils.convertValueToUnit(v,params.unit,params.cssProperty,this.$target);
                if(isNaN(numValue)){
                    return'';//Somethingnotsupported
                }
                returnthis._floatToStr(numValue);
            }).join('');
        }
        returnthis._super(value,methodName);
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *Convertsafloatingvaluetoastring,roundedto5digitswithoutzeros.
     *
     *@private
     *@param{number}value
     *@returns{string}
     */
    _floatToStr:function(value){
        return`${parseFloat(value.toFixed(5))}`;
    },
});

constInputUserValueWidget=UnitUserValueWidget.extend({
    tagName:'we-input',
    events:{
        'inputinput':'_onInputInput',
        'blurinput':'_onInputBlur',
        'keydowninput':'_onInputKeydown',
    },

    /**
     *@override
     */
    start:asyncfunction(){
        awaitthis._super(...arguments);

        constunit=this.el.dataset.unit;
        this.inputEl=document.createElement('input');
        this.inputEl.setAttribute('type','text');
        this.inputEl.setAttribute('autocomplete','chrome-off');
        this.inputEl.setAttribute('placeholder',this.el.getAttribute('placeholder')||'');
        this.inputEl.classList.toggle('text-left',!unit);
        this.inputEl.classList.toggle('text-right',!!unit);
        this.containerEl.appendChild(this.inputEl);

        varunitEl=document.createElement('span');
        unitEl.textContent=unit;
        this.containerEl.appendChild(unitEl);
        if(unit.length>3){
            this.el.classList.add('o_we_large_input');
        }
    },

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *@override
     */
    asyncsetValue(){
        awaitthis._super(...arguments);
        this.inputEl.value=this._value;
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *@private
     *@param{Event}ev
     */
    _onInputInput:function(ev){
        this._value=this.inputEl.value;
        this._onUserValuePreview(ev);
    },
    /**
     *@private
     *@param{Event}ev
     */
    _onInputBlur:function(ev){
        //Sometimes,aninputisfocusoutforinternalreason(likeanundo
        //recording)thenfocusedagainmanuallyinthesameJSstack
        //execution.Inthatcase,theblurshouldnottriggeranoption
        //selectionastheuserdidnotleavetheinput.Wethusdefertheblur
        //handlingtothencheckthatthetargetisindeedstillblurredbefore
        //executingtheactualoptionselection.
        setTimeout(()=>{
            if(ev.currentTarget===document.activeElement){
                return;
            }
            this._onUserValueChange(ev);
        });
    },
    /**
     *@private
     *@param{Event}ev
     */
    _onInputKeydown:function(ev){
        switch(ev.which){
            case$.ui.keyCode.ENTER:{
                this._onUserValueChange(ev);
                break;
            }
            case$.ui.keyCode.UP:
            case$.ui.keyCode.DOWN:{
                constinput=ev.currentTarget;
                constparams=this._methodsParams;
                if(!params.unit&&!params.step){
                    break;
                }
                letvalue=parseFloat(input.value||input.placeholder);
                if(isNaN(value)){
                    value=0.0;
                }
                letstep=parseFloat(params.step);
                if(isNaN(step)){
                    step=1.0;
                }
                value+=(ev.which===$.ui.keyCode.UP?step:-step);
                input.value=this._floatToStr(value);
                $(input).trigger('input');
                break;
            }
        }
    },
});

constMultiUserValueWidget=UserValueWidget.extend({
    tagName:'we-multi',

    /**
     *@override
     */
    start:function(){
        if(this.options&&this.options.childNodes){
            this.options.childNodes.forEach(node=>this.containerEl.appendChild(node));
        }
        returnthis._super(...arguments);
    },

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *@override
     */
    getValue:function(methodName){
        constvalue=this._userValueWidgets.map(widget=>{
            returnwidget.getValue(methodName);
        }).join('').trim();

        returnvalue||this._super(...arguments);
    },
    /**
     *@override
     */
    isContainer:function(){
        returntrue;
    },
    /**
     *@override
     */
    asyncsetValue(value,methodName){
        letvalues=value.split(/\s*\|\s*/g);
        if(values.length===1){
            values=value.split(/\s+/g);
        }
        for(leti=0;i<this._userValueWidgets.length-1;i++){
            awaitthis._userValueWidgets[i].setValue(values.shift()||'',methodName);
        }
        awaitthis._userValueWidgets[this._userValueWidgets.length-1].setValue(values.join(''),methodName);
    },
});

constColorpickerUserValueWidget=SelectUserValueWidget.extend({
    className:(SelectUserValueWidget.prototype.className||'')+'o_we_so_color_palette',
    custom_events:_.extend({},SelectUserValueWidget.prototype.custom_events,{
        'custom_color_picked':'_onCustomColorPicked',
        'color_picked':'_onColorPicked',
        'color_hover':'_onColorHovered',
        'color_leave':'_onColorLeft',
        'enter_key_color_colorpicker':'_onEnterKey'
    }),

    /**
     *@override
     */
    start:asyncfunction(){
        const_super=this._super.bind(this);
        constargs=arguments;

        if(this.options.dataAttributes.lazyPalette==='true'){
            //TODOreviewinmaster,thiswasdoneinstabletokeepthespeed
            //fixasstableaspossible(tohaveareferencetoawidgeteven
            //ifnotacolorPalettewidget).
            this.colorPalette=newWidget(this);
            this.colorPalette.getColorNames=()=>[];
            awaitthis.colorPalette.appendTo(document.createDocumentFragment());
        }else{
            awaitthis._renderColorPalette();
        }

        //Buildtheselectelementwithacustomspantoholdthecolorpreview
        this.colorPreviewEl=document.createElement('span');
        this.colorPreviewEl.classList.add('o_we_color_preview');
        this.options.childNodes=[this.colorPalette.el];
        this.options.valueEl=this.colorPreviewEl;

        return_super(...args);
    },

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *@override
     */
    open:function(){
        if(this.colorPalette.setSelectedColor){
            this.colorPalette.setSelectedColor(this._value);
        }else{
            //TODOreviewinmaster,thisdoesasyncstuff.Maybetheopen
            //methodshouldnowbeasync.Thisisnotreallyrobustasthe
            //colorPalettecanbeusedwithoutittobefullyrenderedbut
            //theuseofthesavedpromisewherewecanshouldmitigatethat
            //issue.
            this._colorPaletteRenderPromise=this._renderColorPalette();
        }
        this._super(...arguments);
    },
    /**
     *@override
     */
    close:function(){
        this._super(...arguments);
        if(this._customColorValue&&this._customColorValue!==this._value){
            this._value=this._customColorValue;
            this._customColorValue=false;
            this._onUserValueChange();
        }
    },
    /**
     *@override
     */
    getMethodsParams:function(){
        return_.extend(this._super(...arguments),{
            colorNames:this.colorPalette.getColorNames(),
        });
    },
    /**
     *@override
     */
    getValue:function(methodName){
        if(typeofthis._previewColor==='string'){
            returnthis._previewColor;
        }
        if(typeofthis._customColorValue==='string'){
            returnthis._customColorValue;
        }
        letvalue=this._super(...arguments);
        if(value){
            constuseCssColor=this.options.dataAttributes.hasOwnProperty('useCssColor');
            constcssCompatible=this.options.dataAttributes.hasOwnProperty('cssCompatible');
            if((useCssColor||cssCompatible)&&!ColorpickerWidget.isCSSColor(value)){
                if(useCssColor){
                    value=weUtils.getCSSVariableValue(value);
                }else{
                    value=`var(--${value})`;
                }
            }
        }
        returnvalue;
    },
    /**
     *@override
     */
    isContainer:function(){
        returnfalse;
    },
    /**
     *@override
     */
    isActive:function(){
        return!weUtils.areCssValuesEqual(this._value,'rgba(0,0,0,0)');
    },
    /**
     *Updatesthecolorpreview+re-renderthewholecolorpalettewidget.
     *
     *@override
     */
    asyncsetValue(color){
        awaitthis._super(...arguments);

        awaitthis._colorPaletteRenderPromise;

        constclasses=weUtils.computeColorClasses(this.colorPalette.getColorNames());
        this.colorPreviewEl.classList.remove(...classes);
        this.colorPreviewEl.style.removeProperty('background-color');

        if(this._value){
            if(ColorpickerWidget.isCSSColor(this._value)){
                this.colorPreviewEl.style.backgroundColor=this._value;
            }elseif(weUtils.isColorCombinationName(this._value)){
                this.colorPreviewEl.classList.add('o_cc',`o_cc${this._value}`);
            }else{
                //CheckingiftheclassNameactuallyexistsseemsoverkillbut
                //itisactuallyneededtopreventacrash.Asanexample,ifa
                //colorpickerwidgetislinkedtoaSnippetOptioninstance's
                //`selectStyle`methoddesignedtohandlethe"border-color"
                //propertyofanelement,thevaluereceivedcanbesplitif
                //theitemusesdifferentcolorsforitstop/right/bottom/left
                //borders.Forinstance,youcouldreceive"redblue"ifthe
                //itemasredtopandbottombordersandblueleftandright
                //borders,inwhichcaseyouwouldreachthis`else`andtryto
                //addtheclass"bg-redblue"whichwouldcrashbecauseofthe
                //spaceinside).Inthatcase,wesimplydonotshowanycolor.
                //Wecouldchoosetohandlethissplit-valuecasespecifically
                //butitwasdecidedthatthisisenoughforthemoment.
                constclassName=`bg-${this._value}`;
                if(classes.includes(className)){
                    this.colorPreviewEl.classList.add(className);
                }
            }
        }
    },


    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *@private
     *@returns{Promise}
     */
    _renderColorPalette:function(){
        constoptions={
            selectedColor:this._value,
        };
        if(this.options.dataAttributes.excluded){
            options.excluded=this.options.dataAttributes.excluded.replace(//g,'').split(',');
        }
        if(this.options.dataAttributes.withCombinations){
            options.withCombinations=!!this.options.dataAttributes.withCombinations;
        }
        constoldColorPalette=this.colorPalette;
        this.colorPalette=newColorPaletteWidget(this,options);
        if(oldColorPalette){
            returnthis.colorPalette.insertAfter(oldColorPalette.el).then(()=>{
                oldColorPalette.destroy();
            });
        }
        returnthis.colorPalette.appendTo(document.createDocumentFragment());
    },
    /**
     *@override
     */
    _shouldIgnoreClick(ev){
        returnev.originalEvent.__isColorpickerClick||this._super(...arguments);
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *Calledwhenacustomcolorisselected->previewthecolor
     *andsetthecurrentvalue.Updateofthisvalueonclose
     *
     *@private
     *@param{Event}ev
     */
    _onCustomColorPicked:function(ev){
        this._customColorValue=ev.data.color;
    },
    /**
     *Calledwhenacolorbuttonisclicked->confirmsthepreview.
     *
     *@private
     *@param{Event}ev
     */
    _onColorPicked:function(ev){
        this._previewColor=false;
        this._customColorValue=false;
        this._value=ev.data.color;
        this._onUserValueChange(ev);
    },
    /**
     *Calledwhenacolorbuttonisentered->previewsthebackgroundcolor.
     *
     *@private
     *@param{Event}ev
     */
    _onColorHovered:function(ev){
        this._previewColor=ev.data.color;
        this._onUserValuePreview(ev);
    },
    /**
     *Calledwhenacolorbuttonisleft->cancelsthepreview.
     *
     *@private
     *@param{Event}ev
     */
    _onColorLeft:function(ev){
        this._previewColor=false;
        this._onUserValueReset(ev);
    },
    /**
     *@private
     */
    _onEnterKey:function(){
        this.close();
    },
});

constMediapickerUserValueWidget=UserValueWidget.extend({
    tagName:'we-button',
    events:{
        'click':'_onEditMedia',
    },

    /**
     *@override
     */
    asyncstart(){
        awaitthis._super(...arguments);
        consticonEl=document.createElement('i');
        if(this.options.dataAttributes.buttonStyle){
            iconEl.classList.add('fa','fa-fw','fa-camera');
        }else{
            iconEl.classList.add('fa','fa-fw','fa-refresh','mr-1');
            this.el.classList.add('o_we_no_toggle');
            this.containerEl.textContent=_t("Replacemedia");
        }
        $(this.containerEl).prepend(iconEl);
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *Createsandopensamediadialogtoeditagivenelement'smedia.
     *
     *@private
     *@param{HTMLElement}eltheelementwhosemediashouldbeedited
     *@param{boolean}[images]whetherimagesshouldbeavailable
     *  default:false
     *@param{boolean}[videos]whethervideosshouldbeavailable
     *  default:false
     */
    _openDialog(el,{images=false,videos=false}){
        el.src=this._value;
        const$editable=this.$target.closest('.o_editable');
        constmediaDialog=newweWidgets.MediaDialog(this,{
            noImages:!images,
            noVideos:!videos,
            noIcons:true,
            noDocuments:true,
            isForBgVideo:true,
            'res_model':$editable.data('oe-model'),
            'res_id':$editable.data('oe-id'),
        },el).open();
        returnmediaDialog;
    },

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *@override
     */
    asyncsetValue(){
        awaitthis._super(...arguments);
        this.el.classList.toggle('active',this.isActive());
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *Calledwhentheeditbuttonisclicked.
     *
     *@private
     *@param{Event}ev
     */
    _onEditMedia:function(ev){},
});

constImagepickerUserValueWidget=MediapickerUserValueWidget.extend({
    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *@override
     */
    _onEditMedia(ev){
        //Needadummyelementforthemediadialogtomodify.
        constdummyEl=document.createElement('img');
        constdialog=this._openDialog(dummyEl,{images:true});
        dialog.on('save',this,data=>{
            //AccessingthevaluedirectlythroughdummyEl.srcconvertstheurltoabsolute,
            //usinggetAttributeallowsustokeeptheurlasitwasinsertedintheDOM
            //whichcanbeusefultocompareittovaluesstoredindb.
            this._value=dummyEl.getAttribute('src');
            this._onUserValueChange();
        });
    },
});

constVideopickerUserValueWidget=MediapickerUserValueWidget.extend({
    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *@override
     */
    _onEditMedia(ev){
        //Needadummyelementforthemediadialogtomodify.
        constdummyEl=document.createElement('iframe');
        constdialog=this._openDialog(dummyEl,{videos:true});
        dialog.on('save',this,data=>{
            this._value=data.bgVideoSrc;
            this._onUserValueChange();
        });
    },
});

constDatetimePickerUserValueWidget=InputUserValueWidget.extend({
    events:{//ExplicitelynotconsiderallInputUserValueWidgetevents
        'blurinput':'_onInputBlur',
        'change.datetimepicker':'_onDateTimePickerChange',
        'error.datetimepicker':'_onDateTimePickerError',
    },

    /**
     *@override
     */
    init:function(){
        this._super(...arguments);
        this._value=moment().unix().toString();
        this.__libInput=0;
    },
    /**
     *@override
     */
    start:asyncfunction(){
        awaitthis._super(...arguments);

        constdatetimePickerId=_.uniqueId('datetimepicker');
        this.el.classList.add('o_we_large_input');
        this.inputEl.classList.add('datetimepicker-input','mx-0','text-left');
        this.inputEl.setAttribute('id',datetimePickerId);
        this.inputEl.setAttribute('data-target','#'+datetimePickerId);

        constdatepickersOptions={
            minDate:moment({y:1000}),
            maxDate:moment().add(200,'y'),
            calendarWeeks:true,
            defaultDate:moment().format(),
            icons:{
                close:'fafa-checkprimary',
            },
            locale:moment.locale(),
            format:time.getLangDatetimeFormat(),
            sideBySide:true,
            buttons:{
                showClose:true,
                showToday:true,
            },
            widgetParent:'body',

            //Openthedatetimepickeronfocusnotonclick.Thisallowsto
            //takecareofabugwhichisduetothesummernoteeditor:
            //sometimes,thedatetimepickerlosesthefocusthengetitback
            //inthesameexecutionflow.Thiswasmakingthedatepickerclose
            //fornoapparentreason.Now,itonlyclosesthenreopensdirectly
            //withoutitbepossibletonotice.
            allowInputToggle:true,
        };
        this.__libInput++;
        const$input=$(this.inputEl);
        $input.datetimepicker(datepickersOptions);
        this.__libInput--;

        //Monkey-patchthelibraryoptiontoaddcustomclassesonthepickers
        constlibObject=$input.data('datetimepicker');
        constoldFunc=libObject._getTemplate;
        libObject._getTemplate=function(){
            const$template=oldFunc.call(this,...arguments);
            $template.addClass('o_we_no_overlayo_we_datetimepicker');
            return$template;
        };
    },

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *@override
     */
    isPreviewed:function(){
        returnthis._super(...arguments)||!!$(this.inputEl).data('datetimepicker').widget;
    },
    /**
     *@override
     */
    asyncsetValue(){
        awaitthis._super(...arguments);
        letmomentObj=moment.unix(this._value);
        if(!momentObj.isValid()){
            momentObj=moment();
        }
        this.__libInput++;
        $(this.inputEl).datetimepicker('date',momentObj);
        this.__libInput--;
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *@private
     *@param{Event}ev
     */
    _onDateTimePickerChange:function(ev){
        if(this.__libInput>0){
            return;
        }
        if(!ev.date||!ev.date.isValid()){
            return;
        }
        this._value=ev.date.unix().toString();
        this._onUserValuePreview(ev);
    },
    /**
     *PreventscrashmanagertothrowCORSerror.Notethatlibraryalready
     *clearsthewrongdateformat.
     */
    _onDateTimePickerError:function(ev){
        ev.stopPropagation();
    },
});

constRangeUserValueWidget=UnitUserValueWidget.extend({
    tagName:'we-range',
    events:{
        'changeinput':'_onInputChange',
    },

    /**
     *@override
     */
    asyncstart(){
        awaitthis._super(...arguments);
        this.input=document.createElement('input');
        this.input.type="range";
        letmin=this.el.dataset.min&&parseFloat(this.el.dataset.min)||0;
        letmax=this.el.dataset.max&&parseFloat(this.el.dataset.max)||100;
        conststep=this.el.dataset.step&&parseFloat(this.el.dataset.step)||1;
        if(min>max){
            [min,max]=[max,min];
            this.input.classList.add('o_we_inverted_range');
        }
        this.input.setAttribute('min',min);
        this.input.setAttribute('max',max);
        this.input.setAttribute('step',step);
        this.containerEl.appendChild(this.input);

        this._onInputChange=_.debounce(this._onInputChange,100);
    },

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *@override
     */
    asyncsetValue(value,methodName){
        awaitthis._super(...arguments);
        this.input.value=this._value;
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *@private
     */
    _onInputChange(ev){
        this._value=ev.target.value;
        this._onUserValueChange(ev);
    },
});

constSelectPagerUserValueWidget=SelectUserValueWidget.extend({
    className:(SelectUserValueWidget.prototype.className||'')+'o_we_select_pager',
    events:Object.assign({},SelectUserValueWidget.prototype.events,{
        'click.o_we_pager_next,.o_we_pager_prev':'_onPageChange',
    }),

    /**
     *@override
     */
    asyncstart(){
        const_super=this._super.bind(this);
        this.pages=this.options.childNodes.filter(node=>node.matches&&node.matches('we-select-page'));
        this.numPages=this.pages.length;

        constprev=document.createElement('i');
        prev.classList.add('o_we_pager_prev','fa','fa-chevron-left');

        this.pageNum=document.createElement('span');
        this.currentPage=0;

        constnext=document.createElement('i');
        next.classList.add('o_we_pager_next','fa','fa-chevron-right');

        constpagerControls=document.createElement('div');
        pagerControls.classList.add('o_we_pager_controls');
        pagerControls.appendChild(prev);
        pagerControls.appendChild(this.pageNum);
        pagerControls.appendChild(next);

        this.pageName=document.createElement('b');
        constpagerHeader=document.createElement('div');
        pagerHeader.classList.add('o_we_pager_header');
        pagerHeader.appendChild(this.pageName);
        pagerHeader.appendChild(pagerControls);

        await_super(...arguments);
        this.menuEl.classList.add('o_we_has_pager');
        $(this.menuEl).prepend(pagerHeader);
        this._updatePage();
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *@override
     */
    _shouldIgnoreClick(ev){
        return!!ev.target.closest('.o_we_pager_header')||this._super(...arguments);
    },
    /**
     *Updatesthepager'spagenumberdisplay.
     *
     *@private
     */
    _updatePage(){
        this.pages.forEach((page,i)=>page.classList.toggle('active',i===this.currentPage));
        this.pageNum.textContent=`${this.currentPage+1}/${this.numPages}`;
        constactivePage=this.pages.find((page,i)=>i===this.currentPage);
        this.pageName.textContent=activePage.getAttribute('string');
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *Goestotheprevious/nextpagewithwrap-around.
     *
     *@private
     */
    _onPageChange(ev){
        ev.preventDefault();
        ev.stopPropagation();
        constdelta=ev.target.matches('.o_we_pager_next')?1:-1;
        this.currentPage=(this.currentPage+this.numPages+delta)%this.numPages;
        this._updatePage();
    },
    /**
     *@override
     */
    _onClick(ev){
        constactiveButton=this._getActiveSubWidget();
        if(activeButton){
            constcurrentPage=this.pages.indexOf(activeButton.el.closest('we-select-page'));
            if(currentPage!==-1){
                this.currentPage=currentPage;
                this._updatePage();
            }
        }
        returnthis._super(...arguments);
    },
});

constuserValueWidgetsRegistry={
    'we-button':ButtonUserValueWidget,
    'we-checkbox':CheckboxUserValueWidget,
    'we-select':SelectUserValueWidget,
    'we-button-group':ButtonGroupUserValueWidget,
    'we-input':InputUserValueWidget,
    'we-multi':MultiUserValueWidget,
    'we-colorpicker':ColorpickerUserValueWidget,
    'we-datetimepicker':DatetimePickerUserValueWidget,
    'we-imagepicker':ImagepickerUserValueWidget,
    'we-videopicker':VideopickerUserValueWidget,
    'we-range':RangeUserValueWidget,
    'we-select-pager':SelectPagerUserValueWidget,
};

/**
 *Handlesasetofoptionsforonesnippet.Theregistryreturnedbythis
 *modulecontainsthenamesofthespecializedSnippetOptionWidgetwhichcanbe
 *referencedthankstothedata-jskeyintheweb_editoroptionstemplate.
 */
constSnippetOptionWidget=Widget.extend({
    tagName:'we-customizeblock-option',
    events:{
        'click.o_we_collapse_toggler':'_onCollapseTogglerClick',
    },
    custom_events:{
        'user_value_update':'_onUserValueUpdate',
        'user_value_widget_critical':'_onUserValueWidgetCritical',
    },
    /**
     *Indicatesiftheoptionshouldbedisplayedinthebuttongroupatthe
     *topoftheoptionspanel,nexttotheclone/removebutton.
     *
     *@type{boolean}
     */
    isTopOption:false,
    /**
     *Forcesthetargettonotbepossibletoremove.
     *
     *@type{boolean}
     */
    forceNoDeleteButton:false,

    /**
     *Theoption`$el`issupposedtobetheassociatedDOMUIelement.
     *TheoptioncontrolsanotherDOMelement:thesnippetit
     *customizes,whichcanbefoundat`$target`.Accesstothewholeedition
     *overlayispossiblewith`$overlay`(thisisnotrecommendedthough).
     *
     *@constructor
     */
    init:function(parent,$uiElements,$target,$overlay,data,options){
        this._super.apply(this,arguments);

        this.$originalUIElements=$uiElements;

        this.$target=$target;
        this.$overlay=$overlay;
        this.data=data;
        this.options=options;

        this.className='snippet-option-'+this.data.optionName;

        this.ownerDocument=this.$target[0].ownerDocument;

        this._userValueWidgets=[];
        this._actionQueues=newMap();
    },
    /**
     *@override
     */
    willStart:asyncfunction(){
        awaitthis._super(...arguments);
        returnthis._renderOriginalXML().then(uiFragment=>{
            this.uiFragment=uiFragment;
        });
    },
    /**
     *@override
     */
    renderElement:function(){
        this._super(...arguments);
        this.el.appendChild(this.uiFragment);
        this.uiFragment=null;
    },
    /**
     *Calledwhentheparenteditionoverlayiscoveringtheassociatedsnippet
     *(thefirsttime,thisfollowsthecalltothe@seestartmethod).
     *
     *@abstract
     */
    onFocus:function(){},
    /**
     *Calledwhentheparenteditionoverlayiscoveringtheassociatedsnippet
     *forthefirsttime,whenitisanewsnippetdroppedfromthed&dsnippet
     *menu.Note:thisiscalledafterthestartandonFocusmethods.
     *
     *@abstract
     */
    onBuilt:function(){},
    /**
     *Calledwhentheparenteditionoverlayisremovedfromtheassociated
     *snippet(anothersnippetenterseditionforexample).
     *
     *@abstract
     */
    onBlur:function(){},
    /**
     *Calledwhentheassociatedsnippetistheresultofthecloningof
     *anothersnippet(so`this.$target`isaclonedelement).
     *
     *@abstract
     *@param{Object}options
     *@param{boolean}options.isCurrent
     *       trueiftheassociatedsnippetisacloneofthemainelementthat
     *       wascloned(sonotacloneofachildofthismainelementthat
     *       wascloned)
     */
    onClone:function(options){},
    /**
     *CalledwhentheassociatedsnippetismovedtoanotherDOMlocation.
     *
     *@abstract
     */
    onMove:function(){},
    /**
     *CalledwhentheassociatedsnippetisabouttoberemovedfromtheDOM.
     *
     *@abstract
     */
    onRemove:function(){},
    /**
     *Calledwhenthetargetisshown,onlymeaningfulifthetargetwashidden
     *atsomepoint(typicallyusedfor'invisible'snippets).
     *
     *@abstract
     *@returns{Promise|undefined}
     */
    onTargetShow:asyncfunction(){},
    /**
     *Calledwhenthetargetishidden(typicallyusedfor'invisible'
     *snippets).
     *
     *@abstract
     *@returns{Promise|undefined}
     */
    onTargetHide:asyncfunction(){},
    /**
     *Calledwhenthetemplatewhichcontainstheassociatedsnippetisabout
     *tobesaved.
     *
     *@abstract
     *@return{Promise|undefined}
     */
    cleanForSave:asyncfunction(){},

    //--------------------------------------------------------------------------
    //Options
    //--------------------------------------------------------------------------

    /**
     *Defaultoptionmethodwhichallowstoselectoneandonlyoneclassin
     *theoptionclassessetandsetitontheassociatedsnippet.Thecommon
     *caseishavingaselectwitheachitemhavinga`data-select-class`
     *valueallowingtochoosetheassociatedclass,orsimplyanunique
     *checkboxtoallowtogglingauniqueclass.
     *
     *@param{boolean|string}previewMode
     *       -truthyiftheoptionisenabledforprevieworifleavingit(in
     *         thatsecondcase,thevalueis'reset')
     *       -falseiftheoptionshouldbeactivatedforgood
     *@param{string}widgetValue
     *@param{Object}params
     *@returns{Promise|undefined}
     */
    selectClass:function(previewMode,widgetValue,params){
        for(constclassNamesofparams.possibleValues){
            if(classNames){
                this.$target[0].classList.remove(...classNames.trim().split(/\s+/g));
            }
        }
        if(widgetValue){
            this.$target[0].classList.add(...widgetValue.trim().split(/\s+/g));
        }
    },
    /**
     *Defaultoptionmethodwhichallowstoselectavalueandsetitonthe
     *associatedsnippetasadataattribute.Thenameofthedataattributeis
     *givenbytheattributeNameparameter.
     *
     *@param{boolean}previewMode-@seethis.selectClass
     *@param{string}widgetValue
     *@param{Object}params
     *@returns{Promise|undefined}
     */
    selectDataAttribute:function(previewMode,widgetValue,params){
        constvalue=this._selectAttributeHelper(widgetValue,params);
        this.$target[0].dataset[params.attributeName]=value;
    },
    /**
     *Defaultoptionmethodwhichallowstoselectavalueandsetitonthe
     *associatedsnippetasanattribute.Thenameoftheattributeis
     *givenbytheattributeNameparameter.
     *
     *@param{boolean}previewMode-@seethis.selectClass
     *@param{string}widgetValue
     *@param{Object}params
     *@returns{Promise|undefined}
     */
    selectAttribute:function(previewMode,widgetValue,params){
        constvalue=this._selectAttributeHelper(widgetValue,params);
        this.$target[0].setAttribute(params.attributeName,value);
    },
    /**
     *Defaultoptionmethodwhichallowstoselectavalueandsetitonthe
     *associatedsnippetasacssstyle.Thenameofthecsspropertyis
     *givenbythecssPropertyparameter.
     *
     *@param{boolean}previewMode-@seethis.selectClass
     *@param{string}widgetValue
     *@param{Object}params
     *@param{string}[params.forceStyle]ifundefined,themethodwillnot
     *     settheinlinestyle(andthusevenremoveit)iftheitemwould
     *     alreadyhavethegivenstylewithoutit(thankstoaCSSrulefor
     *     example).Ifdefined(asastring),itactsasthe"priority"param
     *     of@seeCSSStyleDeclaration.setProperty:itshouldbe'important'to
     *     setthestyleasimportantor''otherwise.NotethatifforceStyle
     *     isundefined,thestyleisalwayssetasimportantwhenapplied.
     *@returns{Promise|undefined}
     */
    selectStyle:function(previewMode,widgetValue,params){
        //Disablealltransitionsforthedurationofthemethodasmany
        //comparisonswillbedoneontheelementtoknowifapplyinga
        //propertyhasaneffectornot.Also,changingacsspropertyviathe
        //editorshouldnotshowanytransitionaspreviewswouldnotbedone
        //immediately,whichisnotgoodfortheuserexperience.
        this.$target[0].classList.add('o_we_force_no_transition');
        const_restoreTransitions=()=>this.$target[0].classList.remove('o_we_force_no_transition');

        if(params.cssProperty==='background-color'){
            this.$target.trigger('background-color-event',previewMode);
        }

        constcssProps=weUtils.CSS_SHORTHANDS[params.cssProperty]||[params.cssProperty];
        for(constcssPropofcssProps){
            //Alwaysresettheinlinestylefirsttonotputinlinestyleonan
            //elementwhichalreadyhavethisstylethroughcssstylesheets.
            this.$target[0].style.setProperty(cssProp,'');
        }
        if(params.extraClass){
            this.$target.removeClass(params.extraClass);
        }

        //OnlyallowtouseacolornameasaclassNameifweknowaboutthe
        //otherpotentialcolornames(toremove)andifweknowaboutaprefix
        //(otherwisewesupposethatweshouldusetheactualrelatedcolor).
        if(params.colorNames&&params.colorPrefix){
            constclasses=weUtils.computeColorClasses(params.colorNames,params.colorPrefix);
            this.$target[0].classList.remove(...classes);

            if(weUtils.isColorCombinationName(widgetValue)){
                //Thosearethespecialcolorcombinationsclasses.Justhave
                //toaddit(andaddingthepotentialextraclass)thenleave.
                this.$target[0].classList.add('o_cc',`o_cc${widgetValue}`,params.extraClass);
                _restoreTransitions();
                return;
            }
            if(params.colorNames.includes(widgetValue)){
                constoriginalCSSValue=window.getComputedStyle(this.$target[0])[cssProps[0]];
                constclassName=params.colorPrefix+widgetValue;
                this.$target[0].classList.add(className);
                if(originalCSSValue!==window.getComputedStyle(this.$target[0])[cssProps[0]]){
                    //Ifapplyingtheclassdidindeedchangedthecss
                    //propertyweareediting,nothingmorehastobedone.
                    //(exceptaddingtheextraclass)
                    this.$target.addClass(params.extraClass);
                    _restoreTransitions();
                    return;
                }
                //Otherwise,itmeansthatclassprobablydoesnotexist,
                //weremoveitandcontinue.Especiallyusefulforsome
                //prefixeswhichonlyworkwithsomecolornamesbutnotall.
                this.$target[0].classList.remove(className);
            }
        }

        //Atthispoint,thewidgetvalueiseitheraproperty/colornameor
        //anactualcsspropertyvalue.Ifitisaproperty/colorname,wewill
        //applyacssvariableasstylevalue.
        consthtmlPropValue=weUtils.getCSSVariableValue(widgetValue);
        if(htmlPropValue){
            widgetValue=`var(--${widgetValue})`;
        }

        //replacing','by','topreventattributeswithinternalspaceseparatorsfrombeingsplit:
        //eg:"rgba(55,12,47,1.9)47px"shouldbesplitas["rgba(55,12,47,1.9)","47px"]
        constvalues=widgetValue.replace(/,\s/g,',').split(/\s+/g);
        while(values.length<cssProps.length){
            switch(values.length){
                case1:
                case2:{
                    values.push(values[0]);
                    break;
                }
                case3:{
                    values.push(values[1]);
                    break;
                }
                default:{
                    values.push(values[values.length-1]);
                }
            }
        }

        conststyles=window.getComputedStyle(this.$target[0]);
        lethasUserValue=false;
        for(leti=cssProps.length-1;i>0;i--){
            hasUserValue=applyCSS.call(this,cssProps[i],values.pop(),styles)||hasUserValue;
        }
        hasUserValue=applyCSS.call(this,cssProps[0],values.join(''),styles)||hasUserValue;

        functionapplyCSS(cssProp,cssValue,styles){
            constforceStyle=(typeofparams.forceStyle!=='undefined');
            if(forceStyle
                    ||!weUtils.areCssValuesEqual(styles[cssProp],cssValue,cssProp,this.$target[0])){
                constpriority=forceStyle?params.forceStyle:'important';
                this.$target[0].style.setProperty(cssProp,cssValue,priority);
                returntrue;
            }
            returnfalse;
        }

        if(params.extraClass){
            this.$target.toggleClass(params.extraClass,hasUserValue);
        }

        _restoreTransitions();
    },

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *Overridethehelpermethodtosearchinsidethe$targetelementinstead
     *oftheUIitemelement.
     *
     *@override
     */
    $:function(){
        returnthis.$target.find.apply(this.$target,arguments);
    },
    /**
     *Closesalluservaluewidgets.
     */
    closeWidgets:function(){
        this._userValueWidgets.forEach(widget=>widget.close());
    },
    /**
     *@param{string}name
     *@returns{UserValueWidget|null}
     */
    findWidget:function(name){
        for(constwidgetofthis._userValueWidgets){
            if(widget.getName()===name){
                returnwidget;
            }
            constdepWidget=widget.findWidget(name);
            if(depWidget){
                returndepWidget;
            }
        }
        returnnull;
    },
    /**
     *Sometimes,optionsmayneedtonotifyotheroptions,eveninparent
     *editors.Thiscanbedonethankstothe'option_update'event,which
     *willthenbehandledbythisfunction.
     *
     *@param{string}name-anidentifierforatypeofupdate
     *@param{*}data
     */
    notify:function(name,data){
        if(name==='target'){
            this.setTarget(data);
        }
    },
    /**
     *Sometimes,anoptionisbindedonanelementbutshouldinfactapplyon
     *anotherone.Forexample,elementswhichcontainslides:wewantallthe
     *per-slideoptionstobeinthemainmenuofthewholesnippet.This
     *functionallowstosettheoption'starget.
     *
     *Note:theUIisnotupdatedaccordindlyautomatically.
     *
     *@param{jQuery}$target-thenewtargetelement
     *@returns{Promise}
     */
    setTarget:function($target){
        this.$target=$target;
    },
    /**
     *UpdatestheUI.Forwidgetupdate,@see_computeWidgetState.
     *
     *@param{boolean}[noVisibility=false]
     *    Iftrue,onlyupdatewidgetvaluesandtheirUI,nottheirvisibility
     *    ->@seeupdateUIVisibilityfortogglingvisibilityonly
     *@returns{Promise}
     */
    updateUI:asyncfunction({noVisibility}={}){
        //Foreachwidget,foreachoftheiroptionmethod,notifytothe
        //widgetthecurrentvaluetheyshouldholdaccordingtothe$target's
        //currentstate,relatedforthatmethod.
        constproms=this._userValueWidgets.map(asyncwidget=>{
            //Updatewidgetvalue(foreachmethod)
            constmethodsNames=widget.getMethodsNames();
            for(constmethodNameofmethodsNames){
                constparams=widget.getMethodsParams(methodName);

                letobj=this;
                if(params.applyTo){
                    const$firstSubTarget=this.$(params.applyTo).eq(0);
                    if(!$firstSubTarget.length){
                        continue;
                    }
                    obj=createPropertyProxy(this,'$target',$firstSubTarget);
                }

                constvalue=awaitthis._computeWidgetState.call(obj,methodName,params);
                if(value===undefined){
                    continue;
                }
                constnormalizedValue=this._normalizeWidgetValue(value);
                awaitwidget.setValue(normalizedValue,methodName);
            }
        });
        awaitPromise.all(proms);

        if(!noVisibility){
            awaitthis.updateUIVisibility();
        }
    },
    /**
     *UpdatestheUIvisibility-@see_computeVisibility.Forwidgetupdate,
     *@see_computeWidgetVisibility.
     *
     *@returns{Promise}
     */
    updateUIVisibility:asyncfunction(){
        constproms=this._userValueWidgets.map(asyncwidget=>{
            constparams=widget.getMethodsParams();

            letobj=this;
            if(params.applyTo){
                const$firstSubTarget=this.$(params.applyTo).eq(0);
                if(!$firstSubTarget.length){
                    widget.toggleVisibility(false);
                    return;
                }
                obj=createPropertyProxy(this,'$target',$firstSubTarget);
            }

            //Makesuretocheckthevisibilityofallsub-widgets.For
            //simplicityandefficiency,thosewillbecheckedwithmain
            //widgetsparams.
            constallSubWidgets=[widget];
            leti=0;
            while(i<allSubWidgets.length){
                allSubWidgets.push(...allSubWidgets[i]._userValueWidgets);
                i++;
            }
            constproms=allSubWidgets.map(asyncwidget=>{
                constshow=awaitthis._computeWidgetVisibility.call(obj,widget.getName(),params);
                if(!show){
                    widget.toggleVisibility(false);
                    return;
                }

                constdependencies=widget.getDependencies();
                constdependenciesData=[];
                dependencies.forEach(depName=>{
                    consttoBeActive=(depName[0]!=='!');
                    if(!toBeActive){
                        depName=depName.substr(1);
                    }

                    constwidget=this._requestUserValueWidgets(depName)[0];
                    if(widget){
                        dependenciesData.push({
                            widget:widget,
                            toBeActive:toBeActive,
                        });
                    }
                });
                constdependenciesOK=!dependenciesData.length||dependenciesData.some(depData=>{
                    return(depData.widget.isActive()===depData.toBeActive);
                });

                widget.toggleVisibility(dependenciesOK);
            });
            returnPromise.all(proms);
        });

        constshowUI=awaitthis._computeVisibility();
        this.el.classList.toggle('d-none',!showUI);

        awaitPromise.all(proms);

        //Hidelayoutingelementswhichcontainsonlyhiddenwidgets
        //TODOimprovethis,thisishackishtorelyonDOMstructurehere.
        //Layoutingelementsshouldbehandledaswidgetsorother.
        for(constelofthis.$el.find('we-row')){
            el.classList.toggle('d-none',!$(el).find('>div>.o_we_user_value_widget').not('.d-none').length);
        }
        for(constelofthis.$el.find('we-collapse')){
            const$el=$(el);
            el.classList.toggle('d-none',$el.children().first().hasClass('d-none'));
            consthasNoVisibleElInCollapseMenu=!$el.children().last().children().not('.d-none').length;
            if(hasNoVisibleElInCollapseMenu){
                this._toggleCollapseEl(el,false);
            }
            el.querySelector('.o_we_collapse_toggler').classList.toggle('d-none',hasNoVisibleElInCollapseMenu);
        }
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *@private
     *@param{UserValueWidget[]}widgets
     *@returns{Promise<string>}
     */
    async_checkIfWidgetsUpdateNeedWarning(widgets){
        constmessages=[];
        for(constwidgetofwidgets){
            constmessage=widget.getMethodsParams().warnMessage;
            if(message){
                messages.push(message);
            }
        }
        returnmessages.join('');
    },
    /**
     *@private
     *@param{UserValueWidget[]}widgets
     *@returns{Promise<boolean|string>}
     */
    async_checkIfWidgetsUpdateNeedReload(widgets){
        returnfalse;
    },
    /**
     *@private
     *@returns{Promise<boolean>|boolean}
     */
    _computeVisibility:asyncfunction(){
        returntrue;
    },
    /**
     *Returnsthestringvaluethatshouldbeholdbythewidgetwhichis
     *relatedtothegivenmethodname.
     *
     *Ifthevalueisirrelevantforamethod,itmustreturnundefined.
     *
     *@private
     *@param{string}methodName
     *@param{Object}params
     *@returns{Promise<string|undefined>|string|undefined}
     */
    _computeWidgetState:asyncfunction(methodName,params){
        switch(methodName){
            case'selectClass':{
                letmaxNbClasses=0;
                letactiveClassNames='';
                params.possibleValues.forEach(classNames=>{
                    if(!classNames){
                        return;
                    }
                    constclasses=classNames.split(/\s+/g);
                    if(classes.length>=maxNbClasses
                            &&classes.every(className=>this.$target[0].classList.contains(className))){
                        maxNbClasses=classes.length;
                        activeClassNames=classNames;
                    }
                });
                returnactiveClassNames;
            }
            case'selectAttribute':
            case'selectDataAttribute':{
                constattrName=params.attributeName;
                letattrValue;
                if(methodName==='selectAttribute'){
                    attrValue=this.$target[0].getAttribute(attrName);
                }elseif(methodName==='selectDataAttribute'){
                    attrValue=this.$target[0].dataset[attrName];
                }
                attrValue=(attrValue||'').trim();
                if(params.saveUnit&&!params.withUnit){
                    attrValue=attrValue.split(/\s+/g).map(v=>v+params.saveUnit).join('');
                }
                returnattrValue||params.attributeDefaultValue||'';
            }
            case'selectStyle':{
                if(params.colorPrefix&&params.colorNames){
                    for(constcofparams.colorNames){
                        constclassName=weUtils.computeColorClasses([c],params.colorPrefix)[0];
                        if(this.$target[0].classList.contains(className)){
                            returnc;
                        }
                    }
                }

                //Disablealltransitionsforthedurationofthestylecheck
                //aswewanttoknowthefinalvalueofapropertytoproperly
                //updatetheUI.
                this.$target[0].classList.add('o_we_force_no_transition');
                const_restoreTransitions=()=>this.$target[0].classList.remove('o_we_force_no_transition');

                conststyles=window.getComputedStyle(this.$target[0]);
                constcssProps=weUtils.CSS_SHORTHANDS[params.cssProperty]||[params.cssProperty];
                constborderWidthCssProps=weUtils.CSS_SHORTHANDS['border-width'];
                constcssValues=cssProps.map(cssProp=>{
                    letvalue=styles[cssProp].trim();
                    if(cssProp==='box-shadow'){
                        constinset=value.includes('inset');
                        letvalues=value.replace(/,\s/g,',').replace('inset','').trim().split(/\s+/g);
                        constcolor=values.find(s=>!s.match(/^\d/));
                        values=values.join('').replace(color,'').trim();
                        value=`${color}${values}${inset?'inset':''}`;
                    }
                    if(borderWidthCssProps.includes(cssProp)&&value.endsWith('px')){
                        //Roundingvalueupavoidszoom-inissues.
                        //Zoom-outissuesarenotanexpectedusecase.
                        value=`${Math.ceil(parseFloat(value))}px`;
                    }
                    returnvalue;
                });
                if(cssValues.length===4&&weUtils.areCssValuesEqual(cssValues[3],cssValues[1],params.cssProperty,this.$target)){
                    cssValues.pop();
                }
                if(cssValues.length===3&&weUtils.areCssValuesEqual(cssValues[2],cssValues[0],params.cssProperty,this.$target)){
                    cssValues.pop();
                }
                if(cssValues.length===2&&weUtils.areCssValuesEqual(cssValues[1],cssValues[0],params.cssProperty,this.$target)){
                    cssValues.pop();
                }

                _restoreTransitions();

                returncssValues.join('');
            }
        }
    },
    /**
     *@private
     *@param{string}widgetName
     *@param{Object}params
     *@returns{Promise<boolean>|boolean}
     */
    _computeWidgetVisibility:asyncfunction(widgetName,params){
        if(widgetName==='move_up_opt'||widgetName==='move_left_opt'){
            return!this.$target.is(':first-child');
        }
        if(widgetName==='move_down_opt'||widgetName==='move_right_opt'){
            return!this.$target.is(':last-child');
        }
        returntrue;
    },
    /**
     *@private
     *@param{HTMLElement}el
     *@returns{Object}
     */
    _extraInfoFromDescriptionElement:function(el){
        return{
            title:el.getAttribute('string'),
            options:{
                classes:el.classList,
                dataAttributes:el.dataset,
                tooltip:el.title,
                placeholder:el.getAttribute('placeholder'),
                childNodes:[...el.childNodes],
            },
        };
    },
    /**
     *@private
     *@param{*}
     *@returns{string}
     */
    _normalizeWidgetValue:function(value){
        value=`${value}`.trim();//Forcetoatrimmedstring
        value=ColorpickerWidget.normalizeCSSColor(value);//Ifisacsscolor,normalizeit
        returnvalue;
    },
    /**
     *@private
     *@param{string}widgetName
     *@param{UserValueWidget|this|null}parent
     *@param{string}title
     *@param{Object}options
     *@returns{UserValueWidget}
     */
    _registerUserValueWidget:function(widgetName,parent,title,options){
        constwidget=newuserValueWidgetsRegistry[widgetName](parent,title,options,this.$target);
        if(!parent||parent===this){
            this._userValueWidgets.push(widget);
        }else{
            parent.registerSubWidget(widget);
        }
        returnwidget;
    },
    /**
     *@private
     *@param{HTMLElement}uiFragment
     *@returns{Promise}
     */
    _renderCustomWidgets:function(uiFragment){
        returnPromise.resolve();
    },
    /**
     *@private
     *@param{HTMLElement}uiFragment
     *@returns{Promise}
     */
    _renderCustomXML:function(uiFragment){
        returnPromise.resolve();
    },
    /**
     *@private
     *@param{jQuery}[$xml]-defaulttooriginalxmlcontent
     *@returns{Promise}
     */
    _renderOriginalXML:asyncfunction($xml){
        constuiFragment=document.createDocumentFragment();
        ($xml||this.$originalUIElements).clone(true).appendTo(uiFragment);

        awaitthis._renderCustomXML(uiFragment);

        //Buildlayoutingcomponentsfirst
        for(const[itemName,build]of[['we-row',_buildRowElement],['we-collapse',_buildCollapseElement]]){
            uiFragment.querySelectorAll(itemName).forEach(el=>{
                constinfos=this._extraInfoFromDescriptionElement(el);
                constgroupEl=build(infos.title,infos.options);
                el.parentNode.insertBefore(groupEl,el);
                el.parentNode.removeChild(el);
            });
        }

        //Loadwidgets
        awaitthis._renderXMLWidgets(uiFragment);
        awaitthis._renderCustomWidgets(uiFragment);

        if(this.isDestroyed()){
            //TODOthereisprobablybettertodo.Thiscasewasfoundonlyin
            //tours,wheretheeditorisleftbeforethewidgetarefully
            //loaded(loadMethodsDatadoesn'tworkifthewidgetisdestroyed).
            returnuiFragment;
        }

        constvalidMethodNames=[];
        for(constkeyinthis){
            validMethodNames.push(key);
        }
        this._userValueWidgets.forEach(widget=>{
            widget.loadMethodsData(validMethodNames);
        });

        returnuiFragment;
    },
    /**
     *@private
     *@param{HTMLElement}parentEl
     *@param{SnippetOptionWidget|UserValueWidget}parentWidget
     *@returns{Promise}
     */
    _renderXMLWidgets:function(parentEl,parentWidget){
        constproms=[...parentEl.children].map(el=>{
            constwidgetName=el.tagName.toLowerCase();
            if(!userValueWidgetsRegistry.hasOwnProperty(widgetName)){
                returnthis._renderXMLWidgets(el,parentWidget);
            }

            constinfos=this._extraInfoFromDescriptionElement(el);
            constwidget=this._registerUserValueWidget(widgetName,parentWidget||this,infos.title,infos.options);
            returnwidget.insertAfter(el).then(()=>{
                //Removetheoriginalelementafterwardsastheinsertion
                //operationmaymovesomeofitsinnercontentduring
                //widgetstart.
                parentEl.removeChild(el);

                if(widget.isContainer()){
                    returnthis._renderXMLWidgets(widget.el,widget);
                }
            });
        });
        returnPromise.all(proms);
    },
    /**
     *@private
     *@param{...string}widgetNames
     *@returns{UserValueWidget[]}
     */
    _requestUserValueWidgets:function(...widgetNames){
        constwidgets=[];
        for(constwidgetNameofwidgetNames){
            letwidget=null;
            this.trigger_up('user_value_widget_request',{
                name:widgetName,
                onSuccess:_widget=>widget=_widget,
            });
            if(widget){
                widgets.push(widget);
            }
        }
        returnwidgets;
    },
    /**
     *@private
     *@param{function<Promise<jQuery>>}[callback]
     *@returns{Promise}
     */
    _rerenderXML:asyncfunction(callback){
        this._userValueWidgets.forEach(widget=>widget.destroy());
        this._userValueWidgets=[];
        this.$el.empty();

        let$xml=undefined;
        if(callback){
            $xml=awaitcallback.call(this);
        }

        returnthis._renderOriginalXML($xml).then(uiFragment=>{
            this.$el.append(uiFragment);
            returnthis.updateUI();
        });
    },
    /**
     *ActivatestheoptionassociatedtothegivenDOMelement.
     *
     *@private
     *@param{boolean|string}previewMode
     *       -truthyiftheoptionisenabledforprevieworifleavingit(in
     *         thatsecondcase,thevalueis'reset')
     *       -falseiftheoptionshouldbeactivatedforgood
     *@param{UserValueWidget}widget-thewidgetwhichtriggeredtheoptionchange
     *@returns{Promise}
     */
    _select:asyncfunction(previewMode,widget){
        let$applyTo=null;

        //Calleachoptionmethodsequentially
        for(constmethodNameofwidget.getMethodsNames()){
            constwidgetValue=widget.getValue(methodName);
            constparams=widget.getMethodsParams(methodName);

            if(params.applyTo){
                if(!$applyTo){
                    $applyTo=this.$(params.applyTo);
                }
                constproms=_.map($applyTo,subTargetEl=>{
                    constproxy=createPropertyProxy(this,'$target',$(subTargetEl));
                    returnthis[methodName].call(proxy,previewMode,widgetValue,params);
                });
                awaitPromise.all(proms);
            }else{
                awaitthis[methodName](previewMode,widgetValue,params);
            }
        }

        //Wetriggertheeventonelementstargetedbyapply-toifanyas
        //this.$targetcouldnotbeinaneditableelementwhiletheelements
        //targetedbyapply-toare.
        ($applyTo||this.$target).trigger('content_changed');
    },
    /**
     *Usedtohandleattributeordataattributevaluechange
     *
     *@param{string}value
     *@param{Object}params
     *@returns{string|undefined}
     */
    _selectAttributeHelper(value,params){
        if(!params.attributeName){
            thrownewError('Attributenamemissing');
        }
        if(params.saveUnit&&!params.withUnit){
            //Valuesthatcomewithanunitaresavedwithoutunitas
            //data-attributeunlesstoldotherwise.
            value=value.split(params.saveUnit).join('');
        }
        if(params.extraClass){
            this.$target.toggleClass(params.extraClass,params.defaultValue!==value);
        }
        returnvalue;
    },
    /**
     *@private
     *@param{HTMLElement}collapseEl
     *@param{boolean|undefined}[show]
     */
    _toggleCollapseEl(collapseEl,show){
        collapseEl.classList.toggle('active',show);
        collapseEl.querySelector('.o_we_collapse_toggler').classList.toggle('active',show);
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *@private
     *@param{Event}ev
     */
    _onCollapseTogglerClick(ev){
        constcurrentCollapseEl=ev.currentTarget.parentNode;
        this._toggleCollapseEl(currentCollapseEl);
        for(constcollapseElofcurrentCollapseEl.querySelectorAll('we-collapse')){
            this._toggleCollapseEl(collapseEl,false);
        }
    },
    /**
     *Calledwhenawidgetnotifiesapreview/change/reset.
     *
     *@private
     *@param{Event}ev
     */
    _onUserValueUpdate:asyncfunction(ev){
        ev.stopPropagation();
        constwidget=ev.data.widget;
        constpreviewMode=ev.data.previewMode;

        //Firstcheckiftheupdatedwidgetoranyofthewidgetsittriggers
        //willrequireareloadoraconfirmationchoicebytheuser.Ifitis
        //thecase,warntheuserandpotentiallyaskifheagreestosaveits
        //currentchanges.Ifnot,justdonothing.
        letrequiresReload=false;
        if(!ev.data.previewMode&&!ev.data.isSimulatedEvent){
            constlinkedWidgets=this._requestUserValueWidgets(...ev.data.triggerWidgetsNames);
            constwidgets=[ev.data.widget].concat(linkedWidgets);

            constwarnMessage=awaitthis._checkIfWidgetsUpdateNeedWarning(widgets);
            if(warnMessage){
                constokWarning=awaitnewPromise(resolve=>{
                    Dialog.confirm(this,warnMessage,{
                        confirm_callback:()=>resolve(true),
                        cancel_callback:()=>resolve(false),
                    });
                });
                if(!okWarning){
                    return;
                }
            }

            constreloadMessage=awaitthis._checkIfWidgetsUpdateNeedReload(widgets);
            requiresReload=!!reloadMessage;
            if(requiresReload){
                constsave=awaitnewPromise(resolve=>{
                    Dialog.confirm(this,_t("Thischangeneedstoreloadthepage,thiswillsaveallyourchangesandreloadthepage,areyousureyouwanttoproceed?")+''
                            +(typeofreloadMessage==='string'?reloadMessage:''),{
                        confirm_callback:()=>resolve(true),
                        cancel_callback:()=>resolve(false),
                    });
                });
                if(!save){
                    return;
                }
            }
        }

        //Queueactionsothatwecanlaterskipuselessactions.
        if(!this._actionQueues.get(widget)){
            this._actionQueues.set(widget,[]);
        }
        constcurrentAction={previewMode};
        this._actionQueues.get(widget).push(currentAction);

        //Askamutexedsnippetupdateaccordingtothewidgetvaluechange
        constshouldRecordUndo=(!previewMode&&!ev.data.isSimulatedEvent);
        this.trigger_up('snippet_edition_request',{exec:async()=>{
            //Ifsomeprevioussnippeteditioninthemutexremovedthetargetfrom
            //theDOM,thewidgetcanbedestroyed,inthatcasetheeditionrequest
            //isnowuselessandcanbediscarded.
            if(this.isDestroyed()){
                return;
            }
            //Filteractionsthatarecounterbalancedbyearlier/lateractions
            constactionQueue=this._actionQueues.get(widget).filter(({previewMode},i,actions)=>{
                constprev=actions[i-1];
                constnext=actions[i+1];
                if(previewMode===true&&next&&next.previewMode){
                    returnfalse;
                }elseif(previewMode==='reset'&&prev&&prev.previewMode){
                    returnfalse;
                }
                returntrue;
            });
            //Skipactionifit'sbeencounterbalanced
            if(!actionQueue.includes(currentAction)){
                this._actionQueues.set(widget,actionQueue);
                return;
            }
            this._actionQueues.set(widget,actionQueue.filter(action=>action!==currentAction));

            if(ev.data.prepare){
                ev.data.prepare();
            }

            if(previewMode&&(widget.$el.closest('[data-no-preview="true"]').length)){
                //TODOtheflagshouldbefetchedthroughwidgetparamssomehow
                return;
            }

            //Ifitisnotpreviewmode,theuserselectedtheoptionforgood
            //(sorecordtheaction)
            if(shouldRecordUndo){
                this.trigger_up('request_history_undo_record',{$target:this.$target});
            }

            //Callwidgetoptionmethodsandupdate$target
            awaitthis._select(previewMode,widget);
            if(previewMode){
                return;
            }

            awaitnewPromise(resolve=>setTimeout(()=>{
                //WillupdatetheUIofthecorrectwidgetsforalloptions
                //relatedtothesame$target/editor
                this.trigger_up('snippet_option_update',{
                    onSuccess:()=>resolve(),
                });
            //Settimeoutneededsothattheusereventwhichtriggeredthe
            //optioncanbubblefirst.
            }));
        }});

        if(ev.data.isSimulatedEvent){
            //Iftheuservalueupdatewassimulatedthroughatrigger,we
            //preventtriggeringfurtherwidgets.Thiscouldbeallowedatsome
            //pointbutdoesnotworkcorrectlyincomplexwebsitecases(see
            //customizeWebsite).
            return;
        }

        //Checklinkedwidgets:forcetheirvalueandsimulateanotification
        constlinkedWidgets=this._requestUserValueWidgets(...ev.data.triggerWidgetsNames);
        if(linkedWidgets.length!==ev.data.triggerWidgetsNames.length){
            console.warn('Missingwidgettotrigger');
            return;
        }
        leti=0;
        consttriggerWidgetsValues=ev.data.triggerWidgetsValues;
        for(constlinkedWidgetoflinkedWidgets){
            constwidgetValue=triggerWidgetsValues[i];
            if(widgetValue!==undefined){
                //FIXMErightnowonlymakethisworksupposingitisa
                //colorpickerwidgetwithbigbighacks,thisshouldbe
                //improvedalot
                constnormValue=this._normalizeWidgetValue(widgetValue);
                if(previewMode===true){
                    linkedWidget._previewColor=normValue;
                }elseif(previewMode===false){
                    linkedWidget._previewColor=false;
                    linkedWidget._value=normValue;
                }else{
                    linkedWidget._previewColor=false;
                }
            }

            linkedWidget.notifyValueChange(previewMode,true);
            i++;
        }

        if(requiresReload){
            this.trigger_up('request_save',{
                reloadEditor:true,
            });
        }
    },
    /**
     *@private
     */
    _onUserValueWidgetCritical(){
        this.trigger_up('remove_snippet',{
            $snippet:this.$target,
        });
    },
});
constregistry={};

//::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

registry.sizing=SnippetOptionWidget.extend({
    /**
     *@override
     */
    start:function(){
        varself=this;
        vardef=this._super.apply(this,arguments);

        this.$handles=this.$overlay.find('.o_handle');

        varresizeValues=this._getSize();
        this.$handles.on('mousedown',function(ev){
            ev.preventDefault();

            //Firstupdatesizevaluesassomeelementsizesmaynothavebeen
            //initializedonoptionstart(hiddenslides,etc)
            resizeValues=self._getSize();
            var$handle=$(ev.currentTarget);

            varcompass=false;
            varXY=false;
            if($handle.hasClass('n')){
                compass='n';
                XY='Y';
            }elseif($handle.hasClass('s')){
                compass='s';
                XY='Y';
            }elseif($handle.hasClass('e')){
                compass='e';
                XY='X';
            }elseif($handle.hasClass('w')){
                compass='w';
                XY='X';
            }

            varresize=resizeValues[compass];
            if(!resize){
                return;
            }

            varcurrent=0;
            varcssProperty=resize[2];
            varcssPropertyValue=parseInt(self.$target.css(cssProperty));
            _.each(resize[0],function(val,key){
                if(self.$target.hasClass(val)){
                    current=key;
                }elseif(resize[1][key]===cssPropertyValue){
                    current=key;
                }
            });
            varbegin=current;
            varbeginClass=self.$target.attr('class');
            varregClass=newRegExp('\\s*'+resize[0][begin].replace(/[-]*[0-9]+/,'[-]*[0-9]+'),'g');

            varcursor=$handle.css('cursor')+'-important';
            var$body=$(this.ownerDocument.body);
            $body.addClass(cursor);

            varxy=ev['page'+XY];
            varbodyMouseMove=function(ev){
                ev.preventDefault();

                vardd=ev['page'+XY]-xy+resize[1][begin];
                varnext=current+(current+1===resize[1].length?0:1);
                varprev=current?(current-1):0;

                varchange=false;
                if(dd>(2*resize[1][next]+resize[1][current])/3){
                    self.$target.attr('class',(self.$target.attr('class')||'').replace(regClass,''));
                    self.$target.addClass(resize[0][next]);
                    current=next;
                    change=true;
                }
                if(prev!==current&&dd<(2*resize[1][prev]+resize[1][current])/3){
                    self.$target.attr('class',(self.$target.attr('class')||'').replace(regClass,''));
                    self.$target.addClass(resize[0][prev]);
                    current=prev;
                    change=true;
                }

                if(change){
                    self._onResize(compass,beginClass,current);
                    self.trigger_up('cover_update');
                    $handle.addClass('o_active');
                }
            };
            varbodyMouseUp=function(){
                $body.off('mousemove',bodyMouseMove);
                $(window).off('mouseup',bodyMouseUp);
                $body.removeClass(cursor);
                $handle.removeClass('o_active');

                //Highlightsthepreviewsforawhile
                var$handlers=self.$overlay.find('.o_handle');
                $handlers.addClass('o_active').delay(300).queue(function(){
                    $handlers.removeClass('o_active').dequeue();
                });

                if(begin===current){
                    return;
                }
                setTimeout(function(){
                    self.trigger_up('request_history_undo_record',{
                        $target:self.$target,
                        event:'resize_'+XY,
                    });
                },0);
            };
            $body.on('mousemove',bodyMouseMove);
            $(window).on('mouseup',bodyMouseUp);
        });

        returndef;
    },
    /**
     *@override
     */
    onFocus:function(){
        this._onResize();
    },
    /**
     *@override
     */
    onBlur:function(){
        this.$handles.addClass('readonly');
    },

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *@override
     */
    setTarget:function(){
        this._super(...arguments);
        this._onResize();
    },
    /**
     *@override
     */
    updateUI:asyncfunction(){
        awaitthis._super(...arguments);
        constresizeValues=this._getSize();
        _.each(resizeValues,(value,key)=>{
            this.$handles.filter('.'+key).toggleClass('readonly',!value);
        });
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *Returnsanobjectmappingoneorseveralcardinaldirection(n,e,s,w)
     *toanArraycontaining:
     *1)Alistofclassestotogglewhenusingthiscardinaldirection
     *2)AlistofvaluestheseclassesaresupposedtosetonagivenCSSprop
     *3)ThementionedCSSprop
     *
     *Note:thisobjectmustalsobesavedinthis.gridbeforebeingreturned.
     *
     *@abstract
     *@private
     *@returns{Object}
     */
    _getSize:function(){},
    /**
     *Calledwhenthesnippetisbeingresizedanditsclasseschanges.
     *
     *@private
     *@param{string}[compass]-resizedirection('n','s','e'or'w')
     *@param{string}[beginClass]-attributesclassatthebeginning
     *@param{integer}[current]-currentincrementinthis.grid
     */
    _onResize:function(compass,beginClass,current){
        varself=this;

        //Adapttheresizehandlesaccordingtotheclassesanddimensions
        varresizeValues=this._getSize();
        var$handles=this.$overlay.find('.o_handle');
        _.each(resizeValues,function(resizeValue,direction){
            varclasses=resizeValue[0];
            varvalues=resizeValue[1];
            varcssProperty=resizeValue[2];

            var$handle=$handles.filter('.'+direction);

            varcurrent=0;
            varcssPropertyValue=parseInt(self.$target.css(cssProperty));
            _.each(classes,function(className,key){
                if(self.$target.hasClass(className)){
                    current=key;
                }elseif(values[key]===cssPropertyValue){
                    current=key;
                }
            });

            $handle.toggleClass('o_handle_start',current===0);
            $handle.toggleClass('o_handle_end',current===classes.length-1);
        });

        //Adaptthehandlestofittheleft,topandbottomsizes
        varml=this.$target.css('margin-left');
        this.$overlay.find('.o_handle.w').css({
            width:ml,
            left:'-'+ml,
        });
        this.$overlay.find('.o_handle.e').css({
            width:0,
        });
        _.each(this.$overlay.find(".o_handle.n,.o_handle.s"),function(handle){
            var$handle=$(handle);
            vardirection=$handle.hasClass('n')?'top':'bottom';
            $handle.height(self.$target.css('padding-'+direction));
        });
        this.$target.trigger('content_changed');
    },
});

/**
 *Handlestheeditionofpadding-topandpadding-bottom.
 */
registry['sizing_y']=registry.sizing.extend({

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *@override
     */
    _getSize:function(){
        varnClass='pt';
        varnProp='padding-top';
        varsClass='pb';
        varsProp='padding-bottom';
        if(this.$target.is('hr')){
            nClass='mt';
            nProp='margin-top';
            sClass='mb';
            sProp='margin-bottom';
        }

        vargrid=[];
        for(vari=0;i<=(256/8);i++){
            grid.push(i*8);
        }
        grid.splice(1,0,4);
        this.grid={
            n:[grid.map(v=>nClass+v),grid,nProp],
            s:[grid.map(v=>sClass+v),grid,sProp],
        };
        returnthis.grid;
    },
});

/*
 *AbstractoptiontobeextendedbytheImageOptimizeandBackgroundOptimize
 *optionsthathandlesallthecommonparts.
 */
constImageHandlerOption=SnippetOptionWidget.extend({

    /**
     *@override
     */
    asyncwillStart(){
        const_super=this._super.bind(this);
        awaitthis._loadImageInfo();
        return_super(...arguments);
    },

    //--------------------------------------------------------------------------
    //Options
    //--------------------------------------------------------------------------

    /**
     *@seethis.selectClassforparameters
     */
    selectWidth(previewMode,widgetValue,params){
        this._getImg().dataset.resizeWidth=widgetValue;
        returnthis._applyOptions();
    },
    /**
     *@seethis.selectClassforparameters
     */
    setQuality(previewMode,widgetValue,params){
        this._getImg().dataset.quality=widgetValue;
        returnthis._applyOptions();
    },
    /**
     *@seethis.selectClassforparameters
     */
    glFilter(previewMode,widgetValue,params){
        constdataset=this._getImg().dataset;
        if(widgetValue){
            dataset.glFilter=widgetValue;
        }else{
            deletedataset.glFilter;
        }
        returnthis._applyOptions();
    },
    /**
     *@seethis.selectClassforparameters
     */
    customFilter(previewMode,widgetValue,params){
        constimg=this._getImg();
        const{filterOptions}=img.dataset;
        const{filterProperty}=params;
        if(filterProperty==='filterColor'){
            widgetValue=normalizeColor(widgetValue);
        }
        constnewOptions=Object.assign(JSON.parse(filterOptions||"{}"),{[filterProperty]:widgetValue});
        img.dataset.filterOptions=JSON.stringify(newOptions);
        returnthis._applyOptions();
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *@override
     */
    _computeVisibility(){
        constsrc=this._getImg().getAttribute('src');
        returnsrc&&src!=='/';
    },
    /**
     *@override
     */
    async_computeWidgetState(methodName,params){
        constimg=this._getImg();

        //MakesureimageisloadedbecauseweneeditsnaturalWidth
        awaitnewPromise((resolve,reject)=>{
            if(img.complete){
                resolve();
                return;
            }
            img.addEventListener('load',resolve,{once:true});
            img.addEventListener('error',resolve,{once:true});
        });

        switch(methodName){
            case'selectWidth':
                returnimg.naturalWidth;
            case'setFilter':
                returnimg.dataset.filter;
            case'glFilter':
                returnimg.dataset.glFilter||"";
            case'setQuality':
                returnimg.dataset.quality||75;
            case'customFilter':{
                const{filterProperty}=params;
                constoptions=JSON.parse(img.dataset.filterOptions||"{}");
                constdefaultValue=filterProperty==='blend'?'normal':0;
                returnoptions[filterProperty]||defaultValue;
            }
        }
        returnthis._super(...arguments);
    },
    /**
     *@override
     */
    async_renderCustomXML(uiFragment){
        constisLocalURL=href=>newURL(href,window.location.origin).origin===window.location.origin;

        constimg=this._getImg();
        if(!this.originalSrc||!['image/png','image/jpeg'].includes(img.dataset.mimetype)){
            return[...uiFragment.childNodes].forEach(node=>{
                if(node.matches('.o_we_external_warning')){
                    node.classList.remove('d-none');
                    if(isLocalURL(img.getAttribute('src'))){
                        consttitle=node.querySelector('we-title');
                        title.textContent=`${_t("Qualityoptionsunavailable")}`;
                        $(title).prepend('<iclass="fafa-warning"/>');
                        if(img.dataset.mimetype){
                            title.setAttribute('title',_t("OnlyPNGandJPEGimagessupportqualityoptionsandimagefiltering"));
                        }else{
                            title.setAttribute('title',_t("Duetotechnicallimitations,youcanonlychangeoptimizationsettingsonthisimagebychoosingitagaininthemedia-dialogorreuploadingit(doubleclickontheimage)"));
                        }
                    }
                }else{
                    node.remove();
                }
            });
        }
        const$select=$(uiFragment).find('we-select[data-name=width_select_opt]');
        (awaitthis._computeAvailableWidths()).forEach(([value,label])=>{
            $select.append(`<we-buttondata-select-width="${value}">${label}</we-button>`);
        });

        if(img.dataset.mimetype!=='image/jpeg'){
            uiFragment.querySelector('we-range[data-set-quality]').remove();
        }
    },
    /**
     *Returnsalistofvalidwidthsforagivenimage.
     *
     *@private
     */
    async_computeAvailableWidths(){
        constimg=this._getImg();
        constoriginal=awaitloadImage(this.originalSrc);
        constmaxWidth=img.dataset.width?img.naturalWidth:original.naturalWidth;
        constoptimizedWidth=Math.min(maxWidth,this._computeMaxDisplayWidth());
        this.optimizedWidth=optimizedWidth;
        constwidths={
            128:'128px',
            256:'256px',
            512:'512px',
            1024:'1024px',
            1920:'1920px',
        };
        widths[img.naturalWidth]=_.str.sprintf(_t("%spx"),img.naturalWidth);
        widths[optimizedWidth]=_.str.sprintf(_t("%dpx(Suggested)"),optimizedWidth);
        widths[maxWidth]=_.str.sprintf(_t("%dpx(Original)"),maxWidth);
        returnObject.entries(widths)
            .filter(([width])=>width<=maxWidth)
            .sort(([v1],[v2])=>v1-v2);
    },
    /**
     *Appliesallselectedoptionsontheoriginalimage.
     *
     *@private
     */
    async_applyOptions(){
        constimg=this._getImg();
        if(!['image/jpeg','image/png'].includes(img.dataset.mimetype)){
            this.originalId=null;
            return;
        }
        constdataURL=awaitapplyModifications(img);
        constweight=dataURL.split(',')[1].length/4*3;
        const$weight=this.$el.find('.o_we_image_weight');
        $weight.find('>small').text(_t("Newsize"));
        $weight.find('b').text(`${(weight/1024).toFixed(1)}kb`);
        $weight.removeClass('d-none');
        img.classList.add('o_modified_image_to_save');
        constloadedImg=awaitloadImage(dataURL,img);
        this._applyImage(loadedImg);
        returnloadedImg;
    },
    /**
     *Loadstheimage'sattachmentinfo.
     *
     *@private
     */
    async_loadImageInfo(){
        constimg=this._getImg();
        awaitloadImageInfo(img,this._rpc.bind(this));
        if(!img.dataset.originalId){
            this.originalId=null;
            this.originalSrc=null;
            return;
        }
        this.originalId=img.dataset.originalId;
        this.originalSrc=img.dataset.originalSrc;
    },
    /**
     *Setstheimage'swidthtoitssuggestedsize.
     *
     *@private
     */
    async_autoOptimizeImage(){
        awaitthis._loadImageInfo();
        awaitthis._rerenderXML();
        this._getImg().dataset.resizeWidth=this.optimizedWidth;
        awaitthis._applyOptions();
        awaitthis.updateUI();
    },
    /**
     *Returnstheimagethatiscurrentlybeingmodified.
     *
     *@private
     *@abstract
     *@returns{HTMLImageElement}theimagetouseformodifications
     */
    _getImg(){},
    /**
     *Computestheimage'smaximumdisplaywidth.
     *
     *@private
     *@abstract
     *@returns{Int}themaximumwidthatwhichtheimagecanbedisplayed
     */
    _computeMaxDisplayWidth(){},
    /**
     *Usetheprocessedimagewhenit'sneededintheDOM.
     *
     *@private
     *@abstract
     *@param{HTMLImageElement}img
     */
    _applyImage(img){},
});

/**
 *Controlsimagewidthandquality.
 */
registry.ImageOptimize=ImageHandlerOption.extend({
    MAX_SUGGESTED_WIDTH:1920,

    /**
     *@override
     */
    start(){
        this.$target.on('image_changed.ImageOptimization',this._onImageChanged.bind(this));
        this.$target.on('image_cropped.ImageOptimization',this._onImageCropped.bind(this));
        returnthis._super(...arguments);
    },
    /**
     *@override
     */
    destroy(){
        this.$target.off('.ImageOptimization');
        returnthis._super(...arguments);
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *@override
     */
    _computeMaxDisplayWidth(){
        constimg=this._getImg();
        constcomputedStyles=window.getComputedStyle(img);
        constdisplayWidth=parseFloat(computedStyles.getPropertyValue('width'));
        constgutterWidth=parseFloat(computedStyles.getPropertyValue('--o-grid-gutter-width'))||30;

        //Forthelogoswedon'twanttosuggestawidthtoosmall.
        if(this.$target[0].closest('nav')){
            returnMath.round(Math.min(displayWidth*3,this.MAX_SUGGESTED_WIDTH));
        //Iftheimageisinacontainer(-small),itmightgetbiggeron
        //smallerscreens.Sowesuggestthewidthofthecurrentimageunless
        //itissmallerthanthesizeofthecontaineronthemdbreapoint
        //(whichiswhereourbootstrapcolumnsfallbacktofullcontainer
        //widthsinceweonlyusecol-lg-*inFlectra).
        }elseif(img.closest('.container,.o_container_small')){
            constmdContainerMaxWidth=parseFloat(computedStyles.getPropertyValue('--o-md-container-max-width'))||720;
            constmdContainerInnerWidth=mdContainerMaxWidth-gutterWidth;
            returnMath.round(utils.confine(displayWidth,mdContainerInnerWidth,this.MAX_SUGGESTED_WIDTH));
        //Iftheimageisdisplayedinacontainer-fluid,itmightalsoget
        //biggeronsmallerscreens.Thesameway,wesuggestthewidthofthe
        //currentimageunlessitissmallerthanthemaxsizeofthecontainer
        //onthemdbreakpoint(whichistheLGbreakpointsincethecontainer
        //fluidisfull-width).
        }elseif(img.closest('.container-fluid')){
            constlgBp=parseFloat(computedStyles.getPropertyValue('--breakpoint-lg'))||992;
            constmdContainerFluidMaxInnerWidth=lgBp-gutterWidth;
            returnMath.round(utils.confine(displayWidth,mdContainerFluidMaxInnerWidth,this.MAX_SUGGESTED_WIDTH));
        }
        //Ifit'snotinacontainer,it'sprobablynotgoingtochangesize
        //dependingonbreakpoints.Westillkeepamarginsafety.
        returnMath.round(Math.min(displayWidth*1.5,this.MAX_SUGGESTED_WIDTH));
    },
    /**
     *@override
     */
    _getImg(){
        returnthis.$target[0];
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *Reloadsimagedataandauto-optimizesthenewimage.
     *
     *@private
     *@param{Event}ev
     */
    async_onImageChanged(ev){
        this.trigger_up('snippet_edition_request',{exec:async()=>{
            awaitthis._autoOptimizeImage();
            this.trigger_up('cover_update');
        }});
    },
    /**
     *Availablewidthswillchange,needtorerenderthewidthselect.
     *
     *@private
     *@param{Event}ev
     */
    async_onImageCropped(ev){
        awaitthis._rerenderXML();
    },
});

/**
 *Controlsbackgroundimagewidthandquality.
 */
registry.BackgroundOptimize=ImageHandlerOption.extend({
    /**
     *@override
     */
    start(){
        this.$target.on('background_changed.BackgroundOptimize',this._onBackgroundChanged.bind(this));
        returnthis._super(...arguments);
    },
    /**
     *@override
     */
    destroy(){
        this.$target.off('.BackgroundOptimize');
        returnthis._super(...arguments);
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *@override
     */
    _getImg(){
        returnthis.img;
    },
    /**
     *@override
     */
    _computeMaxDisplayWidth(){
        return1920;
    },
    /**
     *Initializesthis.imgtoanimagewiththebackgroundimageurlassrc.
     *
     *@override
     */
    async_loadImageInfo(){
        this.img=newImage();
        //Inthecaseofaparallax,thebackgroundofthesnippetisactually
        //setonachild<span>andshouldbefocusedhere.Thisisnecessary
        //because,atthispoint,the$targethasnotyetbeenupdatedinthe
        //notify()method("option_update"event),althoughtheeventis
        //properlyfiredfromtheparallax.
        consttargetEl=this.$target[0].classList.contains("oe_img_bg")
            ?this.$target[0]:this.$target[0].querySelector(":scope>.s_parallax_bg.oe_img_bg");
        if(targetEl){
            Object.entries(targetEl.dataset).filter(([key])=>
                isBackgroundImageAttribute(key)).forEach(([key,value])=>{
                this.img.dataset[key]=value;
            });
            constsrc=getBgImageURL(targetEl);
            //Don'tsetthesrcifnotrelative(ie,notlocalimage:cannotbe
            //modified)
            this.img.src=src.startsWith("/")?src:"";
        }
        returnawaitthis._super(...arguments);
    },
    /**
     *@override
     */
    _applyImage(img){
        this.$target.css('background-image',`url('${img.getAttribute('src')}')`);
        //ApplymodificationontheDOMHTMLelementthatiscurrentlybeing
        //modified.
        this.$target[0].classList.add("o_modified_image_to_save");
        //Firstdeletethedataattributesrelativetotheimagebackground
        //fromthetargetasadataattributecouldhavebeenberemoved(ex:
        //glFilter).
        for(constattributeinthis.$target[0].dataset){
            if(isBackgroundImageAttribute(attribute)){
                deletethis.$target[0].dataset[attribute];
            }
        }
        Object.entries(img.dataset).forEach(([key,value])=>{
            this.$target[0].dataset[key]=value;
        });
        this.$target[0].dataset.bgSrc=img.getAttribute("src");
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *Reloadsimagedatawhenthebackgroundischanged.
     *
     *@private
     */
    async_onBackgroundChanged(ev,previewMode){
        ev.stopPropagation();
        if(!previewMode){
            this.trigger_up('snippet_edition_request',{exec:async()=>{
                awaitthis._autoOptimizeImage();
            }});
        }
    },
});

registry.BackgroundToggler=SnippetOptionWidget.extend({
    /**
     *@override
     */
    start(){
        this.$target.on('content_changed.BackgroundToggler',this._onExternalUpdate.bind(this));
        returnthis._super(...arguments);
    },
    /**
     *@override
     */
    destroy(){
        this._super(...arguments);
        this.$target.off('.BackgroundToggler');
    },

    //--------------------------------------------------------------------------
    //Options
    //--------------------------------------------------------------------------

    /**
     *Togglesbackgroundimageonoroff.
     *
     *@seethis.selectClassforparameters
     */
    toggleBgImage(previewMode,widgetValue,params){
        if(!widgetValue){
            //TODO:usesetWidgetValueinsteadofcallingbackgrounddirectlywhenpossible
            const[bgImageWidget]=this._requestUserValueWidgets('bg_image_opt');
            constbgImageOpt=bgImageWidget.getParent();
            returnbgImageOpt.background(false,'',bgImageWidget.getMethodsParams('background'));
        }else{
            //TODO:usetriggerinsteadofel.clickwhenpossible
            this._requestUserValueWidgets('bg_image_opt')[0].el.click();
        }
    },
    /**
     *Togglesbackgroundshapeonoroff.
     *
     *@seethis.selectClassforparameters
     */
    toggleBgShape(previewMode,widgetValue,params){
        const[shapeWidget]=this._requestUserValueWidgets('bg_shape_opt');
        constshapeOption=shapeWidget.getParent();
        //TODO:openselectaftershapewasselected?
        //TODO:usesetWidgetValueinsteadofcallingshapeOptionmethoddirectlywhenpossible
        returnshapeOption._toggleShape();
    },
    /**
     *Togglesbackgroundfilteronoroff.
     *
     *@seethis.selectClassforparameters
     */
    toggleBgFilter(previewMode,widgetValue,params){
        if(widgetValue){
            constbgFilterEl=document.createElement('div');
            bgFilterEl.classList.add('o_we_bg_filter','bg-black-50');
            constlastBackgroundEl=this._getLastPreFilterLayerElement();
            if(lastBackgroundEl){
                $(lastBackgroundEl).after(bgFilterEl);
            }else{
                this.$target.prepend(bgFilterEl);
            }
        }else{
            this.$target.find('>.o_we_bg_filter').remove();
        }
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *@override
     */
    _computeWidgetState(methodName,params){
        switch(methodName){
            case'toggleBgImage':{
                const[bgImageWidget]=this._requestUserValueWidgets('bg_image_opt');
                constbgImageOpt=bgImageWidget.getParent();
                return!!bgImageOpt._computeWidgetState('background',bgImageWidget.getMethodsParams('background'));
            }
            case'toggleBgFilter':{
                returnthis._hasBgFilter();
            }
            case'toggleBgShape':{
                const[shapeWidget]=this._requestUserValueWidgets('bg_shape_opt');
                constshapeOption=shapeWidget.getParent();
                return!!shapeOption._computeWidgetState('shape',shapeWidget.getMethodsParams('shape'));
            }
        }
        returnthis._super(...arguments);
    },
    /**
     *@private
     */
    _getLastPreFilterLayerElement(){
        returnnull;
    },
    /**
     *@private
     *@returns{Boolean}
     */
    _hasBgFilter(){
        return!!this.$target.find('>.o_we_bg_filter').length;
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *@private
     */
    _onExternalUpdate(){
        if(this._hasBgFilter()
                &&!this._getLastPreFilterLayerElement()
                &&!getBgImageURL(this.$target)){
            //No'pre-filter'backgroundlayoutanymoreandnomorebackground
            //image:removethebackgroundfilteroption.
            //TODOthereprobablyisabettersystemtoimplementtodothat
            constwidget=this._requestUserValueWidgets('bg_filter_toggle_opt')[0];
            widget.enable();
        }
    },
});

/**
 *Handlestheeditionofsnippet'sbackgroundimage.
 */
registry.BackgroundImage=SnippetOptionWidget.extend({
    /**
     *@override
     */
    start:function(){
        this.__customImageSrc=getBgImageURL(this.$target[0]);
        returnthis._super(...arguments);
    },

    //--------------------------------------------------------------------------
    //Options
    //--------------------------------------------------------------------------

    /**
     *Handlesabackgroundchange.
     *
     *@seethis.selectClassforparameters
     */
    background:asyncfunction(previewMode,widgetValue,params){
        if(previewMode===true){
            this.__customImageSrc=getBgImageURL(this.$target[0]);
        }elseif(previewMode==='reset'){
            widgetValue=this.__customImageSrc;
        }else{
            this.__customImageSrc=widgetValue;
        }

        this._setBackground(widgetValue);

        if(previewMode!=='reset'){
            removeOnImageChangeAttrs.forEach(attr=>deletethis.$target[0].dataset[attr]);
            this.$target.trigger('background_changed',[previewMode]);
        }
    },
    /**
     *ChangesthemaincolorofdynamicSVGs.
     *
     *@seethis.selectClassforparameters
     */
    asyncdynamicColor(previewMode,widgetValue,params){
        constcurrentSrc=getBgImageURL(this.$target[0]);
        switch(previewMode){
            casetrue:
                this.previousSrc=currentSrc;
                break;
            case'reset':
                this.$target.css('background-image',`url('${this.previousSrc}')`);
                return;
        }
        constnewURL=newURL(currentSrc,window.location.origin);
        newURL.searchParams.set('c1',normalizeColor(widgetValue));
        constsrc=newURL.pathname+newURL.search;
        awaitloadImage(src);
        this.$target.css('background-image',`url('${src}')`);
        if(!previewMode){
            this.previousSrc=src;
        }
    },

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *@override
     */
    setTarget:function(){
        //Whenwechangethetargetofthisoptionweneedtotransferthe
        //background-imageandthedatasetinformationrelativetothisimage
        //fromtheoldtargettothenewone.
        constoldBgURL=getBgImageURL(this.$target);
        constisModifiedImage=this.$target[0].classList.contains("o_modified_image_to_save");
        constfilteredOldDataset=Object.entries(this.$target[0].dataset).filter(([key])=>{
            returnisBackgroundImageAttribute(key);
        });
        //Deletethedatasetinformationrelativetothebackground-imageof
        //theoldtarget.
        filteredOldDataset.forEach(([key])=>{
            deletethis.$target[0].dataset[key];
        });
        //Itisimportanttodelete".o_modified_image_to_save"fromtheold
        //targetasitsimagesourcewillbedeleted.
        this.$target[0].classList.remove("o_modified_image_to_save");
        this._setBackground('');
        this._super(...arguments);
        if(oldBgURL){
            this._setBackground(oldBgURL);
            filteredOldDataset.forEach(([key,value])=>{
                this.$target[0].dataset[key]=value;
            });
            this.$target[0].classList.toggle("o_modified_image_to_save",isModifiedImage);
        }

        //TODOshouldbeautomaticforalloptionsasequaltothestartmethod
        this.__customImageSrc=getBgImageURL(this.$target[0]);
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *@override
     */
    _computeWidgetState:function(methodName){
        switch(methodName){
            case'background':
                returngetBgImageURL(this.$target[0]);
            case'dynamicColor':
                returnnewURL(getBgImageURL(this.$target[0]),window.location.origin).searchParams.get('c1');
        }
        returnthis._super(...arguments);
    },
    /**
     *@override
     */
    _computeWidgetVisibility(widgetName,params){
        if(widgetName==='dynamic_color_opt'){
            constsrc=newURL(getBgImageURL(this.$target[0]),window.location.origin);
            returnsrc.origin===window.location.origin&&src.pathname.startsWith('/web_editor/shape/');
        }
        returnthis._super(...arguments);
    },
    /**
     *@private
     *@param{string}backgroundURL
     */
    _setBackground(backgroundURL){
        if(backgroundURL){
            this.$target.css('background-image',`url('${backgroundURL}')`);
            this.$target.addClass('oe_img_bg');
        }else{
            this.$target.css('background-image','');
            this.$target.removeClass('oe_img_bg');
        }
    },
});

/**
 *Handlesbackgroundshapes.
 */
registry.BackgroundShape=SnippetOptionWidget.extend({
    /**
     *@override
     */
    updateUI(){
        if(this.rerender){
            this.rerender=false;
            returnthis._rerenderXML();
        }
        returnthis._super.apply(this,arguments);
    },
    /**
     *@override
     */
    onBuilt(){
        //Flipclassesshouldnolongerbeusedbutarestillpresentinsome
        //themesnippets.
        if(this.$target[0].querySelector('.o_we_flip_x,.o_we_flip_y')){
            this._handlePreviewState(false,()=>{
                return{flip:this._getShapeData().flip};
            });
        }
    },

    //--------------------------------------------------------------------------
    //Options
    //--------------------------------------------------------------------------

    /**
     *Setsthecurrentbackgroundshape.
     *
     *@seethis.selectClassforparams
     */
    shape(previewMode,widgetValue,params){
        this._handlePreviewState(previewMode,()=>{
            return{shape:widgetValue,colors:this._getDefaultColors(),flip:[]};
        });
    },
    /**
     *Setsthecurrentbackgroundshape'scolors.
     *
     *@seethis.selectClassforparams
     */
    color(previewMode,widgetValue,params){
        this._handlePreviewState(previewMode,()=>{
            const{colorName}=params;
            const{colors:previousColors}=this._getShapeData();
            constnewColor=normalizeColor(widgetValue)||this._getDefaultColors()[colorName];
            constnewColors=Object.assign(previousColors,{[colorName]:newColor});
            return{colors:newColors};
        });
    },
    /**
     *Flipstheshapeonitsxaxis.
     *
     *@seethis.selectClassforparams
     */
    flipX(previewMode,widgetValue,params){
        this._flipShape(previewMode,'x');
    },
    /**
     *Flipstheshapeonitsyaxis.
     *
     *@seethis.selectClassforparams
     */
    flipY(previewMode,widgetValue,params){
        this._flipShape(previewMode,'y');
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *@override
     */
    _computeWidgetState(methodName,params){
        switch(methodName){
            case'shape':{
                returnthis._getShapeData().shape;
            }
            case'color':{
                const{shape,colors:customColors}=this._getShapeData();
                constcolors=Object.assign(this._getDefaultColors(),customColors);
                constcolor=shape&&colors[params.colorName];
                returncolor||'';
            }
            case'flipX':{
                //Compat:flipclassesarenolongerusedbutmaybepresentinclientdb
                consthasFlipClass=this.$target.find('>.o_we_shape.o_we_flip_x').length!==0;
                returnhasFlipClass||this._getShapeData().flip.includes('x');
            }
            case'flipY':{
                //Compat:flipclassesarenolongerusedbutmaybepresentinclientdb
                consthasFlipClass=this.$target.find('>.o_we_shape.o_we_flip_y').length!==0;
                returnhasFlipClass||this._getShapeData().flip.includes('y');
            }
        }
        returnthis._super(...arguments);
    },
    /**
     *@override
     */
    _renderCustomXML(uiFragment){
        Object.keys(this._getDefaultColors()).map(colorName=>{
            uiFragment.querySelector('[data-name="colors"]')
                .prepend($(`<we-colorpickerdata-color="true"data-color-name="${colorName}">`)[0]);
        });

        uiFragment.querySelectorAll('we-select-pagerwe-button[data-shape]').forEach(btn=>{
            constbtnContent=document.createElement('div');
            btnContent.classList.add('o_we_shape_btn_content','position-relative','border-dark');
            constbtnContentInnerDiv=document.createElement('div');
            btnContentInnerDiv.classList.add('o_we_shape');
            btnContent.appendChild(btnContentInnerDiv);

            const{shape}=btn.dataset;
            constshapeEl=btnContent.querySelector('.o_we_shape');
            shapeEl.classList.add(`o_${shape.replace(/\//g,'_')}`);
            btn.append(btnContent);
        });
        returnuiFragment;
    },
    /**
     *@override
     */
    async_computeWidgetVisibility(widgetName,params){
        if(widgetName==='shape_none_opt'){
            returnfalse;
        }
        returnthis._super(...arguments);
    },
    /**
     *Flipstheshapeonitsx/yaxis.
     *
     *@param{boolean}previewMode
     *@param{'x'|'y'}axistheaxisoftheshapethatshouldbeflipped.
     */
    _flipShape(previewMode,axis){
        this._handlePreviewState(previewMode,()=>{
            constflip=newSet(this._getShapeData().flip);
            if(flip.has(axis)){
                flip.delete(axis);
            }else{
                flip.add(axis);
            }
            return{flip:[...flip]};
        });
    },
    /**
     *Handleseverythingrelatedtosavingstatebeforepreviewandrestoring
     *itafteraprevieworlockinginthechangeswhennotinpreview.
     *
     *@param{boolean}previewMode
     *@param{function}computeShapeDatafunctiontocomputethenewshapedata.
     */
    _handlePreviewState(previewMode,computeShapeData){
        consttarget=this.$target[0];
        constinsertShapeContainer=newContainer=>{
            constshapeContainer=target.querySelector(':scope>.o_we_shape');
            if(shapeContainer){
                this._removeShapeEl(shapeContainer);
            }
            if(newContainer){
                constpreShapeLayerElement=this._getLastPreShapeLayerElement();
                if(preShapeLayerElement){
                    $(preShapeLayerElement).after(newContainer);
                }else{
                    this.$target.prepend(newContainer);
                }
            }
            returnnewContainer;
        };

        letchangedShape=false;
        if(previewMode==='reset'){
            insertShapeContainer(this.prevShapeContainer);
            if(this.prevShape){
                target.dataset.oeShapeData=this.prevShape;
            }else{
                deletetarget.dataset.oeShapeData;
            }
            return;
        }else{
            if(previewMode===true){
                constshapeContainer=target.querySelector(':scope>.o_we_shape');
                this.prevShapeContainer=shapeContainer&&shapeContainer.cloneNode(true);
                this.prevShape=target.dataset.oeShapeData;
            }
            constcurShapeData=target.dataset.oeShapeData||{};
            constnewShapeData=computeShapeData();
            const{shape:curShape}=curShapeData;
            changedShape=newShapeData.shape!==curShape;
            this._markShape(newShapeData);
            if(previewMode===false&&changedShape){
                //Needtorerenderforcorrectnumberofcolorpickers
                this.rerender=true;
            }
        }

        //Updates/removestheshapecontainerasneededandgivesitthe
        //correctbackgroundshape
        constjson=target.dataset.oeShapeData;
        const{shape,colors,flip=[]}=json?JSON.parse(json):{};
        letshapeContainer=target.querySelector(':scope>.o_we_shape');
        if(!shape){
            returninsertShapeContainer(null);
        }
        //Whenchangingshapewewanttoresettheshapecontainer(fortransparencycolor)
        if(changedShape){
            shapeContainer=insertShapeContainer(null);
        }
        if(!shapeContainer){
            shapeContainer=insertShapeContainer(document.createElement('div'));
            target.style.position='relative';
            shapeContainer.className=`o_we_shapeo_${shape.replace(/\//g,'_')}`;
        }
        //Compat:removeoldflipclassesasflippingisnowdoneinsidethesvg
        shapeContainer.classList.remove('o_we_flip_x','o_we_flip_y');

        if(colors||flip.length){
            //Customcolors/flip,overwriteshapethatissetbytheclass
            $(shapeContainer).css('background-image',`url("${this._getShapeSrc()}")`);
            shapeContainer.style.backgroundPosition='';
            if(flip.length){
                let[xPos,yPos]=$(shapeContainer)
                    .css('background-position')
                    .split('')
                    .map(p=>parseFloat(p));
                //-X+2*YisasymmetryofXaroundY,thisisasymmetryaround50%
                xPos=flip.includes('x')?-xPos+100:xPos;
                yPos=flip.includes('y')?-yPos+100:yPos;
                shapeContainer.style.backgroundPosition=`${xPos}%${yPos}%`;
            }
        }else{
            //Removecustombgimageandlettheshapeclasssetthebgshape
            $(shapeContainer).css('background-image','');
            $(shapeContainer).css('background-position','');
        }
        if(previewMode===false){
            this.prevShapeContainer=shapeContainer.cloneNode(true);
            this.prevShape=target.dataset.oeShapeData;
        }
    },
    /**
     *@private
     *@param{HTMLElement}shapeEl
     */
    _removeShapeEl(shapeEl){
        shapeEl.remove();
    },
    /**
     *Overwritesshapepropertieswiththespecifieddata.
     *
     *@private
     *@param{Object}newDataanobjectwiththenewdata
     */
    _markShape(newData){
        constdefaultColors=this._getDefaultColors();
        constshapeData=Object.assign(this._getShapeData(),newData);
        constareColorsDefault=Object.entries(shapeData.colors).every(([colorName,colorValue])=>{
            returncolorValue.toLowerCase()===defaultColors[colorName].toLowerCase();
        });
        if(areColorsDefault){
            deleteshapeData.colors;
        }
        if(!shapeData.shape){
            deletethis.$target[0].dataset.oeShapeData;
        }else{
            this.$target[0].dataset.oeShapeData=JSON.stringify(shapeData);
        }
    },
    /**
     *@private
     */
    _getLastPreShapeLayerElement(){
        const$filterEl=this.$target.find('>.o_we_bg_filter');
        if($filterEl.length){
            return$filterEl[0];
        }
        returnnull;
    },
    /**
     *Returnsthesrcoftheshapecorrespondingtothecurrentparameters.
     *
     *@private
     */
    _getShapeSrc(){
        const{shape,colors,flip}=this._getShapeData();
        if(!shape){
            return'';
        }
        constsearchParams=Object.entries(colors)
            .map(([colorName,colorValue])=>{
                constencodedCol=encodeURIComponent(normalizeColor(colorValue));
                return`${colorName}=${encodedCol}`;
            });
        if(flip.length){
            searchParams.push(`flip=${flip.sort().join('')}`);
        }
        return`/web_editor/shape/${shape}.svg?${searchParams.join('&')}`;
    },
    /**
     *Retrievescurrentshapedatafromthetarget'sdataset.
     *
     *@private
     *@param{HTMLElement}[target=this.$target[0]]thetargetonwhichtoread
     *  theshapedata.
     */
    _getShapeData(target=this.$target[0]){
        constdefaultData={
            shape:'',
            colors:this._getDefaultColors(),
            flip:[],
        };
        constjson=target.dataset.oeShapeData;
        returnjson?Object.assign(defaultData,JSON.parse(json.replace(/'/g,'"'))):defaultData;
    },
    /**
     *Returnsthedefaultcolorsforthecurrentlyselectedshape.
     *
     *@private
     */
    _getDefaultColors(){
        const$shapeContainer=this.$target.find('>.o_we_shape')
            .clone()
            .addClass('d-none')
            //Needstobeindocumentforbg-imageclasstotakeeffect
            .appendTo(document.body);
        constshapeContainer=$shapeContainer[0];
        $shapeContainer.css('background-image','');
        constshapeSrc=shapeContainer&&getBgImageURL(shapeContainer);
        $shapeContainer.remove();
        if(!shapeSrc){
            return{};
        }
        consturl=newURL(shapeSrc,window.location.origin);
        returnObject.fromEntries(url.searchParams.entries());
    },
    /**
     *Toggleswhetherthereisashapeornot,tobecalledfrombgtoggler.
     *
     *@private
     */
    _toggleShape(){
        if(this._getShapeData().shape){
            returnthis._handlePreviewState(false,()=>({shape:''}));
        }else{
            consttarget=this.$target[0];
            constpreviousSibling=target.previousElementSibling;
            const[shapeWidget]=this._requestUserValueWidgets('bg_shape_opt');
            constpossibleShapes=shapeWidget.getMethodsParams('shape').possibleValues;
            letshapeToSelect;
            if(previousSibling){
                constpreviousShape=this._getShapeData(previousSibling).shape;
                shapeToSelect=possibleShapes.find((shape,i)=>{
                    returnpossibleShapes[i-1]===previousShape;
                });
            }
            //Ifthereisnoprevioussibling,iftheprevioussiblinghadthe
            //lastshapeselectedorifthepreviousshapecouldnotbefound
            //inthepossibleshapes,defaulttothefirstshape.([0]beingno
            //shapesselected.)
            if(!shapeToSelect){
                shapeToSelect=possibleShapes[1];
            }
            returnthis._handlePreviewState(false,()=>({shape:shapeToSelect}));
        }
    },
});

/**
 *Handlestheeditionofsnippets'backgroundimageposition.
 */
registry.BackgroundPosition=SnippetOptionWidget.extend({
    xmlDependencies:['/web_editor/static/src/xml/editor.xml'],

    /**
     *@override
     */
    start:function(){
        this._super.apply(this,arguments);

        this._initOverlay();

        //Resizeoverlaycontentonwindowresizebecausebackgroundimages
        //changesize,andoncarouselslidebecausetheysometimestakeup
        //morespaceandmoveelementsaroundthem.
        $(window).on('resize.bgposition',()=>this._dimensionOverlay());
    },
    /**
     *@override
     */
    destroy:function(){
        this._toggleBgOverlay(false);
        $(window).off('.bgposition');
        this._super.apply(this,arguments);
    },

    //--------------------------------------------------------------------------
    //Options
    //--------------------------------------------------------------------------

    /**
     *Setsthebackgroundtype(cover/repeatpattern).
     *
     *@seethis.selectClassforparams
     */
    backgroundType:function(previewMode,widgetValue,params){
        this.$target.toggleClass('o_bg_img_opt_repeat',widgetValue==='repeat-pattern');
        this.$target.css('background-position','');
        this.$target.css('background-size','');
    },
    /**
     *Savescurrentbackgroundpositionandenablesoverlay.
     *
     *@seethis.selectClassforparams
     */
    backgroundPositionOverlay:asyncfunction(previewMode,widgetValue,params){
        //Updatestheinternalimage
        awaitnewPromise(resolve=>{
            this.img=document.createElement('img');
            this.img.addEventListener('load',()=>resolve());
            this.img.src=getBgImageURL(this.$target[0]);
        });

        constposition=this.$target.css('background-position').split('').map(v=>parseInt(v));
        constdelta=this._getBackgroundDelta();
        //originalPositionkeptin%forwhenmovementinonedirectiondoesn'tmakesense
        this.originalPosition={
            left:position[0],
            top:position[1],
        };
        //Convert%valuestopixelsforcurrentpositionbecausemousemovementisinpixels
        this.currentPosition={
            left:position[0]/100*delta.x||0,
            top:position[1]/100*delta.y||0,
        };
        //Makesuretheelementisinavisiblearea.
        constrect=this.$target[0].getBoundingClientRect();
        constviewportTop=$(window).scrollTop();
        constviewportBottom=viewportTop+$(window).height();
        constvisibleHeight=rect.top<viewportTop
            ?Math.max(0,Math.min(viewportBottom,rect.bottom)-viewportTop)//Startsabove
            :rect.top<viewportBottom
                ?Math.min(viewportBottom,rect.bottom)-rect.top//Startsinside
                :0;//Startsafter
        if(visibleHeight<200){
            awaitscrollTo(this.$target[0],{extraOffset:50});
        }
        this._toggleBgOverlay(true);
    },
    /**
     *@override
     */
    selectStyle:function(previewMode,widgetValue,params){
        if(params.cssProperty==='background-size'
                &&!this.$target.hasClass('o_bg_img_opt_repeat')){
            //Disabletheoptionwhentheimageisincovermode,otherwise
            //thebackground-size:autostylemaybeforced.
            return;
        }
        this._super(...arguments);
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *@override
     */
    _computeVisibility:function(){
        returnthis._super(...arguments)&&!!getBgImageURL(this.$target[0]);
    },
    /**
     *@override
     */
    _computeWidgetState:function(methodName,params){
        if(methodName==='backgroundType'){
            returnthis.$target.css('background-repeat')==='repeat'?'repeat-pattern':'cover';
        }
        returnthis._super(...arguments);
    },
    /**
     *Initializestheoverlay,bindseventstothebuttons,insertsitin
     *theDOM.
     *
     *@private
     */
    _initOverlay:function(){
        this.$backgroundOverlay=$(qweb.render('web_editor.background_position_overlay'));
        this.$overlayContent=this.$backgroundOverlay.find('.o_we_overlay_content');
        this.$overlayBackground=this.$overlayContent.find('.o_overlay_background');

        this.$backgroundOverlay.on('click','.o_btn_apply',()=>{
            this.$target.css('background-position',this.$bgDragger.css('background-position'));
            this._toggleBgOverlay(false);
        });
        this.$backgroundOverlay.on('click','.o_btn_discard',()=>{
            this._toggleBgOverlay(false);
        });

        this.$backgroundOverlay.insertAfter(this.$overlay);
    },
    /**
     *Setstheoverlayintherightplacesothatthedraggablebackground
     *rendersoverthetarget,andsizethebackgrounditemlikethetarget.
     *
     *@private
     */
    _dimensionOverlay:function(){
        if(!this.$backgroundOverlay.is('.oe_active')){
            return;
        }
        //TODO:change#wrapwrapafterweb_editorrework.
        const$wrapwrap=$('#wrapwrap');
        consttargetOffset=this.$target.offset();

        this.$backgroundOverlay.css({
            width:$wrapwrap.innerWidth(),
            height:$wrapwrap.innerHeight(),
        });

        this.$overlayContent.offset(targetOffset);

        this.$bgDragger.css({
            width:`${this.$target.innerWidth()}px`,
            height:`${this.$target.innerHeight()}px`,
        });

        consttopPos=Math.max(0,$(window).scrollTop()-this.$target.offset().top);
        this.$overlayContent.find('.o_we_overlay_buttons').css('top',`${topPos}px`);
    },
    /**
     *Togglestheoverlay'sdisplayandrendersabackgroundcloneinsideofit.
     *
     *@private
     *@param{boolean}activatetoggletheoverlayon(true)oroff(false)
     */
    _toggleBgOverlay:function(activate){
        if(!this.$backgroundOverlay||this.$backgroundOverlay.is('.oe_active')===activate){
            return;
        }

        if(!activate){
            this.$backgroundOverlay.removeClass('oe_active');
            this.trigger_up('unblock_preview_overlays');
            this.trigger_up('activate_snippet',{$snippet:this.$target});

            $(document).off('click.bgposition');
            return;
        }

        this.trigger_up('hide_overlay');
        this.trigger_up('activate_snippet',{
            $snippet:this.$target,
            previewMode:true,
        });
        this.trigger_up('block_preview_overlays');

        //Createemptycloneof$targetwithsamedisplaysize,makeitdraggableandgiveitatooltip.
        this.$bgDragger=this.$target.clone().empty();
        //Preventclonefrombeingseenaseditoriftargetiseditor(eg.backgroundonroottag)
        this.$bgDragger.removeClass('o_editable');
        //SomeCSSchildselectorruleswillnotbeappliedsincetheclonehasadifferentcontainerfrom$target.
        //Thebackground-attachmentpropertyshouldbethesameinboth$target&$bgDragger,thiswillkeepthe
        //previewmore"wysiwyg"insteadofgettingdifferentresultwhenbgpositionsaved(e.g.parallaxsnippet)
        //TODO:improvethistocopyallstylefrom$targetandoverrideitwithoverlayrelatedstyle(copyingall
        //cssinto$bgDraggerwillnotworksinceitwillchangeoverlaycontentstyletoo).
        this.$bgDragger.css('background-attachment',this.$target.css('background-attachment'));
        this.$bgDragger.on('mousedown',this._onDragBackgroundStart.bind(this));
        this.$bgDragger.tooltip({
            title:'Clickanddragthebackgroundtoadjustitsposition!',
            trigger:'manual',
            container:this.$backgroundOverlay
        });

        //ReplacecontentofoverlayBackground,activatetheoverlayandgiveittherightdimensions.
        this.$overlayBackground.empty().append(this.$bgDragger);
        this.$backgroundOverlay.addClass('oe_active');
        this._dimensionOverlay();
        this.$bgDragger.tooltip('show');

        //Needstobedeferredortheclickeventthatactivatedtheoverlaydeactivatesitaswell.
        //Thisiscausedbytheclickeventwhichwearecurrentlyhandlingbubblinguptothedocument.
        window.setTimeout(()=>$(document).on('click.bgposition',this._onDocumentClicked.bind(this)),0);
    },
    /**
     *Returnsthedifferencebetweenthetarget'ssizeandthebackground's
     *renderedsize.Backgroundpositionvaluesin%areapercentageofthis.
     *
     *@private
     */
    _getBackgroundDelta:function(){
        constbgSize=this.$target.css('background-size');
        if(bgSize!=='cover'){
            let[width,height]=bgSize.split('');
            if(width==='auto'&&(height==='auto'||!height)){
                return{
                    x:this.$target.outerWidth()-this.img.naturalWidth,
                    y:this.$target.outerHeight()-this.img.naturalHeight,
                };
            }
            //Atleastoneofwidthorheightisnotauto,sowecanuseittocalculatetheotherifit'snotset
            [width,height]=[parseInt(width),parseInt(height)];
            return{
                x:this.$target.outerWidth()-(width||(height*this.img.naturalWidth/this.img.naturalHeight)),
                y:this.$target.outerHeight()-(height||(width*this.img.naturalHeight/this.img.naturalWidth)),
            };
        }

        constrenderRatio=Math.max(
            this.$target.outerWidth()/this.img.naturalWidth,
            this.$target.outerHeight()/this.img.naturalHeight
        );

        return{
            x:this.$target.outerWidth()-Math.round(renderRatio*this.img.naturalWidth),
            y:this.$target.outerHeight()-Math.round(renderRatio*this.img.naturalHeight),
        };
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *Dragstheoverlay'sbackgroundimage,copiedtotargeton"Apply".
     *
     *@private
     */
    _onDragBackgroundStart:function(ev){
        ev.preventDefault();
        this.$bgDragger.addClass('o_we_grabbing');
        const$document=$(this.ownerDocument);
        $document.on('mousemove.bgposition',this._onDragBackgroundMove.bind(this));
        $document.one('mouseup',()=>{
            this.$bgDragger.removeClass('o_we_grabbing');
            $document.off('mousemove.bgposition');
        });
    },
    /**
     *Dragstheoverlay'sbackgroundimage,copiedtotargeton"Apply".
     *
     *@private
     */
    _onDragBackgroundMove:function(ev){
        ev.preventDefault();

        constdelta=this._getBackgroundDelta();
        this.currentPosition.left=clamp(this.currentPosition.left+ev.originalEvent.movementX,[0,delta.x]);
        this.currentPosition.top=clamp(this.currentPosition.top+ev.originalEvent.movementY,[0,delta.y]);

        constpercentPosition={
            left:this.currentPosition.left/delta.x*100,
            top:this.currentPosition.top/delta.y*100,
        };
        //Incovermode,onedeltawillbe0anddividingbyitwillyieldInfinity.
        //DefaultingtooriginalPositioninthatcase(can'tbedragged)
        percentPosition.left=isFinite(percentPosition.left)?percentPosition.left:this.originalPosition.left;
        percentPosition.top=isFinite(percentPosition.top)?percentPosition.top:this.originalPosition.top;

        this.$bgDragger.css('background-position',`${percentPosition.left}%${percentPosition.top}%`);

        functionclamp(val,bounds){
            //Wesorttheboundsbecausewhenonedimensionoftherenderedbackgroundis
            //largerthanthecontainer,deltaisnegative,andwewanttouseitaslowerbound
            bounds=bounds.sort();
            returnMath.max(bounds[0],Math.min(val,bounds[1]));
        }
    },
    /**
     *Deactivatestheoverlayiftheuserclicksoutsideofit.
     *
     *@private
     */
    _onDocumentClicked:function(ev){
        if(!$(ev.target).closest('.o_we_background_position_overlay').length){
            this._toggleBgOverlay(false);
        }
    },
});

/**
 *Markscolorlevelsofanyelementthatmaygetorhasacolorclasses.This
 *isdoneforthespecificmaincolorpickeroptionsothatthosearemarkedon
 *snippetdrop(sothatbasesnippetdefinitiondonotneedtocareaboutthat)
 *andonfirstfocus(forcompatibility).
 */
registry.ColoredLevelBackground=registry.BackgroundToggler.extend({
    /**
     *@override
     */
    start:function(){
        this._markColorLevel();
        returnthis._super(...arguments);
    },
    /**
     *@override
     */
    onBuilt:function(){
        this._markColorLevel();
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *Addsaspecificclassindicatingtheelementiscoloredsothatnested
     *colorclasseswork(wesupportone-level).Removingitisnotuseful,
     *technicallytheclasscanbeaddedonanythingthat*may*receiveacolor
     *class:thisdoesnotcomewithanyCSSrule.
     *
     *@private
     */
    _markColorLevel:function(){
        this.$target.addClass('o_colored_level');
    },
});

/**
 *Allowstoreplaceatextvaluewiththenameofadatabaserecord.
 *@todoreplacethismechanismwithrealbackendm2ofield?
 */
registry.many2one=SnippetOptionWidget.extend({
    xmlDependencies:['/web_editor/static/src/xml/snippets.xml'],
    /**
     *@override
     */
    start:function(){
        varself=this;
        this.trigger_up('getRecordInfo',_.extend(this.options,{
            callback:function(recordInfo){
                _.defaults(self.options,recordInfo);
            },
        }));

        this.Model=this.$target.data('oe-many2one-model');
        this.ID=+this.$target.data('oe-many2one-id');

        //createsearchbuttonandbindsearchbar
        this.$btn=$(qweb.render('web_editor.many2one.button'))
            .prependTo(this.$el);

        this.$ul=this.$btn.find('ul');
        this.$search=this.$ul.find('li:first');
        this.$search.find('input').on('mousedownclickmouseupkeyupkeydown',function(e){
            e.stopPropagation();
        });

        //movemenuitem
        setTimeout(function(){
            self.$btn.find('a').on('click',function(e){
                self._clear();
            });
        },0);

        //bindsearchinput
        this.$search.find('input')
            .focus()
            .on('keyup',function(e){
                self.$overlay.removeClass('o_overlay_hidden');
                self._findExisting($(this).val());
            });

        //bindresult
        this.$ul.on('click','li:not(:first)a',function(e){
            self._selectRecord($(e.currentTarget));
        });

        returnthis._super.apply(this,arguments);
    },
    /**
     *@override
     */
    onFocus:function(){
        this.$target.attr('contentEditable','false');
        this._clear();
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *Removestheinputvalueandsuggestions.
     *
     *@private
     */
    _clear:function(){
        varself=this;
        this.$search.siblings().remove();
        self.$search.find('input').val('');
        setTimeout(function(){
            self.$search.find('input').focus();
        },0);
    },
    /**
     *Findexistingrecordwiththegivennameandsuggestthem.
     *
     *@private
     *@param{string}name
     *@returns{Promise}
     */
    _findExisting:function(name){
        varself=this;
        vardomain=[];
        if(!name||!name.length){
            self.$search.siblings().remove();
            return;
        }
        if(isNaN(+name)){
            if(this.Model!=='res.partner'){
                domain.push(['name','ilike',name]);
            }else{
                domain.push('|',['name','ilike',name],['email','ilike',name]);
            }
        }else{
            domain.push(['id','=',name]);
        }

        returnthis._rpc({
            model:this.Model,
            method:'search_read',
            args:[domain,this.Model==='res.partner'?['name','display_name','city','country_id']:['name','display_name']],
            kwargs:{
                order:[{name:'name',asc:false}],
                limit:5,
                context:this.options.context,
            },
        }).then(function(result){
            self.$search.siblings().remove();
            self.$search.after(qweb.render('web_editor.many2one.search',{contacts:result}));
        });
    },
    /**
     *Selectsthegivensuggestionanddisplaysittheproperway.
     *
     *@private
     *@param{jQuery}$li
     */
    _selectRecord:function($li){
        varself=this;

        this.ID=+$li.data('id');
        this.$target.attr('data-oe-many2one-id',this.ID).data('oe-many2one-id',this.ID);

        this.trigger_up('request_history_undo_record',{$target:this.$target});
        this.$target.trigger('content_changed');

        if(self.$target.data('oe-type')==='contact'){
            $('[data-oe-contact-options]')
                .filter('[data-oe-model="'+self.$target.data('oe-model')+'"]')
                .filter('[data-oe-id="'+self.$target.data('oe-id')+'"]')
                .filter('[data-oe-field="'+self.$target.data('oe-field')+'"]')
                .filter('[data-oe-contact-options!="'+self.$target.data('oe-contact-options')+'"]')
                .add(self.$target)
                .attr('data-oe-many2one-id',self.ID).data('oe-many2one-id',self.ID)
                .each(function(){
                    var$node=$(this);
                    varoptions=$node.data('oe-contact-options');
                    self._rpc({
                        model:'ir.qweb.field.contact',
                        method:'get_record_to_html',
                        args:[[self.ID]],
                        kwargs:{
                            options:options,
                            context:self.options.context,
                        },
                    }).then(function(html){
                        $node.html(html);
                    });
                });
        }else{
            self.$target.text($li.data('name'));
        }

        this._clear();
    }
});

/**
 *Allowstodisplayawarningmessageonoutdatedsnippets.
 */
registry.VersionControl=SnippetOptionWidget.extend({
    xmlDependencies:['/web_editor/static/src/xml/snippets.xml'],

    /**
     *@override
     */
    start:function(){
        this.trigger_up('get_snippet_versions',{
            snippetName:this.$target[0].dataset.snippet,
            onSuccess:snippetVersions=>{
                constisUpToDate=snippetVersions&&['vjs','vcss','vxml'].every(key=>this.$target[0].dataset[key]===snippetVersions[key]);
                if(!isUpToDate){
                    this.$el.prepend(qweb.render('web_editor.outdated_block_message'));
                }
            },
        });
        returnthis._super(...arguments);
    },
});

/**
 *Handlethesaveofasnippetasatemplatethatcanbereusedlater
 */
registry.SnippetSave=SnippetOptionWidget.extend({
    xmlDependencies:['/web_editor/static/src/xml/editor.xml'],
    isTopOption:true,

    //--------------------------------------------------------------------------
    //Options
    //--------------------------------------------------------------------------

    /**
     *@seethis.selectClassforparameters
     */
    saveSnippet:function(previewMode,widgetValue,params){
        returnnewPromise(resolve=>{
            constdialog=newDialog(this,{
                title:_t("SaveYourBlock"),
                size:'small',
                $content:$(qweb.render('web_editor.dialog.save_snippet',{
                    currentSnippetName:_.str.sprintf(_t("Custom%s"),this.data.snippetName),
                })),
                buttons:[{
                    text:_t("Save"),
                    classes:'btn-primary',
                    close:true,
                    click:async()=>{
                        constsave=awaitnewPromise(resolve=>{
                            Dialog.confirm(this,_t("Tosaveasnippet,weneedtosaveallyourpreviousmodificationsandreloadthepage."),{
                                buttons:[
                                    {
                                        text:_t("SaveandReload"),
                                        classes:'btn-primary',
                                        close:true,
                                        click:()=>resolve(true),
                                    },{
                                        text:_t("Cancel"),
                                        close:true,
                                        click:()=>resolve(false),
                                    }
                                ]
                            });
                        });
                        if(!save){
                            return;
                        }
                        constsnippetKey=this.$target[0].dataset.snippet;
                        letthumbnailURL;
                        this.trigger_up('snippet_thumbnail_url_request',{
                            key:snippetKey,
                            onSuccess:url=>thumbnailURL=url,
                        });
                        letcontext;
                        this.trigger_up('context_get',{
                            callback:ctx=>context=ctx,
                        });
                        this.trigger_up('request_save',{
                            reloadEditor:true,
                            onSuccess:async()=>{
                                constsnippetName=dialog.el.querySelector('.o_we_snippet_name_input').value;
                                consttargetCopyEl=this.$target[0].cloneNode(true);
                                deletetargetCopyEl.dataset.name;
                                //BythetimeonSuccessiscalledafterrequest_save,the
                                //currentwidgethasbeendestroyedandisorphaned,sothis._rpc
                                //willnotworkasitcan'ttrigger_up.Forthisreason,weneed
                                //tobypasstheserviceproviderandusetheglobalRPCdirectly
                                awaitrpc.query({
                                    model:'ir.ui.view',
                                    method:'save_snippet',
                                    kwargs:{
                                        'name':snippetName,
                                        'arch':targetCopyEl.outerHTML,
                                        'template_key':this.options.snippets,
                                        'snippet_key':snippetKey,
                                        'thumbnail_url':thumbnailURL,
                                        'context':context,
                                    },
                                });
                            },
                        });
                    },
                },{
                    text:_t("Discard"),
                    close:true,
                }],
            }).open();
            dialog.on('closed',this,()=>resolve());
        });
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *TODOadaptinmaster,thisoptionshouldonlybeinstantiatedforreal
     *snippetsinthefirstplace.
     *
     *@override
     */
    _computeVisibility(){
        returnthis.$target[0].hasAttribute('data-snippet');
    },
});

/**
 *HandlesthedynamiccolorsfordynamicSVGs.
 */
registry.DynamicSvg=SnippetOptionWidget.extend({
    /**
     *@override
     */
    start(){
        this.$target.on('image_changed.DynamicSvg',this._onImageChanged.bind(this));
        returnthis._super(...arguments);
    },
    /**
     *@override
     */
    destroy(){
        this.$target.off('.DynamicSvg');
        returnthis._super(...arguments);
    },

    //--------------------------------------------------------------------------
    //Options
    //--------------------------------------------------------------------------

    /**
     *SetsthedynamicSVG'sdynamiccolor.
     *
     *@seethis.selectClassforparams
     */
    asynccolor(previewMode,widgetValue,params){
        consttarget=this.$target[0];
        switch(previewMode){
            casetrue:
                this.previousSrc=target.getAttribute('src');
                break;
            case'reset':
                target.src=this.previousSrc;
                return;
        }
        constnewURL=newURL(target.src,window.location.origin);
        newURL.searchParams.set('c1',normalizeColor(widgetValue));
        constsrc=newURL.pathname+newURL.search;
        awaitloadImage(src);
        target.src=src;
        if(!previewMode){
            this.previousSrc=src;
        }
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *@override
     */
    _computeWidgetState(methodName,params){
        switch(methodName){
            case'color':
                returnnewURL(this.$target[0].src,window.location.origin).searchParams.get('c1');
        }
        returnthis._super(...arguments);
    },
    /**
     *@override
     */
    _computeVisibility(methodName,params){
        returnthis.$target.is("img[src^='/web_editor/shape/']");
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *@override
     */
    _onImageChanged(methodName,params){
        returnthis.updateUI();
    },
});

return{
    SnippetOptionWidget:SnippetOptionWidget,
    snippetOptionRegistry:registry,

    NULL_ID:NULL_ID,
    UserValueWidget:UserValueWidget,
    userValueWidgetsRegistry:userValueWidgetsRegistry,
    UnitUserValueWidget:UnitUserValueWidget,

    addTitleAndAllowedAttributes:_addTitleAndAllowedAttributes,
    buildElement:_buildElement,
    buildTitleElement:_buildTitleElement,
    buildRowElement:_buildRowElement,
    buildCollapseElement:_buildCollapseElement,

    //Othernamesforconvenience
    Class:SnippetOptionWidget,
    registry:registry,
};
});
