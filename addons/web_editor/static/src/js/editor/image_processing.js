flectra.define('web_editor.image_processing',function(require){
'usestrict';

//Fieldsreturnedbycropperjs'getData'method,alsoneedtobepassedwhen
//initializingthecroppertoreusethepreviouscrop.
constcropperDataFields=['x','y','width','height','rotate','scaleX','scaleY'];
constmodifierFields=[
    'filter',
    'quality',
    'mimetype',
    'glFilter',
    'originalId',
    'originalSrc',
    'resizeWidth',
    'aspectRatio',
];

//webglcolorfilters
const_applyAll=(result,filter,filters)=>{
    filters.forEach(f=>{
        if(f[0]==='blend'){
            constcv=f[1];
            constctx=result.getContext('2d');
            ctx.globalCompositeOperation=f[2];
            ctx.globalAlpha=f[3];
            ctx.drawImage(cv,0,0);
            ctx.globalCompositeOperation='source-over';
            ctx.globalAlpha=1.0;
        }else{
            filter.addFilter(...f);
        }
    });
};
letapplyAll;

constglFilters={
    blur:filter=>filter.addFilter('blur',10),

    '1977':(filter,cv)=>{
        constctx=cv.getContext('2d');
        ctx.fillStyle='rgb(243,106,188)';
        ctx.fillRect(0,0,cv.width,cv.height);
        applyAll(filter,[
            ['blend',cv,'screen',.3],
            ['brightness',.1],
            ['contrast',.1],
            ['saturation',.3],
        ]);
    },

    aden:(filter,cv)=>{
        constctx=cv.getContext('2d');
        ctx.fillStyle='rgb(66,10,14)';
        ctx.fillRect(0,0,cv.width,cv.height);
        applyAll(filter,[
            ['blend',cv,'darken',.2],
            ['brightness',.2],
            ['contrast',-.1],
            ['saturation',-.15],
            ['hue',20],
        ]);
    },

    brannan:(filter,cv)=>{
        constctx=cv.getContext('2d');
        ctx.fillStyle='rgb(161,44,191)';
        ctx.fillRect(0,0,cv.width,cv.height);
        applyAll(filter,[
            ['blend',cv,'lighten',.31],
            ['sepia',.5],
            ['contrast',.4],
        ]);
    },

    earlybird:(filter,cv)=>{
        constctx=cv.getContext('2d');
        constgradient=ctx.createRadialGradient(
            cv.width/2,cv.height/2,0,
            cv.width/2,cv.height/2,Math.hypot(cv.width,cv.height)/2
        );
        gradient.addColorStop(.2,'#D0BA8E');
        gradient.addColorStop(1,'#1D0210');
        ctx.fillStyle=gradient;
        ctx.fillRect(0,0,cv.width,cv.height);
        applyAll(filter,[
            ['blend',cv,'overlay',.2],
            ['sepia',.2],
            ['contrast',-.1],
        ]);
    },

    inkwell:(filter,cv)=>{
        applyAll(filter,[
            ['sepia',.3],
            ['brightness',.1],
            ['contrast',-.1],
            ['desaturateLuminance'],
        ]);
    },

    //Needshueblendingmodeforperfectreproduction.Closeenough?
    maven:(filter,cv)=>{
        applyAll(filter,[
            ['sepia',.25],
            ['brightness',-.05],
            ['contrast',-.05],
            ['saturation',.5],
        ]);
    },

    toaster:(filter,cv)=>{
        constctx=cv.getContext('2d');
        constgradient=ctx.createRadialGradient(
            cv.width/2,cv.height/2,0,
            cv.width/2,cv.height/2,Math.hypot(cv.width,cv.height)/2
        );
        gradient.addColorStop(0,'#0F4E80');
        gradient.addColorStop(1,'#3B003B');
        ctx.fillStyle=gradient;
        ctx.fillRect(0,0,cv.width,cv.height);
        applyAll(filter,[
            ['blend',cv,'screen',.5],
            ['brightness',-.1],
            ['contrast',.5],
        ]);
    },

    walden:(filter,cv)=>{
        constctx=cv.getContext('2d');
        ctx.fillStyle='#CC4400';
        ctx.fillRect(0,0,cv.width,cv.height);
        applyAll(filter,[
            ['blend',cv,'screen',.3],
            ['sepia',.3],
            ['brightness',.1],
            ['saturation',.6],
            ['hue',350],
        ]);
    },

    valencia:(filter,cv)=>{
        constctx=cv.getContext('2d');
        ctx.fillStyle='#3A0339';
        ctx.fillRect(0,0,cv.width,cv.height);
        applyAll(filter,[
            ['blend',cv,'exclusion',.5],
            ['sepia',.08],
            ['brightness',.08],
            ['contrast',.08],
        ]);
    },

    xpro:(filter,cv)=>{
        constctx=cv.getContext('2d');
        constgradient=ctx.createRadialGradient(
            cv.width/2,cv.height/2,0,
            cv.width/2,cv.height/2,Math.hypot(cv.width,cv.height)/2
        );
        gradient.addColorStop(.4,'#E0E7E6');
        gradient.addColorStop(1,'#2B2AA1');
        ctx.fillStyle=gradient;
        ctx.fillRect(0,0,cv.width,cv.height);
        applyAll(filter,[
            ['blend',cv,'color-burn',.7],
            ['sepia',.3],
        ]);
    },

    custom:(filter,cv,filterOptions)=>{
        constoptions=Object.assign({
            blend:'normal',
            filterColor:'',
            blur:'0',
            desaturateLuminance:'0',
            saturation:'0',
            contrast:'0',
            brightness:'0',
            sepia:'0',
        },JSON.parse(filterOptions||"{}"));
        constfilters=[];
        if(options.filterColor){
            constctx=cv.getContext('2d');
            ctx.fillStyle=options.filterColor;
            ctx.fillRect(0,0,cv.width,cv.height);
            filters.push(['blend',cv,options.blend,1]);
        }
        deleteoptions.blend;
        deleteoptions.filterColor;
        filters.push(...Object.entries(options).map(([filter,amount])=>[filter,parseInt(amount)/100]));
        applyAll(filter,filters);
    },
};
/**
 *Appliesdata-attributesmodificationstoanimgtagandreturnsadataURL
 *containingtheresult.Thisfunctiondoesnotmodifytheoriginalimage.
 *
 *@param{HTMLImageElement}imgtheimagetowhichmodificationsareapplied
 *@returns{string}dataURLoftheimagewiththeappliedmodifications
 */
asyncfunctionapplyModifications(img){
    constdata=Object.assign({
        glFilter:'',
        filter:'#0000',
        quality:'75',
    },img.dataset);
    let{
        width,
        height,
        resizeWidth,
        quality,
        filter,
        mimetype,
        originalSrc,
        glFilter,
        filterOptions,
    }=data;
    [width,height,resizeWidth]=[width,height,resizeWidth].map(s=>parseFloat(s));
    quality=parseInt(quality);

    //Crop
    constcontainer=document.createElement('div');
    constoriginal=awaitloadImage(originalSrc);
    container.appendChild(original);
    awaitactivateCropper(original,0,data);
    constcroppedImg=$(original).cropper('getCroppedCanvas',{width,height});
    $(original).cropper('destroy');

    //Width
    constresult=document.createElement('canvas');
    result.width=resizeWidth||croppedImg.width;
    result.height=croppedImg.height*result.width/croppedImg.width;
    constctx=result.getContext('2d');
    ctx.imageSmoothingQuality="high";
    ctx.mozImageSmoothingEnabled=true;
    ctx.webkitImageSmoothingEnabled=true;
    ctx.msImageSmoothingEnabled=true;
    ctx.imageSmoothingEnabled=true;
    ctx.drawImage(croppedImg,0,0,croppedImg.width,croppedImg.height,0,0,result.width,result.height);

    //GLfilter
    if(glFilter){
        constglf=newwindow.WebGLImageFilter();
        constcv=document.createElement('canvas');
        cv.width=result.width;
        cv.height=result.height;
        applyAll=_applyAll.bind(null,result);
        glFilters[glFilter](glf,cv,filterOptions);
        constfiltered=glf.apply(result);
        ctx.drawImage(filtered,0,0,filtered.width,filtered.height,0,0,result.width,result.height);
    }

    //Colorfilter
    ctx.fillStyle=filter||'#0000';
    ctx.fillRect(0,0,result.width,result.height);

    //Quality
    returnresult.toDataURL(mimetype,quality/100);
}

/**
 *LoadsansrcintoanHTMLImageElement.
 *
 *@param{String}srcURLoftheimagetoload
 *@param{HTMLImageElement}[img]imgelementinwhichtoloadtheimage
 *@returns{Promise<HTMLImageElement>}Promisethatresolvestotheloadedimg
 */
functionloadImage(src,img=newImage()){
    returnnewPromise((resolve,reject)=>{
        img.addEventListener('load',()=>resolve(img),{once:true});
        img.addEventListener('error',reject,{once:true});
        img.src=src;
    });
}

//BecausecropperjsacquiresimagesthroughXHRsontheimagesrcandwedon't
//wanttoloadbigimagesoverthenetworkmanytimeswhenadjustingquality
//andfilter,wecreatealocalcacheoftheimagesusingobjectURLs.
constimageCache=newMap();
/**
 *Activatesthecropperonagivenimage.
 *
 *@param{jQuery}$imagetheimageonwhichtoactivatethecropper
 *@param{Number}aspectRatiotheaspectRatioofthecropbox
 *@param{DOMStringMap}datasetdatasetcontainingthecropperDataFields
 */
asyncfunctionactivateCropper(image,aspectRatio,dataset){
    constsrc=image.getAttribute('src');
    if(!imageCache.has(src)){
        constres=awaitfetch(src);
        imageCache.set(src,URL.createObjectURL(awaitres.blob()));
    }
    image.src=imageCache.get(src);
    $(image).cropper({
        viewMode:2,
        dragMode:'move',
        autoCropArea:1.0,
        aspectRatio:aspectRatio,
        data:_.mapObject(_.pick(dataset,...cropperDataFields),value=>parseFloat(value)),
        //Can'tuse0becauseit'sfalsyandcropperjswillthenuseitsdefaults(200x100)
        minContainerWidth:1,
        minContainerHeight:1,
    });
    returnnewPromise(resolve=>image.addEventListener('ready',resolve,{once:true}));
}
/**
 *Marksan<img>withitsattachmentdata(originalId,originalSrc,mimetype)
 *
 *@param{HTMLImageElement}imgtheimagewhoseattachmentdatashouldbefound
 *@param{Function}rpcafunctionthatcanbeusedtomaketheRPC.Typically
 *  thiswouldbepassedas'this._rpc.bind(this)'fromwidgets.
 */
asyncfunctionloadImageInfo(img,rpc){
    constsrc=img.getAttribute('src');
    //IfthereisamarkedoriginalSrc,thedataisalreadyloaded.
    if(img.dataset.originalSrc||!src){
        return;
    }

    const{original}=awaitrpc({
        route:'/web_editor/get_image_info',
        params:{src:src.split(/[?#]/)[0]},
    });
    //Checkthaturlislocal.
    constisLocal=original&&newURL(original.image_src,window.location.origin).origin===window.location.origin;
    if(isLocal&&original.image_src){
        img.dataset.originalId=original.id;
        img.dataset.originalSrc=original.image_src;
        img.dataset.mimetype=original.mimetype;
    }
}

return{
    applyModifications,
    cropperDataFields,
    activateCropper,
    loadImageInfo,
    loadImage,
    removeOnImageChangeAttrs:[...cropperDataFields,...modifierFields,'aspectRatio'],
};
});
