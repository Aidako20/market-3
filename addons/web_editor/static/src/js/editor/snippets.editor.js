flectra.define('web_editor.snippet.editor',function(require){
'usestrict';

varconcurrency=require('web.concurrency');
varcore=require('web.core');
varDialog=require('web.Dialog');
vardom=require('web.dom');
varWidget=require('web.Widget');
varoptions=require('web_editor.snippets.options');
varWysiwyg=require('web_editor.wysiwyg');
const{ColorPaletteWidget}=require('web_editor.ColorPalette');
constSmoothScrollOnDrag=require('web/static/src/js/core/smooth_scroll_on_drag.js');
const{getCSSVariableValue}=require('web_editor.utils');

var_t=core._t;

varglobalSelector={
    closest:()=>$(),
    all:()=>$(),
    is:()=>false,
};

/**
 *Managementoftheoverlayandoptionlistforasnippet.
 */
varSnippetEditor=Widget.extend({
    template:'web_editor.snippet_overlay',
    xmlDependencies:['/web_editor/static/src/xml/snippets.xml'],
    events:{
        'click.oe_snippet_remove':'_onRemoveClick',
        'wheel':'_onMouseWheel',
    },
    custom_events:{
        'option_update':'_onOptionUpdate',
        'user_value_widget_request':'_onUserValueWidgetRequest',
        'snippet_option_update':'_onSnippetOptionUpdate',//TODOremovemeinmaster
        'snippet_option_visibility_update':'_onSnippetOptionVisibilityUpdate',
    },
    layoutElementsSelector:[
        '.o_we_shape',
        '.o_we_bg_filter',
    ].join(','),

    /**
     *@constructor
     *@param{Widget}parent
     *@param{Element}target
     *@param{Object}templateOptions
     *@param{jQuery}$editable
     *@param{Object}options
     */
    init:function(parent,target,templateOptions,$editable,options){
        this._super.apply(this,arguments);
        this.options=options;
        //Thisispossibletohaveasnippeteditornotinsideaneditablearea
        //(data-no-check="true")anditispossibletonothaveeditableareas
        //atall(restrictededitor),inthatcasewejustsupposethisisthe
        //bodysorelatedcodecanstillbeexecutedwithoutcrash(aswestill
        //needtoinstantiateinstancesofeditorsevenifnothingisreally
        //editable(data-no-check="true"/navigationoptions/...)).
        //TODOthisshouldprobablybereviewedinmaster:doweneeda
        //referencetotheeditablearea?Thereshouldbeworkarounds.
        this.$editable=$editable&&$editable.length?$editable:$(document.body);
        this.ownerDocument=this.$editable[0].ownerDocument;
        this.$body=$(this.ownerDocument.body);
        this.$target=$(target);
        this.$target.data('snippet-editor',this);
        this.templateOptions=templateOptions;
        this.isTargetParentEditable=false;
        this.isTargetMovable=false;
        this.$scrollingElement=$().getScrollingElement();

        this.__isStarted=newPromise(resolve=>{
            this.__isStartedResolveFunc=resolve;
        });
    },
    /**
     *@override
     */
    start:function(){
        vardefs=[this._super.apply(this,arguments)];

        //Initializetheassociatedoptions(seesnippets.options.js)
        defs.push(this._initializeOptions());
        var$customize=this._customize$Elements[this._customize$Elements.length-1];

        this.isTargetParentEditable=this.$target.parent().is(':o_editable');
        this.isTargetMovable=this.isTargetParentEditable&&this.isTargetMovable;
        this.isTargetRemovable=this.isTargetParentEditable&&!this.$target.parent().is('[data-oe-type="image"]');

        //Initializemove/clone/removebuttons
        if(this.isTargetMovable){
            this.dropped=false;
            constsmoothScrollOptions=this.options.getScrollOptions({
                jQueryDraggableOptions:{
                    cursorAt:{
                        left:10,
                        top:10
                    },
                    handle:'.o_move_handle',
                    helper:()=>{
                        var$clone=this.$el.clone().css({width:'24px',height:'24px',border:0});
                        $clone.appendTo(this.$body).removeClass('d-none');
                        return$clone;
                    },
                    start:this._onDragAndDropStart.bind(this),
                    stop:(...args)=>{
                        //Delayourstophandlersothatsomesummernotehandlers
                        //whichoccuronmouseup(andarethemselfdelayed)are
                        //executedfirst(thispreventsthelibrarytocrash
                        //becauseourstophandlermaychangetheDOM).
                        setTimeout(()=>{
                            this._onDragAndDropStop(...args);
                        },0);
                    },
                },
            });
            constmodalAncestorEl=this.$target[0].closest('.modal');
            const$scrollTarget=modalAncestorEl&&$(modalAncestorEl)
                ||$().getScrollingElement();
            this.draggableComponent=newSmoothScrollOnDrag(this,this.$el,$scrollTarget,smoothScrollOptions);
        }else{
            this.$('.o_overlay_move_options').addClass('d-none');
            $customize.find('.oe_snippet_clone').addClass('d-none');
        }

        if(!this.isTargetRemovable){
            this.$el.add($customize).find('.oe_snippet_remove').addClass('d-none');
        }

        var_animationsCount=0;
        varpostAnimationCover=_.throttle(()=>{
            this.trigger_up('cover_update',{
                overlayVisible:true,
            });
        },100);
        this.$target.on('transitionstart.snippet_editor,animationstart.snippet_editor',()=>{
            //Wecannotrelyonthefacteachtransition/animationstartwill
            //triggeratransition/animationendastheelementmayberemoved
            //fromtheDOMbeforeoritcouldsimplybeaninfiniteanimation.
            //
            //Bysimplicity,foreachstart,weaddadelayedoperationthat
            //willdecreasetheanimationcounterafterafixeddurationand
            //dothepostanimationcoverifnoneisregisteredanymore.
            _animationsCount++;
            setTimeout(()=>{
                if(!--_animationsCount){
                    postAnimationCover();
                }
            },500);//Thisdelayhavetobehugeenoughtotakecareoflong
                     //animationswhichwillnottriggerananimationendevent
                     //butifitistoosmallforsome,thisisthejobofthe
                     //animationcreatortomanuallyaskforare-cover
        });
        //Ontopofwhatisexplainedabove,dothepostanimationcoverfor
        //eachdetectedtransition/animationendsothattheuserdoesnotsee
        //aflickeringwhennotneeded.
        this.$target.on('transitionend.snippet_editor,animationend.snippet_editor',postAnimationCover);

        returnPromise.all(defs).then(()=>{
            this.__isStartedResolveFunc(this);
        });
    },
    /**
     *@override
     */
    destroy:function(){
        //Beforeactuallydestroyingasnippeteditor,notifytheparent
        //aboutitsothatitcanupdateitslistofalivedsnippeteditors.
        this.trigger_up('snippet_editor_destroyed');

        this._super(...arguments);
        this.$target.removeData('snippet-editor');
        this.$target.off('.snippet_editor');
    },

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *Checkswhetherthesnippetoptionsareshownornot.
     *
     *@returns{boolean}
     */
    areOptionsShown:function(){
        constlastIndex=this._customize$Elements.length-1;
        return!!this._customize$Elements[lastIndex].parent().length;
    },
    /**
     *Notifiesalltheassociatedsnippetoptionsthatthesnippethasjust
     *beendroppedinthepage.
     */
    buildSnippet:asyncfunction(){
        for(variinthis.styles){
            this.styles[i].onBuilt();
        }
        awaitthis.toggleTargetVisibility(true);
    },
    /**
     *Notifiesalltheassociatedsnippetoptionsthatthetemplatewhich
     *containsthesnippetisabouttobesaved.
     */
    cleanForSave:asyncfunction(){
        if(this.isDestroyed()){
            return;
        }
        this.willDestroyEditors=true;
        awaitthis.toggleTargetVisibility(!this.$target.hasClass('o_snippet_invisible'));
        constproms=_.map(this.styles,option=>{
            returnoption.cleanForSave();
        });
        awaitPromise.all(proms);
    },
    /**
     *Closesallwidgetsofalloptions.
     */
    closeWidgets:function(){
        if(!this.styles||!this.areOptionsShown()){
            return;
        }
        Object.keys(this.styles).forEach(key=>{
            this.styles[key].closeWidgets();
        });
    },
    /**
     *Makestheeditoroverlaycovertheassociatedsnippet.
     */
    cover:function(){
        if(!this.isShown()||!this.$target.length){
            return;
        }

        const$modal=this.$target.find('.modal:visible');
        const$target=$modal.length?$modal:this.$target;
        consttargetEl=$target[0];

        //Checkfirstifthetargetisstillvisible,otherwisewehaveto
        //hideit.Whencoveringallelementafterscrollforinstanceitmay
        //havebeenhidden(partofanaffixedheaderforexample)oritmay
        //beoutsideoftheviewport(thewholeheaderduringaneffectfor
        //example).
        constrect=targetEl.getBoundingClientRect();
        constvpWidth=window.innerWidth||document.documentElement.clientWidth;
        constvpHeight=window.innerHeight||document.documentElement.clientHeight;
        constisInViewport=(
            rect.bottom>-0.1&&
            rect.right>-0.1&&
            (vpHeight-rect.top)>-0.1&&
            (vpWidth-rect.left)>-0.1
        );
        consthasSize=(//:visiblenotenoughforimages
            Math.abs(rect.bottom-rect.top)>0.01&&
            Math.abs(rect.right-rect.left)>0.01
        );
        if(!isInViewport||!hasSize||!this.$target.is(`:visible`)){
            this.toggleOverlayVisibility(false);
            return;
        }

        //Nowcovertheelement
        constoffset=$target.offset();
        varmanipulatorOffset=this.$el.parent().offset();
        offset.top-=manipulatorOffset.top;
        offset.left-=manipulatorOffset.left;
        this.$el.css({
            width:$target.outerWidth(),
            left:offset.left,
            top:offset.top,
        });
        this.$('.o_handles').css('height',$target.outerHeight());

        consteditableOffsetTop=this.$editable.offset().top-manipulatorOffset.top;
        this.$el.toggleClass('o_top_cover',offset.top-editableOffsetTop<25);
    },
    /**
     *DOMElementshaveadefaultnamewhichappearsintheoverlaywhenthey
     *arebeingedited.Thismethodretrievesthisname;itcanbedefined
     *directlyintheDOMthankstothe`data-name`attribute.
     */
    getName:function(){
        if(this.$target.data('name')!==undefined){
            returnthis.$target.data('name');
        }
        if(this.$target.is('img')){
            return_t("Image");
        }
        if(this.$target.parent('.row').length){
            return_t("Column");
        }
        return_t("Block");
    },
    /**
     *@return{boolean}
     */
    isShown:function(){
        returnthis.$el&&this.$el.parent().length&&this.$el.hasClass('oe_active');
    },
    /**
     *@returns{boolean}
     */
    isSticky:function(){
        returnthis.$el&&this.$el.hasClass('o_we_overlay_sticky');
    },
    /**
     *@returns{boolean}
     */
    isTargetVisible:function(){
        return(this.$target[0].dataset.invisible!=='1');
    },
    /**
     *RemovestheassociatedsnippetfromtheDOManddestroystheassociated
     *editor(itself).
     *
     *@returns{Promise}
     */
    removeSnippet:asyncfunction(){
        this.toggleOverlay(false);
        awaitthis.toggleOptions(false);
        //Ifitisaninvisibleelement,wemustcloseitbeforedeletingit(e.g.modal)
        awaitthis.toggleTargetVisibility(!this.$target.hasClass('o_snippet_invisible'));
        this.trigger_up('will_remove_snippet',{$target:this.$target});

        awaitnewPromise(resolve=>{
            this.trigger_up('call_for_each_child_snippet',{
                $snippet:this.$target,
                callback:function(editor,$snippet){
                    for(variineditor.styles){
                        editor.styles[i].onRemove();
                    }
                },
                onSuccess:resolve,
            });
        });

        this.trigger_up('go_to_parent',{$snippet:this.$target});
        var$parent=this.$target.parent();
        this.$target.find('*').addBack().tooltip('dispose');
        this.$target.remove();
        this.$el.remove();

        varnode=$parent[0];
        if(node&&node.firstChild){
            if(!node.firstChild.tagName&&node.firstChild.textContent===''){
                node.removeChild(node.firstChild);
            }
        }

        if($parent.closest(':data("snippet-editor")').length){
            constisEmptyAndRemovable=($el,editor)=>{
                editor=editor||$el.data('snippet-editor');
                constisEmpty=$el.text().trim()===''
                    &&$el.children().toArray().every(el=>{
                        //Considerlayout-onlyelements(likebg-shapes)asempty
                        returnel.matches(this.layoutElementsSelector);
                    });
                returnisEmpty&&!$el.hasClass('oe_structure')
                    &&!$el.parent().hasClass('carousel-item')
                    &&(!editor||editor.isTargetParentEditable);
            };

            vareditor=$parent.data('snippet-editor');
            while(!editor){
                var$nextParent=$parent.parent();
                if(isEmptyAndRemovable($parent)){
                    $parent.remove();
                }
                $parent=$nextParent;
                editor=$parent.data('snippet-editor');
            }
            if(isEmptyAndRemovable($parent,editor)){
                //TODOmaybethisshouldbepartoftheactualPromisebeing
                //returnedbythefunction?
                setTimeout(()=>editor.removeSnippet());
            }
        }

        //cleaneditoriftheyareimageortableindeletedcontent
        this.$body.find('.note-control-selection').hide();
        this.$body.find('.o_table_handler').remove();

        this.trigger_up('snippet_removed');
        this.destroy();
        $parent.trigger('content_changed');
        //TODOPagecontentchanged,someelementsmayneedtobeadapted
        //accordingtoit.Whilewaitingforabetterwaytohandlethatthis
        //windowtriggerwillhandlemostcases.
        $(window).trigger('resize');
    },
    /**
     *Displays/Hidestheeditoroverlay.
     *
     *@param{boolean}show
     *@param{boolean}[previewMode=false]
     */
    toggleOverlay:function(show,previewMode){
        if(!this.$el){
            return;
        }

        if(previewMode){
            //Inpreviewmode,thestickyclassesareleftuntouched,weonly
            //add/removethepreviewclasswhentoggling/untoggling
            this.$el.toggleClass('o_we_overlay_preview',show);
        }else{
            //Innonpreviewmode,thepreviewclassisalwaysremoved,andthe
            //stickyclassisadded/removedwhentoggling/untoggling
            this.$el.removeClass('o_we_overlay_preview');
            this.$el.toggleClass('o_we_overlay_sticky',show);
        }

        //Show/hideoverlayinpreviewmodeornot
        this.$el.toggleClass('oe_active',show);
        this.cover();
    },
    /**
     *Displays/Hidestheeditor(+parent)optionsandcallonFocus/onBlurif
     *necessary.
     *
     *@param{boolean}show
     *@returns{Promise}
     */
    asynctoggleOptions(show){
        if(!this.$el){
            return;
        }

        if(this.areOptionsShown()===show){
            return;
        }
        //TODOshouldupdatethepanelaftertheitemshavebeenupdated
        this.trigger_up('update_customize_elements',{
            customize$Elements:show?this._customize$Elements:[],
        });
        //AllonFocusbeforealluiupdatesastheonFocusofanoptionmight
        //affectanotheroption(likeupdatingthe$target)
        consteditorUIsToUpdate=[];
        constfocusOrBlur=show
            ?(editor,options)=>{
                for(constoptofoptions){
                    opt.onFocus();
                }
                editorUIsToUpdate.push(editor);
            }
            :(editor,options)=>{
                for(constoptofoptions){
                    opt.onBlur();
                }
            };
        for(const$elofthis._customize$Elements){
            consteditor=$el.data('editor');
            conststyles=_.chain(editor.styles)
                .values()
                .sortBy('__order')
                .value();
            //TODOideally:allowasyncpartsinonFocus/onBlur
            focusOrBlur(editor,styles);
        }
        awaitPromise.all(editorUIsToUpdate.map(editor=>editor.updateOptionsUI()));
        awaitPromise.all(editorUIsToUpdate.map(editor=>editor.updateOptionsUIVisibility()));
    },
    /**
     *@param{boolean}[show]
     *@returns{Promise<boolean>}
     */
    toggleTargetVisibility:asyncfunction(show){
        show=this._toggleVisibilityStatus(show);
        varstyles=_.values(this.styles);
        constproms=_.sortBy(styles,'__order').map(style=>{
            returnshow?style.onTargetShow():style.onTargetHide();
        });
        awaitPromise.all(proms);
        returnshow;
    },
    /**
     *@param{boolean}[show=false]
     */
    toggleOverlayVisibility:function(show){
        if(this.$el&&!this.scrollingTimeout){
            this.$el.toggleClass('o_overlay_hidden',!show&&this.isShown());
        }
    },
    /**
     *UpdatestheUIofalltheoptionsaccordingtothestatusoftheir
     *associatededitableDOM.Thisdoesnottakecareofoptions*visibility*.
     *Forthat@seeupdateOptionsUIVisibility,whichshouldcalledwhentheUI
     *isup-to-datethankstothefunctionhere,asthevisibilitydependson
     *theUI'sstatus.
     *
     *@returns{Promise}
     */
    asyncupdateOptionsUI(){
        constproms=Object.values(this.styles).map(opt=>{
            returnopt.updateUI({noVisibility:true});
        });
        returnPromise.all(proms);
    },
    /**
     *UpdatesthevisibilityoftheUIofalltheoptionsaccordingtothe
     *statusoftheirassociateddependenciesandrelatededitableDOMstatus.
     *
     *@returns{Promise}
     */
    asyncupdateOptionsUIVisibility(){
        constproms=Object.values(this.styles).map(opt=>{
            returnopt.updateUIVisibility();
        });
        returnPromise.all(proms);
    },
    /**
     *Clonesthecurrentsnippet.
     *
     *@private
     *@param{boolean}recordUndo
     */
    clone:asyncfunction(recordUndo){
        this.trigger_up('snippet_will_be_cloned',{$target:this.$target});

        var$clone=this.$target.clone(false);

        if(recordUndo){
            this.trigger_up('request_history_undo_record',{$target:this.$target});
        }

        this.$target.after($clone);
        awaitnewPromise(resolve=>{
            this.trigger_up('call_for_each_child_snippet',{
                $snippet:$clone,
                callback:function(editor,$snippet){
                    for(variineditor.styles){
                        editor.styles[i].onClone({
                            isCurrent:($snippet.is($clone)),
                        });
                    }
                },
                onSuccess:resolve,
            });
        });
        this.trigger_up('snippet_cloned',{$target:$clone,$origin:this.$target});

        $clone.trigger('content_changed');
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *Instantiatesthesnippet'soptions.
     *
     *@private
     */
    _initializeOptions:function(){
        this._customize$Elements=[];
        this.styles={};
        this.selectorSiblings=[];
        this.selectorChildren=[];

        var$element=this.$target.parent();
        while($element.length){
            varparentEditor=$element.data('snippet-editor');
            if(parentEditor){
                this._customize$Elements=this._customize$Elements
                    .concat(parentEditor._customize$Elements);
                break;
            }
            $element=$element.parent();
        }

        var$optionsSection=$(core.qweb.render('web_editor.customize_block_options_section',{
            name:this.getName(),
        })).data('editor',this);
        const$optionsSectionBtnGroup=$optionsSection.find('we-top-button-group');
        $optionsSectionBtnGroup.contents().each((i,node)=>{
            if(node.nodeType===Node.TEXT_NODE){
                node.parentNode.removeChild(node);
            }
        });
        $optionsSection.on('mouseenter',this._onOptionsSectionMouseEnter.bind(this));
        $optionsSection.on('mouseleave',this._onOptionsSectionMouseLeave.bind(this));
        $optionsSection.on('click','we-title>span',this._onOptionsSectionClick.bind(this));
        //TODOInmaster:restrictselectorsto`:not(.o_disabled)`.
        $optionsSection.on('click','.oe_snippet_clone',this._onCloneClick.bind(this));
        $optionsSection.on('click','.oe_snippet_remove',this._onRemoveClick.bind(this));
        this._customize$Elements.push($optionsSection);

        //TODOgetridofthiswhenpossible(madeasafixtosupportold
        //themeoptions)
        this.$el.data('$optionsSection',$optionsSection);

        vari=0;
        vardefs=_.map(this.templateOptions,val=>{
            if(!val.selector.is(this.$target)){
                return;
            }
            if(val['drop-near']){
                this.selectorSiblings.push(val['drop-near']);
            }
            if(val['drop-in']){
                this.selectorChildren.push(val['drop-in']);
            }

            varoptionName=val.option;
            varoption=new(options.registry[optionName]||options.Class)(
                this,
                val.$el.children(),
                val.base_target?this.$target.find(val.base_target).eq(0):this.$target,
                this.$el,
                _.extend({
                    optionName:optionName,
                    snippetName:this.getName(),
                },val.data),
                this.options
            );
            varkey=optionName||_.uniqueId('option');
            if(this.styles[key]){
                //Iftwosnippetoptionsusethesameoptionname(andsouse
                //thesameJSoption),storethesubsequentoneswithaunique
                //ID(TODOimprove)
                key=_.uniqueId(key);
            }
            this.styles[key]=option;
            option.__order=i++;

            if(option.forceNoDeleteButton){
                this.$el.add($optionsSection).find('.oe_snippet_remove').addClass('d-none');
            }

            returnoption.appendTo(document.createDocumentFragment());
        });

        this.isTargetMovable=(this.selectorSiblings.length>0||this.selectorChildren.length>0);

        this.$el.find('[data-toggle="dropdown"]').dropdown();

        returnPromise.all(defs).then(()=>{
            constoptions=_.sortBy(this.styles,'__order');
            options.forEach(option=>{
                if(option.isTopOption){
                    $optionsSectionBtnGroup.prepend(option.$el);
                }else{
                    $optionsSection.append(option.$el);
                }
            });
            $optionsSection.toggleClass('d-none',options.length===0);
        });
    },
    /**
     *@private
     *@param{boolean}[show]
     */
    _toggleVisibilityStatus:function(show){
        if(show===undefined){
            show=!this.isTargetVisible();
        }
        if(show){
            deletethis.$target[0].dataset.invisible;
        }else{
            this.$target[0].dataset.invisible='1';
        }
        returnshow;
    },
    /**
     *Returnsfalseiftheelementmatchesasnippetblockthatcannotbe
     *droppedinasanitizedHTMLfieldorastringrepresentingaspecific
     *reason.Returnstrueifnosuchissueexists.
     *
     *@param{Element}el
     *@return{boolean|str}strindicatesaspecifictypeofforbiddensanitization
     */
    _canBeSanitizedUnless(el){
        letresult=true;
        for(constsnippetElof[el,...el.querySelectorAll('[data-snippet]')]){
            this.trigger_up('find_snippet_template',{
                snippet:snippetEl,
                callback:function(snippetTemplate){
                    constforbidSanitize=snippetTemplate.dataset.oeForbidSanitize;
                    if(forbidSanitize){
                        result=forbidSanitize==='form'?'form':false;
                    }
                },
            });
            //Ifsomeelementintheblockisalreadyfullynon-sanitizable,
            //thewholeblockcannotbesanitized.
            if(!result){
                break;
            }
        }
        returnresult;
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *Calledwhenthe'clone'buttonisclicked.
     *
     *@private
     *@param{Event}ev
     */
    _onCloneClick:function(ev){
        ev.preventDefault();
        this.clone(true);
    },
    /**
     *Calledwhenthesnippetisstartingtobedraggedthankstothe'move'
     *button.
     *
     *@private
     */
    _onDragAndDropStart:function(){
        varself=this;
        this.dropped=false;
        self.size={
            width:self.$target.width(),
            height:self.$target.height()
        };
        constclosestFormEl=this.$target[0].closest('form');
        self.$target.after('<divclass="oe_drop_clone"style="display:none;"/>');
        self.$target.detach();
        self.$el.addClass('d-none');

        var$selectorSiblings;
        for(vari=0;i<self.selectorSiblings.length;i++){
            if(!$selectorSiblings){
                $selectorSiblings=self.selectorSiblings[i].all();
            }else{
                $selectorSiblings=$selectorSiblings.add(self.selectorSiblings[i].all());
            }
        }
        var$selectorChildren;
        for(i=0;i<self.selectorChildren.length;i++){
            if(!$selectorChildren){
                $selectorChildren=self.selectorChildren[i].all();
            }else{
                $selectorChildren=$selectorChildren.add(self.selectorChildren[i].all());
            }
        }
        //TODOInmaster,donotreferenceothermoduleclass+findabetter
        //systemtodefinesuchcases+avoidduplicatedcode(drag&dropfrom
        //editorpanel+drag&dropfrommovebuttonofexistingblock).
        //PreventdroppingToCinsideanotherToC.grep:NO_DOUBLE_TOC
        if(this.$target[0].classList.contains('s_table_of_content')){
            $selectorChildren=$selectorChildren.filter((i,el)=>!el.closest('.s_table_of_content'));
        }
        //Disallowdroppingformfieldsoutsideoftheirform.
        //TODOthiscanprobablybeimplementedbyreviewingdata-drop-near
        //definitionsinmasterbutweshouldfindabettertodefinethoseand
        //suchcases.
        if(this.$target[0].matches('.form-group')){
            $selectorSiblings=$selectorSiblings.filter(
                (i,el)=>closestFormEl===el.closest('form')
            );
        }

        constcanBeSanitizedUnless=this._canBeSanitizedUnless(this.$target[0]);

        this.trigger_up('go_to_parent',{$snippet:this.$target});
        this.trigger_up('activate_insertion_zones',{
            $selectorSiblings:$selectorSiblings,
            $selectorChildren:$selectorChildren,
            canBeSanitizedUnless:canBeSanitizedUnless,
        });

        this.$body.addClass('move-important');

        this.$dropZones=this.$editable.find('.oe_drop_zone');
        if(!canBeSanitizedUnless){
            this.$dropZones=this.$dropZones.not('[data-oe-sanitize].oe_drop_zone');
        }elseif(canBeSanitizedUnless==='form'){
            this.$dropZones=this.$dropZones.not('[data-oe-sanitize][data-oe-sanitize!="allow_form"].oe_drop_zone');
        }
        this.$dropZones.droppable({
            over:function(){
                if(self.dropped){
                    self.$target.detach();
                    $('.oe_drop_zone').removeClass('invisible');
                }
                self.dropped=true;
                $(this).first().after(self.$target).addClass('invisible');
            },
            out:function(){
                varprev=self.$target.prev();
                if(this===prev[0]){
                    self.dropped=false;
                    self.$target.detach();
                    $(this).removeClass('invisible');
                }
            },
        });

        //TriggerascrollonthedraggableelementsothatjQueryupdates
        //thepositionofthedropzones.
        self.draggableComponent.$scrollTarget.on('scroll.scrolling_element',function(){
            self.$el.trigger('scroll');
        });
    },
    /**
     *Calledwhenthesnippetisdroppedafterbeingdraggedthankstothe
     *'move'button.
     *
     *@private
     *@param{Event}ev
     *@param{Object}ui
     */
    _onDragAndDropStop:function(ev,ui){
        //TODOlotofthisisduplicatedcodeofthed&dfeatureofsnippets
        if(!this.dropped){
            var$el=$.nearest({x:ui.position.left,y:ui.position.top},'.oe_drop_zone',{container:document.body}).first();
            //Somedropzonesmighthavebeendisabled.
            $el=$el.filter(this.$dropZones);
            if($el.length){
                $el.after(this.$target);
                this.dropped=true;
            }
        }

        this.$dropZones.droppable('destroy');
        this.$editable.find('.oe_drop_zone').remove();

        varprev=this.$target.first()[0].previousSibling;
        varnext=this.$target.last()[0].nextSibling;
        var$parent=this.$target.parent();

        var$clone=this.$editable.find('.oe_drop_clone');
        if(prev===$clone[0]){
            prev=$clone[0].previousSibling;
        }elseif(next===$clone[0]){
            next=$clone[0].nextSibling;
        }
        $clone.after(this.$target);
        var$from=$clone.parent();

        this.$el.removeClass('d-none');
        this.$body.removeClass('move-important');
        $clone.remove();

        if(this.dropped){
            this.trigger_up('request_history_undo_record',{$target:this.$target});

            if(prev){
                this.$target.insertAfter(prev);
            }elseif(next){
                this.$target.insertBefore(next);
            }else{
                $parent.prepend(this.$target);
            }

            for(variinthis.styles){
                this.styles[i].onMove();
            }

            this.$target.trigger('content_changed');
            $from.trigger('content_changed');
        }

        this.trigger_up('drag_and_drop_stop',{
            $snippet:this.$target,
        });
        this.draggableComponent.$scrollTarget.off('scroll.scrolling_element');
        deletethis.$dropZones;
    },
    /**
     *@private
     */
    _onOptionsSectionMouseEnter:function(ev){
        if(!this.$target.is(':visible')){
            return;
        }
        this.trigger_up('activate_snippet',{
            $snippet:this.$target,
            previewMode:true,
        });
    },
    /**
     *@private
     */
    _onOptionsSectionMouseLeave:function(ev){
        this.trigger_up('activate_snippet',{
            $snippet:false,
            previewMode:true,
        });
    },
    /**
     *@private
     */
    _onOptionsSectionClick:function(ev){
        this.trigger_up('activate_snippet',{
            $snippet:this.$target,
            previewMode:false,
        });
    },
    /**
     *Calledwhenachildeditor/optionasksforanotheroptiontoperforma
     *specificaction/reacttoaspecificevent.
     *
     *@private
     *@param{FlectraEvent}ev
     */
    _onOptionUpdate:function(ev){
        varself=this;

        //Ifmultipleoptionnamesaregiven,wesupposeitshouldnotbe
        //propagatedtoparenteditor
        if(ev.data.optionNames){
            ev.stopPropagation();
            _.each(ev.data.optionNames,function(name){
                notifyForEachMatchedOption(name);
            });
        }
        //Ifoneoptionnameisgiven,wesupposeitshouldbehandlebythe
        //firstparenteditorwhichcandoit
        if(ev.data.optionName){
            if(notifyForEachMatchedOption(ev.data.optionName)){
                ev.stopPropagation();
            }
        }

        functionnotifyForEachMatchedOption(name){
            varregex=newRegExp('^'+name+'\\d+$');
            varhasOption=false;
            for(varkeyinself.styles){
                if(key===name||regex.test(key)){
                    self.styles[key].notify(ev.data.name,ev.data.data);
                    hasOption=true;
                }
            }
            returnhasOption;
        }
    },
    /**
     *Calledwhenthe'remove'buttonisclicked.
     *
     *@private
     *@param{Event}ev
     */
    _onRemoveClick:function(ev){
        ev.preventDefault();
        ev.stopPropagation();
        this.trigger_up('request_history_undo_record',{$target:this.$target});
        this.trigger_up('snippet_edition_request',{exec:this.removeSnippet.bind(this)});
    },
    /**
     *@private
     *@param{FlectraEvent}ev
     */
    _onSnippetOptionUpdate:asyncfunction(ev){
        //TODOremovemeinmaster
    },
    /**
     *@private
     *@param{FlectraEvent}ev
     */
    _onSnippetOptionVisibilityUpdate:function(ev){
        if(this.willDestroyEditors){
            //Donotupdatetheoptionvisibilitiesifwearedestroyingthem.
            return;
        }
        ev.data.show=this._toggleVisibilityStatus(ev.data.show);
    },
    /**
     *@private
     *@param{Event}ev
     */
    _onUserValueWidgetRequest:function(ev){
        ev.stopPropagation();
        for(constkeyofObject.keys(this.styles)){
            constwidget=this.styles[key].findWidget(ev.data.name);
            if(widget){
                ev.data.onSuccess(widget);
                return;
            }
        }
    },
    /**
     *Calledwhenthe'mousewheel'isusedwhenhoveringovertheoverlay.
     *Disablethepointereventstopreventpagescrollingfromstopping.
     *
     *@private
     *@param{Event}ev
     */
    _onMouseWheel:function(ev){
        ev.stopPropagation();
        this.$el.css('pointer-events','none');
        clearTimeout(this.wheelTimeout);
        this.wheelTimeout=setTimeout(()=>{
            this.$el.css('pointer-events','');
        },250);
    },
});

/**
 *Managementofdrag&dropmenuandsnippetrelatedbehaviorsinthepage.
 */
varSnippetsMenu=Widget.extend({
    id:'oe_snippets',
    cacheSnippetTemplate:{},
    events:{
        'click.oe_snippet':'_onSnippetClick',
        'click.o_install_btn':'_onInstallBtnClick',
        'click.o_we_add_snippet_btn':'_onBlocksTabClick',
        'click.o_we_invisible_entry':'_onInvisibleEntryClick',
        'click#snippet_custom.o_delete_btn':'_onDeleteBtnClick',
        'mousedown':'_onMouseDown',
        'input.o_snippet_search_filter_input':'_onSnippetSearchInput',
        'click.o_snippet_search_filter_reset':'_onSnippetSearchResetClick',
        'summernote_popover_update_call.o_we_snippet_text_tools':'_onSummernoteToolsUpdate',
    },
    custom_events:{
        'activate_insertion_zones':'_onActivateInsertionZones',
        'activate_snippet':'_onActivateSnippet',
        'call_for_each_child_snippet':'_onCallForEachChildSnippet',
        'clone_snippet':'_onCloneSnippet',
        'cover_update':'_onOverlaysCoverUpdate',
        'deactivate_snippet':'_onDeactivateSnippet',
        'drag_and_drop_stop':'_onDragAndDropStop',
        'get_snippet_versions':'_onGetSnippetVersions',
        'go_to_parent':'_onGoToParent',
        'find_snippet_template':'_onFindSnippetTemplate',
        'remove_snippet':'_onRemoveSnippet',
        'snippet_edition_request':'_onSnippetEditionRequest',
        'snippet_editor_destroyed':'_onSnippetEditorDestroyed',
        'snippet_removed':'_onSnippetRemoved',
        'snippet_cloned':'_onSnippetCloned',
        'snippet_option_update':'_onSnippetOptionUpdate',
        'snippet_option_visibility_update':'_onSnippetOptionVisibilityUpdate',
        'snippet_thumbnail_url_request':'_onSnippetThumbnailURLRequest',
        'reload_snippet_dropzones':'_disableUndroppableSnippets',
        'request_save':'_onSaveRequest',
        'update_customize_elements':'_onUpdateCustomizeElements',
        'hide_overlay':'_onHideOverlay',
        'block_preview_overlays':'_onBlockPreviewOverlays',
        'unblock_preview_overlays':'_onUnblockPreviewOverlays',
        'user_value_widget_opening':'_onUserValueWidgetOpening',
        'user_value_widget_closing':'_onUserValueWidgetClosing',
        'reload_snippet_template':'_onReloadSnippetTemplate',
    },
    //enumoftheSnippetsMenu'stabs.
    tabs:{
        BLOCKS:'blocks',
        OPTIONS:'options',
    },

    /**
     *@param{Widget}parent
     *@param{Object}[options]
     *@param{string}[options.snippets]
     *     URLofthesnippetstemplate.ThisURLmighthavebeenset
     *     intheglobal'snippets'variable,otherwisethisfunction
     *     assignsadefaultone.
     *     default:'web_editor.snippets'
     *
     *@constructor
     */
    init:function(parent,options){
        this._super.apply(this,arguments);
        options=options||{};
        this.trigger_up('getRecordInfo',{
            recordInfo:options,
            callback:function(recordInfo){
                _.defaults(options,recordInfo);
            },
        });

        this.options=options;
        if(!this.options.snippets){
            this.options.snippets='web_editor.snippets';
        }
        this.snippetEditors=[];
        this._enabledEditorHierarchy=[];

        this._mutex=newconcurrency.Mutex();

        this.setSelectorEditableArea(options.$el,options.selectorEditableArea);

        this._notActivableElementsSelector=[
            '#web_editor-top-edit',
            '.o_we_website_top_actions',
            '#oe_snippets',
            '#oe_manipulators',
            '.o_technical_modal',
            '.oe_drop_zone',
            '.o_notification_manager',
            '.o_we_no_overlay',
            '.ui-autocomplete',
            '.modal.close',
            '.o_we_crop_widget',
        ].join(',');

        this.loadingTimers={};
        this.loadingElements={};
    },
    /**
     *@override
     */
    willStart:function(){
        //Preloadcolorpalettedependencieswithoutwaitingforthem.The
        //widgethavehugechancesofbeingusedbytheuser(clickingonany
        //textwillloadit).Thecolorpaletteitselfwilldotheactual
        //waitingoftheloadingcompletion.
        ColorPaletteWidget.loadDependencies(this);
        returnthis._super(...arguments);
    },
    /**
     *@override
     */
    asyncstart(){
        vardefs=[this._super.apply(this,arguments)];
        this.ownerDocument=this.$el[0].ownerDocument;
        this.$document=$(this.ownerDocument);
        this.window=this.ownerDocument.defaultView;
        this.$window=$(this.window);

        this.customizePanel=document.createElement('div');
        this.customizePanel.classList.add('o_we_customize_panel','d-none');

        this.textEditorPanelEl=document.createElement('div');
        this.textEditorPanelEl.classList.add('o_we_snippet_text_tools','d-none');

        this.invisibleDOMPanelEl=document.createElement('div');
        this.invisibleDOMPanelEl.classList.add('o_we_invisible_el_panel');
        this.invisibleDOMPanelEl.appendChild(
            $('<div/>',{
                text:_t('InvisibleElements'),
                class:'o_panel_header',
            })[0]
        );

        this.options.getScrollOptions=this._getScrollOptions.bind(this);

        //Fetchsnippettemplatesandcomputeit
        defs.push((async()=>{
            awaitthis._loadSnippetsTemplates();
            awaitthis._updateInvisibleDOM();
        })());

        //Preparesnippetseditorenvironment
        this.$snippetEditorArea=$('<div/>',{
            id:'oe_manipulators',
        }).insertAfter(this.$el);

        //Activesnippeteditoronclickinthepage
        varlastElement;
        constonClick=ev=>{
            varsrcElement=ev.target||(ev.originalEvent&&(ev.originalEvent.target||ev.originalEvent.originalTarget))||ev.srcElement;
            if(!srcElement||lastElement===srcElement){
                return;
            }
            lastElement=srcElement;
            _.defer(function(){
                lastElement=false;
            });

            var$target=$(srcElement);
            if(!$target.closest('we-button,we-toggler,we-select,.o_we_color_preview').length){
                this._closeWidgets();
            }
            if(!$target.closest('body>*').length){
                return;
            }
            if($target.closest(this._notActivableElementsSelector).length){
                return;
            }
            const$oeStructure=$target.closest('.oe_structure');
            if($oeStructure.length&&!$oeStructure.children().length&&this.$snippets){
                //Deselectanysnippetthatmightbeselected(e.g.withina
                //megamenu)
                this._activateSnippet(false);
                //Ifemptyoe_structure,encourageusingsnippetsinthereby
                //makingthem"wizz"inthepanel.
                this.$snippets.flectraBounce();
                return;
            }
            this._activateSnippet($target);
        };

        this.$document.on('click.snippets_menu','*',onClick);
        //Neededasbootstrapstopthepropagationofclickeventsfordropdowns
        this.$document.on('mouseup.snippets_menu','.dropdown-toggle',onClick);

        core.bus.on('deactivate_snippet',this,this._onDeactivateSnippet);

        //Adaptoverlaycoveringwhenthewindowisresized/contentchanges
        vardebouncedCoverUpdate=_.throttle(()=>{
            this.updateCurrentSnippetEditorOverlay();
        },50);
        this.$window.on('resize.snippets_menu',debouncedCoverUpdate);
        this.$window.on('content_changed.snippets_menu',debouncedCoverUpdate);

        //Onkeydownaddaclassontheactiveoverlaytohideitandshowit
        //againwhenthemousemoves
        this.$document.on('keydown.snippets_menu',()=>{
            this.__overlayKeyWasDown=true;
            this.snippetEditors.forEach(editor=>{
                editor.toggleOverlayVisibility(false);
            });
        });
        this.$document.on('mousemove.snippets_menu,mousedown.snippets_menu',_.throttle(()=>{
            if(!this.__overlayKeyWasDown){
                return;
            }
            this.__overlayKeyWasDown=false;
            this.snippetEditors.forEach(editor=>{
                editor.toggleOverlayVisibility(true);
                editor.cover();
            });
        },250));

        //Hidetheactiveoverlaywhenscrolling.
        //Showitagainandrecomputealltheoverlaysafterthescroll.
        this.$scrollingElement=$().getScrollingElement();
        this.$scrollingTarget=this.$scrollingElement.is(this.ownerDocument.scrollingElement)
            ?$(this.ownerDocument.defaultView)
            :this.$scrollingElement;
        this._onScrollingElementScroll=_.throttle(()=>{
            for(consteditorofthis.snippetEditors){
                editor.toggleOverlayVisibility(false);
            }
            clearTimeout(this.scrollingTimeout);
            this.scrollingTimeout=setTimeout(()=>{
                this._scrollingTimeout=null;
                for(consteditorofthis.snippetEditors){
                    editor.toggleOverlayVisibility(true);
                    editor.cover();
                }
            },250);
        },50);
        //WeuseaddEventListenerinsteadofjQuerybecauseweneed'capture'.
        //Settingcapturetotrueallowstotakeadvantageofeventbubbling
        //foreventsthatotherwisedon’tsupportit.(e.g.usefulwhen
        //scrollingamodal)
        this.$scrollingTarget[0].addEventListener('scroll',this._onScrollingElementScroll,{capture:true});

        //Auto-selectstextelementswithaspecificclassandremovethis
        //ontextchanges
        this.$document.on('click.snippets_menu','.o_default_snippet_text',function(ev){
            $(ev.target).closest('.o_default_snippet_text').removeClass('o_default_snippet_text');
            $(ev.target).selectContent();
            $(ev.target).removeClass('o_default_snippet_text');
        });
        this.$document.on('keyup.snippets_menu',function(){
            varrange=Wysiwyg.getRange(this);
            $(range&&range.sc).closest('.o_default_snippet_text').removeClass('o_default_snippet_text');
        });

        const$autoFocusEls=$('.o_we_snippet_autofocus');
        this._activateSnippet($autoFocusEls.length?$autoFocusEls.first():false);

        //Addtooltipsonwe-titleelementswhosetextoverflows
        this.$el.tooltip({
            selector:'we-title',
            placement:'bottom',
            delay:100,
            title:function(){
                constel=this;
                //OnFirefox,el.scrollWidthisequaltoel.clientWidthwhen
                //overflow:hidden,soweneedtoupdatethestylebeforeto
                //gettherightvalues.
                el.style.setProperty('overflow','scroll','important');
                consttipContent=el.scrollWidth>el.clientWidth?el.innerHTML:'';
                el.style.removeProperty('overflow');
                returntipContent;
            },
        });

        returnPromise.all(defs).then(()=>{
            this.$('[data-title]').tooltip({
                delay:100,
                title:function(){
                    returnthis.classList.contains('active')?false:this.dataset.title;
                },
            });

            //Triggeraresizeeventonceenteringeditmodeasthesnippets
            //menuwilltakepartofthescreenwidth(delayedbecauseof
            //animation).(TODOwaitforrealanimationend)
            setTimeout(()=>{
                this.$window.trigger('resize');

                //Hackywaytopreventtoswitchtotexttoolsoneditor
                //start.Onlyallowswitchingaftersomedelay.Switchingto
                //toolsisonlyusefulforout-of-snippettextsanyway,so
                //snippettextscanstillbeenabledimmediately.
                this._mutex.exec(()=>this._textToolsSwitchingEnabled=true);
            },1000);
        });
    },
    /**
     *@override
     */
    destroy:function(){
        this._super.apply(this,arguments);
        if(this.$window){
            this.$snippetEditorArea.remove();
            this.$window.off('.snippets_menu');
            this.$document.off('.snippets_menu');

            if(this.$scrollingTarget){
                this.$scrollingTarget[0].removeEventListener('scroll',this._onScrollingElementScroll,{capture:true});
            }
        }
        core.bus.off('deactivate_snippet',this,this._onDeactivateSnippet);
        deletethis.cacheSnippetTemplate[this.options.snippets];
    },

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *Preparesthepagesothatitmaybesaved:
     *-Asksthesnippeteditorstocleantheirassociatedsnippet
     *-Removethe'contentEditable'attributes
     */
    cleanForSave:asyncfunction(){
        //TODOremovemeinmaster.Thiswasaddedasafixinstabletoremove
        //the"data-snippet"attributethatwasaddedonthe"span"elementof
        //the"Cover"snippetwhenmodifyingthe"Parallax"ofthesnippet.
        window.document.querySelectorAll("span[data-snippet='s_cover'][data-name='Cover']")
                    .forEach(el=>{
            deleteel.dataset["snippet"];
            deleteel.dataset["name"];
            constdirty=el.closest(".o_editable")||el;
            dirty.classList.add("o_dirty");
        });
        //Firstdisablethesnippetselection,callingoptionsonBlur,closing
        //widgets,etc.Thenwaitforfullresolutionofthemutexaswidgets
        //mayhavetriggeredsomefinaleditionrequeststhatneedtobe
        //processedbeforeactual"cleanforsave"andsaving.
        awaitthis._activateSnippet(false);
        awaitthis._mutex.getUnlockedDef();

        //Next,notifythatwewanttheDOMtobecleaned(e.g.inwebsitethis
        //maybethemomentwherethepublicwidgetsneedtobedestroyed).
        this.trigger_up('ready_to_clean_for_save');

        this.willDestroyEditors=true;
        //Thendestroyallsnippeteditors,makingthemcalltheirown
        //"cleanforsave"methods(andoptionsones).
        awaitthis._destroyEditors();

        //Finaleditorcleanup
        this.getEditableArea().find('[contentEditable]')
            .removeAttr('contentEditable')
            .removeProp('contentEditable');
        this.getEditableArea().find('.o_we_selected_image')
            .removeClass('o_we_selected_image');
    },
    /**
     *Loadsnippets.
     *@param{boolean}invalidateCache
     */
    loadSnippets:function(invalidateCache){
        if(!invalidateCache&&this.cacheSnippetTemplate[this.options.snippets]){
            this._defLoadSnippets=this.cacheSnippetTemplate[this.options.snippets];
            returnthis._defLoadSnippets;
        }
        this._defLoadSnippets=this._rpc({
            model:'ir.ui.view',
            method:'render_public_asset',
            args:[this.options.snippets,{}],
            kwargs:{
                context:this.options.context,
            },
        });
        this.cacheSnippetTemplate[this.options.snippets]=this._defLoadSnippets;
        returnthis._defLoadSnippets;
    },
    /**
     *Setstheinstancevariables$editor,$bodyandselectorEditableArea.
     *
     *@param{JQuery}$editor
     *@param{String}selectorEditableArea
     */
    setSelectorEditableArea:function($editor,selectorEditableArea){
        this.selectorEditableArea=selectorEditableArea;
        this.$editor=$editor;
        this.$body=$editor.closest('body');
    },
    /**
     *Gettheeditablearea.
     *
     *@returns{JQuery}
     */
    getEditableArea:function(){
        returnthis.$editor.find(this.selectorEditableArea)
            .add(this.$editor.filter(this.selectorEditableArea));
    },
    /**
     *Updatesthecoverdimensionsofthecurrentsnippeteditor.
     */
    updateCurrentSnippetEditorOverlay:function(){
        for(constsnippetEditorofthis.snippetEditors){
            if(snippetEditor.$target.closest('body').length){
                snippetEditor.cover();
                continue;
            }
            //Destroyoptionswhose$targetarenotintheDOManymorebut
            //onlydoitoncealloptionsexecutionsaredone.
            this._mutex.exec(()=>snippetEditor.destroy());
        }
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *CreatesdropzonesintheDOM(locationswheresnippetsmaybedropped).
     *ThoselocationsaredeterminedthankstothetwotypesofgivenDOM.
     *
     *@private
     *@param{jQuery}[$selectorSiblings]
     *       elementswhichmusthavesiblingsdropzones
     *@param{jQuery}[$selectorChildren]
     *       elementswhichmusthavechilddropzonesbetweeneachofexisting
     *       child
     */
    _activateInsertionZones:function($selectorSiblings,$selectorChildren){
        varself=this;

        //Ifamodaloradropdownisopen,thedropzonesmustbecreated
        //onlyinthiselement.
        const$editableArea=self.getEditableArea();
        let$open=$editableArea.find('.modal:visible');
        if(!$open.length){
            $open=$editableArea.find('.dropdown-menu.show').addBack('.dropdown-menu.show').parent();
        }
        if($open.length){
            $selectorSiblings=$open.find($selectorSiblings);
            $selectorChildren=$open.find($selectorChildren);
        }

        //Checkifthedropzoneshouldbehorizontalorvertical
        functionsetDropZoneDirection($elem,$parent,$sibling){
            varvertical=false;
            varstyle={};
            $sibling=$sibling||$elem;
            varcss=window.getComputedStyle($elem[0]);
            varparentCss=window.getComputedStyle($parent[0]);
            varfloat=css.float||css.cssFloat;
            vardisplay=parentCss.display;
            varflex=parentCss.flexDirection;
            if(float==='left'||float==='right'||(display==='flex'&&flex==='row')){
                style['float']=float;
                if($sibling.parent().width()!==$sibling.outerWidth(true)){
                    vertical=true;
                    style['height']=Math.max($sibling.outerHeight(),30)+'px';
                }
            }
            return{
                vertical:vertical,
                style:style,
            };
        }

        //IftheprevioussiblingisaBRtagoranon-whitespacetext,it
        //shouldbeaverticaldropzone.
        functiontestPreviousSibling(node,$zone){
            if(!node||((node.tagName||!node.textContent.match(/\S/))&&node.tagName!=='BR')){
                returnfalse;
            }
            return{
                vertical:true,
                style:{
                    'float':'none',
                    'display':'inline-block',
                    'height':parseInt(self.window.getComputedStyle($zone[0]).lineHeight)+'px',
                },
            };
        }

        //Firstly,addadropzoneaftertheclone
        var$clone=$('.oe_drop_clone');
        if($clone.length){
            var$neighbor=$clone.prev();
            if(!$neighbor.length){
                $neighbor=$clone.next();
            }
            vardata;
            if($neighbor.length){
                data=setDropZoneDirection($neighbor,$neighbor.parent());
            }else{
                data={
                    vertical:false,
                    style:{},
                };
            }
            self._insertDropzone($('<we-hook/>').insertAfter($clone),data.vertical,data.style);
        }

        if($selectorChildren){
            $selectorChildren.each(function(){
                vardata;
                var$zone=$(this);
                var$children=$zone.find('>:not(.oe_drop_zone,.oe_drop_clone)');

                if(!$zone.children().last().is('.oe_drop_zone')){
                    data=testPreviousSibling($zone[0].lastChild,$zone)
                        ||setDropZoneDirection($zone,$zone,$children.last());
                    self._insertDropzone($('<we-hook/>').appendTo($zone),data.vertical,data.style);
                }

                if(!$zone.children().first().is('.oe_drop_clone')){
                    data=testPreviousSibling($zone[0].firstChild,$zone)
                        ||setDropZoneDirection($zone,$zone,$children.first());
                    self._insertDropzone($('<we-hook/>').prependTo($zone),data.vertical,data.style);
                }
            });

            //addchildrenneardropzone
            $selectorSiblings=$(_.uniq(($selectorSiblings||$()).add($selectorChildren.children()).get()));
        }

        varnoDropZonesSelector='[data-invisible="1"],.o_we_no_overlay,:not(:visible),:not(:o_editable)';
        if($selectorSiblings){
            $selectorSiblings.not(`.oe_drop_zone,.oe_drop_clone,${noDropZonesSelector}`).each(function(){
                vardata;
                var$zone=$(this);
                var$zoneToCheck=$zone;

                while($zoneToCheck.prev(noDropZonesSelector).length){
                    $zoneToCheck=$zoneToCheck.prev();
                }
                if(!$zoneToCheck.prev('.oe_drop_zone:visible,.oe_drop_clone').length){
                    data=setDropZoneDirection($zone,$zone.parent());
                    self._insertDropzone($('<we-hook/>').insertBefore($zone),data.vertical,data.style);
                }

                $zoneToCheck=$zone;
                while($zoneToCheck.next(noDropZonesSelector).length){
                    $zoneToCheck=$zoneToCheck.next();
                }
                if(!$zoneToCheck.next('.oe_drop_zone:visible,.oe_drop_clone').length){
                    data=setDropZoneDirection($zone,$zone.parent());
                    self._insertDropzone($('<we-hook/>').insertAfter($zone),data.vertical,data.style);
                }
            });
        }

        varcount;
        var$zones;
        do{
            count=0;
            $zones=this.getEditableArea().find('.oe_drop_zone>.oe_drop_zone').remove();//norecursivezones
            count+=$zones.length;
            $zones.remove();
        }while(count>0);

        //Cleaningconsecutivezoneandupzonesplacedbetweenfloatingor
        //inlineelements.Wedonotlikethesekindofzones.
        $zones=this.getEditableArea().find('.oe_drop_zone:not(.oe_vertical)');
        $zones.each(function(){
            varzone=$(this);
            varprev=zone.prev();
            varnext=zone.next();
            //removeconsecutivezone
            if(prev.is('.oe_drop_zone')||next.is('.oe_drop_zone')){
                zone.remove();
                return;
            }
            varfloatPrev=prev.css('float')||'none';
            varfloatNext=next.css('float')||'none';
            vardispPrev=prev.css('display')||null;
            vardispNext=next.css('display')||null;
            if((floatPrev==='left'||floatPrev==='right')
             &&(floatNext==='left'||floatNext==='right')){
                zone.remove();
            }elseif(dispPrev!==null&&dispNext!==null
             &&dispPrev.indexOf('inline')>=0&&dispNext.indexOf('inline')>=0){
                zone.remove();
            }
        });
    },
    /**
     *Addsanentryforeveryinvisiblesnippetintheleftpanelbox.
     *Theentrieswillcontainsan'Edit'buttontoactivatetheirsnippet.
     *
     *@private
     *@returns{Promise}
     */
    _updateInvisibleDOM:function(){
        returnthis._execWithLoadingEffect(()=>{
            this.invisibleDOMMap=newMap();
            const$invisibleDOMPanelEl=$(this.invisibleDOMPanelEl);
            $invisibleDOMPanelEl.find('.o_we_invisible_entry').remove();
            const$invisibleSnippets=globalSelector.all().find('.o_snippet_invisible').addBack('.o_snippet_invisible');

            $invisibleDOMPanelEl.toggleClass('d-none',!$invisibleSnippets.length);

            constproms=_.map($invisibleSnippets,asyncel=>{
                consteditor=awaitthis._createSnippetEditor($(el));
                const$invisEntry=$('<div/>',{
                    class:'o_we_invisible_entryd-flexalign-items-centerjustify-content-between',
                    text:editor.getName(),
                }).append($('<i/>',{class:`fa${editor.isTargetVisible()?'fa-eye':'fa-eye-slash'}ml-2`}));
                $invisibleDOMPanelEl.append($invisEntry);
                this.invisibleDOMMap.set($invisEntry[0],el);
            });
            returnPromise.all(proms);
        },false);
    },
    /**
     *Disabletheoverlayeditoroftheactivesnippetandactivatethenewone
     *ifgiven.
     *Note1:ifthesnippeteditorassociatedtothegivensnippetisnot
     *        createdyet,thismethodwillcreateit.
     *Note2:ifthegivenDOMelementisnotasnippet(noeditoroption),the
     *        firstparentwhichisoneisusedinstead.
     *
     *@param{jQuery|false}$snippet
     *       TheDOMelementwhoseeditor(anditsparentones)needtobe
     *       enabled.Onlydisablethecurrentoneiffalseisgiven.
     *@param{boolean}[previewMode=false]
     *@param{boolean}[ifInactiveOptions=false]
     *@returns{Promise<SnippetEditor>}
     *         (mightbeasyncwhenaneditormustbecreated)
     */
    _activateSnippet:asyncfunction($snippet,previewMode,ifInactiveOptions){
        if(this._blockPreviewOverlays&&previewMode){
            return;
        }
        if($snippet&&!$snippet.is(':visible')){
            return;
        }
        //TakethefirstparentoftheprovidedDOM(oritself)which
        //shouldhaveanassociatedsnippeteditor.
        //Itisimportanttodothatbeforethemutexexeccalltocomputeit
        //beforepotentialancestorremoval.
        if($snippet&&$snippet.length){
            $snippet=globalSelector.closest($snippet);
        }
        constexec=previewMode
            ?action=>this._mutex.exec(action)
            :action=>this._execWithLoadingEffect(action,false);
        returnexec(()=>{
            returnnewPromise(resolve=>{
                if($snippet&&$snippet.length){
                    returnthis._createSnippetEditor($snippet).then(resolve);
                }
                resolve(null);
            }).then(asynceditorToEnable=>{
                if(!previewMode&&this._enabledEditorHierarchy[0]===editorToEnable
                        ||ifInactiveOptions&&this._enabledEditorHierarchy.includes(editorToEnable)){
                    returneditorToEnable;
                }

                if(!previewMode){
                    this._enabledEditorHierarchy=[];
                    letcurrent=editorToEnable;
                    while(current&&current.$target){
                        this._enabledEditorHierarchy.push(current);
                        current=current.getParent();
                    }
                }

                //Firstdisablealleditors...
                for(leti=this.snippetEditors.length;i--;){
                    consteditor=this.snippetEditors[i];
                    editor.toggleOverlay(false,previewMode);
                    if(!previewMode){
                        awaiteditor.toggleOptions(false);
                    }
                }
                //...ifnoeditorsaretobeenabled,lookifanyhavebeen
                //enabledpreviouslybyaclick
                if(!editorToEnable){
                     editorToEnable=this.snippetEditors.find(editor=>editor.isSticky());
                     previewMode=false;
                }
                //...thenenabletherighteditor
                if(editorToEnable){
                    editorToEnable.toggleOverlay(true,previewMode);
                    awaiteditorToEnable.toggleOptions(true);
                }

                returneditorToEnable;
            });
        });
    },
    /**
     *@private
     *@param{boolean}invalidateCache
     */
    _loadSnippetsTemplates:asyncfunction(invalidateCache){
        returnthis._execWithLoadingEffect(async()=>{
            awaitthis._destroyEditors();
            consthtml=awaitthis.loadSnippets(invalidateCache);
            awaitthis._computeSnippetTemplates(html);
        },false);
    },
    /**
     *@private
     *@param{jQuery|null|undefined}[$el]
     *       TheDOMelementwhoseinsideeditorsneedtobedestroyed.
     *       Ifnoelementisgiven,alltheeditorsaredestroyed.
     */
    _destroyEditors:asyncfunction($el){
        constproms=_.map(this.snippetEditors,asyncfunction(snippetEditor){
            if($el&&!$el.has(snippetEditor.$target).length){
                return;
            }
            awaitsnippetEditor.cleanForSave();

            //Noneedtocleanthe`this.snippetEditors`arrayaseach
            //individualdestroynotifiesthisclassinstancetoremovethe
            //elementfromthearray.
            snippetEditor.destroy();
        });
        awaitPromise.all(proms);
    },
    /**
     *Callsagivencallback'on'thegivensnippetandallitschildonesif
     *any(DOMelementwithoptions).
     *
     *Note:themethodcreatesthesnippeteditorsiftheydonotexistyet.
     *
     *@private
     *@param{jQuery}$snippet
     *@param{function}callback
     *       Giventwoarguments:thesnippeteditorassociatedtothesnippet
     *       beingmanagedandtheDOMelementofthissnippet.
     *@returns{Promise}(mightbeasyncifsnippeteditorsneedtobecreated
     *                    and/orthecallbackisasync)
     */
    _callForEachChildSnippet:function($snippet,callback){
        varself=this;
        vardefs=_.map($snippet.add(globalSelector.all($snippet)),function(el){
            var$snippet=$(el);
            returnself._createSnippetEditor($snippet).then(function(editor){
                if(editor){
                    returncallback.call(self,editor,$snippet);
                }
            });
        });
        returnPromise.all(defs);
    },
    /**
     *@private
     */
    _closeWidgets:function(){
        this.snippetEditors.forEach(editor=>editor.closeWidgets());
    },
    /**
     *Createsandreturnsasetofhelperfunctionswhichcanhelpfinding
     *snippetsintheDOMwhichmatchsomeparameters(typicallyparameters
     *givenbyasnippetoption).Thefunctionsare:
     *
     *-`is`:todetermineifagivenDOMisasnippetthatmatchesthe
     *        parameters
     *
     *-`closest`:findclosestparent(oritself)ofagivenDOMwhichisa
     *             snippetthatmatchestheparameters
     *
     *-`all`:findallsnippetsintheDOMthatmatchtheparameters
     *
     *Seeimplementationforfunctiondetails.
     *
     *@private
     *@param{string}selector
     *       jQueryselectorthatDOMelementsmustmatchtobeconsideredas
     *       potentialsnippet.
     *@param{string}exclude
     *       jQueryselectorthatDOMelementsmust*not*matchtobe
     *       consideredaspotentialsnippet.
     *@param{string|false}target
     *       jQueryselectorthatatleastonechildofaDOMelementmust
     *       matchtothatDOMelementbeconsideredasapotentialsnippet.
     *@param{boolean}noCheck
     *       trueifDOMelementswhicharetechnicallynotinaneditable
     *       environmentmaybeconsidered.
     *@param{boolean}isChildren
     *       whentheDOMelementsmustbeinaneditableenvironmenttobe
     *       considered(@seenoCheck),thisistrueiftheDOMelements'
     *       parentmustalsobeinaneditableenvironmenttobeconsidered.
     *@param{string}excludeParent
     *       jQueryselectorthattheparentsofDOMelementsmust*not*match
     *       tobeconsideredaspotentialsnippet.
     */
    _computeSelectorFunctions:function(selector,exclude,target,noCheck,isChildren,excludeParent){
        varself=this;

        exclude+=`${exclude&&','}.o_snippet_not_selectable`;

        letfilterFunc=function(){
            return!$(this).is(exclude);
        };
        if(target){
            constoldFilter=filterFunc;
            filterFunc=function(){
                returnoldFilter.apply(this)&&$(this).find(target).length!==0;
            };
        }
        if(excludeParent){
            constoldFilter=filterFunc;
            filterFunc=function(){
                returnoldFilter.apply(this)&&!$(this).parent().is(excludeParent);
            };
        }

        //Preparethefunctions
        varfunctions={
            is:function($from){
                return$from.is(selector)&&$from.filter(filterFunc).length!==0;
            },
        };
        if(noCheck){
            functions.closest=function($from,parentNode){
                return$from.closest(selector,parentNode).filter(filterFunc);
            };
            functions.all=function($from){
                return($from?dom.cssFind($from,selector):$(selector)).filter(filterFunc);
            };
        }else{
            functions.closest=function($from,parentNode){
                varparents=self.getEditableArea().get();
                return$from.closest(selector,parentNode).filter(function(){
                    varnode=this;
                    while(node.parentNode){
                        if(parents.indexOf(node)!==-1){
                            returntrue;
                        }
                        node=node.parentNode;
                    }
                    returnfalse;
                }).filter(filterFunc);
            };
            functions.all=isChildren?function($from){
                returndom.cssFind($from||self.getEditableArea(),selector).filter(filterFunc);
            }:function($from){
                $from=$from||self.getEditableArea();
                return$from.filter(selector).add(dom.cssFind($from,selector)).filter(filterFunc);
            };
        }
        returnfunctions;
    },
    /**
     *Processesthegivensnippettemplatetoregistersnippetoptions,creates
     *draggablethumbnail,etc.
     *
     *@private
     *@param{string}html
     */
    _computeSnippetTemplates:function(html){
        varself=this;
        var$html=$(html);
        var$scroll=$html.siblings('#o_scroll');

        //TODOremovemeinmaster:introducedina14.0fixtoallowusersto
        //customizetheirnavbarwith'Boxed'websiteheader,whichtheycould
        //notbecauseofawrongXMLselectortheymaynotupdate.
        const$headerNavFix=$html.find('[data-js="HeaderNavbar"][data-selector="#wrapwrap>header>nav"]');
        if($headerNavFix.length){
            $headerNavFix[0].dataset.selector='#wrapwrap>headernav.navbar';
        }

        this.templateOptions=[];
        varselectors=[];
        var$styles=$html.find('[data-selector]');
        constsnippetAdditionDropIn=$styles.filter('#so_snippet_addition').data('drop-in');
        constoldFooterSnippetsSelector='footer.oe_structure>*';
        constnewFooterSnippetsSelector='footer#footer.oe_structure>*:not(.s_popup)';
        $styles.each(function(){
            var$style=$(this);
            varselector=$style.data('selector');
            varexclude=$style.data('exclude')||'';
            constexcludeParent=$style.attr('id')==="so_content_addition"?snippetAdditionDropIn:'';

            //TODOtoremoveinmaster:theCarouselsnippethasa`content`
            //classinits`.row`elementswhichmakesdropzonesappearwhen
            //dragginginnercontent,allowingthemtobedroppedintherow,
            //whereitshouldnotbethecase.
            if($style[0].getAttribute('id')==='so_content_addition'){
                letdropInPatch=$style[0].dataset.dropIn.split(',');
                dropInPatch=dropInPatch.map(selector=>selector==='.content'?'.content:not(.row)':selector);
                $style[0].dataset.dropIn=dropInPatch.join(',');
            }

            //Fixinstable:wehaveremovedtheoptionforsettingthe
            //backgroundcolorforsnippetsinthefooter.However,thisshould
            //notaffectthesnippetsinthe"Allpages"popupwhichisalso
            //locatedinthefooter.
            if(($style[0].dataset.js==='ColoredLevelBackground')&&exclude){
                exclude=exclude
                    .split(',')
                    .map(selector=>selector===oldFooterSnippetsSelector?newFooterSnippetsSelector:selector)
                    .join(',');
            }
            if(($style[0].dataset.js==='BackgroundToggler')){
                selector=selector
                    .split(',')
                    .map(selector=>selector===oldFooterSnippetsSelector?newFooterSnippetsSelector:selector)
                    .join(',');
            }

            //Fixinstable:beforethis,modifyingasnippet's"bg_filter"
            //alsoimpacteditschildsnippets(e.g.Carouselwitha
            //"bg_filter"thatcontainsasnippetwithalsoa"bg_filter").
            if($style[0].dataset.optionName==="colorFilter"){
                constweColorPickerEl=$style[0].querySelector('we-colorpicker');
                weColorPickerEl.dataset.applyTo=weColorPickerEl.dataset.applyTo
                    .split(',')
                    .map(selector=>selector==='.o_we_bg_filter'?'>.o_we_bg_filter':selector)
                    .join(',');
            }

            vartarget=$style.data('target');
            varnoCheck=$style.data('no-check');
            varoptionID=$style.data('js')||$style.data('option-name'); //usedintourjsasselector
            varoption={
                'option':optionID,
                'base_selector':selector,
                'base_exclude':exclude,
                'base_target':target,
                'selector':self._computeSelectorFunctions(selector,exclude,target,noCheck),
                '$el':$style,
                'drop-near':$style.data('drop-near')&&self._computeSelectorFunctions($style.data('drop-near'),'',false,noCheck,true,excludeParent),
                'drop-in':$style.data('drop-in')&&self._computeSelectorFunctions($style.data('drop-in'),'',false,noCheck),
                'data':_.extend({string:$style.attr('string')},$style.data()),
            };
            self.templateOptions.push(option);
            selectors.push(option.selector);
        });
        $styles.addClass('d-none');

        globalSelector.closest=function($from){
            var$temp;
            var$target;
            for(vari=0,len=selectors.length;i<len;i++){
                $temp=selectors[i].closest($from,$target&&$target[0]);
                if($temp.length){
                    $target=$temp;
                }
            }
            return$target||$();
        };
        globalSelector.all=function($from){
            var$target=$();
            for(vari=0,len=selectors.length;i<len;i++){
                $target=$target.add(selectors[i].all($from));
            }
            return$target;
        };
        globalSelector.is=function($from){
            for(vari=0,len=selectors.length;i<len;i++){
                if(selectors[i].is($from)){
                    returntrue;
                }
            }
            returnfalse;
        };

        this.$snippets=$scroll.find('.o_panel_body').children()
            .addClass('oe_snippet')
            .each((i,el)=>{
                const$snippet=$(el);
                constname=_.escape(el.getAttribute('name'));
                constthumbnailSrc=_.escape(el.dataset.oeThumbnail);
                const$sbody=$snippet.children().addClass('oe_snippet_body');
                constisCustomSnippet=!!el.closest('#snippet_custom');

                //Associatein-pagesnippetstotheirname
                //TODOIamnotsurethisisusefulanymoreanditshouldat
                //leastbemademorerobustusingdata-snippet
                letsnippetClasses=$sbody.attr('class').match(/s_[^]+/g);
                if(snippetClasses&&snippetClasses.length){
                    snippetClasses='.'+snippetClasses.join('.');
                }
                const$els=$(snippetClasses).not('[data-name]').add($sbody);
                $els.attr('data-name',name).data('name',name);

                //TODOAdaptineachstableversiontotargetspecific
                //snippets,removeinmaster.
                if($snippet[0].querySelector('form')&&!$snippet.data('oeForbidSanitize')){
                    //Instable,makesurethatexistingFORMsnippetscannot
                    //bedroppedinsanitizedHTMLmodelfields.
                    $snippet[0].dataset.oeForbidSanitize='form';
                }

                //Createthethumbnail
                const$thumbnail=$(`
                    <divclass="oe_snippet_thumbnail">
                        <divclass="oe_snippet_thumbnail_img"style="background-image:url(${thumbnailSrc});"/>
                        <spanclass="oe_snippet_thumbnail_title">${name}</span>
                    </div>
                `);
                $snippet.prepend($thumbnail);

                //Createtheinstallbutton(t-installfeature)ifnecessary
                constmoduleID=$snippet.data('moduleId');
                if(moduleID){
                    el.classList.add('o_snippet_install');
                    $thumbnail.append($('<button/>',{
                        class:'btnbtn-primaryo_install_btnw-100',
                        type:'button',
                        text:_t("Install"),
                    }));
                }

                //Createthedeletebuttonforcustomsnippets
                if(isCustomSnippet){
                    constbtnEl=document.createElement('we-button');
                    btnEl.dataset.snippetId=$snippet.data('oeSnippetId');
                    btnEl.classList.add('o_delete_btn','fa','fa-trash','btn','o_we_hover_danger');
                    btnEl.title=_.str.sprintf(_t("Delete%s"),name);
                    $snippet.append(btnEl);
                }
            })
            .not('[data-module-id]');

        //Hidescrollifnosnippetsdefined
        if(!this.$snippets.length){
            this.$el.detach();
        }

        //Registerthetextnodesthatneedstobeauto-selectedonclick
        this._registerDefaultTexts();

        //ForcenoneditableparttocontentEditable=false
        $html.find('.o_not_editable').attr('contentEditable',false);

        //TODOremovemein16.0:introducedina14.0fixtoallowusersto
        //switchbetweenthedifferenttabsofacustomtabseveninthe
        //editormode.Beforethisfix,itwasnotpossiblebecausethe
        //elementsofthetabslocatedonthewebsiteandtheelementsofthe
        //savetabslocatedontheeditorhadthesameid'ssotheanchors
        //werereferringtothewrongelements.
        for(constcustomTabPaneElof$html.find('#snippet_custom_body.tab-pane')){
            customTabPaneEl.removeAttribute('id');
        }

        //Addthecomputedtemplateandmakeelementsdraggable
        this.$el.html($html);
        this.$el.append(this.customizePanel);
        this.$el.append(this.textEditorPanelEl);
        this.$el.append(this.invisibleDOMPanelEl);
        this._makeSnippetDraggable(this.$snippets);
        this._disableUndroppableSnippets();

        this.$el.addClass('o_loaded');
        $('body.editor_enable').addClass('editor_has_snippets');
        this.trigger_up('snippets_loaded',self.$el);
    },
    /**
     *Createsasnippeteditortoassociatedtothegivensnippet.Ifthegiven
     *snippetalreadyhasalinkedsnippeteditor,thefunctiononlyreturns
     *thatone.
     *Thefunctionalsoinstantiatesasnippeteditorforallsnippetparents
     *asasnippeteditormustbeabletodisplaytheparentsnippetoptions.
     *
     *@private
     *@param{jQuery}$snippet
     *@returns{Promise<SnippetEditor>}
     */
    _createSnippetEditor:function($snippet){
        varself=this;
        varsnippetEditor=$snippet.data('snippet-editor');
        if(snippetEditor){
            returnsnippetEditor.__isStarted;
        }

        vardef;
        var$parent=globalSelector.closest($snippet.parent());
        if($parent.length){
            def=this._createSnippetEditor($parent);
        }

        returnPromise.resolve(def).then(function(parentEditor){
            //Whenreachingthisposition,afterthePromiseresolution,the
            //snippeteditorinstancemighthavebeencreatedbyanothercall
            //to_createSnippetEditor...thewholelogicshouldbeimproved
            //toavoiddoingthishere.
            snippetEditor=$snippet.data('snippet-editor');
            if(snippetEditor){
                returnsnippetEditor.__isStarted;
            }

            leteditableArea=self.getEditableArea();
            snippetEditor=newSnippetEditor(parentEditor||self,$snippet,self.templateOptions,$snippet.closest('[data-oe-type="html"],.oe_structure').add(editableArea),self.options);
            self.snippetEditors.push(snippetEditor);
            returnsnippetEditor.appendTo(self.$snippetEditorArea);
        }).then(function(){
            returnsnippetEditor;
        });
    },
    /**
     *Theremaybenolocationwheresomesnippetsmightbedropped.Thismades
     *themappeardisabledinthemenu.
     *
     *@todomakethemundraggable
     *@private
     */
    _disableUndroppableSnippets:function(){
        varself=this;
        varcache={};
        this.$snippets.each(function(){
            var$snippet=$(this);
            var$snippetBody=$snippet.find('.oe_snippet_body');
            constisSanitizeForbidden=$snippet.data('oeForbidSanitize');
            constfilterSanitize=isSanitizeForbidden==='form'
                ?$els=>$els.filter((i,el)=>!el.closest('[data-oe-sanitize]:not([data-oe-sanitize="allow_form"])'))
                :isSanitizeForbidden
                    ?$els=>$els.filter((i,el)=>!el.closest('[data-oe-sanitize]'))
                    :$els=>$els;

            varcheck=false;
            _.each(self.templateOptions,function(option,k){
                if(check||!($snippetBody.is(option.base_selector)&&!$snippetBody.is(option.base_exclude))){
                    return;
                }

                k=isSanitizeForbidden?'forbidden/'+k:k;
                cache[k]=cache[k]||{
                    'drop-near':option['drop-near']?filterSanitize(option['drop-near'].all()).length:0,
                    'drop-in':option['drop-in']?filterSanitize(option['drop-in'].all()).length:0,
                };
                check=(cache[k]['drop-near']||cache[k]['drop-in']);
            });

            $snippet.toggleClass('o_disabled',!check);
            $snippet.attr('title',check?'':_t("Nolocationtodropin"));
            const$icon=$snippet.find('.o_snippet_undroppable').remove();
            if(check){
                $icon.remove();
            }elseif(!$icon.length){
                constimgEl=document.createElement('img');
                imgEl.classList.add('o_snippet_undroppable');
                imgEl.src='/web_editor/static/src/img/snippet_disabled.svg';
                $snippet.append(imgEl);
            }
        });
    },
    /**
     *@private
     *@param{string}[search]
     */
    _filterSnippets(search){
        constsearchInputEl=this.el.querySelector('.o_snippet_search_filter_input');
        constsearchInputReset=this.el.querySelector('.o_snippet_search_filter_reset');
        if(search!==undefined){
            searchInputEl.value=search;
        }else{
            search=searchInputEl.value;
        }
        search=search.toLowerCase();
        searchInputReset.classList.toggle('d-none',!search);
        conststrMatches=str=>!search||str.toLowerCase().includes(search);
        for(constpanelElofthis.el.querySelectorAll('.o_panel')){
            lethasVisibleSnippet=false;
            constpanelTitle=panelEl.querySelector('.o_panel_header').textContent;
            constisPanelTitleMatch=strMatches(panelTitle);
            for(constsnippetElofpanelEl.querySelectorAll('.oe_snippet')){
                constmatches=(isPanelTitleMatch
                    ||strMatches(snippetEl.getAttribute('name'))
                    ||strMatches(snippetEl.dataset.oeKeywords||''));
                if(matches){
                    hasVisibleSnippet=true;
                }
                snippetEl.classList.toggle('d-none',!matches);
            }
            panelEl.classList.toggle('d-none',!hasVisibleSnippet);
        }
    },
    /**
     *@private
     *@param{Object}[options={}]
     *@returns{Object}
     */
    _getScrollOptions(options={}){
        returnObject.assign({},options,{
            scrollBoundaries:Object.assign({
                right:false,
            },options.scrollBoundaries),
            jQueryDraggableOptions:Object.assign({
                appendTo:this.$body,
                cursor:'move',
                greedy:true,
                scroll:false,
            },options.jQueryDraggableOptions),
            disableHorizontalScroll:true,
        });
    },
    /**
     *CreatesadropzoneelementandinsertsitbyreplacingthegivenjQuery
     *location.Thisallowstoadddataonthedropzonedependingonthehook
     *environment.
     *
     *@private
     *@param{jQuery}$hook
     *@param{boolean}[vertical=false]
     *@param{Object}[style]
     */
    _insertDropzone:function($hook,vertical,style){
        //TODODonethiswayinstablebutshouldbeaparameterinmaster.
        letforbidSanitize;
        if(this._insertDropzoneCanBeSanitizedUnless==='form'){
            forbidSanitize=$hook.closest('[data-oe-sanitize]:not([data-oe-sanitize="allow_form"])').length;
        }else{
            forbidSanitize=!this._insertDropzoneCanBeSanitizedUnless&&$hook.closest('[data-oe-sanitize]').length;
        }
        var$dropzone=$('<div/>',{
            'class':'oe_drop_zoneoe_insert'+(vertical?'oe_vertical':'')+
                (forbidSanitize?'text-centeroe_drop_zone_danger':''),
        });
        if(style){
            $dropzone.css(style);
        }
        if(forbidSanitize){
            $dropzone[0].appendChild(document.createTextNode(
                _t("Fortechnicalreasons,thisblockcannotbedroppedhere")
            ));
        }
        $hook.replaceWith($dropzone);
        return$dropzone;
    },
    /**
     *Makegivensnippetsbedraggable/droppablethankstotheirthumbnail.
     *
     *@private
     *@param{jQuery}$snippets
     */
    _makeSnippetDraggable:function($snippets){
        varself=this;
        var$toInsert,dropped,$snippet;
        let$dropZones;

        letdragAndDropResolve;
        const$scrollingElement=$().getScrollingElement();

        constsmoothScrollOptions=this._getScrollOptions({
            jQueryDraggableOptions:{
                handle:'.oe_snippet_thumbnail:not(.o_we_already_dragging)',
                cancel:'.oe_snippet.o_disabled',
                helper:function(){
                    constdragSnip=this.cloneNode(true);
                    dragSnip.querySelectorAll('.o_delete_btn').forEach(
                        el=>el.remove()
                    );
                    returndragSnip;
                },
                start:function(){
                    constprom=newPromise(resolve=>dragAndDropResolve=()=>resolve());
                    self._mutex.exec(()=>prom);

                    self.$el.find('.oe_snippet_thumbnail').addClass('o_we_already_dragging');

                    dropped=false;
                    $snippet=$(this);
                    var$baseBody=$snippet.find('.oe_snippet_body');
                    var$selectorSiblings=$();
                    var$selectorChildren=$();
                    vartemp=self.templateOptions;
                    for(varkintemp){
                        if($baseBody.is(temp[k].base_selector)&&!$baseBody.is(temp[k].base_exclude)){
                            if(temp[k]['drop-near']){
                                $selectorSiblings=$selectorSiblings.add(temp[k]['drop-near'].all());
                            }
                            if(temp[k]['drop-in']){
                                $selectorChildren=$selectorChildren.add(temp[k]['drop-in'].all());
                            }
                        }
                    }

                    //TODOmentioningexternalappsnippetbutdoneasastablefix
                    //thatwillbeadaptedinmaster:ifpopupsnippet,donot
                    //allowtoadditinanothersnippet
                    if($baseBody[0].matches('.s_popup,.o_newsletter_popup')){
                        $selectorChildren=$selectorChildren.not('[data-snippet]*');
                    }
                    //TODOInmaster,donotreferenceothermoduleclass+
                    //findabettersystemtodefinesuchcases+avoid
                    //duplicatedcode(drag&dropfromeditorpanel+drag&
                    //dropfrommovebuttonofexistingblock).
                    //PreventdroppingToCinsideanotherToC.
                    //grep:NO_DOUBLE_TOC
                    if($baseBody[0].classList.contains('s_table_of_content')){
                        $selectorChildren=$selectorChildren.filter((i,el)=>!el.closest('.s_table_of_content'));
                    }

                    $toInsert=$baseBody.clone();
                    //Color-customizedynamicSVGsindroppedsnippetswithcurrentthemecolors.
                    [...$toInsert.find('img[src^="/web_editor/shape/"]')].forEach(dynamicSvg=>{
                        constcolorCustomizedURL=newURL(dynamicSvg.getAttribute('src'),window.location.origin);
                        colorCustomizedURL.searchParams.set('c1',getCSSVariableValue('o-color-1'));
                        dynamicSvg.src=colorCustomizedURL.pathname+colorCustomizedURL.search;
                    });

                    if(!$selectorSiblings.length&&!$selectorChildren.length){
                        console.warn($snippet.find('.oe_snippet_thumbnail_title').text()+"havenotinsertaction:data-drop-nearordata-drop-in");
                        return;
                    }

                    //TODODonethiswayinstablebutshouldbeaparameterin
                    //master.
                    constforbidSanitize=$snippet.data('oeForbidSanitize');
                    self._insertDropzoneCanBeSanitizedUnless=forbidSanitize==='form'?'form':!forbidSanitize;
                    self._activateInsertionZones($selectorSiblings,$selectorChildren);
                    deleteself._insertDropzoneCanBeSanitizedUnless;
                    $dropZones=self.getEditableArea().find('.oe_drop_zone');
                    if(forbidSanitize==='form'){
                        $dropZones=$dropZones.filter((i,el)=>!el.closest('[data-oe-sanitize]:not([data-oe-sanitize="allow_form"]).oe_drop_zone'));
                    }elseif(forbidSanitize){
                        $dropZones=$dropZones.filter((i,el)=>!el.closest('[data-oe-sanitize].oe_drop_zone'));
                    }
                    $dropZones.droppable({
                        over:function(){
                            if(dropped){
                                $toInsert.detach();
                                $toInsert.addClass('oe_snippet_body');
                                $('.oe_drop_zone').removeClass('invisible');
                            }
                            dropped=true;
                            $(this).first().after($toInsert).addClass('invisible');
                            $toInsert.removeClass('oe_snippet_body');
                        },
                        out:function(){
                            varprev=$toInsert.prev();
                            if(this===prev[0]){
                                dropped=false;
                                $toInsert.detach();
                                $(this).removeClass('invisible');
                                $toInsert.addClass('oe_snippet_body');
                            }
                        },
                    });
                    //Ifamodalisopen,thescrolltargetmustbethatmodal
                    const$openModal=self.getEditableArea().find('.modal:visible');
                    self.draggableComponent.$scrollTarget=$openModal.length?$openModal:$scrollingElement;

                    //TriggerascrollonthedraggableelementsothatjQueryupdates
                    //thepositionofthedropzones.
                    self.draggableComponent.$scrollTarget.on('scroll.scrolling_element',function(){
                        self.$el.trigger('scroll');
                    });
                },
                stop:asyncfunction(ev,ui){
                    $toInsert.removeClass('oe_snippet_body');
                    self.draggableComponent.$scrollTarget.off('scroll.scrolling_element');

                    if(!dropped&&ui.position.top>3&&ui.position.left+ui.helper.outerHeight()<self.el.getBoundingClientRect().left){
                        var$el=$.nearest({x:ui.position.left,y:ui.position.top},'.oe_drop_zone',{container:document.body}).first();
                        //Somedropzonesmighthavebeendisabled.
                        $el=$el.filter($dropZones);
                        if($el.length){
                            $el.after($toInsert);
                            dropped=true;
                        }
                    }

                    $dropZones.droppable('destroy');
                    self.getEditableArea().find('.oe_drop_zone').remove();

                    if(dropped){
                        varprev=$toInsert.first()[0].previousSibling;
                        varnext=$toInsert.last()[0].nextSibling;

                        if(prev){
                            $toInsert.detach();
                            self.trigger_up('request_history_undo_record',{$target:$(prev)});
                            $toInsert.insertAfter(prev);
                        }elseif(next){
                            $toInsert.detach();
                            self.trigger_up('request_history_undo_record',{$target:$(next)});
                            $toInsert.insertBefore(next);
                        }else{
                            var$parent=$toInsert.parent();
                            $toInsert.detach();
                            self.trigger_up('request_history_undo_record',{$target:$parent});
                            $parent.prepend($toInsert);
                        }

                        var$target=$toInsert;
                        awaitself._scrollToSnippet($target);

                        _.defer(asyncfunction(){
                            self.trigger_up('snippet_dropped',{$target:$target});
                            self._disableUndroppableSnippets();

                            dragAndDropResolve();

                            awaitself._callForEachChildSnippet($target,function(editor,$snippet){
                                returneditor.buildSnippet();
                            });
                            $target.trigger('content_changed');
                            awaitself._updateInvisibleDOM();

                            self.$el.find('.oe_snippet_thumbnail').removeClass('o_we_already_dragging');
                        });
                    }else{
                        $toInsert.remove();
                        dragAndDropResolve();
                        self.$el.find('.oe_snippet_thumbnail').removeClass('o_we_already_dragging');
                    }
                },
            },
        });
        this.draggableComponent=newSmoothScrollOnDrag(this,$snippets,$scrollingElement,smoothScrollOptions);
    },
    /**
     *Addsthe'o_default_snippet_text'classonnodeswhichcontainonly
     *non-emptytextnodes.Thosenodesarethenauto-selectedbytheeditor
     *whentheyareclicked.
     *
     *@private
     *@param{jQuery}[$in]-theelementinwhichtosearch,defaulttothe
     *                      snippetbodiesinthemenu
     */
    _registerDefaultTexts:function($in){
        if($in===undefined){
            $in=this.$snippets.find('.oe_snippet_body');
        }

        $in.find('*').addBack()
            .contents()
            .filter(function(){
                returnthis.nodeType===3&&this.textContent.match(/\S/);
            }).parent().addClass('o_default_snippet_text');
    },
    /**
     *Changesthecontentoftheleftpanelandselectsatab.
     *
     *@private
     *@param{htmlString|Element|Text|Array|jQuery}[content]
     *thenewcontentofthecustomizePanel
     *@param{this.tabs.VALUE}[tab='blocks']-thetabtoselect
     */
    _updateLeftPanelContent:function({content,tab}){
        clearTimeout(this._textToolsSwitchingTimeout);
        this._closeWidgets();

        tab=tab||this.tabs.BLOCKS;

        if(content){
            while(this.customizePanel.firstChild){
                this.customizePanel.removeChild(this.customizePanel.firstChild);
            }
            $(this.customizePanel).append(content);
        }

        this.$('.o_snippet_search_filter').toggleClass('d-none',tab!==this.tabs.BLOCKS);
        this.$('#o_scroll').toggleClass('d-none',tab!==this.tabs.BLOCKS);
        this.customizePanel.classList.toggle('d-none',tab===this.tabs.BLOCKS);
        this.textEditorPanelEl.classList.toggle('d-none',tab!==this.tabs.OPTIONS);

        this.$('.o_we_add_snippet_btn').toggleClass('active',tab===this.tabs.BLOCKS);
        this.$('.o_we_customize_snippet_btn').toggleClass('active',tab===this.tabs.OPTIONS)
                                             .prop('disabled',tab!==this.tabs.OPTIONS);

    },
    /**
     *Scrollstogivensnippet.
     *
     *@private
     *@param{jQuery}$el-snippettoscrollto
     *@return{Promise}
     */
    async_scrollToSnippet($el){
        //Don'tscrollif$elisaddedtoavisiblepopupthatdoesnotfill
        //thepage(otherwisethepagewouldscrolltoarandomlocation).
        constmodalEl=$el[0].closest('.modal');
        if(modalEl&&!dom.hasScrollableContent(modalEl)){
            return;
        }
        returndom.scrollTo($el[0],{extraOffset:50});
    },
    /**
     *@private
     *@returns{HTMLElement}
     */
    _createLoadingElement(){
        constloaderContainer=document.createElement('div');
        constloader=document.createElement('i');
        constloaderContainerClassList=[
            'o_we_ui_loading',
            'd-flex',
            'justify-content-center',
            'align-items-center',
        ];
        constloaderClassList=[
            'fa',
            'fa-circle-o-notch',
            'fa-spin',
            'fa-4x',
        ];
        loaderContainer.classList.add(...loaderContainerClassList);
        loader.classList.add(...loaderClassList);
        loaderContainer.appendChild(loader);
        returnloaderContainer;
    },
    /**
     *Addstheactiontothemutexqueueandsetsaloadingeffectoverthe
     *editortoappeariftheactiontakestoomuchtime.
     *Assoonasthemutexisunlocked,theloadingeffectwillberemoved.
     *
     *@private
     *@param{function}action
     *@param{boolean}[contentLoading=true]
     *@param{number}[delay=500]
     *@returns{Promise}
     */
    async_execWithLoadingEffect(action,contentLoading=true,delay=500){
        constmutexExecResult=this._mutex.exec(action);
        if(!this.loadingTimers[contentLoading]){
            constaddLoader=()=>{
                if(this.loadingElements[contentLoading]){
                    return;
                }
                this.loadingElements[contentLoading]=this._createLoadingElement();
                if(contentLoading){
                    this.$snippetEditorArea.append(this.loadingElements[contentLoading]);
                }else{
                    this.el.appendChild(this.loadingElements[contentLoading]);
                }
            };
            if(delay){
                this.loadingTimers[contentLoading]=setTimeout(addLoader,delay);
            }else{
                addLoader();
            }
            this._mutex.getUnlockedDef().then(()=>{
                //Note:weremovetheloadingelementattheendofthe
                //executionqueue*evenifsubsequentactionsarecontent
                //relatedornot*.Thisisalimitationoftheloadingfeature,
                //thegoalisstilltolimitthenumberofelementsinthat
                //queueanyway.
                if(delay){
                    clearTimeout(this.loadingTimers[contentLoading]);
                    this.loadingTimers[contentLoading]=undefined;
                }

                if(this.loadingElements[contentLoading]){
                    this.loadingElements[contentLoading].remove();
                    this.loadingElements[contentLoading]=null;
                }
            });
        }
        returnmutexExecResult;
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *Calledwhenachildeditorasksforinsertionzonestobeenabled.
     *
     *@private
     *@param{FlectraEvent}ev
     */
    _onActivateInsertionZones:function(ev){
        //TODODonethiswayinstablebutshouldbeaparameterinmaster.
        this._insertDropzoneCanBeSanitizedUnless=ev.data.canBeSanitizedUnless;
        this._activateInsertionZones(ev.data.$selectorSiblings,ev.data.$selectorChildren);
        deletethis._insertDropzoneCanBeSanitizedUnless;
    },
    /**
     *Calledwhenachildeditoraskstodeactivatethecurrentsnippet
     *overlay.
     *
     *@private
     */
    _onActivateSnippet:function(ev){
        this._activateSnippet(ev.data.$snippet,ev.data.previewMode,ev.data.ifInactiveOptions);
    },
    /**
     *Calledwhenachildeditoraskstooperatesomeoperationonallchild
     *snippetofaDOMelement.
     *
     *@private
     *@param{FlectraEvent}ev
     */
    _onCallForEachChildSnippet:function(ev){
        constprom=this._callForEachChildSnippet(ev.data.$snippet,ev.data.callback);
        if(ev.data.onSuccess){
            prom.then(()=>ev.data.onSuccess());
        }
    },
    /**
     *Calledwhentheoverlaydimensions/positionsshouldberecomputed.
     *
     *@private
     *@param{FlectraEvent}ev
     */
    _onOverlaysCoverUpdate:function(ev){
        this.snippetEditors.forEach(editor=>{
            if(ev.data.overlayVisible){
                editor.toggleOverlayVisibility(true);
            }
            editor.cover();
        });
    },
    /**
     *Calledwhenachildeditoraskstocloneasnippet,allowstocorrectly
     *callthe_onClonemethodsiftheelement'seditorhasone.
     *
     *@private
     *@param{FlectraEvent}ev
     */
    _onCloneSnippet:asyncfunction(ev){
        ev.stopPropagation();
        consteditor=awaitthis._createSnippetEditor(ev.data.$snippet);
        awaiteditor.clone();
        if(ev.data.onSuccess){
            ev.data.onSuccess();
        }
    },
    /**
     *Calledwhenachildeditoraskstodeactivatethecurrentsnippet
     *overlay.
     *
     *@private
     */
    _onDeactivateSnippet:function(){
        this._activateSnippet(false);
    },
    /**
     *Calledwhenasnippethasmovedinthepage.
     *
     *@private
     *@param{FlectraEvent}ev
     */
    _onDragAndDropStop:asyncfunction(ev){
        constmodalEl=ev.data.$snippet[0].closest('.modal');
        constcarouselItemEl=ev.data.$snippet[0].closest('.carousel-item');
        //Ifthesnippetisinamodal,destroyeditorsonlyinthatmodal.
        //ThistopreventthemodalfromclosingbecauseofthecleanForSave
        //oneacheditors.Samethingfor'carousel-item',otherwiseallthe
        //editorsofthe'carousel'aredestroyedandthe'carousel'jumpsto
        //firstslide.
        awaitthis._destroyEditors(carouselItemEl?$(carouselItemEl):modalEl?$(modalEl):null);
        awaitthis._activateSnippet(ev.data.$snippet);
    },
    /**
     *Returnsthedroppablesnippetfromwhichadroppedsnippetoriginates.
     *
     *@private
     *@param{FlectraEvent}ev
     */
    _onFindSnippetTemplate(ev){
        this.$snippets.each(function(){
            constsnippetBody=this.querySelector(`.oe_snippet_body[data-snippet=${ev.data.snippet.dataset.snippet}]`);
            if(snippetBody){
                ev.data.callback(snippetBody.parentElement);
                returnfalse;
            }
        });
    },
    /**
     *Calledwhenasnippeteditoraskedtodisableitselfandtoenableits
     *parentinstead.
     *
     *@private
     *@param{FlectraEvent}ev
     */
    _onGoToParent:function(ev){
        ev.stopPropagation();
        this._activateSnippet(ev.data.$snippet.parent());
    },
    /**
     *@private
     */
    _onHideOverlay:function(){
        for(consteditorofthis.snippetEditors){
            editor.toggleOverlay(false);
        }
    },
    /**
     *@private
     *@param{Event}ev
     */
    _onInstallBtnClick:function(ev){
        varself=this;
        var$snippet=$(ev.currentTarget).closest('[data-module-id]');
        varmoduleID=$snippet.data('moduleId');
        varname=$snippet.attr('name');
        newDialog(this,{
            title:_.str.sprintf(_t("Install%s"),name),
            size:'medium',
            $content:$('<div/>',{text:_.str.sprintf(_t("Doyouwanttoinstallthe%sApp?"),name)}).append(
                $('<a/>',{
                    target:'_blank',
                    href:'/web#id='+encodeURIComponent(moduleID)+'&view_type=form&model=ir.module.module&action=base.open_module_tree',
                    text:_t("Moreinfoaboutthisapp."),
                    class:'ml4',
                })
            ),
            buttons:[{
                text:_t("SaveandInstall"),
                classes:'btn-primary',
                click:function(){
                    this.$footer.find('.btn').toggleClass('o_hidden');
                    this._rpc({
                        model:'ir.module.module',
                        method:'button_immediate_install',
                        args:[[moduleID]],
                    }).then(()=>{
                        self.trigger_up('request_save',{
                            reloadEditor:true,
                            _toMutex:true,
                        });
                    }).guardedCatch(reason=>{
                        reason.event.preventDefault();
                        this.close();
                        self.displayNotification({
                            message:_.str.sprintf(_t("Couldnotinstallmodule<strong>%s</strong>"),name),
                            type:'danger',
                            sticky:true,
                        });
                    });
                },
            },{
                text:_t("Installinprogress"),
                icon:'fa-spinfa-spinnerfa-pulsemr8',
                classes:'btn-primarydisabledo_hidden',
            },{
                text:_t("Cancel"),
                close:true,
            }],
        }).open();
    },
    /**
     *@private
     *@param{Event}ev
     */
    _onInvisibleEntryClick:asyncfunction(ev){
        ev.preventDefault();
        const$snippet=$(this.invisibleDOMMap.get(ev.currentTarget));
        constisVisible=awaitthis._execWithLoadingEffect(async()=>{
            consteditor=awaitthis._createSnippetEditor($snippet);
            returneditor.toggleTargetVisibility();
        },true);
        $(ev.currentTarget).find('.fa')
            .toggleClass('fa-eye',isVisible)
            .toggleClass('fa-eye-slash',!isVisible);
        returnthis._activateSnippet(isVisible?$snippet:false);
    },
    /**
     *@private
     */
    _onBlocksTabClick:function(ev){
        this._activateSnippet(false).then(()=>{
            this._updateLeftPanelContent({
                content:[],
                tab:this.tabs.BLOCKS,
            });
        });
    },
    /**
     *@private
     */
    _onDeleteBtnClick:function(ev){
        const$snippet=$(ev.target).closest('.oe_snippet');
        constsnippetId=parseInt(ev.currentTarget.dataset.snippetId);
        ev.stopPropagation();
        newDialog(this,{
            size:'medium',
            title:_t('Confirmation'),
            $content:$('<div><p>'+_.str.sprintf(_t("Areyousureyouwanttodeletethesnippet:%s?"),$snippet.attr('name'))+'</p></div>'),
            buttons:[{
                text:_t("Yes"),
                close:true,
                classes:'btn-primary',
                click:async()=>{
                    awaitthis._rpc({
                        model:'ir.ui.view',
                        method:'delete_snippet',
                        kwargs:{
                            'view_id':snippetId,
                            'template_key':this.options.snippets,
                        },
                    });
                    awaitthis._loadSnippetsTemplates(true);
                },
            },{
                text:_t("No"),
                close:true,
            }],
        }).open();
    },
    /**
     *Preventspointer-eventstochangethefocuswhenapointerslidefrom
     *left-paneltotheeditablearea.
     *
     *@private
     */
    _onMouseDown:function(){
        const$blockedArea=$('#wrapwrap');//TODOshouldgetthatelementanotherway
        $blockedArea.addClass('o_we_no_pointer_events');
        constreenable=()=>$blockedArea.removeClass('o_we_no_pointer_events');
        //UseasetTimeoutfallbacktoavoidlockingtheeditorifthemouseup
        //isfiredoveranelementwhichstopspropagationforexample.
        constenableTimeoutID=setTimeout(()=>reenable(),5000);
        $(document).one('mouseup',()=>{
            clearTimeout(enableTimeoutID);
            reenable();
        });
    },
    /**
     *@private
     *@param{FlectraEvent}ev
     */
    _onGetSnippetVersions:function(ev){
        constsnippet=this.el.querySelector(`.oe_snippet>[data-snippet="${ev.data.snippetName}"]`);
        ev.data.onSuccess(snippet&&{
            vcss:snippet.dataset.vcss,
            vjs:snippet.dataset.vjs,
            vxml:snippet.dataset.vxml,
        });
    },
    /**
     *UNUSED:usedtobecalledwhensavingacustomsnippet.Wenowsaveand
     *reloadthepagewhensavingacustomsnippetsothatalltheDOMcleanup
     *mechanismsarerunbeforesaving.Keptforcompatibility.
     *
     *TODO:removeinmaster/findawaytocleantheDOMwithoutsave+reload
     *
     *@private
     */
    _onReloadSnippetTemplate:asyncfunction(ev){
        awaitthis._activateSnippet(false);
        awaitthis._loadSnippetsTemplates(true);
    },
    /**
     *@private
     */
    _onBlockPreviewOverlays:function(ev){
        this._blockPreviewOverlays=true;
    },
    /**
     *@private
     */
    _onUnblockPreviewOverlays:function(ev){
        this._blockPreviewOverlays=false;
    },
    /**
     *@private
     *@param{FlectraEvent}ev
     */
    _onRemoveSnippet:asyncfunction(ev){
        ev.stopPropagation();
        consteditor=awaitthis._createSnippetEditor(ev.data.$snippet);
        awaiteditor.removeSnippet();
        if(ev.data.onSuccess){
            ev.data.onSuccess();
        }
    },
    /**
     *SavingwilldestroyalleditorssincetheyneedtocleantheirDOM.
     *Thishasthustobedonewhentheyareallfinisheddoingtheirwork.
     *
     *@private
     */
    _onSaveRequest:function(ev){
        constdata=ev.data;
        if(ev.target===this&&!data._toMutex){
            return;
        }
        deletedata._toMutex;
        ev.stopPropagation();
        this._execWithLoadingEffect(()=>{
            if(data.reloadEditor){
                data.reload=false;
                constoldOnSuccess=data.onSuccess;
                data.onSuccess=asyncfunction(){
                    if(oldOnSuccess){
                        awaitoldOnSuccess.call(this,...arguments);
                    }
                    window.location.href=window.location.origin+window.location.pathname+'?enable_editor=1';
                };
            }
            this.trigger_up('request_save',data);
        },true);
    },
    /**
     *@private
     */
    _onSnippetClick(){
        const$els=this.getEditableArea().find('.oe_structure.oe_empty').addBack('.oe_structure.oe_empty');
        for(constelof$els){
            if(!el.children.length){
                $(el).flectraBounce('o_we_snippet_area_animation');
            }
        }
    },
    /**
     *@private
     *@param{FlectraEvent}ev
     *@param{Object}ev.data
     *@param{function}ev.data.exec
     */
    _onSnippetEditionRequest:function(ev){
        this._execWithLoadingEffect(ev.data.exec,true);
    },
    /**
     *@private
     *@param{FlectraEvent}ev
     */
    _onSnippetEditorDestroyed(ev){
        ev.stopPropagation();
        constindex=this.snippetEditors.indexOf(ev.target);
        this.snippetEditors.splice(index,1);
    },
    /**
     *@private
     */
    _onSnippetCloned:function(ev){
        this._updateInvisibleDOM();
    },
    /**
     *Calledwhenasnippetisremoved->checksifthereisdraggablesnippets
     *toenable/disableastheDOMchanged.
     *
     *@private
     */
    _onSnippetRemoved:function(){
        this._disableUndroppableSnippets();
        this._updateInvisibleDOM();
    },
    /**
     *Whentheeditorpanelreceivesanotificationindicatingthatanoption
     *wasused,thepanelisinchargeofaskingforanUIupdateofthewhole
     *panel.Logically,theoptionsaredisplayedsothatanoptionabove
     *mayinfluencethestatusandvisibilityofanoptionwhichisbelow;
     *e.g.:
     *-theusersetsabadgetypeto'info'
     *     ->thebadgebackgroundoption(below)isshownasblue
     *-theuseraddsashadow
     *     ->moreoptionsareshownafterwardstocontrolit(notabove)
     *
     *Technicallywehoweverupdatethewholeeditorpanel(parentandchild
     *options)wherevertheupdatescomesfrom.Theonlyimportantthingis
     *tofirstupdatetheoptionsUIthentheirvisibilityastheirvisibility
     *maydependontheirUIstatus.
     *
     *@private
     *@param{FlectraEvent}ev
     */
    _onSnippetOptionUpdate(ev){
        ev.stopPropagation();
        (async()=>{
            consteditors=this._enabledEditorHierarchy;
            awaitPromise.all(editors.map(editor=>editor.updateOptionsUI()));
            awaitPromise.all(editors.map(editor=>editor.updateOptionsUIVisibility()));
            ev.data.onSuccess();
        })();
    },
    /**
     *@private
     *@param{FlectraEvent}ev
     */
    _onSnippetOptionVisibilityUpdate:asyncfunction(ev){
        if(this.willDestroyEditors){
            //Donotupdatetheoptionvisibilitiesifwearedestroyingthem.
            return;
        }
        if(!ev.data.show){
            awaitthis._activateSnippet(false);
        }
        awaitthis._updateInvisibleDOM();//Re-rendertoupdatestatus
    },
    /**
     *@private
     *@param{FlectraEvent}ev
     */
    _onSnippetThumbnailURLRequest(ev){
        const$snippet=this.$snippets.has(`[data-snippet="${ev.data.key}"]`);
        ev.data.onSuccess($snippet.length?$snippet[0].dataset.oeThumbnail:'');
    },
    /**
     *@private
     */
    _onSummernoteToolsUpdate(ev){
        if(!this._textToolsSwitchingEnabled){
            return;
        }
        constrange=$.summernote.core.range.create();
        if(!range){
            return;
        }
        if(range.sc===range.ec&&range.sc.nodeType===Node.ELEMENT_NODE
                &&range.sc.classList.contains('oe_structure')
                &&range.sc.children.length===0){
            //Donotswitchtotexttoolsifthecursorisinanempty
            //oe_structure(toencourageusingsnippetsthereandactually
            //avoidbreakingtourswhichsupposethesnippetlistisvisible).
            return;
        }
        this.textEditorPanelEl.classList.add('d-block');
        consthasVisibleButtons=!!$(this.textEditorPanelEl).find('.btn:visible').length;
        this.textEditorPanelEl.classList.remove('d-block');
        if(!hasVisibleButtons){
            //Uglywaytodetectthatsummernotewasupdatedbutthereisno
            //visibletexttools.
            return;
        }
        //Onlyswitchtabwithoutchangingcontent(_updateLeftPanelContent
        //maketexttoolsvisibleonlyonthatspecifictab).Alsodoitwith
        //aslightdelaytoavoidflickeringdoingittwice.
        clearTimeout(this._textToolsSwitchingTimeout);
        if(!this.$('#o_scroll').hasClass('d-none')){
            this._textToolsSwitchingTimeout=setTimeout(()=>{
                this._updateLeftPanelContent({tab:this.tabs.OPTIONS});
            },250);
        }
    },
    /**
     *@private
     *@param{FlectraEvent}ev
     */
    _onUpdateCustomizeElements:function(ev){
        this._updateLeftPanelContent({
            content:ev.data.customize$Elements,
            tab:ev.data.customize$Elements.length?this.tabs.OPTIONS:this.tabs.BLOCKS,
        });
    },
    /**
     *Calledwhenanuservaluewidgetisbeingopened->closealltheother
     *uservaluewidgetsofalleditors+addbackdrop.
     */
    _onUserValueWidgetOpening:function(){
        this._closeWidgets();
        this.el.classList.add('o_we_backdrop');
    },
    /**
     *Calledwhenanuservaluewidgetisbeingclosed->relyonthefactonly
     *onewidgetcanbeopenedatatime:removethebackdrop.
     */
    _onUserValueWidgetClosing:function(){
        this.el.classList.remove('o_we_backdrop');
    },
    /**
     *Calledwhensearchinputvaluechanged->adaptsthesnippetsgrid.
     *
     *@private
     */
    _onSnippetSearchInput:function(){
        this._filterSnippets();
    },
    /**
     *Calledonsnippetsearchfilterreset->clearinputfieldsearch.
     *
     *@private
     */
    _onSnippetSearchResetClick:function(){
        this._filterSnippets('');
    },
});

return{
    Class:SnippetsMenu,
    Editor:SnippetEditor,
    globalSelector:globalSelector,
};
});
