flectra.define('payment_stripe.payment_form',function(require){
"usestrict";

varajax=require('web.ajax');
varcore=require('web.core');
varDialog=require('web.Dialog');
varPaymentForm=require('payment.payment_form');

varqweb=core.qweb;
var_t=core._t;

ajax.loadXML('/payment_stripe/static/src/xml/stripe_templates.xml',qweb);

PaymentForm.include({

    willStart:function(){
        returnthis._super.apply(this,arguments).then(function(){
            returnajax.loadJS("https://js.stripe.com/v3/");
        })
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

     /**
     *calledtocreatepaymentmethodobjectforcreditcard/debitcard.
     *
     *@private
     *@param{Object}stripe
     *@param{Object}formData
     *@param{Object}card
     *@param{Boolean}addPmEvent
     *@returns{Promise}
     */
    _createPaymentMethod:function(stripe,formData,card,addPmEvent){
        if(addPmEvent){
            returnthis._rpc({
                route:'/payment/stripe/s2s/create_setup_intent',
                params:{'acquirer_id':formData.acquirer_id}
            }).then(function(intent_secret){
                returnstripe.handleCardSetup(intent_secret,card);
            });
        }else{
            returnstripe.createPaymentMethod({
                type:'card',
                card:card,
            });
        }
    },

    /**
     *calledwhenclickingonpaynoworaddpaymenteventtocreatetokenforcreditcard/debitcard.
     *
     *@private
     *@param{Event}ev
     *@param{DOMElement}checkedRadio
     *@param{Boolean}addPmEvent
     */
    _createStripeToken:function(ev,$checkedRadio,addPmEvent){
        varself=this;
        if(ev.type==='submit'){
            varbutton=$(ev.target).find('*[type="submit"]')[0]
        }else{
            varbutton=ev.target;
        }
        this.disableButton(button);
        varacquirerID=this.getAcquirerIdFromRadio($checkedRadio);
        varacquirerForm=this.$('#o_payment_add_token_acq_'+acquirerID);
        varinputsForm=$('input',acquirerForm);
        if(this.options.partnerId===undefined){
            console.warn('payment_form:unsetpartner_idwhenaddingnewtoken;thingscouldgowrong');
        }

        varformData=self.getFormData(inputsForm);
        varstripe=this.stripe;
        varcard=this.stripe_card_element;
        if(card._invalid){
            //ifwedon'tenablethebuttonagain,atthispointthebuttonisdisplayingthe'loading'animation
            //andsincewebreaktheworkflowhereitgivestheimpressionthatsomethingishappening,butitisn't
            self.enableButton(button);
            return;
        }
        this._createPaymentMethod(stripe,formData,card,addPmEvent).then(function(result){
            if(result.error){
                returnPromise.reject({"message":{"data":{"arguments":[result.error.message]}}});
            }else{
                constpaymentMethod=addPmEvent?result.setupIntent.payment_method:result.paymentMethod.id;
                _.extend(formData,{"payment_method":paymentMethod});
                returnself._rpc({
                    route:formData.data_set,
                    params:formData,
                });
            }
        }).then(function(result){
            if(addPmEvent){
                if(formData.return_url){
                    window.location=formData.return_url;
                }else{
                    window.location.reload();
                }
            }else{
                $checkedRadio.val(result.id);
                self.el.submit();
            }
        }).guardedCatch(function(error){
            //Wedon'twanttoopentheErrordialogsince
            //wealreadyhaveacontainerdisplayingtheerror
            if(error.event){
                error.event.preventDefault();
            }
            //iftherpcfails,prettyobvious
            self.enableButton(button);
            self.displayError(
                _t('Unabletosavecard'),
                _t("Wearenotabletoaddyourpaymentmethodatthemoment.")+
                    self._parseError(error)
            );
        });
    },
    /**
     *calledwhenclickingaStriperadioifconfiguredfors2sflow;instanciatesthecardandbindittothewidget.
     *
     *@private
     *@param{DOMElement}checkedRadio
     */
    _bindStripeCard:function($checkedRadio){
        varacquirerID=this.getAcquirerIdFromRadio($checkedRadio);
        varacquirerForm=this.$('#o_payment_add_token_acq_'+acquirerID);
        varinputsForm=$('input',acquirerForm);
        varformData=this.getFormData(inputsForm);
        varstripe=Stripe(formData.stripe_publishable_key);
        varelement=stripe.elements();
        varcard=element.create('card',{hidePostalCode:true});
        //usemorespecificcssselectorsothat'#card-element'isfoundinsidetheselectedstripecard,otherwise
        //thiswon'thappen,andthecardwillbemountedtothefirstelementfound.
        card.mount(`#o_payment_add_token_acq_${acquirerID}#card-element`);
        card.on('ready',function(ev){
            card.focus();
        });
        card.addEventListener('change',function(event){
            vardisplayError=document.getElementById('card-errors');
            displayError.textContent='';
            if(event.error){
                displayError.textContent=event.error.message;
            }
        });
        this.stripe=stripe;
        this.stripe_card_element=card;
    },
    /**
     *destroysthecardelementandanystripeinstancelinkedtothewidget.
     *
     *@private
     */
    _unbindStripeCard:function(){
        if(this.stripe_card_element){
            this.stripe_card_element.destroy();
        }
        this.stripe=undefined;
        this.stripe_card_element=undefined;
    },
    /**
     *@override
     */
    updateNewPaymentDisplayStatus:function(){
        var$checkedRadio=this.$('input[type="radio"]:checked');

        if($checkedRadio.length!==1){
            return;
        }
        varprovider=$checkedRadio.data('provider')
        if(provider==='stripe'){
            //alwaysre-initstripe(incaseofmultipleacquirersforstripe,makesurethestripeinstanceisusingtherightkey)
            this._unbindStripeCard();
            if(this.isNewPaymentRadio($checkedRadio)){
                this._bindStripeCard($checkedRadio);
            }
        }
        returnthis._super.apply(this,arguments);
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *@override
     */
    payEvent:function(ev){
        ev.preventDefault();
        var$checkedRadio=this.$('input[type="radio"]:checked');

        //firstwecheckthattheuserhasselectedastripeass2spaymentmethod
        if($checkedRadio.length===1&&this.isNewPaymentRadio($checkedRadio)&&$checkedRadio.data('provider')==='stripe'){
            returnthis._createStripeToken(ev,$checkedRadio);
        }else{
            returnthis._super.apply(this,arguments);
        }
    },
    /**
     *@override
     */
    addPmEvent:function(ev){
        ev.stopPropagation();
        ev.preventDefault();
        var$checkedRadio=this.$('input[type="radio"]:checked');

        //firstwecheckthattheuserhasselectedastripeasaddpaymentmethod
        if($checkedRadio.length===1&&this.isNewPaymentRadio($checkedRadio)&&$checkedRadio.data('provider')==='stripe'){
            returnthis._createStripeToken(ev,$checkedRadio,true);
        }else{
            returnthis._super.apply(this,arguments);
        }
    },
});
});
