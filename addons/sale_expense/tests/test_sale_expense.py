#-*-coding:utf-8-*-
#PartofFlectra.SeeLICENSEfileforfullcopyrightandlicensingdetails.

fromflectra.addons.hr_expense.tests.commonimportTestExpenseCommon
fromflectra.addons.sale.tests.commonimportTestSaleCommon
fromflectra.testsimporttagged


@tagged('post_install','-at_install')
classTestSaleExpense(TestExpenseCommon,TestSaleCommon):
    
    deftest_sale_expense(self):
        """Testthebehaviourofsalesorderswhenmanagingexpenses"""

        #createasowithaproductinvoicedondelivery
        so=self.env['sale.order'].create({
            'partner_id':self.partner_a.id,
            'partner_invoice_id':self.partner_a.id,
            'partner_shipping_id':self.partner_a.id,
            'order_line':[(0,0,{
                'name':self.company_data['product_delivery_no'].name,
                'product_id':self.company_data['product_delivery_no'].id,
                'product_uom_qty':2,
                'product_uom':self.company_data['product_delivery_no'].uom_id.id,
                'price_unit':self.company_data['product_delivery_no'].list_price,
            })],
            'pricelist_id':self.env.ref('product.list0').id,
        })
        so._compute_tax_id()
        so.action_confirm()
        so._create_analytic_account() #normallycreatedatsoconfirmationwhenyouusetherightproducts
        init_price=so.amount_total

        #createsomeexpenseandvalidateit(expenseatcost)
        #SubmittoManager
        sheet=self.env['hr.expense.sheet'].create({
            'name':'ExpenseforJohnSmith',
            'employee_id':self.expense_employee.id,
            'journal_id':self.company_data['default_journal_purchase'].id,
        })
        exp=self.env['hr.expense'].create({
            'name':'AirTravel',
            'product_id':self.company_data['product_delivery_cost'].id,
            'analytic_account_id':so.analytic_account_id.id,
            'unit_amount':621.54,
            'employee_id':self.expense_employee.id,
            'sheet_id':sheet.id,
            'sale_order_id':so.id,
        })
        #Approve
        sheet.approve_expense_sheets()
        #CreateExpenseEntries
        sheet.action_sheet_move_create()
        #expenseshouldnowbeinsalesorder
        self.assertIn(self.company_data['product_delivery_cost'],so.mapped('order_line.product_id'),'SaleExpense:expenseproductshouldbeinso')
        sol=so.order_line.filtered(lambdasol:sol.product_id.id==self.company_data['product_delivery_cost'].id)
        self.assertEqual((sol.price_unit,sol.qty_delivered),(621.54,1.0),'SaleExpense:errorwheninvoicinganexpenseatcost')
        self.assertEqual(so.amount_total,init_price+sol.price_unit,'SaleExpense:priceofsoshouldbeupdatedafteraddingexpense')

        #createsomeexpenseandvalidateit(expenseatsaleprice)
        init_price=so.amount_total
        prod_exp_2=self.env['product.product'].create({
            'name':'CarTravel',
            'expense_policy':'sales_price',
            'type':'service',
            'can_be_expensed':True,
            'invoice_policy':'delivery',
            'list_price':0.50,
            'uom_id':self.env.ref('uom.product_uom_km').id,
            'uom_po_id':self.env.ref('uom.product_uom_km').id,
        })
        #SubmittoManager
        sheet=self.env['hr.expense.sheet'].create({
            'name':'ExpenseforJohnSmith',
            'employee_id':self.expense_employee.id,
            'journal_id':self.company_data['default_journal_purchase'].id,
        })
        exp=self.env['hr.expense'].create({
            'name':'CarTravel',
            'product_id':prod_exp_2.id,
            'analytic_account_id':so.analytic_account_id.id,
            'product_uom_id':self.env.ref('uom.product_uom_km').id,
            'unit_amount':0.15,
            'quantity':100,
            'employee_id':self.expense_employee.id,
            'sheet_id':sheet.id,
            'sale_order_id':so.id,
        })
        #Approve
        sheet.approve_expense_sheets()
        #CreateExpenseEntries
        sheet.action_sheet_move_create()
        #expenseshouldnowbeinsalesorder
        self.assertIn(prod_exp_2,so.mapped('order_line.product_id'),'SaleExpense:expenseproductshouldbeinso')
        sol=so.order_line.filtered(lambdasol:sol.product_id.id==prod_exp_2.id)
        self.assertEqual((sol.price_unit,sol.qty_delivered),(prod_exp_2.list_price,100.0),'SaleExpense:errorwheninvoicinganexpenseatcost')
        self.assertEqual(so.amount_untaxed,init_price+(prod_exp_2.list_price*100.0),'SaleExpense:priceofsoshouldbeupdatedafteraddingexpense')
        #self.assertTrue(so.invoice_status,'no','SaleExpense:expensesshouldnotimpacttheinvoice_statusoftheso')

        #bothexpensesshouldbeinvoiced
        inv=so._create_invoices()
        self.assertEqual(inv.amount_untaxed,621.54+(prod_exp_2.list_price*100.0),'SaleExpense:invoicingofexpenseiswrong')
