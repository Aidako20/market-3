flectra.define('barcodes.FormView',function(require){
"usestrict";

varBarcodeEvents=require('barcodes.BarcodeEvents');//handletotriggerbarcodeonbus
varconcurrency=require('web.concurrency');
varcore=require('web.core');
varDialog=require('web.Dialog');
varFormController=require('web.FormController');
varFormRenderer=require('web.FormRenderer');

var_t=core._t;


FormController.include({
    custom_events:_.extend({},FormController.prototype.custom_events,{
        activeBarcode:'_barcodeActivated',
    }),

    /**
     *adddefaultbarcodecommandsforfromview
     *
     *@override
     */
    init:function(){
        this._super.apply(this,arguments);
        this.activeBarcode={
            form_view:{
                commands:{
                    'O-CMD.EDIT':this._barcodeEdit.bind(this),
                    'O-CMD.DISCARD':this._barcodeDiscard.bind(this),
                    'O-CMD.SAVE':this._barcodeSave.bind(this),
                    'O-CMD.PREV':this._barcodePagerPrevious.bind(this),
                    'O-CMD.NEXT':this._barcodePagerNext.bind(this),
                    'O-CMD.PAGER-FIRST':this._barcodePagerFirst.bind(this),
                    'O-CMD.PAGER-LAST':this._barcodePagerLast.bind(this),
                },
            },
        };

        this.barcodeMutex=newconcurrency.Mutex();
        this._barcodeStartListening();
    },
    /**
     *@override
     */
    destroy:function(){
        this._barcodeStopListening();
        this._super();
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *@private
     *@param{string}barcodesentbythescanner(stringgeneratefromkeypressseries)
     *@param{Object}activeBarcode:optionssentbythefieldwhousebarcodefeatures
     *@returns{Promise}
     */
    _barcodeAddX2MQuantity:function(barcode,activeBarcode){
        if(this.mode==='readonly'){
            this.do_warn(false,_t('Enableeditmodetomodifythisdocument'));
            returnPromise.reject();
        }

        varrecord=this.model.get(this.handle);
        varcandidate=this._getBarCodeRecord(record,barcode,activeBarcode);
        if(candidate){
            returnthis._barcodeSelectedCandidate(candidate,record,barcode,activeBarcode);
        }else{
            returnthis._barcodeWithoutCandidate(record,barcode,activeBarcode);
        }
    },
    /**
     *@private
     */
    _barcodeDiscard:function(){
        returnthis.discardChanges();
    },
    /**
     *@private
     */
    _barcodeEdit:function(){
        returnthis._setMode('edit');
    },
    /**
     *@private
     */
    _barcodePagerFirst:asyncfunction(){
        returnthis._updatePage(()=>1);
    },
    /**
     *@private
     */
    _barcodePagerLast:asyncfunction(){
        returnthis._updatePage((min,state)=>state.count);
    },
    /**
     *@private
     */
    _barcodePagerNext:function(){
        returnthis._updatePage((min,state)=>{
            min+=1;
            if(min>state.count){
                min=1;
            }
            returnmin;
        });
    },
    /**
     *@private
     */
    _barcodePagerPrevious:function(){
        returnthis._updatePage((min,state)=>{
            min-=1;
            if(min<1){
                min=state.count;
            }
            returnmin;
        });
    },
    /**
     *Changethecurrentminimumvalueofthepagerusingprovidedfunction.
     *Thisfunctionwillbegiventhecurrentminimumandstateandmustreturn
     *theupdatedvalue.
     *
     *@private
     *@param{Function(currentMin:Number,state:Object)}updater
     */
    _updatePage:asyncfunction(updater){
        awaitthis.mutex.exec(()=>{});
        conststate=this.model.get(this.handle,{raw:true});
        constpagingInfo=this._getPagingInfo(state);
        if(!pagingInfo){
            returnthis.do_warn(false,_t('Pagerunavailable'));
        }
        constcurrentMinimum=updater(pagingInfo.currentMinimum,state);
        constlimit=pagingInfo.limit;
        constreloadParams=state.groupedBy&&state.groupedBy.length?{
                groupsLimit:limit,
                groupsOffset:currentMinimum-1,
            }:{
                limit,
                offset:currentMinimum-1,
            };
        awaitthis.reload(reloadParams);
        //resetthescrollpositiontothetoponpagechangedonly
        if(state.limit===limit){
            this.trigger_up('scrollTo',{top:0});
        }
    },
    /**
     *Returnstrueiffthegivenbarcodematchesthegivenrecord(candidate).
     *
     *@private
     *@param{Object}candidate:recordinthex2m
     *@param{string}barcodesentbythescanner(stringgeneratefromkeypressseries)
     *@param{Object}activeBarcode:optionssentbythefieldwhousebarcodefeatures
     *@returns{boolean}
     */
    _barcodeRecordFilter:function(candidate,barcode,activeBarcode){
        returncandidate.data.product_barcode===barcode;
    },
    /**
     *@private
     */
    _barcodeSave:function(){
        returnthis.saveRecord();
    },
    /**
     *@private
     *@param{Object}candidate:recordinthex2m
     *@param{Object}currentrecord
     *@param{string}barcodesentbythescanner(stringgeneratefromkeypressseries)
     *@param{Object}activeBarcode:optionssentbythefieldwhousebarcodefeatures
     *@returns{Promise}
     */
    _barcodeSelectedCandidate:function(candidate,record,barcode,activeBarcode,quantity){
        varchanges={};
        varcandidateChanges={};
        candidateChanges[activeBarcode.quantity]=quantity?quantity:candidate.data[activeBarcode.quantity]+1;
        changes[activeBarcode.fieldName]={
            operation:'UPDATE',
            id:candidate.id,
            data:candidateChanges,
        };
        returnthis.model.notifyChanges(this.handle,changes,{notifyChange:activeBarcode.notifyChange});
    },
    /**
     *@private
     */
    _barcodeStartListening:function(){
        core.bus.on('barcode_scanned',this,this._barcodeScanned);
        core.bus.on('keypress',this,this._quantityListener);
    },
    /**
     *@private
     */
    _barcodeStopListening:function(){
        core.bus.off('barcode_scanned',this,this._barcodeScanned);
        core.bus.off('keypress',this,this._quantityListener);
    },
    /**
     *@private
     *@param{Object}currentrecord
     *@param{string}barcodesentbythescanner(stringgeneratefromkeypressseries)
     *@param{Object}activeBarcode:optionssentbythefieldwhousebarcodefeatures
     *@returns{Promise}
     */
    _barcodeWithoutCandidate:function(record,barcode,activeBarcode){
        varchanges={};
        changes[activeBarcode.name]=barcode;
        returnthis.model.notifyChanges(record.id,changes);
    },
    /**
     *@private
     *@param{Object}currentrecord
     *@param{string}barcodesentbythescanner(stringgeneratefromkeypressseries)
     *@param{Object}activeBarcode:optionssentbythefieldwhousebarcodefeatures
     *@returns{Object|undefined}
     */
    _getBarCodeRecord:function(record,barcode,activeBarcode){
        varself=this;
        if(!activeBarcode.fieldName||!record.data[activeBarcode.fieldName]){
            return;
        }
        return_.find(record.data[activeBarcode.fieldName].data,function(record){
            returnself._barcodeRecordFilter(record,barcode,activeBarcode);
        });
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *Thebarcodeisactivatewhenatleastonewidgettrigger_up'activeBarcode'event
     *withthewidgetoption
     *
     *@param{FlectraEvent}event
     *@param{string}event.data.name:thecurrentfieldname
     *@param{string}[event.data.fieldName]optionalforx2manysubfield
     *@param{boolean}[event.data.notifyChange]optionalforx2manysubfield
     *    donottriggeronchangeserversideifacandidatehasbeenfound
     *@param{string}[event.data.quantity]optionalfieldtoincreasequantity
     *@param{Object}[event.data.commands]optionaladdedmethods
     *    canusecomandwithspecificbarcode(withReservedBarcodePrefixes)
     *    orchange'barcode'forallotherreceivedbarcodes
     *    (e.g.:'O-CMD.MAIN-MENU':function...,barcode:function(){...})
     */
    _barcodeActivated:function(event){
        event.stopPropagation();
        varname=event.data.name;
        this.activeBarcode[name]={
            name:name,
            handle:this.handle,
            target:event.target,
            widget:event.target.attrs&&event.target.attrs.widget,
            setQuantityWithKeypress:!!event.data.setQuantityWithKeypress,
            fieldName:event.data.fieldName,
            notifyChange:(event.data.notifyChange!==undefined)?event.data.notifyChange:true,
            quantity:event.data.quantity,
            commands:event.data.commands||{},
            candidate:this.activeBarcode[name]&&this.activeBarcode[name].handle===this.handle?
                this.activeBarcode[name].candidate:null,
        };

        //wewanttodisableautofocuswhenactivatingthebarcodetoavoid
        //puttingthescannedvalueinthefocusedfield
        this.disableAutofocus=true;
    },
    /**
     *@private
     *@param{string|function}methoddefinedbythecommandsoptions
     *@param{string}barcodesentbythescanner(stringgeneratefromkeypressseries)
     *@param{Object}activeBarcode:optionssentbythefieldwhousebarcodefeatures
     *@returns{Promise}
     */
    _barcodeActiveScanned:function(method,barcode,activeBarcode){
        varself=this;
        varmethodDef;
        vardef=newPromise(function(resolve,reject){
            if(typeofmethod==='string'){
                methodDef=self[method](barcode,activeBarcode);
            }else{
                methodDef=method.call(self,barcode,activeBarcode);
            }
            methodDef
                .then(function(){
                    varrecord=self.model.get(self.handle);
                    varcandidate=self._getBarCodeRecord(record,barcode,activeBarcode);
                    activeBarcode.candidate=candidate;
                })
                .then(resolve,resolve);
        });
        returndef;
    },
    /**
     *Methodcalledwhenauserscanabarcode,calleachmethodinfunctionofthe
     *widgetoptionsthenupdatetherenderer
     *
     *@private
     *@param{string}barcodesentbythescanner(stringgeneratefromkeypressseries)
     *@param{DOMObject}target
     *@returns{Promise}
     */
    _barcodeScanned:function(barcode,target){
        varself=this;
        returnthis.barcodeMutex.exec(function(){
            varprefixed=_.any(BarcodeEvents.ReservedBarcodePrefixes,
                    function(reserved){returnbarcode.indexOf(reserved)===0;});
            varhasCommand=false;
            vardefs=[];
            if(!$.contains(target,self.el)){
                return;
            }
            for(varkinself.activeBarcode){
                varactiveBarcode=self.activeBarcode[k];
                //Handlethecasewherethereareseveralbarcodewidgetsonthesamepage.Sincethe
                //eventisglobalonthepage,allbarcodewidgetswillbetriggered.However,weonly
                //wanttokeeptheeventonthetargetwidget.
                varmethods=self.activeBarcode[k].commands;
                varmethod=prefixed?methods[barcode]:methods.barcode;
                if(method){
                    if(prefixed){
                        hasCommand=true;
                    }
                    defs.push(self._barcodeActiveScanned(method,barcode,activeBarcode));
                }
            }
            if(prefixed&&!hasCommand){
                self.do_warn(_t('Undefinedbarcodecommand'),barcode);
            }
            returnself.alive(Promise.all(defs)).then(function(){
                if(!prefixed){
                    //rememberthebarcodescannedforthequantitylistener
                    self.current_barcode=barcode;
                    //redrawtheviewifwescannedarealbarcode(requiredif
                    //wemanuallyapplythechangeinJS,e.g.incrementingthe
                    //quantity)
                    self.update({},{reload:false});
                }
            });
        });
    },
    /**
     *@private
     *@param{KeyEvent}event
     */
    _quantityListener:function(event){
        varcharacter=String.fromCharCode(event.which);

        if(!$.contains(event.target,this.el)){
            return;
        }
        //onlycatchtheeventifwe'renotfocusedin
        //anotherfieldandit'sanumber
        if(!$(event.target).is('body,.modal')||!/[0-9]/.test(character)){
            return;
        }

        varbarcodeInfos=_.filter(this.activeBarcode,'setQuantityWithKeypress');
        if(!barcodeInfos.length){
            return;
        }

        if(!_.compact(_.pluck(barcodeInfos,'candidate')).length){
            returnthis.do_warn(false,_t('Scanabarcodetosetthequantity'));
        }

        for(varkinthis.activeBarcode){
            if(this.activeBarcode[k].candidate){
                this._quantityOpenDialog(character,this.activeBarcode[k]);
            }
        }
    },
    /**
     *@private
     *@param{string}character
     *@param{Object}activeBarcode:optionssentbythefieldwhousebarcodefeatures
     */
    _quantityOpenDialog:function(character,activeBarcode){
        varself=this;
        var$content=$('<div>').append($('<input>',{type:'text',class:'o_set_qty_input'}));
        this.dialog=newDialog(this,{
            title:_t('Setquantity'),
            buttons:[{text:_t('Select'),classes:'btn-primary',close:true,click:function(){
                varnew_qty=this.$content.find('.o_set_qty_input').val();
                varrecord=self.model.get(self.handle);
                returnself._barcodeSelectedCandidate(activeBarcode.candidate,record,
                        self.current_barcode,activeBarcode,parseFloat(new_qty))
                .then(function(){
                    self.update({},{reload:false});
                });
            }},{text:_t('Discard'),close:true}],
            $content:$content,
        });
        this.dialog.opened().then(function(){
            //Thislinesetthevalueofthekeywhichtriggeredthe_set_quantityintheinput
            var$input=self.dialog.$('.o_set_qty_input').focus().val(character);
            var$selectBtn=self.dialog.$footer.find('.btn-primary');
            $input.on('keypress',function(event){
                if(event.which===13){
                    event.preventDefault();
                    $input.off();
                    $selectBtn.click();
                }
            });
        });
        this.dialog.open();
    },
});


FormRenderer.include({

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------
    /**
     *trigger_up'activeBarcode'toAddbarcodeeventhandler
     *
     *@private
     *@param{jQueryElement}$button
     *@param{Object}node
     */
    _barcodeButtonHandler:function($button,node){
        varcommands={};
        commands.barcode=function(){returnPromise.resolve();};
        commands['O-BTN.'+node.attrs.barcode_trigger]=function(){
            if(!$button.hasClass('o_invisible_modifier')){
                $button.click();
            }
            returnPromise.resolve();
        };
        varname=node.attrs.name;
        if(node.attrs.string){
            name=name+'_'+node.attrs.string;
        }

        this.trigger_up('activeBarcode',{
            name:name,
            commands:commands
        });
    },
    /**
     *Addbarcodeeventhandler
     *
     *@override
     *@private
     *@param{Object}node
     *@returns{jQueryElement}
     */
    _renderHeaderButton:function(node){
        var$button=this._super.apply(this,arguments);
        if(node.attrs.barcode_trigger){
            this._barcodeButtonHandler($button,node);
        }
        return$button;
    },
    /**
     *Addbarcodeeventhandler
     *
     *@override
     *@private
     *@param{Object}node
     *@returns{jQueryElement}
     */
    _renderStatButton:function(node){
        var$button=this._super.apply(this,arguments);
        if(node.attrs.barcode_trigger){
            this._barcodeButtonHandler($button,node);
        }
        return$button;
    },
    /**
     *Addbarcodeeventhandler
     *
     *@override
     *@private
     *@param{Object}node
     *@returns{jQueryElement}
     */
    _renderTagButton:function(node){
        var$button=this._super.apply(this,arguments);
        if(node.attrs.barcode_trigger){
            this._barcodeButtonHandler($button,node);
        }
        return$button;
    }
});

BarcodeEvents.ReservedBarcodePrefixes.push('O-BTN');

});
