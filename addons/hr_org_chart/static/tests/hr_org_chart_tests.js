flectra.define('hr_org_chart.tests',function(require){
"usestrict";

varFormView=require('web.FormView');
vartestUtils=require("web.test_utils");

varcreateView=testUtils.createView;

QUnit.module('hr_org_chart',{
    before:function(){
        this.data={
            hr_employee:{
                fields:{
                    child_ids:{string:"one2manySubordinatesfield",type:"one2many",relation:'hr_employee'},
                },
                records:[{
                    id:1,
                    child_ids:[],
                }]
            }
        };
    },
},function(){
    QUnit.test("hrorgchart:emptyrender",asyncfunction(assert){
        assert.expect(2);

        varform=awaitcreateView({
            View:FormView,
            model:'hr_employee',
            data:this.data,
            arch:
                '<form>'+
                    '<fieldname="child_ids"widget="hr_org_chart"/>'+
                '</form>',
            res_id:1,
            mockRPC:function(route,args){
                if(route==='/hr/get_org_chart'){
                    assert.ok('employee_id'inargs,"itshouldhave'employee_id'asargument");
                    returnPromise.resolve({
                        children:[],
                        managers:[],
                        managers_more:false,
                    });
                }elseif(route==='/hr/get_redirect_model'){
                  returnPromise.resolve('hr.employee');
                }
                returnthis._super(route,args);
            }
        });
        assert.strictEqual(form.$('[name="child_ids"]').children().length,1,
            "thechartshouldhave1child");
        form.destroy();
    });
    QUnit.test("hrorgchart:renderwithoutdata",asyncfunction(assert){
        assert.expect(2);

        varform=awaitcreateView({
            View:FormView,
            model:'hr_employee',
            data:this.data,
            arch:
                '<form>'+
                    '<fieldname="child_ids"widget="hr_org_chart"/>'+
                '</form>',
            res_id:1,
            mockRPC:function(route,args){
                if(route==='/hr/get_org_chart'){
                    assert.ok('employee_id'inargs,"itshouldhave'employee_id'asargument");
                    returnPromise.resolve({});//returnnodata
                }
                returnthis._super(route,args);
            }
        });
        assert.strictEqual(form.$('[name="child_ids"]').children().length,1,
            "thechartshouldhave1child");
        form.destroy();
    });
    QUnit.test("hrorgchart:basicrender",asyncfunction(assert){
        assert.expect(3);

        varform=awaitcreateView({
            View:FormView,
            model:'hr_employee',
            data:this.data,
            arch:
                '<form>'+
                    '<sheet>'+
                        '<divid="o_employee_container"><divid="o_employee_main">'+
                            '<divid="o_employee_right">'+
                                '<fieldname="child_ids"widget="hr_org_chart"/>'+
                            '</div>'+
                        '</div></div>'+
                    '</sheet>'+
                '</form>',
            res_id:1,
            mockRPC:function(route,args){
                if(route==='/hr/get_org_chart'){
                    assert.ok('employee_id'inargs,"itshouldhave'employee_id'asargument");
                    returnPromise.resolve({
                        children:[{
                            direct_sub_count:0,
                            indirect_sub_count:0,
                            job_id:2,
                            job_name:'Sub-Gooroo',
                            link:'fake_link',
                            name:'MichaelHawkins',
                            id:2,
                        }],
                        managers:[],
                        managers_more:false,
                        self:{
                            direct_sub_count:1,
                            id:1,
                            indirect_sub_count:1,
                            job_id:1,
                            job_name:'Gooroo',
                            link:'fake_link',
                            name:'AntoineLanglais',
                        }
                    });
                }elseif(route==='/hr/get_redirect_model'){
                  returnPromise.resolve('hr.employee');
                }
                returnthis._super(route,args);
            }
        });
        assert.containsOnce(form,'.o_org_chart_entry_sub',
            "thechartshouldhave1subordinate");
        assert.containsOnce(form,'.o_org_chart_entry_self',
            "thecurrentemployeeshouldonlybedisplayedonceinthechart");
        form.destroy();
    });
    QUnit.test("hrorgchart:basicmanagerrender",asyncfunction(assert){
        assert.expect(4);

        varform=awaitcreateView({
            View:FormView,
            model:'hr_employee',
            data:this.data,
            arch:
                '<form>'+
                    '<sheet>'+
                        '<divid="o_employee_container"><divid="o_employee_main">'+
                            '<divid="o_employee_right">'+
                                '<fieldname="child_ids"widget="hr_org_chart"/>'+
                            '</div>'+
                        '</div></div>'+
                    '</sheet>'+
                '</form>',
            res_id:1,
            mockRPC:function(route,args){
                if(route==='/hr/get_org_chart'){
                    assert.ok('employee_id'inargs,"shouldhave'employee_id'asargument");
                    returnPromise.resolve({
                        children:[{
                            direct_sub_count:0,
                            indirect_sub_count:0,
                            job_id:2,
                            job_name:'Sub-Gooroo',
                            link:'fake_link',
                            name:'MichaelHawkins',
                            id:2,
                        }],
                        managers:[{
                            direct_sub_count:1,
                            id:1,
                            indirect_sub_count:2,
                            job_id:1,
                            job_name:'ChiefGooroo',
                            link:'fake_link',
                            name:'AntoineLanglais',
                        }],
                        managers_more:false,
                        self:{
                            direct_sub_count:1,
                            id:1,
                            indirect_sub_count:1,
                            job_id:3,
                            job_name:'Gooroo',
                            link:'fake_link',
                            name:'JohnSmith',
                        }
                    });
                }elseif(route==='/hr/get_redirect_model'){
                  returnPromise.resolve('hr.employee');
                }
                returnthis._super(route,args);
            }
        });
        assert.containsOnce(form,'.o_org_chart_group_up.o_org_chart_entry_manager',"thechartshouldhave1manager");
        assert.containsOnce(form,'.o_org_chart_group_down.o_org_chart_entry_sub',"thechartshouldhave1subordinate");
        assert.containsOnce(form,'.o_org_chart_entry_self',"thechartshouldhaveonlyoncethecurrentemployee");
        form.destroy();
    });
});

});
