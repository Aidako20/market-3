#-*-coding:utf-8-*-
#PartofFlectra.SeeLICENSEfileforfullcopyrightandlicensingdetails.

fromflectraimportapi,fields,models,tools


classPosOrderReport(models.Model):
    _name="report.pos.order"
    _description="PointofSaleOrdersReport"
    _auto=False
    _order='datedesc'

    date=fields.Datetime(string='OrderDate',readonly=True)
    order_id=fields.Many2one('pos.order',string='Order',readonly=True)
    partner_id=fields.Many2one('res.partner',string='Customer',readonly=True)
    product_id=fields.Many2one('product.product',string='Product',readonly=True)
    product_tmpl_id=fields.Many2one('product.template',string='ProductTemplate',readonly=True)
    state=fields.Selection(
        [('draft','New'),('paid','Paid'),('done','Posted'),
         ('invoiced','Invoiced'),('cancel','Cancelled')],
        string='Status')
    user_id=fields.Many2one('res.users',string='User',readonly=True)
    price_total=fields.Float(string='TotalPrice',readonly=True)
    price_sub_total=fields.Float(string='Subtotalw/odiscount',readonly=True)
    total_discount=fields.Float(string='TotalDiscount',readonly=True)
    average_price=fields.Float(string='AveragePrice',readonly=True,group_operator="avg")
    company_id=fields.Many2one('res.company',string='Company',readonly=True)
    nbr_lines=fields.Integer(string='SaleLineCount',readonly=True)
    product_qty=fields.Integer(string='ProductQuantity',readonly=True)
    journal_id=fields.Many2one('account.journal',string='Journal')
    delay_validation=fields.Integer(string='DelayValidation')
    product_categ_id=fields.Many2one('product.category',string='ProductCategory',readonly=True)
    invoiced=fields.Boolean(readonly=True)
    config_id=fields.Many2one('pos.config',string='PointofSale',readonly=True)
    pos_categ_id=fields.Many2one('pos.category',string='PoSCategory',readonly=True)
    pricelist_id=fields.Many2one('product.pricelist',string='Pricelist',readonly=True)
    session_id=fields.Many2one('pos.session',string='Session',readonly=True)

    def_select(self):
        return"""
            SELECT
                MIN(l.id)ASid,
                COUNT(*)ASnbr_lines,
                s.date_orderASdate,
                SUM(l.qty)ASproduct_qty,
                SUM(l.qty*l.price_unit/CASECOALESCE(s.currency_rate,0)WHEN0THEN1.0ELSEs.currency_rateEND)ASprice_sub_total,
                SUM(ROUND((l.qty*l.price_unit)*(100-l.discount)/100/CASECOALESCE(s.currency_rate,0)WHEN0THEN1.0ELSEs.currency_rateEND,cu.decimal_places))ASprice_total,
                SUM((l.qty*l.price_unit)*(l.discount/100)/CASECOALESCE(s.currency_rate,0)WHEN0THEN1.0ELSEs.currency_rateEND)AStotal_discount,
                CASE
                    WHENSUM(l.qty*u.factor)=0THENNULL
                    ELSE(SUM(l.qty*l.price_unit/CASECOALESCE(s.currency_rate,0)WHEN0THEN1.0ELSEs.currency_rateEND)/SUM(l.qty*u.factor))::decimal
                ENDASaverage_price,
                SUM(cast(to_char(date_trunc('day',s.date_order)-date_trunc('day',s.create_date),'DD')ASINT))ASdelay_validation,
                s.idasorder_id,
                s.partner_idASpartner_id,
                s.stateASstate,
                s.user_idASuser_id,
                s.company_idAScompany_id,
                s.sale_journalASjournal_id,
                l.product_idASproduct_id,
                pt.categ_idASproduct_categ_id,
                p.product_tmpl_id,
                ps.config_id,
                pt.pos_categ_id,
                s.pricelist_id,
                s.session_id,
                s.account_moveISNOTNULLASinvoiced
        """

    def_from(self):
        return"""
            FROMpos_order_lineASl
                INNERJOINpos_ordersON(s.id=l.order_id)
                LEFTJOINproduct_productpON(l.product_id=p.id)
                LEFTJOINproduct_templateptON(p.product_tmpl_id=pt.id)
                LEFTJOINuom_uomuON(u.id=pt.uom_id)
                LEFTJOINpos_sessionpsON(s.session_id=ps.id)
                LEFTJOINres_companycoON(s.company_id=co.id)
                LEFTJOINres_currencycuON(co.currency_id=cu.id)
        """

    def_group_by(self):
        return"""
            GROUPBY
                s.id,s.date_order,s.partner_id,s.state,pt.categ_id,
                s.user_id,s.company_id,s.sale_journal,
                s.pricelist_id,s.account_move,s.create_date,s.session_id,
                l.product_id,
                pt.categ_id,pt.pos_categ_id,
                p.product_tmpl_id,
                ps.config_id
        """

    definit(self):
        tools.drop_view_if_exists(self._cr,self._table)
        self._cr.execute("""
            CREATEORREPLACEVIEW%sAS(
                %s
                %s
                %s
            )
        """%(self._table,self._select(),self._from(),self._group_by())
        )
