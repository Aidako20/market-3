flectra.define('point_of_sale.tour.ProductScreenTourMethods',function(require){
    'usestrict';

    const{createTourMethods}=require('point_of_sale.tour.utils');

    classDo{
        clickDisplayedProduct(name){
            return[
                {
                    content:`clickproduct'${name}'`,
                    trigger:`.product-list.product-name:contains("${name}")`,
                },
            ];
        }

        clickOrderline(name,quantity){
            return[
                {
                    content:`selectingorderlinewithproduct'${name}'andquantity'${quantity}'`,
                    trigger:`.order.orderline:not(:has(.selected)).product-name:contains("${name}")~.info-listem:contains("${quantity}")`,
                },
                {
                    content:`orderlinewithproduct'${name}'andquantity'${quantity}'hasbeenselected`,
                    trigger:`.order.orderline.selected.product-name:contains("${name}")~.info-listem:contains("${quantity}")`,
                    run:()=>{},
                },
            ];
        }

        clickSubcategory(name){
            return[
                {
                    content:`selecting'${name}'subcategory`,
                    trigger:`.products-widget>.products-widget-control.category-simple-button:contains("${name}")`,
                },
                {
                    content:`'${name}'subcategoryselected`,
                    trigger:`.breadcrumbs.breadcrumb-button:contains("${name}")`,
                    run:()=>{},
                },
            ];
        }

        clickHomeCategory(){
            return[
                {
                    content:`clickHomesubcategory`,
                    trigger:`.breadcrumbs.breadcrumb-home`,
                },
            ];
        }

        /**
         *Pressthenumpadinsequencebasedonthegivenspace-separatedkeys.
         *NOTE:Maximumof2charactersbecauseNumberBufferonlyallows2consecutive
         *fastinputs.Fastinputsisthecaseintours.
         *
         *@param{String}keysspace-separatednumpadkeys
         */
        pressNumpad(keys){
            constnumberChars='.0123456789'.split('');
            constmodeButtons='QtyPriceDisc'.split('');
            functiongenerateStep(key){
                lettrigger;
                if(numberChars.includes(key)){
                    trigger=`.numpad.number-char:contains("${key}")`;
                }elseif(modeButtons.includes(key)){
                    trigger=`.numpad.mode-button:contains("${key}")`;
                }elseif(key==='Backspace'){
                    trigger=`.numpad.numpad-backspace`;
                }elseif(key==='+/-'){
                    trigger=`.numpad.numpad-minus`;
                }
                return{
                    content:`'${key}'pressedinproductscreennumpad`,
                    trigger,
                };
            }
            returnkeys.split('').map(generateStep);
        }

        clickPayButton(){
            return[
                {content:'clickpaybutton',trigger:'.actionpad.button.pay'},
                {
                    content:'nowinpaymentscreen',
                    trigger:'.pos-content.payment-screen',
                    run:()=>{},
                },
            ];
        }

        clickCustomerButton(){
            return[
                {content:'clickcustomerbutton',trigger:'.actionpad.button.set-customer'},
                {
                    content:'customerscreenisshown',
                    trigger:'.pos-content.clientlist-screen',
                    run:()=>{},
                },
            ];
        }

        clickCustomer(name){
            return[
                {
                    content:`selectcustomer'${name}'`,
                    trigger:`.clientlist-screen.client-linetd:contains("${name}")`,
                },
                {
                    content:`clientline'${name}'ishighlighted`,
                    trigger:`.clientlist-screen.client-line.highlighttd:contains("${name}")`,
                    run:()=>{},
                },
            ];
        }

        clickSetCustomer(){
            return[
                {
                    content:'clicksetcustomer',
                    trigger:'.clientlist-screen.button.next.highlight',
                },
            ];
        }
        changeFiscalPosition(name){
            return[
                {
                    content:'clickfiscalpositionbutton',
                    trigger:'.o_fiscal_position_button',
                },
                {
                    content:'fiscalpositionscreenisshown',
                    trigger:`.selection-item:contains("${name}")`,
                },
            ];
        }
        clickPricelistButton(){
            return[{trigger:'.o_pricelist_button'}];
        }
        selectPriceList(name){
            return[
                {
                    content:`selectpricelist'${name}'`,
                    trigger:`.selection-item:contains("${name}")`,
                },
            ];
        }
        scan_barcode(barcode){
            return[
                {
                    content:`inputbarcode'${barcode}'`,
                    trigger:"input.ean",
                    run:`text${barcode}`,
                },
                {
                    content:`buttonscanbarcode'${barcode}'`,
                    trigger:"li.barcode",
                    run:'click',
                }
            ];
        }
        scan_ean13_barcode(barcode){
            return[
                {
                    content:`inputbarcode'${barcode}'`,
                    trigger:"input.ean",
                    run:`text${barcode}`,
                },
                {
                    content:`buttonscanEAN-13barcode'${barcode}'`,
                    trigger:"li.custom_ean",
                    run:'click',
                }
            ];
        }
    }

    classCheck{
        isShown(){
            return[
                {
                    content:'productscreenisshown',
                    trigger:'.product-screen:not(:has(.oe_hidden))',
                    run:()=>{},
                },
            ];
        }
        selectedOrderlineHas(name,quantity,price){
            constres=[
                {
                    //checkfirstiftheorderwidgetisthereandhasorderlines
                    content:'orderwidgethasorderlines',
                    trigger:'.order.orderlines',
                    run:()=>{},
                },
                {
                    content:`'${name}'isselected`,
                    trigger:`.order.orderline.selected.product-name:contains("${name}")`,
                    run:function(){},//it'sacheck
                },
            ];
            if(quantity){
                res.push({
                    content:`selectedlinehas${quantity}quantity`,
                    trigger:`.order.orderline.selected.product-name:contains("${name}")~.info-listem:contains("${quantity}")`,
                    run:function(){},//it'sacheck
                });
            }
            if(price){
                res.push({
                    content:`selectedlinehastotalpriceof${price}`,
                    trigger:`.order.orderline.selected.product-name:contains("${name}")~.price:contains("${price}")`,
                    run:function(){},//it'sacheck
                });
            }
            returnres;
        }
        orderIsEmpty(){
            return[
                {
                    content:`orderisempty`,
                    trigger:`.order.order-empty`,
                    run:()=>{},
                },
            ];
        }

        productIsDisplayed(name){
            return[
                {
                    content:`'${name}'shouldbedisplayed`,
                    trigger:`.product-list.product-name:contains("${name}")`,
                    run:()=>{},
                },
            ];
        }
        totalAmountIs(amount){
            return[
                {
                    content:`ordertotalamountis'${amount}'`,
                    trigger:`.order-container.order.summary.value:contains("${amount}")`,
                    run:()=>{},
                }
            ]
        }
        modeIsActive(mode){
            return[
                {
                    content:`'${mode}'isactive`,
                    trigger:`.numpadbutton.selected-mode:contains('${mode}')`,
                    run:function(){},
                },
            ];
        }
        noDiscountApplied(originalPrice){
            return[
                {
                    content:'nodiscountisapplied',
                    trigger:`.info:not(:contains(${originalPrice}))`,
                },
            ];
        }
        discountOriginalPriceIs(original_price){
            return[
                {
                    content:`discountoriginalpriceisshown`,
                    trigger:`s:contains('${original_price}')`,
                    run:function(){},
                },
            ];
        }
    }

    classExecute{
        /**
         *Createanorderlineforthegiven`productName`and`quantity`.
         *-If`unitPrice`isprovided,priceoftheproductofthecreatedline
         *  ischangedtothatvalue.
         *-If`expectedTotal`isprovided,thecreatedorderline(whichisthecurrently
         *  selectedorderline)ischeckedifitcontainsthecorrectquantityandtotal
         *  price.
         *
         *@param{string}productName
         *@param{string}quantity
         *@param{string}unitPrice
         *@param{string}expectedTotal
         */
        addOrderline(productName,quantity,unitPrice=undefined,expectedTotal=undefined){
            constres=this._do.clickDisplayedProduct(productName);
            if(unitPrice){
                res.push(...this._do.pressNumpad('Price'));
                res.push(...this._check.modeIsActive('Price'));
                res.push(...this._do.pressNumpad(unitPrice.toString().split('').join('')));
                res.push(...this._do.pressNumpad('Qty'));
                res.push(...this._check.modeIsActive('Qty'));
            }
            for(letcharofquantity.toString()){
                if('.0123456789'.includes(char)){
                    res.push(...this._do.pressNumpad(char));
                }elseif('-'.includes(char)){
                    res.push(...this._do.pressNumpad('+/-'));
                }
            }
            if(expectedTotal){
                res.push(...this._check.selectedOrderlineHas(productName,quantity,expectedTotal));
            }else{
                res.push(...this._check.selectedOrderlineHas(productName,quantity));
            }
            returnres;
        }
        addMultiOrderlines(...list){
            conststeps=[];
            for(let[product,qty,price]oflist){
                steps.push(...this.addOrderline(product,qty,price));
            }
            returnsteps;
        }
    }

    returncreateTourMethods('ProductScreen',Do,Check,Execute);
});
