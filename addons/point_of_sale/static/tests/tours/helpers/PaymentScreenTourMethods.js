flectra.define('point_of_sale.tour.PaymentScreenTourMethods',function(require){
    'usestrict';

    const{createTourMethods}=require('point_of_sale.tour.utils');

    classDo{
        clickPaymentMethod(name){
            return[
                {
                    content:`click'${name}'paymentmethod`,
                    trigger:`.paymentmethods.button.paymentmethod:contains("${name}")`,
                },
            ];
        }

        /**
         *Deletethepaymentlinehavingthegivenpaymentmethodnameandamount.
         *@param{String}namepaymentmethod
         *@param{String}amount
         */
        clickPaymentlineDelButton(name,amount){
            return[
                {
                    content:`delete${name}paymentlinewith${amount}amount`,
                    trigger:`.paymentlines.paymentline.payment-name:contains("${name}")~.delete-button`,
                },
            ];
        }

        clickEmailButton(){
            return[
                {
                    content:`clickemailbutton`,
                    trigger:`.payment-buttons.js_email`,
                },
            ];
        }

        clickTipButton(){
            return[
                {
                    trigger:`.payment-buttons.js_tip`,
                },
            ];
        }

        clickInvoiceButton(){
            return[{content:'clickinvoicebutton',trigger:'.payment-buttons.js_invoice'}];
        }

        clickValidate(){
            return[
                {
                    content:'validatepayment',
                    trigger:`.payment-screen.button.next.highlight`,
                },
            ];
        }

        /**
         *Pressthenumpadinsequencebasedonthegivenspace-separatedkeys.
         *Note:Maximumof2charactersbecauseNumberBufferonlyallows2consecutive
         *fastinputs.Fastinputsisthecaseintours.
         *
         *@param{String}keysspace-separatednumpadkeys
         */
        pressNumpad(keys){
            constnumberChars='.+/-0123456789'.split('');
            constmodeButtons='+10+20+50'.split('');
            functiongenerateStep(key){
                lettrigger;
                if(numberChars.includes(key)){
                    trigger=`.payment-numpad.number-char:contains("${key}")`;
                }elseif(modeButtons.includes(key)){
                    trigger=`.payment-numpad.mode-button:contains("${key}")`;
                }elseif(key==='Backspace'){
                    trigger=`.payment-numpad.number-charimg[alt="Backspace"]`;
                }
                return{
                    content:`'${key}'pressedinpaymentnumpad`,
                    trigger,
                };
            }
            returnkeys.split('').map(generateStep);
        }

        clickBack(){
            return[
                {
                    content:'clickbackbutton',
                    trigger:'.payment-screen.button.back',
                },
            ];
        }

        clickTipButton(){
            return[
                {
                    trigger:'.payment-screen.button.js_tip',
                },
            ]
        }
    }

    classCheck{
        isShown(){
            return[
                {
                    content:'paymentscreenisshown',
                    trigger:'.pos.payment-screen',
                    run:()=>{},
                },
            ];
        }
        /**
         *Checkifchangeistheprovidedamount.
         *@param{String}amount
         */
        changeIs(amount){
            return[
                {
                    content:`changeis${amount}`,
                    trigger:`.payment-status-change.amount:contains("${amount}")`,
                    run:()=>{},
                },
            ];
        }

        /**
         *Checkiftheremainingistheprovidedamount.
         *@param{String}amount
         */
        remainingIs(amount){
            return[
                {
                    content:`remainingamountis${amount}`,
                    trigger:`.payment-status-remaining.amount:contains("${amount}")`,
                    run:()=>{},
                },
            ];
        }

        /**
         *Checkifvalidatebuttonishighlighted.
         *@param{Boolean}isHighlighted
         */
        validateButtonIsHighlighted(isHighlighted=true){
            return[
                {
                    content:`validatebuttonis${
                        isHighlighted?'highlighted':'nothighligted'
                    }`,
                    trigger:isHighlighted
                        ?`.payment-screen.button.next.highlight`
                        :`.payment-screen.button.next:not(:has(.highlight))`,
                    run:()=>{},
                },
            ];
        }

        /**
         *Checkifthepaymentlinesareempty.Alsoprovidetheamounttopay.
         *@param{String}amountToPay
         */
        emptyPaymentlines(amountToPay){
            return[
                {
                    content:`therearenopaymentlines`,
                    trigger:`.paymentlines-empty`,
                    run:()=>{},
                },
                {
                    content:`amounttopayis'${amountToPay}'`,
                    trigger:`.paymentlines-empty.total:contains("${amountToPay}")`,
                    run:()=>{},
                },
            ];
        }

        /**
         *Checkiftheselectedpaymentlinehasthegivenpaymentmethodandamount.
         *@param{String}paymentMethodName
         *@param{String}amount
         */
        selectedPaymentlineHas(paymentMethodName,amount){
            return[
                {
                    content:`linepaidvia'${paymentMethodName}'isselected`,
                    trigger:`.paymentlines.paymentline.selected.payment-name:contains("${paymentMethodName}")`,
                    run:()=>{},
                },
                {
                    content:`amounttenderedinthelineis'${amount}'`,
                    trigger:`.paymentlines.paymentline.selected.payment-amount:contains("${amount}")`,
                    run:()=>{},
                },
            ];
        }
    }

    classExecute{
        pay(method,amount){
            conststeps=[];
            steps.push(...this._do.clickPaymentMethod(method));
            for(letcharofamount.split('')){
                steps.push(...this._do.pressNumpad(char));
            }
            steps.push(...this._check.validateButtonIsHighlighted());
            steps.push(...this._do.clickValidate());
            returnsteps;
        }
    }

    returncreateTourMethods('PaymentScreen',Do,Check,Execute);
});
