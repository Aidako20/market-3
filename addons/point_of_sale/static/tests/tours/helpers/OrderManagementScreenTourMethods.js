flectra.define('point_of_sale.tour.OrderManagementScreenTourMethods',function(require){
    'usestrict';

    const{createTourMethods}=require('point_of_sale.tour.utils');

    classDo{
        clickBack(){
            return[
                {
                    content:'ordermanagementscreen,clickbackbutton',
                    trigger:'.order-management-screen.control-panel.button.back',
                },
            ];
        }
        clickOrder(name,[otherCol,otherColVal]=[null,null]){
            lettrigger=`.order-management-screen.order-list.order-row.item.name:contains("${name}")`;
            if(otherCol){
                trigger=`${trigger}~.item.${otherCol}:contains("${otherColVal}")`;
            }
            return[
                {
                    content:`clickingorder'${name}'fromorderlist`,
                    trigger,
                },
            ];
        }
        clickInvoiceButton(){
            return[
                {
                    content:'clickinvoicebutton',
                    trigger:'.order-management-screen.control-buttonspan:contains("Invoice")',
                },
            ];
        }
        clickPrintReceiptButton(){
            return[
                {
                    content:'clickreprintreceiptbutton',
                    trigger:'.order-management-screen.control-buttonspan:contains("PrintReceipt")'
                }
            ]
        }
        clickCustomerButton(){
            return[
                {
                    content:'clickcustomerbutton',
                    trigger:'.order-management-screen.actionpad.button.set-customer',
                },
            ];
        }
        closeReceipt(){
            return[
                {
                    content:'closereceipt',
                    trigger:'.receipt-screen.button.back',
                }
            ]
        }
    }

    classCheck{
        isShown(){
            return[
                {
                    content:'ordermanagementscreenisshown',
                    trigger:'.pos.pos-content.order-management-screen',
                    run:()=>{},
                },
            ];
        }
        orderlistHas({orderName,total,customer}){
            conststeps=[];
            steps.push({
                content:`orderlisthasrowhaving:name'${orderName}',total'${total}'`,
                trigger:`.order-list.order-row.item:contains("${orderName}")~.item:contains("${total}")`,
                run:()=>{},
            });
            if(customer){
                steps.push({
                    content:`orderlisthasrowhaving:name'${orderName}',customer'${customer}'`,
                    trigger:`.order-list.order-row.item:contains("${orderName}")~.item:contains("${customer}")`,
                    run:()=>{},
                });
            }
            returnsteps;
        }
        highlightedOrderRowHas(name){
            return[
                {
                    content:`order'${name}'inorderlistishighligted`,
                    trigger:`.order-list.order-row.highlight:has(>.item:contains("${name}"))`,
                    run:()=>{},
                },
            ];
        }
        orderRowIsNotHighlighted(name){
            return[
                {
                    content:`order'${name}'inorderlistisnothighligted`,
                    trigger:`.order-list.order-row:not(:has(.highlight)):has(>.item:contains("${name}"))`,
                    run:()=>{},
                },
            ];
        }
        orderDetailsHas({lines,total}){
            conststeps=[];
            for(let{product,quantity}oflines){
                steps.push({
                    content:`orderdetailshasproduct'${product}'andquantity'${quantity}'`,
                    trigger:`.orderlines.product-name:contains("${product}")~.infostrong:contains("${quantity}")`,
                    run:()=>{},
                });
            }
            if(total){
                steps.push({
                    content:`orderdetailshastotalamountof${total}`,
                    trigger:`.order-container.summary.total.value:contains("${total}")`,
                    run:()=>{},
                });
            }
            returnsteps;
        }
        customerIs(name){
            return[
                {
                    content:`setcustomeris'${name}'`,
                    trigger:`.order-management-screen.actionpad.set-customer:contains("${name}")`,
                    run:()=>{},
                },
            ];
        }
        reprintReceiptIsShown(){
            return[
                {
                    content:'reprintreceiptscreenisshown',
                    trigger:'.pos.receipt-screen',
                    run:()=>{},
                }
            ]
        }
        receiptChangeIs(amount){
            return[
                {
                    content:`receiptchangeis${amount}`,
                    trigger:`.pos-receipt-amount.receipt-change:contains("${amount}")`,
                    run:()=>{},
                }
            ]
        }
        receiptOrderDataContains(orderInfo){
            return[
                {
                    content:`orderdatacontains${orderInfo}`,
                    trigger:`.pos-receipt-order-data:contains("${orderInfo}")`,
                    run:()=>{},
                }
            ]
        }
        receiptAmountIs(amount){
            return[
                {
                    content:`receiptamountis${amount}`,
                    trigger:`.pos-receipt-amount:contains("${amount}")`,
                    run:()=>{},
                }
            ]
        }
        isNotHidden(){
            return[
                {
                    content:'ordermanagementscreenisnothidden',
                    trigger:`.order-management-screen:not(:has(.oe_hidden))`,
                    run:()=>{},
                }
            ]
        }
    }

    returncreateTourMethods('OrderManagementScreen',Do,Check);
});
