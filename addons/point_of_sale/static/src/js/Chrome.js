flectra.define('point_of_sale.Chrome',function(require){
    'usestrict';

    const{useState,useRef,useContext}=owl.hooks;
    const{debounce}=owl.utils;
    const{loadCSS}=require('web.ajax');
    const{useListener}=require('web.custom_hooks');
    const{CrashManager}=require('web.CrashManager');
    const{BarcodeEvents}=require('barcodes.BarcodeEvents');
    constPosComponent=require('point_of_sale.PosComponent');
    constNumberBuffer=require('point_of_sale.NumberBuffer');
    constPopupControllerMixin=require('point_of_sale.PopupControllerMixin');
    constRegistries=require('point_of_sale.Registries');
    constIndependentToOrderScreen=require('point_of_sale.IndependentToOrderScreen');
    constcontexts=require('point_of_sale.PosContext');

    //Thisiskindofatrick.
    //Wegetareferencetothewholeexportssothat
    //whenwecreateaninstanceofoneoftheclasses,
    //weinstantiatetheextendedone.
    constmodels=require('point_of_sale.models');

    /**
     *ChromeistherootcomponentofthePoSApp.
     */
    classChromeextendsPopupControllerMixin(PosComponent){
        constructor(){
            super(...arguments);
            useListener('show-main-screen',this.__showScreen);
            useListener('toggle-debug-widget',debounce(this._toggleDebugWidget,100));
            useListener('show-temp-screen',this.__showTempScreen);
            useListener('close-temp-screen',this.__closeTempScreen);
            useListener('close-pos',this._closePos);
            useListener('loading-skip-callback',()=>this._loadingSkipCallback());
            useListener('play-sound',this._onPlaySound);
            useListener('set-sync-status',this._onSetSyncStatus);
            NumberBuffer.activate();

            this.chromeContext=useContext(contexts.chrome);

            this.state=useState({
                uiState:'LOADING',//'LOADING'|'READY'|'CLOSING'
                debugWidgetIsShown:true,
                hasBigScrollBars:false,
                sound:{src:null},
            });

            this.loading=useState({
                message:'Loading',
                skipButtonIsShown:false,
            });

            this.mainScreen=useState({name:null,component:null});
            this.mainScreenProps={};

            this.tempScreen=useState({isShown:false,name:null,component:null});
            this.tempScreenProps={};

            this.progressbar=useRef('progressbar');

            this.previous_touch_y_coordinate=-1;
        }

        //OVERLOADEDMETHODS//

        mounted(){
            //removedefaultwebclienthandlersthatinduceclickdelay
            $(document).off();
            $(window).off();
            $('html').off();
            $('body').off();
            //Theabovelinesremovedthebindings,butwereallyneedthemforthebarcode
            BarcodeEvents.start();
        }
        willUnmount(){
            BarcodeEvents.stop();
        }
        destroy(){
            super.destroy(...arguments);
            this.env.pos.destroy();
        }
        catchError(error){
            console.error(error);
        }

        //GETTERS//

        getclientScreenButtonIsShown(){
            return(
                this.env.pos.config.use_proxy&&this.env.pos.config.iface_customer_facing_display
            );
        }
        /**
         *Startupscreencanbebasedonposconfigsothestartupscreen
         *isonlydeterminedafterposdataiscompletelyloaded.
         *
         *NOTE:Waitforposdatatobecompletedbeforecallingthisgetter.
         */
        getstartScreen(){
            if(this.state.uiState!=='READY'){
                console.warn(
                    `AccessingstartScreenofChromecomponentbefore'state.uiState'tobe'READY'isnotrecommended.`
                );
            }
            return{name:'ProductScreen'};
        }

        //CONTROLMETHODS//

        /**
         *CallthisfunctionaftertheChromecomponentismounted.
         *Thiswillloadposandassignittotheenvironment.
         */
        asyncstart(){
            try{
                //InsteadofpassingchrometotheinstantiationthePosModel,
                //weinjectfunctionsneededbypos.
                //Thisway,wesomehowdecoupledChromefromPosModel.
                //WecanthentestPosModelindependentlyfromChromebysupplying
                //mockedversionofthesedefaultattributes.
                constposModelDefaultAttributes={
                    env:this.env,
                    rpc:this.rpc.bind(this),
                    session:this.env.session,
                    do_action:this.props.webClient.do_action.bind(this.props.webClient),
                    setLoadingMessage:this.setLoadingMessage.bind(this),
                    showLoadingSkip:this.showLoadingSkip.bind(this),
                    setLoadingProgress:this.setLoadingProgress.bind(this),
                };
                this.env.pos=newmodels.PosModel(posModelDefaultAttributes);
                awaitthis.env.pos.ready;
                this._buildChrome();
                this._closeOtherTabs();
                this.env.pos.set(
                    'selectedCategoryId',
                    this.env.pos.config.iface_start_categ_id
                        ?this.env.pos.config.iface_start_categ_id[0]
                        :0
                );
                this.state.uiState='READY';
                this.env.pos.on('change:selectedOrder',this._showSavedScreen,this);
                this._showStartScreen();
                if(_.isEmpty(this.env.pos.db.product_by_category_id)){
                    this._loadDemoData();
                }
                setTimeout(()=>{
                    //pushorderinthebackground,noneedtoawait
                    this.env.pos.push_orders();
                    //Allowusingtheappevenifnotalltheimagesareloaded.
                    //Basically,preloadtheimagesinthebackground.
                    this._preloadImages();
                });
            }catch(error){
                lettitle='UnknownError',
                    body;

                if(error.message&&[100,200,404,-32098].includes(error.message.code)){
                    //thisisthesignatureofrpcerror
                    if(error.message.code===-32098){
                        title='NetworkFailure(XmlHttpRequestError)';
                        body=
                            'ThePointofSalecouldnotbeloadedduetoanetworkproblem.\n'+
                            'Pleasecheckyourinternetconnection.';
                    }elseif(error.message.code===200){
                        title=error.message.data.message||this.env._t('ServerError');
                        body=
                            error.message.data.debug||
                            this.env._t(
                                'Theserverencounteredanerrorwhilereceivingyourorder.'
                            );
                    }
                }elseif(errorinstanceofError){
                    title=error.message;
                    body=error.stack;
                }

                awaitthis.showPopup('ErrorTracebackPopup',{
                    title,
                    body,
                    exitButtonIsShown:true,
                });
            }
        }

        //EVENTHANDLERS//

        _showStartScreen(){
            const{name,props}=this.startScreen;
            this.showScreen(name,props);
        }
        /**
         *Showthescreensavedintheorderwhenthe`selectedOrder`ofposischanged.
         *@param{models.PosModel}pos
         *@param{models.Order}newSelectedOrder
         */
        _showSavedScreen(pos,newSelectedOrder){
            const{name,props}=this._getSavedScreen(newSelectedOrder);
            this.showScreen(name,props);
        }
        _getSavedScreen(order){
            returnorder.get_screen_data();
        }
        __showTempScreen(event){
            const{name,props,resolve}=event.detail;
            this.tempScreen.isShown=true;
            this.tempScreen.name=name;
            this.tempScreen.component=this.constructor.components[name];
            this.tempScreenProps=Object.assign({},props,{resolve});
        }
        __closeTempScreen(){
            this.tempScreen.isShown=false;
        }
        __showScreen({detail:{name,props={}}}){
            constcomponent=this.constructor.components[name];
            //1.Settheinformationofthescreentodisplay.
            this.mainScreen.name=name;
            this.mainScreen.component=component;
            this.mainScreenProps=props;

            //2.Setsomeoptions
            this.chromeContext.showOrderSelector=!component.hideOrderSelector;

            //3.Savethescreentotheorder.
            // -Thisscreenisshownwhentheorderisselected.
            if(!(component.prototypeinstanceofIndependentToOrderScreen)&&name!=="ReprintReceiptScreen"){
                this._setScreenData(name,props);
            }
        }
        /**
         *Setthelatestscreentothecurrentorder.Thisisdonesothat
         *whentheorderisselectedagain,theuireturnstothelatestscreen
         *savedintheorder.
         *
         *@param{string}nameScreenname
         *@param{Object}propspropsfortheScreencomponent
         */
        _setScreenData(name,props){
            constorder=this.env.pos.get_order();
            if(order){
                order.set_screen_data({name,props});
            }
        }
        async_closePos(){
            //Ifposisnotproperlyloaded,wejustgobackto/webwithout
            //doinganythingintheorderdata.
            if(!this.env.pos||this.env.pos.db.get_orders().length===0){
                window.location='/web#action=point_of_sale.action_client_pos_menu';
            }

            if(this.env.pos.db.get_orders().length){
                //Ifthereareordersinthedbleftunsynced,wetrytosync.
                //Ifsyncsuccessful,closewithoutasking.
                //Otherwise,askagainsayingthatsomeordersarenotyetsynced.
                try{
                    awaitthis.env.pos.push_orders();
                    window.location='/web#action=point_of_sale.action_client_pos_menu';
                }catch(error){
                    console.warn(error);
                    constreason=this.env.pos.get('failed')
                        ?this.env._t(
                              'Someorderscouldnotbesubmittedto'+
                                  'theserverduetoconfigurationerrors.'+
                                  'YoucanexitthePointofSale,butdo'+
                                  'notclosethesessionbeforetheissue'+
                                  'hasbeenresolved.'
                          )
                        :this.env._t(
                              'Someorderscouldnotbesubmittedto'+
                                  'theserverduetointernetconnectionissues.'+
                                  'YoucanexitthePointofSale,butdo'+
                                  'notclosethesessionbeforetheissue'+
                                  'hasbeenresolved.'
                          );
                    const{confirmed}=awaitthis.showPopup('ConfirmPopup',{
                        title:this.env._t('OfflineOrders'),
                        body:reason,
                    });
                    if(confirmed){
                        this.state.uiState='CLOSING';
                        this.loading.skipButtonIsShown=false;
                        this.setLoadingMessage(this.env._t('Closing...'));
                        window.location='/web#action=point_of_sale.action_client_pos_menu';
                    }
                }
            }
        }
        _toggleDebugWidget(){
            this.state.debugWidgetIsShown=!this.state.debugWidgetIsShown;
        }
        _onPlaySound({detail:name}){
            letsrc;
            if(name==='error'){
                src="/point_of_sale/static/src/sounds/error.wav";
            }elseif(name==='bell'){
                src="/point_of_sale/static/src/sounds/bell.wav";
            }
            this.state.sound.src=src;
        }
        _onSetSyncStatus({detail:{status,pending}}){
            this.env.pos.set('synch',{status,pending});
        }

        //TOPASSASPARAMETERS//

        setLoadingProgress(fac){
            if(this.progressbar.el){
                this.progressbar.el.style.width=`${Math.floor(fac*100)}%`;
            }
        }
        setLoadingMessage(msg,progress){
            this.loading.message=msg;
            if(typeofprogress!=='undefined'){
                this.setLoadingProgress(progress);
            }
        }
        /**
         *ShowSkipbuttonintheloadingscreenandallowtoassigncallback
         *whenthebuttonispressed.
         *
         *@param{Function}callbackfunctiontocallwhenSkipbuttonispressed.
         */
        showLoadingSkip(callback){
            if(callback){
                this.loading.skipButtonIsShown=true;
                this._loadingSkipCallback=callback;
            }
        }

        getisTicketScreenShown(){
            returnthis.mainScreen.name==='TicketScreen';
        }

        //MISCMETHODS//

        async_loadDemoData(){
            const{confirmed}=awaitthis.showPopup('ConfirmPopup',{
                title:this.env._t('Youdonothaveanyproducts'),
                body:this.env._t(
                    'Wouldyouliketoloaddemodata?'
                ),
            });
            if(confirmed){
                awaitthis.rpc({
                    'route':'/pos/load_onboarding_data',
                });
                this.env.pos.load_server_data();
            }
        }

        _preloadImages(){
            for(letproductofthis.env.pos.db.get_product_by_category(0)){
                constimage=newImage();
                image.src=`/web/image?model=product.product&field=image_128&id=${product.id}&write_date=${product.write_date}&unique=1`;
            }
            for(letcategoryofObject.values(this.env.pos.db.category_by_id)){
                if(category.id==0)continue;
                constimage=newImage();
                image.src=`/web/image?model=pos.category&field=image_128&id=${category.id}&write_date=${category.write_date}&unique=1`;
            }
            conststaticImages=['backspace.png','bc-arrow-big.png'];
            for(letimageNameofstaticImages){
                constimage=newImage();
                image.src=`/point_of_sale/static/src/img/${imageName}`;
            }
        }

        _buildChrome(){
            if($.browser.chrome){
                varchrome_version=$.browser.version.split('.')[0];
                if(parseInt(chrome_version,10)>=50){
                    loadCSS('/point_of_sale/static/src/css/chrome50.css');
                }
            }

            if(this.env.pos.config.iface_big_scrollbars){
                this.state.hasBigScrollBars=true;
            }

            this._disableBackspaceBack();
            this._replaceCrashmanager();
        }
        //replacestheerrorhandlingoftheexistingcrashmanagerwhich
        //usesjquerydialogtodisplaytheerror,tousethepospopup
        //instead
        _replaceCrashmanager(){
            varself=this;
            CrashManager.include({
                show_warning:function(error){
                    if(self.env.pos){
                        //self==thiscomponent
                        self.showPopup('ErrorPopup',{
                            title:error.data.title.toString(),
                            body:error.data.message,
                        });
                    }else{
                        //this==CrashManagerinstance
                        this._super(error);
                    }
                },
                show_error:function(error){
                    if(self.env.pos){
                        //self==thiscomponent
                        self.showPopup('ErrorTracebackPopup',{
                            title:error.type,
                            body:error.message+'\n'+error.data.debug+'\n',
                        });
                    }else{
                        //this==CrashManagerinstance
                        this._super(error);
                    }
                },
            });
        }
        //preventbackspacefromperforminga'back'navigation
        _disableBackspaceBack(){
            $(document).on('keydown',function(e){
                if(e.which===8&&!$(e.target).is('input,textarea')){
                    e.preventDefault();
                }
            });
        }
        _closeOtherTabs(){
            localStorage['message']='';
            localStorage['message']=JSON.stringify({
                message:'close_tabs',
                session:this.env.pos.pos_session.id,
            });

            window.addEventListener(
                'storage',
                (event)=>{
                    if(event.key==='message'&&event.newValue){
                        constmsg=JSON.parse(event.newValue);
                        if(
                            msg.message==='close_tabs'&&
                            msg.session==this.env.pos.pos_session.id
                        ){
                            console.info(
                                'POS/Sessionopenedinanotherwindow.EXITINGPOS'
                            );
                            this._closePos();
                        }
                    }
                },
                false
            );
        }
    }
    Chrome.template='Chrome';

    Registries.Component.add(Chrome);

    returnChrome;
});
