flectra.define('point_of_sale.Printer',function(require){
"usestrict";

varSession=require('web.Session');
varcore=require('web.core');
const{Gui}=require('point_of_sale.Gui');
var_t=core._t;

//IMPROVEMENT:Thisistoomuch.Wecangetawayfromthisclass.
classPrintResult{
    constructor({successful,message}){
        this.successful=successful;
        this.message=message;
    }
}

classPrintResultGenerator{
    IoTActionError(){
        returnnewPrintResult({
            successful:false,
            message:{
                title:_t('ConnectiontoIoTBoxfailed'),
                body:_t('PleasecheckiftheIoTBoxisstillconnected.'),
            },
        });
    }
    IoTResultError(){
        returnnewPrintResult({
            successful:false,
            message:{
                title:_t('Connectiontotheprinterfailed'),
                body:_t('Pleasecheckiftheprinterisstillconnected.'),
            },
        });
    }
    Successful(){
        returnnewPrintResult({
            successful:true,
        });
    }
}

varPrinterMixin={
    init:function(pos){
        this.receipt_queue=[];
        this.printResultGenerator=newPrintResultGenerator();
        this.pos=pos;
    },

    /**
     *Addthereceipttothequeueofreceiptstobeprintedandprocessit.
     *Wecleartheprintqueueifprintingisnotsuccessful.
     *@param{String}receipt:Thereceipttobeprinted,inHTML
     *@returns{PrintResult}
     */
    print_receipt:asyncfunction(receipt){
        if(receipt){
            this.receipt_queue.push(receipt);
        }
        letimage,sendPrintResult;
        while(this.receipt_queue.length>0){
            receipt=this.receipt_queue.shift();
            image=awaitthis.htmlToImg(receipt);
            try{
                sendPrintResult=awaitthis.send_printing_job(image);
            }catch(error){
                //ErrorincommunicatingtotheIoTbox.
                this.receipt_queue.length=0;
                returnthis.printResultGenerator.IoTActionError();
            }
            //rpccallisokaybutprintingfailedbecause
            //IoTboxcan'tfindaprinter.
            if(!sendPrintResult||sendPrintResult.result===false){
                this.receipt_queue.length=0;
                returnthis.printResultGenerator.IoTResultError();
            }
        }
        returnthis.printResultGenerator.Successful();
    },

    /**
     *Generateajpegimagefromacanvas
     *@param{DOMElement}canvas
     */
    process_canvas:function(canvas){
        returncanvas.toDataURL('image/jpeg').replace('data:image/jpeg;base64,','');
    },

    /**
     *Rendersthehtmlasanimagetoprintit
     *@param{String}receipt:Thereceipttobeprinted,inHTML
     */
    htmlToImg:function(receipt){
        varself=this;
        $('.pos-receipt-print').html(receipt);
        varpromise=newPromise(function(resolve,reject){
            self.receipt=$('.pos-receipt-print>.pos-receipt');
            html2canvas(self.receipt[0],{
                onparsed:function(queue){
                    queue.stack.ctx.height=Math.ceil(self.receipt.outerHeight()+self.receipt.offset().top);
                    queue.stack.ctx.width=Math.ceil(self.receipt.outerWidth()+self.receipt.offset().left);
                },
                onrendered:function(canvas){
                    $('.pos-receipt-print').empty();
                    resolve(self.process_canvas(canvas));
                },
                letterRendering:self.pos.htmlToImgLetterRendering(),
            })
        });
        returnpromise;
    },

    _onIoTActionResult:function(data){
        if(this.pos&&(data===false||data.result===false)){
            Gui.showPopup('ErrorPopup',{
                'title':_t('Connectiontotheprinterfailed'),
                'body': _t('Pleasecheckiftheprinterisstillconnected.'),
            });
        }
    },

    _onIoTActionFail:function(){
        if(this.pos){
            Gui.showPopup('ErrorPopup',{
                'title':_t('ConnectiontoIoTBoxfailed'),
                'body': _t('PleasecheckiftheIoTBoxisstillconnected.'),
            });
        }
    },
}

varPrinter=core.Class.extend(PrinterMixin,{
    init:function(url,pos){
        PrinterMixin.init.call(this,pos);
        this.connection=newSession(undefined,url||'http://localhost:7073',{use_cors:true});
    },

    /**
     *Sendsacommandtotheconnectedproxytoopenthecashbox
     *(thephysicalboxwhereyoustorethecash).Updatesthestatusof
     *theprinterwiththeanswerfromtheproxy.
     */
    open_cashbox:function(){
        varself=this;
        returnthis.connection.rpc('/hw_proxy/default_printer_action',{
            data:{
                action:'cashbox'
            }
        }).then(self._onIoTActionResult.bind(self))
            .guardedCatch(self._onIoTActionFail.bind(self));
    },

    /**
     *Sendstheprintingcommandtheconnectedproxy
     *@param{String}img:Thereceipttobeprinted,asanimage
     */
    send_printing_job:function(img){
        returnthis.connection.rpc('/hw_proxy/default_printer_action',{
            data:{
                action:'print_receipt',
                receipt:img,
            }
        });
    },
});

return{
    PrinterMixin:PrinterMixin,
    Printer:Printer,
    PrintResult,
    PrintResultGenerator,
}
});
