flectra.define('point_of_sale.ReceiptScreen',function(require){
    'usestrict';

    const{Printer}=require('point_of_sale.Printer');
    const{is_email}=require('web.utils');
    const{useRef,useContext}=owl.hooks;
    const{useErrorHandlers,onChangeOrder}=require('point_of_sale.custom_hooks');
    constRegistries=require('point_of_sale.Registries');
    constAbstractReceiptScreen=require('point_of_sale.AbstractReceiptScreen');

    constReceiptScreen=(AbstractReceiptScreen)=>{
        classReceiptScreenextendsAbstractReceiptScreen{
            constructor(){
                super(...arguments);
                useErrorHandlers();
                onChangeOrder(null,(newOrder)=>newOrder&&this.render());
                this.orderReceipt=useRef('order-receipt');
                constorder=this.currentOrder;
                constclient=order.get_client();
                this.orderUiState=useContext(order.uiState.ReceiptScreen);
                this.orderUiState.inputEmail=this.orderUiState.inputEmail||(client&&client.email)||'';
                this.is_email=is_email;
            }
            mounted(){
                //Here,wesendatasktotheeventloopthathandles
                //theprintingofthereceiptwhenthecomponentismounted.
                //Wearedoingthisbecausewewantthereceiptscreentobe
                //displayedregardlessofwhathappentothehandleAutoPrint
                //call.
                setTimeout(async()=>awaitthis.handleAutoPrint(),0);
            }
            asynconSendEmail(){
                if(!is_email(this.orderUiState.inputEmail)){
                    this.orderUiState.emailSuccessful=false;
                    this.orderUiState.emailNotice=this.env._t('Invalidemail.');
                    return;
                }
                try{
                    awaitthis._sendReceiptToCustomer();
                    this.orderUiState.emailSuccessful=true;
                    this.orderUiState.emailNotice=this.env._t('Emailsent.');
                }catch(error){
                    this.orderUiState.emailSuccessful=false;
                    this.orderUiState.emailNotice=this.env._t('Sendingemailfailed.Pleasetryagain.');
                }
            }
            getorderAmountPlusTip(){
                constorder=this.currentOrder;
                constorderTotalAmount=order.get_total_with_tax();
                consttip_product_id=this.env.pos.config.tip_product_id&&this.env.pos.config.tip_product_id[0];
                consttipLine=order
                    .get_orderlines()
                    .find((line)=>tip_product_id&&line.product.id===tip_product_id);
                consttipAmount=tipLine?tipLine.get_all_prices().priceWithTax:0;
                constorderAmountStr=this.env.pos.format_currency(orderTotalAmount-tipAmount);
                if(!tipAmount)returnorderAmountStr;
                consttipAmountStr=this.env.pos.format_currency(tipAmount);
                return`${orderAmountStr}+${tipAmountStr}tip`;
            }
            getcurrentOrder(){
                returnthis.env.pos.get_order();
            }
            getnextScreen(){
                return{name:'ProductScreen'};
            }
            whenClosing(){
                this.orderDone();
            }
            /**
             *Thisfunctioniscalledoutsidetherenderingcallstack.Thisway,
             *wedon'tblockthedisplayingofReceiptScreenwhenitismounted;additionally,
             *anyerrorthatcanhappenduringtheprintingdoesnotaffecttherendering.
             */
            asynchandleAutoPrint(){
                if(this._shouldAutoPrint()){
                    constcurrentOrder=this.currentOrder;
                    awaitthis.printReceipt();
                    if(this.currentOrder&&this.currentOrder===currentOrder&&currentOrder._printed&&this._shouldCloseImmediately()){
                        this.whenClosing();
                    }
                }
            }
            orderDone(){
                this.currentOrder.finalize();
                const{name,props}=this.nextScreen;
                this.showScreen(name,props);
            }
            asyncprintReceipt(){
                constcurrentOrder=this.currentOrder;
                constisPrinted=awaitthis._printReceipt();
                if(isPrinted){
                    currentOrder._printed=true;
                }
            }
            _shouldAutoPrint(){
                returnthis.env.pos.config.iface_print_auto&&!this.currentOrder._printed;
            }
            _shouldCloseImmediately(){
                varinvoiced_finalized=this.currentOrder.is_to_invoice()?this.currentOrder.finalized:true;
                returnthis.env.pos.proxy.printer&&this.env.pos.config.iface_print_skip_screen&&invoiced_finalized;
            }
            async_sendReceiptToCustomer(){
                constprinter=newPrinter(null,this.env.pos);
                constreceiptString=this.orderReceipt.comp.el.outerHTML;
                constticketImage=awaitprinter.htmlToImg(receiptString);
                constorder=this.currentOrder;
                constclient=order.get_client();
                constorderName=order.get_name();
                constorderClient={email:this.orderUiState.inputEmail,name:client?client.name:this.orderUiState.inputEmail};
                constorder_server_id=this.env.pos.validated_orders_name_server_id_map[orderName];
                if(!order_server_id){
                    this.showPopup('ErrorPopup',{
                        title:this.env._t('Unsyncedorder'),
                        body:this.env._t('Thisorderisnotyetsyncedtoserver.Makesureitissyncedthentryagain.'),
                    });
                    returnPromise.reject();
                }
                awaitthis.rpc({
                    model:'pos.order',
                    method:'action_receipt_to_customer',
                    args:[[order_server_id],orderName,orderClient,ticketImage],
                });
            }
        }
        ReceiptScreen.template='ReceiptScreen';
        returnReceiptScreen;
    };

    Registries.Component.addByExtending(ReceiptScreen,AbstractReceiptScreen);

    returnReceiptScreen;
});
