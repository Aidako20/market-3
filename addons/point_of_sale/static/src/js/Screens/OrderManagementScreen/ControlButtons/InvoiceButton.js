flectra.define('point_of_sale.InvoiceButton',function(require){
    'usestrict';

    const{useListener}=require('web.custom_hooks');
    const{useContext}=owl.hooks;
    const{isRpcError}=require('point_of_sale.utils');
    constPosComponent=require('point_of_sale.PosComponent');
    constOrderManagementScreen=require('point_of_sale.OrderManagementScreen');
    constOrderFetcher=require('point_of_sale.OrderFetcher');
    constRegistries=require('point_of_sale.Registries');
    constcontexts=require('point_of_sale.PosContext');

    classInvoiceButtonextendsPosComponent{
        constructor(){
            super(...arguments);
            useListener('click',this._onClick);
            this.orderManagementContext=useContext(contexts.orderManagement);
        }
        getselectedOrder(){
            returnthis.orderManagementContext.selectedOrder;
        }
        setselectedOrder(value){
            this.orderManagementContext.selectedOrder=value;
        }
        getisAlreadyInvoiced(){
            if(!this.selectedOrder)returnfalse;
            returnBoolean(this.selectedOrder.account_move);
        }
        getcommandName(){
            if(!this.selectedOrder){
                return'Invoice';
            }else{
                returnthis.isAlreadyInvoiced
                    ?'ReprintInvoice'
                    :this.selectedOrder.isFromClosedSession
                    ?'CannotInvoice'
                    :'Invoice';
            }
        }
        getisHighlighted(){
            returnthis.selectedOrder&&!this.isAlreadyInvoiced&&!this.selectedOrder.isFromClosedSession;
        }
        async_downloadInvoice(orderId){
            try{
                awaitthis.env.pos.do_action('point_of_sale.pos_invoice_report',{
                    additional_context:{
                        active_ids:[orderId],
                    },
                });
            }catch(error){
                if(errorinstanceofError){
                    throwerror;
                }else{
                    //NOTE:errorhereismostprobablyundefined
                    this.showPopup('ErrorPopup',{
                        title:this.env._t('NetworkError'),
                        body:this.env._t('Unabletodownloadinvoice.'),
                    });
                }
            }
        }
        async_invoiceOrder(){
            constorder=this.selectedOrder;
            if(!order)return;

            constorderId=order.backendId;

            //Part0.1.Ifalreadyinvoiced,printtheinvoice.
            if(this.isAlreadyInvoiced){
                awaitthis._downloadInvoice(orderId);
                return;
            }

            //Part0.2.Checkiforderbelongstoanactivesession.
            //Ifnot,donotallowinvoicing.
            if(order.isFromClosedSession){
                this.showPopup('ErrorPopup',{
                    title:this.env._t('Sessionisclosed'),
                    body:this.env._t('Cannotinvoiceorderfromclosedsession.'),
                });
                return;
            }

            //Part1:Handlemissingclient.
            //Writetopos.ordertheselectedclient.
            if(!order.get_client()){
                const{confirmed:confirmedPopup}=awaitthis.showPopup('ConfirmPopup',{
                    title:'Needcustomertoinvoice',
                    body:'Doyouwanttoopenthecustomerlisttoselectcustomer?',
                });
                if(!confirmedPopup)return;

                const{confirmed:confirmedTempScreen,payload:newClient}=awaitthis.showTempScreen(
                    'ClientListScreen'
                );
                if(!confirmedTempScreen)return;

                awaitthis.rpc({
                    model:'pos.order',
                    method:'write',
                    args:[[orderId],{partner_id:newClient.id}],
                    kwargs:{context:this.env.session.user_context},
                });
            }

            //Part2:Invoicetheorder.
            awaitthis.rpc(
                {
                    model:'pos.order',
                    method:'action_pos_order_invoice',
                    args:[orderId],
                    kwargs:{context:this.env.session.user_context},
                },
                {
                    timeout:30000,
                    shadow:true,
                }
            );

            //Part3:Downloadinvoice.
            awaitthis._downloadInvoice(orderId);

            //Invalidatethecachethenfetchtheupdatedorder.
            OrderFetcher.invalidateCache([orderId]);
            awaitOrderFetcher.fetch();
            this.selectedOrder=OrderFetcher.get(this.selectedOrder.backendId);
        }
        async_onClick(){
            try{
                awaitthis._invoiceOrder();
            }catch(error){
                if(isRpcError(error)&&error.message.code<0){
                    this.showPopup('ErrorPopup',{
                        title:this.env._t('NetworkError'),
                        body:this.env._t('Unabletoinvoiceorder.'),
                    });
                }else{
                    throwerror;
                }
            }
        }
    }
    InvoiceButton.template='InvoiceButton';

    OrderManagementScreen.addControlButton({
        component:InvoiceButton,
        condition:function(){
            returnthis.env.pos.config.module_account;
        },
    });

    Registries.Component.add(InvoiceButton);

    returnInvoiceButton;
});
