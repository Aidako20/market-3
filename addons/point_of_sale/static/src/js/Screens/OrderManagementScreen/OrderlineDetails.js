flectra.define('point_of_sale.OrderlineDetails',function(require){
    'usestrict';

    constPosComponent=require('point_of_sale.PosComponent');
    constRegistries=require('point_of_sale.Registries');
    const{format}=require('web.field_utils');
    const{round_precision:round_pr}=require('web.utils');

    /**
     *@props{pos.order.line}line
     */
    classOrderlineDetailsextendsPosComponent{
        getline(){
            constline=this.props.line;
            constformatQty=(line)=>{
                constquantity=line.get_quantity();
                constunit=line.get_unit();
                constdecimals=this.env.pos.dp['ProductUnitofMeasure'];
                constrounding=Math.max(unit.rounding,Math.pow(10,-decimals));
                constroundedQuantity=round_pr(quantity,rounding);
                returnformat.float(roundedQuantity,{digits:[69,decimals]});
            };
            return{
                productName:line.get_full_product_name(),
                totalPrice:line.get_price_with_tax(),
                quantity:formatQty(line),
                unit:line.get_unit().name,
                unitPrice:line.get_unit_price(),
            };
        }
        getproductName(){
            returnthis.line.productName;
        }
        gettotalPrice(){
            returnthis.env.pos.format_currency(this.line.totalPrice);
        }
        getquantity(){
            returnthis.line.quantity;
        }
        getunitPrice(){
            returnthis.line.unitPrice;
        }
        getunit(){
            returnthis.line.unit;
        }
        getpricePerUnit(){
            return`${this.unit}at${this.unitPrice}/${this.unit}`;
        }
    }
    OrderlineDetails.template='OrderlineDetails';

    Registries.Component.add(OrderlineDetails);

    returnOrderlineDetails;
});
