flectra.define('point_of_sale.OrderManagementScreen',function(require){
    'usestrict';

    const{useContext}=owl.hooks;
    const{useListener}=require('web.custom_hooks');
    constControlButtonsMixin=require('point_of_sale.ControlButtonsMixin');
    constNumberBuffer=require('point_of_sale.NumberBuffer');
    constRegistries=require('point_of_sale.Registries');
    constOrderFetcher=require('point_of_sale.OrderFetcher');
    constIndependentToOrderScreen=require('point_of_sale.IndependentToOrderScreen');
    constcontexts=require('point_of_sale.PosContext');

    classOrderManagementScreenextendsControlButtonsMixin(IndependentToOrderScreen){
        constructor(){
            super(...arguments);
            useListener('close-screen',this.close);
            useListener('set-numpad-mode',this._setNumpadMode);
            useListener('click-order',this._onClickOrder);
            useListener('next-page',this._onNextPage);
            useListener('prev-page',this._onPrevPage);
            useListener('search',this._onSearch);
            NumberBuffer.use({
                nonKeyboardInputEvent:'numpad-click-input',
                useWithBarcode:true,
            });
            this.numpadMode='quantity';
            OrderFetcher.setComponent(this);
            OrderFetcher.setConfigId(this.env.pos.config_id);
            this.orderManagementContext=useContext(contexts.orderManagement);
        }
        mounted(){
            OrderFetcher.on('update',this,this.render);
            this.env.pos.get('orders').on('addremove',this.render,this);

            //calculatehowmanycanfitinthescreen.
            //Itisbasedontheheightoftheheaderelement.
            //Sotheresultisonlyaccurateifeachrowisjustsingleline.
            constflexContainer=this.el.querySelector('.flex-container');
            constcpEl=this.el.querySelector('.control-panel');
            constheaderEl=this.el.querySelector('.order-row.header');
            constval=Math.trunc(
                (flexContainer.offsetHeight-cpEl.offsetHeight-headerEl.offsetHeight)/
                    headerEl.offsetHeight
            );
            OrderFetcher.setNPerPage(val);

            //Fetchtheorderaftermountingsothatordermanagementscreen
            //isshownwhilefetching.
            setTimeout(()=>OrderFetcher.fetch(),0);
        }
        willUnmount(){
            OrderFetcher.off('update',this);
            this.env.pos.get('orders').off('addremove',null,this);
        }
        getselectedClient(){
            constorder=this.orderManagementContext.selectedOrder;
            returnorder?order.get_client():null;
        }
        getorders(){
            returnOrderFetcher.get();
        }
        async_setNumpadMode(event){
            const{mode}=event.detail;
            this.numpadMode=mode;
            NumberBuffer.reset();
        }
        _onNextPage(){
            OrderFetcher.nextPage();
        }
        _onPrevPage(){
            OrderFetcher.prevPage();
        }
        _onSearch({detail:domain}){
            OrderFetcher.setSearchDomain(domain);
            OrderFetcher.setPage(1);
            OrderFetcher.fetch();
        }
        _onClickOrder({detail:clickedOrder}){
            if(!clickedOrder||clickedOrder.locked){
                this.orderManagementContext.selectedOrder=clickedOrder;
            }else{
                this._setOrder(clickedOrder);
            }
        }
        /**
         *@param{models.Order}order
         */
        _setOrder(order){
            this.env.pos.set_order(order);
            if(order===this.env.pos.get_order()){
                this.close();
            }
        }
    }
    OrderManagementScreen.template='OrderManagementScreen';
    OrderManagementScreen.hideOrderSelector=true;

    Registries.Component.add(OrderManagementScreen);

    returnOrderManagementScreen;
});
