flectra.define('point_of_sale.PaymentScreen',function(require){
    'usestrict';

    const{parse}=require('web.field_utils');
    constPosComponent=require('point_of_sale.PosComponent');
    const{useErrorHandlers,useAsyncLockedMethod}=require('point_of_sale.custom_hooks');
    constNumberBuffer=require('point_of_sale.NumberBuffer');
    const{useListener}=require('web.custom_hooks');
    constRegistries=require('point_of_sale.Registries');
    const{onChangeOrder}=require('point_of_sale.custom_hooks');

    classPaymentScreenextendsPosComponent{
        constructor(){
            super(...arguments);
            useListener('delete-payment-line',this.deletePaymentLine);
            useListener('select-payment-line',this.selectPaymentLine);
            useListener('new-payment-line',this.addNewPaymentLine);
            useListener('update-selected-paymentline',this._updateSelectedPaymentline);
            useListener('send-payment-request',this._sendPaymentRequest);
            useListener('send-payment-cancel',this._sendPaymentCancel);
            useListener('send-payment-reverse',this._sendPaymentReverse);
            useListener('send-force-done',this._sendForceDone);
            this.lockedValidateOrder=useAsyncLockedMethod(this.validateOrder);
            NumberBuffer.use(this._getNumberBufferConfig);
            onChangeOrder(this._onPrevOrder,this._onNewOrder);
            useErrorHandlers();
            this.payment_interface=null;
            this.error=false;
            this.payment_methods_from_config=this.env.pos.payment_methods.filter(method=>this.env.pos.config.payment_method_ids.includes(method.id));
        }
        get_getNumberBufferConfig(){
            return{
                //ThenumberBufferlistenstothiseventtoupdateitsstate.
                //Basicallymeans'updatethebufferwhenthiseventistriggered'
                nonKeyboardInputEvent:'input-from-numpad',
                //Whenthebufferisupdated,triggerthisevent.
                //Notethatthecomponentlistenstoit.
                triggerAtInput:'update-selected-paymentline',
            }
        }
        getcurrentOrder(){
            returnthis.env.pos.get_order();
        }
        getpaymentLines(){
            returnthis.currentOrder.get_paymentlines();
        }
        getselectedPaymentLine(){
            returnthis.currentOrder.selected_paymentline;
        }
        asyncselectClient(){
            //IMPROVEMENT:Thiscodesnippetisrepeatedmultipletimes.
            //Maybeit'sbettertocreateafunctionforit.
            constcurrentClient=this.currentOrder.get_client();
            const{confirmed,payload:newClient}=awaitthis.showTempScreen(
                'ClientListScreen',
                {client:currentClient}
            );
            if(confirmed){
                this.currentOrder.set_client(newClient);
                this.currentOrder.updatePricelist(newClient);
            }
        }
        addNewPaymentLine({detail:paymentMethod}){
            //originalfunction:click_paymentmethods
            letresult=this.currentOrder.add_paymentline(paymentMethod);
            if(result){
                NumberBuffer.reset();
                returntrue;
            }
            else{
                this.showPopup('ErrorPopup',{
                    title:this.env._t('Error'),
                    body:this.env._t('Thereisalreadyanelectronicpaymentinprogress.'),
                });
                returnfalse;
            }
        }
        _updateSelectedPaymentline(){
            if(this.paymentLines.every((line)=>line.paid)){
                this.currentOrder.add_paymentline(this.payment_methods_from_config[0]);
            }
            if(!this.selectedPaymentLine)return;//donothingifnoselectedpaymentline
            //disablechangingamountonpaymentlineswithrunningordonepaymentsonapaymentterminal
            constpayment_terminal=this.selectedPaymentLine.payment_method.payment_terminal;
            if(
                payment_terminal&&
                !['pending','retry'].includes(this.selectedPaymentLine.get_payment_status())
            ){
                return;
            }
            if(NumberBuffer.get()===null){
                this.deletePaymentLine({detail:{cid:this.selectedPaymentLine.cid}});
            }else{
                this.selectedPaymentLine.set_amount(NumberBuffer.getFloat());
            }
        }
        toggleIsToInvoice(){
            //click_invoice
            this.currentOrder.set_to_invoice(!this.currentOrder.is_to_invoice());
            this.render();
        }
        openCashbox(){
            this.env.pos.proxy.printer.open_cashbox();
        }
        asyncaddTip(){
            //click_tip
            consttip=this.currentOrder.get_tip();
            constchange=this.currentOrder.get_change();
            letvalue=tip.toFixed(this.env.pos.decimals);

            if(tip===0&&change>0){
                value=change;
            }

            const{confirmed,payload}=awaitthis.showPopup('NumberPopup',{
                title:tip?this.env._t('ChangeTip'):this.env._t('AddTip'),
                startingValue:value,
            });

            if(confirmed){
                this.currentOrder.set_tip(parse.float(payload));
            }
        }
        deletePaymentLine(event){
            varself=this;
            const{cid}=event.detail;
            constline=this.paymentLines.find((line)=>line.cid===cid);

            //Ifapaymentlinewithapaymentterminallinkedto
            //itisremoved,theterminalshouldgetacancel
            //request.
            if(['waiting','waitingCard','timeout'].includes(line.get_payment_status())){
                line.set_payment_status('waitingCancel');
                line.payment_method.payment_terminal.send_payment_cancel(this.currentOrder,cid).then(function(){
                    self.currentOrder.remove_paymentline(line);
                    NumberBuffer.reset();
                    self.render();
                })
            }
            elseif(line.get_payment_status()!=='waitingCancel'){
                this.currentOrder.remove_paymentline(line);
                NumberBuffer.reset();
                this.render();
            }
        }
        selectPaymentLine(event){
            const{cid}=event.detail;
            constline=this.paymentLines.find((line)=>line.cid===cid);
            this.currentOrder.select_paymentline(line);
            NumberBuffer.reset();
            this.render();
        }
        asyncvalidateOrder(isForceValidate){
            if(this.env.pos.config.cash_rounding){
                if(!this.env.pos.get_order().check_paymentlines_rounding()){
                    this.showPopup('ErrorPopup',{
                        title:this.env._t('Roundingerrorinpaymentlines'),
                        body:this.env._t("Theamountofyourpaymentlinesmustberoundedtovalidatethetransaction."),
                    });
                    return;
                }
            }
            if(awaitthis._isOrderValid(isForceValidate)){
                //removependingpaymentsbeforefinalizingthevalidation
                for(letlineofthis.paymentLines){
                    if(!line.is_done())this.currentOrder.remove_paymentline(line);
                }
                awaitthis._finalizeValidation();
            }
        }
        async_finalizeValidation(){
            if((this.currentOrder.is_paid_with_cash()||this.currentOrder.get_change())&&this.env.pos.config.iface_cashdrawer){
                this.env.pos.proxy.printer.open_cashbox();
            }

            this.currentOrder.initialize_validation_date();
            this.currentOrder.finalized=true;

            letsyncedOrderBackendIds=[];

            try{
                if(this.currentOrder.is_to_invoice()){
                    syncedOrderBackendIds=awaitthis.env.pos.push_and_invoice_order(
                        this.currentOrder
                    );
                }else{
                    syncedOrderBackendIds=awaitthis.env.pos.push_single_order(this.currentOrder);
                }
            }catch(error){
                if(error.code==700||error.code==701)
                    this.error=true;
                if(errorinstanceofError){
                    throwerror;
                }else{
                    awaitthis._handlePushOrderError(error);
                }
            }
            if(syncedOrderBackendIds.length&&this.currentOrder.wait_for_push_order()){
                constresult=awaitthis._postPushOrderResolve(
                    this.currentOrder,
                    syncedOrderBackendIds
                );
                if(!result){
                    awaitthis.showPopup('ErrorPopup',{
                        title:'Error:nointernetconnection.',
                        body:error,
                    });
                }
            }

            this.showScreen(this.nextScreen);

            //Ifwesucceededinsyncingthecurrentorder,and
            //therearestillotherordersthatareleftunsynced,
            //weasktheuserifheiswillingtowaitandsyncthem.
            if(syncedOrderBackendIds.length&&this.env.pos.db.get_orders().length){
                const{confirmed}=awaitthis.showPopup('ConfirmPopup',{
                    title:this.env._t('Remainingunsyncedorders'),
                    body:this.env._t(
                        'Thereareunsyncedorders.Doyouwanttosynctheseorders?'
                    ),
                });
                if(confirmed){
                    //NOTE:Notyetsureifthisshouldbeawaitedornot.
                    //Ifawaited,someoperationslikechangingscreen
                    //mightnotwork.
                    this.env.pos.push_orders();
                }
            }
        }
        getnextScreen(){
            return!this.error?'ReceiptScreen':'ProductScreen';
        }
        async_isOrderValid(isForceValidate){
            if(this.currentOrder.get_orderlines().length===0){
                this.showPopup('ErrorPopup',{
                    title:this.env._t('EmptyOrder'),
                    body:this.env._t(
                        'Theremustbeatleastoneproductinyourorderbeforeitcanbevalidated'
                    ),
                });
                returnfalse;
            }

            if(this.currentOrder.is_to_invoice()&&!this.currentOrder.get_client()){
                const{confirmed}=awaitthis.showPopup('ConfirmPopup',{
                    title:this.env._t('PleaseselecttheCustomer'),
                    body:this.env._t(
                        'Youneedtoselectthecustomerbeforeyoucaninvoiceanorder.'
                    ),
                });
                if(confirmed){
                    this.selectClient();
                }
                returnfalse;
            }

            if(!this.currentOrder.is_paid()||this.invoicing){
                returnfalse;
            }

            if(this.currentOrder.has_not_valid_rounding()){
                varline=this.currentOrder.has_not_valid_rounding();
                this.showPopup('ErrorPopup',{
                    title:this.env._t('Incorrectrounding'),
                    body:this.env._t(
                        'Youhavetoroundyourpaymentslines.'+line.amount+'isnotrounded.'
                    ),
                });
                returnfalse;
            }

            //Theexactamountmustbepaidifthereisnocashpaymentmethoddefined.
            if(
                Math.abs(
                    this.currentOrder.get_total_with_tax()-this.currentOrder.get_total_paid() +this.currentOrder.get_rounding_applied()
                )>0.00001
            ){
                varcash=false;
                for(vari=0;i<this.env.pos.payment_methods.length;i++){
                    cash=cash||this.env.pos.payment_methods[i].is_cash_count;
                }
                if(!cash){
                    this.showPopup('ErrorPopup',{
                        title:this.env._t('Cannotreturnchangewithoutacashpaymentmethod'),
                        body:this.env._t(
                            'Thereisnocashpaymentmethodavailableinthispointofsaletohandlethechange.\n\nPleasepaytheexactamountoraddacashpaymentmethodinthepointofsaleconfiguration'
                        ),
                    });
                    returnfalse;
                }
            }

            //ifthechangeistoolarge,it'sprobablyaninputerror,maketheuserconfirm.
            if(
                !isForceValidate&&
                this.currentOrder.get_total_with_tax()>0&&
                this.currentOrder.get_total_with_tax()*1000<this.currentOrder.get_total_paid()
            ){
                this.showPopup('ConfirmPopup',{
                    title:this.env._t('PleaseConfirmLargeAmount'),
                    body:
                        this.env._t('Areyousurethatthecustomerwantsto pay')+
                        ''+
                        this.env.pos.format_currency(this.currentOrder.get_total_paid())+
                        ''+
                        this.env._t('foranorderof')+
                        ''+
                        this.env.pos.format_currency(this.currentOrder.get_total_with_tax())+
                        ''+
                        this.env._t('?Clicking"Confirm"willvalidatethepayment.'),
                }).then(({confirmed})=>{
                    if(confirmed)this.lockedValidateOrder(true);
                });
                returnfalse;
            }

            returntrue;
        }
        async_postPushOrderResolve(order,order_server_ids){
            returntrue;
        }
        async_sendPaymentRequest({detail:line}){
            //Otherpaymentlinescannotbereversedanymore
            this.paymentLines.forEach(function(line){
                line.can_be_reversed=false;
            });

            constpayment_terminal=line.payment_method.payment_terminal;
            line.set_payment_status('waiting');

            constisPaymentSuccessful=awaitpayment_terminal.send_payment_request(line.cid);
            if(isPaymentSuccessful){
                line.set_payment_status('done');
                line.can_be_reversed=payment_terminal.supports_reversals;
            }else{
                line.set_payment_status('retry');
            }
        }
        async_sendPaymentCancel({detail:line}){
            constpayment_terminal=line.payment_method.payment_terminal;
            line.set_payment_status('waitingCancel');
            constisCancelSuccessful=awaitpayment_terminal.send_payment_cancel(this.currentOrder,line.cid);
            if(isCancelSuccessful){
                line.set_payment_status('retry');
            }else{
                line.set_payment_status('waitingCard');
            }
        }
        async_sendPaymentReverse({detail:line}){
            constpayment_terminal=line.payment_method.payment_terminal;
            line.set_payment_status('reversing');

            constisReversalSuccessful=awaitpayment_terminal.send_payment_reversal(line.cid);
            if(isReversalSuccessful){
                line.set_amount(0);
                line.set_payment_status('reversed');
            }else{
                line.can_be_reversed=false;
                line.set_payment_status('done');
            }
        }
        async_sendForceDone({detail:line}){
            line.set_payment_status('done');
        }
        _onPrevOrder(prevOrder){
            prevOrder.off('change',null,this);
            prevOrder.paymentlines.off('change',null,this);
            if(prevOrder){
                prevOrder.stop_electronic_payment();
            }
        }
        async_onNewOrder(newOrder){
            newOrder.on('change',this.render,this);
            newOrder.paymentlines.on('change',this.render,this);
            NumberBuffer.reset();
            awaitthis.render();
        }
    }
    PaymentScreen.template='PaymentScreen';

    Registries.Component.add(PaymentScreen);

    returnPaymentScreen;
});
