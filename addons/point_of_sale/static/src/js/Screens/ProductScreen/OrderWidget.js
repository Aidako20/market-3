flectra.define('point_of_sale.OrderWidget',function(require){
    'usestrict';

    const{useState,useRef,onPatched}=owl.hooks;
    const{useListener}=require('web.custom_hooks');
    const{onChangeOrder}=require('point_of_sale.custom_hooks');
    constPosComponent=require('point_of_sale.PosComponent');
    constRegistries=require('point_of_sale.Registries');

    classOrderWidgetextendsPosComponent{
        constructor(){
            super(...arguments);
            useListener('select-line',this._selectLine);
            useListener('edit-pack-lot-lines',this._editPackLotLines);
            onChangeOrder(this._onPrevOrder,this._onNewOrder);
            this.scrollableRef=useRef('scrollable');
            this.scrollToBottom=false;
            onPatched(()=>{
                //IMPROVEMENT
                //Thisonejuststaysatthebottomoftheorderlineslist.
                //Perhapsitisbettertoscrolltotheaddedormodifiedorderline.
                if(this.scrollToBottom){
                    this.scrollableRef.el.scrollTop=this.scrollableRef.el.scrollHeight;
                    this.scrollToBottom=false;
                }
            });
            this.state=useState({total:0,tax:0});
            this._updateSummary();
        }
        getorder(){
            returnthis.env.pos.get_order();
        }
        getorderlinesArray(){
            returnthis.order?this.order.get_orderlines():[];
        }
        _selectLine(event){
            this.order.select_orderline(event.detail.orderline);
        }
        //IMPROVEMENT:MightbebettertoliftthistoProductScreen
        //becausethereissimilaroperationwhenclickingaproduct.
        //
        //Furthermore,whatifanumberdifferentfrom1(or-1)isspecified
        //toanorderlinethathasproducttrackedbylot.Lottracking(based
        //onthecurrentimplementation)requiresthat1itemperorderlineis
        //allowed.
        async_editPackLotLines(event){
            constorderline=event.detail.orderline;
            constisAllowOnlyOneLot=orderline.product.isAllowOnlyOneLot();
            constpackLotLinesToEdit=orderline.getPackLotLinesToEdit(isAllowOnlyOneLot);
            const{confirmed,payload}=awaitthis.showPopup('EditListPopup',{
                title:this.env._t('Lot/SerialNumber(s)Required'),
                isSingleItem:isAllowOnlyOneLot,
                array:packLotLinesToEdit,
            });
            if(confirmed){
                //Segregatetheoldandnewpacklotlines
                constmodifiedPackLotLines=Object.fromEntries(
                    payload.newArray.filter(item=>item.id).map(item=>[item.id,item.text])
                );
                constnewPackLotLines=payload.newArray
                    .filter(item=>!item.id)
                    .map(item=>({lot_name:item.text}));

                orderline.setPackLotLines({modifiedPackLotLines,newPackLotLines});
            }
            this.order.select_orderline(event.detail.orderline);
        }
        _onNewOrder(order){
            if(order){
                order.orderlines.on(
                    'new-orderline-selected',
                    ()=>this.trigger('new-orderline-selected'),
                    this
                );
                order.orderlines.on('change',this._updateSummary,this);
                order.orderlines.on(
                    'addremove',
                    ()=>{
                        this.scrollToBottom=true;
                        this._updateSummary();
                    },
                    this
                );
                order.on('change',this.render,this);
            }
            this._updateSummary();
            this.trigger('new-orderline-selected');
        }
        _onPrevOrder(order){
            if(order){
                order.orderlines.off('new-orderline-selected',null,this);
                order.orderlines.off('change',null,this);
                order.orderlines.off('addremove',null,this);
                order.off('change',null,this);
            }
        }
        _updateSummary(){
            consttotal=this.order?this.order.get_total_with_tax():0;
            consttax=this.order?total-this.order.get_total_without_tax():0;
            this.state.total=this.env.pos.format_currency(total);
            this.state.tax=this.env.pos.format_currency(tax);
            this.render();
        }
    }
    OrderWidget.template='OrderWidget';

    Registries.Component.add(OrderWidget);

    returnOrderWidget;
});
