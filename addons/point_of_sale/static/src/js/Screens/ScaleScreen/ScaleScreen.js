flectra.define('point_of_sale.ScaleScreen',function(require){
    'usestrict';

    const{useState,useExternalListener}=owl.hooks;
    constPosComponent=require('point_of_sale.PosComponent');
    const{round_precision:round_pr}=require('web.utils');
    constRegistries=require('point_of_sale.Registries');

    classScaleScreenextendsPosComponent{
        /**
         *@param{Object}props
         *@param{Object}props.productTheproducttoweight.
         */
        constructor(){
            super(...arguments);
            useExternalListener(document,'keyup',this._onHotkeys);
            this.state=useState({weight:0});
        }
        mounted(){
            //startthescalereading
            this._readScale();
        }
        willUnmount(){
            //stopthescalereading
            this.env.pos.proxy_queue.clear();
        }
        back(){
            this.props.resolve({confirmed:false,payload:null});
            this.trigger('close-temp-screen');
        }
        confirm(){
            this.props.resolve({
                confirmed:true,
                payload:{weight:this.state.weight},
            });
            this.trigger('close-temp-screen');
        }
        _onHotkeys(event){
            if(event.key==='Escape'){
                this.back();
            }elseif(event.key==='Enter'){
                this.confirm();
            }
        }
        _readScale(){
            this.env.pos.proxy_queue.schedule(this._setWeight.bind(this),{
                duration:500,
                repeat:true,
            });
        }
        async_setWeight(){
            constreading=awaitthis.env.pos.proxy.scale_read();
            this.state.weight=reading.weight;
        }
        get_activePricelist(){
            constcurrent_order=this.env.pos.get_order();
            letcurrent_pricelist=this.env.pos.default_pricelist;
            if(current_order){
                current_pricelist=current_order.pricelist;
            }
            returncurrent_pricelist;
        }
        getproductWeightString(){
            constdefaultstr=(this.state.weight||0).toFixed(3)+'Kg';
            if(!this.props.product||!this.env.pos){
                returndefaultstr;
            }
            constunit_id=this.props.product.uom_id;
            if(!unit_id){
                returndefaultstr;
            }
            constunit=this.env.pos.units_by_id[unit_id[0]];
            constweight=round_pr(this.state.weight||0,unit.rounding);
            letweightstr=weight.toFixed(Math.ceil(Math.log(1.0/unit.rounding)/Math.log(10)));
            weightstr+=''+unit.name;
            returnweightstr;
        }
        getcomputedPriceString(){
            returnthis.env.pos.format_currency(this.productPrice*this.state.weight);
        }
        getproductPrice(){
            constproduct=this.props.product;
            return(product?product.get_price(this._activePricelist,this.state.weight):0)||0;
        }
        getproductName(){
            return(
                (this.props.product?this.props.product.display_name:undefined)||
                'UnnamedProduct'
            );
        }
        getproductUom(){
            returnthis.props.product
                ?this.env.pos.units_by_id[this.props.product.uom_id[0]].name
                :'';
        }
    }
    ScaleScreen.template='ScaleScreen';

    Registries.Component.add(ScaleScreen);

    returnScaleScreen;
});
