flectra.define('point_of_sale.TicketScreen',function(require){
    'usestrict';

    constRegistries=require('point_of_sale.Registries');
    constIndependentToOrderScreen=require('point_of_sale.IndependentToOrderScreen');
    const{useListener}=require('web.custom_hooks');
    const{posbus}=require('point_of_sale.utils');

    classTicketScreenextendsIndependentToOrderScreen{
        constructor(){
            super(...arguments);
            useListener('close-screen',this.close);
            useListener('filter-selected',this._onFilterSelected);
            useListener('search',this._onSearch);
            this.searchDetails={};
            this.filter=null;
            this._initializeSearchFieldConstants();
        }
        mounted(){
            posbus.on('ticket-button-clicked',this,this.close);
            this.env.pos.get('orders').on('addremovechange',()=>this.render(),this);
            this.env.pos.on('change:selectedOrder',()=>this.render(),this);
        }
        willUnmount(){
            posbus.off('ticket-button-clicked',this);
            this.env.pos.get('orders').off('addremovechange',null,this);
            this.env.pos.off('change:selectedOrder',null,this);
        }
        _onFilterSelected(event){
            this.filter=event.detail.filter;
            this.render();
        }
        _onSearch(event){
            constsearchDetails=event.detail;
            Object.assign(this.searchDetails,searchDetails);
            this.render();
        }
        /**
         *Overridetoconditionallyshowthenewticketbutton.
         */
        getshowNewTicketButton(){
            returntrue;
        }
        getorderList(){
            returnthis.env.pos.get_order_list();
        }
        getfilteredOrderList(){
            const{AllTickets}=this.getOrderStates();
            constfilterCheck=(order)=>{
                if(this.filter&&this.filter!==AllTickets){
                    constscreen=order.get_screen_data();
                    returnthis.filter===this.constants.screenToStatusMap[screen.name];
                }
                returntrue;
            };
            const{fieldValue,searchTerm}=this.searchDetails;
            constfieldAccessor=this._searchFields[fieldValue];
            constsearchCheck=(order)=>{
                if(!fieldAccessor)returntrue;
                constfieldValue=fieldAccessor(order);
                if(fieldValue===null)returntrue;
                if(!searchTerm)returntrue;
                returnfieldValue&&fieldValue.toString().toLowerCase().includes(searchTerm.toLowerCase());
            };
            constpredicate=(order)=>{
                returnfilterCheck(order)&&searchCheck(order);
            };
            returnthis.orderList.filter(predicate);
        }
        selectOrder(order){
            this._setOrder(order);
            if(order===this.env.pos.get_order()){
                this.close();
            }
        }
        _setOrder(order){
            this.env.pos.set_order(order);
        }
        createNewOrder(){
            this.env.pos.add_new_order();
        }
        asyncdeleteOrder(order){
            constscreen=order.get_screen_data();
            if(['ProductScreen','PaymentScreen'].includes(screen.name)&&order.get_orderlines().length>0){
                const{confirmed}=awaitthis.showPopup('ConfirmPopup',{
                    title:this.env._t('Existingorderlines'),
                    body:_.str.sprintf(
                      this.env._t('%shasatotalamountof%s,areyousureyouwanttodeletethisorder?'),
                      order.name,this.getTotal(order)
                    ),
                });
                if(!confirmed)return;
            }
            if(order){
                awaitthis._canDeleteOrder(order);
                order.destroy({reason:'abandon'});
            }
            posbus.trigger('order-deleted');
        }
        getDate(order){
            returnmoment(order.creation_date).format('YYYY-MM-DDhh:mmA');
        }
        getTotal(order){
            returnthis.env.pos.format_currency(order.get_total_with_tax());
        }
        getCustomer(order){
            returnorder.get_client_name();
        }
        getCardholderName(order){
            returnorder.get_cardholder_name();
        }
        getEmployee(order){
            returnorder.employee?order.employee.name:'';
        }
        getStatus(order){
            constscreen=order.get_screen_data();
            returnthis.constants.screenToStatusMap[screen.name];
        }
        /**
         *Hidethedeletebuttonifoneofthepaymentsisa'done'electronicpayment.
         */
        hideDeleteButton(order){
            returnorder
                .get_paymentlines()
                .some((payment)=>payment.is_electronic()&&payment.get_payment_status()==='done');
        }
        showCardholderName(){
            returnthis.env.pos.payment_methods.some(method=>method.use_payment_terminal);
        }
        getsearchBarConfig(){
            return{
                searchFields:this.constants.searchFieldNames,
                filter:{show:true,options:this.filterOptions},
            };
        }
        getfilterOptions(){
            const{AllTickets,Ongoing,Payment,Receipt}=this.getOrderStates();
            return[AllTickets,Ongoing,Payment,Receipt];
        }
        /**
         *Anobjectwithkeyscontainingthesearchfieldnameswhichmaptofunctions.
         *Themappedfunctionswillbeusedtogeneraterepresentativestringfortheorder
         *tomatchthesearchtermwhensearching.
         *E.g.Given2orders,searchthosewith`ReceiptNumber`containing`1111`.
         *```
         *orders=[{
         *   name:'000-1111-222'
         *   total:10,
         *  },{
         *   name:'444-5555-666'
         *   total:15,
         *}]
         *```
         *`ReceiptNumber`searchfieldmapstothe`name`oftheorder.So,theorderswillbe
         *representedbytheirname,andthesearchwillresultto:
         *```
         *result=[{
         *   name:'000-1111-222',
         *   total:10,
         *}]
         *```
         *@returnsRecord<string,(models.Order)=>string>
         */
        get_searchFields(){
            const{ReceiptNumber,Date,Customer,CardholderName}=this.getSearchFieldNames();
            varfields={
                [ReceiptNumber]:(order)=>order.name,
                [Date]:(order)=>moment(order.creation_date).format('YYYY-MM-DDhh:mmA'),
                [Customer]:(order)=>order.get_client_name(),
            };

            if(this.showCardholderName()){
                fields[CardholderName]=(order)=>order.get_cardholder_name();
            }

            returnfields;
        }
        /**
         *Mapstheorderscreenparamstoorderstatus.
         */
        get_screenToStatusMap(){
            const{Ongoing,Payment,Receipt}=this.getOrderStates();
            return{
                ProductScreen:Ongoing,
                PaymentScreen:Payment,
                ReceiptScreen:Receipt,
            };
        }
        _initializeSearchFieldConstants(){
            this.constants={};
            Object.assign(this.constants,{
                searchFieldNames:Object.keys(this._searchFields),
                screenToStatusMap:this._screenToStatusMap,
            });
        }
        async_canDeleteOrder(order){
            returntrue;
        }
        getOrderStates(){
            return{
                AllTickets:this.env._t('AllTickets'),
                Ongoing:this.env._t('Ongoing'),
                Payment:this.env._t('Payment'),
                Receipt:this.env._t('Receipt'),
            };
        }
        getSearchFieldNames(){
            return{
                ReceiptNumber:this.env._t('ReceiptNumber'),
                Date:this.env._t('Date'),
                Customer:this.env._t('Customer'),
                CardholderName:this.env._t('CardholderName'),
            };
        }
    }
    TicketScreen.template='TicketScreen';

    Registries.Component.add(TicketScreen);

    returnTicketScreen;
});
