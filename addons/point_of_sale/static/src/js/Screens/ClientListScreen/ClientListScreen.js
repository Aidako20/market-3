flectra.define('point_of_sale.ClientListScreen',function(require){
    'usestrict';

    const{debounce}=owl.utils;
    constPosComponent=require('point_of_sale.PosComponent');
    constRegistries=require('point_of_sale.Registries');
    const{useListener}=require('web.custom_hooks');
    const{isRpcError}=require('point_of_sale.utils');
    const{useAsyncLockedMethod}=require('point_of_sale.custom_hooks');

    /**
     *Renderthisscreenusing`showTempScreen`toselectclient.
     *Whentheshownscreenisconfirmed('SetCustomer'or'DeselectCustomer'
     *buttonisclicked),thecallto`showTempScreen`resolvestothe
     *selectedclient.E.g.
     *
     *```js
     *const{confirmed,payload:selectedClient}=awaitshowTempScreen('ClientListScreen');
     *if(confirmed){
     *  //dosomethingwiththeselectedClient
     *}
     *```
     *
     *@propsclient-originallyselectedclient
     */
    classClientListScreenextendsPosComponent{
        constructor(){
            super(...arguments);
            this.lockedSaveChanges=useAsyncLockedMethod(this.saveChanges);
            useListener('click-save',()=>this.env.bus.trigger('save-customer'));
            useListener('click-edit',()=>this.editClient());
            useListener('save-changes',this.lockedSaveChanges);

            //WearenotusinguseStateherebecausetheobject
            //passedtouseStateconvertstheobjectanditscontents
            //toObserverproxy.Notsureoftheside-effectsofmaking
            //apersistentobject,suchaspos,intoowl.Observer.Butit
            //isbettertobesafe.
            this.state={
                query:null,
                selectedClient:this.props.client,
                detailIsShown:false,
                isEditMode:false,
                editModeProps:{
                    partner:{
                        country_id:this.env.pos.company.country_id,
                        state_id:this.env.pos.company.state_id,
                    }
                },
            };
            this.updateClientList=debounce(this.updateClientList,70);
        }

        //Lifecyclehooks
        back(){
            if(this.state.detailIsShown){
                this.state.detailIsShown=false;
                this.render();
            }else{
                this.props.resolve({confirmed:false,payload:false});
                this.trigger('close-temp-screen');
            }
        }
        confirm(){
            this.props.resolve({confirmed:true,payload:this.state.selectedClient});
            this.trigger('close-temp-screen');
        }
        //Getters

        getcurrentOrder(){
            returnthis.env.pos.get_order();
        }

        getclients(){
            if(this.state.query&&this.state.query.trim()!==''){
                returnthis.env.pos.db.search_partner(this.state.query.trim());
            }else{
                returnthis.env.pos.db.get_partners_sorted(1000);
            }
        }
        getisNextButtonVisible(){
            returnthis.state.selectedClient?true:false;
        }
        /**
         *Returnsthetextandcommandofthenextbutton.
         *ThecommandfieldisusedbytheclickNextcall.
         */
        getnextButton(){
            if(!this.props.client){
                return{command:'set',text:this.env._t('SetCustomer')};
            }elseif(this.props.client&&this.props.client===this.state.selectedClient){
                return{command:'deselect',text:this.env._t('DeselectCustomer')};
            }else{
                return{command:'set',text:this.env._t('ChangeCustomer')};
            }
        }

        //Methods

        //Wedeclarethiseventhandlerasadebouncefunctionin
        //ordertoloweritstriggerrate.
        updateClientList(event){
            this.state.query=event.target.value;
            constclients=this.clients;
            if(event.code==='Enter'&&clients.length===1){
                this.state.selectedClient=clients[0];
                this.clickNext();
            }else{
                this.render();
            }
        }
        clickClient(event){
            letpartner=event.detail.client;
            if(this.state.selectedClient===partner){
                this.state.selectedClient=null;
            }else{
                this.state.selectedClient=partner;
            }
            this.render();
        }
        editClient(){
            this.state.editModeProps={
                partner:this.state.selectedClient,
            };
            this.state.detailIsShown=true;
            this.render();
        }
        clickNext(){
            this.state.selectedClient=this.nextButton.command==='set'?this.state.selectedClient:null;
            this.confirm();
        }
        activateEditMode(event){
            const{isNewClient}=event.detail;
            this.state.isEditMode=true;
            this.state.detailIsShown=true;
            this.state.isNewClient=isNewClient;
            if(!isNewClient){
                this.state.editModeProps={
                    partner:this.state.selectedClient,
                };
            }
            this.render();
        }
        deactivateEditMode(){
            this.state.isEditMode=false;
            this.state.editModeProps={
                partner:{
                    country_id:this.env.pos.company.country_id,
                    state_id:this.env.pos.company.state_id,
                },
            };
            this.render();
        }
        asyncsaveChanges(event){
            try{
                letpartnerId=awaitthis.rpc({
                    model:'res.partner',
                    method:'create_from_ui',
                    args:[event.detail.processedChanges],
                });
                awaitthis.env.pos.load_new_partners();
                this.state.selectedClient=this.env.pos.db.get_partner_by_id(partnerId);
                this.state.detailIsShown=false;
                this.render();
            }catch(error){
                if(isRpcError(error)&&error.message.code<0){
                    awaitthis.showPopup('OfflineErrorPopup',{
                        title:this.env._t('Offline'),
                        body:this.env._t('Unabletosavechanges.'),
                    });
                }else{
                    throwerror;
                }
            }
        }
        cancelEdit(){
            this.deactivateEditMode();
        }
    }
    ClientListScreen.template='ClientListScreen';

    Registries.Component.add(ClientListScreen);

    returnClientListScreen;
});
