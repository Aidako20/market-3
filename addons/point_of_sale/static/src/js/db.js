flectra.define('point_of_sale.DB',function(require){
"usestrict";

varcore=require('web.core');
varutils=require('web.utils');
/*ThePosDBholdsreferencetodatathatiseither
 *-static:doesnotchangebetweenposreloads
 *-persistent:muststaybetweenreloads(orders)
 */

varPosDB=core.Class.extend({
    name:'openerp_pos_db',//theprefixofthelocalstoragedata
    limit:100, //themaximumnumberofresultsreturnedbyasearch
    init:function(options){
        options=options||{};
        this.name=options.name||this.name;
        this.limit=options.limit||this.limit;
        
        if(options.uuid){
            this.name=this.name+'_'+options.uuid;
        }

        //cachethedatainmemorytoavoidroundtripstothelocalstorage
        this.cache={};

        this.product_by_id={};
        this.product_by_barcode={};
        this.product_by_category_id={};

        this.partner_sorted=[];
        this.partner_by_id={};
        this.partner_by_barcode={};
        this.partner_search_string="";
        this.partner_write_date=null;

        this.category_by_id={};
        this.root_category_id =0;
        this.category_products={};
        this.category_ancestors={};
        this.category_childs={};
        this.category_parent   ={};
        this.category_search_string={};
    },

    /**
     *setsanuuidtopreventconflictinlocallystoreddatabetweenmultiplePoSConfigs.By
     *usingtheuuidoftheconfigthelocalstoragefromotherconfigswillnotgeteffectednor
     *loadedinsessionsthatdon'tbelongtothem.
     *
     *@param{string}uuidUniqueidentifierofthePoSConfiglinkedtothecurrentsession.
     */
    set_uuid:function(uuid){
        this.name=this.name+'_'+uuid;
    },

    /*returnsthecategoryobjectfromitsid.Ifyoupassalistofidasparameters,youget
     *alistofcategoryobjects.
     */ 
    get_category_by_id:function(categ_id){
        if(categ_idinstanceofArray){
            varlist=[];
            for(vari=0,len=categ_id.length;i<len;i++){
                varcat=this.category_by_id[categ_id[i]];
                if(cat){
                    list.push(cat);
                }else{
                    console.error("get_category_by_id:nocategoryhasid:",categ_id[i]);
                }
            }
            returnlist;
        }else{
            returnthis.category_by_id[categ_id];
        }
    },
    /*returnsalistofthecategory'schildcategoriesids,oranemptylist
     *ifacategoryhasnochilds*/
    get_category_childs_ids:function(categ_id){
        returnthis.category_childs[categ_id]||[];
    },
    /*returnsalistofallancestors(parent,grand-parent,etc)categoriesids
     *startingfromtherootcategorytothedirectparent*/
    get_category_ancestors_ids:function(categ_id){
        returnthis.category_ancestors[categ_id]||[];
    },
    /*returnstheparentcategory'sidofacategory,ortheroot_category_idifnoparent.
     *therootcategoryisparentofitself.*/
    get_category_parent_id:function(categ_id){
        returnthis.category_parent[categ_id]||this.root_category_id;
    },
    /*addscategoriesdefinitionstothedatabase.categoriesisalistofcategoriesobjectsas
     *returnedbytheopenerpserver.Categoriesmustbeinsertedbeforetheproductsorthe
     *product/categoriesassociationmay(will)notworkproperly*/
    add_categories:function(categories){
        varself=this;
        if(!this.category_by_id[this.root_category_id]){
            this.category_by_id[this.root_category_id]={
                id:this.root_category_id,
                name:'Root',
            };
        }
        categories.forEach(function(cat){
            self.category_by_id[cat.id]=cat;
        });
        categories.forEach(function(cat){
            varparent_id=cat.parent_id[0];
            if(!(parent_id&&self.category_by_id[parent_id])){
                parent_id=self.root_category_id;
            }
            self.category_parent[cat.id]=parent_id;
            if(!self.category_childs[parent_id]){
                self.category_childs[parent_id]=[];
            }
            self.category_childs[parent_id].push(cat.id);
        });
        functionmake_ancestors(cat_id,ancestors){
            self.category_ancestors[cat_id]=ancestors;

            ancestors=ancestors.slice(0);
            ancestors.push(cat_id);

            varchilds=self.category_childs[cat_id]||[];
            for(vari=0,len=childs.length;i<len;i++){
                make_ancestors(childs[i],ancestors);
            }
        }
        make_ancestors(this.root_category_id,[]);
    },
    category_contains:function(categ_id,product_id){
        varproduct=this.product_by_id[product_id];
        if(product){
            varcid=product.pos_categ_id[0];
            while(cid&&cid!==categ_id){
                cid=this.category_parent[cid];
            }
            return!!cid;
        }
        returnfalse;
    },
    /*loadsarecordstorefromthedatabase.returnsdefaultifnothingisfound*/
    load:function(store,deft){
        if(this.cache[store]!==undefined){
            returnthis.cache[store];
        }
        vardata=localStorage[this.name+'_'+store];
        if(data!==undefined&&data!==""){
            data=JSON.parse(data);
            this.cache[store]=data;
            returndata;
        }else{
            returndeft;
        }
    },
    /*savesarecordstoretothedatabase*/
    save:function(store,data){
        localStorage[this.name+'_'+store]=JSON.stringify(data);
        this.cache[store]=data;
    },
    _product_search_string:function(product){
        varstr=product.display_name;
        if(product.barcode){
            str+='|'+product.barcode;
        }
        if(product.default_code){
            str+='|'+product.default_code;
        }
        if(product.description){
            str+='|'+product.description;
        }
        if(product.description_sale){
            str+='|'+product.description_sale;
        }
        str =product.id+':'+str.replace(/[\n:]/g,'')+'\n';
        returnstr;
    },
    add_products:function(products){
        varstored_categories=this.product_by_category_id;

        if(!productsinstanceofArray){
            products=[products];
        }
        for(vari=0,len=products.length;i<len;i++){
            varproduct=products[i];
            if(product.idinthis.product_by_id)continue;
            if(product.available_in_pos){
                varsearch_string=utils.unaccent(this._product_search_string(product));
                varcateg_id=product.pos_categ_id?product.pos_categ_id[0]:this.root_category_id;
                product.product_tmpl_id=product.product_tmpl_id[0];
                if(!stored_categories[categ_id]){
                    stored_categories[categ_id]=[];
                }
                stored_categories[categ_id].push(product.id);

                if(this.category_search_string[categ_id]===undefined){
                    this.category_search_string[categ_id]='';
                }
                this.category_search_string[categ_id]+=search_string;

                varancestors=this.get_category_ancestors_ids(categ_id)||[];

                for(varj=0,jlen=ancestors.length;j<jlen;j++){
                    varancestor=ancestors[j];
                    if(!stored_categories[ancestor]){
                        stored_categories[ancestor]=[];
                    }
                    stored_categories[ancestor].push(product.id);

                    if(this.category_search_string[ancestor]===undefined){
                        this.category_search_string[ancestor]='';
                    }
                    this.category_search_string[ancestor]+=search_string;
                }
            }
            this.product_by_id[product.id]=product;
            if(product.barcode){
                this.product_by_barcode[product.barcode]=product;
            }
        }
    },
    _partner_search_string:function(partner){
        varstr= partner.name||'';
        if(partner.barcode){
            str+='|'+partner.barcode;
        }
        if(partner.address){
            str+='|'+partner.address;
        }
        if(partner.phone){
            str+='|'+partner.phone.split('').join('');
        }
        if(partner.mobile){
            str+='|'+partner.mobile.split('').join('');
        }
        if(partner.email){
            str+='|'+partner.email;
        }
        if(partner.vat){
            str+='|'+partner.vat;
        }
        str=''+partner.id+':'+str.replace(':','').replace(/\n/g,'')+'\n';
        returnstr;
    },
    add_partners:function(partners){
        varupdated_count=0;
        varnew_write_date='';
        varpartner;
        for(vari=0,len=partners.length;i<len;i++){
            partner=partners[i];

            varlocal_partner_date=(this.partner_write_date||'').replace(/^(\d{4}-\d{2}-\d{2})((\d{2}:?){3})$/,'$1T$2Z');
            vardist_partner_date=(partner.write_date||'').replace(/^(\d{4}-\d{2}-\d{2})((\d{2}:?){3})$/,'$1T$2Z');
            if(   this.partner_write_date&&
                    this.partner_by_id[partner.id]&&
                    newDate(local_partner_date).getTime()+1000>=
                    newDate(dist_partner_date).getTime()){
                //FIXME:Thewrite_dateisstoredwithmilisecprecisioninthedatabase
                //butthedateswegetbackareonlyprecisetothesecond.Thismeanswhen
                //youreadpartnersmodifiedstrictlyaftertimeX,yougetbackpartnersthatwere
                //modifiedX-1secago.
                continue;
            }elseif(new_write_date<partner.write_date){
                new_write_date =partner.write_date;
            }
            if(!this.partner_by_id[partner.id]){
                this.partner_sorted.push(partner.id);
            }
            this.partner_by_id[partner.id]=partner;

            updated_count+=1;
        }

        this.partner_write_date=new_write_date||this.partner_write_date;

        if(updated_count){
            //Iftherewereupdates,weneedtocompletely
            //rebuildthesearchstringandthebarcodeindexing

            this.partner_search_string="";
            this.partner_by_barcode={};

            for(varidinthis.partner_by_id){
                partner=this.partner_by_id[id];

                if(partner.barcode){
                    this.partner_by_barcode[partner.barcode]=partner;
                }
                partner.address=(partner.street?partner.street+',':'')+
                                  (partner.zip?partner.zip+',':'')+
                                  (partner.city?partner.city+',':'')+
                                  (partner.state_id?partner.state_id[1]+',':'')+
                                  (partner.country_id?partner.country_id[1]:'');
                this.partner_search_string+=this._partner_search_string(partner);
            }

            this.partner_search_string=utils.unaccent(this.partner_search_string);
        }
        returnupdated_count;
    },
    get_partner_write_date:function(){
        returnthis.partner_write_date||"1970-01-0100:00:00";
    },
    get_partner_by_id:function(id){
        returnthis.partner_by_id[id];
    },
    get_partner_by_barcode:function(barcode){
        returnthis.partner_by_barcode[barcode];
    },
    get_partners_sorted:function(max_count){
        max_count=max_count?Math.min(this.partner_sorted.length,max_count):this.partner_sorted.length;
        varpartners=[];
        for(vari=0;i<max_count;i++){
            partners.push(this.partner_by_id[this.partner_sorted[i]]);
        }
        returnpartners;
    },
    search_partner:function(query){
        try{
            query=query.replace(/[\[\]\(\)\+\*\?\.\-\!\&\^\$\|\~\_\{\}\:\,\\\/]/g,'.');
            query=query.replace(//g,'.+');
            varre=RegExp("([0-9]+):.*?"+utils.unaccent(query),"gi");
        }catch(e){
            return[];
        }
        varresults=[];
        for(vari=0;i<this.limit;i++){
            varr=re.exec(this.partner_search_string);
            if(r){
                varid=Number(r[1]);
                results.push(this.get_partner_by_id(id));
            }else{
                break;
            }
        }
        returnresults;
    },
    /*removesallthedatafromthedatabase.TODO:beingabletoselectivelyremovedata*/
    clear:function(){
        for(vari=0,len=arguments.length;i<len;i++){
            localStorage.removeItem(this.name+'_'+arguments[i]);
        }
    },
    /*thisinternalmethodsreturnsthecountofpropertiesinanobject.*/
    _count_props:function(obj){
        varcount=0;
        for(varpropinobj){
            if(obj.hasOwnProperty(prop)){
                count++;
            }
        }
        returncount;
    },
    get_product_by_id:function(id){
        returnthis.product_by_id[id];
    },
    get_product_by_barcode:function(barcode){
        if(this.product_by_barcode[barcode]){
            returnthis.product_by_barcode[barcode];
        }else{
            returnundefined;
        }
    },
    get_product_by_category:function(category_id){
        varproduct_ids =this.product_by_category_id[category_id];
        varlist=[];
        if(product_ids){
            for(vari=0,len=Math.min(product_ids.length,this.limit);i<len;i++){
                constproduct=this.product_by_id[product_ids[i]];
                if(!(product.active&&product.available_in_pos))continue;
                list.push(product);
            }
        }
        returnlist;
    },
    /*returnsalistofproductswith:
     *-acategorythatisorisachildofcategory_id,
     *-aname,packageorbarcodecontainingthequery(caseinsensitive)
     */
    search_product_in_category:function(category_id,query){
        try{
            query=query.replace(/[\[\]\(\)\+\*\?\.\-\!\&\^\$\|\~\_\{\}\:\,\\\/]/g,'.');
            query=query.replace(//g,'.+');
            varre=RegExp("([0-9]+):.*?"+utils.unaccent(query),"gi");
        }catch(e){
            return[];
        }
        varresults=[];
        for(vari=0;i<this.limit;i++){
            varr=re.exec(this.category_search_string[category_id]);
            if(r){
                varid=Number(r[1]);
                constproduct=this.get_product_by_id(id);
                if(!(product.active&&product.available_in_pos))continue;
                results.push(product);
            }else{
                break;
            }
        }
        returnresults;
    },
    /*fromaproductid,andalistofcategoryids,returns
     *trueiftheproductbelongstooneoftheprovidedcategory
     *oroneofitschildcategories.
     */
    is_product_in_category:function(category_ids,product_id){
        if(!(category_idsinstanceofArray)){
            category_ids=[category_ids];
        }
        varcat=this.get_product_by_id(product_id).pos_categ_id[0];
        while(cat){
            for(vari=0;i<category_ids.length;i++){
                if(cat==category_ids[i]){  //The==isimportant,idsmaybestrings
                    returntrue;
                }
            }
            cat=this.get_category_parent_id(cat);
        }
        returnfalse;
    },

    /*paidorders*/
    add_order:function(order){
        varorder_id=order.uid;
        varorders =this.load('orders',[]);

        //iftheorderwasalreadystored,weoverwriteitsdata
        for(vari=0,len=orders.length;i<len;i++){
            if(orders[i].id===order_id){
                orders[i].data=order;
                this.save('orders',orders);
                returnorder_id;
            }
        }

        //Onlynecessarywhenwestoreanew,validatedorder.Orders
        //thatwherealreadystoredshouldalreadyhavebeenremoved.
        this.remove_unpaid_order(order);

        orders.push({id:order_id,data:order});
        this.save('orders',orders);
        returnorder_id;
    },
    remove_order:function(order_id){
        varorders=this.load('orders',[]);
        orders=_.filter(orders,function(order){
            returnorder.id!==order_id;
        });
        this.save('orders',orders);
    },
    remove_all_orders:function(){
        this.save('orders',[]);
    },
    get_orders:function(){
        returnthis.load('orders',[]);
    },
    get_order:function(order_id){
        varorders=this.get_orders();
        for(vari=0,len=orders.length;i<len;i++){
            if(orders[i].id===order_id){
                returnorders[i];
            }
        }
        returnundefined;
    },

    /*workingorders*/
    save_unpaid_order:function(order){
        varorder_id=order.uid;
        varorders=this.load('unpaid_orders',[]);
        varserialized=order.export_as_JSON();

        for(vari=0;i<orders.length;i++){
            if(orders[i].id===order_id){
                orders[i].data=serialized;
                this.save('unpaid_orders',orders);
                returnorder_id;
            }
        }

        orders.push({id:order_id,data:serialized});
        this.save('unpaid_orders',orders);
        returnorder_id;
    },
    remove_unpaid_order:function(order){
        varorders=this.load('unpaid_orders',[]);
        orders=_.filter(orders,function(o){
            returno.id!==order.uid;
        });
        this.save('unpaid_orders',orders);
    },
    remove_all_unpaid_orders:function(){
        this.save('unpaid_orders',[]);
    },
    get_unpaid_orders:function(){
        varsaved=this.load('unpaid_orders',[]);
        varorders=[];
        for(vari=0;i<saved.length;i++){
            orders.push(saved[i].data);
        }
        returnorders;
    },
    /**
     *Returntheorderswithrequestedidsiftheyareunpaid.
     *@param{array<number>}idsorder_ids.
     *@return{array<object>}listoforders.
     */
    get_unpaid_orders_to_sync:function(ids){
        varsaved=this.load('unpaid_orders',[]);
        varorders=[];
        saved.forEach(function(o){
            if(ids.includes(o.id)&&(o.data.server_id||o.data.lines.length||o.data.statement_ids.length)){
                orders.push(o);
            }
        });
        returnorders;
    },
    /**
     *Addagivenordertotheorderstoberemovedfromtheserver.
     *
     *Ifanorderisremovedfromatableitalsohastoberemovedfromtheservertopreventitfromreapearing
     *aftersyncing.Thisfunctionwilladdtheserver_idoftheordertoalistofordersstilltoberemoved.
     *@param{object}orderobject.
     */
    set_order_to_remove_from_server:function(order){
        if(order.server_id!==undefined){
            varto_remove=this.load('unpaid_orders_to_remove',[]);
            to_remove.push(order.server_id);
            this.save('unpaid_orders_to_remove',to_remove);
        }
    },
    /**
     *Getalistofserver_idsoforderstoberemoved.
     *@return{array<number>}listofserver_ids.
     */
    get_ids_to_remove_from_server:function(){
        returnthis.load('unpaid_orders_to_remove',[]);
    },
    /**
     *Removeserver_idsfromthelistoforderstoberemoved.
     *@param{array<number>}ids
     */
    set_ids_removed_from_server:function(ids){
        varto_remove=this.load('unpaid_orders_to_remove',[]);
        
        to_remove=_.filter(to_remove,function(id){
            return!ids.includes(id);
        });
        this.save('unpaid_orders_to_remove',to_remove);
    },
    set_cashier:function(cashier){
        //Alwaysupdateiftheuseristhesameasbefore
        this.save('cashier',cashier||null);
    },
    get_cashier:function(){
        returnthis.load('cashier');
    }
});

returnPosDB;

});

