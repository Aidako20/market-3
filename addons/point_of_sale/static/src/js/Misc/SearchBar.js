flectra.define('point_of_sale.SearchBar',function(require){
    'usestrict';

    const{useState,useExternalListener}=owl.hooks;
    constPosComponent=require('point_of_sale.PosComponent');
    constRegistries=require('point_of_sale.Registries');

    /**
     *Thisisasimpleconfigurablesearchbarcomponent.Ithassearchfields
     *andselectionfilter.Searchfieldsallowtheuserstospecifythetype
     *oftheirsearches.Thefilterisadropdownmenuforselection.Dependingon
     *user'saction,thiscomponentemitscorrespondingeventwiththeaction
     *information(payload).
     *
     *TODO:Thiscomponentcanbemademoregenericandbeabletoreplace
     *allthesearchbarsacrossposui.
     *
     *@prop{{
     * config:{
     *     searchFields:string[],
     *     filter:{show:boolean,options:string[]}
     * },
     * placeholder:string,
     *}}
     *@emitssearch@payload{fieldValue:string,searchTerm:''}
     *@emitsfilter-selected@payload{filter:string}
     *
     *NOTE:Thepayloadoftheemittedeventisaccessibleviathe`detail`
     *fieldoftheevent.
     */
    classSearchBarextendsPosComponent{
        constructor(){
            super(...arguments);
            this.config=this.props.config;
            this.state=useState({
                searchInput:'',
                selectedFieldId:this.config.searchFields.length?0:null,
                showSearchFields:false,
                showFilterOptions:false,
                selectedFilter:this.config.filter.options[0]||this.env._t('Select'),
            });
            useExternalListener(window,'click',this._hideOptions);
        }
        selectFilter(option){
            this.state.selectedFilter=option;
            this.trigger('filter-selected',{filter:this.state.selectedFilter});
        }
        getplaceholder(){
            returnthis.props.placeholder;
        }
        /**
         *Whenverticalarrowkeysarepressed,selectfieldsforsearching.
         *Whenenterkeyispressed,triggersearcheventifthereissearchInput.
         */
        onKeydown(event){
            if(['ArrowUp','ArrowDown'].includes(event.key)){
                event.preventDefault();
                this.state.selectedFieldId=this._fieldIdToSelect(event.key);
            }elseif(event.key==='Enter'){
                this.trigger('search',{
                    fieldValue:this.config.searchFields[this.state.selectedFieldId],
                    searchTerm:this.state.searchInput,
                });
                this.state.showSearchFields=false;
            }else{
                if(this.state.selectedFieldId===null&&this.config.searchFields.length){
                    this.state.selectedFieldId=0;
                }
                this.state.showSearchFields=true;
            }
        }
        /**
         *Calledwhenasearchfieldisclicked.
         */
        onClickSearchField(id){
            this.state.showSearchFields=false;
            this.trigger('search',{
                fieldValue:this.config.searchFields[id],
                searchTerm:this.state.searchInput,
            });
        }
        /**
         *Givenanarrowkey,returnthenextselectedFieldId.
         *E.g.IftheselectedFieldIdis1andArrowDownispressed,return2.
         *
         *@param{string}keyverticalarrowkey
         */
        _fieldIdToSelect(key){
            constlength=this.config.searchFields.length;
            if(!length)returnnull;
            if(this.state.selectedFieldId===null)return0;
            constcurrent=this.state.selectedFieldId||length;
            return(current+(key==='ArrowDown'?1:-1))%length;
        }
        _hideOptions(){
            this.state.showFilterOptions=false;
            this.state.showSearchFields=false;
        }
    }
    SearchBar.template='point_of_sale.SearchBar';
    SearchBar.defaultProps={
        config:{
            searchFields:[],
            filter:{
                show:false,
                options:[],
            },
        },
        placeholder:'Search...',
    };

    Registries.Component.add(SearchBar);

    returnSearchBar;
});
