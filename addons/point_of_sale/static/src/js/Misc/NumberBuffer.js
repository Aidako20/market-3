flectra.define('point_of_sale.NumberBuffer',function(require){
    'usestrict';

    const{Component}=owl;
    const{EventBus}=owl.core;
    const{onMounted,onWillUnmount,useExternalListener}=owl.hooks;
    const{useListener}=require('web.custom_hooks');
    const{parse}=require('web.field_utils');
    const{BarcodeEvents}=require('barcodes.BarcodeEvents');
    const{_t}=require('web.core');
    const{Gui}=require('point_of_sale.Gui');

    constINPUT_KEYS=newSet(
        ['Delete','Backspace','+1','+2','+5','+10','+20','+50'].concat('0123456789+-.,'.split(''))
    );
    constCONTROL_KEYS=newSet(['Enter','Esc']);
    constALLOWED_KEYS=newSet([...INPUT_KEYS,...CONTROL_KEYS]);
    constgetDefaultConfig=()=>({
        decimalPoint:false,
        triggerAtEnter:false,
        triggerAtEsc:false,
        triggerAtInput:false,
        nonKeyboardInputEvent:false,
        useWithBarcode:false,
    });

    /**
     *Thisisasingleton.
     *
     *Onlyonecomponentcan`use`thebufferatatime.
     *Thisisdonebykeepingtrackofeachcomponent(andits
     *correspondingstateandconfig)usingastack(bufferHolderStack).
     *Thecomponentontopofthestackistheonethatcurrently
     *`holds`thebuffer.
     *
     *Whenthecurrentcomponentisunmounted,thetopofthestack
     *ispoppedandNumberBufferissetupagainforthenewcomponent
     *ontopofthestack.
     *
     *Usage
     *=====
     *-Activateintheconstructionofrootcomponent.`NumberBuffer.activate()`
     *-Usethebufferinachildcomponentbycalling`NumberBuffer.use(<config>)`
     *  intheconstructorofthechildcomponent.
     *-Thecomponentthat`uses`thebufferhasaccesstothefollowinginstance
     *  methodsoftheNumberBuffer:
     *  -get()
     *  -set(val)
     *  -reset()
     *  -getFloat()
     *  -capture()
     *
     *Note
     *====
     *-Noneedtoinstantiateasitisasingletoncreatedbeforeexportinginthismodule.
     *
     *PossibleImprovements
     *=====================
     *-Relievethebufferfromresponsibilityofhandling`Enter`andothercontrolkeys.
     *-Maketheconstants(ALLOWED_KEYS,etc.)moreconfigurable.
     *-Writemoreintegrationtests.NumberPopupcanbeusedastestcomponent.
     */
    classNumberBufferextendsEventBus{
        constructor(){
            super();
            this.isReset=false;
            this.bufferHolderStack=[];
        }
        /**
         *@returns{String}valueofthebuffer,e.g.'-95.79'
         */
        get(){
            returnthis.state?this.state.buffer:null;
        }
        /**
         *Takesastringthatisconvertibletofloat,andsetitas
         *valueofthebuffer.e.g.val='2.99';
         *
         *@param{String}val
         */
        set(val){
            this.state.buffer=!isNaN(parseFloat(val))?val:'';
            this.trigger('buffer-update',this.state.buffer);
        }
        /**
         *Resetsthebuffertoemptystring.
         */
        reset(){
            this.isReset=true;
            this.state.buffer='';
            this.trigger('buffer-update',this.state.buffer);
        }
        /**
         *Callingthisfunction,weimmediatelyinvokethe`handler`method
         *thathandlesthecontentsoftheinputeventsbuffer(`eventsBuffer`).
         *Thisishelpfulwhenwedon'twanttowaitforthetimeoutthat
         *issupposedtoinvokethehandler.
         */
        capture(){
            if(this.handler){
                clearTimeout(this._timeout);
                this.handler();
                deletethis.handler;
            }
        }
        /**
         *@returns{number}floatequivalentofthevalueofbuffer
         */
        getFloat(){
            returnparse.float(this.get());
        }
        /**
         *AddkeyuplistenertowindowviatheuseExternalListenerhook.
         *Whenthecomponentcallingthisisunmounted,thelistenerisalso
         *removedfromwindow.
         */
        activate(){
            this.defaultDecimalPoint=_t.database.parameters.decimal_point;
            useExternalListener(window,'keyup',this._onKeyboardInput.bind(this));
        }
        /**
         *@param{Object}configUsetosetupthebuffer
         *@param{String|null}config.decimalPointThedecimalcharacter.
         *@param{String|null}config.triggerAtEnterEventtriggeredwhen'Enter'keyispressed.
         *@param{String|null}config.triggerAtEscEventtriggeredwhen'Esc'keyispressed.
         *@param{String|null}config.triggerAtInputEventtriggeredforeveryacceptedinput.
         *@param{String|null}config.nonKeyboardInputEventAlsolistentoanon-keyboardinputevent
         *     thatcarriesapayloadof{key}.Thekeyischeckedifitisavalidinput.Ifvalid,
         *     thenumberbufferismodifiedjustasitismodifiedwhenakeyboardkeyispressed.
         *@param{Boolean}config.useWithBarcodeWhetherthisbufferisusedwithbarcode.
         *@emitsconfig.triggerAtEnterwhen'Enter'keyispressed.
         *@emitsconfig.triggerAtEscwhen'Esc'keyispressed.
         *@emitsconfig.triggerAtInputwhenaninputisaccepted.
         */
        use(config){
            this.eventsBuffer=[];
            constcurrentComponent=Component.current;
            config=Object.assign(getDefaultConfig(),config);
            onMounted(()=>{
                this.bufferHolderStack.push({
                    component:currentComponent,
                    state:config.state?config.state:{buffer:''},
                    config,
                });
                this._setUp();
            });
            onWillUnmount(()=>{
                this.bufferHolderStack.pop();
                this._setUp();
            });
            //Addlistenerthatacceptsnonkeyboardinputs
            if(typeofconfig.nonKeyboardInputEvent==='string'){
                useListener(config.nonKeyboardInputEvent,this._onNonKeyboardInput.bind(this));
            }
        }
        get_currentBufferHolder(){
            returnthis.bufferHolderStack[this.bufferHolderStack.length-1];
        }
        _setUp(){
            if(!this._currentBufferHolder)return;
            const{component,state,config}=this._currentBufferHolder;
            this.component=component;
            this.state=state;
            this.config=config;
            this.decimalPoint=config.decimalPoint||this.defaultDecimalPoint;
            this.maxTimeBetweenKeys=this.config.useWithBarcode
                ?BarcodeEvents.max_time_between_keys_in_ms
                :0;
        }
        _onKeyboardInput(event){
            returnthis._bufferEvents(this._onInput(event=>event.key))(event);
        }
        _onNonKeyboardInput(event){
            returnthis._bufferEvents(this._onInput(event=>event.detail.key))(event);
        }
        _bufferEvents(handler){
            returnevent=>{
                if(['INPUT','TEXTAREA'].includes(event.target.tagName)||!this.eventsBuffer)return;
                clearTimeout(this._timeout);
                this.eventsBuffer.push(event);
                this._timeout=setTimeout(handler,this.maxTimeBetweenKeys);
                this.handler=handler
            };
        }
        _onInput(keyAccessor){
            return()=>{
                if(this.eventsBuffer.length<=2){
                    //Checkfirstthebufferifitscontentsareallvalid
                    //numberinput.
                    for(leteventofthis.eventsBuffer){
                        if(!ALLOWED_KEYS.has(keyAccessor(event))){
                            this.eventsBuffer=[];
                            return;
                        }
                    }
                    //Atthispoint,alltheeventsinbuffer
                    //containsnumberinput.It'snowokaytohandle
                    //eachinput.
                    for(leteventofthis.eventsBuffer){
                        this._handleInput(keyAccessor(event));
                        event.preventDefault();
                        event.stopPropagation();
                    }
                }
                this.eventsBuffer=[];
            };
        }
        _handleInput(key){
            if(key==='Enter'&&this.config.triggerAtEnter){
                this.component.trigger(this.config.triggerAtEnter,this.state);
            }elseif(key==='Esc'&&this.config.triggerAtEsc){
                this.component.trigger(this.config.triggerAtEsc,this.state);
            }elseif(INPUT_KEYS.has(key)){
                this._updateBuffer(key);
                if(this.config.triggerAtInput)
                    this.component.trigger(this.config.triggerAtInput,{buffer:this.state.buffer,key});
            }
        }
        /**
         *Updatesthecurrentbufferstateusingthegiveninput.
         *@param{String}inputvalidinput
         */
        _updateBuffer(input){
            constisEmpty=val=>{
                returnval===''||val===null;
            };
            if(input===undefined||input===null)return;
            letisFirstInput=isEmpty(this.state.buffer);
            if(input===','||input==='.'){
                if(isFirstInput){
                    this.state.buffer='0'+this.decimalPoint;
                }elseif(!this.state.buffer.length||this.state.buffer==='-'){
                    this.state.buffer+='0'+this.decimalPoint;
                }elseif(this.state.buffer.indexOf(this.decimalPoint)<0){
                    this.state.buffer=this.state.buffer+this.decimalPoint;
                }
            }elseif(input==='Delete'){
                if(this.isReset){
                    this.state.buffer='';
                    this.isReset=false;
                    return;
                }
                this.state.buffer=isEmpty(this.state.buffer)?null:'';
            }elseif(input==='Backspace'){
                if(this.isReset){
                    this.state.buffer='';
                    this.isReset=false;
                    return;
                }
                constbuffer=this.state.buffer;
                if(isEmpty(buffer)){
                    this.state.buffer=null;
                }else{
                    constnCharToRemove=buffer[buffer.length-1]===this.decimalPoint?2:1;
                    this.state.buffer=buffer.substring(0,buffer.length-nCharToRemove);
                }
            }elseif(input==='+'){
                if(this.state.buffer[0]==='-'){
                    this.state.buffer=this.state.buffer.substring(1,this.state.buffer.length);
                }
            }elseif(input==='-'){
                if(isFirstInput){
                    this.state.buffer='-0';
                }elseif(this.state.buffer[0]==='-'){
                    this.state.buffer=this.state.buffer.substring(1,this.state.buffer.length);
                }else{
                    this.state.buffer='-'+this.state.buffer;
                }
            }elseif(input[0]==='+'&&!isNaN(parseFloat(input))){
                //wheninputislike'+10','+50',etc
                constinputValue=parse.float(input.slice(1));
                constcurrentBufferValue=this.state.buffer?parse.float(this.state.buffer):0;
                this.state.buffer=this.component.env.pos.formatFixed(
                    inputValue+currentBufferValue
                );
            }elseif(!isNaN(parseInt(input,10))){
                if(isFirstInput){
                    this.state.buffer=''+input;
                }elseif(this.state.buffer.length>12){
                    Gui.playSound('bell');
                }else{
                    this.state.buffer+=input;
                }
            }
            if(this.state.buffer==='-'){
                this.state.buffer='';
            }
            //onceaninputisacceptedandupdatedthebuffer,
            //thebuffershouldnotbeinresetstateanymore.
            this.isReset=false;

            this.trigger('buffer-update',this.state.buffer);
        }
    }

    returnnewNumberBuffer();
});
