flectra.define('point_of_sale.NumberPopup',function(require){
    'usestrict';
    varcore=require('web.core');
    var_t=core._t;

    const{useState}=owl;
    constAbstractAwaitablePopup=require('point_of_sale.AbstractAwaitablePopup');
    constNumberBuffer=require('point_of_sale.NumberBuffer');
    const{useListener}=require('web.custom_hooks');
    constRegistries=require('point_of_sale.Registries');

    //formerlyNumberPopupWidget
    classNumberPopupextendsAbstractAwaitablePopup{
        /**
         *@param{Object}props
         *@param{Boolean}props.isPasswordShowpasswordpopup.
         *@param{number|null}props.startingValueStartingvalueofthepopup.
         *
         *Resolveto{confirmed,payload}whenusedwithshowPopupmethod.
         *@confirmed{Boolean}
         *@payload{String}
         */
        constructor(){
            super(...arguments);
            useListener('accept-input',this.confirm);
            useListener('close-this-popup',this.cancel);
            letstartingBuffer='';
            if(typeofthis.props.startingValue==='number'&&this.props.startingValue>0){
                startingBuffer=this.props.startingValue.toString().replace('.',this.decimalSeparator);
            }
            this.state=useState({buffer:startingBuffer});
            NumberBuffer.use({
                nonKeyboardInputEvent:'numpad-click-input',
                triggerAtEnter:'accept-input',
                triggerAtEscape:'close-this-popup',
                state:this.state,
            });
        }
        getdecimalSeparator(){
            returnthis.env._t.database.parameters.decimal_point;
        }
        getinputBuffer(){
            if(this.state.buffer===null){
                return'';
            }
            if(this.props.isPassword){
                returnthis.state.buffer.replace(/./g,'â€¢');
            }else{
                returnthis.state.buffer;
            }
        }
        confirm(event){
            constbufferState=event.detail;
            if(bufferState.buffer!==''){
                super.confirm();
            }
        }
        sendInput(key){
            this.trigger('numpad-click-input',{key});
        }
        getPayload(){
            returnNumberBuffer.get();
        }
    }
    NumberPopup.template='NumberPopup';
    NumberPopup.defaultProps={
        confirmText:_t('Ok'),
        cancelText:_t('Cancel'),
        title:_t('Confirm?'),
        body:'',
        cheap:false,
        startingValue:null,
        isPassword:false,
    };

    Registries.Component.add(NumberPopup);

    returnNumberPopup;
});
