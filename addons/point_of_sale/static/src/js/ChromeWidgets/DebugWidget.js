flectra.define('point_of_sale.DebugWidget',function(require){
    'usestrict';

    const{useState}=owl;
    const{useRef}=owl.hooks;
    const{getFileAsText}=require('point_of_sale.utils');
    const{parse}=require('web.field_utils');
    constNumberBuffer=require('point_of_sale.NumberBuffer');
    constPosComponent=require('point_of_sale.PosComponent');
    constRegistries=require('point_of_sale.Registries');

    classDebugWidgetextendsPosComponent{
        constructor(){
            super(...arguments);
            this.state=useState({
                barcodeInput:'',
                weightInput:'',
                isPaidOrdersReady:false,
                isUnpaidOrdersReady:false,
                buffer:NumberBuffer.get(),
            });

            //NOTE:Perhapsthiscanstillbeimproved.
            //Whatwedohereisloopthruthe`event`elements
            //thenweassignanimationthathappenswhentheeventistriggered
            //intheproxy.E.g.ifopen_cashboxissent,theopen_cashboxelement
            //changescolorfrom'#6CD11D'to'#1E1E1E'foradurationof2sec.
            this.eventElementsRef={};
            this.animations={};
            for(leteventNameof['open_cashbox','print_receipt','scale_read']){
                this.eventElementsRef[eventName]=useRef(eventName);
                this.env.pos.proxy.add_notification(
                    eventName,
                    (()=>{
                        if(this.animations[eventName]){
                            this.animations[eventName].cancel();
                        }
                        consteventElement=this.eventElementsRef[eventName].el;
                        eventElement.style.backgroundColor='#6CD11D';
                        this.animations[eventName]=eventElement.animate(
                            {backgroundColor:['#6CD11D','#1E1E1E']},
                            2000
                        );
                    }).bind(this)
                );
            }
        }
        mounted(){
            NumberBuffer.on('buffer-update',this,this._onBufferUpdate);
        }
        willUnmount(){
            NumberBuffer.off('buffer-update',this,this._onBufferUpdate);
        }
        toggleWidget(){
            this.state.isShown=!this.state.isShown;
        }
        setWeight(){
            varweightInKg=parse.float(this.state.weightInput);
            if(!isNaN(weightInKg)){
                this.env.pos.proxy.debug_set_weight(weightInKg);
            }
        }
        resetWeight(){
            this.state.weightInput='';
            this.env.pos.proxy.debug_reset_weight();
        }
        barcodeScan(){
            this.env.pos.barcode_reader.scan(this.state.barcodeInput);
        }
        barcodeScanEAN(){
            constean=this.env.pos.barcode_reader.barcode_parser.sanitize_ean(
                this.state.barcodeInput||'0'
            );
            this.state.barcodeInput=ean;
            this.env.pos.barcode_reader.scan(ean);
        }
        asyncdeleteOrders(){
            const{confirmed}=awaitthis.showPopup('ConfirmPopup',{
                title:this.env._t('DeletePaidOrders?'),
                body:this.env._t(
                    'Thisoperationwillpermanentlydestroyallpaidordersfromthelocalstorage.Youwillloseallthedata.Thisoperationcannotbeundone.'
                ),
            });
            if(confirmed){
                this.env.pos.db.remove_all_orders();
                this.env.pos.set_synch('connected',0);
            }
        }
        asyncdeleteUnpaidOrders(){
            const{confirmed}=awaitthis.showPopup('ConfirmPopup',{
                title:this.env._t('DeleteUnpaidOrders?'),
                body:this.env._t(
                    'Thisoperationwilldestroyallunpaidordersinthebrowser.Youwilllosealltheunsaveddataandexitthepointofsale.Thisoperationcannotbeundone.'
                ),
            });
            if(confirmed){
                this.env.pos.db.remove_all_unpaid_orders();
                window.location='/';
            }
        }
        _createBlob(contents){
            if(typeofcontents!=='string'){
                contents=JSON.stringify(contents,null,2);
            }
            returnnewBlob([contents]);
        }
        //IMPROVEMENT:Duplicatedcodesfordownloadingpaidandunpaidorders.
        //Theimplementationcanbebetter.
        preparePaidOrders(){
            try{
                this.paidOrdersBlob=this._createBlob(this.env.pos.export_paid_orders());
                this.state.isPaidOrdersReady=true;
            }catch(error){
                console.warn(error);
            }
        }
        getpaidOrdersFilename(){
            return`${this.env._t('paidorders')}${moment().format('YYYY-MM-DD-HH-mm-ss')}.json`;
        }
        getpaidOrdersURL(){
            varURL=window.URL||window.webkitURL;
            returnURL.createObjectURL(this.paidOrdersBlob);
        }
        prepareUnpaidOrders(){
            try{
                this.unpaidOrdersBlob=this._createBlob(this.env.pos.export_unpaid_orders());
                this.state.isUnpaidOrdersReady=true;
            }catch(error){
                console.warn(error);
            }
        }
        getunpaidOrdersFilename(){
            return`${this.env._t('unpaidorders')}${moment().format('YYYY-MM-DD-HH-mm-ss')}.json`;
        }
        getunpaidOrdersURL(){
            varURL=window.URL||window.webkitURL;
            returnURL.createObjectURL(this.unpaidOrdersBlob);
        }
        asyncimportOrders(event){
            constfile=event.target.files[0];
            if(file){
                constreport=this.env.pos.import_orders(awaitgetFileAsText(file));
                awaitthis.showPopup('OrderImportPopup',{report});
            }
        }
        refreshDisplay(){
            this.env.pos.proxy.message('display_refresh',{});
        }
        _onBufferUpdate(buffer){
            this.state.buffer=buffer;
        }
        getbufferRepr(){
            return`"${this.state.buffer}"`;
        }
    }
    DebugWidget.template='DebugWidget';

    Registries.Component.add(DebugWidget);

    returnDebugWidget;
});
