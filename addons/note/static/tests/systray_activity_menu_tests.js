flectra.define('note.systray.ActivityMenuTests',function(require){
"usestrict";

const{afterEach,beforeEach,start}=require('mail/static/src/utils/test_utils.js');
varActivityMenu=require('mail.systray.ActivityMenu');

vartestUtils=require('web.test_utils');

QUnit.module('note',{},function(){
QUnit.module("ActivityMenu",{
    beforeEach(){
        beforeEach(this);

        Object.assign(this.data,{
            'mail.activity.menu':{
                fields:{
                    name:{type:"char"},
                    model:{type:"char"},
                    type:{type:"char"},
                    planned_count:{type:"integer"},
                    today_count:{type:"integer"},
                    overdue_count:{type:"integer"},
                    total_count:{type:"integer"}
                },
                records:[],
            },
            'note.note':{
                fields:{
                    memo:{type:'char'},
                },
                records:[],
            }
        });
    },
    afterEach(){
        afterEach(this);
    },
});

QUnit.test('noteactivitymenuwidget:createnotefromactivitymenu',asyncfunction(assert){
    assert.expect(15);
    varself=this;

    const{widget}=awaitstart({
        data:this.data,
        mockRPC:function(route,args){
            if(args.method==='systray_get_activities'){
                returnPromise.resolve(self.data['mail.activity.menu'].records);
            }
            if(route==='/note/new'){
                if(args.date_deadline){
                    varnote={
                        id:1,
                        memo:args.note,
                        date_deadline:args.date_deadline
                    };
                    self.data['note.note'].records.push(note);
                    if(_.isEmpty(self.data['mail.activity.menu'].records)){
                        self.data['mail.activity.menu'].records.push({
                            name:"Note",
                            model:"note.note",
                            type:"activity",
                            planned_count:0,
                            today_count:0,
                            overdue_count:0,
                            total_count:0,
                        });
                    }
                    self.data['mail.activity.menu'].records[0].today_count++;
                    self.data['mail.activity.menu'].records[0].total_count++;
                }
                returnPromise.resolve();
            }
            returnthis._super(route,args);
        },
    });

    constactivityMenu=newActivityMenu(widget);
    awaitactivityMenu.appendTo($('#qunit-fixture'));
    assert.hasClass(activityMenu.$el,'o_mail_systray_item',
        'shouldbetheinstanceofwidget');
    assert.strictEqual(activityMenu.$('.o_notification_counter').text(),'0',
        "shouldnothaveanyactivitynotificationinitially");

    //togglequickcreatefornote
    awaittestUtils.dom.click(activityMenu.$('.dropdown-toggle'));
    assert.containsOnce(activityMenu,'.o_no_activity',
        "shouldnothaveanyactivitypreview");
    assert.doesNotHaveClass(activityMenu.$('.o_note_show'),'d-none',
        'ActivityMenushouldhaveAddnewnoteCTA');
    awaittestUtils.dom.click(activityMenu.$('.o_note_show'));
    assert.hasClass(activityMenu.$('.o_note_show'),'d-none',
        'ActivityMenushouldhideCTAwhenenteringanewnote');
    assert.doesNotHaveClass(activityMenu.$('.o_note'),'d-none',
        'ActivityMenushoulddisplayinputfornewnote');

    //creatingquicknotewithoutdate
    awaittestUtils.fields.editInput(activityMenu.$("input.o_note_input"),"NewNote");
    awaittestUtils.dom.click(activityMenu.$(".o_note_save"));
    assert.strictEqual(activityMenu.$('.o_notification_counter').text(),'1',
        "shouldincrementactivitynotificationcounteraftercreatinganote");
    assert.containsOnce(activityMenu,'.o_mail_preview[data-res_model="note.note"]',
        "shouldhaveanactivitypreviewthatisanote");
    assert.strictEqual(activityMenu.$('.o_activity_filter_button[data-filter="today"]').text().trim(),
        "1Today",
        "shoulddisplayonenotefortoday");

    assert.doesNotHaveClass(activityMenu.$('.o_note_show'),'d-none',
        'ActivityMenuaddnotebuttonshouldbedisplayed');
    assert.hasClass(activityMenu.$('.o_note'),'d-none',
        'ActivityMenuaddnoteinputshouldbehidden');

    //creatingquicknotewithdate
    awaittestUtils.dom.click(activityMenu.$('.o_note_show'));
    activityMenu.$('input.o_note_input').val("NewNote");
    awaittestUtils.dom.click(activityMenu.$(".o_note_save"));
    assert.strictEqual(activityMenu.$('.o_notification_counter').text(),'2',
        "shouldincrementactivitynotificationcounteraftercreatingasecondnote");
    assert.strictEqual(activityMenu.$('.o_activity_filter_button[data-filter="today"]').text().trim(),
        "2Today",
        "shoulddisplay2notesfortoday");
    assert.doesNotHaveClass(activityMenu.$('.o_note_show'),'d-none',
        'ActivityMenuaddnotebuttonshouldbedisplayed');
    assert.hasClass(activityMenu.$('.o_note'),'d-none',
        'ActivityMenuaddnoteinputshouldbehidden');
    widget.destroy();
});
});

});
