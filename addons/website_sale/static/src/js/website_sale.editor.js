flectra.define('website_sale.add_product',function(require){
'usestrict';

varcore=require('web.core');
varwUtils=require('website.utils');
varWebsiteNewMenu=require('website.newMenu');

var_t=core._t;

WebsiteNewMenu.include({
    actions:_.extend({},WebsiteNewMenu.prototype.actions||{},{
        new_product:'_createNewProduct',
    }),

    //--------------------------------------------------------------------------
    //Actions
    //--------------------------------------------------------------------------

    /**
     *Askstheuserinformationaboutanewproducttocreate,thencreatesit
     *andredirectstheusertothisnewproduct.
     *
     *@private
     *@returns{Promise}Unresolvedifthereisaredirection
     */
    _createNewProduct:function(){
        varself=this;
        returnwUtils.prompt({
            id:"editor_new_product",
            window_title:_t("NewProduct"),
            input:_t("Name"),
        }).then(function(result){
            if(!result.val){
                return;
            }
            returnself._rpc({
                route:'/shop/add_product',
                params:{
                    name:result.val,
                },
            }).then(function(url){
                window.location.href=url;
                returnnewPromise(function(){});
            });
        });
    },
});
});

//==============================================================================

flectra.define('website_sale.editor',function(require){
'usestrict';

varoptions=require('web_editor.snippets.options');
varpublicWidget=require('web.public.widget');
const{Class:EditorMenuBar}=require('web_editor.editor');
const{qweb}=require('web.core');

EditorMenuBar.include({
    custom_events:Object.assign(EditorMenuBar.prototype.custom_events,{
        get_ribbons:'_onGetRibbons',
        get_ribbon_classes:'_onGetRibbonClasses',
        delete_ribbon:'_onDeleteRibbon',
        set_ribbon:'_onSetRibbon',
        set_product_ribbon:'_onSetProductRibbon',
    }),

    /**
     *@override
     */
    asyncwillStart(){
        const_super=this._super.bind(this);
        letribbons=[];
        if(this._isProductListPage()){
            ribbons=awaitthis._rpc({
                model:'product.ribbon',
                method:'search_read',
                fields:['id','html','bg_color','text_color','html_class'],
            });
        }
        this.ribbons=Object.fromEntries(ribbons.map(ribbon=>[ribbon.id,ribbon]));
        this.originalRibbons=Object.assign({},this.ribbons);
        this.productTemplatesRibbons=[];
        this.deletedRibbonClasses='';
        return_super(...arguments);
    },
    /**
     *@override
     */
    asyncsave(){
        const_super=this._super.bind(this);
        awaitthis._saveRibbons();
        return_super(...arguments);
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *Savestheribbonsinthedatabase.
     *
     *@private
     */
    async_saveRibbons(){
        if(!this._isProductListPage()){
            return;
        }
        constoriginalIds=Object.keys(this.originalRibbons).map(id=>parseInt(id));
        constcurrentIds=Object.keys(this.ribbons).map(id=>parseInt(id));

        constribbons=Object.values(this.ribbons);
        constcreated=ribbons.filter(ribbon=>!originalIds.includes(ribbon.id));
        constdeletedIds=originalIds.filter(id=>!currentIds.includes(id));
        constmodified=ribbons.filter(ribbon=>{
            if(created.includes(ribbon)){
                returnfalse;
            }
            constoriginal=this.originalRibbons[ribbon.id];
            returnObject.entries(ribbon).some(([key,value])=>value!==original[key]);
        });

        constproms=[];
        letcreatedRibbonIds;
        if(created.length>0){
            proms.push(this._rpc({
                method:'create',
                model:'product.ribbon',
                args:[created.map(ribbon=>{
                    ribbon=Object.assign({},ribbon);
                    deleteribbon.id;
                    returnribbon;
                })],
            }).then(ids=>createdRibbonIds=ids));
        }

        modified.forEach(ribbon=>proms.push(this._rpc({
            method:'write',
            model:'product.ribbon',
            args:[[ribbon.id],ribbon],
        })));

        if(deletedIds.length>0){
            proms.push(this._rpc({
                method:'unlink',
                model:'product.ribbon',
                args:[deletedIds],
            }));
        }

        awaitPromise.all(proms);
        constlocalToServer=Object.assign(
            this.ribbons,
            Object.fromEntries(created.map((ribbon,index)=>[ribbon.id,{id:createdRibbonIds[index]}])),
            {'false':{id:false}},
        );

        //Buildingthefinaltemplatetoribbon-idmap
        constfinalTemplateRibbons=this.productTemplatesRibbons.reduce((acc,{templateId,ribbonId})=>{
            acc[templateId]=ribbonId;
            returnacc;
        },{});
        //InvertingtherelationshipsothatwehavealltemplatesthathavethesameribbontoreduceRPCs
        constribbonTemplates=Object.entries(finalTemplateRibbons).reduce((acc,[templateId,ribbonId])=>{
            if(!acc[ribbonId]){
                acc[ribbonId]=[];
            }
            acc[ribbonId].push(parseInt(templateId));
            returnacc;
        },{});
        constsetProductTemplateRibbons=Object.entries(ribbonTemplates)
            //IftheribbonIdthatthetemplatehadnolongerexists,removetheribbon(id=false)
            .map(([ribbonId,templateIds])=>{
                constid=currentIds.includes(parseInt(ribbonId))?ribbonId:false;
                return[id,templateIds];
            }).map(([ribbonId,templateIds])=>this._rpc({
                method:'write',
                model:'product.template',
                args:[templateIds,{'website_ribbon_id':localToServer[ribbonId].id}],
            }));
        returnPromise.all(setProductTemplateRibbons);
    },
    /**
     *Checkswhetherthecurrentpageistheproductlist.
     *
     *@private
     */
    _isProductListPage(){
        return$('#products_grid').length!==0;
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *Returnsacopyofthis.ribbonsthroughacallback.
     *
     *@private
     */
    _onGetRibbons(ev){
        ev.data.callback(Object.assign({},this.ribbons));
    },
    /**
     *Returnsallribbonclasses,currentanddeleted,sotheycanberemoved.
     *
     *@private
     */
    _onGetRibbonClasses(ev){
        constclasses=Object.values(this.ribbons).reduce((classes,ribbon)=>{
            returnclasses+`${ribbon.html_class}`;
        },'')+this.deletedRibbonClasses;
        ev.data.callback(classes);
    },
    /**
     *Deletesaribbon.
     *
     *@private
     */
    _onDeleteRibbon(ev){
        this.deletedRibbonClasses+=`${this.ribbons[ev.data.id].html_class}`;
        deletethis.ribbons[ev.data.id];
    },
    /**
     *Setsaribbon;
     *
     *@private
     */
    _onSetRibbon(ev){
        const{ribbon}=ev.data;
        constpreviousRibbon=this.ribbons[ribbon.id];
        if(previousRibbon){
            this.deletedRibbonClasses+=`${previousRibbon.html_class}`;
        }
        this.ribbons[ribbon.id]=ribbon;
    },
    /**
     *Setswhichribbonisusedbyaproducttemplate.
     *
     *@private
     */
    _onSetProductRibbon(ev){
        const{templateId,ribbonId}=ev.data;
        this.productTemplatesRibbons.push({templateId,ribbonId});
    },
});

publicWidget.registry.websiteSaleCurrency=publicWidget.Widget.extend({
    selector:'.oe_website_sale',
    disabledInEditableMode:false,
    edit_events:{
        'click.oe_currency_value:o_editable':'_onCurrencyValueClick',
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *@private
     */
    _onCurrencyValueClick:function(ev){
        $(ev.currentTarget).selectContent();
    },
});

functionreload(){
    if(window.location.href.match(/\?enable_editor/)){
        window.location.reload();
    }else{
        window.location.href=window.location.href.replace(/\?(enable_editor=1&)?|#.*|$/,'?enable_editor=1&');
    }
}

options.registry.WebsiteSaleGridLayout=options.Class.extend({

    /**
     *@override
     */
    start:function(){
        this.ppg=parseInt(this.$target.closest('[data-ppg]').data('ppg'));
        this.ppr=parseInt(this.$target.closest('[data-ppr]').data('ppr'));
        returnthis._super.apply(this,arguments);
    },
    /**
     *@override
     */
    onFocus:function(){
        varlistLayoutEnabled=this.$target.closest('#products_grid').hasClass('o_wsale_layout_list');
        this.$el.filter('.o_wsale_ppr_submenu').toggleClass('d-none',listLayoutEnabled);
    },

    //--------------------------------------------------------------------------
    //Options
    //--------------------------------------------------------------------------

    /**
     *@seethis.selectClassforparams
     */
    setPpg:function(previewMode,widgetValue,params){
        constPPG_LIMIT=10000;
        constppg=parseInt(widgetValue);
        if(!ppg||ppg<1){
            returnfalse;
        }
        this.ppg=Math.min(ppg,PPG_LIMIT);
        returnthis._rpc({
            route:'/shop/change_ppg',
            params:{
                'ppg':this.ppg,
            },
        }).then(()=>reload());
    },
    /**
     *@seethis.selectClassforparams
     */
    setPpr:function(previewMode,widgetValue,params){
        this.ppr=parseInt(widgetValue);
        this._rpc({
            route:'/shop/change_ppr',
            params:{
                'ppr':this.ppr,
            },
        }).then(reload);
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *@override
     */
    _computeWidgetState:function(methodName,params){
        switch(methodName){
            case'setPpg':{
                returnthis.ppg;
            }
            case'setPpr':{
                returnthis.ppr;
            }
        }
        returnthis._super(...arguments);
    },
});

options.registry.WebsiteSaleProductsItem=options.Class.extend({
    xmlDependencies:(options.Class.prototype.xmlDependencies||[]).concat(['/website_sale/static/src/xml/website_sale_utils.xml']),
    events:_.extend({},options.Class.prototype.events||{},{
        'mouseenter.o_wsale_soptions_menu_sizestable':'_onTableMouseEnter',
        'mouseleave.o_wsale_soptions_menu_sizestable':'_onTableMouseLeave',
        'mouseover.o_wsale_soptions_menu_sizestd':'_onTableItemMouseEnter',
        'click.o_wsale_soptions_menu_sizestd':'_onTableItemClick',
    }),

    /**
     *@override
     */
    willStart:asyncfunction(){
        const_super=this._super.bind(this);
        this.ppr=this.$target.closest('[data-ppr]').data('ppr');
        this.productTemplateID=parseInt(this.$target.find('[data-oe-model="product.template"]').data('oe-id'));
        this.ribbons=awaitnewPromise(resolve=>this.trigger_up('get_ribbons',{callback:resolve}));
        return_super(...arguments);
    },
    /**
     *@override
     */
    start:function(){
        this._resetRibbonDummy();
        returnthis._super(...arguments);
    },
    /**
     *@override
     */
    onFocus:function(){
        varlistLayoutEnabled=this.$target.closest('#products_grid').hasClass('o_wsale_layout_list');
        this.$el.find('.o_wsale_soptions_menu_sizes')
            .toggleClass('d-none',listLayoutEnabled);
        //Ribbonsmayhavebeeneditedordeletedinanotherproducts'option,needtomakesurethey'reuptodate
        this.rerender=true;
    },
    /**
     *@override
     */
    onBlur:function(){
        //Sincechangeswillnotbesavedunlesstheyarevalidated,resetthe
        //previewedribbononBlurtocommunicatethattotheuser
        this._resetRibbonDummy();
        this._toggleEditingUI(false);
    },

    //--------------------------------------------------------------------------
    //Options
    //--------------------------------------------------------------------------

    /**
     *@override
     */
    selectStyle(previewMode,widgetValue,params){
        constproms=[this._super(...arguments)];
        if(params.cssProperty==='background-color'&&params.colorNames.includes(widgetValue)){
            //Resettext-colorwhenchoosingabackground-colorclass,soitusestheautomatictext-coloroftheclass.
            proms.push(this.selectStyle(previewMode,'',{applyTo:'.o_wsale_ribbon_dummy',cssProperty:'color'}));
        }
        returnPromise.all(proms);
    },
    /**
     *@seethis.selectClassforparams
     */
    asyncsetRibbon(previewMode,widgetValue,params){
        if(previewMode==='reset'){
            widgetValue=this.prevRibbonId;
        }else{
            this.prevRibbonId=this.$target[0].dataset.ribbonId;
        }
        this.$target[0].dataset.ribbonId=widgetValue;
        this.trigger_up('set_product_ribbon',{
            templateId:this.productTemplateID,
            ribbonId:widgetValue||false,
        });
        constribbon=this.ribbons[widgetValue]||{html:'',bg_color:'',text_color:'',html_class:''};
        const$ribbons=$(`[data-ribbon-id="${widgetValue}"].o_ribbon:not(.o_wsale_ribbon_dummy)`);
        $ribbons.html(ribbon.html);
        lethtmlClasses;
        this.trigger_up('get_ribbon_classes',{callback:classes=>htmlClasses=classes});
        $ribbons.removeClass(htmlClasses);

        $ribbons.addClass(ribbon.html_class||'');
        $ribbons.css('color',ribbon.text_color||'');
        $ribbons.css('background-color',ribbon.bg_color||'');

        if(!this.ribbons[widgetValue]){
            $(`[data-ribbon-id="${widgetValue}"]`).each((index,product)=>deleteproduct.dataset.ribbonId);
        }
        this._resetRibbonDummy();
        this._toggleEditingUI(false);
    },
    /**
     *@seethis.selectClassforparams
     */
    editRibbon(previewMode,widgetValue,params){
        this.saveMethod='modify';
        this._toggleEditingUI(true);
    },
    /**
     *@seethis.selectClassforparams
     */
    createRibbon(previewMode,widgetValue,params){
        this.saveMethod='create';
        this.setRibbon(false);
        this.$ribbon.html('Ribbontext');
        this.$ribbon.addClass('bg-primaryo_ribbon_left');
        this._toggleEditingUI(true);
        this.isCreating=true;
    },
    /**
     *@seethis.selectClassforparams
     */
    asyncdeleteRibbon(previewMode,widgetValue,params){
        if(this.isCreating){
            //Ribbondoesn'texistyet,simplydiscard.
            this.isCreating=false;
            this._resetRibbonDummy();
            returnthis._toggleEditingUI(false);
        }
        const{ribbonId}=this.$target[0].dataset;
        this.trigger_up('delete_ribbon',{id:ribbonId});
        this.ribbons=awaitnewPromise(resolve=>this.trigger_up('get_ribbons',{callback:resolve}));
        this.rerender=true;
        awaitthis.setRibbon(false,ribbonId);
    },
    /**
     *@seethis.selectClassforparams
     */
    asyncsaveRibbon(previewMode,widgetValue,params){
        consttext=this.$ribbon.html().trim();
        if(!text){
            return;
        }
        constribbon={
            'html':text,
            'bg_color':this.$ribbon[0].style.backgroundColor,
            'text_color':this.$ribbon[0].style.color,
            'html_class':this.$ribbon.attr('class').split('')
                .filter(c=>!['d-none','o_wsale_ribbon_dummy','o_ribbon'].includes(c))
                .join(''),
        };
        ribbon.id=this.saveMethod==='modify'?parseInt(this.$target[0].dataset.ribbonId):Date.now();
        this.trigger_up('set_ribbon',{ribbon:ribbon});
        this.ribbons=awaitnewPromise(resolve=>this.trigger_up('get_ribbons',{callback:resolve}));
        this.rerender=true;
        awaitthis.setRibbon(false,ribbon.id);
    },
    /**
     *@seethis.selectClassforparams
     */
    setRibbonHtml(previewMode,widgetValue,params){
        this.$ribbon.html(widgetValue);
    },
    /**
     *@seethis.selectClassforparams
     */
    setRibbonMode(previewMode,widgetValue,params){
        this.$ribbon[0].className=this.$ribbon[0].className.replace(/o_(ribbon|tag)_(left|right)/,`o_${widgetValue}_$2`);
    },
    /**
     *@seethis.selectClassforparams
     */
    setRibbonPosition(previewMode,widgetValue,params){
        this.$ribbon[0].className=this.$ribbon[0].className.replace(/o_(ribbon|tag)_(left|right)/,`o_$1_${widgetValue}`);
    },
    /**
     *@seethis.selectClassforparams
     */
    changeSequence:function(previewMode,widgetValue,params){
        this._rpc({
            route:'/shop/change_sequence',
            params:{
                id:this.productTemplateID,
                sequence:widgetValue,
            },
        }).then(reload);
    },

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *@override
     */
    updateUI:asyncfunction(){
        awaitthis._super.apply(this,arguments);

        varsizeX=parseInt(this.$target.attr('colspan')||1);
        varsizeY=parseInt(this.$target.attr('rowspan')||1);

        var$size=this.$el.find('.o_wsale_soptions_menu_sizes');
        $size.find('tr:nth-child(-n+'+sizeY+')td:nth-child(-n+'+sizeX+')')
             .addClass('selected');

        //Adaptsizearraypreviewtofitppr
        $size.find('trtd:nth-child(n+'+parseInt(this.ppr+1)+')').hide();
        if(this.rerender){
            this.rerender=false;
            returnthis._rerenderXML();
        }
    },
    /**
     *@override
     */
    updateUIVisibility:asyncfunction(){
        //MainupdateUIVisibilitywillremovethed-noneclassbecausetherearevisiblewidgets
        //insideofit.TODO:updatethisonceupdateUIVisibilitycanbeusedtocomputevisibility
        //ofarbitraryDOMelementsandnotjustwidgets.
        constisEditing=this.$el.find('[data-name="ribbon_options"]').hasClass('d-none');
        awaitthis._super(...arguments);
        this._toggleEditingUI(isEditing);
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *@override
     */
    async_renderCustomXML(uiFragment){
        const$select=$(uiFragment.querySelector('.o_wsale_ribbon_select'));
        this.ribbons=awaitnewPromise(resolve=>this.trigger_up('get_ribbons',{callback:resolve}));
        if(!this.$ribbon){
            this._resetRibbonDummy();
        }
        constclasses=this.$ribbon[0].className;
        this.$ribbon[0].className='';
        constdefaultTextColor=window.getComputedStyle(this.$ribbon[0]).color;
        this.$ribbon[0].className=classes;
        Object.values(this.ribbons).forEach(ribbon=>{
            constcolorClasses=ribbon.html_class
                .split('')
                .filter(className=>!/^o_(ribbon|tag)_(left|right)$/.test(className))
                .join('');
            $select.append(qweb.render('website_sale.ribbonSelectItem',{
                ribbon,
                colorClasses,
                isTag:/o_tag_(left|right)/.test(ribbon.html_class),
                isLeft:/o_(tag|ribbon)_left/.test(ribbon.html_class),
                textColor:ribbon.text_color||(colorClasses?'currentColor':defaultTextColor),
            }));
        });
    },
    /**
     *@override
     */
    async_computeWidgetState(methodName,params){
        constclassList=this.$ribbon[0].classList;
        switch(methodName){
            case'setRibbon':
                returnthis.$target.attr('data-ribbon-id')||'';
            case'setRibbonHtml':
                returnthis.$ribbon.html();
            case'setRibbonMode':{
                if(classList.contains('o_ribbon_left')||classList.contains('o_ribbon_right')){
                    return'ribbon';
                }
                return'tag';
            }
            case'setRibbonPosition':{
                if(classList.contains('o_tag_left')||classList.contains('o_ribbon_left')){
                    return'left';
                }
                return'right';
            }
        }
        returnthis._super(methodName,params);
    },
    /**
     *TogglestheUImodebetweenselectandcreate/editmode.
     *
     *@private
     *@param{Boolean}statetruetoactivateeditingUI,falsetodeactivate.
     */
    _toggleEditingUI(state){
        this.$el.find('[data-name="ribbon_options"]').toggleClass('d-none',state);
        this.$el.find('[data-name="ribbon_customize_opt"]').toggleClass('d-none',!state);
        this.$('.o_ribbon:not(.o_wsale_ribbon_dummy)').toggleClass('d-none',state);
        this.$ribbon.toggleClass('d-none',!state);
    },
    /**
     *Createsacopyofcurrentribbontomanipulateforedition/creation.
     *
     *@private
     */
    _resetRibbonDummy(){
        if(this.$ribbon){
            this.$ribbon.remove();
        }
        const$original=this.$('.o_ribbon');
        this.$ribbon=$original.clone().addClass('d-noneo_wsale_ribbon_dummy').appendTo($original.parent());
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *@private
     */
    _onTableMouseEnter:function(ev){
        $(ev.currentTarget).addClass('oe_hover');
    },
    /**
     *@private
     */
    _onTableMouseLeave:function(ev){
        $(ev.currentTarget).removeClass('oe_hover');
    },
    /**
     *@private
     */
    _onTableItemMouseEnter:function(ev){
        var$td=$(ev.currentTarget);
        var$table=$td.closest("table");
        varx=$td.index()+1;
        vary=$td.parent().index()+1;

        vartr=[];
        for(varyi=0;yi<y;yi++){
            tr.push("tr:eq("+yi+")");
        }
        var$selectTr=$table.find(tr.join(","));
        vartd=[];
        for(varxi=0;xi<x;xi++){
            td.push("td:eq("+xi+")");
        }
        var$selectTd=$selectTr.find(td.join(","));

        $table.find("td").removeClass("select");
        $selectTd.addClass("select");
    },
    /**
     *@private
     */
    _onTableItemClick:function(ev){
        var$td=$(ev.currentTarget);
        varx=$td.index()+1;
        vary=$td.parent().index()+1;
        this._rpc({
            route:'/shop/change_size',
            params:{
                id:this.productTemplateID,
                x:x,
                y:y,
            },
        }).then(reload);
    },
});
});
