#-*-coding:utf-8-*-
#PartofFlectra.SeeLICENSEfileforfullcopyrightandlicensingdetails.

fromflectra.addons.mrp.tests.commonimportTestMrpCommon
fromflectra.addons.stock_account.tests.test_account_moveimportTestAccountMove
fromflectra.testsimportForm,tagged


classTestMrpAccount(TestMrpCommon):

    @classmethod
    defsetUpClass(cls):
        super(TestMrpAccount,cls).setUpClass()
        cls.source_location_id=cls.stock_location_14.id
        cls.warehouse=cls.env.ref('stock.warehouse0')
        #settingupalternativeworkcenters
        cls.wc_alt_1=cls.env['mrp.workcenter'].create({
            'name':'NuclearWorkcenterbis',
            'capacity':3,
            'time_start':9,
            'time_stop':5,
            'time_efficiency':80,
        })
        cls.wc_alt_2=cls.env['mrp.workcenter'].create({
            'name':'NuclearWorkcenterter',
            'capacity':1,
            'time_start':10,
            'time_stop':5,
            'time_efficiency':85,
        })
        cls.product_4.uom_id=cls.uom_unit
        cls.planning_bom=cls.env['mrp.bom'].create({
            'product_id':cls.product_4.id,
            'product_tmpl_id':cls.product_4.product_tmpl_id.id,
            'product_uom_id':cls.uom_unit.id,
            'product_qty':4.0,
            'consumption':'flexible',
            'operation_ids':[
                (0,0,{'name':'GiftWrapMaching','workcenter_id':cls.workcenter_1.id,'time_cycle':15,'sequence':1}),
            ],
            'type':'normal',
            'bom_line_ids':[
                (0,0,{'product_id':cls.product_2.id,'product_qty':2}),
                (0,0,{'product_id':cls.product_1.id,'product_qty':4})
            ]})
        cls.dining_table=cls.env['product.product'].create({
            'name':'Table(MTO)',
            'type':'product',
            'tracking':'serial',
        })
        cls.product_table_sheet=cls.env['product.product'].create({
            'name':'TableTop',
            'type':'product',
            'tracking':'serial',
        })
        cls.product_table_leg=cls.env['product.product'].create({
            'name':'TableLeg',
            'type':'product',
            'tracking':'lot',
        })
        cls.product_bolt=cls.env['product.product'].create({
            'name':'Bolt',
            'type':'product',
        })
        cls.product_screw=cls.env['product.product'].create({
            'name':'Screw',
            'type':'product',
        })

        cls.mrp_workcenter=cls.env['mrp.workcenter'].create({
            'name':'AssemblyLine1',
            'resource_calendar_id':cls.env.ref('resource.resource_calendar_std').id,
        })
        cls.mrp_bom_desk=cls.env['mrp.bom'].create({
            'product_tmpl_id':cls.dining_table.product_tmpl_id.id,
            'product_uom_id':cls.env.ref('uom.product_uom_unit').id,
            'sequence':3,
            'consumption':'flexible',
            'operation_ids':[
                (0,0,{'workcenter_id':cls.mrp_workcenter.id,'name':'ManualAssembly'}),
            ],
        })
        cls.mrp_bom_desk.write({
            'bom_line_ids':[
                (0,0,{
                    'product_id':cls.product_table_sheet.id,
                    'product_qty':1,
                    'product_uom_id':cls.env.ref('uom.product_uom_unit').id,
                    'sequence':1,
                    'operation_id':cls.mrp_bom_desk.operation_ids.id}),
                (0,0,{
                    'product_id':cls.product_table_leg.id,
                    'product_qty':4,
                    'product_uom_id':cls.env.ref('uom.product_uom_unit').id,
                    'sequence':2,
                    'operation_id':cls.mrp_bom_desk.operation_ids.id}),
                (0,0,{
                    'product_id':cls.product_bolt.id,
                    'product_qty':4,
                    'product_uom_id':cls.env.ref('uom.product_uom_unit').id,
                    'sequence':3,
                    'operation_id':cls.mrp_bom_desk.operation_ids.id}),
                (0,0,{
                    'product_id':cls.product_screw.id,
                    'product_qty':10,
                    'product_uom_id':cls.env.ref('uom.product_uom_unit').id,
                    'sequence':4,
                    'operation_id':cls.mrp_bom_desk.operation_ids.id}),
            ]
        })
        cls.mrp_workcenter_1=cls.env['mrp.workcenter'].create({
            'name':'DrillStation1',
            'resource_calendar_id':cls.env.ref('resource.resource_calendar_std').id,
        })
        cls.mrp_workcenter_3=cls.env['mrp.workcenter'].create({
            'name':'AssemblyLine1',
            'resource_calendar_id':cls.env.ref('resource.resource_calendar_std').id,
        })
        cls.categ_standard=cls.env['product.category'].create({
            'name':'STANDARD',
            'property_cost_method':'standard'
        })
        cls.categ_real=cls.env['product.category'].create({
            'name':'REAL',
            'property_cost_method':'fifo'
        })
        cls.categ_average=cls.env['product.category'].create({
            'name':'AVERAGE',
            'property_cost_method':'average'
        })
        cls.dining_table.categ_id=cls.categ_real.id
        cls.product_table_sheet.categ_id=cls.categ_real.id
        cls.product_table_leg.categ_id=cls.categ_average.id
        cls.product_bolt.categ_id=cls.categ_standard.id
        cls.product_screw.categ_id=cls.categ_standard.id
        cls.env['stock.move'].search([('product_id','in',[cls.product_bolt.id,cls.product_screw.id])])._do_unreserve()
        (cls.product_bolt+cls.product_screw).write({'type':'product'})
        cls.dining_table.tracking='none'

    deftest_00_production_order_with_accounting(self):
        self.product_table_sheet.standard_price=20.0
        self.product_table_leg.standard_price=15.0
        self.product_bolt.standard_price=10.0
        self.product_screw.standard_price=0.1
        self.product_table_leg.tracking='none'
        self.product_table_sheet.tracking='none'
        inventory=self.env['stock.inventory'].create({
            'name':'InventoryProductTable',
            'line_ids':[(0,0,{
                'product_id':self.product_table_sheet.id, #trackingserial
                'product_uom_id':self.product_table_sheet.uom_id.id,
                'product_qty':20,
                'location_id':self.source_location_id
            }),(0,0,{
                'product_id':self.product_table_leg.id, #trackinglot
                'product_uom_id':self.product_table_leg.uom_id.id,
                'product_qty':20,
                'location_id':self.source_location_id
            }),(0,0,{
                'product_id':self.product_bolt.id,
                'product_uom_id':self.product_bolt.uom_id.id,
                'product_qty':20,
                'location_id':self.source_location_id
            }),(0,0,{
                'product_id':self.product_screw.id,
                'product_uom_id':self.product_screw.uom_id.id,
                'product_qty':200000,
                'location_id':self.source_location_id
            }),
            ]
        })
        inventory.action_validate
        bom=self.mrp_bom_desk.copy()
        bom.operation_ids=False
        production_table_form=Form(self.env['mrp.production'])
        production_table_form.product_id=self.dining_table
        production_table_form.bom_id=bom
        production_table_form.product_qty=1
        production_table=production_table_form.save()

        production_table.extra_cost=20
        production_table.action_confirm()

        mo_form=Form(production_table)
        mo_form.qty_producing=1
        production_table=mo_form.save()
        production_table._post_inventory()
        move_value=production_table.move_finished_ids.filtered(lambdax:x.state=="done").stock_valuation_layer_ids.value

        #1tableheadat20+4tablelegat15+4boltat10+10screwat10+1*20(extracost)
        self.assertEqual(move_value,141,'Thingshouldhavethecorrectprice')

    deftest_generate_analytic_account(self):
        """
        Supposeaworkcenterwithacostandananalyticaccount.AMOis
        processedandoneofthecomponentshasbeenconsumedmorethan
        expected.Thetestensuresthattheanalyticaccountlinewillbe
        generatedonlyonce.
        """
        analytic_account=self.env['account.analytic.account'].create({'name':'SuperAnalyticAccount'})

        cost_per_hour=100
        workcenter=self.env['mrp.workcenter'].create({
            'name':'SuperWorkcenter',
            'costs_hour':cost_per_hour,
            'costs_hour_account_id':analytic_account.id,
        })

        bom=self.env['mrp.bom'].create({
            'product_tmpl_id':self.product_2.product_tmpl_id.id,
            'product_qty':1,
            'bom_line_ids':[(0,0,{
                'product_id':self.product_1.id,
                'product_qty':1,
            })],
            'operation_ids':[(0,0,{
                'name':'SuperOperation',
                'workcenter_id':workcenter.id,
            })],
        })

        mo=self.env['mrp.production'].create({
            'name':'SuperMO',
            'product_id':self.product_2.id,
            'product_uom_id':self.product_2.uom_id.id,
            'product_qty':1,
            'bom_id':bom.id,
        })
        mo._onchange_move_raw()
        mo._onchange_move_finished()
        mo._onchange_workorder_ids()
        mo.action_confirm()

        duration=30
        mo.qty_producing=1
        mo.workorder_ids.duration=duration
        mo.move_raw_ids.move_line_ids.qty_done=2

        action=mo.button_mark_done()
        self.assertNotEqual(mo.state,'done')
        self.assertFalse(analytic_account.line_ids)

        warning=Form(self.env['mrp.consumption.warning'].with_context(**action['context']))
        warning=warning.save()
        warning.action_confirm()

        self.assertEqual(mo.state,'done')
        self.assertEqual(analytic_account.line_ids.amount,-duration/60*cost_per_hour)


@tagged("post_install","-at_install")
classTestMrpAccountMove(TestAccountMove):

    @classmethod
    defsetUpClass(cls):
        super().setUpClass()
        cls.product_B=cls.env["product.product"].create(
            {
                "name":"ProductB",
                "type":"product",
                "default_code":"prda",
                "categ_id":cls.auto_categ.id,
                "taxes_id":[(5,0,0)],
                "supplier_taxes_id":[(5,0,0)],
                "lst_price":100.0,
                "standard_price":10.0,
                "property_account_income_id":cls.company_data["default_account_revenue"].id,
                "property_account_expense_id":cls.company_data["default_account_expense"].id,
            }
        )
        cls.bom=cls.env['mrp.bom'].create({
            'product_id':cls.product_A.id,
            'product_tmpl_id':cls.product_A.product_tmpl_id.id,
            'product_qty':1.0,
            'bom_line_ids':[
                (0,0,{'product_id':cls.product_B.id,'product_qty':1}),
            ]})

    deftest_unbuild_account_00(self):
        """Testwhenafterunbuild,thejournalentriesarethereversalofthe
        journalentriescreatedwhenproducetheproduct.
        """
        #build
        production_form=Form(self.env['mrp.production'])
        production_form.product_id=self.product_A
        production_form.bom_id=self.bom
        production_form.product_qty=1
        production=production_form.save()
        production.action_confirm()
        mo_form=Form(production)
        mo_form.qty_producing=1
        production=mo_form.save()
        production._post_inventory()
        production.button_mark_done()

        #finishedproductmove
        productA_debit_line=self.env['account.move.line'].search([('ref','ilike','MO%ProductA'),('credit','=',0)])
        productA_credit_line=self.env['account.move.line'].search([('ref','ilike','MO%ProductA'),('debit','=',0)])
        self.assertEqual(productA_debit_line.account_id,self.stock_valuation_account)
        self.assertEqual(productA_credit_line.account_id,self.stock_input_account)
        #componentmove
        productB_debit_line=self.env['account.move.line'].search([('ref','ilike','MO%ProductB'),('credit','=',0)])
        productB_credit_line=self.env['account.move.line'].search([('ref','ilike','MO%ProductB'),('debit','=',0)])
        self.assertEqual(productB_debit_line.account_id,self.stock_output_account)
        self.assertEqual(productB_credit_line.account_id,self.stock_valuation_account)

        #unbuild
        res_dict=production.button_unbuild()
        wizard=Form(self.env[res_dict['res_model']].with_context(res_dict['context'])).save()
        wizard.action_validate()

        #finishedproductmove
        productA_debit_line=self.env['account.move.line'].search([('ref','ilike','UB%ProductA'),('credit','=',0)])
        productA_credit_line=self.env['account.move.line'].search([('ref','ilike','UB%ProductA'),('debit','=',0)])
        self.assertEqual(productA_debit_line.account_id,self.stock_input_account)
        self.assertEqual(productA_credit_line.account_id,self.stock_valuation_account)
        #componentmove
        productB_debit_line=self.env['account.move.line'].search([('ref','ilike','UB%ProductB'),('credit','=',0)])
        productB_credit_line=self.env['account.move.line'].search([('ref','ilike','UB%ProductB'),('debit','=',0)])
        self.assertEqual(productB_debit_line.account_id,self.stock_valuation_account)
        self.assertEqual(productB_credit_line.account_id,self.stock_output_account)

    deftest_unbuild_account_01(self):
        """Testwhenproductionlocationhasitsvaluationaccounts.Afterunbuild,
        thejournalentriesarethereversalofthejournalentriescreatedwhen
        producetheproduct.
        """
        #setaccountsforproductionlocation
        production_location=self.product_A.property_stock_production
        wip_incoming_account=self.env['account.account'].create({
            'name':'wipincoming',
            'code':'000001',
            'user_type_id':self.env.ref('account.data_account_type_current_assets').id,
        })
        wip_outgoing_account=self.env['account.account'].create({
            'name':'wipoutgoing',
            'code':'000002',
            'user_type_id':self.env.ref('account.data_account_type_current_assets').id,
        })
        production_location.write({
            'valuation_in_account_id':wip_incoming_account.id,
            'valuation_out_account_id':wip_outgoing_account.id,
        })

        #build
        production_form=Form(self.env['mrp.production'])
        production_form.product_id=self.product_A
        production_form.bom_id=self.bom
        production_form.product_qty=1
        production=production_form.save()
        production.action_confirm()
        mo_form=Form(production)
        mo_form.qty_producing=1
        production=mo_form.save()
        production._post_inventory()
        production.button_mark_done()

        #finishedproductmove
        productA_debit_line=self.env['account.move.line'].search([('ref','ilike','MO%ProductA'),('credit','=',0)])
        productA_credit_line=self.env['account.move.line'].search([('ref','ilike','MO%ProductA'),('debit','=',0)])
        self.assertEqual(productA_debit_line.account_id,self.stock_valuation_account)
        self.assertEqual(productA_credit_line.account_id,wip_outgoing_account)
        #componentmove
        productB_debit_line=self.env['account.move.line'].search([('ref','ilike','MO%ProductB'),('credit','=',0)])
        productB_credit_line=self.env['account.move.line'].search([('ref','ilike','MO%ProductB'),('debit','=',0)])
        self.assertEqual(productB_debit_line.account_id,wip_incoming_account)
        self.assertEqual(productB_credit_line.account_id,self.stock_valuation_account)

        #unbuild
        res_dict=production.button_unbuild()
        wizard=Form(self.env[res_dict['res_model']].with_context(res_dict['context'])).save()
        wizard.action_validate()

        productA_debit_line=self.env['account.move.line'].search([('ref','ilike','UB%ProductA'),('credit','=',0)])
        productA_credit_line=self.env['account.move.line'].search([('ref','ilike','UB%ProductA'),('debit','=',0)])
        self.assertEqual(productA_debit_line.account_id,wip_outgoing_account)
        self.assertEqual(productA_credit_line.account_id,self.stock_valuation_account)
        #componentmove
        productB_debit_line=self.env['account.move.line'].search([('ref','ilike','UB%ProductB'),('credit','=',0)])
        productB_credit_line=self.env['account.move.line'].search([('ref','ilike','UB%ProductB'),('debit','=',0)])
        self.assertEqual(productB_debit_line.account_id,self.stock_valuation_account)
        self.assertEqual(productB_credit_line.account_id,wip_incoming_account)
