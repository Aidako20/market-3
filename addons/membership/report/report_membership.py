#-*-coding:utf-8-*-
#PartofFlectra.SeeLICENSEfileforfullcopyrightandlicensingdetails.

fromflectraimportapi,fields,models,tools

STATE=[
    ('none','NonMember'),
    ('canceled','CancelledMember'),
    ('old','OldMember'),
    ('waiting','WaitingMember'),
    ('invoiced','InvoicedMember'),
    ('free','FreeMember'),
    ('paid','PaidMember'),
]


classReportMembership(models.Model):
    '''MembershipAnalysis'''

    _name='report.membership'
    _description='MembershipAnalysis'
    _auto=False
    _rec_name='start_date'

    start_date=fields.Date(string='StartDate',readonly=True)
    date_to=fields.Date(string='EndDate',readonly=True,help="Endmembershipdate")
    num_waiting=fields.Integer(string='#Waiting',readonly=True)
    num_invoiced=fields.Integer(string='#Invoiced',readonly=True)
    num_paid=fields.Integer(string='#Paid',readonly=True)
    tot_pending=fields.Float(string='PendingAmount',digits=0,readonly=True)
    tot_earned=fields.Float(string='EarnedAmount',digits=0,readonly=True)
    partner_id=fields.Many2one('res.partner',string='Member',readonly=True)
    associate_member_id=fields.Many2one('res.partner',string='AssociateMember',readonly=True)
    membership_id=fields.Many2one('product.product',string='MembershipProduct',readonly=True)
    membership_state=fields.Selection(STATE,string='CurrentMembershipState',readonly=True)
    user_id=fields.Many2one('res.users',string='Salesperson',readonly=True)
    company_id=fields.Many2one('res.company',string='Company',readonly=True)
    quantity=fields.Integer(readonly=True)

    definit(self):
        '''Createtheview'''
        tools.drop_view_if_exists(self._cr,self._table)
        self._cr.execute("""
        CREATEORREPLACEVIEW%sAS(
        SELECT
        MIN(id)ASid,
        partner_id,
        count(membership_id)asquantity,
        user_id,
        membership_state,
        associate_member_id,
        membership_amount,
        date_to,
        start_date,
        COUNT(num_waiting)ASnum_waiting,
        COUNT(num_invoiced)ASnum_invoiced,
        COUNT(num_paid)ASnum_paid,
        SUM(tot_pending)AStot_pending,
        SUM(tot_earned)AStot_earned,
        membership_id,
        company_id
        FROM
        (SELECT
            MIN(p.id)ASid,
            p.idASpartner_id,
            p.user_idASuser_id,
            p.membership_stateASmembership_state,
            p.associate_memberASassociate_member_id,
            p.membership_amountASmembership_amount,
            p.membership_stopASdate_to,
            p.membership_startASstart_date,
            CASEWHENml.state='waiting' THENml.idENDASnum_waiting,
            CASEWHENml.state='invoiced'THENml.idENDASnum_invoiced,
            CASEWHENml.state='paid'    THENml.idENDASnum_paid,
            CASEWHENml.stateIN('waiting','invoiced')THENSUM(aml.price_subtotal)ELSE0ENDAStot_pending,
            CASEWHENml.state='paid'ORp.membership_state='old'THENSUM(aml.price_subtotal)ELSE0ENDAStot_earned,
            ml.membership_idASmembership_id,
            p.company_idAScompany_id
            FROMres_partnerp
            LEFTJOINmembership_membership_linemlON(ml.partner=p.id)
            LEFTJOINaccount_move_lineamlON(ml.account_invoice_line=aml.id)
            LEFTJOINaccount_moveamON(aml.move_id=am.id)
            WHEREp.membership_state!='none'andp.active='true'
            GROUPBY
              p.id,
              p.user_id,
              p.membership_state,
              p.associate_member,
              p.membership_amount,
              p.membership_start,
              ml.membership_id,
              p.company_id,
              ml.state,
              ml.id
        )ASfoo
        GROUPBY
            start_date,
            date_to,
            partner_id,
            user_id,
            membership_id,
            company_id,
            membership_state,
            associate_member_id,
            membership_amount
        )"""%(self._table,))
