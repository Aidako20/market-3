flectra.define('im_livechat.legacy.im_livechat.im_livechat',function(require){
"usestrict";

require('bus.BusService');
varconcurrency=require('web.concurrency');
varconfig=require('web.config');
varcore=require('web.core');
varsession=require('web.session');
vartime=require('web.time');
varutils=require('web.utils');
varWidget=require('web.Widget');

varWebsiteLivechat=require('im_livechat.legacy.im_livechat.model.WebsiteLivechat');
varWebsiteLivechatMessage=require('im_livechat.legacy.im_livechat.model.WebsiteLivechatMessage');
varWebsiteLivechatWindow=require('im_livechat.legacy.im_livechat.WebsiteLivechatWindow');

var_t=core._t;
varQWeb=core.qweb;

//Constants
varLIVECHAT_COOKIE_HISTORY='im_livechat_history';
varHISTORY_LIMIT=15;

varRATING_TO_EMOJI={
    "5":"😊",
    "3":"😐",
    "1":"😞"
};

//Historytracking
varpage=window.location.href.replace(/^.*\/\/[^/]+/,'');
varpageHistory=utils.get_cookie(LIVECHAT_COOKIE_HISTORY);
varurlHistory=[];
if(pageHistory){
    urlHistory=JSON.parse(pageHistory)||[];
}
if(!_.contains(urlHistory,page)){
    urlHistory.push(page);
    while(urlHistory.length>HISTORY_LIMIT){
        urlHistory.shift();
    }
    utils.set_cookie(LIVECHAT_COOKIE_HISTORY,JSON.stringify(urlHistory),60*60*24);//1daycookie
}

varLivechatButton=Widget.extend({
    className:'openerpo_livechat_buttond-print-none',
    custom_events:{
        'close_chat_window':'_onCloseChatWindow',
        'post_message_chat_window':'_onPostMessageChatWindow',
        'save_chat_window':'_onSaveChatWindow',
        'updated_typing_partners':'_onUpdatedTypingPartners',
        'updated_unread_counter':'_onUpdatedUnreadCounter',
    },
    events:{
        'click':'_openChat'
    },
    init:function(parent,serverURL,options){
        this._super(parent);
        this.options=_.defaults(options||{},{
            input_placeholder:_t("Asksomething..."),
            default_username:_t("Visitor"),
            button_text:_t("Chatwithoneofourcollaborators"),
            default_message:_t("HowmayIhelpyou?"),
        });

        this._history=null;
        //livechatmodel
        this._livechat=null;
        //livechatwindow
        this._chatWindow=null;
        this._messages=[];
        this._serverURL=serverURL;
    },
    willStart:function(){
        varself=this;
        varcookie=utils.get_cookie('im_livechat_session');
        varready;
        if(!cookie){
            ready=session.rpc('/im_livechat/init',{channel_id:this.options.channel_id})
                .then(function(result){
                    if(!result.available_for_me){
                        returnPromise.reject();
                    }
                    self._rule=result.rule;
                });
        }else{
            varchannel=JSON.parse(cookie);
            ready=session.rpc('/mail/chat_history',{uuid:channel.uuid,limit:100})
                .then(function(history){
                    self._history=history;
                });
        }
        session.user_context={};
        returnready
            .then(this._loadQWebTemplate.bind(this))
            .then(()=>{
                if(!session.is_frontend){
                    returnsession.load_translations(["im_livechat"]);
                }
            });
    },
    start:function(){
        this.$el.text(this.options.button_text);
        if(this._history){
            _.each(this._history.reverse(),this._addMessage.bind(this));
            this._openChat();
        }elseif(!config.device.isMobile&&this._rule.action==='auto_popup'){
            varautoPopupCookie=utils.get_cookie('im_livechat_auto_popup');
            if(!autoPopupCookie||JSON.parse(autoPopupCookie)){
                this._autoPopupTimeout=
                    setTimeout(this._openChat.bind(this),this._rule.auto_popup_timer*1000);
            }
        }
        this.call('bus_service','onNotification',this,this._onNotification);
        if(this.options.button_background_color){
            this.$el.css('background-color',this.options.button_background_color);
        }
        if(this.options.button_text_color){
            this.$el.css('color',this.options.button_text_color);
        }

        //Ifwebsite_event_trackinstalled,putthelivechatbannerabovethePWAbanner.
        varpwaBannerHeight=$('.o_pwa_install_banner').outerHeight(true);
        if(pwaBannerHeight){
            this.$el.css('bottom',pwaBannerHeight+'px');
        }

        returnthis._super();
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------


    /**
     *@private
     *@param{Object}data
     *@param{Object}[options={}]
     */
    _addMessage:function(data,options){
        options=_.extend({},this.options,options,{
            serverURL:this._serverURL,
        });
        varmessage=newWebsiteLivechatMessage(this,data,options);

        varhasAlreadyMessage=_.some(this._messages,function(msg){
            returnmessage.getID()===msg.getID();
        });
        if(hasAlreadyMessage){
            return;
        }

        if(this._livechat){
            this._livechat.addMessage(message);
        }

        if(options&&options.prepend){
            this._messages.unshift(message);
        }else{
            this._messages.push(message);
        }
    },
    /**
     *@private
     */
    _askFeedback:function(){
        this._chatWindow.$('.o_thread_composerinput').prop('disabled',true);

        varfeedback=newFeedback(this,this._livechat);
        this._chatWindow.replaceContentWith(feedback);

        feedback.on('send_message',this,this._sendMessage);
        feedback.on('feedback_sent',this,this._closeChat);
    },
    /**
     *@private
     */
    _closeChat:function(){
        this._chatWindow.destroy();
        utils.set_cookie('im_livechat_session',"",-1);//removecookie
    },
    /**
     *@private
     *@param{Array}notification
     */
    _handleNotification:function(notification){
        const[livechatUUID,notificationData]=notification;
        if(this._livechat&&(livechatUUID===this._livechat.getUUID())){
            if(notificationData._type==='history_command'){//historyrequest
                constcookie=utils.get_cookie(LIVECHAT_COOKIE_HISTORY);
                consthistory=cookie?JSON.parse(cookie):[];
                session.rpc('/im_livechat/history',{
                    pid:this._livechat.getOperatorPID()[0],
                    channel_uuid:this._livechat.getUUID(),
                    page_history:history,
                });
            }elseif(notificationData.info==='typing_status'){
                constpartnerID=notificationData.partner_id;
                if(partnerID===this.options.current_partner_id){
                    //ignoretypingdisplayofcurrentpartner.
                    return;
                }
                if(notificationData.is_typing){
                    this._livechat.registerTyping({partnerID});
                }else{
                    this._livechat.unregisterTyping({partnerID});
                }
            }elseif('body'innotificationData){//normalmessage
                //Ifmessagefromnotifisalreadyinchattermessages,stophandling
                if(this._messages.some(message=>message.getID()===notificationData.id)){
                    return;
                }
                this._addMessage(notificationData);
                if(this._chatWindow.isFolded()||!this._chatWindow.isAtBottom()){
                    this._livechat.incrementUnreadCounter();
                }
                this._renderMessages();
            }
        }
    },
    /**
     *@private
     */
    _loadQWebTemplate:function(){
        returnsession.rpc('/im_livechat/load_templates').then(function(templates){
            _.each(templates,function(template){
                QWeb.add_template(template);
            });
        });
    },
    /**
     *@private
     */
    _openChat:_.debounce(function(){
        if(this._openingChat){
            return;
        }
        varself=this;
        varcookie=utils.get_cookie('im_livechat_session');
        vardef;
        this._openingChat=true;
        clearTimeout(this._autoPopupTimeout);
        if(cookie){
            def=Promise.resolve(JSON.parse(cookie));
        }else{
            this._messages=[];//re-initializemessagescache
            def=session.rpc('/im_livechat/get_session',{
                channel_id:this.options.channel_id,
                anonymous_name:this.options.default_username,
                previous_operator_id:this._get_previous_operator_id(),
            },{shadow:true});
        }
        def.then(function(livechatData){
            if(!livechatData||!livechatData.operator_pid){
                try{
                    self.displayNotification({
                        message:_t("Noavailablecollaborator,pleasetryagainlater."),
                        sticky:true,
                    });
                }catch(err){
                    /**
                     *Failureindisplayingnotificationhappenswhen
                     *notificationservicedoesn'texist,whichisthecasein
                     *externallib.Wedon'twantnotificationsinexternal
                     *libatthemomentbecausetheyusebootstraptoastand
                     *wedon'twanttoincludeboostrapinexternallib.
                     */
                    console.warn(_t("Noavailablecollaborator,pleasetryagainlater."));
                }
            }else{
                self._livechat=newWebsiteLivechat({
                    parent:self,
                    data:livechatData
                });
                returnself._openChatWindow().then(function(){
                    if(!self._history){
                        self._sendWelcomeMessage();
                    }
                    self._renderMessages();
                    self.call('bus_service','addChannel',self._livechat.getUUID());
                    self.call('bus_service','startPolling');

                    utils.set_cookie('im_livechat_session',utils.unaccent(JSON.stringify(self._livechat.toData())),60*60);
                    utils.set_cookie('im_livechat_auto_popup',JSON.stringify(false),60*60);
                    if(livechatData.operator_pid[0]){
                        //livechatData.operator_pidcontainsatuple(id,name)
                        //weareonlyinterestedintheid
                        varoperatorPidId=livechatData.operator_pid[0];
                        varoneWeek=7*24*60*60;
                        utils.set_cookie('im_livechat_previous_operator_pid',operatorPidId,oneWeek);
                    }
                });
            }
        }).then(function(){
            self._openingChat=false;
        }).guardedCatch(function(){
            self._openingChat=false;
        });
    },200,true),
    /**
     *Willtrytogetapreviousoperatorforthisvisitor.
     *IfthevisitoralreadyhadvisitorA,it'sbetterforhisuserexperience
     *togetoperatorAagain.
     *
     *Theinformationisstoredinthe'im_livechat_previous_operator_pid'cookie.
     *
     *@private
     *@return{integer}operator_id.partner_id.idifthecookieisset
     */
    _get_previous_operator_id:function(){
        varcookie=utils.get_cookie('im_livechat_previous_operator_pid');
        if(cookie){
            returncookie;
        }

        returnnull;
    },
    /**
     *@private
     *@return{Promise}
     */
    _openChatWindow:function(){
        varself=this;
        varoptions={
            displayStars:false,
            headerBackgroundColor:this.options.header_background_color,
            placeholder:this.options.input_placeholder||"",
            titleColor:this.options.title_color,
        };
        this._chatWindow=newWebsiteLivechatWindow(this,this._livechat,options);
        returnthis._chatWindow.appendTo($('body')).then(function(){
            varcssProps={bottom:0};
            cssProps[_t.database.parameters.direction==='rtl'?'left':'right']=0;
            self._chatWindow.$el.css(cssProps);
            self.$el.hide();
        });
    },
    /**
     *@private
     */
    _renderMessages:function(){
        varshouldScroll=!this._chatWindow.isFolded()&&this._chatWindow.isAtBottom();
        this._livechat.setMessages(this._messages);
        this._chatWindow.render();
        if(shouldScroll){
            this._chatWindow.scrollToBottom();
        }
    },
    /**
     *@private
     *@param{Object}message
     *@return{Promise}
     */
    _sendMessage:function(message){
        varself=this;
        this._livechat._notifyMyselfTyping({typing:false});
        returnsession
            .rpc('/mail/chat_post',{uuid:this._livechat.getUUID(),message_content:message.content})
            .then(function(messageId){
                if(!messageId){
                    try{
                        self.displayNotification({
                            message:_t("Sessionexpired...Pleaserefreshandtryagain."),
                            sticky:true,
                        });
                    }catch(err){
                        /**
                         *Failureindisplayingnotificationhappenswhen
                         *notificationservicedoesn'texist,whichisthecase
                         *inexternallib.Wedon'twantnotificationsin
                         *externallibatthemomentbecausetheyusebootstrap
                         *toastandwedon'twanttoincludeboostrapin
                         *externallib.
                         */
                        console.warn(_t("Sessionexpired...Pleaserefreshandtryagain."));
                    }
                    self._closeChat();
                }
                self._chatWindow.scrollToBottom();
            });
    },
    /**
     *@private
     */
    _sendWelcomeMessage:function(){
        if(this.options.default_message){
            this._addMessage({
                id:'_welcome',
                attachment_ids:[],
                author_id:this._livechat.getOperatorPID(),
                body:this.options.default_message,
                channel_ids:[this._livechat.getID()],
                date:time.datetime_to_str(newDate()),
            },{prepend:true});
        }
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *@private
     *@param{FlectraEvent}ev
     */
    _onCloseChatWindow:function(ev){
        ev.stopPropagation();
        varisComposerDisabled=this._chatWindow.$('.o_thread_composerinput').prop('disabled');
        varshouldAskFeedback=!isComposerDisabled&&_.find(this._messages,function(message){
            returnmessage.getID()!=='_welcome';
        });
        if(shouldAskFeedback){
            this._chatWindow.toggleFold(false);
            this._askFeedback();
        }else{
            this._closeChat();
        }
        this._visitorLeaveSession();
    },
    /**
     *@private
     *@param{Array[]}notifications
     */
    _onNotification:function(notifications){
        varself=this;
        _.each(notifications,function(notification){
            self._handleNotification(notification);
        });
    },
    /**
     *@private
     *@param{FlectraEvent}ev
     *@param{Object}ev.data.messageData
     */
    _onPostMessageChatWindow:function(ev){
        ev.stopPropagation();
        varself=this;
        varmessageData=ev.data.messageData;
        this._sendMessage(messageData).guardedCatch(function(reason){
            reason.event.preventDefault();
            returnself._sendMessage(messageData);//tryagainjustincase
        });
    },
    /**
     *@private
     *@param{FlectraEvent}ev
     */
    _onSaveChatWindow:function(ev){
        ev.stopPropagation();
        utils.set_cookie('im_livechat_session',utils.unaccent(JSON.stringify(this._livechat.toData())),60*60);
    },
    /**
     *@private
     *@param{FlectraEvent}ev
     */
    _onUpdatedTypingPartners(ev){
        ev.stopPropagation();
        this._chatWindow.renderHeader();
    },
    /**
     *@private
     *@param{FlectraEvent}ev
     */
    _onUpdatedUnreadCounter:function(ev){
        ev.stopPropagation();
        this._chatWindow.renderHeader();
    },
    /**
     *@private
     *Calledwhenthevisitorleavesthelivechatchatterthefirsttime(firstclickonXbutton)
     *thiswilldeactivatethemail_channel,notifyoperatorthatvisitorhasleftthechannel.
     */
    _visitorLeaveSession:function(){
        varcookie=utils.get_cookie('im_livechat_session');
        if(cookie){
            varchannel=JSON.parse(cookie);
            session.rpc('/im_livechat/visitor_leave_session',{uuid:channel.uuid});
            utils.set_cookie('im_livechat_session',"",-1);//removecookie
        }
    },
});

/*
 *RatingforLivechat
 *
 *Thiswidgetdisplaysthe3ratingsmileys,andatextareatoaddareason
 *(onlyforredsmiley),andsendstheuserfeedbacktotheserver.
 */
varFeedback=Widget.extend({
    template:'im_livechat.legacy.im_livechat.FeedBack',

    events:{
        'click.o_livechat_rating_choicesimg':'_onClickSmiley',
        'click.o_livechat_no_feedbackspan':'_onClickNoFeedback',
        'click.o_rating_submit_button':'_onClickSend',
        'click.o_email_chat_button':'_onEmailChat',
        'click.o_livechat_email_error.alert-link':'_onTryAgain',
    },

    /**
     *@param{?}parent
     *@param{im_livechat.legacy.im_livechat.model.WebsiteLivechat}livechat
     */
    init:function(parent,livechat){
        this._super(parent);
        this._livechat=livechat;
        this.server_origin=session.origin;
        this.rating=undefined;
        this.dp=newconcurrency.DropPrevious();
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *@private
     *@param{Object}options
     */
    _sendFeedback:function(reason){
        varself=this;
        varargs={
            uuid:this._livechat.getUUID(),
            rate:this.rating,
            reason:reason,
        };
        this.dp.add(session.rpc('/im_livechat/feedback',args)).then(function(){
            varemoji=RATING_TO_EMOJI[self.rating]||"??";
            varcontent=_.str.sprintf(_t("Rating:%s"),emoji);
            if(reason){
                content+="\n"+reason;
            }
            self.trigger('send_message',{content:content,isFeedback:true});
        });
    },
    /**
    *@private
    */
    _showThanksMessage:function(){
        this.$('.o_livechat_rating_box').empty().append($('<div/>',{
            text:_t('Thankyouforyourfeedback'),
            class:'text-muted'
        }));
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *@private
     */
    _onClickNoFeedback:function(){
        this.trigger('feedback_sent');//willclosethechat
    },
    /**
     *@private
     */
    _onClickSend:function(){
        this.$('.o_livechat_rating_reason').hide();
        this._showThanksMessage();
        if(_.isNumber(this.rating)){
            this._sendFeedback(this.$('textarea').val());
        }
    },
    /**
     *@private
     *@param{MouseEvent}ev
     */
    _onClickSmiley:function(ev){
        this.rating=parseInt($(ev.currentTarget).data('value'));
        this.$('.o_livechat_rating_choicesimg').removeClass('selected');
        this.$('.o_livechat_rating_choicesimg[data-value="'+this.rating+'"]').addClass('selected');

        //onlydisplaytexteareaifbadsmileyselected
        if(this.rating!==5){
            this.$('.o_livechat_rating_reason').show();
        }else{
            this.$('.o_livechat_rating_reason').hide();
            this._showThanksMessage();
            this._sendFeedback();
        }
    },
    /**
    *@private
    */
    _onEmailChat:function(){
        varself=this;
        var$email=this.$('#o_email');

        if(utils.is_email($email.val())){
            $email.removeAttr('title').removeClass('is-invalid').prop('disabled',true);
            this.$('.o_email_chat_button').prop('disabled',true);
            this._rpc({
                route:'/im_livechat/email_livechat_transcript',
                params:{
                    uuid:this._livechat.getUUID(),
                    email:$email.val(),
                }
            }).then(function(){
                self.$('.o_livechat_email').html($('<strong/>',{text:_t('ConversationSent')}));
            }).guardedCatch(function(){
                self.$('.o_livechat_email').hide();
                self.$('.o_livechat_email_error').show();
            });
        }else{
            $email.addClass('is-invalid').prop('title',_t('Invalidemailaddress'));
        }
    },
    /**
    *@private
    */
    _onTryAgain:function(){
        this.$('#o_email').prop('disabled',false);
        this.$('.o_email_chat_button').prop('disabled',false);
        this.$('.o_livechat_email_error').hide();
        this.$('.o_livechat_email').show();
    },
});

return{
    LivechatButton:LivechatButton,
    Feedback:Feedback,
};

});

flectra.define('im_livechat.legacy.im_livechat.model.WebsiteLivechat',function(require){
"usestrict";

varAbstractThread=require('im_livechat.legacy.mail.model.AbstractThread');
varThreadTypingMixin=require('im_livechat.legacy.mail.model.ThreadTypingMixin');

varsession=require('web.session');

/**
 *Threadmodelthatrepresentsalivechatonthewebsite-side.Thislivechat
 *isnotlinkedtothemailservice.
 */
varWebsiteLivechat=AbstractThread.extend(ThreadTypingMixin,{

    /**
     *@override
     *@private
     *@param{Object}params
     *@param{Object}params.data
     *@param{boolean}[params.data.folded]stateswhetherthelivechatis
     *  foldedornot.Itisconsideredonlyifthisisdefinedanditisa
     *  boolean.
     *@param{integer}params.data.idtheIDofthislivechat.
     *@param{integer}[params.data.message_unread_counter]theunreadcounter
     *  ofthislivechat.
     *@param{Array}params.data.operator_pid
     *@param{string}params.data.namethenameofthislivechat.
     *@param{string}[params.data.state]if'folded',thelivechatisfolded.
     *  Thisisignoredif`folded`isprovidedandisabooleanvalue.
     *@param{string}params.data.uuidtheUUIDofthislivechat.
     *@param{im_livechat.legacy.im_livechat.im_livechat:LivechatButton}params.parent
     */
    init:function(params){
        this._super.apply(this,arguments);
        ThreadTypingMixin.init.call(this,arguments);

        this._members=[];
        this._operatorPID=params.data.operator_pid;
        this._uuid=params.data.uuid;

        if(params.data.message_unread_counter!==undefined){
            this._unreadCounter=params.data.message_unread_counter;
        }

        if(_.isBoolean(params.data.folded)){
            this._folded=params.data.folded;
        }else{
            this._folded=params.data.state==='folded';
        }

        //Necessaryforthreadtypingmixintodisplayistypingnotification
        //bartext(atleast,fortheoperatorinthemembers).
        this._members.push({
            id:this._operatorPID[0],
            name:this._operatorPID[1]
        });
    },

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *@override
     *@returns{im_livechat.legacy.im_livechat.model.WebsiteLivechatMessage[]}
     */
    getMessages:function(){
        returnthis._messages;
    },
    /**
     *@returns{Array}
     */
    getOperatorPID:function(){
        returnthis._operatorPID;
    },
    /**
     *@returns{string}
     */
    getUUID:function(){
        returnthis._uuid;
    },
    /**
     *Incrementstheunreadcounterofthislivechatby1unit.
     *
     *Note:thispublicmethodmakessensebecausethemanagementofmessages
     *forwebsitelivechatisexternal.Thismethodshouldbedroppedwhen
     *thisclasshandlesmessagesbyitself.
     */
    incrementUnreadCounter:function(){
        this._incrementUnreadCounter();
    },
    /**
     *AKU:hackforthemoment
     *
     *@param{im_livechat.legacy.im_livechat.model.WebsiteLivechatMessage[]}messages
     */
    setMessages:function(messages){
        this._messages=messages;
    },
    /**
     *@returns{Object}
     */
    toData:function(){
        return{
            folded:this.isFolded(),
            id:this.getID(),
            message_unread_counter:this.getUnreadCounter(),
            operator_pid:this.getOperatorPID(),
            name:this.getName(),
            uuid:this.getUUID(),
        };
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *@override{mail.model.ThreadTypingMixin}
     *@private
     *@param{Object}params
     *@param{boolean}params.isWebsiteUser
     *@returns{boolean}
     */
    _isTypingMyselfInfo:function(params){
        returnparams.isWebsiteUser;
    },
    /**
     *@override{mail.model.ThreadTypingMixin}
     *@private
     *@param{Object}params
     *@param{boolean}params.typing
     *@returns{Promise}
     */
    _notifyMyselfTyping:function(params){
        returnsession.rpc('/im_livechat/notify_typing',{
            uuid:this.getUUID(),
            is_typing:params.typing,
        },{shadow:true});
    },
    /**
     *Warnviewsthatthelistofusersthatarecurrentlytypingonthis
     *livechathasbeenupdated.
     *
     *@override{mail.model.ThreadTypingMixin}
     *@private
     */
    _warnUpdatedTypingPartners:function(){
        this.trigger_up('updated_typing_partners');
    },
    /**
     *Warnthattheunreadcounterhasbeenupdatedonthislivechat
     *
     *@override
     *@private
     */
    _warnUpdatedUnreadCounter:function(){
        this.trigger_up('updated_unread_counter');
    },

    //--------------------------------------------------------------------------
    //Handler
    //--------------------------------------------------------------------------

    /**
     *Overridesothatitonlyunregistertypingoperators.
     *
     *Notethatinthefrontend,thereisnowaytoidentifyamessagethatis
     *fromthecurrentuser,becausethereisnopartnerIDinthesessionand
     *amessagewithanauthorsetsthepartnerIDoftheauthor.
     *
     *@override{mail.model.ThreadTypingMixin}
     *@private
     *@param{mail.model.AbstractMessage}message
     */
    _onTypingMessageAdded:function(message){
        varoperatorID=this.getOperatorPID()[0];
        if(message.hasAuthor()&&message.getAuthorID()===operatorID){
            this.unregisterTyping({partnerID:operatorID});
        }
    },
});

returnWebsiteLivechat;

});

flectra.define('im_livechat.legacy.im_livechat.model.WebsiteLivechatMessage',function(require){
"usestrict";

varAbstractMessage=require('im_livechat.legacy.mail.model.AbstractMessage');

/**
 *Thisisamessagethatishandledbyim_livechat,withoutmakinguseofthe
 *mail.Manager.Thepurposeofthisistomakeim_livechatcompatiblewith
 *mail.widget.Thread.
 *
 *@seeim_livechat.legacy.mail.model.AbstractMessageformoreinformation.
 */
varWebsiteLivechatMessage=AbstractMessage.extend({

    /**
     *@param{im_livechat.legacy.im_livechat.im_livechat.LivechatButton}parent
     *@param{Object}data
     *@param{Object}options
     *@param{string}options.default_username
     *@param{string}options.serverURL
     */
    init:function(parent,data,options){
        this._super.apply(this,arguments);

        this._defaultUsername=options.default_username;
        this._serverURL=options.serverURL;
    },

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *Gettherelativeurloftheavatartodisplaynexttothemessage
     *
     *@override
     *@return{string}
     */
    getAvatarSource:function(){
        varsource=this._serverURL;
        if(this.hasAuthor()){
            source+='/web/partner_image/'+this.getAuthorID();
        }else{
            source+='/mail/static/src/img/smiley/avatar.jpg';
        }
        returnsource;
    },
    /**
     *Getthetexttodisplayfortheauthorofthemessage
     *
     *Ruleofprecedenceforthedisplayedauthor::
     *
     *     authorname>defaultusernane
     *
     *@override
     *@return{string}
     */
    getDisplayedAuthor:function(){
        returnthis._super.apply(this,arguments)||this._defaultUsername;
    },

});

returnWebsiteLivechatMessage;

});

flectra.define('im_livechat.legacy.im_livechat.WebsiteLivechatWindow',function(require){
"usestrict";

varAbstractThreadWindow=require('im_livechat.legacy.mail.AbstractThreadWindow');

/**
 *Thisisthewidgetthatrepresentwindowsoflivechatinthefrontend.
 *
 *@seeim_livechat.legacy.mail.AbstractThreadWindowformoreinformation
 */
varLivechatWindow=AbstractThreadWindow.extend({
    events:_.extend(AbstractThreadWindow.prototype.events,{
        'input.o_composer_text_field':'_onInput',
    }),
    /**
     *@override
     *@param{im_livechat.legacy.im_livechat.im_livechat:LivechatButton}parent
     *@param{im_livechat.legacy.im_livechat.model.WebsiteLivechat}thread
     *@param{Object}[options={}]
     *@param{string}[options.headerBackgroundColor]
     *@param{string}[options.titleColor]
     */
    init(parent,thread,options={}){
        this._super.apply(this,arguments);
        this._thread=thread;
    },
    /**
     *@override
     *@return{Promise}
     */
    asyncstart(){
        awaitthis._super(...arguments);
        if(this.options.headerBackgroundColor){
            this.$('.o_thread_window_header').css('background-color',this.options.headerBackgroundColor);
        }
        if(this.options.titleColor){
            this.$('.o_thread_window_header').css('color',this.options.titleColor);
        }
    },


    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *@override
     */
    close:function(){
        this.trigger_up('close_chat_window');
    },
    /**
     *Replacethethreadcontentwithprovidednewcontent
     *
     *@param{$.Element}$element
     */
    replaceContentWith:function($element){
        $element.replace(this._threadWidget.$el);
    },
    /**
     *Warntheparentwidget(LivechatButton)
     *
     *@override
     *@param{boolean}folded
     */
    toggleFold:function(){
        this._super.apply(this,arguments);
        this.trigger_up('save_chat_window');
        this.updateVisualFoldState();
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *@override
     *@private
     *@param{Object}messageData
     */
    _postMessage:function(messageData){
        this.trigger_up('post_message_chat_window',{messageData:messageData});
        this._super.apply(this,arguments);
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *Calledwhentheinputinthecomposerchanges
     *
     *@private
     */
    _onInput:function(){
        if(this.hasThread()&&this._thread.hasTypingNotification()){
            varisTyping=this.$input.val().length>0;
            this._thread.setMyselfTyping({typing:isTyping});
        }
    },
});

returnLivechatWindow;

});

flectra.define('im_livechat.legacy.mail.model.AbstractThread',function(require){
"usestrict";

varClass=require('web.Class');
varMixins=require('web.mixins');

/**
 *Abstractthreadisthesuperclassofallthreads,eitherbackendthreads
 *(whicharecompatiblewithmailservice)orwebsitelivechats.
 *
 *Abstractthreadscontainabstractmessages
 */
varAbstractThread=Class.extend(Mixins.EventDispatcherMixin,{
    /**
     *@param{Object}params
     *@param{Object}params.data
     *@param{integer|string}params.data.idtheIDofthisthread
     *@param{string}params.data.namethenameofthisthread
     *@param{string}[params.data.status='']thestatusofthisthread
     *@param{Object}params.parentObjectwiththeevent-dispatchermixin
     *  (@see{web.mixins.EventDispatcherMixin})
     */
    init:function(params){
        Mixins.EventDispatcherMixin.init.call(this,arguments);
        this.setParent(params.parent);

        this._folded=false;//threadsareunfoldedbydefault
        this._id=params.data.id;
        this._name=params.data.name;
        this._status=params.data.status||'';
        this._unreadCounter=0;//amountofmessagesnotyetbeenread
    },

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *Addamessagetothisthread.
     *
     *@param{im_livechat.legacy.mail.model.AbstractMessage}message
     */
    addMessage:function(message){
        this._addMessage.apply(this,arguments);
        this.trigger('message_added',message);
    },
    /**
     *Updatesthefoldedstateofthethread
     *
     *@param{boolean}folded
     */
    fold:function(folded){
        this._folded=folded;
    },
    /**
     *GettheIDofthisthread
     *
     *@returns{integer|string}
     */
    getID:function(){
        returnthis._id;
    },
    /**
     *@abstract
     *@returns{im_livechat.legacy.mail.model.AbstractMessage[]}
     */
    getMessages:function(){},
    /**
     *Getthenameofthisthread.Ifthenameofthethreadhasbeencreated
     *bytheuserfromaninput,itmaybeescaped.
     *
     *@returns{string}
     */
    getName:function(){
        returnthis._name;
    },
    /**
     *Getthestatusofthethread(e.g.'online','offline',etc.)
     *
     *@returns{string}
     */
    getStatus:function(){
        returnthis._status;
    },
    /**
     *Returnsthetitletodisplayinthreadwindow'sheaders.
     *
     *@returns{string}thenameofthethreadbydefault(see@getName)
     */
    getTitle:function(){
        returnthis.getName();
    },
    getType:function(){},
    /**
     *@returns{integer}
     */
    getUnreadCounter:function(){
        returnthis._unreadCounter;
    },
    /**
     *@returns{boolean}
     */
    hasMessages:function(){
        return!_.isEmpty(this.getMessages());
    },
    /**
     *Stateswhetherthisthreadiscompatiblewiththe'seen'feature.
     *Bydefault,threadsdonothavethsifeatureactive.
     *@see{im_livechat.legacy.mail.model.ThreadSeenMixin}toenablethisfeatureonathread.
     *
     *@returns{boolean}
     */
    hasSeenFeature:function(){
        returnfalse;
    },
    /**
     *Stateswhetherthisthreadisfoldedornot.
     *
     *@return{boolean}
     */
    isFolded:function(){
        returnthis._folded;
    },
    /**
     *Markthethreadasread,whichresetstheunreadcounterto0.Thisis
     *onlyperformediftheunreadcounterisnot0.
     *
     *@returns{Promise}
     */
    markAsRead:function(){
        if(this._unreadCounter>0){
            returnthis._markAsRead();
        }
        returnPromise.resolve();
    },
    /**
     *Postamessageonthisthread
     *
     *@returns{Promise}resolvedwiththemessageobjecttobesenttothe
     *  server
     */
    postMessage:function(){
        returnthis._postMessage.apply(this,arguments)
                                .then(this.trigger.bind(this,'message_posted'));
    },
    /**
     *Resetstheunreadcounterofthisthreadto0.
     */
    resetUnreadCounter:function(){
        this._unreadCounter=0;
        this._warnUpdatedUnreadCounter();
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *Addamessagetothisthread.
     *
     *@abstract
     *@private
     *@param{im_livechat.legacy.mail.model.AbstractMessage}message
     */
    _addMessage:function(message){},
    /**
     *Incrementstheunreadcounterofthisthreadby1unit.
     *
     *@private
     */
    _incrementUnreadCounter:function(){
        this._unreadCounter++;
    },
    /**
     *Markthethreadasread
     *
     *@private
     *@returns{Promise}
     */
    _markAsRead:function(){
        this.resetUnreadCounter();
        returnPromise.resolve();
    },
    /**
     *Postamessageonthisthread
     *
     *@abstract
     *@private
     *@returns{Promise}resolvedwiththemessageobjecttobesenttothe
     *  server
     */
    _postMessage:function(){
        returnPromise.resolve();
    },
    /**
     *Warnviews(e.g.discussapp,threadwindow,etc.)toupdatevisually
     *theunreadcounterofthisthread.
     *
     *@abstract
     *@private
     */
    _warnUpdatedUnreadCounter:function(){},
});

returnAbstractThread;

});

flectra.define('im_livechat.legacy.mail.model.ThreadTypingMixin',function(require){
"usestrict";

varCCThrottleFunction=require('im_livechat.legacy.mail.model.CCThrottleFunction');
varTimer=require('im_livechat.legacy.mail.model.Timer');
varTimers=require('im_livechat.legacy.mail.model.Timers');

varcore=require('web.core');

var_t=core._t;

/**
 *Mixinforenablingthe"istyping..."notificationonatypeofthread.
 */
varThreadTypingMixin={
    //Defaultpartnerinfos
    _DEFAULT_TYPING_PARTNER_ID:'_default',
    _DEFAULT_TYPING_PARTNER_NAME:'Someone',

    /**
     *Initializetheinternaldatafortypingfeatureonthreads.
     *
     *Alsolistensonsomeinternaleventsofthethread:
     *
     *-'message_added':whenamessageisadded,removetheauthorinthe
     *    typingpartners.
     *-'message_posted':whenamessageisposted,lettheuserhavethe
     *    possibilitytoimmediatelynotifyifhetypessomethingrightaway,
     *    insteadofwaitingforathrottlebehaviour.
     */
    init:function(){
        //Storethelast"myselftyping"statusthathasbeensenttothe
        //server.Thisisusefulinordertonotnotifythesametyping
        //statusmultipletimes.
        this._lastNotifiedMyselfTyping=false;

        //Timerofcurrentuserthatistypingaverylongtext.Whenthe
        //receiversdonotreceiveanytypingnotificationforalongtime,
        //theyassumethattherelatedpartnerisnolongertyping
        //something(e.g.theyhaveclosedthebrowsertab).
        //Thisisatimertoletothersknowthatwearestilltyping
        //something,sothattheydonotassumewestoppedtyping
        //something.
        this._myselfLongTypingTimer=newTimer({
            duration:50*1000,
            onTimeout:this._onMyselfLongTypingTimeout.bind(this),
        });

        //Timerofcurrentuserthatwascurrentlytypingsomething,but
        //thereisnochangeontheinputforseveraltime.Thisisused
        //inordertoautomaticallynotifyotherusersthatwehavestopped
        //typingsomething,duetomakingnochangesonthecomposerfor
        //sometime.
        this._myselfTypingInactivityTimer=newTimer({
            duration:5*1000,
            onTimeout:this._onMyselfTypingInactivityTimeout.bind(this),
        });

        //Timersofuserscurrentlytypinginthethread.Thisisuseful
        //inordertoautomaticallyunregistertypinguserswhenwedonot
        //receiveanytypingnotificationafteralongtime.Timersare
        //internallyindexedbypartnerID.Thecurrentuserisignoredin
        //thislistoftimers.
        this._othersTypingTimers=newTimers({
            duration:60*1000,
            onTimeout:this._onOthersTypingTimeout.bind(this),
        });

        //Clearableandcancellablethrottledversionofthe
        //`doNotifyMyselfTyping`method.(basically`notifyMyselfTyping`
        //withslightpre-andpost-processing)
        //@see{mail.model.ResetableThrottleFunction}
        //Thisisusefulwhentheuserpostsamessageandtypessomething
        //else:hemustnotifyimmediatelythatheistypingsomething,
        //insteadofwaitingforthethrottleinternaltimer.
        this._throttleNotifyMyselfTyping=CCThrottleFunction({
            duration:2.5*1000,
            func:this._onNotifyMyselfTyping.bind(this),
        });

        //Thisisusedtotracktheorderofregisteredpartnerstyping
        //something,inordertodisplaytheoldesttypingpartners.
        this._typingPartnerIDs=[];

        this.on('message_added',this,this._onTypingMessageAdded);
        this.on('message_posted',this,this._onTypingMessagePosted);
    },

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *Getthetexttodisplaywhensomepartnersaretypingsomethingonthe
     *thread:
     *
     *-singletypingpartner:
     *
     *  Aistyping...
     *
     *-twotypingpartners:
     *
     *  AandBaretyping...
     *
     *-threeormoretypingpartners:
     *
     *  A,Bandmorearetyping...
     *
     *Thechoiceofthemembersnamefordisplayisnotrandom:itdisplays
     *theuserthathavebeentypingforthelongesttime.Also,thisfunction
     *ishard-codedtodisplayatmost2partners.Thislimitationcomesfrom
     *howtranslationworksinFlectra,forwhichunevaluatedstringcannotbe
     *translated.
     *
     *@returns{string}listofmembersthataretypingsomethingonthethread
     *  (excludingthecurrentuser).
     */
    getTypingMembersToText:function(){
        vartypingPartnerIDs=this._typingPartnerIDs;
        vartypingMembers=_.filter(this._members,function(member){
            return_.contains(typingPartnerIDs,member.id);
        });
        varsortedTypingMembers=_.sortBy(typingMembers,function(member){
            return_.indexOf(typingPartnerIDs,member.id);
        });
        vardisplayableTypingMembers=sortedTypingMembers.slice(0,3);

        if(displayableTypingMembers.length===0){
            return'';
        }elseif(displayableTypingMembers.length===1){
            return_.str.sprintf(_t("%sistyping..."),displayableTypingMembers[0].name);
        }elseif(displayableTypingMembers.length===2){
            return_.str.sprintf(_t("%sand%saretyping..."),
                                    displayableTypingMembers[0].name,
                                    displayableTypingMembers[1].name);
        }else{
            return_.str.sprintf(_t("%s,%sandmorearetyping..."),
                                    displayableTypingMembers[0].name,
                                    displayableTypingMembers[1].name);
        }
    },
    /**
     *Threadswiththismixinhavethetypingnotificationfeature
     *
     *@returns{boolean}
     */
    hasTypingNotification:function(){
        returntrue;
    },
    /**
     *Tellsifsomeoneotherthancurrentuseristypingsomethingonthis
     *thread.
     *
     *@returns{boolean}
     */
    isSomeoneTyping:function(){
        return!(_.isEmpty(this._typingPartnerIDs));
    },
    /**
     *Registersomeonethatiscurrentlytypingsomethinginthisthread.
     *Ifthisisthecurrentuserthatistypingsomething,don'tdoanything
     *(wedonothavetodisplayanything)
     *
     *Thismethodisignoredifwetrytoregisterthecurrentuser.
     *
     *@param{Object}params
     *@param{integer}params.partnerIDIDofthepartnerlinkedtotheuser
     *  currentlytypingsomethingonthethread.
     */
    registerTyping:function(params){
        if(this._isTypingMyselfInfo(params)){
            return;
        }
        varpartnerID=params.partnerID;
        this._othersTypingTimers.registerTimer({
            timeoutCallbackArguments:[partnerID],
            timerID:partnerID,
        });
        if(_.contains(this._typingPartnerIDs,partnerID)){
            return;
        }
        this._typingPartnerIDs.push(partnerID);
        this._warnUpdatedTypingPartners();
    },
    /**
     *Thismethodmustbecalledwhentheuserstartsorstopstypingsomething
     *inthecomposerofthethread.
     *
     *@param{Object}params
     *@param{boolean}params.typingtellwhetherthecurrentistypingornot.
     */
    setMyselfTyping:function(params){
        vartyping=params.typing;
        if(this._lastNotifiedMyselfTyping===typing){
            this._throttleNotifyMyselfTyping.cancel();
        }else{
            this._throttleNotifyMyselfTyping(params);
        }

        if(typing){
            this._myselfTypingInactivityTimer.reset();
        }else{
            this._myselfTypingInactivityTimer.clear();
        }
    },
    /**
     *Unregistersomeonefromcurrentlytypingsomethinginthisthread.
     *
     *@param{Object}params
     *@param{integer}params.partnerIDIDofthepartnerrelatedtotheuser
     *  thatiscurrentlytypingsomething
     */
    unregisterTyping:function(params){
        varpartnerID=params.partnerID;
        this._othersTypingTimers.unregisterTimer({timerID:partnerID});
        if(!_.contains(this._typingPartnerIDs,partnerID)){
            return;
        }
        this._typingPartnerIDs=_.reject(this._typingPartnerIDs,function(id){
            returnid===partnerID;
        });
        this._warnUpdatedTypingPartners();
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *Tellswhethertheprovidedinformationonapartnerisrelatedtothe
     *currentuserornot.
     *
     *@abstract
     *@private
     *@param{Object}params
     *@param{integer}params.partnerIDofpartnertocheck
     */
    _isTypingMyselfInfo:function(params){
        returnfalse;
    },
    /**
     *Notifytotheserverthatthecurrentusereitherstartsorstopstyping
     *something.
     *
     *@abstract
     *@private
     *@param{Object}params
     *@param{boolean}params.typingwhetherwearetypingsomethingornot
     *@returns{Promise}resolvediftheserverisnotified,rejected
     *  otherwise
     */
    _notifyMyselfTyping:function(params){
        returnPromise.resolve();
    },
    /**
     *Warnviewsthatthelistofusersthatarecurrentlytypingonthis
     *threadhasbeenupdated.
     *
     *@abstract
     *@private
     */
    _warnUpdatedTypingPartners:function(){},

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *Calledwhencurrentuseristypingsomethingforalongtime.Inorder
     *tonotletotherusersassumethatwearenolongertypingsomething,we
     *mustnotifyagainthatwearetypingsomething.
     *
     *@private
     */
    _onMyselfLongTypingTimeout:function(){
        this._throttleNotifyMyselfTyping.clear();
        this._throttleNotifyMyselfTyping({typing:true});
    },
    /**
     *Calledwhencurrentuserhassomethingtypedinthecomposer,butis
     *inactiveforsometime.Inthiscase,heautomaticallynotifiesthathe
     *isnolongertypingsomething
     *
     *@private
     */
    _onMyselfTypingInactivityTimeout:function(){
        this._throttleNotifyMyselfTyping.clear();
        this._throttleNotifyMyselfTyping({typing:false});
    },
    /**
     *Calledbythrottledversionofnotifymyselftyping
     *
     *Notifytotheserverthatthecurrentusereitherstartsorstopstyping
     *something.Rememberlastnotifiedstufffromtheserver,andupdate
     *relatedtypingtimers.
     *
     *@private
     *@param{Object}params
     *@param{boolean}params.typingwhetherwearetypingsomethingornot.
     */
    _onNotifyMyselfTyping:function(params){
        vartyping=params.typing;
        this._lastNotifiedMyselfTyping=typing;
        this._notifyMyselfTyping(params);
        if(typing){
            this._myselfLongTypingTimer.reset();
        }else{
            this._myselfLongTypingTimer.clear();
        }
    },
    /**
     *Calledwhencurrentuserdonotreceiveatypingnotificationofsomeone
     *elsetypingforalongtime.Inthiscase,weassumethatthispersonis
     *nolongertypingsomething.
     *
     *@private
     *@param{integer}partnerIDpartnerIDofthepersonweassumeheisno
     *  longertypingsomething.
     */
    _onOthersTypingTimeout:function(partnerID){
        this.unregisterTyping({partnerID:partnerID});
    },
    /**
     *Calledwhenanewmessageisaddedtothethread
     *Onreceivingamessagefromatypingpartner,unregisterthispartner
     *fromtypingpartners(otherwise,itwillstilldisplayituntiltimeout).
     *
     *@private
     *@param{mail.model.AbstractMessage}message
     */
    _onTypingMessageAdded:function(message){
        varpartnerID=message.hasAuthor()?
                        message.getAuthorID():
                        this._DEFAULT_TYPING_PARTNER_ID;
        this.unregisterTyping({partnerID:partnerID});
    },
    /**
     *Calledwhencurrentuserhaspostedamessageonthisthread.
     *
     *Thecurrentuserreceivesthepossibilitytoimmediatelynotifythe
     *otherusersifheistypingsomethingelse.
     *
     *Refreshthecontextforthecurrentusertonotifythathestartsor
     *stopstypingsomething.Inotherwords,whenthisfunctioniscalledand
     *thenthecurrentusertypessomething,itimmediatelynotifiesthe
     *serverasifitisthefirsttimeheistypingsomething.
     *
     *@private
     */
    _onTypingMessagePosted:function(){
        this._lastNotifiedMyselfTyping=false;
        this._throttleNotifyMyselfTyping.clear();
        this._myselfLongTypingTimer.clear();
        this._myselfTypingInactivityTimer.clear();
    },
};

returnThreadTypingMixin;

});

flectra.define('im_livechat.legacy.mail.model.AbstractMessage',function(require){
"usestrict";

varmailUtils=require('mail.utils');

varClass=require('web.Class');
varcore=require('web.core');
varsession=require('web.session');
vartime=require('web.time');

var_t=core._t;

/**
 *ThisisanabstractclassformodelingmessagesinJS.
 *Thepurposeofthisinterfaceistomakeim_livechatcompatiblewith
 *mail.widget.Thread,asthiswidgetwasdesignedtoworkwithmessagesthat
 *areinstancesofmail.model.Messages.
 *
 *Ideally,im_livechatshouldalsohandlemail.model.Message,butthisisnot
 *feasibleforthemoment,asmail.model.Messagerequiresmail.Managertowork,
 *andthismoduleshouldnotleakoutsideofthebackend,hencetheuseof
 *mail.model.AbstractMessageasawork-around.
 */
varAbstractMessage=Class.extend({

    /**
     *@param{Widget}parent
     *@param{Object}data
     *@param{Array}[data.attachment_ids=[]]
     *@param{Array}[data.author_id]
     *@param{string}[data.body=""]
     *@param{string}[data.date]theserver-formatdatetimeofthemessage.
     *  Ifnotprovided,usecurrentdatetimeforthismessage.
     *@param{integer}data.id
     *@param{boolean}[data.is_discussion=false]
     *@param{boolean}[data.is_notification=false]
     *@param{string}[data.message_type=undefined]
     */
    init:function(parent,data){
        this._attachmentIDs=data.attachment_ids||[];
        this._body=data.body||"";
        //bydefault:currentdatetime
        this._date=data.date?moment(time.str_to_datetime(data.date)):moment();
        this._id=data.id;
        this._isDiscussion=data.is_discussion;
        this._isNotification=data.is_notification;
        this._serverAuthorID=data.author_id;
        this._type=data.message_type||undefined;

        this._processAttachmentURL();
        this._attachmentIDs.forEach(function(attachment){
            attachment.filename=attachment.filename||attachment.name||_t("unnamed");
        });
    },

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *Getthelistoffilesattachedtothismessage.
     *Notethatattachmentsarestoredwithserver-format
     *
     *@return{Object[]}
     */
    getAttachments:function(){
        returnthis._attachmentIDs;
    },
    /**
     *GettheserverID(number)oftheauthorofthismessage
     *Iftherearenoauthor,return-1;
     *
     *@return{integer}
     */
    getAuthorID:function(){
        if(!this.hasAuthor()){
            return-1;
        }
        returnthis._serverAuthorID[0];
    },
    /**
     *Threadsdonothaveanimstatusbydefault
     *
     *@return{undefined}
     */
    getAuthorImStatus:function(){
        returnundefined;
    },
    /**
     *Gettherelativeurloftheavatartodisplaynexttothemessage
     *
     *@abstract
     *@return{string}
     */
    getAvatarSource:function(){
        if(this.hasAuthor()){
            return'/web/image/res.partner/'+this.getAuthorID()+'/image_128';
        }
    },
    /**
     *Getthebodycontentofthismessage
     *
     *@return{string}
     */
    getBody:function(){
        returnthis._body;
    },
    /**
     *@return{moment}
     */
    getDate:function(){
        returnthis._date;
    },
    /**
     *Getthedatedayofthismessage
     *
     *@return{string}
     */
    getDateDay:function(){
        vardate=this.getDate().format('YYYY-MM-DD');
        if(date===moment().format('YYYY-MM-DD')){
            return_t("Today");
        }elseif(date===moment().subtract(1,'days').format('YYYY-MM-DD')){
            return_t("Yesterday");
        }
        returnthis.getDate().format('LL');
    },
    /**
     *Getthenameoftheauthor,ifthereisanauthorofthismessage
     *Iftherearenoauthorofthismessage,returns'null'
     *
     *@return{string}
     */
    getDisplayedAuthor:function(){
        returnthis.hasAuthor()?this._getAuthorName():null;
    },
    /**
     *GettheserverID(number)ofthismessage
     *
     *@override
     *@return{integer}
     */
    getID:function(){
        returnthis._id;
    },
    /**
     *Getthelistofimagesattachedtothismessage.
     *Notethatattachmentsarestoredwithserver-format
     *
     *@return{Object[]}
     */
    getImageAttachments:function(){
        return_.filter(this.getAttachments(),function(attachment){
            returnattachment.mimetype&&attachment.mimetype.split('/')[0]==='image';
        });
    },
    /**
     *Getthelistofnon-imagesattachedtothismessage.
     *Notethatattachmentsarestoredwithserver-format
     *
     *@return{Object[]}
     */
    getNonImageAttachments:function(){
        return_.difference(this.getAttachments(),this.getImageAttachments());
    },
    /**
     *Getstheclasstouseasthenotificationicon.
     *
     *@returns{string}
     */
    getNotificationIcon(){
        if(!this.hasNotificationsError()){
            return'fafa-envelope-o';
        }
        return'fafa-envelope';
    },
    /**
     *Getsthelistofnotificationsofthismessage,innospecificorder.
     *Bydefaultmessagesdonothavenotifications.
     *
     *@returns{Object[]}
     */
    getNotifications(){
        return[];
    },
    /**
     *Getsthetexttodisplaynexttothenotificationicon.
     *
     *@returns{string}
     */
    getNotificationText(){
        return'';
    },
    /**
     *Getthetimeelapsedbetweensentmessageandnow
     *
     *@return{string}
     */
    getTimeElapsed:function(){
        returnmailUtils.timeFromNow(this.getDate());
    },
    /**
     *Getthetypeofmessage(e.g.'comment','email','notification',...)
     *Bydefault,messagesareoftype'undefined'
     *
     *@override
     *@return{string|undefined}
     */
    getType:function(){
        returnthis._type;
    },
    /**
     *Statewhetherthismessagecontainssomeattachments.
     *
     *@override
     *@return{boolean}
     */
    hasAttachments:function(){
        returnthis.getAttachments().length>0;
    },
    /**
     *Statewhetherthismessagehasanauthor
     *
     *@return{boolean}
     */
    hasAuthor:function(){
        return!!(this._serverAuthorID&&this._serverAuthorID[0]);
    },
    /**
     *Statewhetherthismessagehasanemailofitssender.
     *Bydefault,messagesdonothaveanyemailofitssender.
     *
     *@return{string}
     */
    hasEmailFrom:function(){
        returnfalse;
    },
    /**
     *Statewhetherthisimagecontainsimagesattachments
     *
     *@return{boolean}
     */
    hasImageAttachments:function(){
        return_.some(this.getAttachments(),function(attachment){
            returnattachment.mimetype&&attachment.mimetype.split('/')[0]==='image';
        });
    },
    /**
     *Statewhetherthisimagecontainsnon-imagesattachments
     *
     *@return{boolean}
     */
    hasNonImageAttachments:function(){
        return_.some(this.getAttachments(),function(attachment){
            return!(attachment.mimetype&&attachment.mimetype.split('/')[0]==='image');
        });
    },
    /**
     *Stateswhetherthismessagehassomenotifications.
     *
     *@returns{boolean}
     */
    hasNotifications(){
        returnthis.getNotifications().length>0;
    },
    /**
     *Stateswhetherthismessagehasnotificationsthatareinerror.
     *
     *@returns{boolean}
     */
    hasNotificationsError(){
        returnthis.getNotifications().some(notif=>
            notif.notification_status==='exception'||
            notif.notification_status==='bounce'
        );
    },
    /**
     *Statewhetherthismessageoriginatesfromachannel.
     *Bydefault,messagesdonotoriginatefromachannel.
     *
     *@override
     *@return{boolean}
     */
    originatesFromChannel:function(){
        returnfalse;
    },
    /**
     *Statewhetherthismessagehasasubject
     *Bydefault,messagesdonothaveanysubject.
     *
     *@return{boolean}
     */
    hasSubject:function(){
        returnfalse;
    },
    /**
     *Statewhetherthismessageisempty
     *
     *@return{boolean}
     */
    isEmpty:function(){
        return!this.hasTrackingValues()&&
        !this.hasAttachments()&&
        !this.getBody();
    },
    /**
     *Bydefault,messagesdonothaveanysubtypedescription
     *
     *@return{boolean}
     */
    hasSubtypeDescription:function(){
        returnfalse;
    },
    /**
     *Statewhetherthismessagecontainssometrackingvalues
     *Bydefault,messagesdonothaveanytrackingvalues.
     *
     *@return{boolean}
     */
    hasTrackingValues:function(){
        returnfalse;
    },
    /**
     *Statewhetherthismessageisadiscussion
     *
     *@return{boolean}
     */
    isDiscussion:function(){
        returnthis._isDiscussion;
    },
    /**
     *Statewhetherthismessageislinkedtoadocumentthread
     *Bydefault,messagesarenotlinkedtoadocumentthread.
     *
     *@return{boolean}
     */
    isLinkedToDocumentThread:function(){
        returnfalse;
    },
    /**
     *Statewhetherthismessageisneedaction
     *Bydefault,messagesarenotneedaction.
     *
     *@return{boolean}
     */
    isNeedaction:function(){
        returnfalse;
    },
    /**
     *Statewhetherthismessageisanote(i.e.amessagefrom"Lognote")
     *
     *@return{boolean}
     */
    isNote:function(){
        returnthis._isNote;
    },
    /**
     *Statewhetherthismessageisanotification
     *
     *Usernotificationsaredefinedaseither
     *     -notes
     *     -pushedtouserInboxoremailthroughclassicnotificationprocess
     *     -notlinkedtoanydocument,meaningmodelandres_idarevoid
     *
     *Thisisusefulinordertodisplaywhitebackgroundforuser
     *notificationsinchatter
     *
     *@returns{boolean}
     */
    isNotification:function(){
        returnthis._isNotification;
    },
    /**
     *Statewhetherthismessageisstarred
     *Bydefault,messagesarenotstarred.
     *
     *@return{boolean}
     */
    isStarred:function(){
        returnfalse;
    },
    /**
     *Statewhetherthismessageisasystemnotification
     *Bydefault,messagesarenotsystemnotifications
     *
     *@override
     *@return{boolean}
     */
    isSystemNotification:function(){
        returnfalse;
    },
    /**
     *Stateswhetherthecurrentmessageneedsmoderationingeneral.
     *Bydefault,messagesdonotrequireanymoderation.
     *
     *@returns{boolean}
     */
    needsModeration:function(){
        returnfalse;
    },
    /**
     *@params{integer[]}attachmentIDs
     */
    removeAttachments:function(attachmentIDs){
        this._attachmentIDs=_.reject(this._attachmentIDs,function(attachment){
            return_.contains(attachmentIDs,attachment.id);
        });
    },
    /**
     *Statewhetherthismessageshouldredirecttotheauthor
     *whenclickingontheauthorofthismessage.
     *
     *Donotredirectonauthorclickedofself-postedmessages.
     *
     *@return{boolean}
     */
    shouldRedirectToAuthor:function(){
        return!this._isMyselfAuthor();
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *Getthenameoftheauthorofthismessage.
     *Iftherearenoauthorofthismessages,returns''(emptystring).
     *
     *@private
     *@returns{string}
     */
    _getAuthorName:function(){
        if(!this.hasAuthor()){
            return"";
        }
        returnthis._serverAuthorID[1];
    },
    /**
     *Statewhetherthecurrentuseristheauthorofthismessage
     *
     *@private
     *@return{boolean}
     */
    _isMyselfAuthor:function(){
        returnthis.hasAuthor()&&(this.getAuthorID()===session.partner_id);
    },
    /**
     *Computeurlofattachmentsofthismessage
     *
     *@private
     */
    _processAttachmentURL:function(){
        _.each(this.getAttachments(),function(attachment){
            attachment.url='/web/content/'+attachment.id+'?download=true';
        });
    },

});

returnAbstractMessage;

});

flectra.define('im_livechat.legacy.mail.AbstractThreadWindow',function(require){
"usestrict";

varThreadWidget=require('im_livechat.legacy.mail.widget.Thread');

varconfig=require('web.config');
varcore=require('web.core');
varWidget=require('web.Widget');

varQWeb=core.qweb;
var_t=core._t;

/**
 *Thisisanabstractwidgetforrenderingthreadwindows.
 *AbstractThreadWindowiskeptforlegacyreasons.
 */
varAbstractThreadWindow=Widget.extend({
    template:'im_livechat.legacy.mail.AbstractThreadWindow',
    custom_events:{
        document_viewer_closed:'_onDocumentViewerClose',
    },
    events:{
        'click.o_thread_window_close':'_onClickClose',
        'click.o_thread_window_title':'_onClickFold',
        'click.o_composer_text_field':'_onComposerClick',
        'click.o_mail_thread':'_onThreadWindowClicked',
        'keydown.o_composer_text_field':'_onKeydown',
        'keypress.o_composer_text_field':'_onKeypress',
    },
    FOLD_ANIMATION_DURATION:200,//durationinmsfor(un)foldtransition
    HEIGHT_OPEN:'400px',//heightinpxofthreadwindowwhenopen
    HEIGHT_FOLDED:'34px',//height,inpx,ofthreadwindowwhenfolded
    /**
     *Childrenofthisclassmustmakeuseof`thread`,whichisanobjectthat
     *representthethreadthatislinkedtothisthreadwindow.
     *
     *Ifnothreadisprovided,thiswillrepresentthe"blank"threadwindow.
     *
     *@abstract
     *@param{Widget}parent
     *@param{im_livechat.legacy.mail.model.AbstractThread}[thread=null]thethreadthatthis
     *  threadwindowislinkedto.Ifnotset,itisthe"blank"thread
     *  window.
     *@param{Object}[options={}]
     *@param{im_livechat.legacy.mail.model.AbstractThread}[options.thread]
     */
    init:function(parent,thread,options){
        this._super(parent);

        this.options=_.defaults(options||{},{
            autofocus:true,
            displayStars:true,
            displayReplyIcons:false,
            displayNotificationIcons:false,
            placeholder:_t("Saysomething"),
        });

        this._hidden=false;
        this._thread=thread||null;

        this._debouncedOnScroll=_.debounce(this._onScroll.bind(this),100);

        if(!this.hasThread()){
            //internalfoldstateofthreadwindowwithoutanythread
            this._folded=false;
        }
    },
    start:function(){
        varself=this;
        this.$input=this.$('.o_composer_text_field');
        this.$header=this.$('.o_thread_window_header');
        varoptions={
            displayMarkAsRead:false,
            displayStars:this.options.displayStars,
        };
        if(this._thread&&this._thread._type==='document_thread'){
            options.displayDocumentLinks=false;
        }
        this._threadWidget=newThreadWidget(this,options);

        //animatethe(un)foldingofthreadwindows
        this.$el.css({transition:'height'+this.FOLD_ANIMATION_DURATION+'mslinear'});
        if(this.isFolded()){
            this.$el.css('height',this.HEIGHT_FOLDED);
        }elseif(this.options.autofocus){
            this._focusInput();
        }
        if(!config.device.isMobile){
            varmargin_dir=_t.database.parameters.direction==="rtl"?"margin-left":"margin-right";
            this.$el.css(margin_dir,$.position.scrollbarWidth());
        }
        vardef=this._threadWidget.replace(this.$('.o_thread_window_content')).then(function(){
            self._threadWidget.$el.on('scroll',self,self._debouncedOnScroll);
        });
        returnPromise.all([this._super(),def]);
    },
    /**
     *@override
     */
    do_hide:function(){
        this._hidden=true;
        this._super.apply(this,arguments);
    },
    /**
     *@override
     */
    do_show:function(){
        this._hidden=false;
        this._super.apply(this,arguments);
    },
    /**
     *@override
     */
    do_toggle:function(display){
        this._hidden=_.isBoolean(display)?!display:!this._hidden;
        this._super.apply(this,arguments);
    },

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *Closethiswindow
     *
     *@abstract
     */
    close:function(){},
    /**
     *GettheIDofthethreadwindow,whichisequivalenttotheIDofthe
     *threadrelatedtothiswindow
     *
     *@returns{integer|string}
     */
    getID:function(){
        returnthis._getThreadID();
    },
    /**
     *@returns{mail.model.Thread|undefined}
     */
    getThread:function(){
        if(!this.hasThread()){
            returnundefined;
        }
        returnthis._thread;
    },
    /**
     *Getthestatusofthethread,suchastheimstatusofaDMchat
     *('online','offline',etc.).Ifthiswindowhasnothread,returns
     *`undefined`.
     *
     *@returns{string|undefined}
     */
    getThreadStatus:function(){
        if(!this.hasThread()){
            returnundefined;
        }
        returnthis._thread.getStatus();
    },
    /**
     *Getthetitleofthethreadwindow,whichusuallycontainsthenameof
     *thethread.
     *
     *@returns{string}
     */
    getTitle:function(){
        if(!this.hasThread()){
            return_t("Undefined");
        }
        returnthis._thread.getTitle();
    },
    /**
     *Gettheunreadcounteroftherelatedthread.Iftherearenothread
     *linkedtothiswindow,returns0.
     *
     *@returns{integer}
     */
    getUnreadCounter:function(){
        if(!this.hasThread()){
            return0;
        }
        returnthis._thread.getUnreadCounter();
    },
    /**
     *Stateswhetherthisthreadwindowisrelatedtoathreadornot.
     *
     *Thisisusefulinordertoprovidespecificbehaviourforthreadwindows
     *withoutanythread,e.g.letthemopenathreadfromthis"blank"thread
     *window.
     *
     *@returns{boolean}
     */
    hasThread:function(){
        return!!this._thread;
    },
    /**
     *Tellswhetherthebottomofthethreadinthethreadwindowisvisible
     *ornot.
     *
     *@returns{boolean}
     */
    isAtBottom:function(){
        returnthis._threadWidget.isAtBottom();
    },
    /**
     *Statewhethertherelatedthreadisfoldedornot.Ifthereareno
     *threadrelatedtothiswindow,itmeansthisisthe"blank"thread
     *window,thereforeweusetheinternalfoldedstate.
     *
     *@returns{boolean}
     */
    isFolded:function(){
        if(!this.hasThread()){
            returnthis._folded;
        }
        returnthis._thread.isFolded();
    },
    /**
     *Stateswhetherthecurrentenvironmentisinmobileornot.Thisis
     *usefulinordertocustomizethetemplaterenderingformobileview.
     *
     *@returns{boolean}
     */
    isMobile:function(){
        returnconfig.device.isMobile;
    },
    /**
     *Stateswhetherthethreadwindowishiddenornot.
     *
     *@returns{boolean}
     */
    isHidden:function(){
        returnthis._hidden;
    },
    /**
     *Stateswhethertheinputofthethreadwindowshouldbedisplayedornot.
     *Bydefault,anythreadwindowwithathreadneedsacomposer.
     *
     *@returns{boolean}
     */
    needsComposer:function(){
        returnthis.hasThread();
    },
    /**
     *Renderthethreadwindow
     */
    render:function(){
        this.renderHeader();
        if(this.hasThread()){
            this._threadWidget.render(this._thread,{displayLoadMore:false});
        }
    },
    /**
     *Rendertheheaderofthisthreadwindow.
     *Thisisusefulwhensomeinformationontheheaderhavebeupdatedsuch
     *asthestatusorthetitleofthethreadthathavechanged.
     *
     *@private
     */
    renderHeader:function(){
        varoptions=this._getHeaderRenderingOptions();
        this.$header.html(
            QWeb.render('im_livechat.legacy.mail.AbstractThreadWindow.HeaderContent',options));
    },
    /**
     *Scrolltothebottomofthethreadinthethreadwindow
     */
    scrollToBottom:function(){
        this._threadWidget.scrollToBottom();
    },
    /**
     *Togglethefoldstateofthisthreadwindow.Alsoupdatethefoldstate
     *ofthethreadmodel.Ifthebooleanparameter`folded`isprovided,it
     *folds/unfoldsthewindowwhenitisset/unset.
     *
     *@param{boolean}[folded]ifnotaboolean,togglethefoldstate.
     *  Otherwise,fold/unfoldthewindowifset/unset.
     */
    toggleFold:function(folded){
        if(!_.isBoolean(folded)){
            folded=!this.isFolded();
        }
        this._updateThreadFoldState(folded);
    },
    /**
     *Updatethevisualstateofthewindowsothatitmatchedtheinternal
     *foldstate.Thisisusefulincasetherelatedthreadhasitsfoldstate
     *thathasbeenchanged.
     */
    updateVisualFoldState:function(){
        if(!this.isFolded()){
            this._threadWidget.scrollToBottom();
            if(this.options.autofocus){
                this._focusInput();
            }
        }
        varheight=this.isFolded()?this.HEIGHT_FOLDED:this.HEIGHT_OPEN;
        this.$el.css({height:height});
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *Setthefocusonthecomposerofthethreadwindow.Thisoperationis
     *ignoredinmobilecontext.
     *
     *@private
     *Setthefocusontheinputofthewindow
     */
    _focusInput:function(){
        if(
            config.device.touch&&
            config.device.size_class<=config.device.SIZES.SM
        ){
            return;
        }
        this.$input.focus();
    },
    /**
     *Returnstheoptionsusedbytherenderingofthewindow'sheader
     *
     *@private
     *@returns{Object}
     */
    _getHeaderRenderingOptions:function(){
        return{
            status:this.getThreadStatus(),
            thread:this.getThread(),
            title:this.getTitle(),
            unreadCounter:this.getUnreadCounter(),
            widget:this,
        };
    },
    /**
     *GettheIDoftherelatedthread.
     *Ifthiswindowisnotrelatedtoathread,itmeansthisisthe"blank"
     *threadwindow,thereforeitreturns"_blank"asitsID.
     *
     *@private
     *@returns{integer|string}thethreadID,or'_blank'forthewindowthat
     *  isnotrelatedtoanythread.
     */
    _getThreadID:function(){
        if(!this.hasThread()){
            return'_blank';
        }
        returnthis._thread.getID();
    },
    /**
     *Tellswhetherthereisfocusonthisthread.Notethatathreadthathas
     *thefocusmeanstheinputhasfocus.
     *
     *@private
     *@returns{boolean}
     */
    _hasFocus:function(){
        returnthis.$input.is(':focus');
    },
    /**
     *Postamessageonthisthreadwindow,andauto-scrolltothebottomof
     *thethread.
     *
     *@private
     *@param{Object}messageData
     */
    _postMessage:function(messageData){
        varself=this;
        if(!this.hasThread()){
            return;
        }
        this._thread.postMessage(messageData)
            .then(function(){
                self._threadWidget.scrollToBottom();
            });
    },
    /**
     *Updatethefoldstateofthethread.
     *
     *Thisfunctioniscalledwhentogglingthefoldstateofthiswindow.
     *Ifthereisnothreadlinkedtothiswindow,itmeansthisisthe
     *"blank"threadwindow,thereforeweusetheinternalstate'folded'
     *
     *@private
     *@param{boolean}folded
     */
    _updateThreadFoldState:function(folded){
        if(this.hasThread()){
            this._thread.fold(folded);
        }else{
            this._folded=folded;
            this.updateVisualFoldState();
        }
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *Closethethreadwindow.
     *Markthethreadasreadifthethreadwindowwasopen.
     *
     *@private
     *@param{MouseEvent}ev
     */
    _onClickClose:function(ev){
        ev.stopPropagation();
        ev.preventDefault();
        if(
            this.hasThread()&&
            this._thread.getUnreadCounter()>0&&
            !this.isFolded()
        ){
            this._thread.markAsRead();
        }
        this.close();
    },
    /**
     *Fold/unfoldthethreadwindow.
     *Alsomarkthethreadasread.
     *
     *@private
     */
    _onClickFold:function(){
        if(!config.device.isMobile){
            this.toggleFold();
        }
    },
    /**
     *Calledwhenthecomposerisclicked->forcesfocusoninputevenif
     *jquery'sblockUIisenabled.
     *
     *@private
     *@param{Event}ev
     */
    _onComposerClick:function(ev){
        if($(ev.target).closest('a,button').length){
            return;
        }
        this._focusInput();
    },
    /**
     *@private
     */
    _onDocumentViewerClose:function(){
        this._focusInput();
    },
    /**
     *Calledwhentypingsomethingonthecomposerofthisthreadwindow.
     *
     *@private
     *@param{KeyboardEvent}ev
     */
    _onKeydown:function(ev){
        ev.stopPropagation();//topreventjquery'sblockUItocancelevent
        //ENTERkey(avoidrequiringjqueryuiforexternallivechat)
        if(ev.which===13){
            varcontent=_.str.trim(this.$input.val());
            varmessageData={
                content:content,
                attachment_ids:[],
                partner_ids:[],
            };
            this.$input.val('');
            if(content){
                this._postMessage(messageData);
            }
        }
    },
    /**
     *@private
     *@param{KeyboardEvent}ev
     */
    _onKeypress:function(ev){
        ev.stopPropagation();//topreventjquery'sblockUItocancelevent
    },
    /**
     *@private
     */
    _onScroll:function(){
        if(this.hasThread()&&this.isAtBottom()){
            this._thread.markAsRead();
        }
    },
    /**
     *Whenathreadwindowisclickedon,wewanttogivethefocustothemain
     *input.Anexceptionismadewhentheuserisselectingsomething.
     *
     *@private
     */
    _onThreadWindowClicked:function(){
        varselectObj=window.getSelection();
        if(selectObj.anchorOffset===selectObj.focusOffset){
            this.$input.focus();
        }
    },
});

returnAbstractThreadWindow;

});

flectra.define('im_livechat.legacy.mail.model.CCThrottleFunctionObject',function(require){
"usestrict";

varClass=require('web.Class');

/**
 *Thisobjectmodelsthebehaviouroftheclearableandcancellable(CC)
 *throttleversionofaprovidedfunction.
 */
varCCThrottleFunctionObject=Class.extend({

    /**
     *@param{Object}params
     *@param{integer}params.durationdurationofthe'cooldown'phase,i.e.
     *  theminimumdurationbetweenthemostrecentfunctioncallthathas
     *  beenmadeandthefollowingfunctioncall.
     *@param{function}params.funcprovidedfunctionformakingtheCC
     *  throttledversion.
     */
    init:function(params){
        this._arguments=undefined;
        this._cooldownTimeout=undefined;
        this._duration=params.duration;
        this._func=params.func;
        this._shouldCallFunctionAfterCD=false;
    },

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *Cancelanybufferedfunctioncall,butkeepthecooldownphaserunning.
     */
    cancel:function(){
        this._arguments=undefined;
        this._shouldCallFunctionAfterCD=false;
    },
    /**
     *Cleartheinternalthrottletimer,sothatthefollowingfunctioncall
     *isimmediate.Forinstance,ifthereisacooldownstage,itisaborted.
     */
    clear:function(){
        if(this._cooldownTimeout){
            clearTimeout(this._cooldownTimeout);
            this._onCooldownTimeout();
        }
    },
    /**
     *Calledwhenthereisacalltothefunction.Thisfunctionisthrottled,
     *sothetimeitiscalleddependsonwhetherthe"cooldownstage"occurs
     *ornot:
     *
     *-nocooldownstage:functioniscalledimmediately,anditstarts
     *     thecooldownstagewhensuccessful.
     *-incooldownstage:functioniscalledwhenthecooldownstagehas
     *     endedfromtimeout.
     *
     *Notethatafterthecooldownstage,onlythelastattemptedfunction
     *callwillbeconsidered.
     */
    do:function(){
        this._arguments=Array.prototype.slice.call(arguments);
        if(this._cooldownTimeout===undefined){
            this._callFunction();
        }else{
            this._shouldCallFunctionAfterCD=true;
        }
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *Immediatelycallsthefunctionwithargumentsoflastbufferedfunction
     *call.Itinitiatesthecooldownstageafterthisfunctioncall.
     *
     *@private
     */
    _callFunction:function(){
        this._func.apply(null,this._arguments);
        this._cooldown();
    },
    /**
     *Calledwhenthefunctionhasbeensuccessfullycalled.Thefollowing
     *callstothefunctionwiththisobjectshouldsuffera"cooldownstage",
     *whichpreventsthefunctionfrombeingcalleduntilthisstagehasended.
     *
     *@private
     */
    _cooldown:function(){
        this.cancel();
        this._cooldownTimeout=setTimeout(
            this._onCooldownTimeout.bind(this),
            this._duration
        );
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *Calledwhenthecooldownstageendedfromtimeout.Callsthefunctionif
     *afunctioncallwasbuffered.
     *
     *@private
     */
    _onCooldownTimeout:function(){
        if(this._shouldCallFunctionAfterCD){
            this._callFunction();
        }else{
            this._cooldownTimeout=undefined;
        }
    },
});

returnCCThrottleFunctionObject;

});

flectra.define('im_livechat.legacy.mail.model.CCThrottleFunction',function(require){
"usestrict";

varCCThrottleFunctionObject=require('im_livechat.legacy.mail.model.CCThrottleFunctionObject');

/**
 *Afunctionthatcreatesacancellableandclearable(CC)throttleversion
 *ofaprovidedfunction.
 *
 *Thisthrottlemechanismallowscallingafunctionatmostonceduringa
 *certainperiod:
 *
 *-Whenafunctioncallismade,itentersa'cooldown'phase,inwhichany
 *    attempttocallthefunctionisbuffereduntilthecooldownphaseends.
 *-Atmost1functioncallcanbebufferedduringthecooldownphase,andthe
 *    latestoneinthisphasewillbeconsideredatitsend.
 *-Whenacooldownphaseends,anybufferedfunctioncallwillbeperformed
 *    andanothercooldownphasewillfollowup.
 *
 *Thisthrottleversionhasthefollowinginterestingproperties:
 *
 *-cancellable:itallowsremovingabufferedfunctioncallduringthe
 *    cooldownphase,butitkeepsthecooldownphaserunning.
 *-clearable:itallowstocleartheinternalclockofthethrottledfunction,
 *    sothatanycooldownphaseisimmediatelyending.
 *
 *@param{Object}params
 *@param{integer}params.durationadurationforthethrottledbehaviour,
 *  inmilli-seconds.
 *@param{function}params.functhefunctiontothrottle
 *@returns{function}thecancellableandclearablethrottleversionofthe
 *  providedfunctioninargument.
 */
varCCThrottleFunction=function(params){
    varduration=params.duration;
    varfunc=params.func;

    varthrottleFunctionObject=newCCThrottleFunctionObject({
        duration:duration,
        func:func,
    });

    varcallable=function(){
        returnthrottleFunctionObject.do.apply(throttleFunctionObject,arguments);
    };
    callable.cancel=function(){
        throttleFunctionObject.cancel();
    };
    callable.clear=function(){
        throttleFunctionObject.clear();
    };

    returncallable;
};

returnCCThrottleFunction;

});

flectra.define('im_livechat.legacy.mail.model.Timer',function(require){
"usestrict";

varClass=require('web.Class');

/**
 *Thisclasscreatesatimerwhich,whentimesout,callsafunction.
 */
varTimer=Class.extend({

    /**
     *Instantiateanewtimer.Notethatthetimerisnotstartedon
     *initialization(@seestartmethod).
     *
     *@param{Object}params
     *@param{number}params.durationdurationoftimerbeforetimeoutin
     *  milli-seconds.
     *@param{function}params.onTimeoutfunctionthatiscalledwhenthe
     *  timertimesout.
     */
    init:function(params){
        this._duration=params.duration;
        this._timeout=undefined;
        this._timeoutCallback=params.onTimeout;
    },

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *Clearsthecountdownofthetimer.
     */
    clear:function(){
        clearTimeout(this._timeout);
    },
    /**
     *Resetsthetimer,i.e.resetsitsduration.
     */
    reset:function(){
        this.clear();
        this.start();
    },
    /**
     *Startsthetimer,i.e.afteracertainduration,ittimesoutandcalls
     *afunctionback.
     */
    start:function(){
        this._timeout=setTimeout(this._onTimeout.bind(this),this._duration);
    },

    //--------------------------------------------------------------------------
    //Handler
    //--------------------------------------------------------------------------

    /**
     *Calledwhenthetimertimesout,callsbackafunctionontimeout.
     *
     *@private
     */
    _onTimeout:function(){
        this._timeoutCallback();
    },

});

returnTimer;

});

flectra.define('im_livechat.legacy.mail.model.Timers',function(require){
"usestrict";

varTimer=require('im_livechat.legacy.mail.model.Timer');

varClass=require('web.Class');

/**
 *Thisclasslistsseveraltimersthatuseasamecallbackandduration.
 */
varTimers=Class.extend({

    /**
     *Instantiateanewlistoftimers
     *
     *@param{Object}params
     *@param{integer}params.durationdurationoftheunderlyingtimersfrom
     *  starttotimeout,inmilli-seconds.
     *@param{function}params.onTimeoutafunctiontocallbackforunderlying
     *  timersontimeout.
     */
    init:function(params){
        this._duration=params.duration;
        this._timeoutCallback=params.onTimeout;
        this._timers={};
    },

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *RegisteratimerwithID`timerID`tostart.
     *
     *-analreadyregisteredtimerwiththisIDisreset.
     *-(optional)canprovidealistofargumentsthatispassedtothe
     *  functioncallbackwhentimertimesout.
     *
     *@param{Object}params
     *@param{Array}[params.timeoutCallbackArguments]
     *@param{integer}params.timerID
     */
    registerTimer:function(params){
        vartimerID=params.timerID;
        if(this._timers[timerID]){
            this._timers[timerID].clear();
        }
        vartimerParams={
            duration:this._duration,
            onTimeout:this._timeoutCallback,
        };
        if('timeoutCallbackArguments'inparams){
            timerParams.onTimeout=this._timeoutCallback.bind.apply(
                this._timeoutCallback,
                [null].concat(params.timeoutCallbackArguments)
            );
        }else{
            timerParams.onTimeout=this._timeoutCallback;
        }
        this._timers[timerID]=newTimer(timerParams);
        this._timers[timerID].start();
    },
    /**
     *UnregisteratimerwithID`timerID`.Theunregisteredtimerisaborted
     *andwillnottimeout.
     *
     *@param{Object}params
     *@param{integer}params.timerID
     */
    unregisterTimer:function(params){
        vartimerID=params.timerID;
        if(this._timers[timerID]){
            this._timers[timerID].clear();
            deletethis._timers[timerID];
        }
    },

});

returnTimers;

});

flectra.define('im_livechat.legacy.mail.widget.Thread',function(require){
"usestrict";

varDocumentViewer=require('im_livechat.legacy.mail.DocumentViewer');
varmailUtils=require('mail.utils');

varcore=require('web.core');
vartime=require('web.time');
varWidget=require('web.Widget');

varQWeb=core.qweb;
var_lt=core._lt;

varORDER={
    ASC:1,//visually,ascendingorderofmessageIDs(fromtoptobottom)
    DESC:-1,//visually,descendingorderofmessageIDs(fromtoptobottom)
};

varREAD_MORE=_lt("readmore");
varREAD_LESS=_lt("readless");

/**
 *Thisisagenericwidgettorenderathread.
 *Anythreadthatextendsmail.model.AbstractThreadcanbeusedwiththis
 *widget.
 */
varThreadWidget=Widget.extend({
    className:'o_mail_thread',

    events:{
        'clicka':'_onClickRedirect',
        'clickimg':'_onClickRedirect',
        'clickstrong':'_onClickRedirect',
        'click.o_thread_show_more':'_onClickShowMore',
        'click.o_attachment_download':'_onAttachmentDownload',
        'click.o_attachment_view':'_onAttachmentView',
        'click.o_attachment_delete_cross':'_onDeleteAttachment',
        'click.o_thread_message_needaction':'_onClickMessageNeedaction',
        'click.o_thread_message_star':'_onClickMessageStar',
        'click.o_thread_message_reply':'_onClickMessageReply',
        'click.oe_mail_expand':'_onClickMailExpand',
        'click.o_thread_message':'_onClickMessage',
        'click':'_onClick',
        'click.o_thread_message_notification_error':'_onClickMessageNotificationError',
        'click.o_thread_message_moderation':'_onClickMessageModeration',
        'change.moderation_checkbox':'_onChangeModerationCheckbox',
    },

    /**
     *@override
     *@param{widget}parent
     *@param{Object}options
     */
    init:function(parent,options){
        this._super.apply(this,arguments);
        this.attachments=[];
        //optionswhenthethreadisenabled(e.g.cansendmessage,
        //interactonmessages,etc.)
        this._enabledOptions=_.defaults(options||{},{
            displayOrder:ORDER.ASC,
            displayMarkAsRead:true,
            displayModerationCommands:false,
            displayStars:true,
            displayDocumentLinks:true,
            displayAvatars:true,
            squashCloseMessages:true,
            displayNotificationIcons:true,
            displayReplyIcons:false,
            loadMoreOnScroll:false,
            hasMessageAttachmentDeletable:false,
        });
        //optionswhenthethreadisdisabled
        this._disabledOptions={
            displayOrder:this._enabledOptions.displayOrder,
            displayMarkAsRead:false,
            displayModerationCommands:false,
            displayStars:false,
            displayDocumentLinks:false,
            displayAvatars:this._enabledOptions.displayAvatars,
            squashCloseMessages:false,
            displayNotificationIcons:false,
            displayReplyIcons:false,
            loadMoreOnScroll:this._enabledOptions.loadMoreOnScroll,
            hasMessageAttachmentDeletable:false,
        };
        this._selectedMessageID=null;
        this._currentThreadID=null;
        this._messageMailPopover=null;
        this._messageSeenPopover=null;
        //usedtotrackpopoverIDstodestroyonre-renderingofpopovers
        this._openedSeenPopoverIDs=[];
    },
    /**
     *Themessagemailpopovermaystillbeshownatthismoment.Ifwedonot
     *removeit,itstaysvisibleonthepageuntilapagereload.
     *
     *@override
     */
    destroy:function(){
        clearInterval(this._updateTimestampsInterval);
        if(this._messageMailPopover){
            this._messageMailPopover.popover('hide');
        }
        if(this._messageSeenPopover){
            this._messageSeenPopover.popover('hide');
        }
        this._destroyOpenSeenPopoverIDs();
        this._super();
    },
    /**
     *@param{im_livechat.legacy.mail.model.AbstractThread}threadthethreadtorender.
     *@param{Object}[options]
     *@param{integer}[options.displayOrder=ORDER.ASC]orderofdisplaying
     *   messagesinthethread:
     *     -ORDER.ASC:lastmessageisatthebottomofthethread
     *     -ORDER.DESC:lastmessageisatthetopofthethread
     *@param{boolean}[options.displayLoadMore]
     *@param{Array}[options.domain=[]]thedomainforthemessagesinthe
     *   thread.
     *@param{boolean}[options.isCreateMode]
     *@param{boolean}[options.scrollToBottom=false]
     *@param{boolean}[options.squashCloseMessages]
     */
    render:function(thread,options){
        varself=this;

        varshouldScrollToBottomAfterRendering=false;
        if(this._currentThreadID===thread.getID()&&this.isAtBottom()){
            shouldScrollToBottomAfterRendering=true;
        }
        this._currentThreadID=thread.getID();

        //copysothatreversedonotalterorderinthethreadobject
        varmessages=_.clone(thread.getMessages({domain:options.domain||[]}));

        varmodeOptions=options.isCreateMode?this._disabledOptions:
                                                    this._enabledOptions;

        //attachmentsorderedbymessagesorder(increasingID)
        this.attachments=_.uniq(_.flatten(_.map(messages,function(message){
            returnmessage.getAttachments();
        })));

        options=_.extend({},modeOptions,options,{
            selectedMessageID:this._selectedMessageID,
        });

        //dictwherekeyismessageID,andvalueiswhetheritshoulddisplay
        //theauthorofmessageornotvisually
        vardisplayAuthorMessages={};

        //Hideavatarandinfoofamessageifthatmessageandtheprevious
        //onearebothcommentswrotebythesameauthoratthesameminute
        //andinthesamedocument(userscannowpostmessageindocuments
        //directlyfromachannelthatfollowsit)
        varprevMessage;
        _.each(messages,function(message){
            if(
                //isfirstmessageofthread
                !prevMessage||
                //morethan1min.elasped
                (Math.abs(message.getDate().diff(prevMessage.getDate()))>60000)||
                prevMessage.getType()!=='comment'||
                message.getType()!=='comment'||
                //fromadifferentauthor
                (prevMessage.getAuthorID()!==message.getAuthorID())||
                (
                    //messagesarelinkedtoadocumentthread
                    (
                        prevMessage.isLinkedToDocumentThread()&&
                        message.isLinkedToDocumentThread()
                    )&&
                    (
                        //arefromdifferentdocuments
                        prevMessage.getDocumentModel()!==message.getDocumentModel()||
                        prevMessage.getDocumentID()!==message.getDocumentID()
                    )
                )
            ){
                displayAuthorMessages[message.getID()]=true;
            }else{
                displayAuthorMessages[message.getID()]=!options.squashCloseMessages;
            }
            prevMessage=message;
        });

        if(modeOptions.displayOrder===ORDER.DESC){
            messages.reverse();
        }

        this.$el.html(QWeb.render('im_livechat.legacy.mail.widget.Thread',{
            thread:thread,
            displayAuthorMessages:displayAuthorMessages,
            options:options,
            ORDER:ORDER,
            dateFormat:time.getLangDatetimeFormat(),
        }));

        _.each(messages,function(message){
            var$message=self.$('.o_thread_message[data-message-id="'+message.getID()+'"]');
            $message.find('.o_mail_timestamp').data('date',message.getDate());

            self._insertReadMore($message);
        });

        if(shouldScrollToBottomAfterRendering){
            this.scrollToBottom();
        }

        if(!this._updateTimestampsInterval){
            this.updateTimestampsInterval=setInterval(function(){
                self._updateTimestamps();
            },1000*60);
        }

        this._renderMessageNotificationPopover(messages);
        if(thread.hasSeenFeature()){
            this._renderMessageSeenPopover(thread,messages);
        }
    },

    /**
     *Renderthreadwidgetwhenloading,i.e.whenmessagingisnotyetready.
     *@see/mail/init_messaging
     */
    renderLoading:function(){
        this.$el.html(QWeb.render('im_livechat.legacy.mail.widget.ThreadLoading'));
    },

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    getScrolltop:function(){
        returnthis.$el.scrollTop();
    },
    /**
     *Statewhetherthebottomofthethreadisvisibleornot,
     *withatoleranceof5pixels
     *
     *@return{boolean}
     */
    isAtBottom:function(){
        varfullHeight=this.el.scrollHeight;
        vartopHiddenHeight=this.$el.scrollTop();
        varvisibleHeight=this.$el.outerHeight();
        varbottomHiddenHeight=fullHeight-topHiddenHeight-visibleHeight;
        returnbottomHiddenHeight<5;
    },
    /**
     *Removesamessageandre-rendersthethread
     *
     *@param{integer}[messageID]theidoftheremovedmessage
     *@param{mail.model.AbstractThread}threadthethreadwhichcontains
     *  updatedlistofmessages(soitdoesnotcontainanymessagewithID
     *  `messageID`).
     *@param{Object}[options]optionsforthethreadrendering
     */
    removeMessageAndRender:function(messageID,thread,options){
        varself=this;
        this._currentThreadID=thread.getID();
        returnnewPromise(function(resolve,reject){
            self.$('.o_thread_message[data-message-id="'+messageID+'"]')
            .fadeOut({
                done:function(){
                    if(self._currentThreadID===thread.getID()){
                        self.render(thread,options);
                    }
                    resolve();
                },
                duration:200,
            });
        });
    },
    /**
     *Scrolltothebottomofthethread
     */
    scrollToBottom:function(){
        this.$el.scrollTop(this.el.scrollHeight);
    },
    /**
     *Scrollsthethreadtoagivenmessage
     *
     *@param{integer}options.msgIDtheIDofthemessagetoscrollto
     *@param{integer}[options.duration]
     *@param{boolean}[options.onlyIfNecessary]
     */
    scrollToMessage:function(options){
        var$target=this.$('.o_thread_message[data-message-id="'+options.messageID+'"]');
        if(options.onlyIfNecessary){
            vardelta=$target.parent().height()-$target.height();
            varoffset=delta<0?
                            0:
                            delta-($target.offset().top-$target.offsetParent().offset().top);
            offset=-Math.min(offset,0);
            this.$el.scrollTo("+="+offset+"px",options.duration);
        }elseif($target.length){
            this.$el.scrollTo($target);
        }
    },
    /**
     *Scrolltothespecificpositioninpixel
     *
     *Ifnopositionisprovided,scrolltothebottomofthethread
     *
     *@param{integer}[position]distancefromtoptopositioninpixels.
     *   Ifnotprovided,scrolltothebottom.
     */
    scrollToPosition:function(position){
        if(position){
            this.$el.scrollTop(position);
        }else{
            this.scrollToBottom();
        }
    },
    /**
     *Toggleallthemoderationcheckboxesinthethread
     *
     *@param{boolean}checkediftrue,checktheboxes,
     *     otherwiseuncheckthem.
     */
    toggleModerationCheckboxes:function(checked){
        this.$('.moderation_checkbox').prop('checked',checked);
    },
    /**
     *Unselecttheselectedmessage
     */
    unselectMessage:function(){
        this.$('.o_thread_message').removeClass('o_thread_selected_message');
        this._selectedMessageID=null;
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *@private
     */
    _destroyOpenSeenPopoverIDs:function(){
        _.each(this._openedSeenPopoverIDs,function(popoverID){
            $('#'+popoverID).remove();
        });
        this._openedSeenPopoverIDs=[];
    },
    /**
     *Modifies$elementtoaddthe'readmore/readless'functionality
     *Allelementnodeswith'data-o-mail-quote'attributeareconcerned.
     *Alltextnodesaftera``#stopSpelling``elementareconcerned.
     *Thosetextnodesneedtobewrappedinaspan(togglefunctionality).
     *Allconsecutiveelementsarejoinedinone'readmore/readless'.
     *
     *@private
     *@param{jQuery}$element
     */
    _insertReadMore:function($element){
        varself=this;

        vargroups=[];
        varreadMoreNodes;

        //nodeType1:element_node
        //nodeType3:text_node
        var$children=$element.contents()
            .filter(function(){
                returnthis.nodeType===1||
                        this.nodeType===3&&
                        this.nodeValue.trim();
            });

        _.each($children,function(child){
            var$child=$(child);

            //HideTextnodesif"stopSpelling"
            if(
                child.nodeType===3&&
                $child.prevAll('[id*="stopSpelling"]').length>0
            ){
                //ConvertTextnodestoElementnodes
                $child=$('<span>',{
                    text:child.textContent,
                    'data-o-mail-quote':'1',
                });
                child.parentNode.replaceChild($child[0],child);
            }

            //Createarrayforeach'readmore'withnodestotoggle
            if(
                $child.attr('data-o-mail-quote')||
                (
                    $child.get(0).nodeName==='BR'&&
                    $child.prev('[data-o-mail-quote="1"]').length>0
                )
            ){
                if(!readMoreNodes){
                    readMoreNodes=[];
                    groups.push(readMoreNodes);
                }
                $child.hide();
                readMoreNodes.push($child);
            }else{
                readMoreNodes=undefined;
                self._insertReadMore($child);
            }
        });

        _.each(groups,function(group){
            //Insertlinkjustbeforethefirstnode
            var$readMore=$('<a>',{
                class:'o_mail_read_more',
                href:'#',
                text:READ_MORE,
            }).insertBefore(group[0]);

            //ToggleAllnextnodes
            varisReadMore=true;
            $readMore.click(function(e){
                e.preventDefault();
                isReadMore=!isReadMore;
                _.each(group,function($child){
                    $child.hide();
                    $child.toggle(!isReadMore);
                });
                $readMore.text(isReadMore?READ_MORE:READ_LESS);
            });
        });
    },
    /**
    *@private
    *@param{MouseEvent}ev
    */
    _onDeleteAttachment:function(ev){
        ev.stopPropagation();
        var$target=$(ev.currentTarget);
        this.trigger_up('delete_attachment',{
            attachmentId:$target.data('id'),
            attachmentName:$target.data('name')
        });
        },
    /**
     *@private
     *@param{Object}options
     *@param{integer}[options.channelID]
     *@param{string}options.model
     *@param{integer}options.id
     */
    _redirect:_.debounce(function(options){
        if('channelID'inoptions){
            this.trigger('redirect_to_channel',options.channelID);
        }else{
            this.trigger('redirect',options.model,options.id);
        }
    },500,true),
    /**
     *Renderthepopoverwhenmouse-hoveringonthenotificationiconofa
     *messageinthethread.
     *Thereisatmostonesuchpopoveratanygiventime.
     *
     *@private
     *@param{im_livechat.legacy.mail.model.AbstractMessage[]}messageslistofmessagesinthe
     *  renderedthread,forwhichpopoveronmouseoverinteractionis
     *  permitted.
     */
    _renderMessageNotificationPopover(messages){
        if(this._messageMailPopover){
            this._messageMailPopover.popover('hide');
        }
        if(!this.$('.o_thread_tooltip').length){
            return;
        }
        this._messageMailPopover=this.$('.o_thread_tooltip').popover({
            html:true,
            boundary:'viewport',
            placement:'auto',
            trigger:'hover',
            offset:'0,1',
            content:function(){
                varmessageID=$(this).data('message-id');
                varmessage=_.find(messages,function(message){
                    returnmessage.getID()===messageID;
                });
                returnQWeb.render('im_livechat.legacy.mail.widget.Thread.Message.MailTooltip',{
                    notifications:message.getNotifications(),
                });
            },
        });
    },
    /**
     *Renderthepopoverwhenmousehoveringontheseeniconofamessage
     *inthethread.Onlyseeniconsinnon-squashedmessagehavepopover,
     *becausesquashedmessageshidesthisicononmessagemouseover.
     *
     *@private
     *@param{im_livechat.legacy.mail.model.AbstractThread}threadwiththreadseenmixin,
     *  @see{im_livechat.legacy.mail.model.ThreadSeenMixin}
     *@param{im_livechat.legacy.mail.model.Message[]}messageslistofmessagesinthe
     *  renderedthread.
     */
    _renderMessageSeenPopover:function(thread,messages){
        varself=this;
        this._destroyOpenSeenPopoverIDs();
        if(this._messageSeenPopover){
            this._messageSeenPopover.popover('hide');
        }
        if(!this.$('.o_thread_message_core.o_mail_thread_message_seen_icon').length){
            return;
        }
        this._messageSeenPopover=this.$('.o_thread_message_core.o_mail_thread_message_seen_icon').popover({
            html:true,
            boundary:'viewport',
            placement:'auto',
            trigger:'hover',
            offset:'0,1',
            content:function(){
                var$this=$(this);
                self._openedSeenPopoverIDs.push($this.attr('aria-describedby'));
                varmessageID=$this.data('message-id');
                varmessage=_.find(messages,function(message){
                    returnmessage.getID()===messageID;
                });
                returnQWeb.render('im_livechat.legacy.mail.widget.Thread.Message.SeenIconPopoverContent',{
                    thread:thread,
                    message:message,
                });
            },
        });
    },
    /**
     *@private
     */
    _updateTimestamps:function(){
        varisAtBottom=this.isAtBottom();
        this.$('.o_mail_timestamp').each(function(){
            vardate=$(this).data('date');
            $(this).html(mailUtils.timeFromNow(date));
        });
        if(isAtBottom&&!this.isAtBottom()){
            this.scrollToBottom();
        }
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *@private
     *@param{MouseEvent}event
     */
    _onAttachmentDownload:function(event){
        event.stopPropagation();
    },
    /**
     *@private
     *@param{MouseEvent}event
     */
    _onAttachmentView:function(event){
        event.stopPropagation();
        varactiveAttachmentID=$(event.currentTarget).data('id');
        if(activeAttachmentID){
            varattachmentViewer=newDocumentViewer(this,this.attachments,activeAttachmentID);
            attachmentViewer.appendTo($('body'));
        }
    },
    /**
     *@private
     *@param{MouseEvent}ev
     */
    _onChangeModerationCheckbox:function(ev){
        this.trigger_up('update_moderation_buttons');
    },
    /**
     *@private
     */
    _onClick:function(){
        if(this._selectedMessageID){
            this.unselectMessage();
            this.trigger('unselect_message');
        }
    },
    /**
     *@private
     *@param{MouseEvent}ev
     */
    _onClickMailExpand:function(ev){
        ev.preventDefault();
    },
    /**
     *@private
     *@param{MouseEvent}ev
     */
    _onClickMessage:function(ev){
        $(ev.currentTarget).toggleClass('o_thread_selected_message');
    },
    /**
     *@private
     *@param{MouseEvent}ev
     */
    _onClickMessageNeedaction:function(ev){
        varmessageID=$(ev.currentTarget).data('message-id');
        this.trigger('mark_as_read',messageID);
    },
    /**
     *@private
     *@param{MouseEvent}ev
     */
    _onClickMessageNotificationError(ev){
        constmessageID=$(ev.currentTarget).data('message-id');
        this.do_action('mail.mail_resend_message_action',{
            additional_context:{
                mail_message_to_resend:messageID,
            }
        });
    },
    /**
     *@private
     *@param{MouseEvent}ev
     */
    _onClickMessageReply:function(ev){
        this._selectedMessageID=$(ev.currentTarget).data('message-id');
        this.$('.o_thread_message').removeClass('o_thread_selected_message');
        this.$('.o_thread_message[data-message-id="'+this._selectedMessageID+'"]')
            .addClass('o_thread_selected_message');
        this.trigger('select_message',this._selectedMessageID);
        ev.stopPropagation();
    },
    /**
     *@private
     *@param{MouseEvent}ev
     */
    _onClickMessageStar:function(ev){
        varmessageID=$(ev.currentTarget).data('message-id');
        this.trigger('toggle_star_status',messageID);
    },
    /**
     *@private
     *@param{MouseEvent}ev
     */
    _onClickMessageModeration:function(ev){
        var$button=$(ev.currentTarget);
        varmessageID=$button.data('message-id');
        vardecision=$button.data('decision');
        this.trigger_up('message_moderation',{
            messageID:messageID,
            decision:decision,
        });
    },
    /**
     *@private
     *@param{MouseEvent}ev
     */
    _onClickRedirect:function(ev){
        //ignoreinheritedbranding
        if($(ev.target).data('oe-field')!==undefined){
            return;
        }
        varid=$(ev.target).data('oe-id');
        if(id){
            ev.preventDefault();
            varmodel=$(ev.target).data('oe-model');
            varoptions;
            if(model&&(model!=='mail.channel')){
                options={
                    model:model,
                    id:id
                };
            }else{
                options={channelID:id};
            }
            this._redirect(options);
        }
    },
    /**
     *@private
     */
    _onClickShowMore:function(){
        this.trigger('load_more_messages');
    },
});

ThreadWidget.ORDER=ORDER;

returnThreadWidget;

});

flectra.define('im_livechat.legacy.mail.DocumentViewer',function(require){
"usestrict";

varcore=require('web.core');
varWidget=require('web.Widget');

varQWeb=core.qweb;

varSCROLL_ZOOM_STEP=0.1;
varZOOM_STEP=0.5;

varDocumentViewer=Widget.extend({
    template:"im_livechat.legacy.mail.DocumentViewer",
    events:{
        'click.o_download_btn':'_onDownload',
        'click.o_viewer_img':'_onImageClicked',
        'click.o_viewer_video':'_onVideoClicked',
        'click.move_next':'_onNext',
        'click.move_previous':'_onPrevious',
        'click.o_rotate':'_onRotate',
        'click.o_zoom_in':'_onZoomIn',
        'click.o_zoom_out':'_onZoomOut',
        'click.o_zoom_reset':'_onZoomReset',
        'click.o_close_btn,.o_viewer_img_wrapper':'_onClose',
        'click.o_print_btn':'_onPrint',
        'DOMMouseScroll.o_viewer_content':'_onScroll',//Firefox
        'mousewheel.o_viewer_content':'_onScroll',//Chrome,Safari,IE
        'keydown':'_onKeydown',
        'keyup':'_onKeyUp',
        'mousedown.o_viewer_img':'_onStartDrag',
        'mousemove.o_viewer_content':'_onDrag',
        'mouseup.o_viewer_content':'_onEndDrag'
    },
    /**
     *ThedocumentViewertakesanarrayofobjectsdescribingattachmentsin
     *argument,andtheIDofanactiveattachment(theonetodisplayfirst).
     *Documentsthatarenotoftypeimageorvideoarefilteredout.
     *
     *@override
     *@param{Array<Object>}attachmentslistofattachments
     *@param{integer}activeAttachmentID
     */
    init:function(parent,attachments,activeAttachmentID){
        this._super.apply(this,arguments);
        this.attachment=_.filter(attachments,function(attachment){
            varmatch=attachment.type==='url'?attachment.url.match("(youtu|.png|.jpg|.gif)"):attachment.mimetype.match("(image|video|application/pdf|text)");
            if(match){
                attachment.fileType=match[1];
                if(match[1].match("(.png|.jpg|.gif)")){
                    attachment.fileType='image';
                }
                if(match[1]==='youtu'){
                    varyoutube_array=attachment.url.split('/');
                    varyoutube_token=youtube_array[youtube_array.length-1];
                    if(youtube_token.indexOf('watch')!==-1){
                        youtube_token=youtube_token.split('v=')[1];
                        varamp=youtube_token.indexOf('&');
                        if(amp!==-1){
                            youtube_token=youtube_token.substring(0,amp);
                        }
                    }
                    attachment.youtube=youtube_token;
                }
                returntrue;
            }
        });
        this.activeAttachment=_.findWhere(attachments,{id:activeAttachmentID});
        this.modelName='ir.attachment';
        this._reset();
    },
    /**
     *Openamodaldisplayingtheactiveattachment
     *@override
     */
    start:function(){
        this.$el.modal('show');
        this.$el.on('hidden.bs.modal',_.bind(this._onDestroy,this));
        this.$('.o_viewer_img').on("load",_.bind(this._onImageLoaded,this));
        this.$('[data-toggle="tooltip"]').tooltip({delay:0});
        returnthis._super.apply(this,arguments);
    },
    /**
     *@override
     */
    destroy:function(){
        if(this.isDestroyed()){
            return;
        }
        this.trigger_up('document_viewer_closed');
        this.$el.modal('hide');
        this.$el.remove();
        this._super.apply(this,arguments);
    },

    //--------------------------------------------------------------------------
    //Private
    //---------------------------------------------------------------------------

    /**
     *@private
     */
    _next:function(){
        varindex=_.findIndex(this.attachment,this.activeAttachment);
        index=(index+1)%this.attachment.length;
        this.activeAttachment=this.attachment[index];
        this._updateContent();
    },
    /**
     *@private
     */
    _previous:function(){
        varindex=_.findIndex(this.attachment,this.activeAttachment);
        index=index===0?this.attachment.length-1:index-1;
        this.activeAttachment=this.attachment[index];
        this._updateContent();
    },
    /**
     *@private
     */
    _reset:function(){
        this.scale=1;
        this.dragStartX=this.dragstopX=0;
        this.dragStartY=this.dragstopY=0;
    },
    /**
     *Rendertheactiveattachment
     *
     *@private
     */
    _updateContent:function(){
        this.$('.o_viewer_content').html(QWeb.render('im_livechat.legacy.mail.DocumentViewer.Content',{
            widget:this
        }));
        this.$('.o_viewer_img').on("load",_.bind(this._onImageLoaded,this));
        this.$('[data-toggle="tooltip"]').tooltip({delay:0});
        this._reset();
    },
    /**
     *GetCSStransformpropertybasedonscaleandangle
     *
     *@private
     *@param{float}scale
     *@param{float}angle
     */
    _getTransform:function(scale,angle){
        return'scale3d('+scale+','+scale+',1)rotate('+angle+'deg)';
    },
    /**
     *Rotateimageclockwisebyprovidedangle
     *
     *@private
     *@param{float}angle
     */
    _rotate:function(angle){
        this._reset();
        varnew_angle=(this.angle||0)+angle;
        this.$('.o_viewer_img').css('transform',this._getTransform(this.scale,new_angle));
        this.$('.o_viewer_img').css('max-width',new_angle%180!==0?$(document).height():'100%');
        this.$('.o_viewer_img').css('max-height',new_angle%180!==0?$(document).width():'100%');
        this.angle=new_angle;
    },
    /**
     *Zoomin/outimagebyprovidedscale
     *
     *@private
     *@param{integer}scale
     */
    _zoom:function(scale){
        if(scale>0.5){
            this.$('.o_viewer_img').css('transform',this._getTransform(scale,this.angle||0));
            this.scale=scale;
        }
        this.$('.o_zoom_reset').add('.o_zoom_out').toggleClass('disabled',scale===1);
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *@private
     *@param{MouseEvent}e
     */
    _onClose:function(e){
        e.preventDefault();
        this.destroy();
    },
    /**
     *WhenpopupclosecompletedestroyedmodalevenDOMfootprinttoo
     *
     *@private
     */
    _onDestroy:function(){
        this.destroy();
    },
    /**
     *@private
     *@param{MouseEvent}e
     */
    _onDownload:function(e){
        e.preventDefault();
        window.location='/web/content/'+this.modelName+'/'+this.activeAttachment.id+'/'+'datas'+'?download=true';
    },
    /**
     *@private
     *@param{MouseEvent}e
     */
    _onDrag:function(e){
        e.preventDefault();
        if(this.enableDrag){
            var$image=this.$('.o_viewer_img');
            var$zoomer=this.$('.o_viewer_zoomer');
            vartop=$image.prop('offsetHeight')*this.scale>$zoomer.height()?e.clientY-this.dragStartY:0;
            varleft=$image.prop('offsetWidth')*this.scale>$zoomer.width()?e.clientX-this.dragStartX:0;
            $zoomer.css("transform","translate3d("+left+"px,"+top+"px,0)");
            $image.css('cursor','move');
        }
    },
    /**
     *@private
     *@param{MouseEvent}e
     */
    _onEndDrag:function(e){
        e.preventDefault();
        if(this.enableDrag){
            this.enableDrag=false;
            this.dragstopX=e.clientX-this.dragStartX;
            this.dragstopY=e.clientY-this.dragStartY;
            this.$('.o_viewer_img').css('cursor','');
        }
    },
    /**
     *Onclickofimagedonotclosemodalsostopeventpropagation
     *
     *@private
     *@param{MouseEvent}e
     */
    _onImageClicked:function(e){
        e.stopPropagation();
    },
    /**
     *Removeloadingindicatorwhenimageloaded
     *@private
     */
    _onImageLoaded:function(){
        this.$('.o_loading_img').hide();
    },
    /**
     *Movenextpreviousattachmentonkeyboardrightleftkey
     *
     *@private
     *@param{KeyEvent}e
     */
    _onKeydown:function(e){
        switch(e.which){
            case$.ui.keyCode.RIGHT:
                e.preventDefault();
                this._next();
                break;
            case$.ui.keyCode.LEFT:
                e.preventDefault();
                this._previous();
                break;
        }
    },
    /**
     *ClosepopuponESCAPEkeyup
     *
     *@private
     *@param{KeyEvent}e
     */
    _onKeyUp:function(e){
        switch(e.which){
            case$.ui.keyCode.ESCAPE:
                e.preventDefault();
                this._onClose(e);
                break;
        }
    },
    /**
     *@private
     *@param{MouseEvent}e
     */
    _onNext:function(e){
        e.preventDefault();
        this._next();
    },
    /**
     *@private
     *@param{MouseEvent}e
     */
    _onPrevious:function(e){
        e.preventDefault();
        this._previous();
    },
    /**
     *@private
     *@param{MouseEvent}e
     */
    _onPrint:function(e){
        e.preventDefault();
        varsrc=this.$('.o_viewer_img').prop('src');
        varscript=QWeb.render('im_livechat.legacy.mail.PrintImage',{
            src:src
        });
        varprintWindow=window.open('about:blank',"_new");
        printWindow.document.open();
        printWindow.document.write(script);
        printWindow.document.close();
    },
    /**
     *Zoomimageonscroll
     *
     *@private
     *@param{MouseEvent}e
     */
    _onScroll:function(e){
        varscale;
        if(e.originalEvent.wheelDelta>0||e.originalEvent.detail<0){
            scale=this.scale+SCROLL_ZOOM_STEP;
            this._zoom(scale);
        }else{
            scale=this.scale-SCROLL_ZOOM_STEP;
            this._zoom(scale);
        }
    },
    /**
     *@private
     *@param{MouseEvent}e
     */
    _onStartDrag:function(e){
        e.preventDefault();
        this.enableDrag=true;
        this.dragStartX=e.clientX-(this.dragstopX||0);
        this.dragStartY=e.clientY-(this.dragstopY||0);
    },
    /**
     *Onclickofvideodonotclosemodalsostopeventpropagation
     *andprovideplay/pausethevideoinsteadofquittingit
     *
     *@private
     *@param{MouseEvent}e
     */
    _onVideoClicked:function(e){
        e.stopPropagation();
        varvideoElement=e.target;
        if(videoElement.paused){
            videoElement.play();
        }else{
            videoElement.pause();
        }
    },
    /**
     *@private
     *@param{MouseEvent}e
     */
    _onRotate:function(e){
        e.preventDefault();
        this._rotate(90);
    },
    /**
     *@private
     *@param{MouseEvent}e
     */
    _onZoomIn:function(e){
        e.preventDefault();
        varscale=this.scale+ZOOM_STEP;
        this._zoom(scale);
    },
    /**
     *@private
     *@param{MouseEvent}e
     */
    _onZoomOut:function(e){
        e.preventDefault();
        varscale=this.scale-ZOOM_STEP;
        this._zoom(scale);
    },
    /**
     *@private
     *@param{MouseEvent}e
     */
    _onZoomReset:function(e){
        e.preventDefault();
        this.$('.o_viewer_zoomer').css("transform","");
        this._zoom(1);
    },
});
returnDocumentViewer;
});
