flectra.define('im_livechat/static/src/models/thread/thread.js',function(require){
'usestrict';

const{
    registerClassPatchModel,
    registerInstancePatchModel,
}=require('mail/static/src/model/model_core.js');

registerClassPatchModel('mail.thread','im_livechat/static/src/models/thread/thread.js',{

    //----------------------------------------------------------------------
    //Public
    //----------------------------------------------------------------------

    /**
     *@override
     */
    convertData(data){
        constdata2=this._super(data);
        if('livechat_visitor'indata&&data.livechat_visitor){
            if(!data2.members){
                data2.members=[];
            }
            //`livechat_visitor`without`id`istheanonymousvisitor.
            if(!data.livechat_visitor.id){
                /**
                 *Createpartnerderivedfrompublicpartnerandreplacethe
                 *publicpartner.
                 *
                 *Indeedtheanonymousvisitorisregisteredasamemberofthe
                 *channelasthepublicpartnerinthedatabasetoavoid
                 *pollutingthecontactlistwithmanytemporarypartners.
                 *
                 *Buttheissuewithpublicpartneristhatitisthesame
                 *recordforeverylivechat,whereaseverycorrespondentshould
                 *actuallyhaveitsownvisitorname,typingstatus,etc.
                 *
                 *DuetoJSbeingtemporarybynaturethereisnosuchnotion
                 *ofpollutingthedatabase,itisthereforeacceptableand
                 *easiertohandleonetemporarypartnerperchannel.
                 */
                data2.members.push(['unlink',this.env.messaging.publicPartners]);
                constpartner=this.env.models['mail.partner'].create(
                    Object.assign(
                        this.env.models['mail.partner'].convertData(data.livechat_visitor),
                        {id:this.env.models['mail.partner'].getNextPublicId()}
                    )
                );
                data2.members.push(['link',partner]);
                data2.correspondent=[['link',partner]];
            }else{
                constpartnerData=this.env.models['mail.partner'].convertData(data.livechat_visitor);
                data2.members.push(['insert',partnerData]);
                data2.correspondent=[['insert',partnerData]];
            }
        }
        returndata2;
    },
});

registerInstancePatchModel('mail.thread','im_livechat/static/src/models/thread/thread.js',{
    //----------------------------------------------------------------------
    //Public
    //----------------------------------------------------------------------

    /**
     *@override
     */
    getMemberName(partner){
        if(this.channel_type==='livechat'&&partner.livechat_username){
            returnpartner.livechat_username;
        }
        returnthis._super(partner);
    },

    //----------------------------------------------------------------------
    //Private
    //----------------------------------------------------------------------

    /**
     *@override
     */
    _computeCorrespondent(){
        if(this.channel_type==='livechat'){
            //livechatcorrespondentneverchange:alwaysthepublicmember.
            return[];
        }
        returnthis._super();
    },
    /**
     *@override
     */
    _computeDisplayName(){
        if(this.channel_type==='livechat'&&this.correspondent){
            if(this.correspondent.country){
                return`${this.correspondent.nameOrDisplayName}(${this.correspondent.country.name})`;
            }
            returnthis.correspondent.nameOrDisplayName;
        }
        returnthis._super();
    },
    /**
     *@override
     */
    _computeIsChatChannel(){
        returnthis.channel_type==='livechat'||this._super();
    },
});

});
