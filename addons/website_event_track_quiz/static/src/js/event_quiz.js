flectra.define('website_event_track_quiz.event.quiz',function(require){

'usestrict';

varpublicWidget=require('web.public.widget');
varcore=require('web.core');
varsession=require('web.session');
varutils=require('web.utils');

varQWeb=core.qweb;
var_t=core._t;

/**
 *Thiswidgetisresponsibleofdisplayingquizquestionsandpropositions.Submittingthequizwillfetchthe
 *correctionanddecoratetheanswersaccordingtotheresult.Errormessagecanbedisplayed.
 *
 *ThiswidgetcanbeattachedtoDOMrenderedserver-sideby`gamification_quiz.`
 *
 */
varQuiz=publicWidget.Widget.extend({
    template:'quiz.main',
    xmlDependencies:['/website_event_track_quiz/static/src/xml/quiz_templates.xml'],
    events:{
        "click.o_quiz_quiz_answer":'_onAnswerClick',
        "click.o_quiz_js_quiz_submit":'_submitQuiz',
        "click.o_quiz_js_quiz_reset":'_onClickReset',
    },

    /**
    *@override
    *@param{Object}parent
    *@param{Object}dataholdingallthecontainerinformation
    *@param{Object}quizData:quizdatatodisplay
    */
    init:function(parent,data,quizData){
        this._super.apply(this,arguments);
        this.track=_.defaults(data,{
            id:0,
            name:'',
            eventId:'',
            completed:false,
            isMember:false,
            progressBar:false,
            isManager:false
        });
        this.quiz=quizData||false;
        if(this.quiz){
            this.quiz.questionsCount=quizData.questions.length;
        }
        this.isMember=data.isMember||false;
        this.userId=session.user_id;
        this.redirectURL=encodeURIComponent(document.URL);
    },

    /**
     *@override
     */
    willStart:function(){
        vardefs=[this._super.apply(this,arguments)];
        if(!this.quiz){
            defs.push(this._fetchQuiz());
        }
        returnPromise.all(defs);
    },

    /**
     *Overriddentoaddcustomrenderingbehavioruponstartofthewidget.
     *
     *Iftheuserhasansweredthequizbeforehavingjoinedthecourse,wecheck
     *hisanswers(savedintohissession)hereaswell.
     *
     *@override
     */
    start:function(){
        varself=this;
        returnthis._super.apply(this,arguments).then(function() {
            self._renderValidationInfo();
        });
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    _alertShow:function(alertCode){
        varmessage=_t('Therewasanerrorvalidatingthisquiz.');
        if(alertCode==='quiz_incomplete'){
            message=_t('Allquestionsmustbeanswered!');
        }elseif(alertCode==='quiz_done'){
            message=_t('Thisquizisalreadydone.Retakingitisnotpossible.');
        }

        this.displayNotification({
            type:'warning',
            title:_t('Quizvalidationerror'),
            message:message,
            sticky:true
        });
    },

    /**
     *GetallthequestionsIDfromthedisplayedQuiz
     *@returns{Array}
     *@private
     */
    _getQuestionsIds:function(){
        returnthis.$('.o_quiz_js_quiz_question').map(function(){
            return$(this).data('question-id');
        }).get();
    },

    /**
     *@private
     *Decoratetheanswersaccordingtostate
     */
    _disableAnswers:function(){
        varself=this;
        this.$('.o_quiz_js_quiz_question').addClass('completed-disabled');
        this.$('input[type=radio]').each(function(){
            $(this).prop('disabled',self.track.completed);
        });
    },

    /**
     *Decoratetheanswerinputsaccordingtothecorrectionandaddstheanswercommentif
     *any.
     *
     *@private
     */
    _renderAnswersHighlightingAndComments:function(){
        varself=this;
        this.$('.o_quiz_js_quiz_question').each(function(){
            var$question=$(this);
            varquestionId=$question.data('questionId');
            varisCorrect=self.quiz.answers[questionId].is_correct;
            $question.find('a.o_quiz_quiz_answer').each(function(){
                var$answer=$(this);
                $answer.find('i.fa').addClass('d-none');
                if($answer.find('input[type=radio]')[0].checked){
                    if(isCorrect){
                        $answer.removeClass('list-group-item-danger').addClass('list-group-item-success');
                        $answer.find('i.fa-check-circle').removeClass('d-none');
                    }else{
                        $answer.removeClass('list-group-item-success').addClass('list-group-item-danger');
                        $answer.find('i.fa-times-circle').removeClass('d-none');
                        $answer.find('labelinput').prop('checked',false);
                    }
                }else{
                    $answer.removeClass('list-group-item-dangerlist-group-item-success');
                    $answer.find('i.fa-circle').removeClass('d-none');
                }
            });
            varcomment=self.quiz.answers[questionId].comment;
            if(comment){
                $question.find('.o_quiz_quiz_answer_info').removeClass('d-none');
                $question.find('.o_quiz_quiz_answer_comment').text(comment);
            }
        });
    },

    /*
        *@private
        *Updatevalidationbox(karma,buttons)accordingtowidgetstate
        */
    _renderValidationInfo:function(){
        var$validationElem=this.$('.o_quiz_js_quiz_validation');
        $validationElem.html(
            QWeb.render('quiz.validation',{'widget':this})
        );
    },

    /**
     *GetthequizanswersfilledinbytheUser
     *
     *@private
     */
    _getQuizAnswers:function(){
        returnthis.$('input[type=radio]:checked').map(function(index,element){
            returnparseInt($(element).val());
        }).get();
    },

    /**
     *Submitaquizandgetthecorrection.Itwilldisplaymessages
     *accordingtoquizresult.
     *
     *@private
     */
    _submitQuiz:function(){
        varself=this;

        returnthis._rpc({
            route:'/event_track/quiz/submit',
            params:{
                event_id:self.track.eventId,
                track_id:self.track.id,
                answer_ids:this._getQuizAnswers(),
            }
        }).then(function(data){
            if(data.error){
                self._alertShow(data.error);
            }else{
                self.quiz=_.extend(self.quiz,data);
                self.quiz.quizPointsGained=data.quiz_points;
                if(data.quiz_completed){
                    self._disableAnswers();
                    self.track.completed=data.quiz_completed;
                }
                self._renderAnswersHighlightingAndComments();
                self._renderValidationInfo();
                if(data.visitor_uuid){
                    utils.set_cookie('visitor_uuid',data.visitor_uuid);
                }
            }

            returnPromise.resolve(data);
        });
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *Whenclickingonananswer,thisoneshouldbemarkedas"checked".
     *
     *@private
     *@paramFlectraEventev
     */
    _onAnswerClick:function(ev){
        ev.preventDefault();
        if(!this.track.completed){
            $(ev.currentTarget).find('input[type=radio]').prop('checked',true);
        }
    },

    /**
     *Resetsthecompletionofthetracksotheusercantake
     *thequizagain
     *
     *@private
     */
    _onClickReset:function(){
        this._rpc({
            route:'/event_track/quiz/reset',
            params:{
                event_id:this.track.eventId,
                track_id:this.track.id
            }
        }).then(function(){
            window.location.reload();
        });
    },

});

publicWidget.registry.Quiz=publicWidget.Widget.extend({
    selector:'.o_quiz_main',

    //----------------------------------------------------------------------
    //Public
    //----------------------------------------------------------------------

    /**
     *@override
     *@param{Object}parent
     */
    start:function(){
        varself=this;
        this.quizWidgets=[];
        vardefs=[this._super.apply(this,arguments)];
        this.$('.o_quiz_js_quiz').each(function(){
            vardata=$(this).data();
            data.quizData={
                questions:self._extractQuestionsAndAnswers(),
                sessionAnswers:data.sessionAnswers||[],
                quizKarmaMax:data.quizKarmaMax,
                quizKarmaWon:data.quizKarmaWon,
                quizKarmaGain:data.quizKarmaGain,
                quizPointsGained:data.quizPointsGained,
                quizAttemptsCount:data.quizAttemptsCount,
            };
            defs.push(newQuiz(self,data,data.quizData).attachTo($(this)));
        });
        returnPromise.all(defs);
    },

    //----------------------------------------------------------------------
    //Private
    //---------------------------------------------------------------------

    /**
     *ExtractdatafromexitingDOMrenderedserver-side,tohavethelistofquestionswiththeir
     *relativeanswers.
     *Thismethodshouldreturnthesameformatas/gamification_quiz/quiz/getcontroller.
     *
     *@return{Array<Object>}listofquestionswithanswers
     */
    _extractQuestionsAndAnswers:function(){
        varquestions=[];
        this.$('.o_quiz_js_quiz_question').each(function(){
            var$question=$(this);
            varanswers=[];
            $question.find('.o_quiz_quiz_answer').each(function(){
                var$answer=$(this);
                answers.push({
                    id:$answer.data('answerId'),
                    text:$answer.data('text'),
                });
            });
            questions.push({
                id:$question.data('questionId'),
                title:$question.data('title'),
                answer_ids:answers,
            });
        });
        returnquestions;
    },
});

returnQuiz;

});
