flectra.define('lunch.lunchListTests',function(require){
"usestrict";

constLunchListView=require('lunch.LunchListView');

consttestUtils=require('web.test_utils');
const{createLunchView,mockLunchRPC}=require('lunch.test_utils');

QUnit.module('Views');

QUnit.module('LunchListView',{
    beforeEach(){
        constPORTAL_GROUP_ID=1234;

        this.data={
            'product':{
                fields:{
                    is_available_at:{string:'ProductAvailability',type:'many2one',relation:'lunch.location'},
                    category_id:{string:'ProductCategory',type:'many2one',relation:'lunch.product.category'},
                    supplier_id:{string:'Vendor',type:'many2one',relation:'lunch.supplier'},
                },
                records:[
                    {id:1,name:'Tunasandwich',is_available_at:1},
                ],
            },
            'lunch.order':{
                fields:{},
                update_quantity(){
                    returnPromise.resolve();
                },
            },
            'lunch.product.category':{
                fields:{},
                records:[],
            },
            'lunch.supplier':{
                fields:{},
                records:[],
            },
            'ir.model.data':{
                fields:{},
                xmlid_to_res_id(){
                    returnPromise.resolve(PORTAL_GROUP_ID);
                },
            },
            'lunch.location':{
                fields:{
                    name:{string:'Name',type:'char'},
                },
                records:[
                    {id:1,name:"Office1"},
                    {id:2,name:"Office2"},
                ],
            },
            'res.users':{
                fields:{
                    name:{string:'Name',type:'char'},
                    groups_id:{string:'Groups',type:'many2many'},
                },
                records:[
                    {id:1,name:"MitchellAdmin",groups_id:[]},
                    {id:2,name:"MarcDemo",groups_id:[]},
                    {id:3,name:"Jean-LucPortal",groups_id:[PORTAL_GROUP_ID]},
                ],
            },
        };
        this.regularInfos={
            username:"MarcDemo",
            wallet:36.5,
            is_manager:false,
            currency:{
                symbol:"\u20ac",
                position:"after"
            },
            user_location:[2,"Office2"],
        };
    },
},function(){
    QUnit.test('basicrendering',asyncfunction(assert){
        assert.expect(6);

        constlist=awaitcreateLunchView({
            View:LunchListView,
            model:'product',
            data:this.data,
            arch:`
                <tree>
                    <fieldname="name"/>
                </tree>
            `,
            mockRPC:mockLunchRPC({
                infos:this.regularInfos,
                userLocation:this.data['lunch.location'].records[0].id,
            }),
        });

        //checkviewlayout
        assert.containsN(list,'.o_content>div',2,
            "shouldhave2columns");
        assert.containsOnce(list,'.o_content>div.o_search_panel',
            "shouldhavea'lunchfilters'column");
        assert.containsOnce(list,'.o_content>.o_lunch_content',
            "shouldhavea'lunchwrapper'column");
        assert.containsOnce(list,'.o_lunch_content>.o_list_view',
            "shouldhavea'classicallistview'column");
        assert.hasClass(list.$('.o_list_view'),'o_lunch_list_view',
            "shouldhaveclassname'o_lunch_list_view'");
        assert.containsOnce(list,'.o_lunch_content>span>.o_lunch_banner',
            "shouldhavea'lunch'banner");

        list.destroy();
    });

    QUnit.module('LunchWidget',function(){

        QUnit.test('searchpaneldomainlocation',asyncfunction(assert){
            assert.expect(20);
            letexpectedLocation=1;
            letlocationId=this.data['lunch.location'].records[0].id;
            constregularInfos=_.extend({},this.regularInfos);

            constlist=awaitcreateLunchView({
                View:LunchListView,
                model:'product',
                data:this.data,
                arch:`
                    <tree>
                        <fieldname="name"/>
                    </tree>
                `,
                mockRPC:function(route,args){
                    assert.step(route);

                    if(route.startsWith('/lunch')){
                        if(route==='/lunch/user_location_set'){
                            locationId=args.location_id;
                            returnPromise.resolve(true);
                        }
                        returnmockLunchRPC({
                            infos:regularInfos,
                            userLocation:locationId,
                        }).apply(this,arguments);
                    }
                    if(args.method==='search_panel_select_multi_range'){
                        assert.deepEqual(args.kwargs.search_domain,[["is_available_at","in",[expectedLocation]]],
                            'Theinitialdomainofthesearchpanelmustcontaintheuserlocation');
                    }
                    if(route==='/web/dataset/search_read'){
                        assert.deepEqual(args.domain,[["is_available_at","in",[expectedLocation]]],
                            'Thedomainforfetchingactualdatashouldbecorrect');
                    }
                    returnthis._super.apply(this,arguments);
                },
            });

            expectedLocation=2;
            awaittestUtils.fields.many2one.clickOpenDropdown('locations');
            awaittestUtils.fields.many2one.clickItem('locations',"Office2");

            assert.verifySteps([
                //Initialstate
                '/lunch/user_location_get',
                '/web/dataset/call_kw/product/search_panel_select_multi_range',
                '/web/dataset/call_kw/product/search_panel_select_multi_range',
                '/web/dataset/search_read',
                '/lunch/infos',
                '/web/dataset/call_kw/ir.model.data/xmlid_to_res_id',
                //Clickm2o
                '/web/dataset/call_kw/lunch.location/name_search',
                //Clicknewlocation
                '/lunch/user_location_set',
                '/web/dataset/call_kw/product/search_panel_select_multi_range',
                '/web/dataset/call_kw/product/search_panel_select_multi_range',
                '/web/dataset/search_read',
                '/lunch/infos',
                '/web/dataset/call_kw/ir.model.data/xmlid_to_res_id',
            ]);

            list.destroy();
        });

        QUnit.test('searchpaneldomainlocationfalse:fetchproductsinalllocations',asyncfunction(assert){
            assert.expect(10);
            constregularInfos=_.extend({},this.regularInfos);

            constlist=awaitcreateLunchView({
                View:LunchListView,
                model:'product',
                data:this.data,
                arch:`
                    <tree>
                        <fieldname="name"/>
                    </tree>
                `,
                mockRPC:function(route,args){
                    assert.step(route);

                    if(route.startsWith('/lunch')){
                        returnmockLunchRPC({
                            infos:regularInfos,
                            userLocation:false,
                        }).apply(this,arguments);
                    }
                    if(args.method==='search_panel_select_multi_range'){
                        assert.deepEqual(args.kwargs.search_domain,[],
                            'Thedomainshouldnotexistsincethelocationisfalse.');
                    }
                    if(route==='/web/dataset/search_read'){
                        assert.deepEqual(args.domain,[],
                            'Thedomainforfetchingactualdatashouldbecorrect');
                    }
                    returnthis._super.apply(this,arguments);
                }
            });
            assert.verifySteps([
                '/lunch/user_location_get',
                '/web/dataset/call_kw/product/search_panel_select_multi_range',
                '/web/dataset/call_kw/product/search_panel_select_multi_range',
                '/web/dataset/search_read',
                '/lunch/infos',
                '/web/dataset/call_kw/ir.model.data/xmlid_to_res_id',
            ])

            list.destroy();
        });

        QUnit.test('addaproduct',asyncfunction(assert){
            assert.expect(1);

            constlist=awaitcreateLunchView({
                View:LunchListView,
                model:'product',
                data:this.data,
                arch:`
                    <tree>
                        <fieldname="name"/>
                    </tree>
                `,
                mockRPC:mockLunchRPC({
                    infos:this.regularInfos,
                    userLocation:this.data['lunch.location'].records[0].id,
                }),
                intercepts:{
                    do_action:function(ev){
                        assert.deepEqual(ev.data.action,{
                            name:"ConfigureYourOrder",
                            res_model:'lunch.order',
                            type:'ir.actions.act_window',
                            views:[[false,'form']],
                            target:'new',
                            context:{
                                default_product_id:1,
                            },
                        },
                        "shouldopenthewizard");
                    },
                },
            });

            awaittestUtils.dom.click(list.$('.o_data_row:first'));

            list.destroy();
        });
    });
});

});
