flectra.define('auth_totp_portal.button',function(require){
'usestrict';

const{_t}=require('web.core');
constpublicWidget=require('web.public.widget');
constDialog=require('web.Dialog');
const{handleCheckIdentity}=require('portal.portal');

/**
 *Replacesspecific<field>elementsbynormalHTML,stripouttherestentirely
 */
functionfromField(f,record){
    switch(f.getAttribute('name')){
    case'qrcode':
        constqrcode=document.createElement('img');
        qrcode.setAttribute('class','imgimg-fluidoffset-1');
        qrcode.setAttribute('src','data:image/png;base64,'+record['qrcode']);
        returnqrcode;
    case'url':
        consturl=document.createElement('a');
        url.setAttribute('href',record['url']);
        url.textContent=f.getAttribute('text')||record['url'];
        returnurl;
    case'code':
        constcode=document.createElement('input');
        code.setAttribute('name','code');
        code.setAttribute('class','form-controlcol-10col-md-6');
        code.setAttribute('placeholder','6-digitcode');
        code.required=true;
        code.maxLength=6;
        code.minLength=6;
        returncode;
    default://justdisplaythefield'sdata
        returndocument.createTextNode(record[f.getAttribute('name')]||'');
    }
}

/**
 *Apparentlychromeliterallyabsolutelycan'thandleparsingXMLandusing
 *thosenodesinanHTMLdocument(evenwhenparsingasapplication/xhtml+xml),
 *thisresultsinbrokenrenderingandanumberofthingsnotworking(e.g.
 *classes)withoutanyspecificwarningintheconsoleoranything,thingsare
 *justbrokenwithnoindicationofwhy.
 *
 *So...rebuildtheentiref'ingbodyusingdocument.createElementtoensure
 *wehaveHTMLelements.
 *
 *Thisisarecursiveimplementationsoit'snotsuperefficientbuttheviews
 *tofixup*should*berelativelysimple.
 */
functionfixupViewBody(oldNode,record){
    letqrcode=null,code=null,node=null;

    switch(oldNode.nodeType){
        case1://element
            if(oldNode.tagName==='field'){
                node=fromField(oldNode,record);
                switch(oldNode.getAttribute('name')){
                case'qrcode':
                    qrcode=node;
                    break;
                case'code':
                    code=node;
                    break
                }
                break;//noneedtorecursehere
            }
            node=document.createElement(oldNode.tagName);
            for(leti=0;i<oldNode.attributes.length;++i){
                constattr=oldNode.attributes[i];
                node.setAttribute(attr.name,attr.value);
            }
            for(letj=0;j<oldNode.childNodes.length;++j){
                const[ch,qr,co]=fixupViewBody(oldNode.childNodes[j],record);
                if(ch){node.appendChild(ch);}
                if(qr){qrcode=qr;}
                if(co){code=co;}
            }
            break;
        case3:case4://text,cdata
            node=document.createTextNode(oldNode.data);
            break;
        default:
            //don'tcareaboutPI&al
    }

    return[node,qrcode,code]
}

/**
 *Convertsabackend<button>elementandabunchofmetadataintoastructure
 *whichcankindabeofusetoDialog.
 */
classButton{
    constructor(parent,model,record_id,input_node,button_node){
        this._parent=parent;
        this.model=model;
        this.record_id=record_id;
        this.input=input_node;
        this.text=button_node.getAttribute('string');
        this.classes=button_node.getAttribute('class')||null;
        this.action=button_node.getAttribute('name');
        if(button_node.getAttribute('special')==='cancel'){
            this.close=true;
            this.click=null;
        }else{
            this.close=false;
            //becauseDialogdoesnt'call()clickonthedescriptorobject
            this.click=this._click.bind(this);
        }
    }
    async_click(){
        if(!this.input.reportValidity()){
            this.input.classList.add('is-invalid');
            return;
        }

        try{
            awaitthis.callAction(this.record_id,{code:this.input.value});
        }catch(e){
            this.input.classList.add('is-invalid');
            //showcustomvalidityerrormessage
            this.input.setCustomValidity(e.message);
            this.input.reportValidity();
            return;
        }
        this.input.classList.remove('is-invalid');
        //reloadspage,avoidwindow.location.reload()becauseitre-postsforms
        window.location=window.location;
    }
    asynccallAction(id,update){
        try{
            awaitthis._parent._rpc({model:this.model,method:'write',args:[id,update]});
            awaithandleCheckIdentity(
                this._parent.proxy('_rpc'),
                this._parent._rpc({model:this.model,method:this.action,args:[id]})
            );
        }catch(e){
            //avoiderrortoast(crashmanager)
            e.event.preventDefault();
            //trytounwrapmessofanerrorobjecttoausableerrormessage
            thrownewError(
                !e.message?e.toString()
              :!e.message.data?e.message.message
              :e.message.data.message||_t("Operationfailedforunknownreason.")
            );
        }
    }
}

publicWidget.registry.TOTPButton=publicWidget.Widget.extend({
    selector:'#auth_totp_portal_enable',
    events:{
        click:'_onClick',
    },

    async_onClick(e){
        e.preventDefault();

        constw=awaithandleCheckIdentity(this.proxy('_rpc'),this._rpc({
            model:'res.users',
            method:'totp_enable_wizard',
            args:[this.getSession().user_id]
        }));

        if(!w){
            //TOTPprobablyalreadyenabled,justreloadpage
            window.location=window.location;
            return;
        }

        const{res_model:model,res_id:wizard_id}=w;

        constrecord=awaitthis._rpc({
            model,method:'read',args:[wizard_id,[]]
        }).then(ar=>ar[0]);

        constdoc=newDOMParser().parseFromString(
            document.getElementById('totp_wizard_view').textContent,
            'application/xhtml+xml'
        );

        constxmlBody=doc.querySelector('sheet*');
        const[body,,codeInput]=fixupViewBody(xmlBody,record);
        //removecustomvalidityerrormessageanytimethefieldchanges
        //otherwiseitsticksandbrowserssuppresssubmit
        codeInput.addEventListener('input',()=>codeInput.setCustomValidity(''));

        constbuttons=[];
        for(constbuttonofdoc.querySelectorAll('footerbutton')){
            buttons.push(newButton(this,model,record.id,codeInput,button));
        }

        //wrapinaroothostof.modal-bodyotherwiseitbreaksourneatflexlayout
        const$content=document.createElement('form');
        $content.appendChild(body);
        //implicitsubmissionbypressing[return]fromwithininput
        $content.addEventListener('submit',(e)=>{
            e.preventDefault();
            //sadness:footernotavailableasnormalelement
            dialog.$footer.find('.btn-primary').click();
        });
        vardialog=newDialog(this,{$content,buttons}).open();
    }
});
publicWidget.registry.DisableTOTPButton=publicWidget.Widget.extend({
    selector:'#auth_totp_portal_disable',
    events:{
        click:'_onClick'
    },

    async_onClick(e){
        e.preventDefault();
        awaithandleCheckIdentity(
            this.proxy('_rpc'),
            this._rpc({model:'res.users',method:'totp_disable',args:[this.getSession().user_id]})
        )
        window.location=window.location;
    }
});
publicWidget.registry.RevokeTrustedDeviceButton=publicWidget.Widget.extend({
    selector:'.fa.fa-trash.text-danger',
    events:{
        click:'_onClick'
    },

    async_onClick(e){
        e.preventDefault();
        awaithandleCheckIdentity(
            this.proxy('_rpc'),
            this._rpc({
                model:'res.users.apikeys',
                method:'remove',
                args:[parseInt(this.target.id)]
            })
        );
        window.location=window.location;
    }
});
publicWidget.registry.RevokeAllTrustedDevicesButton=publicWidget.Widget.extend({
    selector:'#auth_totp_portal_revoke_all_devices',
    events:{
        click:'_onClick'
    },

    async_onClick(e){
        e.preventDefault();
        awaithandleCheckIdentity(
            this.proxy('_rpc'),
            this._rpc({
                model:'res.users',
                method:'revoke_all_devices',
                args:[this.getSession().user_id]
            })
        );
        window.location=window.location;
    }
});
});
