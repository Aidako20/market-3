#-*-coding:utf-8-*-
#PartofFlectra.SeeLICENSEfileforfullcopyrightandlicensingdetails.

fromflectra.tests.commonimportForm
fromflectra.addons.stock.tests.test_reportimportTestReportsCommon


classTestSaleStockReports(TestReportsCommon):
    deftest_report_forecast_1_mo_count(self):
        """Createsandconfiguresaproductwhocouldbeproduceandcouldbeacomponent.
        PlanssomeproducingandconsummingMOandcheckthereportvalues.
        """
        #Createavariantattribute.
        product_chocolate=self.env['product.product'].create({
            'name':'Chocolate',
            'type':'consu',
        })
        product_chococake=self.env['product.product'].create({
            'name':'ChocoCake',
            'type':'product',
        })
        product_double_chococake=self.env['product.product'].create({
            'name':'DoubleChocoCake',
            'type':'product',
        })

        #CreatestwoBOM:onecreatingaregularslime,oneusingregularslimes.
        bom_chococake=self.env['mrp.bom'].create({
            'product_id':product_chococake.id,
            'product_tmpl_id':product_chococake.product_tmpl_id.id,
            'product_uom_id':product_chococake.uom_id.id,
            'product_qty':1.0,
            'type':'normal',
            'bom_line_ids':[
                (0,0,{'product_id':product_chocolate.id,'product_qty':4}),
            ],
        })
        bom_double_chococake=self.env['mrp.bom'].create({
            'product_id':product_double_chococake.id,
            'product_tmpl_id':product_double_chococake.product_tmpl_id.id,
            'product_uom_id':product_double_chococake.uom_id.id,
            'product_qty':1.0,
            'type':'normal',
            'bom_line_ids':[
                (0,0,{'product_id':product_chococake.id,'product_qty':2}),
            ],
        })

        #CreatestwoMO:oneforeachBOM.
        mo_form=Form(self.env['mrp.production'])
        mo_form.product_id=product_chococake
        mo_form.bom_id=bom_chococake
        mo_form.product_qty=10
        mo_1=mo_form.save()
        mo_form=Form(self.env['mrp.production'])
        mo_form.product_id=product_double_chococake
        mo_form.bom_id=bom_double_chococake
        mo_form.product_qty=2
        mo_2=mo_form.save()

        report_values,docs,lines=self.get_report_forecast(product_template_ids=product_chococake.product_tmpl_id.ids)
        draft_picking_qty=docs['draft_picking_qty']
        draft_production_qty=docs['draft_production_qty']
        self.assertEqual(len(lines),0,"Musthave0line.")
        self.assertEqual(draft_picking_qty['in'],0)
        self.assertEqual(draft_picking_qty['out'],0)
        self.assertEqual(draft_production_qty['in'],10)
        self.assertEqual(draft_production_qty['out'],4)

        #ConfirmstheMOandchecksthereportlines.
        mo_1.action_confirm()
        mo_2.action_confirm()
        report_values,docs,lines=self.get_report_forecast(product_template_ids=product_chococake.product_tmpl_id.ids)
        draft_picking_qty=docs['draft_picking_qty']
        draft_production_qty=docs['draft_production_qty']
        self.assertEqual(len(lines),2,"Musthavetwoline.")
        line_1=lines[0]
        line_2=lines[1]
        self.assertEqual(line_1['document_in'].id,mo_1.id)
        self.assertEqual(line_1['quantity'],4)
        self.assertEqual(line_1['document_out'].id,mo_2.id)
        self.assertEqual(line_2['document_in'].id,mo_1.id)
        self.assertEqual(line_2['quantity'],6)
        self.assertEqual(line_2['document_out'],False)
        self.assertEqual(draft_picking_qty['in'],0)
        self.assertEqual(draft_picking_qty['out'],0)
        self.assertEqual(draft_production_qty['in'],0)
        self.assertEqual(draft_production_qty['out'],0)

    deftest_report_forecast_2_production_backorder(self):
        """Createsamanufacturingorderandproduceshalfthequantity.
        Thencreatesabackorderandchecksthereport.
        """
        #Configuresthewarehouse.
        warehouse=self.env.ref('stock.warehouse0')
        warehouse.manufacture_steps='pbm_sam'
        #Configuresaproduct.
        product_apple_pie=self.env['product.product'].create({
            'name':'ApplePie',
            'type':'product',
        })
        product_apple=self.env['product.product'].create({
            'name':'Apple',
            'type':'consu',
        })
        bom=self.env['mrp.bom'].create({
            'product_id':product_apple_pie.id,
            'product_tmpl_id':product_apple_pie.product_tmpl_id.id,
            'product_uom_id':product_apple_pie.uom_id.id,
            'product_qty':1.0,
            'type':'normal',
            'bom_line_ids':[
                (0,0,{'product_id':product_apple.id,'product_qty':5}),
            ],
        })
        #CreatesaMOandvalidatesthepickcomponents.
        mo_form=Form(self.env['mrp.production'])
        mo_form.product_id=product_apple_pie
        mo_form.bom_id=bom
        mo_form.product_qty=4
        mo_1=mo_form.save()
        mo_1.action_confirm()
        pick=mo_1.move_raw_ids.move_orig_ids.picking_id
        pick_form=Form(pick)
        withpick_form.move_line_ids_without_package.edit(0)asmove_line:
            move_line.qty_done=20
        pick=pick_form.save()
        pick.button_validate()
        #Produces3productsthencreatesabackorderfortheremainingproduct.
        mo_form=Form(mo_1)
        mo_form.qty_producing=3
        mo_1=mo_form.save()
        action=mo_1.button_mark_done()
        backorder_form=Form(self.env['mrp.production.backorder'].with_context(**action['context']))
        backorder=backorder_form.save()
        backorder.action_backorder()

        mo_2=(mo_1.procurement_group_id.mrp_production_ids-mo_1)
        #Checkstheforecastreport.
        report_values,docs,lines=self.get_report_forecast(product_template_ids=product_apple_pie.product_tmpl_id.ids)
        self.assertEqual(len(lines),1,"Musthaveonlyonelineaboutthebackorder")
        self.assertEqual(lines[0]['document_in'].id,mo_2.id)
        self.assertEqual(lines[0]['quantity'],1)
        self.assertEqual(lines[0]['document_out'],False)

        #Producesthelastunit.
        mo_form=Form(mo_2)
        mo_form.qty_producing=1
        mo_2=mo_form.save()
        mo_2.button_mark_done()
        #Checkstheforecastreport.
        report_values,docs,lines=self.get_report_forecast(product_template_ids=product_apple_pie.product_tmpl_id.ids)
        self.assertEqual(len(lines),0,"Musthavenoline")

    deftest_subkit_in_delivery_slip(self):
        """
        Supposethisstructure:
        SuperKit--|-Compo01x1
                    |-SubKitx1--|-Compo02x1
                    |              |-Compo03x1

        Thistestensuresthat,whendeliveringoneSuperKit,oneSubKit,oneCompo01andoneCompo02,
        andwhenputtinginpackthethirdcomponentoftheSuperKit,thedeliveryreportiscorrect.
        """
        compo01,compo02,compo03,subkit,superkit=self.env['product.product'].create([{
            'name':n,
            'type':'consu',
        }fornin['Compo01','Compo02','Compo03','SubKit','SuperKit']])

        self.env['mrp.bom'].create([{
            'product_tmpl_id':subkit.product_tmpl_id.id,
            'product_qty':1,
            'type':'phantom',
            'bom_line_ids':[
                (0,0,{'product_id':compo02.id,'product_qty':1}),
                (0,0,{'product_id':compo03.id,'product_qty':1}),
            ],
        },{
            'product_tmpl_id':superkit.product_tmpl_id.id,
            'product_qty':1,
            'type':'phantom',
            'bom_line_ids':[
                (0,0,{'product_id':compo01.id,'product_qty':1}),
                (0,0,{'product_id':subkit.id,'product_qty':1}),
            ],
        }])

        picking_form=Form(self.env['stock.picking'])
        picking_form.picking_type_id=self.picking_type_out
        picking_form.partner_id=self.partner
        withpicking_form.move_ids_without_package.new()asmove:
            move.product_id=superkit
            move.product_uom_qty=1
        withpicking_form.move_ids_without_package.new()asmove:
            move.product_id=subkit
            move.product_uom_qty=1
        withpicking_form.move_ids_without_package.new()asmove:
            move.product_id=compo01
            move.product_uom_qty=1
        withpicking_form.move_ids_without_package.new()asmove:
            move.product_id=compo02
            move.product_uom_qty=1
        picking=picking_form.save()
        picking.action_confirm()

        picking.move_lines.quantity_done=1
        move=picking.move_lines.filtered(lambdam:m.name=="SuperKit"andm.product_id==compo03)
        move.move_line_ids.result_package_id=self.env['stock.quant.package'].create({'name':'Package0001'})
        picking.button_validate()

        report=self.env['ir.actions.report']._get_report_from_name('stock.report_deliveryslip')
        html_report=report._render_qweb_html(picking.ids)[0].decode('utf-8').split('\n')
        keys=[
            "Package0001","Compo03",
            "Productswithnopackageassigned","Compo01","Compo02",
            "SuperKit","Compo01","Compo02",
            "SubKit","Compo02","Compo03",
        ]
        forlineinhtml_report:
            ifnotkeys:
                break
            ifkeys[0]inline:
                keys=keys[1:]
        self.assertFalse(keys,"Allkeysshouldbeinthereportwiththedefinedorder")
