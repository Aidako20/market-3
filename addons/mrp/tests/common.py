#-*-coding:utf-8-*-

fromflectra.testsimportForm
fromflectra.addons.mail.tests.commonimportmail_new_test_user
fromflectra.addons.stock.testsimportcommon2


classTestMrpCommon(common2.TestStockCommon):

    @classmethod
    defgenerate_mo(self,tracking_final='none',tracking_base_1='none',tracking_base_2='none',qty_final=5,qty_base_1=4,qty_base_2=1,picking_type_id=False,consumption=False):
        """Thisfunctiongenerateamanufacturingorderwithonefinal
        productandtwoconsumedproduct.Argumentsallowstochoose
        thetracking/qtyforeachdifferentproducts.Itreturnsthe
        MO,usedbomandthetreeproducts.
        """
        product_to_build=self.env['product.product'].create({
            'name':'YoungTom',
            'type':'product',
            'tracking':tracking_final,
        })
        product_to_use_1=self.env['product.product'].create({
            'name':'Botox',
            'type':'product',
            'tracking':tracking_base_1,
        })
        product_to_use_2=self.env['product.product'].create({
            'name':'OldTom',
            'type':'product',
            'tracking':tracking_base_2,
        })
        bom_1=self.env['mrp.bom'].create({
            'product_id':product_to_build.id,
            'product_tmpl_id':product_to_build.product_tmpl_id.id,
            'product_uom_id':self.uom_unit.id,
            'product_qty':1.0,
            'type':'normal',
            'consumption':consumptionifconsumptionelse'flexible',
            'bom_line_ids':[
                (0,0,{'product_id':product_to_use_2.id,'product_qty':qty_base_2}),
                (0,0,{'product_id':product_to_use_1.id,'product_qty':qty_base_1})
            ]})
        mo_form=Form(self.env['mrp.production'])
        ifpicking_type_id:
            mo_form.picking_type_id=picking_type_id
        mo_form.product_id=product_to_build
        mo_form.bom_id=bom_1
        mo_form.product_qty=qty_final
        mo=mo_form.save()
        mo.action_confirm()
        returnmo,bom_1,product_to_build,product_to_use_1,product_to_use_2

    @classmethod
    defsetUpClass(cls):
        super(TestMrpCommon,cls).setUpClass()

        #Updatedemoproducts
        (cls.product_2|cls.product_3|cls.product_4|cls.product_5|cls.product_6|cls.product_7_3|cls.product_8).write({
            'type':'product',
        })

        #UserData:mrpuserandmrpmanager
        cls.user_mrp_user=mail_new_test_user(
            cls.env,
            name='HildaFerachwal',
            login='hilda',
            email='h.h@example.com',
            notification_type='inbox',
            groups='mrp.group_mrp_user,stock.group_stock_user,mrp.group_mrp_byproducts',
        )
        cls.user_mrp_manager=mail_new_test_user(
            cls.env,
            name='GaryYoungwomen',
            login='gary',
            email='g.g@example.com',
            notification_type='inbox',
            groups='mrp.group_mrp_manager,stock.group_stock_user,mrp.group_mrp_byproducts',
        )

        cls.workcenter_1=cls.env['mrp.workcenter'].create({
            'name':'NuclearWorkcenter',
            'capacity':2,
            'time_start':10,
            'time_stop':5,
            'time_efficiency':80,
        })
        cls.workcenter_2=cls.env['mrp.workcenter'].create({
            'name':'SimpleWorkcenter',
            'capacity':1,
            'time_start':0,
            'time_stop':0,
            'time_efficiency':100,
        })
        cls.workcenter_3=cls.env['mrp.workcenter'].create({
            'name':'DoubleWorkcenter',
            'capacity':2,
            'time_start':0,
            'time_stop':0,
            'time_efficiency':100,
        })

        cls.bom_1=cls.env['mrp.bom'].create({
            'product_id':cls.product_4.id,
            'product_tmpl_id':cls.product_4.product_tmpl_id.id,
            'product_uom_id':cls.uom_unit.id,
            'product_qty':4.0,
            'consumption':'flexible',
            'operation_ids':[
            ],
            'type':'normal',
            'bom_line_ids':[
                (0,0,{'product_id':cls.product_2.id,'product_qty':2}),
                (0,0,{'product_id':cls.product_1.id,'product_qty':4})
            ]})
        cls.bom_2=cls.env['mrp.bom'].create({
            'product_id':cls.product_5.id,
            'product_tmpl_id':cls.product_5.product_tmpl_id.id,
            'product_uom_id':cls.product_5.uom_id.id,
            'consumption':'flexible',
            'product_qty':1.0,
            'operation_ids':[
                (0,0,{'name':'GiftWrapMaching','workcenter_id':cls.workcenter_1.id,'time_cycle':15,'sequence':1}),
            ],
            'type':'phantom',
            'sequence':2,
            'bom_line_ids':[
                (0,0,{'product_id':cls.product_4.id,'product_qty':2}),
                (0,0,{'product_id':cls.product_3.id,'product_qty':3})
            ]})
        cls.bom_3=cls.env['mrp.bom'].create({
            'product_id':cls.product_6.id,
            'product_tmpl_id':cls.product_6.product_tmpl_id.id,
            'product_uom_id':cls.uom_dozen.id,
            'consumption':'flexible',
            'product_qty':2.0,
            'operation_ids':[
                (0,0,{'name':'CuttingMachine','workcenter_id':cls.workcenter_1.id,'time_cycle':12,'sequence':1}),
                (0,0,{'name':'WeldMachine','workcenter_id':cls.workcenter_1.id,'time_cycle':18,'sequence':2}),
            ],
            'type':'normal',
            'bom_line_ids':[
                (0,0,{'product_id':cls.product_5.id,'product_qty':2}),
                (0,0,{'product_id':cls.product_4.id,'product_qty':8}),
                (0,0,{'product_id':cls.product_2.id,'product_qty':12})
            ]})
        cls.bom_4=cls.env['mrp.bom'].create({
            'product_id':cls.product_6.id,
            'product_tmpl_id':cls.product_6.product_tmpl_id.id,
            'consumption':'flexible',
            'product_qty':1.0,
            'operation_ids':[
                (0,0,{'name':'Rubitgentlywithacloth','workcenter_id':cls.workcenter_2.id,
                        'time_mode_batch':1,'time_mode':"auto",'sequence':1}),
            ],
            'type':'normal',
            'bom_line_ids':[
                (0,0,{'product_id':cls.product_1.id,'product_qty':1}),
            ]})
        cls.bom_5=cls.env['mrp.bom'].create({
            'product_id':cls.product_6.id,
            'product_tmpl_id':cls.product_6.product_tmpl_id.id,
            'consumption':'flexible',
            'product_qty':1.0,
            'operation_ids':[
                (0,0,{'name':'Rubitgentlywithaclothtwoatonce','workcenter_id':cls.workcenter_3.id,
                        'time_mode_batch':2,'time_mode':"auto",'sequence':1}),
            ],
            'type':'normal',
            'bom_line_ids':[
                (0,0,{'product_id':cls.product_1.id,'product_qty':1}),
            ]})
        cls.bom_6=cls.env['mrp.bom'].create({
            'product_id':cls.product_6.id,
            'product_tmpl_id':cls.product_6.product_tmpl_id.id,
            'consumption':'flexible',
            'product_qty':1.0,
            'operation_ids':[
                (0,0,{'name':'Rubitgentlywithaclothtwoatonce','workcenter_id':cls.workcenter_3.id,
                        'time_mode_batch':1,'time_mode':"auto",'sequence':1}),
            ],
            'type':'normal',
            'bom_line_ids':[
                (0,0,{'product_id':cls.product_1.id,'product_qty':1}),
            ]})

        cls.stock_location_14=cls.env['stock.location'].create({
            'name':'Shelf2',
            'location_id':cls.env.ref('stock.warehouse0').lot_stock_id.id,
        })
        cls.stock_location_components=cls.env['stock.location'].create({
            'name':'Shelf1',
            'location_id':cls.env.ref('stock.warehouse0').lot_stock_id.id,
        })
        cls.laptop=cls.env['product.product'].create({
            'name':'AcousticBlocScreens',
            'uom_id':cls.env.ref("uom.product_uom_unit").id,
            'uom_po_id':cls.env.ref("uom.product_uom_unit").id,
            'type':'product',
            'tracking':'none',
            'categ_id':cls.env.ref('product.product_category_all').id,
        })
        cls.graphics_card=cls.env['product.product'].create({
            'name':'IndividualWorkplace',
            'uom_id':cls.env.ref("uom.product_uom_unit").id,
            'uom_po_id':cls.env.ref("uom.product_uom_unit").id,
            'type':'product',
            'tracking':'none',
            'categ_id':cls.env.ref('product.product_category_all').id,
        })

    @classmethod
    defmake_prods(cls,n):
        return[
            cls.env["product.product"].create(
                {"name":f"p{k+1}","type":"product"}
            )
            forkinrange(n)
        ]

    @classmethod
    defmake_bom(cls,p,*cs):
        returncls.env["mrp.bom"].create(
            {
                "product_tmpl_id":p.product_tmpl_id.id,
                "product_id":p.id,
                "product_qty":1,
                "type":"phantom",
                "product_uom_id":cls.uom_unit.id,
                "bom_line_ids":[
                    (0,0,{
                        "product_id":c.id,
                        "product_qty":1,
                        "product_uom_id":cls.uom_unit.id
                    })
                    forcincs
                ],
            }
        )
