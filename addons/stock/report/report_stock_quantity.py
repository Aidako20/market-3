#-*-coding:utf-8-*-
#PartofFlectra.SeeLICENSEfileforfullcopyrightandlicensingdetails.

fromflectraimportfields,models,tools,api


classReportStockQuantity(models.Model):
    _name='report.stock.quantity'
    _auto=False
    _description='StockQuantityReport'

    date=fields.Date(string='Date',readonly=True)
    product_tmpl_id=fields.Many2one('product.template',related='product_id.product_tmpl_id')
    product_id=fields.Many2one('product.product',string='Product',readonly=True)
    state=fields.Selection([
        ('forecast','ForecastedStock'),
        ('in','ForecastedReceipts'),
        ('out','ForecastedDeliveries'),
    ],string='State',readonly=True)
    product_qty=fields.Float(string='Quantity',readonly=True)
    company_id=fields.Many2one('res.company',readonly=True)
    warehouse_id=fields.Many2one('stock.warehouse',readonly=True)

    definit(self):
        """
        Becausewecantransferaproductfromawarehousetoanotheronethankstoastockmove,weneedto
        generatesomefakestockmovesbeforeprocessingallofthem.Thatway,incaseofaninterwarehouse
        transfer,wewillhaveanoutgoingstockmoveforthesourcewarehouseandanincomingstockmove
        forthedestinationone.Todoso,weselectallrelevantSM(incoming,outgoingandinterwarehouse),
        thenweduplicatealltheseSMandeditthevalues:
            -product_qtyiskeptiftheSMisnottheduplicatedoneoriftheSMisaninterwarehouseone
                otherwise,wesetthevalueto0(thisallowsustofilteritoutduringtheSMprocessing)
            -thesourcewarehouseiskeptiftheSMisnottheduplicatedone
            -thedestwarehouseiskeptiftheSMisnottheduplicatedoneandisnotaninterwarehouse
                ORtheSMistheduplicatedoneandisaninterwarehouse
            -theusageofsource/destlocationfollowsthesamelogicasthewarehouses
        """
        tools.drop_view_if_exists(self._cr,'report_stock_quantity')
        query="""
CREATEorREPLACEVIEWreport_stock_quantityAS(
WITH
    existing_sm(id,product_id,product_qty,date,state,company_id,whs_id,whd_id,ls_usage,ld_usage)AS(
        SELECTm.id,m.product_id,m.product_qty,m.date,m.state,m.company_id,whs.id,whd.id,ls.usage,ld.usage
        FROMstock_movem
        LEFTJOINstock_locationlson(ls.id=m.location_id)
        LEFTJOINstock_locationldon(ld.id=m.location_dest_id)
        LEFTJOINstock_warehousewhsONls.parent_pathlikeconcat('%/',whs.view_location_id,'/%')
        LEFTJOINstock_warehousewhdONld.parent_pathlikeconcat('%/',whd.view_location_id,'/%')
        LEFTJOINproduct_productpponpp.id=m.product_id
        LEFTJOINproduct_templateptonpt.id=pp.product_tmpl_id
        WHEREpt.type='product'AND
            (whs.idISNOTNULLORwhd.idISNOTNULL)AND
            (whs.idISNULLORwhd.idISNULLORwhs.id!=whd.id)AND
            m.product_qty!=0AND
            m.stateNOTIN('draft','cancel')AND
            (m.stateIN('draft','waiting','confirmed','partially_available','assigned')orm.date>=((now()attimezone'utc')::date-interval'3month'))
    ),
    all_sm(id,product_id,product_qty,date,state,company_id,whs_id,whd_id,ls_usage,ld_usage)AS(
        SELECTsm.id,sm.product_id,
            CASE
                WHENis_duplicated=0THENsm.product_qty
                WHENsm.whs_idISNOTNULLANDsm.whd_idISNOTNULLANDsm.whs_id!=sm.whd_idTHENsm.product_qty
                ELSE0
            END,
            sm.date,sm.state,sm.company_id,
            CASEWHENis_duplicated=0THENsm.whs_idEND,
            CASE
                WHENis_duplicated=0ANDNOT(sm.whs_idISNOTNULLANDsm.whd_idISNOTNULLANDsm.whs_id!=sm.whd_id)THENsm.whd_id
                WHENis_duplicated=1AND(sm.whs_idISNOTNULLANDsm.whd_idISNOTNULLANDsm.whs_id!=sm.whd_id)THENsm.whd_id
            END,
            CASEWHENis_duplicated=0THENsm.ls_usageEND,
            CASE
                WHENis_duplicated=0ANDNOT(sm.whs_idISNOTNULLANDsm.whd_idISNOTNULLANDsm.whs_id!=sm.whd_id)THENsm.ld_usage
                WHENis_duplicated=1AND(sm.whs_idISNOTNULLANDsm.whd_idISNOTNULLANDsm.whs_id!=sm.whd_id)THENsm.ld_usage
            END
        FROM
            GENERATE_SERIES(0,1,1)is_duplicated,
            existing_smsm
    )
SELECT
    MIN(id)asid,
    product_id,
    state,
    date,
    sum(product_qty)asproduct_qty,
    company_id,
    warehouse_id
FROM(SELECT
        m.id,
        m.product_id,
        CASE
            WHENm.whs_idISNOTNULLANDm.whd_idISNULLTHEN'out'
            WHENm.whd_idISNOTNULLANDm.whs_idISNULLTHEN'in'
        ENDASstate,
        m.date::dateASdate,
        CASE
            WHENm.whs_idISNOTNULLANDm.whd_idISNULLTHEN-m.product_qty
            WHENm.whd_idISNOTNULLANDm.whs_idISNULLTHENm.product_qty
        ENDASproduct_qty,
        m.company_id,
        CASE
            WHENm.whs_idISNOTNULLANDm.whd_idISNULLTHENm.whs_id
            WHENm.whd_idISNOTNULLANDm.whs_idISNULLTHENm.whd_id
        ENDASwarehouse_id
    FROM
        all_smm
    WHERE
        m.product_qty!=0AND
        m.state!='done'
    UNIONALL
    SELECT
        -q.idasid,
        q.product_id,
        'forecast'asstate,
        date.*::date,
        q.quantityasproduct_qty,
        q.company_id,
        wh.idaswarehouse_id
    FROM
        GENERATE_SERIES((now()attimezone'utc')::date-interval'3month',
        (now()attimezone'utc')::date+interval'3month','1day'::interval)date,
        stock_quantq
    LEFTJOINstock_locationlon(l.id=q.location_id)
    LEFTJOINstock_warehousewhONl.parent_pathlikeconcat('%/',wh.view_location_id,'/%')
    WHERE
        (l.usage='internal'ANDwh.idISNOTNULL)OR
        l.usage='transit'
    UNIONALL
    SELECT
        m.id,
        m.product_id,
        'forecast'asstate,
        GENERATE_SERIES(
        CASE
            WHENm.state='done'THEN(now()attimezone'utc')::date-interval'3month'
            ELSEm.date::date
        END,
        CASE
            WHENm.state!='done'THEN(now()attimezone'utc')::date+interval'3month'
            ELSEm.date::date-interval'1day'
        END,'1day'::interval)::datedate,
        CASE
            WHENm.whs_idISNOTNULLANDm.whd_idISNULLANDm.state='done'THENm.product_qty
            WHENm.whd_idISNOTNULLANDm.whs_idISNULLANDm.state='done'THEN-m.product_qty
            WHENm.whs_idISNOTNULLANDm.whd_idISNULLTHEN-m.product_qty
            WHENm.whd_idISNOTNULLANDm.whs_idISNULLTHENm.product_qty
        ENDASproduct_qty,
        m.company_id,
        CASE
            WHENm.whs_idISNOTNULLANDm.whd_idISNULLTHENm.whs_id
            WHENm.whd_idISNOTNULLANDm.whs_idISNULLTHENm.whd_id
        ENDASwarehouse_id
    FROM
        all_smm
    WHERE
        m.product_qty!=0)ASforecast_qty
GROUPBYproduct_id,state,date,company_id,warehouse_id
);
"""
        self.env.cr.execute(query)

    @api.model
    defread_group(self,domain,fields,groupby,offset=0,limit=None,orderby=False,lazy=True):
        foriinrange(len(domain)):
            ifdomain[i][0]=='product_tmpl_id'anddomain[i][1]in('=','in'):
                tmpl=self.env['product.template'].browse(domain[i][2])
                #Avoidthesubquerydonefortherelated,thepostgresqlwillplanbetterwiththeSQLview
                #andthenimprovealottheperformancefortheforecastedreportoftheproducttemplate.
                domain[i]=('product_id','in',tmpl.with_context(active_test=False).product_variant_ids.ids)
        returnsuper().read_group(domain,fields,groupby,offset,limit,orderby,lazy)
