flectra.define('stock.ReplenishReport',function(require){
"usestrict";

constclientAction=require('report.client_action');
constcore=require('web.core');
constdom=require('web.dom');
constGraphView=require('web.GraphView');

constqweb=core.qweb;
const_t=core._t;


constReplenishReport=clientAction.extend({
    /**
     *@override
     */
    init:function(parent,action,options){
        this._super.apply(this,arguments);
        this.context=action.context;
        this.productId=this.context.active_id;
        this.resModel=this.context.active_model||this.context.params.active_model||'product.template';
        constisTemplate=this.resModel==='product.template';
        this.actionMethod=`action_product_${isTemplate?'tmpl_':''}forecast_report`;
        constreportName=`report_product_${isTemplate?'template':'product'}_replenishment`;
        this.report_url=`/report/html/stock.${reportName}/${this.productId}`;
        if(this.context.warehouse){
            this.active_warehouse={id:this.context.warehouse};
        }
        this.report_url+=`?context=${JSON.stringify(this.context)}&force_context_lang=1`;
        this._title=action.name;
    },

    /**
     *@override
     */
    start:function(){
        returnPromise.all([
            this._super(...arguments),
            this._renderWarehouseFilters(),
        ]).then(()=>{
            this._renderButtons();
        });
    },

    /**
     *@override
     */
    on_attach_callback:function(){
        this._super();
        this._createGraphView();
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *Instanciatesachartgraphandmovesitintothereport(whichisintheiframe).
     */
    _createGraphView:asyncfunction(){
        letviewController;
        constappendGraph=()=>{
            promController.then(()=>{
                this.iframe.removeEventListener('load',appendGraph);
                const$reportGraphDiv=$(this.iframe).contents().find('.o_report_graph');
                if(!$reportGraphDiv){
                    return;
                }
                dom.append(this.$el,viewController.$el,{
                    in_DOM:true,
                    callbacks:[{widget:viewController}],
                });
                constrenderer=viewController.renderer;
                //Removethegraphcontrolpanel.
                $('.o_control_panel:last').remove();
                const$graphPanel=$('.o_graph_controller');
                $graphPanel.appendTo($reportGraphDiv);

                if(!renderer.state.dataPoints.length){
                    //Changesthe"NoData"helpermessage.
                    constgraphHelper=renderer.$('.o_view_nocontent');
                    constnewMessage=qweb.render('View.NoContentHelper',{
                        description:_t("Trytoaddsomeincomingoroutgoingtransfers."),
                    });
                    graphHelper.replaceWith(newMessage);
                }else{
                    this.chart=renderer.chart;
                    //Lamehacktofixthesizeofthegraph.
                    setTimeout(()=>{
                        this.chart.canvas.height=300;
                        this.chart.canvas.style.height="300px";
                        this.chart.resize();
                    },1);
                }
            });
        };
        //Waittheiframefoappendthegraphchartandmoveitintotheiframe.
        this.iframe.addEventListener('load',appendGraph);

        constmodel='report.stock.quantity';
        constpromController=this._rpc({
            model:model,
            method:'fields_view_get',
            kwargs:{
                view_type:'graph',
            }
        }).then(viewInfo=>{
            constparams={
                modelName:model,
                domain:this._getReportDomain(),
                hasActionMenus:false,
                context:{fill_temporal:false},
            };
            constgraphView=newGraphView(viewInfo,params);
            returngraphView.getController(this);
        }).then(res=>{
            viewController=res;

            //Hacktoputtheres_modelontheurl.Thisway,thereportalwaysknowonwithres_modelitrefers.
            if(location.href.indexOf('active_model')===-1){
                consturl=window.location.href+`&active_model=${this.resModel}`;
                window.history.pushState({},"",url);
            }
            constfragment=document.createDocumentFragment();
            returnviewController.appendTo(fragment);
        });
    },

    /**
     *Returntheactiontoopenthisreport.
     *
     *@returns{Promise}
     */
    _getForecastedReportAction:function(){
        returnthis._rpc({
            model:this.resModel,
            method:this.actionMethod,
            args:[this.productId],
            context:this.context,
        });
    },

    /**
     *Returnsadomaintofilterontheproductvariantorproducttemplate
     *dependingoftheactivemodel.
     *
     *@returns{Array}
     */
    _getReportDomain:function(){
        constdomain=[
            ['state','=','forecast'],
            ['warehouse_id','=',this.active_warehouse.id],
        ];
        if(this.resModel==='product.template'){
            domain.push(['product_tmpl_id','=',this.productId]);
        }elseif(this.resModel==='product.product'){
            domain.push(['product_id','=',this.productId]);
        }
        returndomain;
    },

    /**
     *TODO
     *
     *@param{Object}additionnalContext
     */
    _reloadReport:function(additionnalContext){
        returnthis._getForecastedReportAction().then((action)=>{
            action.context=Object.assign({
                active_id:this.productId,
                active_model:this.resModel,
            },this.context,additionnalContext);
            returnthis.do_action(action,{replace_last_action:true});
        });
    },

    /**
     *Rendersthe'Replenish'buttonandreplacesthedefault'Print'buttonbythisnewone.
     */
    _renderButtons:function(){
        const$newButtons=$(qweb.render('replenish_report_buttons',{}));
        this.$buttons.find('.o_report_print').replaceWith($newButtons);
        this.$buttons.on('click','.o_report_replenish_buy',this._onClickReplenish.bind(this));
        this.controlPanelProps.cp_content={
            $buttons:this.$buttons,
        };
    },

    /**
     *TODO
     *@returns{Promise}
     */
    _renderWarehouseFilters:function(){
        returnthis._rpc({
            model:'report.stock.report_product_product_replenishment',
            method:'get_filter_state',
        }).then((res)=>{
            constwarehouses=res.warehouses;
            constactive_warehouse=(this.active_warehouse&&this.active_warehouse.id)||res.active_warehouse;
            if(active_warehouse){
                this.active_warehouse=_.findWhere(warehouses,{id:active_warehouse});
            }else{
                this.active_warehouse=warehouses[0];
            }
            const$filters=$(qweb.render('warehouseFilter',{
                active_warehouse:this.active_warehouse,
                warehouses:warehouses,
                displayWarehouseFilter:(warehouses.length>1),
            }));
            //Bindhandlers.
            $filters.on('click','.warehouse_filter',this._onClickFilter.bind(this));
            this.$('.o_search_options').append($filters);
        });
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *Openstheproductreplenishwizard.Couldre-openthereportifpending
     *forecastedquantitiesneedtobeupdated.
     *
     *@returns{Promise}
     */
    _onClickReplenish:function(){
        constcontext=Object.assign({},this.context);
        if(this.resModel==='product.product'){
            context.default_product_id=this.productId;
        }elseif(this.resModel==='product.template'){
            context.default_product_tmpl_id=this.productId;
        }
        context.default_warehouse_id=this.active_warehouse.id;

        conston_close=function(res){
            if(res&&res.special){
                //Donothingwhenthewizardisdiscarded.
                return;
            }
            //Otherwise,opensagainthereport.
            returnthis._reloadReport();
        };

        constaction={
            res_model:'product.replenish',
            name:_t('ProductReplenish'),
            type:'ir.actions.act_window',
            views:[[false,'form']],
            target:'new',
            context:context,
        };

        returnthis.do_action(action,{
            on_close:on_close.bind(this),
        });
    },

    /**
     *Re-opensthereportwithdataforthespecifiedwarehouse.
     *
     *@returns{Promise}
     */
    _onClickFilter:function(ev){
        constdata=ev.target.dataset;
        constwarehouse_id=Number(data.warehouseId);
        returnthis._reloadReport({warehouse:warehouse_id});
    }
});

core.action_registry.add('replenish_report',ReplenishReport);

});