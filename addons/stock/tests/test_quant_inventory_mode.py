#-*-coding:utf-8-*-
#PartofFlectra.SeeLICENSEfileforfullcopyrightandlicensingdetails.

fromflectra.addons.mail.tests.commonimportmail_new_test_user
fromflectra.tests.commonimportSavepointCase
fromflectra.exceptionsimportAccessError,UserError


classTestEditableQuant(SavepointCase):
    @classmethod
    defsetUpClass(cls):
        super(TestEditableQuant,cls).setUpClass()

        #Shortcuttocall`stock.quant`with`inventorymode`setinthecontext
        cls.Quant=cls.env['stock.quant'].with_context(inventory_mode=True)

        Product=cls.env['product.product']
        Location=cls.env['stock.location']
        cls.product=Product.create({
            'name':'ProductA',
            'type':'product',
            'categ_id':cls.env.ref('product.product_category_all').id,
        })
        cls.product2=Product.create({
            'name':'ProductB',
            'type':'product',
            'categ_id':cls.env.ref('product.product_category_all').id,
        })
        cls.product_tracked_sn=Product.create({
            'name':'ProducttrackedbySN',
            'type':'product',
            'tracking':'serial',
            'categ_id':cls.env.ref('product.product_category_all').id,
        })
        cls.warehouse=Location.create({
            'name':'Warehouse',
            'usage':'internal',
        })
        cls.stock=Location.create({
            'name':'Stock',
            'usage':'internal',
            'location_id':cls.warehouse.id,
        })
        cls.room1=Location.create({
            'name':'RoomA',
            'usage':'internal',
            'location_id':cls.stock.id,
        })
        cls.room2=Location.create({
            'name':'RoomB',
            'usage':'internal',
            'location_id':cls.stock.id,
        })
        cls.inventory_loss=cls.product.property_stock_inventory

    deftest_create_quant_1(self):
        """Createanewquantwhodon'texistyet.
        """
        #Checkswedon'thaveanyquantforthisproduct.
        quants=self.env['stock.quant'].search([('product_id','=',self.product.id)])
        self.assertEqual(len(quants),0)
        self.Quant.create({
            'product_id':self.product.id,
            'location_id':self.stock.id,
            'inventory_quantity':24
        })
        quants=self.env['stock.quant'].search([
            ('product_id','=',self.product.id),
            ('quantity','>',0),
        ])
        #Checkswehavenowaquant,andalsochecksthequantityisequalsto
        #whatwesetin`inventory_quantity`field.
        self.assertEqual(len(quants),1)
        self.assertEqual(quants.quantity,24)

        stock_move=self.env['stock.move'].search([
            ('product_id','=',self.product.id),
        ])
        self.assertEqual(stock_move.location_id.id,self.inventory_loss.id)
        self.assertEqual(stock_move.location_dest_id.id,self.stock.id)

    deftest_create_quant_2(self):
        """Trytocreateaquantwhoalreadyexist.
        Mustupdatetheexistingquantinsteadofcreatinganewone.
        """
        #Createsaquants...
        first_quant=self.Quant.create({
            'product_id':self.product.id,
            'location_id':self.room1.id,
            'quantity':12,
        })
        quants=self.env['stock.quant'].search([
            ('product_id','=',self.product.id),
            ('quantity','>',0),
        ])
        self.assertEqual(len(quants),1)
        #...thentrytocreateananotherquantforthesameproduct/location.
        second_quant=self.Quant.create({
            'product_id':self.product.id,
            'location_id':self.room1.id,
            'inventory_quantity':24,
        })
        quants=self.env['stock.quant'].search([
            ('product_id','=',self.product.id),
            ('quantity','>',0),
        ])
        #Checkswestillhaveonlyonequant,andfirstquantquantitywas
        #updated,andsecondquanthadthesameIDthanthefirstquant.
        self.assertEqual(len(quants),1)
        self.assertEqual(first_quant.quantity,24)
        self.assertEqual(first_quant.id,second_quant.id)
        stock_move=self.env['stock.move'].search([
            ('product_id','=',self.product.id),
        ])
        self.assertEqual(len(stock_move),1)

    deftest_create_quant_3(self):
        """Trytocreateaquantwith`inventory_quantity`butnotininventorymode.
        Createstwoquantsnotininventorymode:
          -Onewith`quantity`(thisonemustbeOK)
          -Onewith`inventory_quantity`(thisonemustbenull)
        """
        valid_quant=self.env['stock.quant'].create({
            'product_id':self.product.id,
            'location_id':self.room1.id,
            'quantity':10,
        })
        invalid_quant=self.env['stock.quant'].create({
            'product_id':self.product2.id,
            'location_id':self.room1.id,
            'inventory_quantity':20,
        })
        self.assertEqual(valid_quant.quantity,10)
        self.assertEqual(invalid_quant.quantity,0)

    deftest_create_quant_4(self):
        """Trytocreatetreequantsininventorymodewith`quantity`and/or`inventory_quantity`.
        Createstwoquantsnotininventorymode:
          -Onewith`quantity`(thisonemustbeOK,but`inventory_mode`isuselesshereasit
            doesn'tenterintheinventorymodecaseandcreatequantasusual)
          -Onewith`inventory_quantity`(thisonemustbeOK)
          -Onewiththetwovalues(thisonemustraisesanerrorasitentersintheinventory
            modebutusercan'teditdirectly`quantity`ininventorymode)
        """
        valid_quant=self.env['stock.quant'].with_context(inventory_mode=True).create({
            'product_id':self.product.id,
            'location_id':self.room1.id,
            'quantity':10,
        })
        inventoried_quant=self.env['stock.quant'].with_context(inventory_mode=True).create({
            'product_id':self.product2.id,
            'location_id':self.room1.id,
            'inventory_quantity':20,
        })
        withself.assertRaises(UserError):
            invalid_quant=self.env['stock.quant'].with_context(inventory_mode=True).create({
                'product_id':self.product.id,
                'location_id':self.room2.id,
                'quantity':10,
                'inventory_quantity':20,
            })
        self.assertEqual(valid_quant.quantity,10)
        self.assertEqual(inventoried_quant.quantity,20)

    deftest_edit_quant_1(self):
        """Increasesmanuallyquantityofaquant.
        """
        quant=self.Quant.create({
            'product_id':self.product.id,
            'location_id':self.room1.id,
            'quantity':12,
        })
        quant.inventory_quantity=24
        self.assertEqual(quant.quantity,24)
        stock_move=self.env['stock.move'].search([
            ('product_id','=',self.product.id),
        ])
        self.assertEqual(stock_move.location_id.id,self.inventory_loss.id)
        self.assertEqual(stock_move.location_dest_id.id,self.room1.id)

    deftest_edit_quant_2(self):
        """Decreasesmanuallyquantityofaquant.
        """
        quant=self.Quant.create({
            'product_id':self.product.id,
            'location_id':self.room1.id,
            'quantity':12,
        })
        quant.inventory_quantity=8
        self.assertEqual(quant.quantity,8)
        stock_move=self.env['stock.move'].search([
            ('product_id','=',self.product.id),
        ])
        self.assertEqual(stock_move.location_id.id,self.room1.id)
        self.assertEqual(stock_move.location_dest_id.id,self.inventory_loss.id)

    deftest_edit_quant_3(self):
        """Trytoeditarecordwithouttheinventorymode.
        Mustraiseanerror.
        """
        self.demo_user=mail_new_test_user(
            self.env,
            name='PaulinePoivraisselle',
            login='pauline',
            email='p.p@example.com',
            groups='base.group_user',
        )
        user_admin=self.env.ref('base.user_admin')
        quant=self.Quant.create({
            'product_id':self.product.id,
            'location_id':self.room1.id,
            'quantity':12
        })
        self.assertEqual(quant.quantity,12)
        #Trytowriteonquantwithoutpermission
        withself.assertRaises(AccessError):
            quant.with_user(self.demo_user).write({'inventory_quantity':8})
        self.assertEqual(quant.quantity,12)

        #Trytowriteonquantwithpermission
        quant.with_user(user_admin).write({'inventory_quantity':8})
        self.assertEqual(quant.quantity,8)
