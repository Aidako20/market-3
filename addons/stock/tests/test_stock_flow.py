#-*-coding:utf-8-*-

fromflectra.addons.stock.tests.commonimportTestStockCommon
fromflectra.exceptionsimportValidationError
fromflectra.testsimportForm
fromflectra.toolsimportmute_logger,float_round
fromflectraimportfields


classTestStockFlow(TestStockCommon):
    defsetUp(cls):
        super(TestStockFlow,cls).setUp()
        decimal_product_uom=cls.env.ref('product.decimal_product_uom')
        decimal_product_uom.digits=3
        cls.partner_company2=cls.env['res.partner'].create({
            'name':'MyCompany(Chicago)-demo',
            'email':'chicago@yourcompany.com',
            'company_id':False,
        })
        cls.company=cls.env['res.company'].create({
            'currency_id':cls.env.ref('base.USD').id,
            'partner_id':cls.partner_company2.id,
            'name':'MyCompany(Chicago)-demo',
        })

    @mute_logger('flectra.addons.base.models.ir_model','flectra.models')
    deftest_00_picking_create_and_transfer_quantity(self):
        """Basicstockoperationonincomingandoutgoingshipment."""
        LotObj=self.env['stock.production.lot']
        #----------------------------------------------------------------------
        #CreateincomingshipmentofproductA,B,C,D
        #----------------------------------------------------------------------
        #  ProductA(1Unit),ProductC(10Unit)
        #  ProductB(1Unit),ProductD(10Unit)
        #  ProductD(5Unit)
        #----------------------------------------------------------------------

        picking_in=self.PickingObj.create({
            'picking_type_id':self.picking_type_in,
            'location_id':self.supplier_location,
            'location_dest_id':self.stock_location})
        move_a=self.MoveObj.create({
            'name':self.productA.name,
            'product_id':self.productA.id,
            'product_uom_qty':1,
            'product_uom':self.productA.uom_id.id,
            'picking_id':picking_in.id,
            'location_id':self.supplier_location,
            'location_dest_id':self.stock_location})
        move_b=self.MoveObj.create({
            'name':self.productB.name,
            'product_id':self.productB.id,
            'product_uom_qty':1,
            'product_uom':self.productB.uom_id.id,
            'picking_id':picking_in.id,
            'location_id':self.supplier_location,
            'location_dest_id':self.stock_location})
        move_c=self.MoveObj.create({
            'name':self.productC.name,
            'product_id':self.productC.id,
            'product_uom_qty':10,
            'product_uom':self.productC.uom_id.id,
            'picking_id':picking_in.id,
            'location_id':self.supplier_location,
            'location_dest_id':self.stock_location})
        move_d=self.MoveObj.create({
            'name':self.productD.name,
            'product_id':self.productD.id,
            'product_uom_qty':10,
            'product_uom':self.productD.uom_id.id,
            'picking_id':picking_in.id,
            'location_id':self.supplier_location,
            'location_dest_id':self.stock_location})
        self.MoveObj.create({
            'name':self.productD.name,
            'product_id':self.productD.id,
            'product_uom_qty':5,
            'product_uom':self.productD.uom_id.id,
            'picking_id':picking_in.id,
            'location_id':self.supplier_location,
            'location_dest_id':self.stock_location})

        #Checkincomingshipmentmovelinesstate.
        formoveinpicking_in.move_lines:
            self.assertEqual(move.state,'draft','Wrongstateofmoveline.')
        #Confirmincomingshipment.
        picking_in.action_confirm()
        #Checkincomingshipmentmovelinesstate.
        formoveinpicking_in.move_lines:
            self.assertEqual(move.state,'assigned','Wrongstateofmoveline.')

        #----------------------------------------------------------------------
        #Replacepackoperationofincomingshipments.
        #----------------------------------------------------------------------
        picking_in.action_assign()
        move_a.move_line_ids.qty_done=4
        move_b.move_line_ids.qty_done=5
        move_c.move_line_ids.qty_done=5
        move_d.move_line_ids.qty_done=5
        lot2_productC=LotObj.create({'name':'CLot2','product_id':self.productC.id,'company_id':self.env.company.id})
        self.StockPackObj.create({
            'product_id':self.productC.id,
            'qty_done':2,
            'product_uom_id':self.productC.uom_id.id,
            'location_id':self.supplier_location,
            'location_dest_id':self.stock_location,
            'move_id':move_c.id,
            'lot_id':lot2_productC.id,
        })
        self.StockPackObj.create({
            'product_id':self.productD.id,
            'qty_done':2,
            'product_uom_id':self.productD.uom_id.id,
            'location_id':self.supplier_location,
            'location_dest_id':self.stock_location,
            'move_id':move_d.id
        })

        #Checkincomingshipmenttotalquantityofpackoperation
        total_qty=sum(self.StockPackObj.search([('move_id','in',picking_in.move_lines.ids)]).mapped('qty_done'))
        self.assertEqual(total_qty,23,'Wrongquantityinpackoperation')

        #TransferIncomingShipment.
        picking_in._action_done()

        #----------------------------------------------------------------------
        #Checkstate,quantityandtotalmovesofincomingshipment.
        #----------------------------------------------------------------------

        #Checktotalnoofmovelinesofincomingshipment.movelineedisappearfromoriginalpickingtogoinbackorder.
        self.assertEqual(len(picking_in.move_lines),4,'Wrongnumberofmovelines.')
        #Checkincomingshipmentstate.
        self.assertEqual(picking_in.state,'done','Incomingshipmentstateshouldbedone.')
        #Checkincomingshipmentmovelinesstate.
        formoveinpicking_in.move_lines:
            self.assertEqual(move.state,'done','Wrongstateofmoveline.')
        #CheckproductAdonequantitymustbe3and1
        moves=self.MoveObj.search([('product_id','=',self.productA.id),('picking_id','=',picking_in.id)])
        self.assertEqual(moves.product_uom_qty,4.0,'WrongmovequantityforproductA.')
        #CheckproductBdonequantitymustbe4and1
        moves=self.MoveObj.search([('product_id','=',self.productB.id),('picking_id','=',picking_in.id)])
        self.assertEqual(moves.product_uom_qty,5.0,'WrongmovequantityforproductB.')
        #CheckproductCdonequantitymustbe7
        c_done_qty=self.MoveObj.search([('product_id','=',self.productC.id),('picking_id','=',picking_in.id)],limit=1).product_uom_qty
        self.assertEqual(c_done_qty,7.0,'WrongmovequantityofproductC(%sfoundinsteadof7)'%(c_done_qty))
        #CheckproductDdonequantitymustbe7
        d_done_qty=self.MoveObj.search([('product_id','=',self.productD.id),('picking_id','=',picking_in.id)],limit=1).product_uom_qty
        self.assertEqual(d_done_qty,7.0,'WrongmovequantityofproductD(%sfoundinsteadof7)'%(d_done_qty))

        #----------------------------------------------------------------------
        #CheckBackorderofIncomingshipment.
        #----------------------------------------------------------------------

        #Checkbackordercreatedornot.
        back_order_in=self.PickingObj.search([('backorder_id','=',picking_in.id)])
        self.assertEqual(len(back_order_in),1,'Backordershouldbecreated.')
        #Checktotalmovelinesofbackorder.
        self.assertEqual(len(back_order_in.move_lines),2,'Wrongnumberofmovelines.')
        #Checkbackordershouldbecreatedwith3quantityofproductC.
        moves=self.MoveObj.search([('product_id','=',self.productC.id),('picking_id','=',back_order_in.id)])
        product_c_qty=[move.product_uom_qtyformoveinmoves]
        self.assertEqual(sum(product_c_qty),3.0,'WrongmovequantityofproductC(%sfoundinsteadof3)'%(product_c_qty))
        #Checkbackordershouldbecreatedwith8quantityofproductD.
        moves=self.MoveObj.search([('product_id','=',self.productD.id),('picking_id','=',back_order_in.id)])
        product_d_qty=[move.product_uom_qtyformoveinmoves]
        self.assertEqual(sum(product_d_qty),8.0,'WrongmovequantityofproductD(%sfoundinsteadof8)'%(product_d_qty))

        #======================================================================
        #CreateOutgoingshipmentwith...
        #  productA(10Unit),productB(5Unit)
        #  productC( 3unit),productD(10Unit)
        #======================================================================

        picking_out=self.PickingObj.create({
            'picking_type_id':self.picking_type_out,
            'location_id':self.stock_location,
            'location_dest_id':self.customer_location})
        move_cust_a=self.MoveObj.create({
            'name':self.productA.name,
            'product_id':self.productA.id,
            'product_uom_qty':10,
            'product_uom':self.productA.uom_id.id,
            'picking_id':picking_out.id,
            'location_id':self.stock_location,
            'location_dest_id':self.customer_location})
        move_cust_b=self.MoveObj.create({
            'name':self.productB.name,
            'product_id':self.productB.id,
            'product_uom_qty':5,
            'product_uom':self.productB.uom_id.id,
            'picking_id':picking_out.id,
            'location_id':self.stock_location,
            'location_dest_id':self.customer_location})
        move_cust_c=self.MoveObj.create({
            'name':self.productC.name,
            'product_id':self.productC.id,
            'product_uom_qty':3,
            'product_uom':self.productC.uom_id.id,
            'picking_id':picking_out.id,
            'location_id':self.stock_location,
            'location_dest_id':self.customer_location})
        move_cust_d=self.MoveObj.create({
            'name':self.productD.name,
            'product_id':self.productD.id,
            'product_uom_qty':10,
            'product_uom':self.productD.uom_id.id,
            'picking_id':picking_out.id,
            'location_id':self.stock_location,
            'location_dest_id':self.customer_location})
        #Confirmoutgoingshipment.
        picking_out.action_confirm()
        formoveinpicking_out.move_lines:
            self.assertEqual(move.state,'confirmed','Wrongstateofmoveline.')
        #Productassigntooutgoingshipments
        picking_out.action_assign()
        self.assertEqual(move_cust_a.state,'partially_available','Wrongstateofmoveline.')
        self.assertEqual(move_cust_b.state,'assigned','Wrongstateofmoveline.')
        self.assertEqual(move_cust_c.state,'assigned','Wrongstateofmoveline.')
        self.assertEqual(move_cust_d.state,'partially_available','Wrongstateofmoveline.')
        #CheckavailabilityforproductA
        aval_a_qty=self.MoveObj.search([('product_id','=',self.productA.id),('picking_id','=',picking_out.id)],limit=1).reserved_availability
        self.assertEqual(aval_a_qty,4.0,'WrongmovequantityavailabilityofproductA(%sfoundinsteadof4)'%(aval_a_qty))
        #CheckavailabilityforproductB
        aval_b_qty=self.MoveObj.search([('product_id','=',self.productB.id),('picking_id','=',picking_out.id)],limit=1).reserved_availability
        self.assertEqual(aval_b_qty,5.0,'WrongmovequantityavailabilityofproductB(%sfoundinsteadof5)'%(aval_b_qty))
        #CheckavailabilityforproductC
        aval_c_qty=self.MoveObj.search([('product_id','=',self.productC.id),('picking_id','=',picking_out.id)],limit=1).reserved_availability
        self.assertEqual(aval_c_qty,3.0,'WrongmovequantityavailabilityofproductC(%sfoundinsteadof3)'%(aval_c_qty))
        #CheckavailabilityforproductD
        aval_d_qty=self.MoveObj.search([('product_id','=',self.productD.id),('picking_id','=',picking_out.id)],limit=1).reserved_availability
        self.assertEqual(aval_d_qty,7.0,'WrongmovequantityavailabilityofproductD(%sfoundinsteadof7)'%(aval_d_qty))

        #----------------------------------------------------------------------
        #Replacepackoperationofoutgoingshipment.
        #----------------------------------------------------------------------

        move_cust_a.move_line_ids.qty_done=2.0
        move_cust_b.move_line_ids.qty_done=3.0
        self.StockPackObj.create({
            'product_id':self.productB.id,
            'qty_done':2,
            'product_uom_id':self.productB.uom_id.id,
            'location_id':self.stock_location,
            'location_dest_id':self.customer_location,
            'move_id':move_cust_b.id})
        #TODOcareifproduct_qtyandlot_idaresetatthesametimesthesystemdo2unreserve.
        move_cust_c.move_line_ids[0].write({
            'qty_done':2.0,
            'lot_id':lot2_productC.id,
        })
        self.StockPackObj.create({
            'product_id':self.productC.id,
            'qty_done':3.0,
            'product_uom_id':self.productC.uom_id.id,
            'location_id':self.stock_location,
            'location_dest_id':self.customer_location,
            'move_id':move_cust_c.id})
        move_cust_d.move_line_ids.qty_done=6.0

        #Transferpicking.
        picking_out._action_done()

        #----------------------------------------------------------------------
        #Checkstate,quantityandtotalmovesofoutgoingshipment.
        #----------------------------------------------------------------------

        #checkoutgoingshipmentstatus.
        self.assertEqual(picking_out.state,'done','Wrongstateofoutgoingshipment.')
        #checkoutgoingshipmenttotalmovesandanditsstate.
        self.assertEqual(len(picking_out.move_lines),4,'Wrongnumberofmovelines')
        formoveinpicking_out.move_lines:
            self.assertEqual(move.state,'done','Wrongstateofmoveline.')
        back_order_out=self.PickingObj.search([('backorder_id','=',picking_out.id)])

        #------------------
        #Checkbackorder.
        #-----------------

        self.assertEqual(len(back_order_out),1,'Backordershouldbecreated.')
        #Checktotalmovelinesofbackorder.
        self.assertEqual(len(back_order_out.move_lines),2,'Wrongnumberofmovelines')
        #Checkbackordershouldbecreatedwith8quantityofproductA.
        product_a_qty=self.MoveObj.search([('product_id','=',self.productA.id),('picking_id','=',back_order_out.id)],limit=1).product_uom_qty
        self.assertEqual(product_a_qty,8.0,'WrongmovequantityofproductA(%sfoundinsteadof8)'%(product_a_qty))
        #Checkbackordershouldbecreatedwith4quantityofproductD.
        product_d_qty=self.MoveObj.search([('product_id','=',self.productD.id),('picking_id','=',back_order_out.id)],limit=1).product_uom_qty
        self.assertEqual(product_d_qty,4.0,'WrongmovequantityofproductD(%sfoundinsteadof4)'%(product_d_qty))

        #-----------------------------------------------------------------------
        #Checkstocklocationquantquantityandquantityavailable
        #ofproductA,B,C,D
        #-----------------------------------------------------------------------

        #CheckquantsandavailablequantityforproductA
        quants=self.StockQuantObj.search([('product_id','=',self.productA.id),('location_id','=',self.stock_location)])
        total_qty=[quant.quantityforquantinquants]

        self.assertEqual(sum(total_qty),2.0,'Expecting2.0Unit,got%.4fUnitonlocationstock!'%(sum(total_qty)))
        self.assertEqual(self.productA.qty_available,2.0,'Wrongquantityavailable(%sfoundinsteadof2.0)'%(self.productA.qty_available))
        #CheckquantsandavailablequantityforproductB
        quants=self.StockQuantObj.search([('product_id','=',self.productB.id),('location_id','=',self.stock_location),('quantity','!=',0)])
        self.assertFalse(quants,'Noquantshouldfoundasoutgoingshipmenttookeverythingoutofstock.')
        self.assertEqual(self.productB.qty_available,0.0,'ProductBshouldhavezeroquantityavailable.')
        #CheckquantsandavailablequantityforproductC
        quants=self.StockQuantObj.search([('product_id','=',self.productC.id),('location_id','=',self.stock_location),('quantity','!=',0)])
        total_qty=[quant.quantityforquantinquants]
        self.assertEqual(sum(total_qty),2.0,'Expecting2.0Unit,got%.4fUnitonlocationstock!'%(sum(total_qty)))
        self.assertEqual(self.productC.qty_available,2.0,'Wrongquantityavailable(%sfoundinsteadof2.0)'%(self.productC.qty_available))
        #CheckquantsandavailablequantityforproductD
        quant=self.StockQuantObj.search([('product_id','=',self.productD.id),('location_id','=',self.stock_location),('quantity','!=',0)],limit=1)
        self.assertEqual(quant.quantity,1.0,'Expecting1.0Unit,got%.4fUnitonlocationstock!'%(quant.quantity))
        self.assertEqual(self.productD.qty_available,1.0,'Wrongquantityavailable(%sfoundinsteadof1.0)'%(self.productD.qty_available))

        #-----------------------------------------------------------------------
        #BackOrderofIncomingshipment
        #-----------------------------------------------------------------------

        lot3_productC=LotObj.create({'name':'Lot3','product_id':self.productC.id,'company_id':self.env.company.id})
        lot4_productC=LotObj.create({'name':'Lot4','product_id':self.productC.id,'company_id':self.env.company.id})
        lot5_productC=LotObj.create({'name':'Lot5','product_id':self.productC.id,'company_id':self.env.company.id})
        lot6_productC=LotObj.create({'name':'Lot6','product_id':self.productC.id,'company_id':self.env.company.id})
        lot1_productD=LotObj.create({'name':'Lot1','product_id':self.productD.id,'company_id':self.env.company.id})
        LotObj.create({'name':'Lot2','product_id':self.productD.id,'company_id':self.env.company.id})

        #Confirmbackorderofincomingshipment.
        back_order_in.action_confirm()
        self.assertEqual(back_order_in.state,'assigned','Wrongstateofincomingshipmentbackorder:%sinsteadof%s'%(back_order_in.state,'assigned'))
        formoveinback_order_in.move_lines:
            self.assertEqual(move.state,'assigned','Wrongstateofmoveline.')

        #----------------------------------------------------------------------
        #Replacepackoperation(BackorderofIncomingshipment)
        #----------------------------------------------------------------------

        packD=self.StockPackObj.search([('product_id','=',self.productD.id),('picking_id','=',back_order_in.id)],order='product_qty')
        self.assertEqual(len(packD),1,'Wrongnumberofpackoperation.')
        packD[0].write({
            'qty_done':8,
            'lot_id':lot1_productD.id,
        })
        packCs=self.StockPackObj.search([('product_id','=',self.productC.id),('picking_id','=',back_order_in.id)],limit=1)
        packCs.write({
            'qty_done':1,
            'lot_id':lot3_productC.id,
        })
        self.StockPackObj.create({
            'product_id':self.productC.id,
            'qty_done':1,
            'product_uom_id':self.productC.uom_id.id,
            'location_id':self.supplier_location,
            'location_dest_id':self.stock_location,
            'picking_id':back_order_in.id,
            'lot_id':lot4_productC.id,
        })
        self.StockPackObj.create({
            'product_id':self.productC.id,
            'qty_done':2,
            'product_uom_id':self.productC.uom_id.id,
            'location_id':self.supplier_location,
            'location_dest_id':self.stock_location,
            'picking_id':back_order_in.id,
            'lot_id':lot5_productC.id,
        })
        self.StockPackObj.create({
            'product_id':self.productC.id,
            'qty_done':2,
            'product_uom_id':self.productC.uom_id.id,
            'location_id':self.supplier_location,
            'location_dest_id':self.stock_location,
            'picking_id':back_order_in.id,
            'lot_id':lot6_productC.id,
        })
        self.StockPackObj.create({
            'product_id':self.productA.id,
            'qty_done':10,
            'product_uom_id':self.productA.uom_id.id,
            'location_id':self.supplier_location,
            'location_dest_id':self.stock_location,
            'picking_id':back_order_in.id
        })
        back_order_in._action_done()

        #----------------------------------------------------------------------
        #Checkstate,quantityandtotalmoves(BackorderofIncomingshipment).
        #----------------------------------------------------------------------

        #Checktotalnoofmovelines.
        self.assertEqual(len(back_order_in.move_lines),3,'Wrongnumberofmovelines')
        #Checkincomingshipmentstatemustbe'Done'.
        self.assertEqual(back_order_in.state,'done','Wrongstateofpicking.')
        #Checkincomingshipmentmovelinesstatemustbe'Done'.
        formoveinback_order_in.move_lines:
            self.assertEqual(move.state,'done','Wrongstateofmovelines.')
        #CheckproductAdonequantitymustbe10
        movesA=self.MoveObj.search([('product_id','=',self.productA.id),('picking_id','=',back_order_in.id)])
        self.assertEqual(movesA.product_uom_qty,10,"WrongmovequantityofproductA(%sfoundinsteadof10)"%(movesA.product_uom_qty))
        #CheckproductCdonequantitymustbe3.0,1.0,2.0
        movesC=self.MoveObj.search([('product_id','=',self.productC.id),('picking_id','=',back_order_in.id)])
        self.assertEqual(movesC.product_uom_qty,6.0,'WrongquantityofmovesproductC.')
        #CheckproductDdonequantitymustbe5.0and3.0
        movesD=self.MoveObj.search([('product_id','=',self.productD.id),('picking_id','=',back_order_in.id)])
        d_done_qty=[move.product_uom_qtyformoveinmovesD]
        self.assertEqual(set(d_done_qty),set([8.0]),'WrongquantityofmovesproductD.')
        #Checknobackorderiscreated.
        self.assertFalse(self.PickingObj.search([('backorder_id','=',back_order_in.id)]),"Shouldnotcreateanybackorder.")

        #-----------------------------------------------------------------------
        #Checkstocklocationquantquantityandquantityavailable
        #ofproductA,B,C,D
        #-----------------------------------------------------------------------

        #CheckquantsandavailablequantityforproductA.
        quants=self.StockQuantObj.search([('product_id','=',self.productA.id),('location_id','=',self.stock_location),('quantity','!=',0)])
        total_qty=[quant.quantityforquantinquants]
        self.assertEqual(sum(total_qty),12.0,'Wrongtotalstocklocationquantity(%sfoundinsteadof12)'%(sum(total_qty)))
        self.assertEqual(self.productA.qty_available,12.0,'Wrongquantityavailable(%sfoundinsteadof12)'%(self.productA.qty_available))
        #CheckquantsandavailablequantityforproductB.
        quants=self.StockQuantObj.search([('product_id','=',self.productB.id),('location_id','=',self.stock_location),('quantity','!=',0)])
        self.assertFalse(quants,'Noquantshouldfoundasoutgoingshipmenttookeverythingoutofstock')
        self.assertEqual(self.productB.qty_available,0.0,'Totalquantityinstockshouldbe0asthebackordertookeverythingoutofstock')
        #CheckquantsandavailablequantityforproductC.
        quants=self.StockQuantObj.search([('product_id','=',self.productC.id),('location_id','=',self.stock_location),('quantity','!=',0)])
        total_qty=[quant.quantityforquantinquants]
        self.assertEqual(sum(total_qty),8.0,'Wrongtotalstocklocationquantity(%sfoundinsteadof8)'%(sum(total_qty)))
        self.assertEqual(self.productC.qty_available,8.0,'Wrongquantityavailable(%sfoundinsteadof8)'%(self.productC.qty_available))
        #CheckquantsandavailablequantityforproductD.
        quants=self.StockQuantObj.search([('product_id','=',self.productD.id),('location_id','=',self.stock_location),('quantity','!=',0)])
        total_qty=[quant.quantityforquantinquants]
        self.assertEqual(sum(total_qty),9.0,'Wrongtotalstocklocationquantity(%sfoundinsteadof9)'%(sum(total_qty)))
        self.assertEqual(self.productD.qty_available,9.0,'Wrongquantityavailable(%sfoundinsteadof9)'%(self.productD.qty_available))

        #-----------------------------------------------------------------------
        #BackorderofOutgoingshipment
        #----------------------------------------------------------------------

        back_order_out._action_done()

        #CheckstocklocationquantsandavailablequantityforproductA.
        quants=self.StockQuantObj.search([('product_id','=',self.productA.id),('location_id','=',self.stock_location),('quantity','!=',0)])
        total_qty=[quant.quantityforquantinquants]
        self.assertGreaterEqual(float_round(sum(total_qty),precision_rounding=0.0001),1,'TotalstocklocationquantityforproductAshouldnotbenagative.')

    deftest_10_pickings_transfer_with_different_uom(self):
        """Pickingtransferwithdiffrentunitofmeassure."""

        #----------------------------------------------------------------------
        #CreateincomingshipmentofproductsDozA,SDozA,SDozARound,kgB,gB
        #----------------------------------------------------------------------
        #  DozA(10Dozen),SDozA(10.5SuperDozen)
        #  SDozARound(10.510.5SuperDozenRound),kgB(0.020kg)
        #  gB(525.3g)
        #----------------------------------------------------------------------

        picking_in_A=self.PickingObj.create({
            'picking_type_id':self.picking_type_in,
            'location_id':self.supplier_location,
            'location_dest_id':self.stock_location})
        self.MoveObj.create({
            'name':self.DozA.name,
            'product_id':self.DozA.id,
            'product_uom_qty':10,
            'product_uom':self.DozA.uom_id.id,
            'picking_id':picking_in_A.id,
            'location_id':self.supplier_location,
            'location_dest_id':self.stock_location})
        self.MoveObj.create({
            'name':self.SDozA.name,
            'product_id':self.SDozA.id,
            'product_uom_qty':10.5,
            'product_uom':self.SDozA.uom_id.id,
            'picking_id':picking_in_A.id,
            'location_id':self.supplier_location,
            'location_dest_id':self.stock_location})
        self.MoveObj.create({
            'name':self.SDozARound.name,
            'product_id':self.SDozARound.id,
            'product_uom_qty':10.5,
            'product_uom':self.SDozARound.uom_id.id,
            'picking_id':picking_in_A.id,
            'location_id':self.supplier_location,
            'location_dest_id':self.stock_location})
        self.MoveObj.create({
            'name':self.kgB.name,
            'product_id':self.kgB.id,
            'product_uom_qty':0.020,
            'product_uom':self.kgB.uom_id.id,
            'picking_id':picking_in_A.id,
            'location_id':self.supplier_location,
            'location_dest_id':self.stock_location})
        self.MoveObj.create({
            'name':self.gB.name,
            'product_id':self.gB.id,
            'product_uom_qty':525.3,
            'product_uom':self.gB.uom_id.id,
            'picking_id':picking_in_A.id,
            'location_id':self.supplier_location,
            'location_dest_id':self.stock_location})

        #Checkincomingshipmentmovelinesstate.
        formoveinpicking_in_A.move_lines:
            self.assertEqual(move.state,'draft','Movestatemustbedraft.')
        #Confirmincomingshipment.
        picking_in_A.action_confirm()
        #Checkincomingshipmentmovelinesstate.
        formoveinpicking_in_A.move_lines:
            self.assertEqual(move.state,'assigned','Movestatemustbedraft.')

        #----------------------------------------------------
        #Checkpackoperationquantityofincomingshipments.
        #----------------------------------------------------

        PackSdozAround=self.StockPackObj.search([('product_id','=',self.SDozARound.id),('picking_id','=',picking_in_A.id)],limit=1)
        self.assertEqual(PackSdozAround.product_qty,11,'Wrongquantityinpackoperation(%sfoundinsteadof11)'%(PackSdozAround.product_qty))
        res_dict=picking_in_A.button_validate()
        wizard=Form(self.env[(res_dict.get('res_model'))].with_context(res_dict['context'])).save()
        wizard.process()

        #-----------------------------------------------------------------------
        #Checkstocklocationquantquantityandquantityavailable
        #-----------------------------------------------------------------------

        #CheckquantsandavailablequantityforproductDozA
        quants=self.StockQuantObj.search([('product_id','=',self.DozA.id),('location_id','=',self.stock_location)])
        total_qty=[quant.quantityforquantinquants]
        self.assertEqual(sum(total_qty),10,'Expecting10Dozen,got%.4fDozenonlocationstock!'%(sum(total_qty)))
        self.assertEqual(self.DozA.qty_available,10,'Wrongquantityavailable(%sfoundinsteadof10)'%(self.DozA.qty_available))
        #CheckquantsandavailablequantityforproductSDozA
        quants=self.StockQuantObj.search([('product_id','=',self.SDozA.id),('location_id','=',self.stock_location)])
        total_qty=[quant.quantityforquantinquants]
        self.assertEqual(sum(total_qty),10.5,'Expecting10.5SDozen,got%.4fSDozenonlocationstock!'%(sum(total_qty)))
        self.assertEqual(self.SDozA.qty_available,10.5,'Wrongquantityavailable(%sfoundinsteadof10.5)'%(self.SDozA.qty_available))
        #CheckquantsandavailablequantityforproductSDozARound
        quants=self.StockQuantObj.search([('product_id','=',self.SDozARound.id),('location_id','=',self.stock_location)])
        total_qty=[quant.quantityforquantinquants]
        self.assertEqual(sum(total_qty),11,'Expecting11SDozenRound,got%.4fSDozenRoundonlocationstock!'%(sum(total_qty)))
        self.assertEqual(self.SDozARound.qty_available,11,'Wrongquantityavailable(%sfoundinsteadof11)'%(self.SDozARound.qty_available))
        #CheckquantsandavailablequantityforproductgB
        quants=self.StockQuantObj.search([('product_id','=',self.gB.id),('location_id','=',self.stock_location)])
        total_qty=[quant.quantityforquantinquants]
        self.assertEqual(sum(total_qty),525.3,'Expecting525.3gram,got%.4fgramonlocationstock!'%(sum(total_qty)))
        self.assertEqual(self.gB.qty_available,525.3,'Wrongquantityavailable(%sfoundinsteadof525.3'%(self.gB.qty_available))
        #CheckquantsandavailablequantityforproductkgB
        quants=self.StockQuantObj.search([('product_id','=',self.kgB.id),('location_id','=',self.stock_location)])
        total_qty=[quant.quantityforquantinquants]
        self.assertEqual(sum(total_qty),0.020,'Expecting0.020kg,got%.4fkgonlocationstock!'%(sum(total_qty)))
        self.assertEqual(self.kgB.qty_available,0.020,'Wrongquantityavailable(%sfoundinsteadof0.020)'%(self.kgB.qty_available))

        #----------------------------------------------------------------------
        #CreateIncomingShipmentB
        #----------------------------------------------------------------------

        picking_in_B=self.PickingObj.create({
            'picking_type_id':self.picking_type_in,
            'location_id':self.supplier_location,
            'location_dest_id':self.stock_location})
        move_in_a=self.MoveObj.create({
            'name':self.DozA.name,
            'product_id':self.DozA.id,
            'product_uom_qty':120,
            'product_uom':self.uom_unit.id,
            'picking_id':picking_in_B.id,
            'location_id':self.supplier_location,
            'location_dest_id':self.stock_location})
        self.MoveObj.create({
            'name':self.SDozA.name,
            'product_id':self.SDozA.id,
            'product_uom_qty':1512,
            'product_uom':self.uom_unit.id,
            'picking_id':picking_in_B.id,
            'location_id':self.supplier_location,
            'location_dest_id':self.stock_location})
        self.MoveObj.create({
            'name':self.SDozARound.name,
            'product_id':self.SDozARound.id,
            'product_uom_qty':1584,
            'product_uom':self.uom_unit.id,
            'picking_id':picking_in_B.id,
            'location_id':self.supplier_location,
            'location_dest_id':self.stock_location})
        self.MoveObj.create({
            'name':self.kgB.name,
            'product_id':self.kgB.id,
            'product_uom_qty':20.0,
            'product_uom':self.uom_gm.id,
            'picking_id':picking_in_B.id,
            'location_id':self.supplier_location,
            'location_dest_id':self.stock_location})
        self.MoveObj.create({
            'name':self.gB.name,
            'product_id':self.gB.id,
            'product_uom_qty':0.525,
            'product_uom':self.uom_kg.id,
            'picking_id':picking_in_B.id,
            'location_id':self.supplier_location,
            'location_dest_id':self.stock_location})

        #Checkincomingshipmentmovelinesstate.
        formoveinpicking_in_B.move_lines:
            self.assertEqual(move.state,'draft','Wrongstateofmoveline.')
        #Confirmincomingshipment.
        picking_in_B.action_confirm()
        #Checkincomingshipmentmovelinesstate.
        formoveinpicking_in_B.move_lines:
            self.assertEqual(move.state,'assigned','Wrongstateofmoveline.')

        #----------------------------------------------------------------------
        #Checkproductquantityandunitofmeasureofpackoperaation.
        #----------------------------------------------------------------------

        #CheckpackoperationquantityandunitofmeasureforproductDozA.
        PackdozA=self.StockPackObj.search([('product_id','=',self.DozA.id),('picking_id','=',picking_in_B.id)],limit=1)
        self.assertEqual(PackdozA.product_uom_qty,120,'Wrongquantityinpackoperation(%sfoundinsteadof120)'%(PackdozA.product_uom_qty))
        self.assertEqual(PackdozA.product_qty,10,'Wrongrealquantityinpackoperation(%sfoundinsteadof10)'%(PackdozA.product_qty))
        self.assertEqual(PackdozA.product_uom_id.id,self.uom_unit.id,'WronguominpackoperationforproductDozA.')
        #CheckpackoperationquantityandunitofmeasureforproductSDozA.
        PackSdozA=self.StockPackObj.search([('product_id','=',self.SDozA.id),('picking_id','=',picking_in_B.id)],limit=1)
        self.assertEqual(PackSdozA.product_uom_qty,1512,'Wrongquantityinpackoperation(%sfoundinsteadof1512)'%(PackSdozA.product_uom_qty))
        self.assertEqual(PackSdozA.product_uom_id.id,self.uom_unit.id,'WronguominpackoperationforproductSDozA.')
        #CheckpackoperationquantityandunitofmeasureforproductSDozARound.
        PackSdozAround=self.StockPackObj.search([('product_id','=',self.SDozARound.id),('picking_id','=',picking_in_B.id)],limit=1)
        self.assertEqual(PackSdozAround.product_uom_qty,1584,'Wrongquantityinpackoperation(%sfoundinsteadof1584)'%(PackSdozAround.product_uom_qty))
        self.assertEqual(PackSdozAround.product_uom_id.id,self.uom_unit.id,'WronguominpackoperationforproductSDozARound.')
        #CheckpackoperationquantityandunitofmeasureforproductgB.
        packgB=self.StockPackObj.search([('product_id','=',self.gB.id),('picking_id','=',picking_in_B.id)],limit=1)
        self.assertEqual(packgB.product_uom_qty,0.525,'Wrongquantityinpackoperation(%sfoundinsteadof0.525)'%(packgB.product_uom_qty))
        self.assertEqual(packgB.product_qty,525,'Wrongrealquantityinpackoperation(%sfoundinsteadof525)'%(packgB.product_qty))
        self.assertEqual(packgB.product_uom_id.id,packgB.move_id.product_uom.id,'WronguominpackoperationforproductkgB.')
        #CheckpackoperationquantityandunitofmeasureforproductkgB.
        packkgB=self.StockPackObj.search([('product_id','=',self.kgB.id),('picking_id','=',picking_in_B.id)],limit=1)
        self.assertEqual(packkgB.product_uom_qty,20.0,'Wrongquantityinpackoperation(%sfoundinsteadof20)'%(packkgB.product_uom_qty))
        self.assertEqual(packkgB.product_uom_id.id,self.uom_gm.id,'WronguominpackoperationforproductkgB')

        #----------------------------------------------------------------------
        #Replacepackoperationofincomingshipment.
        #----------------------------------------------------------------------

        self.StockPackObj.search([('product_id','=',self.kgB.id),('picking_id','=',picking_in_B.id)]).write({
            'product_uom_qty':0.020,'product_uom_id':self.uom_kg.id})
        self.StockPackObj.search([('product_id','=',self.gB.id),('picking_id','=',picking_in_B.id)]).write({
            'product_uom_qty':526,'product_uom_id':self.uom_gm.id})
        self.StockPackObj.search([('product_id','=',self.DozA.id),('picking_id','=',picking_in_B.id)]).write({
            'product_uom_qty':4,'product_uom_id':self.uom_dozen.id})
        self.StockPackObj.create({
            'product_id':self.DozA.id,
            'product_uom_qty':48,
            'product_uom_id':self.uom_unit.id,
            'location_id':self.supplier_location,
            'location_dest_id':self.stock_location,
            'move_id':move_in_a.id
        })

        #-----------------
        #Transferproduct.
        #-----------------

        res_dict=picking_in_B.button_validate()
        wizard=Form(self.env[res_dict.get('res_model')].with_context(res_dict['context'])).save()
        res_dict_for_back_order=wizard.process()
        backorder_wizard=self.env[(res_dict_for_back_order.get('res_model'))].browse(res_dict_for_back_order.get('res_id')).with_context(res_dict_for_back_order['context'])
        backorder_wizard.process()

        #-----------------------------------------------------------------------
        #Checkincomingshipment
        #-----------------------------------------------------------------------
        #Checkincomingshipmentstate.
        self.assertEqual(picking_in_B.state,'done','Incomingshipmentstateshouldbedone.')
        #Checkincomingshipmentmovelinesstate.
        formoveinpicking_in_B.move_lines:
            self.assertEqual(move.state,'done','Wrongstateofmoveline.')
        #Checktotaldonemovelinesforincomingshipment.
        self.assertEqual(len(picking_in_B.move_lines),5,'Wrongnumberofmovelines')
        #CheckproductDozAdonequantity.
        moves_DozA=self.MoveObj.search([('product_id','=',self.DozA.id),('picking_id','=',picking_in_B.id)],limit=1)
        self.assertEqual(moves_DozA.product_uom_qty,96,'Wrongmovequantity(%sfoundinsteadof96)'%(moves_DozA.product_uom_qty))
        self.assertEqual(moves_DozA.product_uom.id,self.uom_unit.id,'WronguominmoveforproductDozA.')
        #CheckproductSDozAdonequantity.
        moves_SDozA=self.MoveObj.search([('product_id','=',self.SDozA.id),('picking_id','=',picking_in_B.id)],limit=1)
        self.assertEqual(moves_SDozA.product_uom_qty,1512,'Wrongmovequantity(%sfoundinsteadof1512)'%(moves_SDozA.product_uom_qty))
        self.assertEqual(moves_SDozA.product_uom.id,self.uom_unit.id,'WronguominmoveforproductSDozA.')
        #CheckproductSDozARounddonequantity.
        moves_SDozARound=self.MoveObj.search([('product_id','=',self.SDozARound.id),('picking_id','=',picking_in_B.id)],limit=1)
        self.assertEqual(moves_SDozARound.product_uom_qty,1584,'Wrongmovequantity(%sfoundinsteadof1584)'%(moves_SDozARound.product_uom_qty))
        self.assertEqual(moves_SDozARound.product_uom.id,self.uom_unit.id,'WronguominmoveforproductSDozARound.')
        #CheckproductkgBdonequantity.
        moves_kgB=self.MoveObj.search([('product_id','=',self.kgB.id),('picking_id','=',picking_in_B.id)],limit=1)
        self.assertEqual(moves_kgB.product_uom_qty,20,'Wrongquantityinmove(%sfoundinsteadof20)'%(moves_kgB.product_uom_qty))
        self.assertEqual(moves_kgB.product_uom.id,self.uom_gm.id,'WronguominmoveforproductkgB.')
        #ChecktwomovescreatedforproductgBwithquantity(0.525kgand0.3g)
        moves_gB_kg=self.MoveObj.search([('product_id','=',self.gB.id),('picking_id','=',picking_in_B.id),('product_uom','=',self.uom_kg.id)],limit=1)
        self.assertEqual(moves_gB_kg.product_uom_qty,0.526,'Wrongmovequantity(%sfoundinsteadof0.526)'%(moves_gB_kg.product_uom_qty))
        self.assertEqual(moves_gB_kg.product_uom.id,self.uom_kg.id,'WronguominmoveforproductgB.')

        #TODOTestextramoveoncetheuomiseditableinthemove_lines

        #----------------------------------------------------------------------
        #CheckBackorderofIncomingshipment.
        #----------------------------------------------------------------------

        #Checkbackordercreatedornot.
        bo_in_B=self.PickingObj.search([('backorder_id','=',picking_in_B.id)])
        self.assertEqual(len(bo_in_B),1,'Backordershouldbecreated.')
        #Checktotalmovelinesofbackorder.
        self.assertEqual(len(bo_in_B.move_lines),1,'Wrongnumberofmovelines')
        #Checkbackordercreatedwithcorrectquantityanduomornot.
        moves_DozA=self.MoveObj.search([('product_id','=',self.DozA.id),('picking_id','=',bo_in_B.id)],limit=1)
        self.assertEqual(moves_DozA.product_uom_qty,24.0,'Wrongmovequantity(%sfoundinsteadof0.525)'%(moves_DozA.product_uom_qty))
        self.assertEqual(moves_DozA.product_uom.id,self.uom_unit.id,'WronguominmoveforproductDozA.')

        #----------------------------------------------------------------------
        #Checkproductstocklocationquantityandquantityavailable.
        #----------------------------------------------------------------------

        #CheckquantsandavailablequantityforproductDozA
        quants=self.StockQuantObj.search([('product_id','=',self.DozA.id),('location_id','=',self.stock_location)])
        total_qty=[quant.quantityforquantinquants]
        self.assertEqual(sum(total_qty),18,'Expecting18Dozen,got%.4fDozenonlocationstock!'%(sum(total_qty)))
        self.assertEqual(self.DozA.qty_available,18,'Wrongquantityavailable(%sfoundinsteadof18)'%(self.DozA.qty_available))
        #CheckquantsandavailablequantityforproductSDozA
        quants=self.StockQuantObj.search([('product_id','=',self.SDozA.id),('location_id','=',self.stock_location)])
        total_qty=[quant.quantityforquantinquants]
        self.assertEqual(sum(total_qty),21,'Expecting21SDozen,got%.4fSDozenonlocationstock!'%(sum(total_qty)))
        self.assertEqual(self.SDozA.qty_available,21,'Wrongquantityavailable(%sfoundinsteadof21)'%(self.SDozA.qty_available))
        #CheckquantsandavailablequantityforproductSDozARound
        quants=self.StockQuantObj.search([('product_id','=',self.SDozARound.id),('location_id','=',self.stock_location)])
        total_qty=[quant.quantityforquantinquants]
        self.assertEqual(sum(total_qty),22,'Expecting22SDozenRound,got%.4fSDozenRoundonlocationstock!'%(sum(total_qty)))
        self.assertEqual(self.SDozARound.qty_available,22,'Wrongquantityavailable(%sfoundinsteadof22)'%(self.SDozARound.qty_available))
        #CheckquantsandavailablequantityforproductgB.
        quants=self.StockQuantObj.search([('product_id','=',self.gB.id),('location_id','=',self.stock_location)])
        total_qty=[quant.quantityforquantinquants]
        self.assertEqual(round(sum(total_qty),1),1051.3,'Expecting1051Gram,got%.4fGramonlocationstock!'%(sum(total_qty)))
        self.assertEqual(round(self.gB.qty_available,1),1051.3,'Wrongquantityavailable(%sfoundinsteadof1051)'%(self.gB.qty_available))
        #CheckquantsandavailablequantityforproductkgB.
        quants=self.StockQuantObj.search([('product_id','=',self.kgB.id),('location_id','=',self.stock_location)])
        total_qty=[quant.quantityforquantinquants]
        self.assertEqual(sum(total_qty),0.040,'Expecting0.040kg,got%.4fkgonlocationstock!'%(sum(total_qty)))
        self.assertEqual(self.kgB.qty_available,0.040,'Wrongquantityavailable(%sfoundinsteadof0.040)'%(self.kgB.qty_available))

        #----------------------------------------------------------------------
        #Createoutgoingshipment.
        #----------------------------------------------------------------------

        before_out_quantity=self.kgB.qty_available
        picking_out=self.PickingObj.create({
            'picking_type_id':self.picking_type_out,
            'location_id':self.stock_location,
            'location_dest_id':self.customer_location})
        self.MoveObj.create({
            'name':self.kgB.name,
            'product_id':self.kgB.id,
            'product_uom_qty':0.966,
            'product_uom':self.uom_gm.id,
            'picking_id':picking_out.id,
            'location_id':self.stock_location,
            'location_dest_id':self.customer_location})
        self.MoveObj.create({
            'name':self.kgB.name,
            'product_id':self.kgB.id,
            'product_uom_qty':0.034,
            'product_uom':self.uom_gm.id,
            'picking_id':picking_out.id,
            'location_id':self.stock_location,
            'location_dest_id':self.customer_location})
        picking_out.action_confirm()
        picking_out.action_assign()
        res_dict=picking_out.button_validate()
        wizard=Form(self.env[(res_dict.get('res_model'))].with_context(res_dict['context'])).save()
        wizard.process()

        #Checkquantitydifferenceafterstocktransfer.
        quantity_diff=before_out_quantity-self.kgB.qty_available
        self.assertEqual(float_round(quantity_diff,precision_rounding=0.0001),0.001,'Wrongquantitydifference.')
        self.assertEqual(self.kgB.qty_available,0.039,'Wrongquantityavailable(%sfoundinsteadof0.039)'%(self.kgB.qty_available))

        #======================================================================
        #Outgoingshipments.
        #======================================================================

        #CreateOutgoingshipmentwith...
        #  productDozA(54Unit),SDozA(288Unit)
        #  productSDozRound( 360unit),productgB(0.503kg)
        #  productkgB( 19g)
        #======================================================================

        picking_out=self.PickingObj.create({
            'picking_type_id':self.picking_type_out,
            'location_id':self.stock_location,
            'location_dest_id':self.customer_location})
        self.MoveObj.create({
            'name':self.DozA.name,
            'product_id':self.DozA.id,
            'product_uom_qty':54,
            'product_uom':self.uom_unit.id,
            'picking_id':picking_out.id,
            'location_id':self.stock_location,
            'location_dest_id':self.customer_location})
        self.MoveObj.create({
            'name':self.SDozA.name,
            'product_id':self.SDozA.id,
            'product_uom_qty':288,
            'product_uom':self.uom_unit.id,
            'picking_id':picking_out.id,
            'location_id':self.stock_location,
            'location_dest_id':self.customer_location})
        self.MoveObj.create({
            'name':self.SDozARound.name,
            'product_id':self.SDozARound.id,
            'product_uom_qty':361,
            'product_uom':self.uom_unit.id,
            'picking_id':picking_out.id,
            'location_id':self.stock_location,
            'location_dest_id':self.customer_location})
        self.MoveObj.create({
            'name':self.gB.name,
            'product_id':self.gB.id,
            'product_uom_qty':0.503,
            'product_uom':self.uom_kg.id,
            'picking_id':picking_out.id,
            'location_id':self.stock_location,
            'location_dest_id':self.customer_location})
        self.MoveObj.create({
            'name':self.kgB.name,
            'product_id':self.kgB.id,
            'product_uom_qty':20,
            'product_uom':self.uom_gm.id,
            'picking_id':picking_out.id,
            'location_id':self.stock_location,
            'location_dest_id':self.customer_location})
        #Confirmoutgoingshipment.
        picking_out.action_confirm()
        formoveinpicking_out.move_lines:
            self.assertEqual(move.state,'confirmed','Wrongstateofmoveline.')
        #Assingproducttooutgoingshipments
        picking_out.action_assign()
        formoveinpicking_out.move_lines:
            self.assertEqual(move.state,'assigned','Wrongstateofmoveline.')
        #CheckproductAavailablequantity
        DozA_qty=self.MoveObj.search([('product_id','=',self.DozA.id),('picking_id','=',picking_out.id)],limit=1).product_qty
        self.assertEqual(DozA_qty,4.5,'Wrongmovequantityavailability(%sfoundinsteadof4.5)'%(DozA_qty))
        #CheckproductBavailablequantity
        SDozA_qty=self.MoveObj.search([('product_id','=',self.SDozA.id),('picking_id','=',picking_out.id)],limit=1).product_qty
        self.assertEqual(SDozA_qty,2,'Wrongmovequantityavailability(%sfoundinsteadof2)'%(SDozA_qty))
        #CheckproductCavailablequantity
        SDozARound_qty=self.MoveObj.search([('product_id','=',self.SDozARound.id),('picking_id','=',picking_out.id)],limit=1).product_qty
        self.assertEqual(SDozARound_qty,3,'Wrongmovequantityavailability(%sfoundinsteadof3)'%(SDozARound_qty))
        #CheckproductDavailablequantity
        gB_qty=self.MoveObj.search([('product_id','=',self.gB.id),('picking_id','=',picking_out.id)],limit=1).product_qty
        self.assertEqual(gB_qty,503,'Wrongmovequantityavailability(%sfoundinsteadof503)'%(gB_qty))
        #CheckproductDavailablequantity
        kgB_qty=self.MoveObj.search([('product_id','=',self.kgB.id),('picking_id','=',picking_out.id)],limit=1).product_qty
        self.assertEqual(kgB_qty,0.020,'Wrongmovequantityavailability(%sfoundinsteadof0.020)'%(kgB_qty))

        res_dict=picking_out.button_validate()
        wizard=Form(self.env[(res_dict.get('res_model'))].with_context(res_dict['context'])).save()
        wizard.process()

        #----------------------------------------------------------------------
        #Checkproductstocklocationquantityandquantityavailable.
        #----------------------------------------------------------------------

        #CheckquantsandavailablequantityforproductDozA
        quants=self.StockQuantObj.search([('product_id','=',self.DozA.id),('location_id','=',self.stock_location)])
        total_qty=[quant.quantityforquantinquants]
        self.assertEqual(sum(total_qty),13.5,'Expecting13.5Dozen,got%.4fDozenonlocationstock!'%(sum(total_qty)))
        self.assertEqual(self.DozA.qty_available,13.5,'Wrongquantityavailable(%sfoundinsteadof13.5)'%(self.DozA.qty_available))
        #CheckquantsandavailablequantityforproductSDozA
        quants=self.StockQuantObj.search([('product_id','=',self.SDozA.id),('location_id','=',self.stock_location)])
        total_qty=[quant.quantityforquantinquants]
        self.assertEqual(sum(total_qty),19,'Expecting19SDozen,got%.4fSDozenonlocationstock!'%(sum(total_qty)))
        self.assertEqual(self.SDozA.qty_available,19,'Wrongquantityavailable(%sfoundinsteadof19)'%(self.SDozA.qty_available))
        #CheckquantsandavailablequantityforproductSDozARound
        quants=self.StockQuantObj.search([('product_id','=',self.SDozARound.id),('location_id','=',self.stock_location)])
        total_qty=[quant.quantityforquantinquants]
        self.assertEqual(sum(total_qty),19,'Expecting19SDozRound,got%.4fSDozRoundonlocationstock!'%(sum(total_qty)))
        self.assertEqual(self.SDozARound.qty_available,19,'Wrongquantityavailable(%sfoundinsteadof19)'%(self.SDozARound.qty_available))
        #CheckquantsandavailablequantityforproductgB.
        quants=self.StockQuantObj.search([('product_id','=',self.gB.id),('location_id','=',self.stock_location)])
        total_qty=[quant.quantityforquantinquants]
        self.assertEqual(round(sum(total_qty),1),548.3,'Expecting547.6g,got%.4fgonlocationstock!'%(sum(total_qty)))
        self.assertEqual(round(self.gB.qty_available,1),548.3,'Wrongquantityavailable(%sfoundinsteadof547.6)'%(self.gB.qty_available))
        #CheckquantsandavailablequantityforproductkgB.
        quants=self.StockQuantObj.search([('product_id','=',self.kgB.id),('location_id','=',self.stock_location)])
        total_qty=[quant.quantityforquantinquants]
        self.assertEqual(sum(total_qty),0.019,'Expecting0.019kg,got%.4fkgonlocationstock!'%(sum(total_qty)))
        self.assertEqual(self.kgB.qty_available,0.019,'Wrongquantityavailable(%sfoundinsteadof0.019)'%(self.kgB.qty_available))

        #----------------------------------------------------------------------
        #Receiptbackorderofincomingshipment.
        #----------------------------------------------------------------------

        res_dict=bo_in_B.button_validate()
        wizard=Form(self.env[(res_dict.get('res_model'))].with_context(res_dict['context'])).save()
        wizard.process()
        #CheckquantsandavailablequantityforproductkgB.
        quants=self.StockQuantObj.search([('product_id','=',self.DozA.id),('location_id','=',self.stock_location)])
        total_qty=[quant.quantityforquantinquants]
        self.assertEqual(sum(total_qty),15.5,'Expecting15.5Dozen,got%.4fDozenonlocationstock!'%(sum(total_qty)))
        self.assertEqual(self.DozA.qty_available,15.5,'Wrongquantityavailable(%sfoundinsteadof15.5)'%(self.DozA.qty_available))

        #-----------------------------------------
        #Createproductinkgandreceiveinton.
        #-----------------------------------------

        productKG=self.ProductObj.create({'name':'ProductKG','uom_id':self.uom_kg.id,'uom_po_id':self.uom_kg.id,'type':'product'})
        picking_in=self.PickingObj.create({
            'picking_type_id':self.picking_type_in,
            'location_id':self.supplier_location,
            'location_dest_id':self.stock_location})
        self.MoveObj.create({
            'name':productKG.name,
            'product_id':productKG.id,
            'product_uom_qty':1.0,
            'product_uom':self.uom_tone.id,
            'picking_id':picking_in.id,
            'location_id':self.supplier_location,
            'location_dest_id':self.stock_location})
        #Checkincomingshipmentstate.
        self.assertEqual(picking_in.state,'draft','Incomingshipmentstateshouldbedraft.')
        #Checkincomingshipmentmovelinesstate.
        formoveinpicking_in.move_lines:
            self.assertEqual(move.state,'draft','Wrongstateofmoveline.')
        #Confirmincomingshipment.
        picking_in.action_confirm()
        #Checkincomingshipmentmovelinesstate.
        formoveinpicking_in.move_lines:
            self.assertEqual(move.state,'assigned','Wrongstateofmoveline.')
        #Checkpackoperationquantity.
        packKG=self.StockPackObj.search([('product_id','=',productKG.id),('picking_id','=',picking_in.id)],limit=1)
        self.assertEqual(packKG.product_qty,1000,'Wrongproductrealquantityinpackoperation(%sfoundinsteadof1000)'%(packKG.product_qty))
        self.assertEqual(packKG.product_uom_qty,1,'Wrongproductquantityinpackoperation(%sfoundinsteadof1)'%(packKG.product_uom_qty))
        self.assertEqual(packKG.product_uom_id.id,self.uom_tone.id,'Wrongproductuominpackoperation.')
        #TransferIncomingshipment.
        res_dict=picking_in.button_validate()
        wizard=Form(self.env[(res_dict.get('res_model'))].with_context(res_dict['context'])).save()
        wizard.process()

        #-----------------------------------------------------------------------
        #Checkincomingshipmentaftertransfer.
        #-----------------------------------------------------------------------

        #Checkincomingshipmentstate.
        self.assertEqual(picking_in.state,'done','Incomingshipmentstate:%sinsteadof%s'%(picking_in.state,'done'))
        #Checkincomingshipmentmovelinesstate.
        formoveinpicking_in.move_lines:
            self.assertEqual(move.state,'done','Wrongstateofmovelines.')
        #Checktotaldonemovelinesforincomingshipment.
        self.assertEqual(len(picking_in.move_lines),1,'Wrongnumberofmovelines')
        #CheckproductDozAdonequantity.
        move=self.MoveObj.search([('product_id','=',productKG.id),('picking_id','=',picking_in.id)],limit=1)
        self.assertEqual(move.product_uom_qty,1,'Wrongproductquantityindonemove.')
        self.assertEqual(move.product_uom.id,self.uom_tone.id,'Wrongunitofmeasureindonemove.')
        self.assertEqual(productKG.qty_available,1000,'Wrongquantityavailableofproduct(%sfoundinsteadof1000)'%(productKG.qty_available))
        picking_out=self.PickingObj.create({
            'picking_type_id':self.picking_type_out,
            'location_id':self.stock_location,
            'location_dest_id':self.customer_location})
        self.MoveObj.create({
            'name':productKG.name,
            'product_id':productKG.id,
            'product_uom_qty':2.5,
            'product_uom':self.uom_gm.id,
            'picking_id':picking_out.id,
            'location_id':self.stock_location,
            'location_dest_id':self.customer_location})
        picking_out.action_confirm()
        picking_out.action_assign()
        pack_opt=self.StockPackObj.search([('product_id','=',productKG.id),('picking_id','=',picking_out.id)],limit=1)
        pack_opt.write({'product_uom_qty':0.5})
        res_dict=picking_out.button_validate()
        wizard=Form(self.env[(res_dict.get('res_model'))].with_context(res_dict['context'])).save()
        res_dict_for_back_order=wizard.process()
        backorder_wizard=self.env[(res_dict_for_back_order.get('res_model'))].browse(res_dict_for_back_order.get('res_id')).with_context(res_dict_for_back_order['context'])
        backorder_wizard.process()
        quants=self.StockQuantObj.search([('product_id','=',productKG.id),('location_id','=',self.stock_location)])
        total_qty=[quant.quantityforquantinquants]
        #Checktotalquantitystocklocation.
        self.assertEqual(sum(total_qty),999.9995,'Expecting999.9995kg,got%.4fkgonlocationstock!'%(sum(total_qty)))

        #---------------------------------
        #CheckBackordercreatedornot.
        #---------------------------------
        bo_out_1=self.PickingObj.search([('backorder_id','=',picking_out.id)])
        self.assertEqual(len(bo_out_1),1,'Backordershouldbecreated.')
        #Checktotalmovelinesofbackorder.
        self.assertEqual(len(bo_out_1.move_lines),1,'Wrongnumberofmovelines')
        moves_KG=self.MoveObj.search([('product_id','=',productKG.id),('picking_id','=',bo_out_1.id)],limit=1)
        #Checkbackordercreatedwithcorrectquantityanduomornot.
        self.assertEqual(moves_KG.product_uom_qty,2.0,'Wrongmovequantity(%sfoundinsteadof2.0)'%(moves_KG.product_uom_qty))
        self.assertEqual(moves_KG.product_uom.id,self.uom_gm.id,'WronguominmoveforproductKG.')
        bo_out_1.action_assign()
        pack_opt=self.StockPackObj.search([('product_id','=',productKG.id),('picking_id','=',bo_out_1.id)],limit=1)
        pack_opt.write({'product_uom_qty':0.5})
        res_dict=bo_out_1.button_validate()
        wizard=Form(self.env[(res_dict.get('res_model'))].with_context(res_dict['context'])).save()
        res_dict_for_back_order=wizard.process()
        backorder_wizard=self.env[(res_dict_for_back_order.get('res_model'))].browse(res_dict_for_back_order.get('res_id')).with_context(res_dict_for_back_order['context'])
        backorder_wizard.process()
        quants=self.StockQuantObj.search([('product_id','=',productKG.id),('location_id','=',self.stock_location)])
        total_qty=[quant.quantityforquantinquants]

        #Checktotalquantitystocklocation.
        self.assertEqual(sum(total_qty),999.9990,'Expecting999.9990kg,got%.4fkgonlocationstock!'%(sum(total_qty)))

        #CheckBackordercreatedornot.
        #---------------------------------
        bo_out_2=self.PickingObj.search([('backorder_id','=',bo_out_1.id)])
        self.assertEqual(len(bo_out_2),1,'Backordershouldbecreated.')
        #Checktotalmovelinesofbackorder.
        self.assertEqual(len(bo_out_2.move_lines),1,'Wrongnumberofmovelines')
        #Checkbackordercreatedwithcorrectmovequantityanduomornot.
        moves_KG=self.MoveObj.search([('product_id','=',productKG.id),('picking_id','=',bo_out_2.id)],limit=1)
        self.assertEqual(moves_KG.product_uom_qty,1.5,'Wrongmovequantity(%sfoundinsteadof1.5)'%(moves_KG.product_uom_qty))
        self.assertEqual(moves_KG.product_uom.id,self.uom_gm.id,'WronguominmoveforproductKG.')
        bo_out_2.action_assign()
        pack_opt=self.StockPackObj.search([('product_id','=',productKG.id),('picking_id','=',bo_out_2.id)],limit=1)
        pack_opt.write({'product_uom_qty':0.5})
        res_dict=bo_out_2.button_validate()
        wizard=Form(self.env[(res_dict.get('res_model'))].with_context(res_dict['context'])).save()
        res_dict_for_back_order=wizard.process()
        backorder_wizard=self.env[(res_dict_for_back_order.get('res_model'))].browse(res_dict_for_back_order.get('res_id')).with_context(res_dict_for_back_order['context'])
        backorder_wizard.process()
        #ChecktotalquantitystocklocationofproductKG.
        quants=self.StockQuantObj.search([('product_id','=',productKG.id),('location_id','=',self.stock_location)])
        total_qty=[quant.quantityforquantinquants]
        self.assertEqual(sum(total_qty),999.9985,'Expecting999.9985kg,got%.4fkgonlocationstock!'%(sum(total_qty)))

        #CheckBackordercreatedornot.
        #---------------------------------
        bo_out_3=self.PickingObj.search([('backorder_id','=',bo_out_2.id)])
        self.assertEqual(len(bo_out_3),1,'Backordershouldbecreated.')
        #Checktotalmovelinesofbackorder.
        self.assertEqual(len(bo_out_3.move_lines),1,'Wrongnumberofmovelines')
        #Checkbackordercreatedwithcorrectquantityanduomornot.
        moves_KG=self.MoveObj.search([('product_id','=',productKG.id),('picking_id','=',bo_out_3.id)],limit=1)
        self.assertEqual(moves_KG.product_uom_qty,1,'Wrongmovequantity(%sfoundinsteadof1.0)'%(moves_KG.product_uom_qty))
        self.assertEqual(moves_KG.product_uom.id,self.uom_gm.id,'WronguominmoveforproductKG.')
        bo_out_3.action_assign()
        pack_opt=self.StockPackObj.search([('product_id','=',productKG.id),('picking_id','=',bo_out_3.id)],limit=1)
        pack_opt.write({'product_uom_qty':0.5})
        res_dict=bo_out_3.button_validate()
        wizard=Form(self.env[(res_dict.get('res_model'))].with_context(res_dict['context'])).save()
        res_dict_for_back_order=wizard.process()
        quants=self.StockQuantObj.search([('product_id','=',productKG.id),('location_id','=',self.stock_location)])
        total_qty=[quant.quantityforquantinquants]
        self.assertEqual(sum(total_qty),999.9980,'Expecting999.9980kg,got%.4fkgonlocationstock!'%(sum(total_qty)))

        #CheckBackordercreatedornot.
        #---------------------------------
        bo_out_4=self.PickingObj.search([('backorder_id','=',bo_out_3.id)])

        self.assertEqual(len(bo_out_4),1,'Backordershouldbecreated.')
        #Checktotalmovelinesofbackorder.
        self.assertEqual(len(bo_out_4.move_lines),1,'Wrongnumberofmovelines')
        #Checkbackordercreatedwithcorrectquantityanduomornot.
        moves_KG=self.MoveObj.search([('product_id','=',productKG.id),('picking_id','=',bo_out_4.id)],limit=1)
        self.assertEqual(moves_KG.product_uom_qty,0.5,'Wrongmovequantity(%sfoundinsteadof0.5)'%(moves_KG.product_uom_qty))
        self.assertEqual(moves_KG.product_uom.id,self.uom_gm.id,'WronguominmoveforproductKG.')
        bo_out_4.action_assign()
        pack_opt=self.StockPackObj.search([('product_id','=',productKG.id),('picking_id','=',bo_out_4.id)],limit=1)
        pack_opt.write({'product_uom_qty':0.5})
        res_dict=bo_out_4.button_validate()
        wizard=Form(self.env[(res_dict.get('res_model'))].with_context(res_dict['context'])).save()
        wizard.process()
        quants=self.StockQuantObj.search([('product_id','=',productKG.id),('location_id','=',self.stock_location)])
        total_qty=[quant.quantityforquantinquants]
        self.assertAlmostEqual(sum(total_qty),999.9975,msg='Expecting999.9975kg,got%.4fkgonlocationstock!'%(sum(total_qty)))

    deftest_20_create_inventory_with_different_uom(self):
        """Createinventorywithdifferentunitofmeasure."""

        #------------------------------------------------
        #TestinventorywithproductA(Unit).
        #------------------------------------------------

        inventory=self.InvObj.create({'name':'Test',
                                        'product_ids':[(4,self.UnitA.id)]})
        inventory.action_start()
        self.assertFalse(inventory.line_ids,"Inventorylineshouldnotcreated.")
        inventory_line=self.InvLineObj.create({
            'inventory_id':inventory.id,
            'product_id':self.UnitA.id,
            'product_uom_id':self.uom_dozen.id,
            'product_qty':10,
            'location_id':self.stock_location})
        inventory.action_validate()
        #CheckquantityavailableofproductUnitA.
        quants=self.StockQuantObj.search([('product_id','=',self.UnitA.id),('location_id','=',self.stock_location)])
        total_qty=[quant.quantityforquantinquants]
        self.assertEqual(sum(total_qty),120,'Expecting120Units,got%.4fUnitsonlocationstock!'%(sum(total_qty)))
        self.assertEqual(self.UnitA.qty_available,120,'Expecting120Units,got%.4fUnitsofquantityavailable!'%(self.UnitA.qty_available))
        #CreateInventoryagainforproductUnitA.
        inventory=self.InvObj.create({'name':'Test',
                                        'product_ids':[(4,self.UnitA.id)]})
        inventory.action_start()
        self.assertEqual(len(inventory.line_ids),1,"Oneinventorylineshouldbecreated.")
        inventory_line=self.InvLineObj.search([('product_id','=',self.UnitA.id),('inventory_id','=',inventory.id)],limit=1)
        self.assertEqual(inventory_line.product_qty,120,"Wrongproductquantityininventoryline.")
        #Modifytheinventorylineandsetthequantityto144productonthisnewinventory.
        inventory_line.write({'product_qty':144})
        inventory.action_validate()
        move=self.MoveObj.search([('product_id','=',self.UnitA.id),('inventory_id','=',inventory.id)],limit=1)
        self.assertEqual(move.product_uom_qty,24,"WrongmovequantityofproductUnitA.")
        #CheckquantityavailableofproductUnitA.
        quants=self.StockQuantObj.search([('product_id','=',self.UnitA.id),('location_id','=',self.stock_location)])
        total_qty=[quant.quantityforquantinquants]
        self.assertEqual(sum(total_qty),144,'Expecting144Units,got%.4fUnitsonlocationstock!'%(sum(total_qty)))
        self.UnitA._compute_quantities()
        self.assertEqual(self.UnitA.qty_available,144,'Expecting144Units,got%.4fUnitsofquantityavailable!'%(self.UnitA.qty_available))

        #------------------------------------------------
        #TestinventorywithproductKG.
        #------------------------------------------------

        productKG=self.ProductObj.create({'name':'ProductKG','uom_id':self.uom_kg.id,'uom_po_id':self.uom_kg.id,'type':'product'})
        inventory=self.InvObj.create({'name':'InventoryProductKG',
                                        'product_ids':[(4,productKG.id)]})
        inventory.action_start()
        self.assertFalse(inventory.line_ids,"Inventorylineshouldnotcreated.")
        inventory_line=self.InvLineObj.create({
            'inventory_id':inventory.id,
            'product_id':productKG.id,
            'product_uom_id':self.uom_tone.id,
            'product_qty':5,
            'location_id':self.stock_location})
        inventory.action_validate()
        quants=self.StockQuantObj.search([('product_id','=',productKG.id),('location_id','=',self.stock_location)])
        total_qty=[quant.quantityforquantinquants]
        self.assertEqual(sum(total_qty),5000,'Expecting5000kg,got%.4fkgonlocationstock!'%(sum(total_qty)))
        self.assertEqual(productKG.qty_available,5000,'Expecting5000kg,got%.4fkgofquantityavailable!'%(productKG.qty_available))
        #CreateInventoryagain.
        inventory=self.InvObj.create({'name':'Test',
                                        'product_ids':[(4,productKG.id)]})
        inventory.action_start()
        self.assertEqual(len(inventory.line_ids),1,"Oneinventorylineshouldbecreated.")
        inventory_line=self.InvLineObj.search([('product_id','=',productKG.id),('inventory_id','=',inventory.id)],limit=1)
        self.assertEqual(inventory_line.product_qty,5000,"Wrongproductquantityininventoryline.")
        #Modifytheinventorylineandsetthequantityto4000productonthisnewinventory.
        inventory_line.write({'product_qty':4000})
        inventory.action_validate()
        #CheckinventorymovequantityofproductKG.
        move=self.MoveObj.search([('product_id','=',productKG.id),('inventory_id','=',inventory.id)],limit=1)
        self.assertEqual(move.product_uom_qty,1000,"WrongmovequantityofproductKG.")
        #CheckquantityavailableofproductKG.
        quants=self.StockQuantObj.search([('product_id','=',productKG.id),('location_id','=',self.stock_location)])
        total_qty=[quant.quantityforquantinquants]
        self.assertEqual(sum(total_qty),4000,'Expecting4000kg,got%.4fonlocationstock!'%(sum(total_qty)))
        productKG._compute_quantities()
        self.assertEqual(productKG.qty_available,4000,'Expecting4000kg,got%.4fofquantityavailable!'%(productKG.qty_available))

        #--------------------------------------------------------
        #TESTEMPTYINVENTORYWITHPACKSandLOTS
        #---------------------------------------------------------

        packproduct=self.ProductObj.create({'name':'PackProduct','uom_id':self.uom_unit.id,'uom_po_id':self.uom_unit.id,'type':'product'})
        lotproduct=self.ProductObj.create({'name':'LotProduct','uom_id':self.uom_unit.id,'uom_po_id':self.uom_unit.id,'type':'product'})
        inventory=self.InvObj.create({'name':'TestPartialandPack',
                                        'start_empty':True,
                                        'location_ids':[(4,self.stock_location)]})
        inventory.action_start()
        pack_obj=self.env['stock.quant.package']
        lot_obj=self.env['stock.production.lot']
        pack1=pack_obj.create({'name':'PACK00TEST1'})
        pack_obj.create({'name':'PACK00TEST2'})
        lot1=lot_obj.create({'name':'Lot001','product_id':lotproduct.id,'company_id':self.env.company.id})
        move=self.MoveObj.search([('product_id','=',productKG.id),('inventory_id','=',inventory.id)],limit=1)
        self.assertEqual(len(move),0,"Partialfiltershouldnotcreatealinesuponprepare")

        line_vals=[]
        line_vals+=[{'location_id':self.stock_location,'product_id':packproduct.id,'product_qty':10,'product_uom_id':packproduct.uom_id.id}]
        line_vals+=[{'location_id':self.stock_location,'product_id':packproduct.id,'product_qty':20,'product_uom_id':packproduct.uom_id.id,'package_id':pack1.id}]
        line_vals+=[{'location_id':self.stock_location,'product_id':lotproduct.id,'product_qty':30,'product_uom_id':lotproduct.uom_id.id,'prod_lot_id':lot1.id}]
        line_vals+=[{'location_id':self.stock_location,'product_id':lotproduct.id,'product_qty':25,'product_uom_id':lotproduct.uom_id.id,'prod_lot_id':False}]
        inventory.write({'line_ids':[(0,0,x)forxinline_vals]})
        inventory.action_validate()
        self.assertEqual(packproduct.qty_available,30,"Wrongqtyavailableforpackproduct")
        self.assertEqual(lotproduct.qty_available,55,"Wrongqtyavailableforlotproduct")
        quants=self.StockQuantObj.search([('product_id','=',packproduct.id),('location_id','=',self.stock_location),('package_id','=',pack1.id)])
        total_qty=sum([quant.quantityforquantinquants])
        self.assertEqual(total_qty,20,'Expecting20unitsonpackage1ofpackproduct,butwegot%.4fonlocationstock!'%(total_qty))

        #Createaninventorythatwillputthelotswithoutlotto0andcheckthattakingwithoutpackwillnottakeitfromthepack
        inventory2=self.InvObj.create({'name':'TestPartialLotandPack2',
                                         'start_empty':True,
                                         'location_ids':[(4,self.stock_location)]})
        inventory2.action_start()
        line_vals=[]
        line_vals+=[{'location_id':self.stock_location,'product_id':packproduct.id,'product_qty':20,'product_uom_id':packproduct.uom_id.id}]
        line_vals+=[{'location_id':self.stock_location,'product_id':lotproduct.id,'product_qty':0,'product_uom_id':lotproduct.uom_id.id,'prod_lot_id':False}]
        line_vals+=[{'location_id':self.stock_location,'product_id':lotproduct.id,'product_qty':10,'product_uom_id':lotproduct.uom_id.id,'prod_lot_id':lot1.id}]
        inventory2.write({'line_ids':[(0,0,x)forxinline_vals]})
        inventory2.action_validate()
        self.assertEqual(packproduct.qty_available,40,"Wrongqtyavailableforpackproduct")
        self.assertEqual(lotproduct.qty_available,10,"Wrongqtyavailableforlotproduct")
        quants=self.StockQuantObj.search([('product_id','=',lotproduct.id),('location_id','=',self.stock_location),('lot_id','=',lot1.id)])
        total_qty=sum([quant.quantityforquantinquants])
        self.assertEqual(total_qty,10,'Expecting0unitslotoflotproduct,butwegot%.4fonlocationstock!'%(total_qty))
        quants=self.StockQuantObj.search([('product_id','=',lotproduct.id),('location_id','=',self.stock_location),('lot_id','=',False)])
        total_qty=sum([quant.quantityforquantinquants])
        self.assertEqual(total_qty,0,'Expecting0unitslotoflotproduct,butwegot%.4fonlocationstock!'%(total_qty))

    deftest_30_check_with_no_incoming_lot(self):
        """Pickinginwithoutlotsandpickingoutwith"""
        #Changebasicoperationtypenottogetlots
        #Createproductwithlottracking
        picking_in=self.env['stock.picking.type'].browse(self.picking_type_in)
        picking_in.use_create_lots=False
        self.productA.tracking='lot'
        picking_in=self.PickingObj.create({
            'picking_type_id':self.picking_type_in,
            'location_id':self.supplier_location,
            'location_dest_id':self.stock_location})
        self.MoveObj.create({
            'name':self.productA.name,
            'product_id':self.productA.id,
            'product_uom_qty':4,
            'product_uom':self.productA.uom_id.id,
            'picking_id':picking_in.id,
            'picking_type_id':self.picking_type_in,
            'location_id':self.supplier_location,
            'location_dest_id':self.stock_location})

        #Checkincomingshipmentmovelinesstate.
        formoveinpicking_in.move_lines:
            self.assertEqual(move.state,'draft','Wrongstateofmoveline.')
        #Confirmincomingshipment.
        picking_in.action_confirm()
        #Checkincomingshipmentmovelinesstate.
        formoveinpicking_in.move_lines:
            self.assertEqual(move.state,'assigned','Wrongstateofmoveline.')

        res_dict=picking_in.button_validate()
        wizard=self.env[(res_dict.get('res_model'))].browse(res_dict.get('res_id'))
        wizard.process()
        picking_out=self.PickingObj.create({
            'name':'testpicking',
            'picking_type_id':self.picking_type_out,
            'location_id':self.stock_location,
            'location_dest_id':self.customer_location})
        move_out=self.MoveObj.create({
            'name':self.productA.name,
            'product_id':self.productA.id,
            'product_uom_qty':3,
            'product_uom':self.productA.uom_id.id,
            'picking_id':picking_out.id,
            'location_id':self.stock_location,
            'location_dest_id':self.customer_location})
        picking_out.action_confirm()
        picking_out.action_assign()
        pack_opt=self.StockPackObj.search([('picking_id','=',picking_out.id)],limit=1)
        lot1=self.LotObj.create({'product_id':self.productA.id,'name':'LOT1','company_id':self.env.company.id})
        lot2=self.LotObj.create({'product_id':self.productA.id,'name':'LOT2','company_id':self.env.company.id})
        lot3=self.LotObj.create({'product_id':self.productA.id,'name':'LOT3','company_id':self.env.company.id})

        pack_opt.write({'lot_id':lot1.id,'qty_done':1.0})
        self.StockPackObj.create({'product_id':self.productA.id,'move_id':move_out.id,'product_uom_id':move_out.product_uom.id,'lot_id':lot2.id,'qty_done':1.0,'location_id':self.stock_location,'location_dest_id':self.customer_location})
        self.StockPackObj.create({'product_id':self.productA.id,'move_id':move_out.id,'product_uom_id':move_out.product_uom.id,'lot_id':lot3.id,'qty_done':2.0,'location_id':self.stock_location,'location_dest_id':self.customer_location})
        picking_out._action_done()
        quants=self.StockQuantObj.search([('product_id','=',self.productA.id),('location_id','=',self.stock_location)])
        #TODOwaitslefix
        #self.assertFalse(quants,'Shouldnothaveanyquantsinstockanymore')

    deftest_40_pack_in_pack(self):
        """Putapackinpack"""
        self.env['stock.picking.type'].browse(self.picking_type_in).show_reserved=True
        picking_out=self.PickingObj.create({
            'picking_type_id':self.picking_type_out,
            'location_id':self.pack_location,
            'location_dest_id':self.customer_location})
        move_out=self.MoveObj.create({
            'name':self.productA.name,
            'product_id':self.productA.id,
            'product_uom_qty':3,
            'product_uom':self.productA.uom_id.id,
            'picking_id':picking_out.id,
            'location_id':self.pack_location,
            'location_dest_id':self.customer_location})
        picking_pack=self.PickingObj.create({
            'picking_type_id':self.picking_type_out,
            'location_id':self.stock_location,
            'location_dest_id':self.pack_location})
        move_pack=self.MoveObj.create({
            'name':self.productA.name,
            'product_id':self.productA.id,
            'product_uom_qty':3,
            'product_uom':self.productA.uom_id.id,
            'picking_id':picking_pack.id,
            'location_id':self.stock_location,
            'location_dest_id':self.pack_location,
            'move_dest_ids':[(4,move_out.id,0)]})
        picking_in=self.PickingObj.create({
            'picking_type_id':self.picking_type_in,
            'location_id':self.supplier_location,
            'location_dest_id':self.stock_location})
        move_in=self.MoveObj.create({
            'name':self.productA.name,
            'product_id':self.productA.id,
            'product_uom_qty':3,
            'product_uom':self.productA.uom_id.id,
            'picking_id':picking_in.id,
            'location_id':self.supplier_location,
            'location_dest_id':self.stock_location,
            'move_dest_ids':[(4,move_pack.id,0)]})

        #Checkincomingshipmentmovelinesstate.
        formoveinpicking_in.move_lines:
            self.assertEqual(move.state,'draft','Wrongstateofmoveline.')
        #Confirmincomingshipment.
        picking_in.action_confirm()
        #Checkincomingshipmentmovelinesstate.
        formoveinpicking_in.move_lines:
            self.assertEqual(move.state,'assigned','Wrongstateofmoveline.')

        #Checkincomingshipmentmovelinesstate.
        formoveinpicking_pack.move_lines:
            self.assertEqual(move.state,'draft','Wrongstateofmoveline.')
        #Confirmincomingshipment.
        picking_pack.action_confirm()
        #Checkincomingshipmentmovelinesstate.
        formoveinpicking_pack.move_lines:
            self.assertEqual(move.state,'waiting','Wrongstateofmoveline.')

        #Checkincomingshipmentmovelinesstate.
        formoveinpicking_out.move_lines:
            self.assertEqual(move.state,'draft','Wrongstateofmoveline.')
        #Confirmincomingshipment.
        picking_out.action_confirm()
        #Checkincomingshipmentmovelinesstate.
        formoveinpicking_out.move_lines:
            self.assertEqual(move.state,'waiting','Wrongstateofmoveline.')

        #Setthequantitydoneonthepackoperation
        move_in.move_line_ids.qty_done=3.0
        #Putinapack
        picking_in.action_put_in_pack()
        #Getthenewpackage
        picking_in_package=move_in.move_line_ids.result_package_id
        #Validatepicking
        picking_in._action_done()

        #Checkfirstpickingstatechangedtodone
        formoveinpicking_in.move_lines:
            self.assertEqual(move.state,'done','Wrongstateofmoveline.')
        #Checknextpickingstatechangedto'assigned'
        formoveinpicking_pack.move_lines:
            self.assertEqual(move.state,'assigned','Wrongstateofmoveline.')

        #Setthequantitydoneonthepackoperation
        move_pack.move_line_ids.qty_done=3.0
        #Getthenewpackage
        picking_pack_package=move_pack.move_line_ids.result_package_id
        #Validatepicking
        picking_pack._action_done()

        #Checksecondpickingstatechangedtodone
        formoveinpicking_pack.move_lines:
            self.assertEqual(move.state,'done','Wrongstateofmoveline.')
        #Checknextpickingstatechangedto'assigned'
        formoveinpicking_out.move_lines:
            self.assertEqual(move.state,'assigned','Wrongstateofmoveline.')

        #Validatepicking
        picking_out.move_line_ids.qty_done=3.0
        picking_out_package=move_out.move_line_ids.result_package_id
        picking_out._action_done()

        #checkallpickingsaredone
        formoveinpicking_in.move_lines:
            self.assertEqual(move.state,'done','Wrongstateofmoveline.')
        formoveinpicking_pack.move_lines:
            self.assertEqual(move.state,'done','Wrongstateofmoveline.')
        formoveinpicking_out.move_lines:
            self.assertEqual(move.state,'done','Wrongstateofmoveline.')

        #Checkpicking_in_packageisinpicking_pack_package
        self.assertEqual(picking_in_package.id,picking_pack_package.id,'Thepackagecreatedinthepickinginisnotintheonecreatedinpickingpack')
        self.assertEqual(picking_pack_package.id,picking_out_package.id,'Thepackagecreatedinthepickinginisnotintheonecreatedinpickingpack')
        #Checkthatwehaveonequantincustomerlocation.
        quant=self.StockQuantObj.search([('product_id','=',self.productA.id),('location_id','=',self.customer_location)])
        self.assertEqual(len(quant),1,'Thereshouldbeonequantwithpackageforcustomerlocation')
        #Checkthatthe parentpackageofthequantisthepicking_in_package

    deftest_50_create_in_out_with_product_pack_lines(self):
        picking_in=self.PickingObj.create({
            'picking_type_id':self.picking_type_in,
            'location_id':self.supplier_location,
            'location_dest_id':self.stock_location})
        self.MoveObj.create({
            'name':self.productE.name,
            'product_id':self.productE.id,
            'product_uom_qty':10,
            'product_uom':self.productE.uom_id.id,
            'picking_id':picking_in.id,
            'location_id':self.supplier_location,
            'location_dest_id':self.stock_location})
        picking_in.action_confirm()
        pack_obj=self.env['stock.quant.package']
        pack1=pack_obj.create({'name':'PACKINOUTTEST1'})
        pack2=pack_obj.create({'name':'PACKINOUTTEST2'})
        picking_in.move_line_ids[0].result_package_id=pack1
        picking_in.move_line_ids[0].qty_done=4
        packop2=picking_in.move_line_ids[0].with_context(bypass_reservation_update=True).copy({'product_uom_qty':0})
        packop2.qty_done=6
        packop2.result_package_id=pack2
        picking_in._action_done()
        quants=self.env['stock.quant']._gather(self.productE,self.env['stock.location'].browse(self.stock_location))
        self.assertEqual(sum([x.quantityforxinquants]),10.0,'Expecting10piecesinstock')
        #Checkthequantsareinthepackage
        self.assertEqual(sum(x.quantityforxinpack1.quant_ids),4.0,'Pack1shouldhave4pieces')
        self.assertEqual(sum(x.quantityforxinpack2.quant_ids),6.0,'Pack2shouldhave6pieces')
        picking_out=self.PickingObj.create({
            'picking_type_id':self.picking_type_out,
            'location_id':self.stock_location,
            'location_dest_id':self.customer_location})
        self.MoveObj.create({
            'name':self.productE.name,
            'product_id':self.productE.id,
            'product_uom_qty':3,
            'product_uom':self.productE.uom_id.id,
            'picking_id':picking_out.id,
            'location_id':self.stock_location,
            'location_dest_id':self.customer_location})
        picking_out.action_confirm()
        picking_out.action_assign()
        packout1=picking_out.move_line_ids[0]
        packout2=picking_out.move_line_ids[0].with_context(bypass_reservation_update=True).copy({'product_uom_qty':0})
        packout1.qty_done=2
        packout1.package_id=pack1
        packout2.package_id=pack2
        packout2.qty_done=1
        picking_out._action_done()
        #Shouldbeonly1negativequantinsupplierlocation
        neg_quants=self.env['stock.quant'].search([('product_id','=',self.productE.id),('quantity','<',0.0)])
        self.assertEqual(len(neg_quants),1,'Thereshouldbe1negativequantsforsupplier!')
        self.assertEqual(neg_quants.location_id.id,self.supplier_location,'Thereshoudbe1negativequantsforsupplier!')

        quants=self.env['stock.quant']._gather(self.productE,self.env['stock.location'].browse(self.stock_location))
        self.assertEqual(len(quants),2,'Weshouldhaveexactly2quantsintheend')

    deftest_60_create_in_out_with_product_pack_lines(self):
        picking_in=self.PickingObj.create({
            'picking_type_id':self.picking_type_in,
            'location_id':self.supplier_location,
            'location_dest_id':self.stock_location})
        self.MoveObj.create({
            'name':self.productE.name,
            'product_id':self.productE.id,
            'product_uom_qty':200,
            'product_uom':self.productE.uom_id.id,
            'picking_id':picking_in.id,
            'location_id':self.supplier_location,
            'location_dest_id':self.stock_location})

        picking_in.action_confirm()
        pack_obj=self.env['stock.quant.package']
        pack1=pack_obj.create({'name':'PACKINOUTTEST1'})
        pack2=pack_obj.create({'name':'PACKINOUTTEST2'})
        picking_in.move_line_ids[0].result_package_id=pack1
        picking_in.move_line_ids[0].qty_done=120
        packop2=picking_in.move_line_ids[0].with_context(bypass_reservation_update=True).copy({'product_uom_qty':0})
        packop2.qty_done=80
        packop2.result_package_id=pack2
        picking_in._action_done()
        quants=self.env['stock.quant']._gather(self.productE,self.env['stock.location'].browse(self.stock_location))
        self.assertEqual(sum([x.quantityforxinquants]),200.0,'Expecting200piecesinstock')
        #Checkthequantsareinthepackage
        self.assertEqual(sum(x.quantityforxinpack1.quant_ids),120,'Pack1shouldhave120pieces')
        self.assertEqual(sum(x.quantityforxinpack2.quant_ids),80,'Pack2shouldhave80pieces')
        picking_out=self.PickingObj.create({
            'picking_type_id':self.picking_type_out,
            'location_id':self.stock_location,
            'location_dest_id':self.customer_location})
        self.MoveObj.create({
            'name':self.productE.name,
            'product_id':self.productE.id,
            'product_uom_qty':200,
            'product_uom':self.productE.uom_id.id,
            'picking_id':picking_out.id,
            'location_id':self.stock_location,
            'location_dest_id':self.customer_location})
        picking_out.action_confirm()
        picking_out.action_assign()
        #Convertentirepacksintotakingoutofpacks
        packout0=picking_out.move_line_ids[0]
        packout1=picking_out.move_line_ids[1]
        packout0.write({
            'package_id':pack1.id,
            'product_id':self.productE.id,
            'qty_done':120.0,
            'product_uom_id':self.productE.uom_id.id,
        })
        packout1.write({
            'package_id':pack2.id,
            'product_id':self.productE.id,
            'qty_done':80.0,
            'product_uom_id':self.productE.uom_id.id,
        })
        picking_out._action_done()
        #Shouldbeonly1negativequantinsupplierlocation
        neg_quants=self.env['stock.quant'].search([('product_id','=',self.productE.id),('quantity','<',0.0)])
        self.assertEqual(len(neg_quants),1,'Thereshouldbe1negativequantsforsupplier!')
        self.assertEqual(neg_quants.location_id.id,self.supplier_location,'Thereshoudbe1negativequantsforsupplier!')
        #Weshouldalsomakesurethatwhenmatchingstockmoveswithpackoperations,ittakesthecorrect
        quants=self.env['stock.quant']._gather(self.productE,self.env['stock.location'].browse(self.stock_location))
        self.assertEqual(sum(quants.mapped('quantity')),0,'Weshouldhavenoquantsintheend')

    deftest_70_picking_state_all_at_once_reserve(self):
        """Thistestwillcheckthatthestateofthepickingiscorrectlycomputedaccording
        tothestateofitsmovelinesanditsmovetype.
        """
        #move_type:direct==partial,one==allatonce
        #picking:confirmed==waitingavailability

        #-----------------------------------------------------------
        #"allatonce"and"reserve"scenario
        #-----------------------------------------------------------
        #getoneproductinstock
        inventory=self.env['stock.inventory'].create({
            'name':'InventoryProductTable',
            'line_ids':[(0,0,{
                'product_id':self.productA.id,
                'product_uom_id':self.productA.uom_id.id,
                'product_qty':1,
                'location_id':self.stock_location
            })]
        })
        inventory.action_start()
        inventory.action_validate()

        #createa"allatonce"deliveryorderfortwoproducts
        picking_out=self.PickingObj.create({
            'picking_type_id':self.picking_type_out,
            'location_id':self.stock_location,
            'location_dest_id':self.customer_location})
        picking_out.move_type='one'

        self.MoveObj.create({
            'name':self.productA.name,
            'product_id':self.productA.id,
            'product_uom_qty':2,
            'product_uom':self.productA.uom_id.id,
            'picking_id':picking_out.id,
            'location_id':self.stock_location,
            'location_dest_id':self.customer_location})
        #validatethisdeliveryorder,itshouldbeinthewaitingstate
        picking_out.action_assign()
        self.assertEqual(picking_out.state,"confirmed")

        #receiveoneproductinstock
        inventory=self.env['stock.inventory'].create({
            'name':'InventoryProductTable',
            'line_ids':[(0,0,{
                'product_id':self.productA.id,
                'product_uom_id':self.productA.uom_id.id,
                'product_qty':2,
                'location_id':self.stock_location
            })]
        })
        inventory.action_start()
        inventory.action_validate()
        #recheckavailabilityofthedeliveryorder,itshouldbeassigned
        picking_out.action_assign()
        self.assertEqual(len(picking_out.move_lines),1.0)
        self.assertEqual(picking_out.move_lines.product_qty,2.0)
        self.assertEqual(picking_out.state,"assigned")

    deftest_71_picking_state_all_at_once_force_assign(self):
        """Thistestwillcheckthatthestateofthepickingiscorrectlycomputedaccording
        tothestateofitsmovelinesanditsmovetype.
        """
        #move_type:direct==partial,one==allatonce
        #picking:confirmed==waitingavailability,partially_available=partiallyavailable

        #-----------------------------------------------------------
        #"allatonce"and"forceassign"scenario
        #-----------------------------------------------------------
        #createa"allatonce"deliveryorderfortwoproducts
        picking_out=self.PickingObj.create({
            'picking_type_id':self.picking_type_out,
            'location_id':self.stock_location,
            'location_dest_id':self.customer_location})
        picking_out.move_type='direct'

        self.MoveObj.create({
            'name':self.productA.name,
            'product_id':self.productA.id,
            'product_uom_qty':2,
            'product_uom':self.productA.uom_id.id,
            'picking_id':picking_out.id,
            'location_id':self.stock_location,
            'location_dest_id':self.customer_location})

        #validatethisdeliveryorder,itshouldbeinthewaitingstate
        picking_out.action_assign()
        self.assertEqual(picking_out.state,"confirmed")

    deftest_72_picking_state_partial_reserve(self):
        """Thistestwillcheckthatthestateofthepickingiscorrectlycomputedaccording
        tothestateofitsmovelinesanditsmovetype.
        """
        #move_type:direct==partial,one==allatonce
        #picking:confirmed==waitingavailability,partially_available=partiallyavailable

        #-----------------------------------------------------------
        #"partial"and"reserve"scenario
        #-----------------------------------------------------------
        #getoneproductinstock
        inventory=self.env['stock.inventory'].create({
            'name':'InventoryProductTable',
            'line_ids':[(0,0,{
                'product_id':self.productA.id,
                'product_uom_id':self.productA.uom_id.id,
                'product_qty':1,
                'location_id':self.stock_location
            })]
        })
        inventory.action_start()
        inventory.action_validate()

        #createa"partial"deliveryorderfortwoproducts
        picking_out=self.PickingObj.create({
            'picking_type_id':self.picking_type_out,
            'location_id':self.stock_location,
            'location_dest_id':self.customer_location})
        picking_out.move_type='direct'

        self.MoveObj.create({
            'name':self.productA.name,
            'product_id':self.productA.id,
            'product_uom_qty':2,
            'product_uom':self.productA.uom_id.id,
            'picking_id':picking_out.id,
            'location_id':self.stock_location,
            'location_dest_id':self.customer_location})

        #validatethisdeliveryorder,itshouldbeinpartiallyavailable
        picking_out.action_assign()
        self.assertEqual(picking_out.state,"assigned")

        #receiveoneproductinstock
        inventory=self.env['stock.inventory'].create({
            'name':'InventoryProductTable',
            'line_ids':[(0,0,{
                'product_id':self.productA.id,
                'product_uom_id':self.productA.uom_id.id,
                'product_qty':2,
                'location_id':self.stock_location
            })]
        })
        inventory.action_start()
        inventory.action_validate()

        #recheckavailabilityofthedeliveryorder,itshouldbeassigned
        picking_out.action_assign()
        self.assertEqual(picking_out.state,"assigned")

    deftest_73_picking_state_partial_force_assign(self):
        """Thistestwillcheckthatthestateofthepickingiscorrectlycomputedaccording
        tothestateofitsmovelinesanditsmovetype.
        """
        #move_type:direct==partial,one==allatonce
        #picking:confirmed==waitingavailability,partially_available=partiallyavailable

        #-----------------------------------------------------------
        #"partial"and"forceassign"scenario
        #-----------------------------------------------------------
        picking_out=self.PickingObj.create({
            'picking_type_id':self.picking_type_out,
            'location_id':self.stock_location,
            'location_dest_id':self.customer_location})
        picking_out.move_type='direct'

        self.MoveObj.create({
            'name':self.productA.name,
            'product_id':self.productA.id,
            'product_uom_qty':2,
            'product_uom':self.productA.uom_id.id,
            'picking_id':picking_out.id,
            'location_id':self.stock_location,
            'location_dest_id':self.customer_location})

        #validatethisdeliveryorder,itshouldbeinthewaitingstate
        picking_out.action_assign()
        self.assertEqual(picking_out.state,"confirmed")

    deftest_74_move_state_waiting_mto(self):
        """Thistestwillcheckthatwhenamoveisunreserved,itsstatechangesto'waiting'if
        ithasancestorsorifithasa'procure_method'equalto'make_to_order'elsethestate
        changesto'confirmed'.
        """
        picking_out=self.PickingObj.create({
            'picking_type_id':self.picking_type_out,
            'location_id':self.stock_location,
            'location_dest_id':self.customer_location})
        move_mto_alone=self.MoveObj.create({
            'name':self.productA.name,
            'product_id':self.productA.id,
            'product_uom_qty':2,
            'product_uom':self.productA.uom_id.id,
            'picking_id':picking_out.id,
            'location_id':self.stock_location,
            'location_dest_id':self.customer_location,
            'procure_method':'make_to_order'})
        move_with_ancestors=self.MoveObj.create({
            'name':self.productB.name,
            'product_id':self.productB.id,
            'product_uom_qty':2,
            'product_uom':self.productB.uom_id.id,
            'picking_id':picking_out.id,
            'location_id':self.stock_location,
            'location_dest_id':self.customer_location})
        self.MoveObj.create({
            'name':self.productB.name,
            'product_id':self.productB.id,
            'product_uom_qty':2,
            'product_uom':self.productB.uom_id.id,
            'picking_id':picking_out.id,
            'location_id':self.stock_location,
            'location_dest_id':self.customer_location,
            'move_dest_ids':[(4,move_with_ancestors.id,0)]})
        other_move=self.MoveObj.create({
            'name':self.productC.name,
            'product_id':self.productC.id,
            'product_uom_qty':2,
            'product_uom':self.productC.uom_id.id,
            'picking_id':picking_out.id,
            'location_id':self.stock_location,
            'location_dest_id':self.customer_location})

        move_mto_alone._action_confirm()
        move_with_ancestors._action_confirm()
        other_move._action_confirm()

        move_mto_alone._do_unreserve()
        move_with_ancestors._do_unreserve()
        other_move._do_unreserve()

        self.assertEqual(move_mto_alone.state,"waiting")
        self.assertEqual(move_with_ancestors.state,"waiting")
        self.assertEqual(other_move.state,"confirmed")

    deftest_80_partial_picking_without_backorder(self):
        """Thistestwillcreateapickingwithaninitialdemandforaproduct
        thenprocessalesserquantitythantheexpectedquantitytobeprocessed.
        Whenthewizardaskforabackorder,the'NOBACKORDER'optionwillbeselected
        andnobackordershouldbecreatedafterwards
        """

        picking=self.PickingObj.create({
            'picking_type_id':self.picking_type_in,
            'location_id':self.supplier_location,
            'location_dest_id':self.stock_location})
        move_a=self.MoveObj.create({
            'name':self.productA.name,
            'product_id':self.productA.id,
            'product_uom_qty':10,
            'product_uom':self.productA.uom_id.id,
            'picking_id':picking.id,
            'location_id':self.supplier_location,
            'location_dest_id':self.stock_location})

        picking.action_confirm()

        #Only4itemsareprocessed
        move_a.move_line_ids.qty_done=4
        res_dict=picking.button_validate()
        backorder_wizard=Form(self.env['stock.backorder.confirmation'].with_context(res_dict['context'])).save()
        backorder_wizard.process_cancel_backorder()

        #Checkingthatnobackorderswereattachedtothepicking
        self.assertFalse(picking.backorder_id)

        #Checkingthattheoriginalmoveisstillinthesamepicking
        self.assertEqual(move_a.picking_id.id,picking.id)

        move_lines=picking.move_lines
        move_done=move_lines.browse(move_a.id)
        move_canceled=move_lines-move_done

        #Checkingthattheoriginalmovewassettodone
        self.assertEqual(move_done.product_uom_qty,4)
        self.assertEqual(move_done.state,'done')

        #Checkingthatthenewmovecreatedwascanceled
        self.assertEqual(move_canceled.product_uom_qty,6)
        self.assertEqual(move_canceled.state,'cancel')

        #Checkingthatthecanceledmoveisintheoriginalpicking
        self.assertIn(move_canceled.id,picking.move_lines.mapped('id'))

    deftest_transit_multi_companies(self):
        """Ensurethatintercompanyrulessetthecorrectcompanyonpicking
        andtheirmoves.
        """
        grp_multi_loc=self.env.ref('stock.group_stock_multi_locations')
        grp_multi_routes=self.env.ref('stock.group_adv_location')
        grp_multi_companies=self.env.ref('base.group_multi_company')
        self.env.user.write({'groups_id':[(4,grp_multi_loc.id)]})
        self.env.user.write({'groups_id':[(4,grp_multi_routes.id)]})
        self.env.user.write({'groups_id':[(4,grp_multi_companies.id)]})

        company_2=self.company
        #Needtoaddanewcompanyonuser.
        self.env.user.write({'company_ids':[(4,company_2.id)]})

        warehouse_company_1=self.env['stock.warehouse'].search([('company_id','=',self.env.company.id)],limit=1)

        f=Form(self.env['stock.location.route'])
        f.name='FromCompany1toInterCompany'
        f.company_id=self.env.company
        withf.rule_ids.new()asrule:
            rule.name='FromCompany1toInterCompany'
            rule.action='pull'
            rule.picking_type_id=warehouse_company_1.in_type_id
            rule.location_src_id=self.env.ref('stock.stock_location_inter_wh')
            rule.procure_method='make_to_order'
        route_a=f.save()
        warehouse_company_2=self.env['stock.warehouse'].search([('company_id','=',company_2.id)],limit=1)
        f=Form(self.env['stock.location.route'])
        f.name='FromInterCompanytoCompany2'
        f.company_id=company_2
        withf.rule_ids.new()asrule:
            rule.name='FromInterCompanytoCompany2'
            rule.action='pull'
            rule.picking_type_id=warehouse_company_2.out_type_id
            rule.location_id=self.env.ref('stock.stock_location_inter_wh')
            rule.procure_method='make_to_stock'
        route_b=f.save()

        product=self.env['product.product'].create({
            'name':'TheproductfromtheothercompanythatIabsolutelywant',
            'type':'product',
            'route_ids':[(4,route_a.id),(4,route_b.id)]
        })

        replenish_wizard=self.env['product.replenish'].create({
            'product_id':product.id,
            'product_tmpl_id':product.product_tmpl_id.id,
            'product_uom_id':self.uom_unit.id,
            'quantity':'5',
            'warehouse_id':warehouse_company_1.id,
        })
        replenish_wizard.launch_replenishment()
        incoming_picking=self.env['stock.picking'].search([('product_id','=',product.id),('picking_type_id','=',warehouse_company_1.in_type_id.id)])
        outgoing_picking=self.env['stock.picking'].search([('product_id','=',product.id),('picking_type_id','=',warehouse_company_2.out_type_id.id)])

        self.assertEqual(incoming_picking.company_id,self.env.company)
        self.assertEqual(incoming_picking.move_lines.company_id,self.env.company)
        self.assertEqual(outgoing_picking.company_id,company_2)
        self.assertEqual(outgoing_picking.move_lines.company_id,company_2)

    deftest_transit_multi_companies_ultimate(self):
        """Ensurethatintercompanyrulessetthecorrectcompanyonpicking
        andtheirmoves.Thistestvalidateapickingwithmake_to_ordermoves.
        Movesarecreatedinbatchwithacompany-focusedenvironment.Thistest
        shouldcreatemovesforcompany_2andcompany_3atthesametime.
        Ensuretheyarenotcreateinthesamebatch.
        """
        grp_multi_loc=self.env.ref('stock.group_stock_multi_locations')
        grp_multi_routes=self.env.ref('stock.group_adv_location')
        grp_multi_companies=self.env.ref('base.group_multi_company')
        self.env.user.write({'groups_id':[(4,grp_multi_loc.id)]})
        self.env.user.write({'groups_id':[(4,grp_multi_routes.id)]})
        self.env.user.write({'groups_id':[(4,grp_multi_companies.id)]})

        company_2=self.company
        #Needtoaddanewcompanyonuser.
        self.env.user.write({'company_ids':[(4,company_2.id)]})

        warehouse_company_1=self.env['stock.warehouse'].search([('company_id','=',self.env.company.id)],limit=1)

        f=Form(self.env['stock.location.route'])
        f.name='FromCompany1toInterCompany'
        f.company_id=self.env.company
        withf.rule_ids.new()asrule:
            rule.name='FromCompany1toInterCompany'
            rule.action='pull'
            rule.picking_type_id=warehouse_company_1.in_type_id
            rule.location_src_id=self.env.ref('stock.stock_location_inter_wh')
            rule.procure_method='make_to_order'
        route_a=f.save()

        warehouse_company_2=self.env['stock.warehouse'].search([('company_id','=',company_2.id)],limit=1)
        f=Form(self.env['stock.location.route'])
        f.name='FromInterCompanytoCompany2'
        f.company_id=company_2
        withf.rule_ids.new()asrule:
            rule.name='FromInterCompanytoCompany2'
            rule.action='pull'
            rule.picking_type_id=warehouse_company_2.out_type_id
            rule.location_id=self.env.ref('stock.stock_location_inter_wh')
            rule.procure_method='make_to_stock'
        route_b=f.save()

        company_3=self.env['res.company'].create({
            'name':'AlaskaCompany'
        })

        warehouse_company_3=self.env['stock.warehouse'].search([('company_id','=',company_3.id)],limit=1)
        f=Form(self.env['stock.location.route'])
        f.name='FromInterCompanytoCompany3'
        f.company_id=company_3
        withf.rule_ids.new()asrule:
            rule.name='FromInterCompanytoCompany3'
            rule.action='pull'
            rule.picking_type_id=warehouse_company_3.out_type_id
            rule.location_id=self.env.ref('stock.stock_location_inter_wh')
            rule.procure_method='make_to_stock'
        route_c=f.save()

        product_from_company_2=self.env['product.product'].create({
            'name':'TheproductfromtheothercompanythatIabsolutelywant',
            'type':'product',
            'route_ids':[(4,route_a.id),(4,route_b.id)]
        })

        product_from_company_3=self.env['product.product'].create({
            'name':'Ice',
            'type':'product',
            'route_ids':[(4,route_a.id),(4,route_c.id)]
        })

        f=Form(self.env['stock.picking'],view='stock.view_picking_form')
        f.picking_type_id=warehouse_company_1.out_type_id
        withf.move_ids_without_package.new()asmove:
            move.product_id=product_from_company_2
            move.product_uom_qty=5
        withf.move_ids_without_package.new()asmove:
            move.product_id=product_from_company_3
            move.product_uom_qty=5
        picking=f.save()

        picking.move_ids_without_package.write({'procure_method':'make_to_order'})
        picking.action_confirm()

        incoming_picking=self.env['stock.picking'].search([('product_id','=',product_from_company_2.id),('picking_type_id','=',warehouse_company_1.in_type_id.id)])
        outgoing_picking=self.env['stock.picking'].search([('product_id','=',product_from_company_2.id),('picking_type_id','=',warehouse_company_2.out_type_id.id)])

        self.assertEqual(incoming_picking.company_id,self.env.company)
        self.assertEqual(incoming_picking.move_lines.mapped('company_id'),self.env.company)
        self.assertEqual(outgoing_picking.company_id,company_2)
        self.assertEqual(outgoing_picking.move_lines.company_id,company_2)

        incoming_picking=self.env['stock.picking'].search([('product_id','=',product_from_company_3.id),('picking_type_id','=',warehouse_company_1.in_type_id.id)])
        outgoing_picking=self.env['stock.picking'].search([('product_id','=',product_from_company_3.id),('picking_type_id','=',warehouse_company_3.out_type_id.id)])

        self.assertEqual(incoming_picking.company_id,self.env.company)
        self.assertEqual(incoming_picking.move_lines.mapped('company_id'),self.env.company)
        self.assertEqual(outgoing_picking.company_id,company_3)
        self.assertEqual(outgoing_picking.move_lines.company_id,company_3)

    deftest_picking_scheduled_date_readonlyness(self):
        """Asitseemswekeepbreakingthisthingoverandoverthissmall
        testensurethescheduled_dateiswritableonapickinginstate'draft'or'confirmed'
        """
        partner=self.env['res.partner'].create({'name':'HubertBonisseurdelaBath'})
        product=self.env['product.product'].create({'name':'Unpetitcoupdepolish','type':'product'})
        wh=self.env['stock.warehouse'].search([('company_id','=',self.env.company.id)],limit=1)

        f=Form(self.env['stock.picking'],view='stock.view_picking_form')
        f.partner_id=partner
        f.picking_type_id=wh.out_type_id
        withf.move_ids_without_package.new()asmove:
            move.product_id=product
            move.product_uom_qty=5
        f.scheduled_date=fields.Datetime.now()
        picking=f.save()

        f=Form(picking,view='stock.view_picking_form')
        f.scheduled_date=fields.Datetime.now()
        picking=f.save()

        self.assertEqual(f.state,'draft')
        picking.action_confirm()

        f=Form(picking,view='stock.view_picking_form')
        f.scheduled_date=fields.Datetime.now()
        picking=f.save()

        self.assertEqual(f.state,'confirmed')

    deftest_validate_multiple_pickings_with_same_lot_names(self):
        """Checksonlyonelotiscreatedwhenthesamelotnameisusedin
        differentpickingsandthosepickingsarevalidatedtogether.
        """
        #Createstwotrackedproducts(onebylotsandonebySN).
        product_lot=self.env['product.product'].create({
            'name':'Trackedbylot',
            'type':'product',
            'tracking':'lot',
        })
        product_serial=self.env['product.product'].create({
            'name':'TrackedbySN',
            'type':'product',
            'tracking':'serial',
        })
        #Createstworeceiptsusingsomelotnamesincommon.
        picking_type=self.env['stock.picking.type'].browse(self.picking_type_in)
        picking_form=Form(self.env['stock.picking'])
        picking_form.picking_type_id=picking_type
        withpicking_form.move_ids_without_package.new()asmove:
            move.product_id=product_lot
            move.product_uom_qty=8
        receipt_1=picking_form.save()
        receipt_1.action_confirm()

        move_form=Form(receipt_1.move_lines,view="stock.view_stock_move_operations")
        withmove_form.move_line_ids.edit(0)asline:
            line.lot_name='lot-001'
            line.qty_done=3
        withmove_form.move_line_ids.new()asline:
            line.lot_name='lot-002'
            line.qty_done=3
        withmove_form.move_line_ids.new()asline:
            line.lot_name='lot-003'
            line.qty_done=2
        move=move_form.save()

        picking_form=Form(self.env['stock.picking'])
        picking_form.picking_type_id=picking_type
        withpicking_form.move_ids_without_package.new()asmove:
            move.product_id=product_lot
            move.product_uom_qty=8
        receipt_2=picking_form.save()
        receipt_2.action_confirm()

        move_form=Form(receipt_2.move_lines,view="stock.view_stock_move_operations")
        withmove_form.move_line_ids.edit(0)asline:
            line.lot_name='lot-003'
            line.qty_done=2
        withmove_form.move_line_ids.new()asline:
            line.lot_name='lot-004'
            line.qty_done=4
        withmove_form.move_line_ids.new()asline:
            line.lot_name='lot-001'
            line.qty_done=1
        withmove_form.move_line_ids.new()asline:
            line.lot_name='lot-005'
            line.qty_done=1
        move=move_form.save()

        #Validatesthetworeceiptsandchecksthemovelines'lot.
        (receipt_1|receipt_2).button_validate()
        lots=self.env['stock.production.lot'].search([('product_id','=',product_lot.id)])
        self.assertEqual(len(lots),5)
        lot1,lot2,lot3,lot4,lot5=lots
        self.assertEqual(lot1.name,'lot-001')
        self.assertEqual(lot2.name,'lot-002')
        self.assertEqual(lot3.name,'lot-003')
        self.assertEqual(lot4.name,'lot-004')
        self.assertEqual(lot5.name,'lot-005')
        self.assertEqual(receipt_1.move_line_ids[0].lot_id.id,lot1.id)
        self.assertEqual(receipt_1.move_line_ids[1].lot_id.id,lot2.id)
        self.assertEqual(receipt_1.move_line_ids[2].lot_id.id,lot3.id)
        self.assertEqual(receipt_2.move_line_ids[0].lot_id.id,lot3.id)
        self.assertEqual(receipt_2.move_line_ids[1].lot_id.id,lot4.id)
        self.assertEqual(receipt_2.move_line_ids[2].lot_id.id,lot1.id)
        self.assertEqual(receipt_2.move_line_ids[3].lot_id.id,lot5.id)

        #Checksalsoitstillraiseanerrorwhenittriestocreatemultipletime
        #thesameserialnumbers(samescenariobutwithSNinsteadoflots).
        picking_type=self.env['stock.picking.type'].browse(self.picking_type_in)
        picking_form=Form(self.env['stock.picking'])
        picking_form.picking_type_id=picking_type
        withpicking_form.move_ids_without_package.new()asmove:
            move.product_id=product_serial
            move.product_uom_qty=2
        receipt_1=picking_form.save()
        receipt_1.action_confirm()

        move_form=Form(receipt_1.move_lines,view="stock.view_stock_move_operations")
        withmove_form.move_line_ids.edit(0)asline:
            line.lot_name='sn-001'
        withmove_form.move_line_ids.new()asline:
            line.lot_name='sn-002'
        move=move_form.save()

        picking_form=Form(self.env['stock.picking'])
        picking_form.picking_type_id=picking_type
        withpicking_form.move_ids_without_package.new()asmove:
            move.product_id=product_serial
            move.product_uom_qty=2
        receipt_2=picking_form.save()
        receipt_2.action_confirm()

        move_form=Form(receipt_2.move_lines,view="stock.view_stock_move_operations")
        withmove_form.move_line_ids.edit(0)asline:
            line.lot_name='sn-002'
        withmove_form.move_line_ids.new()asline:
            line.lot_name='sn-001'
        move=move_form.save()

        #Validatesthetworeceipts=>ItshouldraiseanerrorasthereisduplicateSN.
        withself.assertRaises(ValidationError):
            (receipt_1|receipt_2).button_validate()

    deftest_assign_qty_to_first_move(self):
        """Supposetwooutpickingwaitingforanavailablequantity.Whenreceivingsuch
         aquantity,thelattershouldbeassigntothepickingwiththehighestpriority
         andtheearliestscheduleddate."""
        defcreate_picking(type,from_loc,to_loc,sequence=10,delay=0):
            picking=self.PickingObj.create({
                'picking_type_id':type,
                'location_id':from_loc,
                'location_dest_id':to_loc,
            })
            self.MoveObj.create({
                'name':self.productA.name,
                'sequence':sequence,
                'date':fields.Datetime.add(fields.Datetime.now(),second=delay),
                'product_id':self.productA.id,
                'product_uom_qty':1,
                'product_uom':self.productA.uom_id.id,
                'picking_id':picking.id,
                'location_id':from_loc,
                'location_dest_id':to_loc,
            })
            picking.action_confirm()
            returnpicking

        defvalidate_picking(picking):
            res_dict=picking.button_validate()
            wizard=Form(self.env[(res_dict.get('res_model'))].with_context(res_dict['context'])).save()
            wizard.process()

        out01=create_picking(self.picking_type_out,self.stock_location,self.customer_location)
        out02=create_picking(self.picking_type_out,self.stock_location,self.customer_location,sequence=2,delay=1)
        in01=create_picking(self.picking_type_in,self.supplier_location,self.stock_location,delay=2)

        validate_picking(in01)
        self.assertEqual(out01.state,'assigned')
        self.assertEqual(out02.state,'confirmed')

        validate_picking(out01)

        out03=create_picking(self.picking_type_out,self.stock_location,self.customer_location,delay=3)
        out03.priority="1"
        in02=create_picking(self.picking_type_in,self.supplier_location,self.stock_location,delay=4)

        validate_picking(in02)
        self.assertEqual(out02.state,'confirmed')
        self.assertEqual(out03.state,'assigned')

    deftest_stock_move_with_partner_id(self):
        """Ensurethatthepartner_idofthepickingentryis
        transmittedtotheSMuponobjectcreation.
        """
        partner_1=self.env['res.partner'].create({'name':'HubertBonisseurdelaBath'})
        partner_2=self.env['res.partner'].create({'name':'DonaldClairvoyantduBled'})
        product=self.env['product.product'].create({'name':'Unpetitcoupdepolish','type':'product'})
        wh=self.env['stock.warehouse'].search([('company_id','=',self.env.company.id)],limit=1)

        f=Form(self.env['stock.picking'])
        f.partner_id=partner_1
        f.picking_type_id=wh.out_type_id
        withf.move_ids_without_package.new()asmove:
            move.product_id=product
            move.product_uom_qty=5
        picking=f.save()

        self.assertEqual(picking.move_lines.partner_id,partner_1)

        picking.write({'partner_id':partner_2.id})
        self.assertEqual(picking.move_lines.partner_id,partner_2)

    deftest_cancel_picking_with_scrapped_products(self):
        """
        Theuserscrapssomeproductsofapicking,thencancelthispicking
        ThetestensuresthatthescrappedSMisnotcancelled
        """
        stock_location=self.env['stock.location'].browse(self.stock_location)
        self.env['stock.quant']._update_available_quantity(self.productA,stock_location,10)

        picking=self.env['stock.picking'].create({
            'picking_type_id':self.picking_type_out,
            'location_id':self.supplier_location,
            'location_dest_id':self.stock_location,
        })
        move=self.env['stock.move'].create({
            'name':self.productA.name,
            'product_id':self.productA.id,
            'product_uom_qty':1,
            'product_uom':self.productA.uom_id.id,
            'picking_id':picking.id,
            'location_id':self.supplier_location,
            'location_dest_id':self.stock_location,
        })

        picking.action_confirm()
        picking.action_assign()

        scrap=self.env['stock.scrap'].create({
            'picking_id':picking.id,
            'product_id':self.productA.id,
            'product_uom_id':self.productA.uom_id.id,
            'scrap_qty':1.0,
        })
        scrap.do_scrap()

        picking.action_cancel()

        self.assertEqual(picking.state,'cancel')
        self.assertEqual(move.state,'cancel')
        self.assertEqual(scrap.move_id.state,'done')

    deftest_assign_sm_to_existing_picking(self):
        """
        Suppose:
            -TwowarehousesWH01,WH02
            -Threeproductswiththeroute'WH02suppliedbyWH01'
        Wetriggeranorderpointforeachproduct
        Thereshouldbetwopickings(outfromWH01+intoWH02)
        """
        wh01_address,wh02_address=self.env['res.partner'].create([{
            'name':'Address%s'%i,
            'parent_id':self.env.company.id,
            'type':'delivery',
        }foriin[1,2]])

        warehouse01=self.env['stock.warehouse'].search([('company_id','=',self.env.company.id)],limit=1)
        warehouse01.partner_id=wh01_address
        warehouse02=self.env['stock.warehouse'].create({
            'name':'SecondWarehouse',
            'code':'WH02',
            'partner_id':wh02_address.id,
            'resupply_wh_ids':[(6,0,warehouse01.ids)],
        })

        wh01_stock_location=warehouse01.lot_stock_id
        wh02_stock_location=warehouse02.lot_stock_id
        products=self.productA+self.productB+self.productC

        forproductinproducts:
            product.route_ids=[(6,0,warehouse02.resupply_route_ids.ids)]
            self.env['stock.quant']._update_available_quantity(product,wh01_stock_location,10)
            self.env['stock.warehouse.orderpoint'].create({
                'name':'RRfor%s'%product.name,
                'warehouse_id':warehouse02.id,
                'location_id':wh02_stock_location.id,
                'product_id':product.id,
                'product_min_qty':1,
                'product_max_qty':5,
            })

        self.env['procurement.group'].run_scheduler()

        out_moves=self.env['stock.move'].search([('product_id','in',products.ids),('picking_id','!=',False),('location_id','=',wh01_stock_location.id)])
        in_moves=self.env['stock.move'].search([('product_id','in',products.ids),('picking_id','!=',False),('location_dest_id','=',wh02_stock_location.id)])

        out_picking=out_moves[0].picking_id
        self.assertEqual(len(out_moves),3)
        self.assertEqual(out_moves.product_id,products)
        self.assertEqual(out_moves.picking_id,out_picking,'AllSMshouldbepartofthesamepicking')
        self.assertEqual(out_picking.partner_id,wh02_address,'Itshouldbeanoutgoingpickingto%s'%wh02_address.display_name)

        in_picking=in_moves[0].picking_id
        self.assertEqual(len(in_moves),3)
        self.assertEqual(in_moves.product_id,products)
        self.assertEqual(in_moves.picking_id,in_picking,'AllSMshouldbepartofthesamepicking')
        self.assertEqual(in_picking.partner_id,wh01_address,'Itshouldbeanincomingpickingfrom%s'%wh01_address.display_name)
