#-*-coding:utf-8-*-
#PartofFlectra.SeeLICENSEfileforfullcopyrightandlicensingdetails.

fromdatetimeimportdate,datetime,timedelta

fromflectra.tests.commonimportForm,SavepointCase


classTestReportsCommon(SavepointCase):
    @classmethod
    defsetUpClass(cls):
        super().setUpClass()
        cls.partner=cls.env['res.partner'].create({'name':'Partner'})
        cls.ModelDataObj=cls.env['ir.model.data']
        cls.picking_type_in=cls.env['stock.picking.type'].browse(cls.ModelDataObj.xmlid_to_res_id('stock.picking_type_in'))
        cls.picking_type_out=cls.env['stock.picking.type'].browse(cls.ModelDataObj.xmlid_to_res_id('stock.picking_type_out'))
        cls.supplier_location=cls.env['stock.location'].browse(cls.ModelDataObj.xmlid_to_res_id('stock.stock_location_suppliers'))
        cls.stock_location=cls.env['stock.location'].browse(cls.ModelDataObj.xmlid_to_res_id('stock.stock_location_stock'))

        product_form=Form(cls.env['product.product'])
        product_form.type='product'
        product_form.name='Product'
        cls.product=product_form.save()
        cls.product_template=cls.product.product_tmpl_id

    defget_report_forecast(self,product_template_ids=False,product_variant_ids=False,context=False):
        ifproduct_template_ids:
            report=self.env['report.stock.report_product_template_replenishment']
            product_ids=product_template_ids
        elifproduct_variant_ids:
            report=self.env['report.stock.report_product_product_replenishment']
            product_ids=product_template_ids
        ifcontext:
            report=report.with_context(context)
        report_values=report._get_report_values(docids=product_ids)
        docs=report_values['docs']
        lines=docs['lines']
        returnreport_values,docs,lines


classTestReports(TestReportsCommon):
    deftest_reports(self):
        product1=self.env['product.product'].create({
            'name':'Mellohi',
            'default_code':'C418',
            'type':'product',
            'categ_id':self.env.ref('product.product_category_all').id,
            'tracking':'lot',
            'barcode':'scan_me'
        })
        lot1=self.env['stock.production.lot'].create({
            'name':'Volume-Beta',
            'product_id':product1.id,
            'company_id':self.env.company.id,
        })
        report=self.env.ref('stock.label_lot_template')
        target=b'\n\n\n^XA\n^FO100,50\n^A0N,44,33^FD[C418]Mellohi^FS\n^FO100,100\n^A0N,44,33^FDLN/SN:Volume-Beta^FS\n^FO100,150^BY3\n^BCN,100,Y,N,N\n^FDVolume-Beta^FS\n^XZ\n\n\n'

        rendering,qweb_type=report._render_qweb_text(lot1.id)
        self.assertEqual(target,rendering.replace(b'',b''),'Therenderingisnotgood')
        self.assertEqual(qweb_type,'text','thereporttypeisnotgood')

    deftest_report_quantity_1(self):
        product_form=Form(self.env['product.product'])
        product_form.type='product'
        product_form.name='Product'
        product=product_form.save()

        warehouse=self.env['stock.warehouse'].search([],limit=1)
        stock=self.env['stock.location'].create({
            'name':'NewStock',
            'usage':'internal',
            'location_id':warehouse.view_location_id.id,
        })

        #InventoryAdjustementof50.0today.
        self.env['stock.quant'].with_context(inventory_mode=True).create({
            'product_id':product.id,
            'location_id':stock.id,
            'inventory_quantity':50
        })
        self.env['stock.move'].flush()
        report_records_today=self.env['report.stock.quantity'].read_group(
            [('product_id','=',product.id),('date','=',date.today())],
            ['product_qty'],[],lazy=False)
        report_records_tomorrow=self.env['report.stock.quantity'].read_group(
            [('product_id','=',product.id),('date','=',date.today()+timedelta(days=1))],
            ['product_qty'],[])
        report_records_yesterday=self.env['report.stock.quantity'].read_group(
            [('product_id','=',product.id),('date','=',date.today()-timedelta(days=1))],
            ['product_qty'],[])
        self.assertEqual(sum([r['product_qty']forrinreport_records_today]),50.0)
        self.assertEqual(sum([r['product_qty']forrinreport_records_tomorrow]),50.0)
        self.assertEqual(sum([r['product_qty']forrinreport_records_yesterday]),0.0)

        #Deliveryof20.0unitstomorrow
        move_out=self.env['stock.move'].create({
            'name':'MoveOut20',
            'date':datetime.now()+timedelta(days=1),
            'location_id':stock.id,
            'location_dest_id':self.env.ref('stock.stock_location_customers').id,
            'product_id':product.id,
            'product_uom':product.uom_id.id,
            'product_uom_qty':20.0,
        })
        self.env['stock.move'].flush()
        report_records_tomorrow=self.env['report.stock.quantity'].read_group(
            [('product_id','=',product.id),('date','=',date.today()+timedelta(days=1))],
            ['product_qty'],[])
        self.assertEqual(sum([r['product_qty']forrinreport_records_tomorrow]),50.0)
        move_out._action_confirm()
        self.env['stock.move'].flush()
        report_records_tomorrow=self.env['report.stock.quantity'].read_group(
            [('product_id','=',product.id),('date','=',date.today()+timedelta(days=1))],
            ['product_qty','state'],['state'],lazy=False)
        self.assertEqual(sum([r['product_qty']forrinreport_records_tomorrowifr['state']=='forecast']),30.0)
        self.assertEqual(sum([r['product_qty']forrinreport_records_tomorrowifr['state']=='out']),-20.0)
        report_records_today=self.env['report.stock.quantity'].read_group(
            [('product_id','=',product.id),('date','=',date.today())],
            ['product_qty','state'],['state'],lazy=False)
        self.assertEqual(sum([r['product_qty']forrinreport_records_todayifr['state']=='forecast']),50.0)

        #Receiptof10.0unitstomorrow
        move_in=self.env['stock.move'].create({
            'name':'MoveIn10',
            'date':datetime.now()+timedelta(days=1),
            'location_id':self.env.ref('stock.stock_location_suppliers').id,
            'location_dest_id':stock.id,
            'product_id':product.id,
            'product_uom':product.uom_id.id,
            'product_uom_qty':10.0,
        })
        move_in._action_confirm()
        self.env['stock.move'].flush()
        report_records_tomorrow=self.env['report.stock.quantity'].read_group(
            [('product_id','=',product.id),('date','=',date.today()+timedelta(days=1))],
            ['product_qty','state'],['state'],lazy=False)
        self.assertEqual(sum([r['product_qty']forrinreport_records_tomorrowifr['state']=='forecast']),40.0)
        self.assertEqual(sum([r['product_qty']forrinreport_records_tomorrowifr['state']=='out']),-20.0)
        self.assertEqual(sum([r['product_qty']forrinreport_records_tomorrowifr['state']=='in']),10.0)
        report_records_today=self.env['report.stock.quantity'].read_group(
            [('product_id','=',product.id),('date','=',date.today())],
            ['product_qty','state'],['state'],lazy=False)
        self.assertEqual(sum([r['product_qty']forrinreport_records_todayifr['state']=='forecast']),50.0)

        #Deliveryof20.0unitstomorrow
        move_out=self.env['stock.move'].create({
            'name':'MoveOut30-Day-1',
            'date':datetime.now()-timedelta(days=1),
            'location_id':stock.id,
            'location_dest_id':self.env.ref('stock.stock_location_customers').id,
            'product_id':product.id,
            'product_uom':product.uom_id.id,
            'product_uom_qty':30.0,
        })
        move_out._action_confirm()
        self.env['stock.move'].flush()
        report_records_today=self.env['report.stock.quantity'].read_group(
            [('product_id','=',product.id),('date','=',date.today())],
            ['product_qty','state'],['state'],lazy=False)
        report_records_tomorrow=self.env['report.stock.quantity'].read_group(
            [('product_id','=',product.id),('date','=',date.today()+timedelta(days=1))],
            ['product_qty','state'],['state'],lazy=False)
        report_records_yesterday=self.env['report.stock.quantity'].read_group(
            [('product_id','=',product.id),('date','=',date.today()-timedelta(days=1))],
            ['product_qty','state'],['state'],lazy=False)

        self.assertEqual(sum([r['product_qty']forrinreport_records_yesterdayifr['state']=='forecast']),-30.0)
        self.assertEqual(sum([r['product_qty']forrinreport_records_yesterdayifr['state']=='out']),-30.0)
        self.assertEqual(sum([r['product_qty']forrinreport_records_yesterdayifr['state']=='in']),0.0)

        self.assertEqual(sum([r['product_qty']forrinreport_records_todayifr['state']=='forecast']),20.0)
        self.assertEqual(sum([r['product_qty']forrinreport_records_todayifr['state']=='out']),0.0)
        self.assertEqual(sum([r['product_qty']forrinreport_records_todayifr['state']=='in']),0.0)

        self.assertEqual(sum([r['product_qty']forrinreport_records_tomorrowifr['state']=='forecast']),10.0)
        self.assertEqual(sum([r['product_qty']forrinreport_records_tomorrowifr['state']=='out']),-20.0)
        self.assertEqual(sum([r['product_qty']forrinreport_records_tomorrowifr['state']=='in']),10.0)

    deftest_report_quantity_2(self):
        """Notsupportedcase.
        """
        product_form=Form(self.env['product.product'])
        product_form.type='product'
        product_form.name='Product'
        product=product_form.save()

        warehouse=self.env['stock.warehouse'].search([],limit=1)
        stock=self.env['stock.location'].create({
            'name':'StockUnderWarehouse',
            'usage':'internal',
            'location_id':warehouse.view_location_id.id,
        })
        stock_without_wh=self.env['stock.location'].create({
            'name':'StockOutsideWarehouse',
            'usage':'internal',
            'location_id':self.env.ref('stock.stock_location_locations').id,
        })
        self.env['stock.quant'].with_context(inventory_mode=True).create({
            'product_id':product.id,
            'location_id':stock.id,
            'inventory_quantity':50
        })
        self.env['stock.quant'].with_context(inventory_mode=True).create({
            'product_id':product.id,
            'location_id':stock_without_wh.id,
            'inventory_quantity':50
        })
        move=self.env['stock.move'].create({
            'name':'Moveoutsidewarehouse',
            'location_id':stock.id,
            'location_dest_id':stock_without_wh.id,
            'product_id':product.id,
            'product_uom':product.uom_id.id,
            'product_uom_qty':10.0,
        })
        move._action_confirm()
        self.env['stock.move'].flush()
        report_records=self.env['report.stock.quantity'].read_group(
            [('product_id','=',product.id),('date','=',date.today()),('warehouse_id','!=',False)],
            ['product_qty','state'],['state'],lazy=False)
        self.assertEqual(sum([r['product_qty']forrinreport_recordsifr['state']=='forecast']),40.0)
        report_records=self.env['report.stock.quantity'].read_group(
            [('product_id','=',product.id),('date','=',date.today())],
            ['product_qty','state'],['state'],lazy=False)
        self.assertEqual(sum([r['product_qty']forrinreport_recordsifr['state']=='forecast']),40.0)
        move=self.env['stock.move'].create({
            'name':'Moveoutsidewarehouse',
            'location_id':stock_without_wh.id,
            'location_dest_id':self.env.ref('stock.stock_location_customers').id,
            'product_id':product.id,
            'product_uom':product.uom_id.id,
            'product_uom_qty':10.0,
        })
        move._action_confirm()
        self.env['stock.move'].flush()
        report_records=self.env['report.stock.quantity'].read_group(
            [('product_id','=',product.id),('date','=',date.today())],
            ['product_qty','state'],['state'],lazy=False)
        self.assertEqual(sum([r['product_qty']forrinreport_recordsifr['state']=='forecast']),40.0)

    deftest_report_quantity_3(self):
        product_form=Form(self.env['product.product'])
        product_form.type='product'
        product_form.name='Product'
        product=product_form.save()

        warehouse=self.env['stock.warehouse'].search([],limit=1)
        stock=self.env['stock.location'].create({
            'name':'Rack',
            'usage':'view',
            'location_id':warehouse.view_location_id.id,
        })
        stock_real_loc=self.env['stock.location'].create({
            'name':'Drawer',
            'usage':'internal',
            'location_id':stock.id,
        })

        self.env['stock.move'].flush()
        report_records=self.env['report.stock.quantity'].read_group(
            [('product_id','=',product.id),('date','=',date.today())],
            ['product_qty'],[],lazy=False)
        self.assertEqual(sum([r['product_qty']forrinreport_recordsifr['product_qty']]),0.0)

        #Receiptof20.0unitstomorrow
        move_in=self.env['stock.move'].create({
            'name':'MoveIn20',
            'location_id':self.env.ref('stock.stock_location_suppliers').id,
            'location_dest_id':stock.id,
            'product_id':product.id,
            'product_uom':product.uom_id.id,
            'product_uom_qty':20.0,
        })
        move_in._action_confirm()
        move_in.move_line_ids.location_dest_id=stock_real_loc.id
        move_in.move_line_ids.qty_done=20.0
        move_in._action_done()
        self.env['stock.move'].flush()
        report_records=self.env['report.stock.quantity'].read_group(
            [('product_id','=',product.id),('date','=',date.today())],
            ['product_qty'],[],lazy=False)
        self.assertEqual(sum([r['product_qty']forrinreport_records]),20.0)

        #Deliveryof10.0unitstomorrow
        move_out=self.env['stock.move'].create({
            'name':'MoveOut10',
            'location_id':stock.id,
            'location_dest_id':self.env.ref('stock.stock_location_customers').id,
            'product_id':product.id,
            'product_uom':product.uom_id.id,
            'product_uom_qty':10.0,
        })
        move_out._action_confirm()
        move_out._action_assign()
        move_out.move_line_ids.qty_done=10.0
        move_out._action_done()
        self.env['stock.move'].flush()
        report_records=self.env['report.stock.quantity'].read_group(
            [('product_id','=',product.id),('date','=',date.today())],
            ['product_qty'],[],lazy=False)
        self.assertEqual(sum([r['product_qty']forrinreport_records]),10.0)

    deftest_report_forecast_1(self):
        """Checksreportdataforproductisempty.Thencreatesandprocess
        someoperationsandchecksthereportdataaccordsrigthlytheseoperations.
        """
        report_values,docs,lines=self.get_report_forecast(product_template_ids=self.product_template.ids)
        draft_picking_qty=docs['draft_picking_qty']
        self.assertEqual(len(lines),0,"Musthave0line.")
        self.assertEqual(draft_picking_qty['in'],0)
        self.assertEqual(draft_picking_qty['out'],0)

        #Createsareceiptthenchecksdraftpickingquantities.
        receipt_form=Form(self.env['stock.picking'].with_context(
            force_detailed_view=True
        ),view='stock.view_picking_form')
        receipt_form.partner_id=self.partner
        receipt_form.picking_type_id=self.picking_type_in
        receipt=receipt_form.save()
        withreceipt_form.move_ids_without_package.new()asmove_line:
            move_line.product_id=self.product
            move_line.product_uom_qty=2
        receipt=receipt_form.save()

        report_values,docs,lines=self.get_report_forecast(product_template_ids=self.product_template.ids)
        draft_picking_qty=docs['draft_picking_qty']
        self.assertEqual(len(lines),0,"Musthave0line.")
        self.assertEqual(draft_picking_qty['in'],2)
        self.assertEqual(draft_picking_qty['out'],0)

        #Createsadeliverythenchecksdraftpickingquantities.
        delivery_form=Form(self.env['stock.picking'].with_context(
            force_detailed_view=True
        ),view='stock.view_picking_form')
        delivery_form.partner_id=self.partner
        delivery_form.picking_type_id=self.picking_type_out
        delivery=delivery_form.save()
        withdelivery_form.move_ids_without_package.new()asmove_line:
            move_line.product_id=self.product
            move_line.product_uom_qty=5
        delivery=delivery_form.save()

        report_values,docs,lines=self.get_report_forecast(product_template_ids=self.product_template.ids)
        draft_picking_qty=docs['draft_picking_qty']
        self.assertEqual(len(lines),0,"Musthave0line.")
        self.assertEqual(draft_picking_qty['in'],2)
        self.assertEqual(draft_picking_qty['out'],5)

        #Confirmsthedelivery:musthaveonereportlineandnomorependingqtyoutnow.
        delivery.action_confirm()
        report_values,docs,lines=self.get_report_forecast(product_template_ids=self.product_template.ids)
        draft_picking_qty=docs['draft_picking_qty']
        self.assertEqual(len(lines),1,"Musthave1line.")
        self.assertEqual(draft_picking_qty['in'],2)
        self.assertEqual(draft_picking_qty['out'],0)
        delivery_line=lines[0]
        self.assertEqual(delivery_line['quantity'],5)
        self.assertEqual(delivery_line['replenishment_filled'],False)
        self.assertEqual(delivery_line['document_out'].id,delivery.id)

        #Confirmsthereceipt,musthavetworeportlinesnow:
        #  -linewith2qty(fromthereceipttothedelivery)
        #  -linewith3qty(delivery,unavailable)
        receipt.action_confirm()
        report_values,docs,lines=self.get_report_forecast(product_template_ids=self.product_template.ids)
        draft_picking_qty=docs['draft_picking_qty']
        self.assertEqual(len(lines),2,"Musthave2line.")
        self.assertEqual(draft_picking_qty['in'],0)
        self.assertEqual(draft_picking_qty['out'],0)
        fulfilled_line=lines[0]
        unavailable_line=lines[1]
        self.assertEqual(fulfilled_line['replenishment_filled'],True)
        self.assertEqual(fulfilled_line['quantity'],2)
        self.assertEqual(fulfilled_line['document_in'].id,receipt.id)
        self.assertEqual(fulfilled_line['document_out'].id,delivery.id)
        self.assertEqual(unavailable_line['replenishment_filled'],False)
        self.assertEqual(unavailable_line['quantity'],3)
        self.assertEqual(unavailable_line['document_out'].id,delivery.id)

        #Createsanewreceiptfortheremainingquantity,confirmit...
        receipt_form=Form(self.env['stock.picking'].with_context(
            force_detailed_view=True
        ),view='stock.view_picking_form')
        receipt_form.partner_id=self.partner
        receipt_form.picking_type_id=self.picking_type_in
        withreceipt_form.move_ids_without_package.new()asmove_line:
            move_line.product_id=self.product
            move_line.product_uom_qty=3
        receipt2=receipt_form.save()
        receipt2.action_confirm()

        #...andvalidthefirstone.
        receipt_form=Form(receipt)
        withreceipt_form.move_ids_without_package.edit(0)asmove_line:
            move_line.quantity_done=2
        receipt=receipt_form.save()
        receipt.button_validate()

        report_values,docs,lines=self.get_report_forecast(product_template_ids=self.product_template.ids)
        draft_picking_qty=docs['draft_picking_qty']
        self.assertEqual(len(lines),2,"Stillmusthave2line.")
        self.assertEqual(draft_picking_qty['in'],0)
        self.assertEqual(draft_picking_qty['out'],0)
        line1=lines[0]
        line2=lines[1]
        #Firstlinemustbefulfilledthankstothestockonhand.
        self.assertEqual(line1['quantity'],2)
        self.assertEqual(line1['replenishment_filled'],True)
        self.assertEqual(line1['document_in'],False)
        self.assertEqual(line1['document_out'].id,delivery.id)
        #Secondlinemustbelinkedtothesecondreceipt.
        self.assertEqual(line2['quantity'],3)
        self.assertEqual(line2['replenishment_filled'],True)
        self.assertEqual(line2['document_in'].id,receipt2.id)
        self.assertEqual(line2['document_out'].id,delivery.id)

    deftest_report_forecast_2_replenishments_order(self):
        """Createsareceiptthencreatesadeliveryusinghalfofthereceiptquantity.
        Checksreplenishmentlinesarecorrectlysorted(assignedfirst,unassignedattheend).
        """
        #Createsareceiptthenchecksdraftpickingquantities.
        receipt_form=Form(self.env['stock.picking'].with_context(
            force_detailed_view=True
        ),view='stock.view_picking_form')
        receipt_form.partner_id=self.partner
        receipt_form.picking_type_id=self.picking_type_in
        withreceipt_form.move_ids_without_package.new()asmove_line:
            move_line.product_id=self.product
            move_line.product_uom_qty=6
        receipt=receipt_form.save()
        receipt.action_confirm()

        #Createsadeliverythenchecksdraftpickingquantities.
        delivery_form=Form(self.env['stock.picking'].with_context(
            force_detailed_view=True
        ),view='stock.view_picking_form')
        delivery_form.partner_id=self.partner
        delivery_form.picking_type_id=self.picking_type_out
        withdelivery_form.move_ids_without_package.new()asmove_line:
            move_line.product_id=self.product
            move_line.product_uom_qty=3
        delivery=delivery_form.save()
        delivery.action_confirm()

        report_values,docs,lines=self.get_report_forecast(product_template_ids=self.product_template.ids)
        self.assertEqual(len(lines),2,"Musthave2line.")
        line_1=lines[0]
        line_2=lines[1]
        self.assertEqual(line_1['document_in'].id,receipt.id)
        self.assertEqual(line_1['document_out'].id,delivery.id)
        self.assertEqual(line_2['document_in'].id,receipt.id)
        self.assertEqual(line_2['document_out'],False)

    deftest_report_forecast_3_sort_by_date(self):
        """Createssomedeliverieswithdifferentdatesandchecksthereport
        linesarecorrectlysortedbydate.Then,createssomereceiptsand
        checktheirarecorrectlylinkedaccordingtotheirdate.
        """
        today=datetime.today()
        one_hours=timedelta(hours=1)
        one_day=timedelta(days=1)
        one_month=timedelta(days=30)
        #Createsabunchofdeliverieswithdifferentdate.
        delivery_form=Form(self.env['stock.picking'].with_context(
            force_detailed_view=True
        ),view='stock.view_picking_form')
        delivery_form.partner_id=self.partner
        delivery_form.picking_type_id=self.picking_type_out
        delivery_form.scheduled_date=today
        withdelivery_form.move_ids_without_package.new()asmove_line:
            move_line.product_id=self.product
            move_line.product_uom_qty=5
        delivery_1=delivery_form.save()
        delivery_1.action_confirm()

        delivery_form=Form(self.env['stock.picking'].with_context(
            force_detailed_view=True
        ),view='stock.view_picking_form')
        delivery_form.partner_id=self.partner
        delivery_form.picking_type_id=self.picking_type_out
        delivery_form.scheduled_date=today+one_hours
        withdelivery_form.move_ids_without_package.new()asmove_line:
            move_line.product_id=self.product
            move_line.product_uom_qty=5
        delivery_2=delivery_form.save()
        delivery_2.action_confirm()

        delivery_form=Form(self.env['stock.picking'].with_context(
            force_detailed_view=True
        ),view='stock.view_picking_form')
        delivery_form.partner_id=self.partner
        delivery_form.picking_type_id=self.picking_type_out
        delivery_form.scheduled_date=today-one_hours
        withdelivery_form.move_ids_without_package.new()asmove_line:
            move_line.product_id=self.product
            move_line.product_uom_qty=5
        delivery_3=delivery_form.save()
        delivery_3.action_confirm()

        delivery_form=Form(self.env['stock.picking'].with_context(
            force_detailed_view=True
        ),view='stock.view_picking_form')
        delivery_form.partner_id=self.partner
        delivery_form.picking_type_id=self.picking_type_out
        delivery_form.scheduled_date=today+one_day
        withdelivery_form.move_ids_without_package.new()asmove_line:
            move_line.product_id=self.product
            move_line.product_uom_qty=5
        delivery_4=delivery_form.save()
        delivery_4.action_confirm()

        delivery_form=Form(self.env['stock.picking'].with_context(
            force_detailed_view=True
        ),view='stock.view_picking_form')
        delivery_form.partner_id=self.partner
        delivery_form.picking_type_id=self.picking_type_out
        delivery_form.scheduled_date=today-one_day
        withdelivery_form.move_ids_without_package.new()asmove_line:
            move_line.product_id=self.product
            move_line.product_uom_qty=5
        delivery_5=delivery_form.save()
        delivery_5.action_confirm()

        delivery_form=Form(self.env['stock.picking'].with_context(
            force_detailed_view=True
        ),view='stock.view_picking_form')
        delivery_form.partner_id=self.partner
        delivery_form.picking_type_id=self.picking_type_out
        delivery_form.scheduled_date=today+one_month
        withdelivery_form.move_ids_without_package.new()asmove_line:
            move_line.product_id=self.product
            move_line.product_uom_qty=5
        delivery_6=delivery_form.save()
        delivery_6.action_confirm()

        delivery_form=Form(self.env['stock.picking'].with_context(
            force_detailed_view=True
        ),view='stock.view_picking_form')
        delivery_form.partner_id=self.partner
        delivery_form.picking_type_id=self.picking_type_out
        delivery_form.scheduled_date=today-one_month
        withdelivery_form.move_ids_without_package.new()asmove_line:
            move_line.product_id=self.product
            move_line.product_uom_qty=5
        delivery_7=delivery_form.save()
        delivery_7.action_confirm()

        #Ordermustbe:7,5,3,1,2,4,6
        report_values,docs,lines=self.get_report_forecast(product_template_ids=self.product_template.ids)
        draft_picking_qty=docs['draft_picking_qty']
        self.assertEqual(len(lines),7,"Thereportmusthave7line.")
        self.assertEqual(draft_picking_qty['in'],0)
        self.assertEqual(draft_picking_qty['out'],0)
        self.assertEqual(lines[0]['document_out'].id,delivery_7.id)
        self.assertEqual(lines[1]['document_out'].id,delivery_5.id)
        self.assertEqual(lines[2]['document_out'].id,delivery_3.id)
        self.assertEqual(lines[3]['document_out'].id,delivery_1.id)
        self.assertEqual(lines[4]['document_out'].id,delivery_2.id)
        self.assertEqual(lines[5]['document_out'].id,delivery_4.id)
        self.assertEqual(lines[6]['document_out'].id,delivery_6.id)

        #Creates3receiptsfor20units.
        receipt_form=Form(self.env['stock.picking'].with_context(
            force_detailed_view=True
        ),view='stock.view_picking_form')
        receipt_form.partner_id=self.partner
        receipt_form.picking_type_id=self.picking_type_in
        receipt_form.scheduled_date=today+one_month
        withreceipt_form.move_ids_without_package.new()asmove_line:
            move_line.product_id=self.product
            move_line.product_uom_qty=5
        receipt_1=receipt_form.save()
        receipt_1.action_confirm()

        receipt_form=Form(self.env['stock.picking'].with_context(
            force_detailed_view=True
        ),view='stock.view_picking_form')
        receipt_form.partner_id=self.partner
        receipt_form.picking_type_id=self.picking_type_in
        receipt_form.scheduled_date=today-one_month
        withreceipt_form.move_ids_without_package.new()asmove_line:
            move_line.product_id=self.product
            move_line.product_uom_qty=5
        receipt_2=receipt_form.save()
        receipt_2.action_confirm()

        receipt_form=Form(self.env['stock.picking'].with_context(
            force_detailed_view=True
        ),view='stock.view_picking_form')
        receipt_form.partner_id=self.partner
        receipt_form.picking_type_id=self.picking_type_in
        receipt_form.scheduled_date=today-one_hours
        withreceipt_form.move_ids_without_package.new()asmove_line:
            move_line.product_id=self.product
            move_line.product_uom_qty=10
        receipt_3=receipt_form.save()
        receipt_3.action_confirm()

        #Checkreportlines(linkandorder).
        report_values,docs,lines=self.get_report_forecast(product_template_ids=self.product_template.ids)
        draft_picking_qty=docs['draft_picking_qty']
        self.assertEqual(len(lines),7,"Thereportmusthave7line.")
        self.assertEqual(draft_picking_qty['in'],0)
        self.assertEqual(draft_picking_qty['out'],0)
        self.assertEqual(lines[0]['document_out'].id,delivery_7.id)
        self.assertEqual(lines[0]['document_in'].id,receipt_2.id)
        self.assertEqual(lines[0]['is_late'],False)
        self.assertEqual(lines[1]['document_out'].id,delivery_5.id)
        self.assertEqual(lines[1]['document_in'].id,receipt_3.id)
        self.assertEqual(lines[1]['is_late'],True)
        self.assertEqual(lines[2]['document_out'].id,delivery_3.id)
        self.assertEqual(lines[2]['document_in'].id,receipt_3.id)
        self.assertEqual(lines[2]['is_late'],False)
        self.assertEqual(lines[3]['document_out'].id,delivery_1.id)
        self.assertEqual(lines[3]['document_in'].id,receipt_1.id)
        self.assertEqual(lines[3]['is_late'],True)
        self.assertEqual(lines[4]['document_out'].id,delivery_2.id)
        self.assertEqual(lines[4]['document_in'],False)
        self.assertEqual(lines[5]['document_out'].id,delivery_4.id)
        self.assertEqual(lines[5]['document_in'],False)
        self.assertEqual(lines[6]['document_out'].id,delivery_6.id)
        self.assertEqual(lines[6]['document_in'],False)

    deftest_report_forecast_4_intermediate_transfers(self):
        """Createareceiptin3stepsandcheckthereportline.
        """
        grp_multi_loc=self.env.ref('stock.group_stock_multi_locations')
        grp_multi_routes=self.env.ref('stock.group_adv_location')
        self.env.user.write({'groups_id':[(4,grp_multi_loc.id)]})
        self.env.user.write({'groups_id':[(4,grp_multi_routes.id)]})
        #Warehouseconfig.
        warehouse=self.env.ref('stock.warehouse0')
        warehouse.reception_steps='three_steps'
        #Productconfig.
        self.product.write({'route_ids':[(4,self.env.ref('stock.route_warehouse0_mto').id)]})
        #CreateaRR
        pg1=self.env['procurement.group'].create({})
        reordering_rule=self.env['stock.warehouse.orderpoint'].create({
            'name':'ProductRR',
            'location_id':warehouse.lot_stock_id.id,
            'product_id':self.product.id,
            'product_min_qty':5,
            'product_max_qty':10,
            'group_id':pg1.id,
        })
        reordering_rule.action_replenish()
        report_values,docs,lines=self.get_report_forecast(product_template_ids=self.product_template.ids)
        pickings=self.env['stock.picking'].search([('product_id','=',self.product.id)])
        receipt=pickings.filtered(lambdap:p.picking_type_id.id==self.picking_type_in.id)

        #TheForecastedReportdon'tshowintermediatemoves,itmustdisplayonlyingoing/outgoingdocuments.
        self.assertEqual(len(lines),1,"Thereportmusthaveonly1line.")
        self.assertEqual(lines[0]['document_in'].id,receipt.id,"Thereportmustonlyshowthereceipt.")
        self.assertEqual(lines[0]['document_out'],False)
        self.assertEqual(lines[0]['quantity'],reordering_rule.product_max_qty)

    deftest_report_forecast_5_multi_warehouse(self):
        """Createsometransferfortwodifferentwarehousesandcheckthe
        reportdisplaythegoodmovesaccordingtotheselectedwarehouse.
        """
        #Warehouseconfig.
        wh_2=self.env['stock.warehouse'].create({
            'name':'EvilTwinWarehouse',
            'code':'ETWH',
        })
        picking_type_out_2=self.env['stock.picking.type'].search([
            ('code','=','outgoing'),
            ('warehouse_id','=',wh_2.id),
        ])

        #Createsadeliverythenchecksdraftpickingquantities.
        delivery_form=Form(self.env['stock.picking'].with_context(
            force_detailed_view=True
        ),view='stock.view_picking_form')
        delivery_form.partner_id=self.partner
        delivery_form.picking_type_id=self.picking_type_out
        delivery=delivery_form.save()
        withdelivery_form.move_ids_without_package.new()asmove_line:
            move_line.product_id=self.product
            move_line.product_uom_qty=5
        delivery=delivery_form.save()

        report_values,docs,lines=self.get_report_forecast(product_template_ids=self.product_template.ids)
        draft_picking_qty=docs['draft_picking_qty']
        self.assertEqual(len(lines),0,"Musthave0line.")
        self.assertEqual(draft_picking_qty['out'],5)

        report_values,docs,lines=self.get_report_forecast(
            product_template_ids=self.product_template.ids,
            context={'warehouse':wh_2.id},
        )
        draft_picking_qty=docs['draft_picking_qty']
        self.assertEqual(len(lines),0)
        self.assertEqual(draft_picking_qty['out'],0)

        #Confirmthedelivery->Thereportmustnowhave1line.
        delivery.action_confirm()
        report_values,docs,lines=self.get_report_forecast(product_template_ids=self.product_template.ids)
        draft_picking_qty=docs['draft_picking_qty']
        self.assertEqual(len(lines),1)
        self.assertEqual(draft_picking_qty['out'],0)
        self.assertEqual(lines[0]['document_out'].id,delivery.id)
        self.assertEqual(lines[0]['quantity'],5)

        report_values,docs,lines=self.get_report_forecast(
            product_template_ids=self.product_template.ids,
            context={'warehouse':wh_2.id},
        )
        draft_picking_qty=docs['draft_picking_qty']
        self.assertEqual(len(lines),0)
        self.assertEqual(draft_picking_qty['out'],0)

        #Createsadeliveryforthesecondwarehouse.
        delivery_form=Form(self.env['stock.picking'].with_context(
            force_detailed_view=True
        ),view='stock.view_picking_form')
        delivery_form.partner_id=self.partner
        delivery_form.picking_type_id=picking_type_out_2
        delivery_2=delivery_form.save()
        withdelivery_form.move_ids_without_package.new()asmove_line:
            move_line.product_id=self.product
            move_line.product_uom_qty=8
        delivery_2=delivery_form.save()

        report_values,docs,lines=self.get_report_forecast(product_template_ids=self.product_template.ids)
        draft_picking_qty=docs['draft_picking_qty']
        self.assertEqual(len(lines),1)
        self.assertEqual(draft_picking_qty['out'],0)
        self.assertEqual(lines[0]['document_out'].id,delivery.id)
        self.assertEqual(lines[0]['quantity'],5)

        report_values,docs,lines=self.get_report_forecast(
            product_template_ids=self.product_template.ids,
            context={'warehouse':wh_2.id},
        )
        draft_picking_qty=docs['draft_picking_qty']
        self.assertEqual(len(lines),0)
        self.assertEqual(draft_picking_qty['out'],8)
        #Confirmtheseconddelivery->Thereportmustnowhave1line.
        delivery_2.action_confirm()
        report_values,docs,lines=self.get_report_forecast(product_template_ids=self.product_template.ids)
        draft_picking_qty=docs['draft_picking_qty']
        self.assertEqual(len(lines),1)
        self.assertEqual(draft_picking_qty['out'],0)
        self.assertEqual(lines[0]['document_out'].id,delivery.id)
        self.assertEqual(lines[0]['quantity'],5)

        report_values,docs,lines=self.get_report_forecast(
            product_template_ids=self.product_template.ids,
            context={'warehouse':wh_2.id},
        )
        draft_picking_qty=docs['draft_picking_qty']
        self.assertEqual(len(lines),1)
        self.assertEqual(draft_picking_qty['out'],0)
        self.assertEqual(lines[0]['document_out'].id,delivery_2.id)
        self.assertEqual(lines[0]['quantity'],8)

    deftest_report_forecast_6_multi_company(self):
        """Createtransfersfortwodifferentcompaniesandcheckreport
        displaytherighttransfers.
        """
        #Configuresecondwarehouse.
        company_2=self.env['res.company'].create({'name':'ApertureScience'})
        wh_2=self.env['stock.warehouse'].search([('company_id','=',company_2.id)])
        wh_2_picking_type_in=wh_2.in_type_id

        #Createsareceiptthenchecksdraftpickingquantities.
        receipt_form=Form(self.env['stock.picking'].with_context(
            force_detailed_view=True
        ),view='stock.view_picking_form')
        receipt_form.partner_id=self.partner
        receipt_form.picking_type_id=self.picking_type_in
        wh_1_receipt=receipt_form.save()
        withreceipt_form.move_ids_without_package.new()asmove_line:
            move_line.product_id=self.product
            move_line.product_uom_qty=2
        wh_1_receipt=receipt_form.save()

        #Createsareceiptthenchecksdraftpickingquantities.
        receipt_form=Form(self.env['stock.picking'].with_context(
            force_detailed_view=True
        ),view='stock.view_picking_form')
        receipt_form.partner_id=self.partner
        receipt_form.picking_type_id=wh_2_picking_type_in
        wh_2_receipt=receipt_form.save()
        withreceipt_form.move_ids_without_package.new()asmove_line:
            move_line.product_id=self.product
            move_line.product_uom_qty=5
        wh_2_receipt=receipt_form.save()

        report_values,docs,lines=self.get_report_forecast(product_template_ids=self.product_template.ids)
        draft_picking_qty=docs['draft_picking_qty']
        self.assertEqual(len(lines),0,"Musthave0line.")
        self.assertEqual(draft_picking_qty['in'],2)
        self.assertEqual(draft_picking_qty['out'],0)

        report_values,docs,lines=self.get_report_forecast(
            product_template_ids=self.product_template.ids,
            context={'warehouse':wh_2.id},
        )
        draft_picking_qty=docs['draft_picking_qty']
        self.assertEqual(len(lines),0,"Musthave0line.")
        self.assertEqual(draft_picking_qty['in'],5)
        self.assertEqual(draft_picking_qty['out'],0)

        #Confirmthereceipts->Thereportmustnowhaveonelineforeachcompany.
        wh_1_receipt.action_confirm()
        wh_2_receipt.action_confirm()

        report_values,docs,lines=self.get_report_forecast(product_template_ids=self.product_template.ids)
        self.assertEqual(len(lines),1,"Musthave1line.")
        self.assertEqual(lines[0]['document_in'].id,wh_1_receipt.id)
        self.assertEqual(lines[0]['quantity'],2)

        report_values,docs,lines=self.get_report_forecast(
            product_template_ids=self.product_template.ids,
            context={'warehouse':wh_2.id},
        )
        self.assertEqual(len(lines),1,"Musthave1line.")
        self.assertEqual(lines[0]['document_in'].id,wh_2_receipt.id)
        self.assertEqual(lines[0]['quantity'],5)

    deftest_report_forecast_7_multiple_variants(self):
        """Createreceiptsfordifferentvariantproductsandcheckthereport
        workwellwiththem.Also,checkthereceipt/deliverylinesarecorrectly
        linkeddependingoftheirproductvariant.
        """
        #Createsomevariant'sattributes.
        product_attr_color=self.env['product.attribute'].create({'name':'Color'})
        color_gray=self.env['product.attribute.value'].create({
            'name':'OldFashionedGray',
            'attribute_id':product_attr_color.id,
        })
        color_blue=self.env['product.attribute.value'].create({
            'name':'ElectricBlue',
            'attribute_id':product_attr_color.id,
        })
        product_attr_size=self.env['product.attribute'].create({'name':'size'})
        size_pocket=self.env['product.attribute.value'].create({
            'name':'Pocket',
            'attribute_id':product_attr_size.id,
        })
        size_xl=self.env['product.attribute.value'].create({
            'name':'XL',
            'attribute_id':product_attr_size.id,
        })

        #Createanewproductandsetsomevariantsontheproduct.
        product_template=self.env['product.template'].create({
            'name':'GameJoy',
            'type':'product',
            'attribute_line_ids':[
                (0,0,{
                    'attribute_id':product_attr_color.id,
                    'value_ids':[(6,0,[color_gray.id,color_blue.id])]
                }),
                (0,0,{
                    'attribute_id':product_attr_size.id,
                    'value_ids':[(6,0,[size_pocket.id,size_xl.id])]
                }),
            ],
        })
        gamejoy_pocket_gray=product_template.product_variant_ids[0]
        gamejoy_xl_gray=product_template.product_variant_ids[1]
        gamejoy_pocket_blue=product_template.product_variant_ids[2]
        gamejoy_xl_blue=product_template.product_variant_ids[3]

        #Createtworeceipts.
        receipt_form=Form(self.env['stock.picking'].with_context(
            force_detailed_view=True
        ),view='stock.view_picking_form')
        receipt_form.partner_id=self.partner
        receipt_form.picking_type_id=self.picking_type_in
        withreceipt_form.move_ids_without_package.new()asmove_line:
            move_line.product_id=gamejoy_pocket_gray
            move_line.product_uom_qty=8
        withreceipt_form.move_ids_without_package.new()asmove_line:
            move_line.product_id=gamejoy_pocket_blue
            move_line.product_uom_qty=4
        receipt_1=receipt_form.save()
        receipt_1.action_confirm()

        receipt_form=Form(self.env['stock.picking'].with_context(
            force_detailed_view=True
        ),view='stock.view_picking_form')
        receipt_form.partner_id=self.partner
        receipt_form.picking_type_id=self.picking_type_in
        withreceipt_form.move_ids_without_package.new()asmove_line:
            move_line.product_id=gamejoy_pocket_gray
            move_line.product_uom_qty=2
        withreceipt_form.move_ids_without_package.new()asmove_line:
            move_line.product_id=gamejoy_xl_gray
            move_line.product_uom_qty=10
        withreceipt_form.move_ids_without_package.new()asmove_line:
            move_line.product_id=gamejoy_xl_blue
            move_line.product_uom_qty=12
        receipt_2=receipt_form.save()
        receipt_2.action_confirm()

        report_values,docs,lines=self.get_report_forecast(product_template_ids=product_template.ids)
        self.assertEqual(len(lines),5,"Musthave5lines.")
        self.assertEqual(docs['product_variants'].ids,product_template.product_variant_ids.ids)

        #Createadeliveryforoneoftheseproductsandcheckthereportlines
        #arecorrectlylinkedtothegoodreceipts.
        delivery_form=Form(self.env['stock.picking'].with_context(
            force_detailed_view=True
        ),view='stock.view_picking_form')
        delivery_form.partner_id=self.partner
        delivery_form.picking_type_id=self.picking_type_out
        withdelivery_form.move_ids_without_package.new()asmove_line:
            move_line.product_id=gamejoy_pocket_gray
            move_line.product_uom_qty=10
        delivery=delivery_form.save()
        delivery.action_confirm()

        report_values,docs,lines=self.get_report_forecast(product_template_ids=product_template.ids)
        self.assertEqual(len(lines),5,"Stillmusthave5lines.")
        self.assertEqual(docs['product_variants'].ids,product_template.product_variant_ids.ids)
        #Firstandsecondlinesshouldbeaboutthe"GameJoyPocket(gray)"
        #andmustlinkthedeliverywiththetworeceiptlines.
        line_1=lines[0]
        line_2=lines[1]
        self.assertEqual(line_1['product']['id'],gamejoy_pocket_gray.id)
        self.assertEqual(line_1['quantity'],8)
        self.assertTrue(line_1['replenishment_filled'])
        self.assertEqual(line_1['document_in'].id,receipt_1.id)
        self.assertEqual(line_1['document_out'].id,delivery.id)
        self.assertEqual(line_2['product']['id'],gamejoy_pocket_gray.id)
        self.assertEqual(line_2['quantity'],2)
        self.assertTrue(line_2['replenishment_filled'])
        self.assertEqual(line_2['document_in'].id,receipt_2.id)
        self.assertEqual(line_2['document_out'].id,delivery.id)

    deftest_report_forecast_8_delivery_to_receipt_link(self):
        """
        Create2deliveries,and1receipttiedtotheseconddelivery.
        Thereportshouldshowthesourcedocumentasthe2nddelivery,andshowthefirst
        deliverycompletelyunfilled.
        """
        delivery_form=Form(self.env['stock.picking'].with_context(
            force_detailed_view=True
        ),view='stock.view_picking_form')
        delivery_form.partner_id=self.partner
        delivery_form.picking_type_id=self.picking_type_out
        withdelivery_form.move_ids_without_package.new()asmove_line:
            move_line.product_id=self.product
            move_line.product_uom_qty=100
        delivery=delivery_form.save()
        delivery.action_confirm()

        delivery_form=Form(self.env['stock.picking'].with_context(
            force_detailed_view=True
        ),view='stock.view_picking_form')
        delivery_form.partner_id=self.partner
        delivery_form.picking_type_id=self.picking_type_out
        withdelivery_form.move_ids_without_package.new()asmove_line:
            move_line.product_id=self.product
            move_line.product_uom_qty=200
        delivery2=delivery_form.save()
        delivery2.action_confirm()

        receipt_form=Form(self.env['stock.picking'].with_context(
            force_detailed_view=True
        ),view='stock.view_picking_form')
        receipt_form.partner_id=self.partner
        receipt_form.picking_type_id=self.picking_type_in
        receipt=receipt_form.save()
        withreceipt_form.move_ids_without_package.new()asmove_line:
            move_line.product_id=self.product
            move_line.product_uom_qty=200
        receipt=receipt_form.save()
        receipt.move_lines[0].write({
            'move_dest_ids':[(4,delivery2.move_lines[0].id)],
        })
        receipt.action_confirm()
        self.env['base'].flush()

        _,_,lines=self.get_report_forecast(product_template_ids=self.product_template.ids)

        self.assertEqual(len(lines),2,'Only2lines')
        delivery_line=[lforlinlinesifl['document_out'].id==delivery.id][0]
        self.assertTrue(delivery_line,'Nolinefordelivery1')
        self.assertFalse(delivery_line['replenishment_filled'])
        delivery2_line=[lforlinlinesifl['document_out'].id==delivery2.id][0]
        self.assertTrue(delivery2_line,'Nolinefordelivery2')
        self.assertTrue(delivery2_line['replenishment_filled'])

    deftest_report_forecast_9_delivery_to_receipt_link_over_received(self):
        """
        Create2deliveries,and1receipttiedtotheseconddelivery.
        SetthequantityonthereceipttobeenoughforBOTHdeliveries.
        Forexample,thiscanhappeniftheyhavemanuallyincreasedthequantityonthegeneratedPO.
        Thereportshouldshowbothdeliveriesfulfilled.
        """
        delivery_form=Form(self.env['stock.picking'].with_context(
            force_detailed_view=True
        ),view='stock.view_picking_form')
        delivery_form.partner_id=self.partner
        delivery_form.picking_type_id=self.picking_type_out
        withdelivery_form.move_ids_without_package.new()asmove_line:
            move_line.product_id=self.product
            move_line.product_uom_qty=100
        delivery=delivery_form.save()
        delivery.action_confirm()

        delivery_form=Form(self.env['stock.picking'].with_context(
            force_detailed_view=True
        ),view='stock.view_picking_form')
        delivery_form.partner_id=self.partner
        delivery_form.picking_type_id=self.picking_type_out
        withdelivery_form.move_ids_without_package.new()asmove_line:
            move_line.product_id=self.product
            move_line.product_uom_qty=200
        delivery2=delivery_form.save()
        delivery2.action_confirm()

        receipt_form=Form(self.env['stock.picking'].with_context(
            force_detailed_view=True
        ),view='stock.view_picking_form')
        receipt_form.partner_id=self.partner
        receipt_form.picking_type_id=self.picking_type_in
        receipt=receipt_form.save()
        withreceipt_form.move_ids_without_package.new()asmove_line:
            move_line.product_id=self.product
            move_line.product_uom_qty=300
        receipt=receipt_form.save()
        receipt.move_lines[0].write({
            'move_dest_ids':[(4,delivery2.move_lines[0].id)],
        })
        receipt.action_confirm()
        self.env['base'].flush()

        _,_,lines=self.get_report_forecast(product_template_ids=self.product_template.ids)

        self.assertEqual(len(lines),2,'Only2lines')
        delivery_line=[lforlinlinesifl['document_out'].id==delivery.id][0]
        self.assertTrue(delivery_line,'Nolinefordelivery1')
        self.assertTrue(delivery_line['replenishment_filled'])
        delivery2_line=[lforlinlinesifl['document_out'].id==delivery2.id][0]
        self.assertTrue(delivery2_line,'Nolinefordelivery2')
        self.assertTrue(delivery2_line['replenishment_filled'])
