#-*-coding:utf-8-*-
#PartofFlectra.SeeLICENSEfileforfullcopyrightandlicensingdetails.

fromflectra.exceptionsimportUserError,ValidationError
fromflectra.tests.commonimportForm,SavepointCase


classStockGenerate(SavepointCase):
    @classmethod
    defsetUpClass(cls):
        super(StockGenerate,cls).setUpClass()
        Product=cls.env['product.product']
        cls.product_serial=Product.create({
            'name':'TrackedbySN',
            'type':'product',
            'tracking':'serial',
        })
        cls.uom_unit=cls.env.ref('uom.product_uom_unit')

        cls.warehouse=cls.env['stock.warehouse'].create({
            'name':'BaseWarehouse',
            'reception_steps':'one_step',
            'delivery_steps':'ship_only',
            'code':'BWH'
        })
        cls.location=cls.env['stock.location'].create({
            'name':'RoomA',
            'location_id':cls.warehouse.lot_stock_id.id,
        })
        cls.location_dest=cls.env['stock.location'].create({
            'name':'RoomB',
            'location_id':cls.warehouse.lot_stock_id.id,
        })

        cls.Wizard=cls.env['stock.assign.serial']

    defget_new_move(self,nbre_of_lines):
        move_lines_val=[]
        foriinrange(nbre_of_lines):
            move_lines_val.append({
                'product_id':self.product_serial.id,
                'product_uom_id':self.uom_unit.id,
                'product_uom_qty':1,
                'location_id':self.location.id,
                'location_dest_id':self.location_dest.id
            })
        returnself.env['stock.move'].create({
            'name':'MoveTest',
            'product_id':self.product_serial.id,
            'product_uom':self.uom_unit.id,
            'location_id':self.location.id,
            'location_dest_id':self.location_dest.id,
            'move_line_ids':[(0,0,line_vals)forline_valsinmove_lines_val]
        })

    deftest_generate_01_sn(self):
        """Createsamovewith5movelines,thenasksforgenerates5Serial
        Numbers.Checksmovehas5newmovelineswitheachaSN,andthe5
        originalmovelinesarestillunchanged.
        """
        nbre_of_lines=5
        move=self.get_new_move(nbre_of_lines)

        form_wizard=Form(self.env['stock.assign.serial'].with_context(
            default_move_id=move.id,
            default_next_serial_number='001',
            default_next_serial_count=nbre_of_lines,
        ))
        wiz=form_wizard.save()
        self.assertEqual(len(move.move_line_ids),nbre_of_lines)
        wiz.generate_serial_numbers()
        #ChecksnewmovelineshavetherightSN
        generated_numbers=['001','002','003','004','005']
        self.assertEqual(len(move.move_line_ids),nbre_of_lines+len(generated_numbers))
        formove_lineinmove.move_line_nosuggest_ids:
            #ForaproducttrackedbySN,the`qty_done`isseton1when
            #`lot_name`isset.
            self.assertEqual(move_line.qty_done,1)
            self.assertEqual(move_line.lot_name,generated_numbers.pop(0))
        #Checkspre-generatedmovelinesdidn'tchange
        formove_linein(move.move_line_ids-move.move_line_nosuggest_ids):
            self.assertEqual(move_line.qty_done,0)
            self.assertEqual(move_line.lot_name,False)

    deftest_generate_02_prefix_suffix(self):
        """GeneratessomeSerialNumbersandcheckstheprefixand/orsuffix
        arecorrectlyused.
        """
        nbre_of_lines=10
        #Case#1:Prefix,nosuffix
        move=self.get_new_move(nbre_of_lines)
        form_wizard=Form(self.env['stock.assign.serial'].with_context(
            default_move_id=move.id,
            default_next_serial_number='bilou-87',
            default_next_serial_count=nbre_of_lines,
        ))
        wiz=form_wizard.save()
        wiz.generate_serial_numbers()
        #ChecksallmovelineshavetherightSN
        generated_numbers=[
            'bilou-87','bilou-88','bilou-89','bilou-90','bilou-91',
            'bilou-92','bilou-93','bilou-94','bilou-95','bilou-96'
        ]
        formove_lineinmove.move_line_nosuggest_ids:
            #ForaproducttrackedbySN,the`qty_done`isseton1when
            #`lot_name`isset.
            self.assertEqual(move_line.qty_done,1)
            self.assertEqual(
                move_line.lot_name,
                generated_numbers.pop(0)
            )

        #Case#2:Noprefix,suffix
        move=self.get_new_move(nbre_of_lines)
        form_wizard=Form(self.env['stock.assign.serial'].with_context(
            default_move_id=move.id,
            default_next_serial_number='005-ccc',
            default_next_serial_count=nbre_of_lines,
        ))
        wiz=form_wizard.save()
        wiz.generate_serial_numbers()
        #ChecksallmovelineshavetherightSN
        generated_numbers=[
            '005-ccc','006-ccc','007-ccc','008-ccc','009-ccc',
            '010-ccc','011-ccc','012-ccc','013-ccc','014-ccc'
        ]
        formove_lineinmove.move_line_nosuggest_ids:
            #ForaproducttrackedbySN,the`qty_done`isseton1when
            #`lot_name`isset.
            self.assertEqual(move_line.qty_done,1)
            self.assertEqual(
                move_line.lot_name,
                generated_numbers.pop(0)
            )

        #Case#3:Prefix+suffix
        move=self.get_new_move(nbre_of_lines)
        form_wizard=Form(self.env['stock.assign.serial'].with_context(
            default_move_id=move.id,
            default_next_serial_number='alpha-012-345-beta',
            default_next_serial_count=nbre_of_lines,
        ))
        wiz=form_wizard.save()
        wiz.generate_serial_numbers()
        #ChecksallmovelineshavetherightSN
        generated_numbers=[
            'alpha-012-345-beta','alpha-012-346-beta','alpha-012-347-beta',
            'alpha-012-348-beta','alpha-012-349-beta','alpha-012-350-beta',
            'alpha-012-351-beta','alpha-012-352-beta','alpha-012-353-beta',
            'alpha-012-354-beta'
        ]
        formove_lineinmove.move_line_nosuggest_ids:
            #ForaproducttrackedbySN,the`qty_done`isseton1when
            #`lot_name`isset.
            self.assertEqual(move_line.qty_done,1)
            self.assertEqual(
                move_line.lot_name,
                generated_numbers.pop(0)
            )

        #Case#4:Prefix+suffix,identicalnumberpattern
        move=self.get_new_move(nbre_of_lines)
        form_wizard=Form(self.env['stock.assign.serial'].with_context(
            default_move_id=move.id,
            default_next_serial_number='BAV023B00001S00001',
            default_next_serial_count=nbre_of_lines,
        ))
        wiz=form_wizard.save()
        wiz.generate_serial_numbers()
        #ChecksallmovelineshavetherightSN
        generated_numbers=[
            'BAV023B00001S00001','BAV023B00001S00002','BAV023B00001S00003',
            'BAV023B00001S00004','BAV023B00001S00005','BAV023B00001S00006',
            'BAV023B00001S00007','BAV023B00001S00008','BAV023B00001S00009',
            'BAV023B00001S00010'
        ]
        formove_lineinmove.move_line_nosuggest_ids:
            #ForaproducttrackedbySN,the`qty_done`isseton1when
            #`lot_name`isset.
            self.assertEqual(move_line.qty_done,1)
            self.assertEqual(
                move_line.lot_name,
                generated_numbers.pop(0)
            )

    deftest_generate_03_raise_exception(self):
        """TriestogeneratesomeSNbutwithinvalidinitialnumber.
        """
        move=self.get_new_move(3)
        form_wizard=Form(self.env['stock.assign.serial'].with_context(
            default_move_id=move.id,
            default_next_serial_number='code-xxx',
        ))
        wiz=form_wizard.save()
        withself.assertRaises(UserError):
            wiz.generate_serial_numbers()

        form_wizard.next_serial_count=0
        #Mustraiseanexceptionbecause`next_serial_count`mustbegreaterthan0.
        withself.assertRaises(ValidationError):
            form_wizard.save()

    deftest_generate_04_generate_in_multiple_time(self):
        """GeneratesaSerialNumberforeachmovelines(exceptthelastone)
        butwithmultipleassignments,andchecksthegeneratedSerialNumbers
        arewhatweexpect.
        """
        nbre_of_lines=10
        move=self.get_new_move(nbre_of_lines)

        form_wizard=Form(self.env['stock.assign.serial'].with_context(
            default_move_id=move.id,
        ))
        #Firstassignment
        form_wizard.next_serial_count=3
        form_wizard.next_serial_number='001'
        wiz=form_wizard.save()
        wiz.generate_serial_numbers()
        #Secondassignment
        form_wizard.next_serial_count=2
        form_wizard.next_serial_number='bilou-64'
        wiz=form_wizard.save()
        wiz.generate_serial_numbers()
        #Thirdassignment
        form_wizard.next_serial_count=4
        form_wizard.next_serial_number='ro-1337-bot'
        wiz=form_wizard.save()
        wiz.generate_serial_numbers()

        #ChecksallmovelineshavetherightSN
        generated_numbers=[
            #Correspondtothefirstassignment
            '001','002','003',
            #Correspondtothesecondassignment
            'bilou-64','bilou-65',
            #Correspondtothethirdassignment
            'ro-1337-bot','ro-1338-bot','ro-1339-bot','ro-1340-bot',
        ]
        self.assertEqual(len(move.move_line_ids),nbre_of_lines+len(generated_numbers))
        self.assertEqual(len(move.move_line_nosuggest_ids),len(generated_numbers))
        formove_lineinmove.move_line_nosuggest_ids:
            self.assertEqual(move_line.qty_done,1)
            self.assertEqual(move_line.lot_name,generated_numbers.pop(0))
        formove_linein(move.move_line_ids-move.move_line_nosuggest_ids):
            self.assertEqual(move_line.qty_done,0)
            self.assertEqual(move_line.lot_name,False)

    deftest_generate_with_putaway(self):
        """Checksthe`location_dest_id`ofgeneratedmovelinesiscorreclty
        setinfonctionofdefinedputawayrules.
        """
        nbre_of_lines=4
        shelf_location=self.env['stock.location'].create({
            'name':'shelf1',
            'usage':'internal',
            'location_id':self.location_dest.id,
        })

        #Checksafirsttimewithoutputaway...
        move=self.get_new_move(nbre_of_lines)
        form_wizard=Form(self.env['stock.assign.serial'].with_context(
            default_move_id=move.id,
        ))
        form_wizard.next_serial_count=nbre_of_lines
        form_wizard.next_serial_number='001'
        wiz=form_wizard.save()
        wiz.generate_serial_numbers()

        formove_lineinmove.move_line_nosuggest_ids:
            self.assertEqual(move_line.qty_done,1)
            #Thelocationdestmustbethedefaultone.
            self.assertEqual(move_line.location_dest_id.id,self.location_dest.id)

        #Weneedtoactivatemulti-locationstouseputawayrules.
        grp_multi_loc=self.env.ref('stock.group_stock_multi_locations')
        self.env.user.write({'groups_id':[(4,grp_multi_loc.id)]})
        #Createsaputawayrule
        putaway_product=self.env['stock.putaway.rule'].create({
            'product_id':self.product_serial.id,
            'location_in_id':self.location_dest.id,
            'location_out_id':shelf_location.id,
        })

        #Checksnowwithputaway...
        move=self.get_new_move(nbre_of_lines)
        form_wizard=Form(self.env['stock.assign.serial'].with_context(
            default_move_id=move.id,
        ))
        form_wizard.next_serial_count=nbre_of_lines
        form_wizard.next_serial_number='001'
        wiz=form_wizard.save()
        wiz.generate_serial_numbers()

        formove_lineinmove.move_line_nosuggest_ids:
            self.assertEqual(move_line.qty_done,1)
            #Thelocationdestmustbenowtheonefromtheputaway.
            self.assertEqual(move_line.location_dest_id.id,shelf_location.id)

    deftest_set_multiple_lot_name_01(self):
        """SetsfiveSNinonetimeinstockmoveviewform,thenchecksmove
        hasfivenewmovelineswiththeright`lot_name`.
        """
        nbre_of_lines=10
        picking_type=self.env['stock.picking.type'].search([
            ('use_create_lots','=',True),
            ('warehouse_id','=',self.warehouse.id)
        ])
        move=self.get_new_move(nbre_of_lines)
        move.picking_type_id=picking_type
        #Wemustbeginwithamovewith10movelines.
        self.assertEqual(len(move.move_line_ids),nbre_of_lines)

        value_list=[
            'abc-235',
            'abc-237',
            'abc-238',
            'abc-282',
            'abc-301',
        ]
        values='\n'.join(value_list)

        move_form=Form(move,view='stock.view_stock_move_nosuggest_operations')
        withmove_form.move_line_nosuggest_ids.new()asline:
            line.lot_name=values
        move=move_form.save()

        #AfterwesetmultipleSN,wemusthavenow15movelines.
        self.assertEqual(len(move.move_line_ids),nbre_of_lines+len(value_list))
        #ThenwelookeachSNnameiscorrect.
        formove_lineinmove.move_line_nosuggest_ids:
            self.assertEqual(move_line.lot_name,value_list.pop(0))
        formove_linein(move.move_line_ids-move.move_line_nosuggest_ids):
            self.assertEqual(move_line.lot_name,False)

    deftest_set_multiple_lot_name_02_empty_values(self):
        """Setsmultiplevalueswithsomeemptylinesinonetime,thenchecks
        wehaven'tcreateuselessmovelineandallmoveline's`lot_name`have
        beencorrectlyset.
        """
        nbre_of_lines=5
        picking_type=self.env['stock.picking.type'].search([
            ('use_create_lots','=',True),
            ('warehouse_id','=',self.warehouse.id)
        ])
        move=self.get_new_move(nbre_of_lines)
        move.picking_type_id=picking_type
        #Wemustbeginwithamovewithfivemovelines.
        self.assertEqual(len(move.move_line_ids),nbre_of_lines)

        value_list=[
            '',
            'abc-235',
            '',
            'abc-237',
            '',
            '',
            'abc-238',
            'abc-282',
            'abc-301',
            '',
        ]
        values='\n'.join(value_list)

        #Checkswehavemorevaluesthanmovelines.
        self.assertTrue(len(move.move_line_ids)<len(value_list))
        move_form=Form(move,view='stock.view_stock_move_nosuggest_operations')
        withmove_form.move_line_nosuggest_ids.new()asline:
            line.lot_name=values
        move=move_form.save()

        filtered_value_list=list(filter(lambdaline:len(line),value_list))
        #AfterwesetmultipleSN,wemusthavealineforeachvalue.
        self.assertEqual(len(move.move_line_ids),nbre_of_lines+len(filtered_value_list))
        #ThenwelookeachSNnameiscorrect.
        formove_lineinmove.move_line_nosuggest_ids:
            self.assertEqual(move_line.lot_name,filtered_value_list.pop(0))
        formove_linein(move.move_line_ids-move.move_line_nosuggest_ids):
            self.assertEqual(move_line.lot_name,False)
