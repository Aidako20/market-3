#-*-coding:utf-8-*-
#PartofFlectra.SeeLICENSEfileforfullcopyrightandlicensingdetails.

fromflectra.testsimportForm
fromflectra.tests.commonimportSavepointCase
fromflectra.toolsimportfloat_round
fromflectra.exceptionsimportUserError


classTestPackingCommon(SavepointCase):
    @classmethod
    defsetUpClass(cls):
        super(TestPackingCommon,cls).setUpClass()
        cls.stock_location=cls.env.ref('stock.stock_location_stock')
        cls.warehouse=cls.env['stock.warehouse'].search([('lot_stock_id','=',cls.stock_location.id)],limit=1)
        cls.warehouse.write({'delivery_steps':'pick_pack_ship'})
        cls.pack_location=cls.warehouse.wh_pack_stock_loc_id
        cls.ship_location=cls.warehouse.wh_output_stock_loc_id
        cls.customer_location=cls.env.ref('stock.stock_location_customers')

        cls.productA=cls.env['product.product'].create({'name':'ProductA','type':'product'})
        cls.productB=cls.env['product.product'].create({'name':'ProductB','type':'product'})


classTestPacking(TestPackingCommon):

    deftest_put_in_pack(self):
        """Inapickpackshipscenario,createtwopacksinpickandcheckthat
        theyarecorrectlyrecognisedandhandledbythepackandshippicking.
        Alongthistest,we'lluseaction_toggle_processedtoprocessapack
        fromtheentire_package_idsone2manyandwe'lldirectlyfillthemove
        lines,thelatteristhebehaviorwhentheuserdidnotenablethedisplay
        ofentirepacksonthepickingtype.
        """
        self.env['stock.quant']._update_available_quantity(self.productA,self.stock_location,20.0)
        self.env['stock.quant']._update_available_quantity(self.productB,self.stock_location,20.0)
        ship_move_a=self.env['stock.move'].create({
            'name':'Theshipmove',
            'product_id':self.productA.id,
            'product_uom_qty':5.0,
            'product_uom':self.productA.uom_id.id,
            'location_id':self.ship_location.id,
            'location_dest_id':self.customer_location.id,
            'warehouse_id':self.warehouse.id,
            'picking_type_id':self.warehouse.out_type_id.id,
            'procure_method':'make_to_order',
            'state':'draft',
        })
        ship_move_b=self.env['stock.move'].create({
            'name':'Theshipmove',
            'product_id':self.productB.id,
            'product_uom_qty':5.0,
            'product_uom':self.productB.uom_id.id,
            'location_id':self.ship_location.id,
            'location_dest_id':self.customer_location.id,
            'warehouse_id':self.warehouse.id,
            'picking_type_id':self.warehouse.out_type_id.id,
            'procure_method':'make_to_order',
            'state':'draft',
        })
        ship_move_a._assign_picking()
        ship_move_b._assign_picking()
        ship_move_a._action_confirm()
        ship_move_b._action_confirm()
        pack_move_a=ship_move_a.move_orig_ids[0]
        pick_move_a=pack_move_a.move_orig_ids[0]

        pick_picking=pick_move_a.picking_id
        packing_picking=pack_move_a.picking_id
        shipping_picking=ship_move_a.picking_id

        pick_picking.picking_type_id.show_entire_packs=True
        packing_picking.picking_type_id.show_entire_packs=True
        shipping_picking.picking_type_id.show_entire_packs=True

        pick_picking.action_assign()
        self.assertEqual(len(pick_picking.move_ids_without_package),2)
        pick_picking.move_line_ids.filtered(lambdaml:ml.product_id==self.productA).qty_done=1.0
        pick_picking.move_line_ids.filtered(lambdaml:ml.product_id==self.productB).qty_done=2.0

        first_pack=pick_picking.action_put_in_pack()
        self.assertEqual(len(pick_picking.package_level_ids),1,'Putsomeproductsinpackshouldcreateapackage_level')
        self.assertEqual(pick_picking.package_level_ids[0].state,'new','Anewpackshouldbeinstate"new"')
        pick_picking.move_line_ids.filtered(lambdaml:ml.product_id==self.productAandml.qty_done==0.0).qty_done=4.0
        pick_picking.move_line_ids.filtered(lambdaml:ml.product_id==self.productBandml.qty_done==0.0).qty_done=3.0
        second_pack=pick_picking.action_put_in_pack()
        self.assertEqual(len(pick_picking.move_ids_without_package),0)
        self.assertEqual(len(packing_picking.move_ids_without_package),2)
        pick_picking.button_validate()
        self.assertEqual(len(packing_picking.move_ids_without_package),0)
        self.assertEqual(len(first_pack.quant_ids),2)
        self.assertEqual(len(second_pack.quant_ids),2)
        packing_picking.action_assign()
        self.assertEqual(len(packing_picking.package_level_ids),2,'Twopackagelevelsmustbecreatedafterassigningpicking')
        packing_picking.package_level_ids.write({'is_done':True})
        packing_picking._action_done()

    deftest_pick_a_pack_confirm(self):
        pack=self.env['stock.quant.package'].create({'name':'Thepacktopick'})
        self.env['stock.quant']._update_available_quantity(self.productA,self.stock_location,20.0,package_id=pack)
        picking=self.env['stock.picking'].create({
            'picking_type_id':self.warehouse.int_type_id.id,
            'location_id':self.stock_location.id,
            'location_dest_id':self.stock_location.id,
            'state':'draft',
        })
        picking.picking_type_id.show_entire_packs=True
        package_level=self.env['stock.package_level'].create({
            'package_id':pack.id,
            'picking_id':picking.id,
            'location_dest_id':self.stock_location.id,
            'company_id':picking.company_id.id,
        })
        self.assertEqual(package_level.state,'draft',
                          'Thepackage_levelshouldbeindraftasithasnomoves,movelinesandisnotconfirmed')
        picking.action_confirm()
        self.assertEqual(len(picking.move_ids_without_package),0)
        self.assertEqual(len(picking.move_lines),1,
                         'Onemoveshouldbecreatedwhenthepackage_levelhasbeenconfirmed')
        self.assertEqual(len(package_level.move_ids),1,
                          'Themoveshouldbeinthepackagelevel')
        self.assertEqual(package_level.state,'confirmed',
                          'Thepackagelevelmustbestateconfirmedwhenpickingisconfirmed')
        picking.action_assign()
        self.assertEqual(len(picking.move_lines),1,
                         'Youstillhaveonlyonemovewhenthepickingisassigned')
        self.assertEqual(len(picking.move_lines.move_line_ids),1,
                         'Themove shouldhaveonemovelinewhichisthereservation')
        self.assertEqual(picking.move_line_ids.package_level_id.id,package_level.id,
                          'Themovelinecreatedshouldbelinkedtothepackagelevel')
        self.assertEqual(picking.move_line_ids.package_id.id,pack.id,
                          'Themovelinemusthavebeenreservedonthepackageofthepackage_level')
        self.assertEqual(picking.move_line_ids.result_package_id.id,pack.id,
                          'Themovelinemusthavethesamepackageasresultpackage')
        self.assertEqual(package_level.state,'assigned','Thepackagelevelmustbeinstateassigned')
        package_level.write({'is_done':True})
        self.assertEqual(len(package_level.move_line_ids),1,
                          'Thepackagelevelshouldstillkeeponemovelineafterhavebeensetto"done"')
        self.assertEqual(package_level.move_line_ids[0].qty_done,20.0,
                          'Allquantityinpackagemustbeprocesedinmoveline')
        picking.button_validate()
        self.assertEqual(len(picking.move_lines),1,
                         'Youstillhaveonlyonemovewhenthepickingisassigned')
        self.assertEqual(len(picking.move_lines.move_line_ids),1,
                         'Themove shouldhaveonemovelinewhichisthereservation')
        self.assertEqual(package_level.state,'done','Thepackagelevelmustbeinstatedone')
        self.assertEqual(pack.location_id.id,picking.location_dest_id.id,
                          'Thequantpackagemustbeinthedestinationlocation')
        self.assertEqual(pack.quant_ids[0].location_id.id,picking.location_dest_id.id,
                          'Thequantmustbeinthedestinationlocation')

    deftest_pick_a_pack_cancel(self):
        """Cancelareservedoperationwithanot-donepackagelevel(is_done=False)."""
        pack=self.env['stock.quant.package'].create({'name':'Thepacktopick'})
        self.env['stock.quant']._update_available_quantity(self.productA,self.stock_location,20.0,package_id=pack)
        picking=self.env['stock.picking'].create({
            'picking_type_id':self.warehouse.int_type_id.id,
            'location_id':self.stock_location.id,
            'location_dest_id':self.stock_location.id,
            'state':'draft',
        })
        picking.picking_type_id.show_entire_packs=True
        package_level=self.env['stock.package_level'].create({
            'package_id':pack.id,
            'picking_id':picking.id,
            'location_dest_id':self.stock_location.id,
            'company_id':picking.company_id.id,
        })
        picking.action_confirm()
        picking.action_assign()
        self.assertEqual(package_level.state,'assigned')
        self.assertTrue(package_level.move_line_ids)
        picking.action_cancel()
        self.assertEqual(package_level.state,'cancel')
        self.assertFalse(package_level.move_line_ids)

    deftest_pick_a_pack_cancel_is_done(self):
        """Cancelareservedoperationwithapackagelevelthatisdone(is_done=True)."""
        pack=self.env['stock.quant.package'].create({'name':'Thepacktopick'})
        self.env['stock.quant']._update_available_quantity(self.productA,self.stock_location,20.0,package_id=pack)
        picking=self.env['stock.picking'].create({
            'picking_type_id':self.warehouse.int_type_id.id,
            'location_id':self.stock_location.id,
            'location_dest_id':self.stock_location.id,
            'state':'draft',
        })
        picking.picking_type_id.show_entire_packs=True
        package_level=self.env['stock.package_level'].create({
            'package_id':pack.id,
            'picking_id':picking.id,
            'location_dest_id':self.stock_location.id,
            'company_id':picking.company_id.id,
        })
        picking.action_confirm()
        picking.action_assign()
        self.assertEqual(package_level.state,'assigned')
        self.assertTrue(package_level.move_line_ids)
        #Bysettingthepackage_levelas'done',allrelatedlineswillbekept
        #whencancellingthetransfer
        package_level.is_done=True
        picking.action_cancel()
        self.assertEqual(picking.state,'cancel')
        self.assertEqual(package_level.state,'cancel')
        self.assertTrue(package_level.move_line_ids)
        self.assertTrue(
            all(package_level.move_line_ids.mapped(lambdal:l.state=='cancel'))
        )

    deftest_multi_pack_reservation(self):
        """Whenwemoveentirepackages,itispossibletohaveamultipletimes
            thesamepackageinpackagelevellist,wemakesurethatonlyoneisreserved,
            andthatthelocation_idofthepackageistheonewherethepackageisonceit
            isreserved.
        """
        pack=self.env['stock.quant.package'].create({'name':'Thepacktopick'})
        shelf1_location=self.env['stock.location'].create({
            'name':'shelf1',
            'usage':'internal',
            'location_id':self.stock_location.id,
        })
        self.env['stock.quant']._update_available_quantity(self.productA,shelf1_location,20.0,package_id=pack)
        picking=self.env['stock.picking'].create({
            'picking_type_id':self.warehouse.int_type_id.id,
            'location_id':self.stock_location.id,
            'location_dest_id':self.stock_location.id,
            'state':'draft',
        })
        package_level=self.env['stock.package_level'].create({
            'package_id':pack.id,
            'picking_id':picking.id,
            'location_dest_id':self.stock_location.id,
            'company_id':picking.company_id.id,
        })
        package_level=self.env['stock.package_level'].create({
            'package_id':pack.id,
            'picking_id':picking.id,
            'location_dest_id':self.stock_location.id,
            'company_id':picking.company_id.id,
        })
        picking.action_confirm()
        self.assertEqual(picking.package_level_ids.mapped('location_id.id'),[shelf1_location.id],
                         'Thepackagelevelsshouldstillinthesamelocationafterconfirmation.')
        picking.action_assign()
        package_level_reserved=picking.package_level_ids.filtered(lambdapl:pl.state=='assigned')
        package_level_confirmed=picking.package_level_ids.filtered(lambdapl:pl.state=='confirmed')
        self.assertEqual(package_level_reserved.location_id.id,shelf1_location.id,'Thereservedpackagelevelmustbereservedinshelf1')
        self.assertEqual(package_level_confirmed.location_id.id,shelf1_location.id,'Thenotreservedpackageshouldkeepitslocation')
        picking.do_unreserve()
        self.assertEqual(picking.package_level_ids.mapped('location_id.id'),[shelf1_location.id],
                         'Thepackagelevelsshouldhavebacktheoriginallocation.')
        picking.package_level_ids.write({'is_done':True})
        picking.action_assign()
        package_level_reserved=picking.package_level_ids.filtered(lambdapl:pl.state=='assigned')
        package_level_confirmed=picking.package_level_ids.filtered(lambdapl:pl.state=='confirmed')
        self.assertEqual(package_level_reserved.location_id.id,shelf1_location.id,'Thereservedpackagelevelmustbereservedinshelf1')
        self.assertEqual(package_level_confirmed.location_id.id,shelf1_location.id,'Thenotreservedpackageshouldkeepitslocation')
        self.assertEqual(picking.package_level_ids.mapped('is_done'),[True,True],'Bothpackageshouldstilldone')

    deftest_put_in_pack_to_different_location(self):
        """Hitting'Putinpack'buttonwhilesomemovelinesgotodifferent
            locationshouldtriggerawizard.Thiswizardappliesthesamedestination
            locationtoallthemovelines
        """
        self.warehouse.in_type_id.show_reserved=True
        shelf1_location=self.env['stock.location'].create({
            'name':'shelf1',
            'usage':'internal',
            'location_id':self.stock_location.id,
        })
        shelf2_location=self.env['stock.location'].create({
            'name':'shelf2',
            'usage':'internal',
            'location_id':self.stock_location.id,
        })
        picking=self.env['stock.picking'].create({
            'picking_type_id':self.warehouse.in_type_id.id,
            'location_id':self.stock_location.id,
            'location_dest_id':self.stock_location.id,
            'state':'draft',
        })
        ship_move_a=self.env['stock.move'].create({
            'name':'move1',
            'product_id':self.productA.id,
            'product_uom_qty':5.0,
            'product_uom':self.productA.uom_id.id,
            'location_id':self.customer_location.id,
            'location_dest_id':shelf1_location.id,
            'picking_id':picking.id,
            'state':'draft',
        })
        picking.action_confirm()
        picking.action_assign()
        picking.move_line_ids.filtered(lambdaml:ml.product_id==self.productA).qty_done=5.0
        picking.action_put_in_pack()
        pack1=self.env['stock.quant.package'].search([])[-1]
        picking.write({
            'move_line_ids':[(0,0,{
                'product_id':self.productB.id,
                'product_uom_qty':7.0,
                'qty_done':7.0,
                'product_uom_id':self.productB.uom_id.id,
                'location_id':self.customer_location.id,
                'location_dest_id':shelf2_location.id,
                'picking_id':picking.id,
                'state':'confirmed',
            })]
        })
        picking.write({
            'move_line_ids':[(0,0,{
                'product_id':self.productA.id,
                'product_uom_qty':5.0,
                'qty_done':5.0,
                'product_uom_id':self.productA.uom_id.id,
                'location_id':self.customer_location.id,
                'location_dest_id':shelf1_location.id,
                'picking_id':picking.id,
                'state':'confirmed',
            })]
        })
        wizard_values=picking.action_put_in_pack()
        wizard=self.env[(wizard_values.get('res_model'))].browse(wizard_values.get('res_id'))
        wizard.location_dest_id=shelf2_location.id
        wizard.action_done()
        picking._action_done()
        pack2=self.env['stock.quant.package'].search([])[-1]
        self.assertEqual(pack2.location_id.id,shelf2_location.id,'Thepackagemustbestored inshelf2')
        self.assertEqual(pack1.location_id.id,shelf1_location.id,'Thepackagemustbestored inshelf1')
        qp1=pack2.quant_ids[0]
        qp2=pack2.quant_ids[1]
        self.assertEqual(qp1.quantity+qp2.quantity,12,'Thequanthasnotthegoodquantity')

    deftest_move_picking_with_package(self):
        """
        355.4roundedwith0.01precisionis355.40000000000003.
        checkthatnonetheless,movingapickingisaccepted
        """
        self.assertEqual(self.productA.uom_id.rounding,0.01)
        self.assertEqual(
            float_round(355.4,precision_rounding=self.productA.uom_id.rounding),
            355.40000000000003,
        )
        location_dict={
            'location_id':self.stock_location.id,
        }
        quant=self.env['stock.quant'].create({
            **location_dict,
            **{'product_id':self.productA.id,'quantity':355.4}, #importantnumber
        })
        package=self.env['stock.quant.package'].create({
            **location_dict,**{'quant_ids':[(6,0,[quant.id])]},
        })
        location_dict.update({
            'state':'draft',
            'location_dest_id':self.ship_location.id,
        })
        move=self.env['stock.move'].create({
            **location_dict,
            **{
                'name':"XXX",
                'product_id':self.productA.id,
                'product_uom':self.productA.uom_id.id,
                'product_uom_qty':355.40000000000003, #othernumber
            }})
        picking=self.env['stock.picking'].create({
            **location_dict,
            **{
                'picking_type_id':self.warehouse.in_type_id.id,
                'move_lines':[(6,0,[move.id])],
        }})

        picking.action_confirm()
        picking.action_assign()
        move.quantity_done=move.reserved_availability
        picking._action_done()
        #ifwemanagedtogetthere,therewasnotanyexception
        #complainingthat355.4isnot355.40000000000003.Goodjob!

    deftest_move_picking_with_package_2(self):
        """Generatetwomovelinesgoingtodifferentlocationinthesame
        package.
        """
        shelf1=self.env['stock.location'].create({
            'location_id':self.stock_location.id,
            'name':'Shelf1',
        })
        shelf2=self.env['stock.location'].create({
            'location_id':self.stock_location.id,
            'name':'Shelf2',
        })
        package=self.env['stock.quant.package'].create({})

        picking=self.env['stock.picking'].create({
            'picking_type_id':self.warehouse.in_type_id.id,
            'location_id':self.stock_location.id,
            'location_dest_id':self.stock_location.id,
            'state':'draft',
        })
        self.env['stock.move.line'].create({
            'location_id':self.stock_location.id,
            'location_dest_id':shelf1.id,
            'product_id':self.productA.id,
            'product_uom_id':self.productA.uom_id.id,
            'qty_done':5.0,
            'picking_id':picking.id,
            'result_package_id':package.id,
        })
        self.env['stock.move.line'].create({
            'location_id':self.stock_location.id,
            'location_dest_id':shelf2.id,
            'product_id':self.productA.id,
            'product_uom_id':self.productA.uom_id.id,
            'qty_done':5.0,
            'picking_id':picking.id,
            'result_package_id':package.id,
        })
        picking.action_confirm()
        withself.assertRaises(UserError):
            picking._action_done()

    deftest_pack_in_receipt_two_step_single_putway(self):
        """Checksallworksrightinthefollowingspecificcornercase:

          *Foratwo-stepreceipt,receivestwoproductsusingthesameputaway
          *Putstheseproductsinapackagethenvalidthereceipt.
          *Cancelstheautomaticallygeneratedinternaltransferthencreateanewone.
          *Inthisinternaltransfer,addsthepackagethenvalidit.
        """
        grp_multi_loc=self.env.ref('stock.group_stock_multi_locations')
        grp_multi_step_rule=self.env.ref('stock.group_adv_location')
        grp_pack=self.env.ref('stock.group_tracking_lot')
        self.env.user.write({'groups_id':[(3,grp_multi_loc.id)]})
        self.env.user.write({'groups_id':[(3,grp_multi_step_rule.id)]})
        self.env.user.write({'groups_id':[(3,grp_pack.id)]})
        self.warehouse.reception_steps='two_steps'
        #Settingsofreceipt.
        self.warehouse.in_type_id.show_operations=True
        self.warehouse.in_type_id.show_entire_packs=True
        self.warehouse.in_type_id.show_reserved=True
        #Settingsofinternaltransfer.
        self.warehouse.int_type_id.show_operations=True
        self.warehouse.int_type_id.show_entire_packs=True
        self.warehouse.int_type_id.show_reserved=True

        #Createstwonewlocationsforputaway.
        location_form=Form(self.env['stock.location'])
        location_form.name='ShelfA'
        location_form.location_id=self.stock_location
        loc_shelf_A=location_form.save()

        #CreatesanewputawayruleforproductAandproductB.
        putaway_A=self.env['stock.putaway.rule'].create({
            'product_id':self.productA.id,
            'location_in_id':self.stock_location.id,
            'location_out_id':loc_shelf_A.id,
        })
        putaway_B=self.env['stock.putaway.rule'].create({
            'product_id':self.productB.id,
            'location_in_id':self.stock_location.id,
            'location_out_id':loc_shelf_A.id,
        })
        self.stock_location.putaway_rule_ids=[(4,putaway_A.id,0),(4,putaway_B.id,0)]

        #Createanewreceiptwiththetwoproducts.
        receipt_form=Form(self.env['stock.picking'])
        receipt_form.picking_type_id=self.warehouse.in_type_id
        #Add2lines
        withreceipt_form.move_ids_without_package.new()asmove_line:
            move_line.product_id=self.productA
            move_line.product_uom_qty=1
        withreceipt_form.move_ids_without_package.new()asmove_line:
            move_line.product_id=self.productB
            move_line.product_uom_qty=1
        receipt=receipt_form.save()
        receipt.action_confirm()

        #Addsquantitiesthenpacksthemandvalidsthereceipt.
        receipt_form=Form(receipt)
        withreceipt_form.move_line_ids_without_package.edit(0)asmove_line:
            move_line.qty_done=1
        withreceipt_form.move_line_ids_without_package.edit(1)asmove_line:
            move_line.qty_done=1
        receipt=receipt_form.save()
        receipt.action_put_in_pack()
        receipt.button_validate()

        receipt_package=receipt.package_level_ids_details[0]
        self.assertEqual(receipt_package.location_dest_id.id,receipt.location_dest_id.id)
        self.assertEqual(
            receipt_package.move_line_ids[0].location_dest_id.id,
            receipt.location_dest_id.id)
        self.assertEqual(
            receipt_package.move_line_ids[1].location_dest_id.id,
            receipt.location_dest_id.id)

        #Checksaninternaltransferwascreatedfollowingthevalidationofthereceipt.
        internal_transfer=self.env['stock.picking'].search([
            ('picking_type_id','=',self.warehouse.int_type_id.id)
        ],order='iddesc',limit=1)
        self.assertEqual(internal_transfer.origin,receipt.name)
        self.assertEqual(
            len(internal_transfer.package_level_ids_details),1)
        internal_package=internal_transfer.package_level_ids_details[0]
        self.assertNotEqual(
            internal_package.location_dest_id.id,
            internal_transfer.location_dest_id.id)
        self.assertEqual(
            internal_package.location_dest_id.id,
            putaway_A.location_out_id.id,
            "Thepackagedestinationlocationmustbetheonefromtheputaway.")
        self.assertEqual(
            internal_package.move_line_ids[0].location_dest_id.id,
            putaway_A.location_out_id.id,
            "Themovelinedestinationlocationmustbetheonefromtheputaway.")
        self.assertEqual(
            internal_package.move_line_ids[1].location_dest_id.id,
            putaway_A.location_out_id.id,
            "Themovelinedestinationlocationmustbetheonefromtheputaway.")

        #Cancelstheinternaltransferandcreatesanewone.
        internal_transfer.action_cancel()
        internal_form=Form(self.env['stock.picking'])
        internal_form.picking_type_id=self.warehouse.int_type_id
        internal_form.location_id=self.warehouse.wh_input_stock_loc_id
        withinternal_form.package_level_ids_details.new()aspack_line:
            pack_line.package_id=receipt_package.package_id
        internal_transfer=internal_form.save()

        #Checksthepackagefieldshavebeencorrectlyset.
        internal_package=internal_transfer.package_level_ids_details[0]
        self.assertEqual(
            internal_package.location_dest_id.id,
            internal_transfer.location_dest_id.id)
        internal_transfer.action_assign()
        self.assertNotEqual(
            internal_package.location_dest_id.id,
            internal_transfer.location_dest_id.id)
        self.assertEqual(
            internal_package.location_dest_id.id,
            putaway_A.location_out_id.id,
            "Thepackagedestinationlocationmustbetheonefromtheputaway.")
        self.assertEqual(
            internal_package.move_line_ids[0].location_dest_id.id,
            putaway_A.location_out_id.id,
            "Themovelinedestinationlocationmustbetheonefromtheputaway.")
        self.assertEqual(
            internal_package.move_line_ids[1].location_dest_id.id,
            putaway_A.location_out_id.id,
            "Themovelinedestinationlocationmustbetheonefromtheputaway.")
        internal_transfer.button_validate()

    deftest_pack_in_receipt_two_step_multi_putaway(self):
        """Checksallworksrightinthefollowingspecificcornercase:

          *Foratwo-stepreceipt,receivestwoproductsusingtwoputaways
          targetingdifferentlocations.
          *Putstheseproductsinapackagethenvalidthereceipt.
          *Cancelstheautomaticallygeneratedinternaltransferthencreateanewone.
          *Inthisinternaltransfer,addsthepackagethenvalidit.
        """
        grp_multi_loc=self.env.ref('stock.group_stock_multi_locations')
        grp_multi_step_rule=self.env.ref('stock.group_adv_location')
        grp_pack=self.env.ref('stock.group_tracking_lot')
        self.env.user.write({'groups_id':[(3,grp_multi_loc.id)]})
        self.env.user.write({'groups_id':[(3,grp_multi_step_rule.id)]})
        self.env.user.write({'groups_id':[(3,grp_pack.id)]})
        self.warehouse.reception_steps='two_steps'
        #Settingsofreceipt.
        self.warehouse.in_type_id.show_operations=True
        self.warehouse.in_type_id.show_entire_packs=True
        self.warehouse.in_type_id.show_reserved=True
        #Settingsofinternaltransfer.
        self.warehouse.int_type_id.show_operations=True
        self.warehouse.int_type_id.show_entire_packs=True
        self.warehouse.int_type_id.show_reserved=True

        #Createstwonewlocationsforputaway.
        location_form=Form(self.env['stock.location'])
        location_form.name='ShelfA'
        location_form.location_id=self.stock_location
        loc_shelf_A=location_form.save()
        location_form=Form(self.env['stock.location'])
        location_form.name='ShelfB'
        location_form.location_id=self.stock_location
        loc_shelf_B=location_form.save()

        #CreatesanewputawayruleforproductAandproductB.
        putaway_A=self.env['stock.putaway.rule'].create({
            'product_id':self.productA.id,
            'location_in_id':self.stock_location.id,
            'location_out_id':loc_shelf_A.id,
        })
        putaway_B=self.env['stock.putaway.rule'].create({
            'product_id':self.productB.id,
            'location_in_id':self.stock_location.id,
            'location_out_id':loc_shelf_B.id,
        })
        self.stock_location.putaway_rule_ids=[(4,putaway_A.id,0),(4,putaway_B.id,0)]
        #location_form=Form(self.stock_location)
        #location_form.putaway_rule_ids=[(4,putaway_A.id,0),(4,putaway_B.id,0),],
        #self.stock_location=location_form.save()

        #Createanewreceiptwiththetwoproducts.
        receipt_form=Form(self.env['stock.picking'])
        receipt_form.picking_type_id=self.warehouse.in_type_id
        #Add2lines
        withreceipt_form.move_ids_without_package.new()asmove_line:
            move_line.product_id=self.productA
            move_line.product_uom_qty=1
        withreceipt_form.move_ids_without_package.new()asmove_line:
            move_line.product_id=self.productB
            move_line.product_uom_qty=1
        receipt=receipt_form.save()
        receipt.action_confirm()

        #Addsquantitiesthenpacksthemandvalidsthereceipt.
        receipt_form=Form(receipt)
        withreceipt_form.move_line_ids_without_package.edit(0)asmove_line:
            move_line.qty_done=1
        withreceipt_form.move_line_ids_without_package.edit(1)asmove_line:
            move_line.qty_done=1
        receipt=receipt_form.save()
        receipt.action_put_in_pack()
        receipt.button_validate()

        receipt_package=receipt.package_level_ids_details[0]
        self.assertEqual(receipt_package.location_dest_id.id,receipt.location_dest_id.id)
        self.assertEqual(
            receipt_package.move_line_ids[0].location_dest_id.id,
            receipt.location_dest_id.id)
        self.assertEqual(
            receipt_package.move_line_ids[1].location_dest_id.id,
            receipt.location_dest_id.id)

        #Checksaninternaltransferwascreatedfollowingthevalidationofthereceipt.
        internal_transfer=self.env['stock.picking'].search([
            ('picking_type_id','=',self.warehouse.int_type_id.id)
        ],order='iddesc',limit=1)
        self.assertEqual(internal_transfer.origin,receipt.name)
        self.assertEqual(
            len(internal_transfer.package_level_ids_details),1)
        internal_package=internal_transfer.package_level_ids_details[0]
        self.assertEqual(
            internal_package.location_dest_id.id,
            internal_transfer.location_dest_id.id)
        self.assertNotEqual(
            internal_package.location_dest_id.id,
            putaway_A.location_out_id.id,
            "Thepackagedestinationlocationmustbetheonefromthepicking.")
        self.assertNotEqual(
            internal_package.move_line_ids[0].location_dest_id.id,
            putaway_A.location_out_id.id,
            "Themovelinedestinationlocationmustbetheonefromthepicking.")
        self.assertNotEqual(
            internal_package.move_line_ids[1].location_dest_id.id,
            putaway_A.location_out_id.id,
            "Themovelinedestinationlocationmustbetheonefromthepicking.")

        #Cancelstheinternaltransferandcreatesanewone.
        internal_transfer.action_cancel()
        internal_form=Form(self.env['stock.picking'])
        internal_form.picking_type_id=self.warehouse.int_type_id
        internal_form.location_id=self.warehouse.wh_input_stock_loc_id
        withinternal_form.package_level_ids_details.new()aspack_line:
            pack_line.package_id=receipt_package.package_id
        internal_transfer=internal_form.save()

        #Checksthepackagefieldshavebeencorrectlyset.
        internal_package=internal_transfer.package_level_ids_details[0]
        self.assertEqual(
            internal_package.location_dest_id.id,
            internal_transfer.location_dest_id.id)
        internal_transfer.action_assign()
        self.assertEqual(
            internal_package.location_dest_id.id,
            internal_transfer.location_dest_id.id)
        self.assertNotEqual(
            internal_package.location_dest_id.id,
            putaway_A.location_out_id.id,
            "Thepackagedestinationlocationmustbetheonefromthepicking.")
        self.assertNotEqual(
            internal_package.move_line_ids[0].location_dest_id.id,
            putaway_A.location_out_id.id,
            "Themovelinedestinationlocationmustbetheonefromthepicking.")
        self.assertNotEqual(
            internal_package.move_line_ids[1].location_dest_id.id,
            putaway_A.location_out_id.id,
            "Themovelinedestinationlocationmustbetheonefromthepicking.")
        internal_transfer.button_validate()

    deftest_partial_put_in_pack(self):
        """Createasimplemoveinadelivery.Reservethequantitybutsetasquantitydoneonlyapart.
        CallPutInPackbutton."""
        self.productA.tracking='lot'
        lot1=self.env['stock.production.lot'].create({
            'product_id':self.productA.id,
            'name':'00001',
            'company_id':self.warehouse.company_id.id
        })
        self.env['stock.quant']._update_available_quantity(self.productA,self.stock_location,20.0,lot_id=lot1)
        ship_move_a=self.env['stock.move'].create({
            'name':'Theshipmove',
            'product_id':self.productA.id,
            'product_uom_qty':5.0,
            'product_uom':self.productA.uom_id.id,
            'location_id':self.ship_location.id,
            'location_dest_id':self.customer_location.id,
            'warehouse_id':self.warehouse.id,
            'picking_type_id':self.warehouse.out_type_id.id,
            'procure_method':'make_to_order',
            'state':'draft',
        })
        ship_move_a._assign_picking()
        ship_move_a._action_confirm()
        pack_move_a=ship_move_a.move_orig_ids[0]
        pick_move_a=pack_move_a.move_orig_ids[0]

        pick_picking=pick_move_a.picking_id

        pick_picking.picking_type_id.show_entire_packs=True

        pick_picking.action_assign()

        pick_picking.move_line_ids.qty_done=3
        first_pack=pick_picking.action_put_in_pack()

    deftest_action_assign_package_level(self):
        """calling_action_assignonmovedoesnoteraselines'"result_package_id"
        Attheendofthemethod``StockMove._action_assign()``,themethod
        ``StockPicking._check_entire_pack()``iscalled.Thismethodcompares
        themovelineswiththequantsoftheirsourcepackage,andiftheentire
        packageismovedatonceinthesametransfer,a``stock.package_level``is
        created.Oncreationofa``stock.package_level``,theresultpackageof
        themovelinesisdirectlyupdatedwiththeentirepackage.
        Thisisgoodonthefirstassignofthemove,butwhenwecallassignfor
        thesecondtimeonamove,forinstancebecauseitwasmadepartiallyavailable
        andwewanttoassigntheremaining,itcanoverridetheresultpackagewe
        selectedbefore.
        Anoverrideof``StockPicking._check_move_lines_map_quant_package()``ensures
        thatweignore:
        *pickedlines(qty_done>0)
        *lineswithadifferentresultpackagealready
        """
        package=self.env["stock.quant.package"].create({"name":"SrcPack"})
        dest_package1=self.env["stock.quant.package"].create({"name":"DestPack1"})

        #Createnewpicking:120productA
        picking_form=Form(self.env['stock.picking'])
        picking_form.picking_type_id=self.warehouse.pick_type_id
        withpicking_form.move_ids_without_package.new()asmove_line:
            move_line.product_id=self.productA
            move_line.product_uom_qty=120
        picking=picking_form.save()

        #markasTO-DO
        picking.action_confirm()

        #Updatequantityonhand:100unitsinpackage
        self.env['stock.quant']._update_available_quantity(self.productA,self.stock_location,100,package_id=package)

        #CheckAvailability
        picking.action_assign()

        self.assertEqual(picking.state,"assigned")
        self.assertEqual(picking.package_level_ids.package_id,package)

        move=picking.move_lines
        line=move.move_line_ids

        #changetheresultpackageandsetaqty_done
        line.qty_done=100
        line.result_package_id=dest_package1

        #Updatequantityonhand:20unitsinnew_package
        new_package=self.env["stock.quant.package"].create({"name":"NewPack"})
        self.env['stock.quant']._update_available_quantity(self.productA,self.stock_location,20,package_id=new_package)

        #CheckAvailability
        picking.action_assign()

        #Checkthatresultpackageisnotchangedonfirstline
        new_line=move.move_line_ids-line
        self.assertRecordValues(
            line+new_line,
            [
                {"qty_done":100,"result_package_id":dest_package1.id},
                {"qty_done":0,"result_package_id":new_package.id},
            ],
        )

    deftest_entire_pack_overship(self):
        """
        Testthescenarioofovershipping:wesendthecustomeranentirepackage,eventhoughitmightbemorethan
        whattheyinitiallyordered,andupdatethequantityonthesalesordertoreflectwhatwasactuallysent.
        """
        self.warehouse.delivery_steps='ship_only'
        package=self.env["stock.quant.package"].create({"name":"SrcPack"})
        self.env['stock.quant']._update_available_quantity(self.productA,self.stock_location,100,package_id=package)
        self.warehouse.out_type_id.show_entire_packs=True
        picking=self.env['stock.picking'].create({
            'location_id':self.stock_location.id,
            'location_dest_id':self.customer_location.id,
            'picking_type_id':self.warehouse.out_type_id.id,
        })
        withForm(picking)aspicking_form:
            withpicking_form.move_ids_without_package.new()asmove:
                move.product_id=self.productA
                move.product_uom_qty=75
        picking.action_confirm()
        picking.action_assign()
        withForm(picking)aspicking_form:
            withpicking_form.package_level_ids_details.new()aspackage_level:
                package_level.package_id=package
        self.assertEqual(len(picking.move_lines),1,'Shouldhaveonly1stockmove')
        self.assertEqual(len(picking.move_lines),1,'Shouldhaveonly1stockmove')
        withForm(picking)aspicking_form:
            withpicking_form.package_level_ids_details.edit(0)aspackage_level:
                package_level.is_done=True
        action=picking.button_validate()

        self.assertEqual(action,True,'Shouldnotopenwizard')

        formlinpicking.move_line_ids:
            self.assertEqual(ml.package_id,package,'move_line.package')
            self.assertEqual(ml.result_package_id,package,'move_line.result_package')
            self.assertEqual(ml.state,'done','move_line.state')
        quant=package.quant_ids.filtered(lambdaq:q.location_id==self.customer_location)
        self.assertEqual(len(quant),1,'Shouldhavequantatcustomerlocation')
        self.assertEqual(quant.reserved_quantity,0,'quant.reserved_quantityshould=0')
        self.assertEqual(quant.quantity,100.0,'quant.quantityshould=100')
        self.assertEqual(sum(ml.qty_doneformlinpicking.move_line_ids),100.0,'totalmove_line.qty_doneshould=100')
        backorders=self.env['stock.picking'].search([('backorder_id','=',picking.id)])
        self.assertEqual(len(backorders),0,'Shouldnotcreateabackorder')

    deftest_remove_package(self):
        """
        Intheovershippingscenario,ifIremovethepackageafteraddingit,weshouldnotremovetheassociated
        stockmove.
        """
        self.warehouse.delivery_steps='ship_only'
        package=self.env["stock.quant.package"].create({"name":"SrcPack"})
        self.env['stock.quant']._update_available_quantity(self.productA,self.stock_location,100,package_id=package)
        self.warehouse.out_type_id.show_entire_packs=True
        picking=self.env['stock.picking'].create({
            'location_id':self.stock_location.id,
            'location_dest_id':self.customer_location.id,
            'picking_type_id':self.warehouse.out_type_id.id,
        })
        withForm(picking)aspicking_form:
            withpicking_form.move_ids_without_package.new()asmove:
                move.product_id=self.productA
                move.product_uom_qty=75
        picking.action_assign()
        withForm(picking)aspicking_form:
            withpicking_form.package_level_ids_details.new()aspackage_level:
                package_level.package_id=package
        withForm(picking)aspicking_form:
            picking_form.package_level_ids.remove(0)
        self.assertEqual(len(picking.move_lines),1,'Shouldhaveonly1stockmove')

    deftest_picking_state_with_null_qty(self):
        receipt_form=Form(self.env['stock.picking'].with_context(default_immediate_transfer=False))
        picking_type_id=self.warehouse.out_type_id
        receipt_form.picking_type_id=picking_type_id
        withreceipt_form.move_ids_without_package.new()asmove_line:
            move_line.product_id=self.productA
            move_line.product_uom_qty=10
        withreceipt_form.move_ids_without_package.new()asmove_line:
            move_line.product_id=self.productB
            move_line.product_uom_qty=10
        receipt=receipt_form.save()
        receipt.action_confirm()
        self.assertEqual(receipt.state,'confirmed')
        receipt.move_ids_without_package[1].product_uom_qty=0
        self.assertEqual(receipt.state,'confirmed')

        receipt_form=Form(self.env['stock.picking'].with_context(default_immediate_transfer=True))
        picking_type_id=self.warehouse.out_type_id
        receipt_form.picking_type_id=picking_type_id
        withreceipt_form.move_ids_without_package.new()asmove_line:
            move_line.product_id=self.productA
            move_line.quantity_done=10
        withreceipt_form.move_ids_without_package.new()asmove_line:
            move_line.product_id=self.productB
            move_line.quantity_done=10
        receipt=receipt_form.save()
        receipt.action_confirm()
        self.assertEqual(receipt.state,'assigned')
        receipt.move_ids_without_package[1].product_uom_qty=0
        self.assertEqual(receipt.state,'assigned')

    deftest_2_steps_and_backorder(self):
        """Whencreatingabackorderwithapackage,thelattershouldbereservedinthenewpicking.Moreover,
         theinitialpickingshouldn'thaveanylineaboutthispackage"""
        defcreate_picking(type,from_loc,to_loc):
            picking=self.env['stock.picking'].create({
                'picking_type_id':type.id,
                'location_id':from_loc.id,
                'location_dest_id':to_loc.id,
            })
            move_A,move_B=self.env['stock.move'].create([{
                'name':self.productA.name,
                'product_id':self.productA.id,
                'product_uom_qty':1,
                'product_uom':self.productA.uom_id.id,
                'picking_id':picking.id,
                'location_id':from_loc.id,
                'location_dest_id':to_loc.id,
            },{
                'name':self.productB.name,
                'product_id':self.productB.id,
                'product_uom_qty':1,
                'product_uom':self.productB.uom_id.id,
                'picking_id':picking.id,
                'location_id':from_loc.id,
                'location_dest_id':to_loc.id,
            }])
            picking.action_confirm()
            picking.action_assign()
            returnpicking,move_A,move_B

        self.warehouse.delivery_steps='pick_ship'

        output_location=self.warehouse.wh_output_stock_loc_id
        pick_type=self.warehouse.pick_type_id
        delivery_type=self.warehouse.out_type_id

        self.env['stock.quant']._update_available_quantity(self.productA,self.stock_location,1)
        self.env['stock.quant']._update_available_quantity(self.productB,self.stock_location,1)

        picking,moveA,moveB=create_picking(pick_type,pick_type.default_location_src_id,pick_type.default_location_dest_id)
        moveA.move_line_ids.qty_done=1
        picking.action_put_in_pack()
        moveB.move_line_ids.qty_done=1
        picking.action_put_in_pack()
        picking.button_validate()

        picking,_,_=create_picking(delivery_type,delivery_type.default_location_src_id,self.customer_location)
        packB=picking.package_level_ids[1]
        withForm(picking)aspicking_form:
            withpicking_form.package_level_ids_details.edit(0)aspackage_level:
                package_level.is_done=True
        action_data=picking.button_validate()
        backorder_wizard=Form(self.env['stock.backorder.confirmation'].with_context(action_data['context'])).save()
        backorder_wizard.process()
        bo=self.env['stock.picking'].search([('backorder_id','=',picking.id)])

        self.assertNotIn(packB,picking.package_level_ids)
        self.assertEqual(packB,bo.package_level_ids)
        self.assertEqual(bo.package_level_ids.state,'assigned')

    deftest_package_and_sub_location(self):
        """
        SupposetherearesomeproductsPavailableinshelf1,achildlocationofthepacklocation.
        WhenmovingthesePtoanotherchildlocationofpacklocation,thesourcelocationofthe
        relatedpackagelevelshouldbeshelf1
        """
        shelf1_location=self.env['stock.location'].create({
            'name':'shelf1',
            'usage':'internal',
            'location_id':self.pack_location.id,
        })
        shelf2_location=self.env['stock.location'].create({
            'name':'shelf2',
            'usage':'internal',
            'location_id':self.pack_location.id,
        })

        pack=self.env['stock.quant.package'].create({'name':'SuperPackage'})
        self.env['stock.quant']._update_available_quantity(self.productA,shelf1_location,20.0,package_id=pack)

        picking=self.env['stock.picking'].create({
            'picking_type_id':self.warehouse.in_type_id.id,
            'location_id':self.pack_location.id,
            'location_dest_id':shelf2_location.id,
        })
        package_level=self.env['stock.package_level'].create({
            'package_id':pack.id,
            'picking_id':picking.id,
            'location_dest_id':picking.location_dest_id.id,
            'company_id':picking.company_id.id,
        })

        self.assertEqual(package_level.location_id,shelf1_location)

        picking.action_confirm()
        package_level.is_done=True
        picking.button_validate()

        self.assertEqual(package_level.location_id,shelf1_location)

    deftest_2_steps_and_reservation(self):
        """Whencreatingabackorderinatwostepsflow,thereservationshouldberesilient
        tothechangeofquantityinanymoveofthechain.Thetestscenarioisthefollowing:
                        
                                     -move(5units)CONFIRMED
                                   /
        moveorig(10units)DONE-
                                   \-movesibling(5units)DONE
                                   
        Theconfirmedmovecanbeassignedbecauseonthe10unitsvalidatedonthemove
        orig,only5havealreadybeenvalidatedinthesiblingmove.Ifbeforethe
        reservationthemoveorigisunlockedandthequantityischangedfrom10to1,the
        confirmedmovecannotreserveanyquantityanymorebutshouldbeabletocall
        action_assignwithoutanyerror."""

        self.env['stock.quant']._update_available_quantity(self.productA,self.stock_location,20.0)
        self.env['stock.quant']._update_available_quantity(self.productA,self.pack_location,30.0)
        ship_move_a=self.env['stock.move'].create({
            'name':'Theshipmove',
            'product_id':self.productA.id,
            'product_uom_qty':20.0,
            'product_uom':self.productA.uom_id.id,
            'location_id':self.ship_location.id,
            'location_dest_id':self.customer_location.id,
            'warehouse_id':self.warehouse.id,
            'picking_type_id':self.warehouse.out_type_id.id,
            'procure_method':'make_to_order',
            'state':'draft',
        })
        ship_move_a._assign_picking()
        ship_move_a._action_confirm()
        pack_move_a=ship_move_a.move_orig_ids[0]
        pick_move_a=pack_move_a.move_orig_ids[0]

        pick_move_a.quantity_done=20
        pick_move_a._action_done()

        pack_move_a.quantity_done=10
        picking=pack_move_a.picking_id
        action_data=picking.button_validate()
        backorder_wizard=Form(self.env['stock.backorder.confirmation'].with_context(action_data['context'])).save()
        backorder_wizard.process()

        #changevalidatedquantityofthefirststep
        pick_move_a.quantity_done=5

        #checkthebackordercanstillbereserved
        backorder=(pack_move_a.move_orig_ids.move_dest_ids-pack_move_a).picking_id
        backorder.action_assign()

    deftest_put_out_of_pack_transfer(self):
        """Whenatransferhasmultipleproductsallinthesamepackage,removingaproductfromthedestinationpackage
        (i.e.removingitfromthepackagebutstillputtingitinthesamelocation)shouldn'tremoveitforotherproducts."""
        loc_1=self.env['stock.location'].create({
            'name':'LocationA',
            'location_id':self.stock_location.id,
        })
        loc_2=self.env['stock.location'].create({
            'name':'LocationB',
            'location_id':self.stock_location.id,
        })
        pack=self.env['stock.quant.package'].create({'name':'NewPackage'})
        self.env['stock.quant']._update_available_quantity(self.productA,loc_1,5,package_id=pack)
        self.env['stock.quant']._update_available_quantity(self.productB,loc_1,4,package_id=pack)

        picking=self.env['stock.picking'].create({
            'location_id':loc_1.id,
            'location_dest_id':loc_2.id,
            'picking_type_id':self.warehouse.int_type_id.id,
        })
        moveA=self.env['stock.move'].create({
            'name':self.productA.name,
            'product_id':self.productA.id,
            'product_uom_qty':5,
            'product_uom':self.productA.uom_id.id,
            'picking_id':picking.id,
            'location_id':loc_1.id,
            'location_dest_id':loc_2.id,
        })
        moveB=self.env['stock.move'].create({
            'name':self.productB.name,
            'product_id':self.productB.id,
            'product_uom_qty':4,
            'product_uom':self.productB.uom_id.id,
            'picking_id':picking.id,
            'location_id':loc_1.id,
            'location_dest_id':loc_2.id,
        })
        #Checkavailabilities
        picking.action_assign()
        self.assertEqual(len(moveA.move_line_ids),1,"Amovelineshouldhavebeencreatedforthereservationofthepackage.")
        self.assertEqual(moveA.move_line_ids.package_id.id,pack.id,"Thepackageshouldhavebeenreservedforbothproducts.")
        self.assertEqual(moveB.move_line_ids.package_id.id,pack.id,"Thepackageshouldhavebeenreservedforbothproducts.")
        pack_level=moveA.move_line_ids.package_level_id

        #RemovetheproductAfromthepackageinthedestination.
        moveA.move_line_ids.result_package_id=False
        self.assertEqual(moveA.move_line_ids.result_package_id.id,False,"Nopackageshouldbelinkedinthedestination.")
        self.assertEqual(moveA.move_line_ids.package_level_id.id,False,"Packagelevelshouldhavebeenunlinkedfromthismoveline.")
        self.assertEqual(moveB.move_line_ids.result_package_id.id,pack.id,"Packageshouldhavestayedthesame.")
        self.assertEqual(moveB.move_line_ids.package_level_id.id,pack_level.id,"Packagelevelshouldhavestayedthesame.")

        #Validatethepicking
        moveA.move_line_ids.qty_done=5
        moveB.move_line_ids.qty_done=4
        picking.button_validate()

        #Checkthatthequantshavetheirexpectedlocation/package/quantities
        quantA=self.env['stock.quant'].search([('product_id','=',self.productA.id),('location_id','=',loc_2.id)])
        quantB=self.env['stock.quant'].search([('product_id','=',self.productB.id),('location_id','=',loc_2.id)])
        self.assertEqual(pack.location_id.id,loc_2.id,"PackageshouldhavebeenmovedtoLocationB.")
        self.assertEqual(quantA.quantity,5,"All5unitsofproductAshouldbeinlocationB")
        self.assertEqual(quantA.package_id.id,False,"ThereshouldbenopackageforproductAasitwasremovedinthemove.")
        self.assertEqual(quantB.quantity,4,"All4unitsofproductBshouldbeinlocationB")
        self.assertEqual(quantB.package_id.id,pack.id,"ProductBshouldstillbeintheinitialpackage.")
