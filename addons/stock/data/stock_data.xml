<?xmlversion="1.0"encoding="utf-8"?>
<flectra>
    <data>
        
        <recordid="removal_fifo"model="product.removal">
            <fieldname="name">FirstInFirstOut(FIFO)</field>
            <fieldname="method">fifo</field>
        </record>
        <recordid="removal_lifo"model="product.removal">
            <fieldname="name">LastInFirstOut(LIFO)</field>
            <fieldname="method">lifo</field>
        </record>
        <record id="stock_quant_stock_move_line_desynchronization"model="ir.actions.server">
            <fieldname="name">Correctinconsistenciesforreservation</field>
            <fieldname="model_id"ref="base.model_ir_actions_server"/>
            <fieldname="state">code</field>
            <fieldname="code">
quants=env['stock.quant'].sudo().search([])

move_line_ids=[]
move_line_to_recompute_ids=[]

logging=''

forquantinquants:

    move_lines=env['stock.move.line'].search([
        ('product_id','=',quant.product_id.id),
        ('location_id','=',quant.location_id.id),
        ('lot_id','=',quant.lot_id.id),
        ('package_id','=',quant.package_id.id),
        ('owner_id','=',quant.owner_id.id),
        ('product_qty','!=',0),
        ])

    move_line_ids+=move_lines.ids
    reserved_on_move_lines=sum(move_lines.mapped('product_qty'))
    move_line_str=str.join(',',[str(move_line_id)formove_line_idinmove_lines.ids])

    ifquant.location_id.should_bypass_reservation():
        #Ifaquantisinalocationthatshouldbypassthereservation,its`reserved_quantity`field
        #shouldbe0.
        ifquant.reserved_quantity!=0:
            logging+="Problematicquantfound:%s(quantity:%s,reserved_quantity:%s)\n"%(quant.id,quant.quantity,quant.reserved_quantity)
            logging+="its`reserved_quantity`fieldisnot0whileitslocationshouldbypassthereservation\n"
            ifmove_lines:
                logging+="Thesemovelinesarereservedonit:%s(sumofthereservation:%s)\n"%(move_line_str,reserved_on_move_lines)
            else:
                logging+="nomovelinesarereservedonit,youcansafelyresetits`reserved_quantity`to0\n"
            logging+='******************\n'
            quant.write({'reserved_quantity':0})
    else:
        #Ifaquantisinareservablelocation,its`reserved_quantity`shouldbeexactlythesum
        #ofthe`product_qty`ofallthepartially_available/assignedmovelineswiththesame
        #characteristics.

        ifquant.reserved_quantity==0:
            ifmove_lines:
                logging+="Problematicquantfound:%s(quantity:%s,reserved_quantity:%s)\n"%(quant.id,quant.quantity,quant.reserved_quantity)
                logging+="its`reserved_quantity`fieldis0whilethesemovelinesarereservedonit:%s(sumofthereservation:%s)\n"%(move_line_str,reserved_on_move_lines)
                logging+='******************\n'
                move_lines.with_context(bypass_reservation_update=True).sudo().write({'product_uom_qty':0})
                move_line_to_recompute_ids+=move_lines.ids
        elifquant.reserved_quantity&lt;0:
            logging+="Problematicquantfound:%s(quantity:%s,reserved_quantity:%s)\n"%(quant.id,quant.quantity,quant.reserved_quantity)
            logging+="its`reserved_quantity`fieldisnegativewhileitshouldnothappen\n"
            quant.write({'reserved_quantity':0})
            ifmove_lines:
                logging+="Thesemovelinesarereservedonit:%s(sumofthereservation:%s)\n"%(move_line_str,reserved_on_move_lines)
                move_lines.with_context(bypass_reservation_update=True).sudo().write({'product_uom_qty':0})
                move_line_to_recompute_ids+=move_lines.ids
            logging+='******************\n'
        else:
            ifreserved_on_move_lines!=quant.reserved_quantity:
                logging+="Problematicquantfound:%s(quantity:%s,reserved_quantity:%s)\n"%(quant.id,quant.quantity,quant.reserved_quantity)
                logging+="its`reserved_quantity`doesnotreflectthemovelinesreservation\n"
                logging+="Thesemovelinesarereservedonit:%s(sumofthereservation:%s)\n"%(move_line_str,reserved_on_move_lines)
                logging+='******************\n'
                move_lines.with_context(bypass_reservation_update=True).sudo().write({'product_uom_qty':0})
                move_line_to_recompute_ids+=move_lines.ids
                quant.write({'reserved_quantity':0})
            else:
                ifany(move_line.product_qty&lt;0formove_linein
                       move_lines):
                    logging+="Problematicquantfound:%s(quantity:%s,reserved_quantity:%s)\n"%(quant.id,quant.quantity,quant.reserved_quantity)
                    logging+="its`reserved_quantity`correctlyreflectsthemovelinesreservationbutsomearenegatives\n"
                    logging+="Thesemovelinesarereservedonit:%s(sumofthereservation:%s)\n"%(move_line_str,reserved_on_move_lines)
                    logging+='******************\n'
                    move_lines.with_context(bypass_reservation_update=True).sudo().write({'product_uom_qty':0})
                    move_line_to_recompute_ids+=move_lines.ids
                    quant.write({'reserved_quantity':0})

move_lines=env['stock.move.line'].search([('product_id.type','=',
        'product'),('product_qty','!=',0),('id','notin',
        move_line_ids)])

move_lines_to_unreserve=[]

formove_lineinmove_lines:
    ifnotmove_line.location_id.should_bypass_reservation():
        logging+="Problematicmovelinefound:%s(reserved_quantity:%s)\n"%(move_line.id,move_line.product_qty)
        logging+="Thereisnoexitingquantsdespiteits`reserved_quantity`\n"
        logging+='******************\n'
        move_lines_to_unreserve.append(move_line.id)
        move_line_to_recompute_ids.append(move_line.id)

iflen(move_lines_to_unreserve)>1:
    env.cr.execute("""UPDATEstock_move_lineSETproduct_uom_qty=0,product_qty=0WHEREidin%s;"""%(tuple(move_lines_to_unreserve),))
eliflen(move_lines_to_unreserve)==1:
    env.cr.execute("""UPDATEstock_move_lineSETproduct_uom_qty=0,product_qty=0WHEREid=%s;"""%(move_lines_to_unreserve[0]))

iflogging:
    env['ir.logging'].sudo().create({
        'name':'Unreservestock.quantandstock.move.line',
        'type':'server',
        'level':'DEBUG',
        'dbname':env.cr.dbname,
        'message':logging,
        'func':'_update_reserved_quantity',
        'path':'addons/stock/models/stock_quant.py',
        'line':'0',
    })

ifmove_line_to_recompute_ids:
    env['stock.move.line'].browse(move_line_to_recompute_ids).move_id._recompute_state()

            </field>
        </record>
                <!--
    Resource:stock.location
    -->
    </data>
    <datanoupdate="1">
        <recordid="stock_location_locations"model="stock.location">
            <fieldname="name">PhysicalLocations</field>
            <fieldname="usage">view</field>
            <fieldname="company_id"></field>
        </record>
        <recordid="stock_location_locations_partner"model="stock.location">
            <fieldname="name">PartnerLocations</field>
            <fieldname="usage">view</field>
            <fieldname="posz">1</field>
            <fieldname="company_id"></field>
        </record>
        <recordid="stock_location_locations_virtual"model="stock.location">
            <fieldname="name">VirtualLocations</field>
            <fieldname="usage">view</field>
            <fieldname="posz">1</field>
            <fieldname="company_id"></field>
        </record>

        <recordid="stock_location_suppliers"model="stock.location">
            <fieldname="name">Vendors</field>
            <fieldname="location_id"ref="stock_location_locations_partner"/>
            <fieldname="usage">supplier</field>
            <fieldname="company_id"></field>
        </record>
        <recordid="stock_location_customers"model="stock.location">
            <fieldname="name">Customers</field>
            <fieldname="location_id"ref="stock_location_locations_partner"/>
            <fieldname="usage">customer</field>
            <fieldname="company_id"></field>
        </record>
        
        <recordid="stock_location_inter_wh"model="stock.location">
            <fieldname="name">Inter-companytransit</field>
            <fieldname="location_id"ref="stock_location_locations_virtual"/>
            <fieldname="usage">transit</field>
            <fieldname="company_id"></field>
            <fieldname="active"eval="False"/>
        </record>

    </data>
    <datanoupdate="1">
        <!--
             Stockrules
        -->
        
        <!--setalowersequenceonthemtoroutethanontheresupplyroutes-->
        <recordid="route_warehouse0_mto"model='stock.location.route'>
            <fieldname="name">ReplenishonOrder(MTO)</field>
            <fieldname="company_id"></field>
            <fieldname="active">False</field>
            <fieldname="sequence">5</field>
        </record>

        <!--
    Properties
    -->
        <recordforcecreate="True"id="property_stock_supplier"model="ir.property">
            <fieldname="name">property_stock_supplier</field>
            <fieldname="fields_id"search="[('model','=','res.partner'),('name','=','property_stock_supplier')]"/>
            <fieldeval="'stock.location,'+str(stock_location_suppliers)"name="value"/>
        </record>
        <recordforcecreate="True"id="property_stock_customer"model="ir.property">
            <fieldname="name">property_stock_customer</field>
            <fieldname="fields_id"search="[('model','=','res.partner'),('name','=','property_stock_customer')]"/>
            <fieldeval="'stock.location,'+str(stock_location_customers)"name="value"/>
        </record>


        <!--
    Resource:stock.warehouse
    -->

        <recordid="warehouse0"model="stock.warehouse">
            <fieldname="partner_id"ref="base.main_partner"/>
            <fieldname="name">SanFrancisco</field>
            <fieldname="code">WH</field>
        </record>

        <recordid="sequence_mrp_op"model="ir.sequence">
            <fieldname="name">Stockorderpoint</field>
            <fieldname="code">stock.orderpoint</field>
            <fieldname="prefix">OP/</field>
            <fieldname="padding">5</field>
            <fieldname="number_next">1</field>
            <fieldname="number_increment">1</field>
            <fieldname="company_id"></field>
        </record>

        <!--createxmlidsfordemodatathatarewidelyusedintestsorinothercodes,formoreconvenience-->
        <functionmodel="ir.model.data"name="_update_xmlids">
            <valuemodel="base"eval="[{
                'xml_id':'stock.stock_location_stock',
                'record':obj().env.ref('stock.warehouse0').lot_stock_id,
                'noupdate':True,
            },{
                'xml_id':'stock.stock_location_company',
                'record':obj().env.ref('stock.warehouse0').wh_input_stock_loc_id,
                'noupdate':True,
            },{
                'xml_id':'stock.stock_location_output',
                'record':obj().env.ref('stock.warehouse0').wh_output_stock_loc_id,
                'noupdate':True,
            },{
                'xml_id':'stock.location_pack_zone',
                'record':obj().env.ref('stock.warehouse0').wh_pack_stock_loc_id,
                'noupdate':True,
            },{
                'xml_id':'stock.picking_type_internal',
                'record':obj().env.ref('stock.warehouse0').int_type_id,
                'noupdate':True,
            },{
                'xml_id':'stock.picking_type_in',
                'record':obj().env.ref('stock.warehouse0').in_type_id,
                'noupdate':True,
            },{
                'xml_id':'stock.picking_type_out',
                'record':obj().env.ref('stock.warehouse0').out_type_id,
                'noupdate':True,
            }]"/>
        </function>

        <!--createthetransitlocationforeachcompanyexisting-->
        <functionmodel="res.company"name="create_missing_transit_location"/>
        <functionmodel="res.company"name="create_missing_warehouse"/>
        <functionmodel="res.company"name="create_missing_inventory_loss_location"/>
        <functionmodel="res.company"name="create_missing_production_location"/>
        <functionmodel="res.company"name="create_missing_scrap_location"/>
        <functionmodel="res.company"name="create_missing_scrap_sequence"/>
    </data>
</flectra>
