/*
Copyright(c)2013,FabienMeghazi

ReleasedundertheMITlicense

Permissionisherebygranted,freeofcharge,toanypersonobtainingacopyof
thissoftwareandassociateddocumentationfiles(the"Software"),todealin
theSoftwarewithoutrestriction,includingwithoutlimitationtherightstouse,
copy,modify,merge,publish,distribute,sublicense,and/orsellcopiesofthe
Software,andtopermitpersonstowhomtheSoftwareisfurnishedtodoso,
subjecttothefollowingconditions:

Theabovecopyrightnoticeandthispermissionnoticeshallbeincludedinall
copiesorsubstantialportionsoftheSoftware.

THESOFTWAREISPROVIDED"ASIS",WITHOUTWARRANTYOFANYKIND,EXPRESSOR
IMPLIED,INCLUDINGBUTNOTLIMITEDTOTHEWARRANTIESOFMERCHANTABILITY,FITNESS
FORAPARTICULARPURPOSEANDNONINFRINGEMENT.INNOEVENTSHALLTHEAUTHORSOR
COPYRIGHTHOLDERSBELIABLEFORANYCLAIM,DAMAGESOROTHERLIABILITY,WHETHERIN
ANACTIONOFCONTRACT,TORTOROTHERWISE,ARISINGFROM,OUTOFORINCONNECTION
WITHTHESOFTWAREORTHEUSEOROTHERDEALINGSINTHESOFTWARE.
*/

//TODO:trimsupport
//TODO:linenumber->https://bugzilla.mozilla.org/show_bug.cgi?id=618650
//TODO:templatesorverwrittencouldbecalledbyt-call="__super__"?
//TODO:t-set+t-value+childrennode==scopedvariable?
varQWeb2={
    expressions_cache:{},
    RESERVED_WORDS:'true,false,NaN,null,undefined,debugger,console,window,in,instanceof,new,function,return,this,typeof,eval,void,Math,RegExp,Array,Object,Date'.split(','),
    ACTIONS_PRECEDENCE:'foreach,if,elif,else,call,set,tag,esc,raw,js,debug,log'.split(','),
    WORD_REPLACEMENT:{
        'and':'&&',
        'or':'||',
        'gt':'>',
        'gte':'>=',
        'lt':'<',
        'lte':'<='
    },
    VOID_ELEMENTS:'area,base,br,col,embed,hr,img,input,keygen,link,menuitem,meta,param,source,track,wbr'.split(','),
    tools:{
        exception:function(message,context){
            context=context||{};
            varprefix='QWeb2';
            if(context.template){
                prefix+="-template['"+context.template+"']";
            }
            thrownewError(prefix+":"+message);
        },
        warning:function(message){
            if(typeof(window)!=='undefined'&&window.console){
                window.console.warn(message);
            }
        },
        trim:function(s,mode){
            switch(mode){
                case"left":
                    returns.replace(/^\s*/,"");
                case"right":
                    returns.replace(/\s*$/,"");
                default:
                    returns.replace(/^\s*|\s*$/g,"");
            }
        },
        js_escape:function(s,noquotes){
            return(noquotes?'':"'")+s.replace(/\r?\n/g,"\\n").replace(/'/g,"\\'")+(noquotes?'':"'");
        },
        html_escape:function(s,attribute){
            if(s==null){
                return'';
            }
            s=String(s).replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;');
            if(attribute){
                s=s.replace(/"/g,'&quot;');
            }
            returns;
        },
        gen_attribute:function(o){
            if(o!==null&&o!==undefined){
                if(o.constructor===Array){
                    if(o[1]!==null&&o[1]!==undefined){
                        returnthis.format_attribute(o[0],o[1]);
                    }
                }elseif(typeofo==='object'){
                    varr='';
                    for(varkino){
                        if(o.hasOwnProperty(k)){
                            r+=this.gen_attribute([k,o[k]]);
                        }
                    }
                    returnr;
                }
            }
            return'';
        },
        format_attribute:function(name,value){
            return''+name+'="'+this.html_escape(value,true)+'"';
        },
        extend:function(dst,src,exclude){
            for(varpinsrc){
                if(src.hasOwnProperty(p)&&!(exclude&&this.arrayIndexOf(exclude,p)!==-1)){
                    dst[p]=src[p];
                }
            }
            returndst;
        },
        arrayIndexOf:function(array,item){
            for(vari=0,ilen=array.length;i<ilen;i++){
                if(array[i]===item){
                    returni;
                }
            }
            return-1;
        },
        get_element_sibling:function(node,dom_attr){
            //ThishelperkeepssupportforIE8whichdoesnot
            //implementDOMNode.(previous|next)ElementSibling
            varsibling=node[dom_attr];
            while(sibling&&sibling.nodeType!==1){
                sibling=sibling[dom_attr];
            }
            returnsibling;
        },
        xml_node_to_string:function(node,childs_only){
            if(childs_only){
                varchilds=node.childNodes,r=[];
                for(vari=0,ilen=childs.length;i<ilen;i++){
                    r.push(this.xml_node_to_string(childs[i]));
                }
                returnr.join('');
            }else{
                //avoidXMLSerializerwithtextnodeforIE
                if(node.nodeType==3){
                    returnnode.data;
                }
                if(typeofXMLSerializer!=='undefined'){
                    return(newXMLSerializer()).serializeToString(node);
                }else{
                    switch(node.nodeType){
                    case1:returnnode.outerHTML;
                    case4:return'<![CDATA['+node.data+']]>';
                    case8:return'<!--'+node.data+'-->';
                    }
                    thrownewError('Unknownnodetype'+node.nodeType);
                }
            }
        },
        call:function(context,template,old_dict,_import,callback){
            varnew_dict=this.extend({},old_dict);
            new_dict['__caller__']=old_dict['__template__'];
            if(callback){
                new_dict[0]=callback(context,new_dict);
            }
            returncontext.engine._render(template,new_dict);
        },
        foreach:function(context,enu,as,old_dict,callback){
            if(enu!=null){
                varindex,jlen,cur;
                varnew_dict=this.extend({},old_dict);
                new_dict[as+"_all"]=enu;
                varas_value=as+"_value",
                    as_index=as+"_index",
                    as_first=as+"_first",
                    as_last=as+"_last",
                    as_parity=as+"_parity";
                if(enuinstanceofArray){
                    varsize=enu.length;
                    new_dict[as+"_size"]=size;
                    for(index=0,jlen=enu.length;index<jlen;index++){
                        cur=enu[index];
                        new_dict[as_value]=cur;
                        new_dict[as_index]=index;
                        new_dict[as_first]=index===0;
                        new_dict[as_last]=index+1===size;
                        new_dict[as_parity]=(index%2==1?'odd':'even');
                        if(cur&&cur.constructor===Object){
                            this.extend(new_dict,cur);
                        }
                        new_dict[as]=cur;
                        callback(context,new_dict);
                    }
                }elseif(enu.constructor==Number){
                    var_enu=[];
                    for(vari=0;i<enu;i++){
                        _enu.push(i);
                    }
                    this.foreach(context,_enu,as,old_dict,callback);
                }else{
                    index=0;
                    for(varkinenu){
                        if(enu.hasOwnProperty(k)){
                            cur=enu[k];
                            new_dict[as_value]=cur;
                            new_dict[as_index]=index;
                            new_dict[as_first]=index===0;
                            new_dict[as_parity]=(index%2==1?'odd':'even');
                            new_dict[as]=k;
                            callback(context,new_dict);
                            index+=1;
                        }
                      }
                }

                _.each(Object.keys(old_dict),function(z){
                    old_dict[z]=new_dict[z];
                });
            }else{
                this.exception("Noenumeratorgiventoforeach",context);
            }
        }
    }
};

QWeb2.Engine=(function(){
    functionEngine(){
        //TODO:handleprefixattemplatelevel:t-prefix="x",don'tforgettolowercaseit
        this.prefix='t';
        this.debug=false;
        this.templates_resources=[];//TODO:implementthis.reload()
        this.templates={};
        this.compiled_templates={};
        this.extend_templates={};
        this.default_dict={};
        this.tools=QWeb2.tools;
        this.jQuery=window.jQuery;
        this.reserved_words=QWeb2.RESERVED_WORDS.slice(0);
        this.actions_precedence=QWeb2.ACTIONS_PRECEDENCE.slice(0);
        this.void_elements=QWeb2.VOID_ELEMENTS.slice(0);
        this.word_replacement=QWeb2.tools.extend({},QWeb2.WORD_REPLACEMENT);
        this.preprocess_node=null;
        for(vari=0;i<arguments.length;i++){
            this.add_template(arguments[i]);
        }
    }

    QWeb2.tools.extend(Engine.prototype,{
        /**
         *Addatemplatetotheengine
         *
         *@param{String|Document}templateTemplateasstringorurlorDOMDocument
         *@param{Function}[callback]Calledwhenthetemplateisloaded,forceasyncrequest
         */
        add_template:function(template,callback){
            varself=this;
            this.templates_resources.push(template);
            if(template.constructor===String){
                returnthis.load_xml(template,function(err,xDoc){
                    if(err){
                        if(callback){
                            returncallback(err);
                        }else{
                            throwerr;
                        }
                    }
                    self.add_template(xDoc,callback);
                });
            }
            template=this.preprocess(template);
            varec=(template.documentElement&&template.documentElement.childNodes)||template.childNodes||[];
            for(vari=0;i<ec.length;i++){
                varnode=ec[i];
                if(node.nodeType===1){
                    varname=node.getAttribute(this.prefix+'-name');
                    varextend=node.getAttribute(this.prefix+'-extend');
                    if(name&&extend){
                        //Clonetemplateandextendit
                        if(!this.templates[extend]){
                            returnthis.tools.exception("Can'tcloneundefinedtemplate"+extend);
                        }
                        this.templates[name]=this.templates[extend].cloneNode(true);
                        this.extend_templates[name]=(this.extend_templates[extend]||[]).slice();
                        extend=name;
                        name=undefined;
                    }
                    if(name){
                        this.templates[name]=node;
                        this.compiled_templates[name]=null;
                    }elseif(extend){
                        delete(this.compiled_templates[extend]);
                        if(this.extend_templates[extend]){
                            this.extend_templates[extend].push(node);
                        }else{
                            this.extend_templates[extend]=[node];
                        }
                    }
                }
            }
            if(callback){
                callback(null,template);
            }
            returntrue;
        },
        preprocess:function(doc){
            /**
             *Preprocessatemplate'sdocumentatloadtime.
             *Thismethodismostlyusedfortemplatesanitizationbutcould
             *alsobeoverloadedforextendedfeaturessuchastranslations,...
             *Throwsanexceptionifatemplateisinvalid.
             *
             *@param{Document}docDocumentcontaingtheloadedtemplates
             *@return{Document}Returnsthepre-processed/sanitizedtemplate
             */
            varself=this;
            varchilds=(doc.documentElement&&doc.documentElement.childNodes)||doc.childNodes||[];

            //Checkforloaderrors
            for(vari=0;i<childs.length;i++){
                varnode=childs[i];
                if(node.nodeType===1&&node.nodeName=='parsererror'){
                    returnthis.tools.exception(node.innerText);
                }
            }

            //Sanitizet-elifandt-elsedirectives
            vartbranch=doc.querySelectorAll('[t-elif],[t-else]');
            for(vari=0,ilen=tbranch.length;i<ilen;i++){
                varnode=tbranch[i];
                varprev_elem=self.tools.get_element_sibling(node,'previousSibling');
                varpattr=function(name){returnprev_elem.getAttribute(name);}
                varnattr=function(name){return+!!node.getAttribute(name);}
                if(prev_elem&&(pattr('t-if')||pattr('t-elif'))){
                    if(pattr('t-foreach')){
                        returnself.tools.exception("Error:t-ifcannotstayatthesamelevelast-foreachwhenusingt-elifort-else");
                    }
                    if(['t-if','t-elif','t-else'].map(nattr).reduce(function(a,b){returna+b;})>1){
                        returnself.tools.exception("Error:onlyoneconditionalbranchingdirectiveisallowedpernode");
                    }
                    //Alltextnodesbetweenbranchnodesareremoved
                    vartext_node;
                    while((text_node=node.previousSibling)!==prev_elem){
                        if(text_node.nodeType!==8&&self.tools.trim(text_node.nodeValue)){
                            returnself.tools.exception("Error:textisnotallowedbetweenbranchingdirectives");
                        }
                        //IE<=11.0doesn'tsupportChildNode.remove
                        text_node.parentNode.removeChild(text_node);
                    }
                }else{
                    returnself.tools.exception("Error:t-elifandt-elsedirectivesmustbeprecededbyat-ifort-elifdirective");
                }
            }

            returndoc;
        },
        load_xml:function(s,callback){
            varself=this;
            varasync=!!callback;
            s=this.tools.trim(s);
            if(s.charAt(0)==='<'){
                vartpl=this.load_xml_string(s);
                if(callback){
                    callback(null,tpl);
                }
                returntpl;
            }else{
                varreq=this.get_xhr();
                if(this.debug){
                    s+='?debug='+(newDate()).getTime();//TODOfme:doitproperlyincasethere'salreadyurlparameters
                }
                req.open('GET',s,async);
                if(async){
                    req.addEventListener("load",function(){
                        //0,notbeingavalidHTTPstatuscode,isusedbybrowsers
                        //toindicatesuccessforanon-httpxhrresponse
                        //(forexample,usingthefile://protocol)
                        //https://developer.mozilla.org/fr/docs/Web/API/XMLHttpRequest
                        //https://bugzilla.mozilla.org/show_bug.cgi?id=331610
                        if(req.status==200||req.status==0){
                            callback(null,self._parse_from_request(req));
                        }else{
                            callback(newError("Can'tloadtemplate"+s+",httpstatus"+req.status));
                        }
                    });
                }
                req.send(null);
                if(!async){
                    returnthis._parse_from_request(req);
                }
            }
        },
        _parse_from_request:function(req){
            varxDoc=req.responseXML;
            if(xDoc){
                if(!xDoc.documentElement){
                    thrownewError("QWeb2:Thisxmldocumenthasnorootdocument:"+xDoc.responseText);
                }
                if(xDoc.documentElement.nodeName=="parsererror"){
                    thrownewError("QWeb2:Couldnotparsedocument:"+xDoc.documentElement.childNodes[0].nodeValue);
                }
                returnxDoc;
            }else{
                returnthis.load_xml_string(req.responseText);
            }
        },
        load_xml_string:function(s){
            if(window.DOMParser){
                vardp=newDOMParser();
                varr=dp.parseFromString(s,"text/xml");
                if(r.body&&r.body.firstChild&&r.body.firstChild.nodeName=='parsererror'){
                    thrownewError("QWeb2:Couldnotparsedocument:"+r.body.innerText);
                }
                returnr;
            }
            varxDoc;
            try{
                xDoc=newActiveXObject("MSXML2.DOMDocument");
            }catch(e){
                thrownewError("CouldnotfindaDOMParser:"+e.message);
            }
            xDoc.async=false;
            xDoc.preserveWhiteSpace=true;
            xDoc.loadXML(s);
            returnxDoc;
        },
        has_template:function(template){
            return!!this.templates[template];
        },
        get_xhr:function(){
            if(window.XMLHttpRequest){
                returnnewwindow.XMLHttpRequest();
            }
            try{
                returnnewActiveXObject('MSXML2.XMLHTTP.3.0');
            }catch(e){
                thrownewError("CouldnotgetXHR");
            }
        },
        compile:function(node){
            vare=newQWeb2.Element(this,node);
            vartemplate=node.getAttribute(this.prefix+'-name');
            return "  /*'this'referstoQweb2.Engineinstance*/\n"+
                    "  varcontext={engine:this,template:"+(this.tools.js_escape(template))+"};\n"+
                    "  dict=dict||{};\n"+
                    "  dict['__template__']='"+template+"';\n"+
                    "  varr=[];\n"+
                    "  /*STARTTEMPLATE*/"+
                    (this.debug?"":"try{\n")+
                    (e.compile())+"\n"+
                    "  /*ENDOFTEMPLATE*/"+
                    (this.debug?"":"}catch(error){\n"+
                    "      if(console&&console.exception)console.exception(error);\n"+
                    "      context.engine.tools.exception('RuntimeError:'+error,context);\n")+
                    (this.debug?"":"  }\n")+
                    "  returnr.join('');";
        },
        render:function(template,dict){
            dict=dict||{};
            QWeb2.tools.extend(dict,this.default_dict);
            /*if(this.debug&&window['console']!==undefined){
                console.time("QWebrendertemplate"+template);
            }*/
            varr=this._render(template,dict);
            /*if(this.debug&&window['console']!==undefined){
                console.timeEnd("QWebrendertemplate"+template);
            }*/
            returnr;
        },
        _render:function(template,dict){
            if(this.compiled_templates[template]){
                returnthis.compiled_templates[template].apply(this,[dict||{}]);
            }elseif(this.templates[template]){
                varext;
                if(ext=this.extend_templates[template]){
                    varextend_node;
                    while(extend_node=ext.shift()){
                        this.extend(template,extend_node);
                    }
                }
                varcode=this.compile(this.templates[template]),tcompiled;
                try{
                    tcompiled=newFunction(['dict'],code);
                }catch(error){
                    if(this.debug&&window.console){
                        console.log(code);
                    }
                    this.tools.exception("Errorevaluatingtemplate:"+error,{template:template});
                }
                if(!tcompiled){
                    this.tools.exception("Errorevaluatingtemplate:(IE?)"+error,{template:template});
                }
                this.compiled_templates[template]=tcompiled;
                returnthis.render(template,dict);
            }else{
                returnthis.tools.exception("Template'"+template+"'notfound");
            }
        },
        extend:function(template,extend_node){
            varjQuery=this.jQuery;
            if(!jQuery){
                returnthis.tools.exception("Can'textendtemplate"+template+"withoutjQuery");
            }
            vartemplate_dest=this.templates[template];
            for(vari=0,ilen=extend_node.childNodes.length;i<ilen;i++){
                varchild=extend_node.childNodes[i];
                if(child.nodeType===1){
                    varjquery=child.getAttribute(this.prefix+'-jquery'),
                        operation=child.getAttribute(this.prefix+'-operation'),
                        target,
                        error_msg="Errorwhileextendingtemplate'"+template;
                    if(jquery){
                        target=jQuery(jquery,template_dest);
                        if(!target.length&&window.console){
                            console.debug('Can\'tfind"'+jquery+'"whenextendingtemplate'+template);
                        }
                    }else{
                        this.tools.exception(error_msg+"Noexpressiongiven");
                    }
                    error_msg+="'(expression='"+jquery+"'):";
                    if(operation){
                        varallowed_operations="append,prepend,before,after,replace,inner,attributes".split(',');
                        if(this.tools.arrayIndexOf(allowed_operations,operation)==-1){
                            this.tools.exception(error_msg+"Invalidoperation:'"+operation+"'");
                        }
                        operation={'replace':'replaceWith','inner':'html'}[operation]||operation;
                        if(operation==='attributes'){
                            jQuery('attribute',child).each(function(){
                                varattrib=jQuery(this);
                                target.attr(attrib.attr('name'),attrib.text()||attrib.attr('value'));
                            });
                        }else{
                            target[operation](child.cloneNode(true).childNodes);
                        }
                    }else{
                        try{
                            varf=newFunction(['$','document'],this.tools.xml_node_to_string(child,true));
                        }catch(error){
                            returnthis.tools.exception("Parse"+error_msg+error);
                        }
                        try{
                            f.apply(target,[jQuery,template_dest.ownerDocument]);
                        }catch(error){
                            returnthis.tools.exception("Runtime"+error_msg+error);
                        }
                    }
                }
            }
        }
    });
    returnEngine;
})();

QWeb2.Element=(function(){
    functionElement(engine,node){
        this.engine=engine;
        this.node=node;
        this.tag=node.tagName;
        this.actions={tag:this.tag};
        this.actions_done=[];
        this.attributes={};
        this.children=[];
        this._top=[];
        this._bottom=[];
        this._indent=1;
        this.process_children=true;
        this.is_void_element=~QWeb2.tools.arrayIndexOf(this.engine.void_elements,this.tag);
        varchilds=this.node.childNodes;
        if(childs){
            for(vari=0,ilen=childs.length;i<ilen;i++){
                this.children.push(newQWeb2.Element(this.engine,childs[i]));
            }
        }
        varattrs=this.node.attributes;
        if(attrs){
            for(varj=0,jlen=attrs.length;j<jlen;j++){
                varattr=attrs[j];
                varname=attr.name;
                varm=name.match(newRegExp("^"+this.engine.prefix+"-(.+)"));
                if(m){
                    name=m[1];
                    if(name==='name'){
                        continue;
                    }
                    if(name.match(/^attf?(-.*)?/)){
                        this.attributes[m[0]]=attr.value;
                    }else{
                        this.actions[name]=attr.value;
                    }
                }else{
                    this.attributes[name]=attr.value;
                }
            }
        }
        if(this.engine.preprocess_node){
            this.engine.preprocess_node.call(this);
        }
    }

    QWeb2.tools.extend(Element.prototype,{
        compile:function(){
            varr=[],
                instring=false,
                lines=this._compile().split('\n');
            for(vari=0,ilen=lines.length;i<ilen;i++){
                varm,line=lines[i];
                if(m=line.match(/^(\s*)\/\/@string=(.*)/)){
                    if(instring){
                        if(this.engine.debug){
                            //Splitstringlinesinindentedr.pusharguments
                            r.push((m[2].indexOf("\\n")!=-1?"',\n\t"+m[1]+"'":'')+m[2]);
                        }else{
                            r.push(m[2]);
                        }
                    }else{
                        r.push(m[1]+"r.push('"+m[2]);
                        instring=true;
                    }
                }else{
                    if(instring){
                        r.push("');\n");
                    }
                    instring=false;
                    r.push(line+'\n');
                }
            }
            returnr.join('');
        },
        _compile:function(){
            switch(this.node.nodeType){
                case3:
                case4:
                    this.top_string(this.node.data);
                break;
                case1:
                    this.compile_element();
            }
            varr=this._top.join('');
            if(this.process_children){
                for(vari=0,ilen=this.children.length;i<ilen;i++){
                    varchild=this.children[i];
                    child._indent=this._indent;
                    r+=child._compile();
                }
            }
            r+=this._bottom.join('');
            returnr;
        },
        format_expression:function(e){
            /*Naiveformatexpressionbuilder.Replacereservedwordsandvariablestodict[variable]
             *Doesnothandlespacesbeforedotyet,andcausesproblemsforanonymousfunctions.Uset-js=""forthat*/
             if(QWeb2.expressions_cache[e]){
              returnQWeb2.expressions_cache[e];
            }
            varchars=e.split(''),
                instring='',
                invar='',
                invar_pos=0,
                r='';
            chars.push('');
            for(vari=0,ilen=chars.length;i<ilen;i++){
                varc=chars[i];
                if(instring.length){
                    if(c===instring&&chars[i-1]!=="\\"){
                        instring='';
                    }
                }elseif(c==='"'||c==="'"){
                    instring=c;
                }elseif(c.match(/[a-zA-Z_\$]/)&&!invar.length){
                    invar=c;
                    invar_pos=i;
                    continue;
                }elseif(c.match(/\W/)&&invar.length){
                    //TODO:Shouldcheckforpossiblespacesbeforedot
                    if(chars[invar_pos-1]!=='.'&&QWeb2.tools.arrayIndexOf(this.engine.reserved_words,invar)<0){
                        invar=this.engine.word_replacement[invar]||("dict['"+invar+"']");
                    }
                    r+=invar;
                    invar='';
                }elseif(invar.length){
                    invar+=c;
                    continue;
                }
                r+=c;
            }
            r=r.slice(0,-1);
            QWeb2.expressions_cache[e]=r;
            returnr;
        },
        format_str:function(e){
            if(e=='0'){
                return'dict[0]';
            }
            returnthis.format_expression(e);
        },
        string_interpolation:function(s){
            var_this=this;
            if(!s){
              return"''";
            }
            functionappend_literal(s){
                s&&r.push(_this.engine.tools.js_escape(s));
            }

            varre=/(?:#{(.+?)}|{{(.+?)}})/g,start=0,r=[],m;
            while(m=re.exec(s)){
                //extractliteralstringbetweenpreviousandcurrentmatch
                append_literal(s.slice(start,re.lastIndex-m[0].length));
                //extractmatchedexpression
                r.push('('+this.format_str(m[2]||m[1])+')');
                //updatepositionofnewmatching
                start=re.lastIndex;
            }
            //remainingtextafterlastexpression
            append_literal(s.slice(start));

            returnr.join('+');
        },
        indent:function(){
            returnthis._indent++;
        },
        dedent:function(){
            if(this._indent!==0){
                returnthis._indent--;
            }
        },
        get_indent:function(){
            returnnewArray(this._indent+1).join("\t");
        },
        top:function(s){
            returnthis._top.push(this.get_indent()+s+'\n');
        },
        top_string:function(s){
            returnthis._top.push(this.get_indent()+"//@string="+this.engine.tools.js_escape(s,true)+'\n');
        },
        bottom:function(s){
            returnthis._bottom.unshift(this.get_indent()+s+'\n');
        },
        bottom_string:function(s){
            returnthis._bottom.unshift(this.get_indent()+"//@string="+this.engine.tools.js_escape(s,true)+'\n');
        },
        compile_element:function(){
            for(vari=0,ilen=this.engine.actions_precedence.length;i<ilen;i++){
                vara=this.engine.actions_precedence[i];
                if(ainthis.actions){
                    varvalue=this.actions[a];
                    varkey='compile_action_'+a;
                    if(this[key]){
                        this[key](value);
                    }elseif(this.engine[key]){
                        this.engine[key].call(this,value);
                    }else{
                        this.engine.tools.exception("Nohandlermethodforaction'"+a+"'");
                    }
                }
            }
        },
        compile_action_tag:function(){
            if(this.tag.toLowerCase()!==this.engine.prefix){
                this.top_string("<"+this.tag);
                for(varainthis.attributes){
                    varv=this.attributes[a];
                    vard=a.split('-');
                    if(d[0]===this.engine.prefix&&d.length>1){
                        if(d.length===2){
                            this.top("r.push(context.engine.tools.gen_attribute("+(this.format_expression(v))+"));");
                        }else{
                            this.top("r.push(context.engine.tools.gen_attribute(['"+d.slice(2).join('-')+"',("+
                                (d[1]==='att'?this.format_expression(v):this.string_interpolation(v))+")]));");
                        }
                    }else{
                        this.top_string(this.engine.tools.gen_attribute([a,v]));
                    }
                }

                if(this.actions.opentag==='true'||(!this.children.length&&this.is_void_element)){
                    //Wedonotenforceemptycontentonvoidelements
                    //becauseQWebrenderingisnotnecessarilyhtml.
                    this.top_string("/>");
                }else{
                    this.top_string(">");
                    this.bottom_string("</"+this.tag+">");
                }
            }
        },
        compile_action_if:function(value){
            this.top("if("+(this.format_expression(value))+"){");
            this.bottom("}");
            this.indent();
        },
        compile_action_elif:function(value){
            this.top("elseif("+(this.format_expression(value))+"){");
            this.bottom("}");
            this.indent();
        },
        compile_action_else:function(value){
            this.top("else{");
            this.bottom("}");
            this.indent();
        },
        compile_action_foreach:function(value){
            varas=this.actions['as']||value.replace(/[^a-zA-Z0-9]/g,'_');
            //TODO:exceptionift-asnotvalid
            this.top("context.engine.tools.foreach(context,"+(this.format_expression(value))+","+(this.engine.tools.js_escape(as))+",dict,function(context,dict){");
            this.bottom("});");
            this.indent();
        },
        compile_action_call:function(value){
            if(this.children.length===0){
                returnthis.top("r.push(context.engine.tools.call(context,"+(this.string_interpolation(value))+",dict));");
            }else{
                this.top("r.push(context.engine.tools.call(context,"+(this.string_interpolation(value))+",dict,null,function(context,dict){");
                this.bottom("}));");
                this.indent();
                this.top("varr=[];");
                returnthis.bottom("returnr.join('');");
            }
        },
        compile_action_set:function(value){
            varvariable=this.format_expression(value);
            if(this.actions['value']){
                if(this.children.length){
                    this.engine.tools.warning("@setwith@valueplusnodechidrenfound.Childrenareignored.");
                }
                this.top(variable+"=("+(this.format_expression(this.actions['value']))+");");
                this.process_children=false;
            }else{
                if(this.children.length===0){
                    this.top(variable+"='';");
                }elseif(this.children.length===1&&this.children[0].node.nodeType===3){
                    this.top(variable+"="+(this.engine.tools.js_escape(this.children[0].node.data))+";");
                    this.process_children=false;
                }else{
                    this.top(variable+"=(function(dict){");
                    this.bottom("})(dict);");
                    this.indent();
                    this.top("varr=[];");
                    this.bottom("returnr.join('');");
                }
            }
        },
        compile_action_esc:function(value){
            this.top("vart="+this.format_str(value)+";");
            this.top("if(t!=null)r.push(context.engine.tools.html_escape(t));");
            this.top("else{");
            this.bottom("}");
            this.indent();
        },
        compile_action_raw:function(value){
            this.top("vart="+this.format_str(value)+";");
            this.top("if(t!=null)r.push(t);");
            this.top("else{");
            this.bottom("}");
            this.indent();
        },
        compile_action_js:function(value){
            this.top("(function("+value+"){");
            this.bottom("})(dict);");
            this.indent();
            varlines=this.engine.tools.xml_node_to_string(this.node,true).split(/\r?\n/);
            for(vari=0,ilen=lines.length;i<ilen;i++){
                this.top(lines[i]);
            }
            this.process_children=false;
        },
        compile_action_debug:function(value){
            this.top("debugger;");
        },
        compile_action_log:function(value){
            this.top("console.log("+this.format_expression(value)+");");
        }
    });
    returnElement;
})();
