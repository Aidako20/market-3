/**
 *@license
 *Lodash<https://lodash.com/>
 *CopyrightJSFoundationandothercontributors<https://js.foundation/>
 *ReleasedunderMITlicense<https://lodash.com/license>
 *BasedonUnderscore.js1.8.3<http://underscorejs.org/LICENSE>
 *CopyrightJeremyAshkenas,DocumentCloudandInvestigativeReporters&Editors
 */
;(function(){

  /**Usedasasafereferencefor`undefined`inpre-ES5environments.*/
  varundefined;

  /**Usedasthesemanticversionnumber.*/
  varVERSION='4.17.4';

  /**Usedasthesizetoenablelargearrayoptimizations.*/
  varLARGE_ARRAY_SIZE=200;

  /**Errormessageconstants.*/
  varCORE_ERROR_TEXT='Unsupportedcore-jsuse.Tryhttps://npms.io/search?q=ponyfill.',
      FUNC_ERROR_TEXT='Expectedafunction';

  /**Usedtostand-infor`undefined`hashvalues.*/
  varHASH_UNDEFINED='__lodash_hash_undefined__';

  /**Usedasthemaximummemoizecachesize.*/
  varMAX_MEMOIZE_SIZE=500;

  /**Usedastheinternalargumentplaceholder.*/
  varPLACEHOLDER='__lodash_placeholder__';

  /**Usedtocomposebitmasksforcloning.*/
  varCLONE_DEEP_FLAG=1,
      CLONE_FLAT_FLAG=2,
      CLONE_SYMBOLS_FLAG=4;

  /**Usedtocomposebitmasksforvaluecomparisons.*/
  varCOMPARE_PARTIAL_FLAG=1,
      COMPARE_UNORDERED_FLAG=2;

  /**Usedtocomposebitmasksforfunctionmetadata.*/
  varWRAP_BIND_FLAG=1,
      WRAP_BIND_KEY_FLAG=2,
      WRAP_CURRY_BOUND_FLAG=4,
      WRAP_CURRY_FLAG=8,
      WRAP_CURRY_RIGHT_FLAG=16,
      WRAP_PARTIAL_FLAG=32,
      WRAP_PARTIAL_RIGHT_FLAG=64,
      WRAP_ARY_FLAG=128,
      WRAP_REARG_FLAG=256,
      WRAP_FLIP_FLAG=512;

  /**Usedasdefaultoptionsfor`_.truncate`.*/
  varDEFAULT_TRUNC_LENGTH=30,
      DEFAULT_TRUNC_OMISSION='...';

  /**Usedtodetecthotfunctionsbynumberofcallswithinaspanofmilliseconds.*/
  varHOT_COUNT=800,
      HOT_SPAN=16;

  /**Usedtoindicatethetypeoflazyiteratees.*/
  varLAZY_FILTER_FLAG=1,
      LAZY_MAP_FLAG=2,
      LAZY_WHILE_FLAG=3;

  /**Usedasreferencesforvarious`Number`constants.*/
  varINFINITY=1/0,
      MAX_SAFE_INTEGER=9007199254740991,
      MAX_INTEGER=1.7976931348623157e+308,
      NAN=0/0;

  /**Usedasreferencesforthemaximumlengthandindexofanarray.*/
  varMAX_ARRAY_LENGTH=4294967295,
      MAX_ARRAY_INDEX=MAX_ARRAY_LENGTH-1,
      HALF_MAX_ARRAY_LENGTH=MAX_ARRAY_LENGTH>>>1;

  /**Usedtoassociatewrapmethodswiththeirbitflags.*/
  varwrapFlags=[
    ['ary',WRAP_ARY_FLAG],
    ['bind',WRAP_BIND_FLAG],
    ['bindKey',WRAP_BIND_KEY_FLAG],
    ['curry',WRAP_CURRY_FLAG],
    ['curryRight',WRAP_CURRY_RIGHT_FLAG],
    ['flip',WRAP_FLIP_FLAG],
    ['partial',WRAP_PARTIAL_FLAG],
    ['partialRight',WRAP_PARTIAL_RIGHT_FLAG],
    ['rearg',WRAP_REARG_FLAG]
  ];

  /**`Object#toString`resultreferences.*/
  varargsTag='[objectArguments]',
      arrayTag='[objectArray]',
      asyncTag='[objectAsyncFunction]',
      boolTag='[objectBoolean]',
      dateTag='[objectDate]',
      domExcTag='[objectDOMException]',
      errorTag='[objectError]',
      funcTag='[objectFunction]',
      genTag='[objectGeneratorFunction]',
      mapTag='[objectMap]',
      numberTag='[objectNumber]',
      nullTag='[objectNull]',
      objectTag='[objectObject]',
      promiseTag='[objectPromise]',
      proxyTag='[objectProxy]',
      regexpTag='[objectRegExp]',
      setTag='[objectSet]',
      stringTag='[objectString]',
      symbolTag='[objectSymbol]',
      undefinedTag='[objectUndefined]',
      weakMapTag='[objectWeakMap]',
      weakSetTag='[objectWeakSet]';

  vararrayBufferTag='[objectArrayBuffer]',
      dataViewTag='[objectDataView]',
      float32Tag='[objectFloat32Array]',
      float64Tag='[objectFloat64Array]',
      int8Tag='[objectInt8Array]',
      int16Tag='[objectInt16Array]',
      int32Tag='[objectInt32Array]',
      uint8Tag='[objectUint8Array]',
      uint8ClampedTag='[objectUint8ClampedArray]',
      uint16Tag='[objectUint16Array]',
      uint32Tag='[objectUint32Array]';

  /**Usedtomatchemptystringliteralsincompiledtemplatesource.*/
  varreEmptyStringLeading=/\b__p\+='';/g,
      reEmptyStringMiddle=/\b(__p\+=)''\+/g,
      reEmptyStringTrailing=/(__e\(.*?\)|\b__t\))\+\n'';/g;

  /**UsedtomatchHTMLentitiesandHTMLcharacters.*/
  varreEscapedHtml=/&(?:amp|lt|gt|quot|#39);/g,
      reUnescapedHtml=/[&<>"']/g,
      reHasEscapedHtml=RegExp(reEscapedHtml.source),
      reHasUnescapedHtml=RegExp(reUnescapedHtml.source);

  /**Usedtomatchtemplatedelimiters.*/
  varreEscape=/<%-([\s\S]+?)%>/g,
      reEvaluate=/<%([\s\S]+?)%>/g,
      reInterpolate=/<%=([\s\S]+?)%>/g;

  /**Usedtomatchpropertynameswithinpropertypaths.*/
  varreIsDeepProp=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp=/^\w*$/,
      reLeadingDot=/^\./,
      rePropName=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

  /**
   *Usedtomatch`RegExp`
   *[syntaxcharacters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */
  varreRegExpChar=/[\\^$.*+?()[\]{}|]/g,
      reHasRegExpChar=RegExp(reRegExpChar.source);

  /**Usedtomatchleadingandtrailingwhitespace.*/
  varreTrim=/^\s+|\s+$/g,
      reTrimStart=/^\s+/,
      reTrimEnd=/\s+$/;

  /**Usedtomatchwrapdetailcomments.*/
  varreWrapComment=/\{(?:\n\/\*\[wrappedwith.+\]\*\/)?\n?/,
      reWrapDetails=/\{\n\/\*\[wrappedwith(.+)\]\*/,
      reSplitDetails=/,?&/;

  /**Usedtomatchwordscomposedofalphanumericcharacters.*/
  varreAsciiWord=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

  /**Usedtomatchbackslashesinpropertypaths.*/
  varreEscapeChar=/\\(\\)?/g;

  /**
   *Usedtomatch
   *[EStemplatedelimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
   */
  varreEsTemplate=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  /**Usedtomatch`RegExp`flagsfromtheircoercedstringvalues.*/
  varreFlags=/\w*$/;

  /**Usedtodetectbadsignedhexadecimalstringvalues.*/
  varreIsBadHex=/^[-+]0x[0-9a-f]+$/i;

  /**Usedtodetectbinarystringvalues.*/
  varreIsBinary=/^0b[01]+$/i;

  /**Usedtodetecthostconstructors(Safari).*/
  varreIsHostCtor=/^\[object.+?Constructor\]$/;

  /**Usedtodetectoctalstringvalues.*/
  varreIsOctal=/^0o[0-7]+$/i;

  /**Usedtodetectunsignedintegervalues.*/
  varreIsUint=/^(?:0|[1-9]\d*)$/;

  /**UsedtomatchLatinUnicodeletters(excludingmathematicaloperators).*/
  varreLatin=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

  /**Usedtoensurecapturingorderoftemplatedelimiters.*/
  varreNoMatch=/($^)/;

  /**Usedtomatchunescapedcharactersincompiledstringliterals.*/
  varreUnescapedString=/['\n\r\u2028\u2029\\]/g;

  /**Usedtocomposeunicodecharacterclasses.*/
  varrsAstralRange='\\ud800-\\udfff',
      rsComboMarksRange='\\u0300-\\u036f',
      reComboHalfMarksRange='\\ufe20-\\ufe2f',
      rsComboSymbolsRange='\\u20d0-\\u20ff',
      rsComboRange=rsComboMarksRange+reComboHalfMarksRange+rsComboSymbolsRange,
      rsDingbatRange='\\u2700-\\u27bf',
      rsLowerRange='a-z\\xdf-\\xf6\\xf8-\\xff',
      rsMathOpRange='\\xac\\xb1\\xd7\\xf7',
      rsNonCharRange='\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
      rsPunctuationRange='\\u2000-\\u206f',
      rsSpaceRange='\\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
      rsUpperRange='A-Z\\xc0-\\xd6\\xd8-\\xde',
      rsVarRange='\\ufe0e\\ufe0f',
      rsBreakRange=rsMathOpRange+rsNonCharRange+rsPunctuationRange+rsSpaceRange;

  /**Usedtocomposeunicodecapturegroups.*/
  varrsApos="['\u2019]",
      rsAstral='['+rsAstralRange+']',
      rsBreak='['+rsBreakRange+']',
      rsCombo='['+rsComboRange+']',
      rsDigits='\\d+',
      rsDingbat='['+rsDingbatRange+']',
      rsLower='['+rsLowerRange+']',
      rsMisc='[^'+rsAstralRange+rsBreakRange+rsDigits+rsDingbatRange+rsLowerRange+rsUpperRange+']',
      rsFitz='\\ud83c[\\udffb-\\udfff]',
      rsModifier='(?:'+rsCombo+'|'+rsFitz+')',
      rsNonAstral='[^'+rsAstralRange+']',
      rsRegional='(?:\\ud83c[\\udde6-\\uddff]){2}',
      rsSurrPair='[\\ud800-\\udbff][\\udc00-\\udfff]',
      rsUpper='['+rsUpperRange+']',
      rsZWJ='\\u200d';

  /**Usedtocomposeunicoderegexes.*/
  varrsMiscLower='(?:'+rsLower+'|'+rsMisc+')',
      rsMiscUpper='(?:'+rsUpper+'|'+rsMisc+')',
      rsOptContrLower='(?:'+rsApos+'(?:d|ll|m|re|s|t|ve))?',
      rsOptContrUpper='(?:'+rsApos+'(?:D|LL|M|RE|S|T|VE))?',
      reOptMod=rsModifier+'?',
      rsOptVar='['+rsVarRange+']?',
      rsOptJoin='(?:'+rsZWJ+'(?:'+[rsNonAstral,rsRegional,rsSurrPair].join('|')+')'+rsOptVar+reOptMod+')*',
      rsOrdLower='\\d*(?:(?:1st|2nd|3rd|(?![123])\\dth)\\b)',
      rsOrdUpper='\\d*(?:(?:1ST|2ND|3RD|(?![123])\\dTH)\\b)',
      rsSeq=rsOptVar+reOptMod+rsOptJoin,
      rsEmoji='(?:'+[rsDingbat,rsRegional,rsSurrPair].join('|')+')'+rsSeq,
      rsSymbol='(?:'+[rsNonAstral+rsCombo+'?',rsCombo,rsRegional,rsSurrPair,rsAstral].join('|')+')';

  /**Usedtomatchapostrophes.*/
  varreApos=RegExp(rsApos,'g');

  /**
   *Usedtomatch[combiningdiacriticalmarks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks)and
   *[combiningdiacriticalmarksforsymbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
   */
  varreComboMark=RegExp(rsCombo,'g');

  /**Usedtomatch[stringsymbols](https://mathiasbynens.be/notes/javascript-unicode).*/
  varreUnicode=RegExp(rsFitz+'(?='+rsFitz+')|'+rsSymbol+rsSeq,'g');

  /**Usedtomatchcomplexorcompoundwords.*/
  varreUnicodeWord=RegExp([
    rsUpper+'?'+rsLower+'+'+rsOptContrLower+'(?='+[rsBreak,rsUpper,'$'].join('|')+')',
    rsMiscUpper+'+'+rsOptContrUpper+'(?='+[rsBreak,rsUpper+rsMiscLower,'$'].join('|')+')',
    rsUpper+'?'+rsMiscLower+'+'+rsOptContrLower,
    rsUpper+'+'+rsOptContrUpper,
    rsOrdUpper,
    rsOrdLower,
    rsDigits,
    rsEmoji
  ].join('|'),'g');

  /**Usedtodetectstringswith[zero-widthjoinersorcodepointsfromtheastralplanes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/).*/
  varreHasUnicode=RegExp('['+rsZWJ+rsAstralRange +rsComboRange+rsVarRange+']');

  /**Usedtodetectstringsthatneedamorerobustregexptomatchwords.*/
  varreHasUnicodeWord=/[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9]/;

  /**Usedtoassigndefault`context`objectproperties.*/
  varcontextProps=[
    'Array','Buffer','DataView','Date','Error','Float32Array','Float64Array',
    'Function','Int8Array','Int16Array','Int32Array','Map','Math','Object',
    'Promise','RegExp','Set','String','Symbol','TypeError','Uint8Array',
    'Uint8ClampedArray','Uint16Array','Uint32Array','WeakMap',
    '_','clearTimeout','isFinite','parseInt','setTimeout'
  ];

  /**UsedtomaketemplatesourceURLseasiertoidentify.*/
  vartemplateCounter=-1;

  /**Usedtoidentify`toStringTag`valuesoftypedarrays.*/
  vartypedArrayTags={};
  typedArrayTags[float32Tag]=typedArrayTags[float64Tag]=
  typedArrayTags[int8Tag]=typedArrayTags[int16Tag]=
  typedArrayTags[int32Tag]=typedArrayTags[uint8Tag]=
  typedArrayTags[uint8ClampedTag]=typedArrayTags[uint16Tag]=
  typedArrayTags[uint32Tag]=true;
  typedArrayTags[argsTag]=typedArrayTags[arrayTag]=
  typedArrayTags[arrayBufferTag]=typedArrayTags[boolTag]=
  typedArrayTags[dataViewTag]=typedArrayTags[dateTag]=
  typedArrayTags[errorTag]=typedArrayTags[funcTag]=
  typedArrayTags[mapTag]=typedArrayTags[numberTag]=
  typedArrayTags[objectTag]=typedArrayTags[regexpTag]=
  typedArrayTags[setTag]=typedArrayTags[stringTag]=
  typedArrayTags[weakMapTag]=false;

  /**Usedtoidentify`toStringTag`valuessupportedby`_.clone`.*/
  varcloneableTags={};
  cloneableTags[argsTag]=cloneableTags[arrayTag]=
  cloneableTags[arrayBufferTag]=cloneableTags[dataViewTag]=
  cloneableTags[boolTag]=cloneableTags[dateTag]=
  cloneableTags[float32Tag]=cloneableTags[float64Tag]=
  cloneableTags[int8Tag]=cloneableTags[int16Tag]=
  cloneableTags[int32Tag]=cloneableTags[mapTag]=
  cloneableTags[numberTag]=cloneableTags[objectTag]=
  cloneableTags[regexpTag]=cloneableTags[setTag]=
  cloneableTags[stringTag]=cloneableTags[symbolTag]=
  cloneableTags[uint8Tag]=cloneableTags[uint8ClampedTag]=
  cloneableTags[uint16Tag]=cloneableTags[uint32Tag]=true;
  cloneableTags[errorTag]=cloneableTags[funcTag]=
  cloneableTags[weakMapTag]=false;

  /**UsedtomapLatinUnicodeletterstobasicLatinletters.*/
  vardeburredLetters={
    //Latin-1Supplementblock.
    '\xc0':'A', '\xc1':'A','\xc2':'A','\xc3':'A','\xc4':'A','\xc5':'A',
    '\xe0':'a', '\xe1':'a','\xe2':'a','\xe3':'a','\xe4':'a','\xe5':'a',
    '\xc7':'C', '\xe7':'c',
    '\xd0':'D', '\xf0':'d',
    '\xc8':'E', '\xc9':'E','\xca':'E','\xcb':'E',
    '\xe8':'e', '\xe9':'e','\xea':'e','\xeb':'e',
    '\xcc':'I', '\xcd':'I','\xce':'I','\xcf':'I',
    '\xec':'i', '\xed':'i','\xee':'i','\xef':'i',
    '\xd1':'N', '\xf1':'n',
    '\xd2':'O', '\xd3':'O','\xd4':'O','\xd5':'O','\xd6':'O','\xd8':'O',
    '\xf2':'o', '\xf3':'o','\xf4':'o','\xf5':'o','\xf6':'o','\xf8':'o',
    '\xd9':'U', '\xda':'U','\xdb':'U','\xdc':'U',
    '\xf9':'u', '\xfa':'u','\xfb':'u','\xfc':'u',
    '\xdd':'Y', '\xfd':'y','\xff':'y',
    '\xc6':'Ae','\xe6':'ae',
    '\xde':'Th','\xfe':'th',
    '\xdf':'ss',
    //LatinExtended-Ablock.
    '\u0100':'A', '\u0102':'A','\u0104':'A',
    '\u0101':'a', '\u0103':'a','\u0105':'a',
    '\u0106':'C', '\u0108':'C','\u010a':'C','\u010c':'C',
    '\u0107':'c', '\u0109':'c','\u010b':'c','\u010d':'c',
    '\u010e':'D', '\u0110':'D','\u010f':'d','\u0111':'d',
    '\u0112':'E', '\u0114':'E','\u0116':'E','\u0118':'E','\u011a':'E',
    '\u0113':'e', '\u0115':'e','\u0117':'e','\u0119':'e','\u011b':'e',
    '\u011c':'G', '\u011e':'G','\u0120':'G','\u0122':'G',
    '\u011d':'g', '\u011f':'g','\u0121':'g','\u0123':'g',
    '\u0124':'H', '\u0126':'H','\u0125':'h','\u0127':'h',
    '\u0128':'I', '\u012a':'I','\u012c':'I','\u012e':'I','\u0130':'I',
    '\u0129':'i', '\u012b':'i','\u012d':'i','\u012f':'i','\u0131':'i',
    '\u0134':'J', '\u0135':'j',
    '\u0136':'K', '\u0137':'k','\u0138':'k',
    '\u0139':'L', '\u013b':'L','\u013d':'L','\u013f':'L','\u0141':'L',
    '\u013a':'l', '\u013c':'l','\u013e':'l','\u0140':'l','\u0142':'l',
    '\u0143':'N', '\u0145':'N','\u0147':'N','\u014a':'N',
    '\u0144':'n', '\u0146':'n','\u0148':'n','\u014b':'n',
    '\u014c':'O', '\u014e':'O','\u0150':'O',
    '\u014d':'o', '\u014f':'o','\u0151':'o',
    '\u0154':'R', '\u0156':'R','\u0158':'R',
    '\u0155':'r', '\u0157':'r','\u0159':'r',
    '\u015a':'S', '\u015c':'S','\u015e':'S','\u0160':'S',
    '\u015b':'s', '\u015d':'s','\u015f':'s','\u0161':'s',
    '\u0162':'T', '\u0164':'T','\u0166':'T',
    '\u0163':'t', '\u0165':'t','\u0167':'t',
    '\u0168':'U', '\u016a':'U','\u016c':'U','\u016e':'U','\u0170':'U','\u0172':'U',
    '\u0169':'u', '\u016b':'u','\u016d':'u','\u016f':'u','\u0171':'u','\u0173':'u',
    '\u0174':'W', '\u0175':'w',
    '\u0176':'Y', '\u0177':'y','\u0178':'Y',
    '\u0179':'Z', '\u017b':'Z','\u017d':'Z',
    '\u017a':'z', '\u017c':'z','\u017e':'z',
    '\u0132':'IJ','\u0133':'ij',
    '\u0152':'Oe','\u0153':'oe',
    '\u0149':"'n",'\u017f':'s'
  };

  /**UsedtomapcharacterstoHTMLentities.*/
  varhtmlEscapes={
    '&':'&amp;',
    '<':'&lt;',
    '>':'&gt;',
    '"':'&quot;',
    "'":'&#39;'
  };

  /**UsedtomapHTMLentitiestocharacters.*/
  varhtmlUnescapes={
    '&amp;':'&',
    '&lt;':'<',
    '&gt;':'>',
    '&quot;':'"',
    '&#39;':"'"
  };

  /**Usedtoescapecharactersforinclusionincompiledstringliterals.*/
  varstringEscapes={
    '\\':'\\',
    "'":"'",
    '\n':'n',
    '\r':'r',
    '\u2028':'u2028',
    '\u2029':'u2029'
  };

  /**Built-inmethodreferenceswithoutadependencyon`root`.*/
  varfreeParseFloat=parseFloat,
      freeParseInt=parseInt;

  /**Detectfreevariable`global`fromNode.js.*/
  varfreeGlobal=typeofglobal=='object'&&global&&global.Object===Object&&global;

  /**Detectfreevariable`self`.*/
  varfreeSelf=typeofself=='object'&&self&&self.Object===Object&&self;

  /**Usedasareferencetotheglobalobject.*/
  varroot=freeGlobal||freeSelf||Function('returnthis')();

  /**Detectfreevariable`exports`.*/
  varfreeExports=typeofexports=='object'&&exports&&!exports.nodeType&&exports;

  /**Detectfreevariable`module`.*/
  varfreeModule=freeExports&&typeofmodule=='object'&&module&&!module.nodeType&&module;

  /**DetectthepopularCommonJSextension`module.exports`.*/
  varmoduleExports=freeModule&&freeModule.exports===freeExports;

  /**Detectfreevariable`process`fromNode.js.*/
  varfreeProcess=moduleExports&&freeGlobal.process;

  /**UsedtoaccessfasterNode.jshelpers.*/
  varnodeUtil=(function(){
    try{
      returnfreeProcess&&freeProcess.binding&&freeProcess.binding('util');
    }catch(e){}
  }());

  /*Node.jshelperreferences.*/
  varnodeIsArrayBuffer=nodeUtil&&nodeUtil.isArrayBuffer,
      nodeIsDate=nodeUtil&&nodeUtil.isDate,
      nodeIsMap=nodeUtil&&nodeUtil.isMap,
      nodeIsRegExp=nodeUtil&&nodeUtil.isRegExp,
      nodeIsSet=nodeUtil&&nodeUtil.isSet,
      nodeIsTypedArray=nodeUtil&&nodeUtil.isTypedArray;

  /*--------------------------------------------------------------------------*/

  /**
   *Addsthekey-value`pair`to`map`.
   *
   *@private
   *@param{Object}mapThemaptomodify.
   *@param{Array}pairThekey-valuepairtoadd.
   *@returns{Object}Returns`map`.
   */
  functionaddMapEntry(map,pair){
    //Don'treturn`map.set`becauseit'snotchainableinIE11.
    map.set(pair[0],pair[1]);
    returnmap;
  }

  /**
   *Adds`value`to`set`.
   *
   *@private
   *@param{Object}setThesettomodify.
   *@param{*}valueThevaluetoadd.
   *@returns{Object}Returns`set`.
   */
  functionaddSetEntry(set,value){
    //Don'treturn`set.add`becauseit'snotchainableinIE11.
    set.add(value);
    returnset;
  }

  /**
   *Afasteralternativeto`Function#apply`,thisfunctioninvokes`func`
   *withthe`this`bindingof`thisArg`andtheargumentsof`args`.
   *
   *@private
   *@param{Function}funcThefunctiontoinvoke.
   *@param{*}thisArgThe`this`bindingof`func`.
   *@param{Array}argsTheargumentstoinvoke`func`with.
   *@returns{*}Returnstheresultof`func`.
   */
  functionapply(func,thisArg,args){
    switch(args.length){
      case0:returnfunc.call(thisArg);
      case1:returnfunc.call(thisArg,args[0]);
      case2:returnfunc.call(thisArg,args[0],args[1]);
      case3:returnfunc.call(thisArg,args[0],args[1],args[2]);
    }
    returnfunc.apply(thisArg,args);
  }

  /**
   *Aspecializedversionof`baseAggregator`forarrays.
   *
   *@private
   *@param{Array}[array]Thearraytoiterateover.
   *@param{Function}setterThefunctiontoset`accumulator`values.
   *@param{Function}iterateeTheiterateetotransformkeys.
   *@param{Object}accumulatorTheinitialaggregatedobject.
   *@returns{Function}Returns`accumulator`.
   */
  functionarrayAggregator(array,setter,iteratee,accumulator){
    varindex=-1,
        length=array==null?0:array.length;

    while(++index<length){
      varvalue=array[index];
      setter(accumulator,value,iteratee(value),array);
    }
    returnaccumulator;
  }

  /**
   *Aspecializedversionof`_.forEach`forarrayswithoutsupportfor
   *iterateeshorthands.
   *
   *@private
   *@param{Array}[array]Thearraytoiterateover.
   *@param{Function}iterateeThefunctioninvokedperiteration.
   *@returns{Array}Returns`array`.
   */
  functionarrayEach(array,iteratee){
    varindex=-1,
        length=array==null?0:array.length;

    while(++index<length){
      if(iteratee(array[index],index,array)===false){
        break;
      }
    }
    returnarray;
  }

  /**
   *Aspecializedversionof`_.forEachRight`forarrayswithoutsupportfor
   *iterateeshorthands.
   *
   *@private
   *@param{Array}[array]Thearraytoiterateover.
   *@param{Function}iterateeThefunctioninvokedperiteration.
   *@returns{Array}Returns`array`.
   */
  functionarrayEachRight(array,iteratee){
    varlength=array==null?0:array.length;

    while(length--){
      if(iteratee(array[length],length,array)===false){
        break;
      }
    }
    returnarray;
  }

  /**
   *Aspecializedversionof`_.every`forarrayswithoutsupportfor
   *iterateeshorthands.
   *
   *@private
   *@param{Array}[array]Thearraytoiterateover.
   *@param{Function}predicateThefunctioninvokedperiteration.
   *@returns{boolean}Returns`true`ifallelementspassthepredicatecheck,
   * else`false`.
   */
  functionarrayEvery(array,predicate){
    varindex=-1,
        length=array==null?0:array.length;

    while(++index<length){
      if(!predicate(array[index],index,array)){
        returnfalse;
      }
    }
    returntrue;
  }

  /**
   *Aspecializedversionof`_.filter`forarrayswithoutsupportfor
   *iterateeshorthands.
   *
   *@private
   *@param{Array}[array]Thearraytoiterateover.
   *@param{Function}predicateThefunctioninvokedperiteration.
   *@returns{Array}Returnsthenewfilteredarray.
   */
  functionarrayFilter(array,predicate){
    varindex=-1,
        length=array==null?0:array.length,
        resIndex=0,
        result=[];

    while(++index<length){
      varvalue=array[index];
      if(predicate(value,index,array)){
        result[resIndex++]=value;
      }
    }
    returnresult;
  }

  /**
   *Aspecializedversionof`_.includes`forarrayswithoutsupportfor
   *specifyinganindextosearchfrom.
   *
   *@private
   *@param{Array}[array]Thearraytoinspect.
   *@param{*}targetThevaluetosearchfor.
   *@returns{boolean}Returns`true`if`target`isfound,else`false`.
   */
  functionarrayIncludes(array,value){
    varlength=array==null?0:array.length;
    return!!length&&baseIndexOf(array,value,0)>-1;
  }

  /**
   *Thisfunctionislike`arrayIncludes`exceptthatitacceptsacomparator.
   *
   *@private
   *@param{Array}[array]Thearraytoinspect.
   *@param{*}targetThevaluetosearchfor.
   *@param{Function}comparatorThecomparatorinvokedperelement.
   *@returns{boolean}Returns`true`if`target`isfound,else`false`.
   */
  functionarrayIncludesWith(array,value,comparator){
    varindex=-1,
        length=array==null?0:array.length;

    while(++index<length){
      if(comparator(value,array[index])){
        returntrue;
      }
    }
    returnfalse;
  }

  /**
   *Aspecializedversionof`_.map`forarrayswithoutsupportforiteratee
   *shorthands.
   *
   *@private
   *@param{Array}[array]Thearraytoiterateover.
   *@param{Function}iterateeThefunctioninvokedperiteration.
   *@returns{Array}Returnsthenewmappedarray.
   */
  functionarrayMap(array,iteratee){
    varindex=-1,
        length=array==null?0:array.length,
        result=Array(length);

    while(++index<length){
      result[index]=iteratee(array[index],index,array);
    }
    returnresult;
  }

  /**
   *Appendstheelementsof`values`to`array`.
   *
   *@private
   *@param{Array}arrayThearraytomodify.
   *@param{Array}valuesThevaluestoappend.
   *@returns{Array}Returns`array`.
   */
  functionarrayPush(array,values){
    varindex=-1,
        length=values.length,
        offset=array.length;

    while(++index<length){
      array[offset+index]=values[index];
    }
    returnarray;
  }

  /**
   *Aspecializedversionof`_.reduce`forarrayswithoutsupportfor
   *iterateeshorthands.
   *
   *@private
   *@param{Array}[array]Thearraytoiterateover.
   *@param{Function}iterateeThefunctioninvokedperiteration.
   *@param{*}[accumulator]Theinitialvalue.
   *@param{boolean}[initAccum]Specifyusingthefirstelementof`array`as
   * theinitialvalue.
   *@returns{*}Returnstheaccumulatedvalue.
   */
  functionarrayReduce(array,iteratee,accumulator,initAccum){
    varindex=-1,
        length=array==null?0:array.length;

    if(initAccum&&length){
      accumulator=array[++index];
    }
    while(++index<length){
      accumulator=iteratee(accumulator,array[index],index,array);
    }
    returnaccumulator;
  }

  /**
   *Aspecializedversionof`_.reduceRight`forarrayswithoutsupportfor
   *iterateeshorthands.
   *
   *@private
   *@param{Array}[array]Thearraytoiterateover.
   *@param{Function}iterateeThefunctioninvokedperiteration.
   *@param{*}[accumulator]Theinitialvalue.
   *@param{boolean}[initAccum]Specifyusingthelastelementof`array`as
   * theinitialvalue.
   *@returns{*}Returnstheaccumulatedvalue.
   */
  functionarrayReduceRight(array,iteratee,accumulator,initAccum){
    varlength=array==null?0:array.length;
    if(initAccum&&length){
      accumulator=array[--length];
    }
    while(length--){
      accumulator=iteratee(accumulator,array[length],length,array);
    }
    returnaccumulator;
  }

  /**
   *Aspecializedversionof`_.some`forarrayswithoutsupportforiteratee
   *shorthands.
   *
   *@private
   *@param{Array}[array]Thearraytoiterateover.
   *@param{Function}predicateThefunctioninvokedperiteration.
   *@returns{boolean}Returns`true`ifanyelementpassesthepredicatecheck,
   * else`false`.
   */
  functionarraySome(array,predicate){
    varindex=-1,
        length=array==null?0:array.length;

    while(++index<length){
      if(predicate(array[index],index,array)){
        returntrue;
      }
    }
    returnfalse;
  }

  /**
   *GetsthesizeofanASCII`string`.
   *
   *@private
   *@param{string}stringThestringinspect.
   *@returns{number}Returnsthestringsize.
   */
  varasciiSize=baseProperty('length');

  /**
   *ConvertsanASCII`string`toanarray.
   *
   *@private
   *@param{string}stringThestringtoconvert.
   *@returns{Array}Returnstheconvertedarray.
   */
  functionasciiToArray(string){
    returnstring.split('');
  }

  /**
   *SplitsanASCII`string`intoanarrayofitswords.
   *
   *@private
   *@param{string}Thestringtoinspect.
   *@returns{Array}Returnsthewordsof`string`.
   */
  functionasciiWords(string){
    returnstring.match(reAsciiWord)||[];
  }

  /**
   *Thebaseimplementationofmethodslike`_.findKey`and`_.findLastKey`,
   *withoutsupportforiterateeshorthands,whichiteratesover`collection`
   *using`eachFunc`.
   *
   *@private
   *@param{Array|Object}collectionThecollectiontoinspect.
   *@param{Function}predicateThefunctioninvokedperiteration.
   *@param{Function}eachFuncThefunctiontoiterateover`collection`.
   *@returns{*}Returnsthefoundelementoritskey,else`undefined`.
   */
  functionbaseFindKey(collection,predicate,eachFunc){
    varresult;
    eachFunc(collection,function(value,key,collection){
      if(predicate(value,key,collection)){
        result=key;
        returnfalse;
      }
    });
    returnresult;
  }

  /**
   *Thebaseimplementationof`_.findIndex`and`_.findLastIndex`without
   *supportforiterateeshorthands.
   *
   *@private
   *@param{Array}arrayThearraytoinspect.
   *@param{Function}predicateThefunctioninvokedperiteration.
   *@param{number}fromIndexTheindextosearchfrom.
   *@param{boolean}[fromRight]Specifyiteratingfromrighttoleft.
   *@returns{number}Returnstheindexofthematchedvalue,else`-1`.
   */
  functionbaseFindIndex(array,predicate,fromIndex,fromRight){
    varlength=array.length,
        index=fromIndex+(fromRight?1:-1);

    while((fromRight?index--:++index<length)){
      if(predicate(array[index],index,array)){
        returnindex;
      }
    }
    return-1;
  }

  /**
   *Thebaseimplementationof`_.indexOf`without`fromIndex`boundschecks.
   *
   *@private
   *@param{Array}arrayThearraytoinspect.
   *@param{*}valueThevaluetosearchfor.
   *@param{number}fromIndexTheindextosearchfrom.
   *@returns{number}Returnstheindexofthematchedvalue,else`-1`.
   */
  functionbaseIndexOf(array,value,fromIndex){
    returnvalue===value
      ?strictIndexOf(array,value,fromIndex)
      :baseFindIndex(array,baseIsNaN,fromIndex);
  }

  /**
   *Thisfunctionislike`baseIndexOf`exceptthatitacceptsacomparator.
   *
   *@private
   *@param{Array}arrayThearraytoinspect.
   *@param{*}valueThevaluetosearchfor.
   *@param{number}fromIndexTheindextosearchfrom.
   *@param{Function}comparatorThecomparatorinvokedperelement.
   *@returns{number}Returnstheindexofthematchedvalue,else`-1`.
   */
  functionbaseIndexOfWith(array,value,fromIndex,comparator){
    varindex=fromIndex-1,
        length=array.length;

    while(++index<length){
      if(comparator(array[index],value)){
        returnindex;
      }
    }
    return-1;
  }

  /**
   *Thebaseimplementationof`_.isNaN`withoutsupportfornumberobjects.
   *
   *@private
   *@param{*}valueThevaluetocheck.
   *@returns{boolean}Returns`true`if`value`is`NaN`,else`false`.
   */
  functionbaseIsNaN(value){
    returnvalue!==value;
  }

  /**
   *Thebaseimplementationof`_.mean`and`_.meanBy`withoutsupportfor
   *iterateeshorthands.
   *
   *@private
   *@param{Array}arrayThearraytoiterateover.
   *@param{Function}iterateeThefunctioninvokedperiteration.
   *@returns{number}Returnsthemean.
   */
  functionbaseMean(array,iteratee){
    varlength=array==null?0:array.length;
    returnlength?(baseSum(array,iteratee)/length):NAN;
  }

  /**
   *Thebaseimplementationof`_.property`withoutsupportfordeeppaths.
   *
   *@private
   *@param{string}keyThekeyofthepropertytoget.
   *@returns{Function}Returnsthenewaccessorfunction.
   */
  functionbaseProperty(key){
    returnfunction(object){
      returnobject==null?undefined:object[key];
    };
  }

  /**
   *Thebaseimplementationof`_.propertyOf`withoutsupportfordeeppaths.
   *
   *@private
   *@param{Object}objectTheobjecttoquery.
   *@returns{Function}Returnsthenewaccessorfunction.
   */
  functionbasePropertyOf(object){
    returnfunction(key){
      returnobject==null?undefined:object[key];
    };
  }

  /**
   *Thebaseimplementationof`_.reduce`and`_.reduceRight`,withoutsupport
   *foriterateeshorthands,whichiteratesover`collection`using`eachFunc`.
   *
   *@private
   *@param{Array|Object}collectionThecollectiontoiterateover.
   *@param{Function}iterateeThefunctioninvokedperiteration.
   *@param{*}accumulatorTheinitialvalue.
   *@param{boolean}initAccumSpecifyusingthefirstorlastelementof
   * `collection`astheinitialvalue.
   *@param{Function}eachFuncThefunctiontoiterateover`collection`.
   *@returns{*}Returnstheaccumulatedvalue.
   */
  functionbaseReduce(collection,iteratee,accumulator,initAccum,eachFunc){
    eachFunc(collection,function(value,index,collection){
      accumulator=initAccum
        ?(initAccum=false,value)
        :iteratee(accumulator,value,index,collection);
    });
    returnaccumulator;
  }

  /**
   *Thebaseimplementationof`_.sortBy`whichuses`comparer`todefinethe
   *sortorderof`array`andreplacescriteriaobjectswiththeircorresponding
   *values.
   *
   *@private
   *@param{Array}arrayThearraytosort.
   *@param{Function}comparerThefunctiontodefinesortorder.
   *@returns{Array}Returns`array`.
   */
  functionbaseSortBy(array,comparer){
    varlength=array.length;

    array.sort(comparer);
    while(length--){
      array[length]=array[length].value;
    }
    returnarray;
  }

  /**
   *Thebaseimplementationof`_.sum`and`_.sumBy`withoutsupportfor
   *iterateeshorthands.
   *
   *@private
   *@param{Array}arrayThearraytoiterateover.
   *@param{Function}iterateeThefunctioninvokedperiteration.
   *@returns{number}Returnsthesum.
   */
  functionbaseSum(array,iteratee){
    varresult,
        index=-1,
        length=array.length;

    while(++index<length){
      varcurrent=iteratee(array[index]);
      if(current!==undefined){
        result=result===undefined?current:(result+current);
      }
    }
    returnresult;
  }

  /**
   *Thebaseimplementationof`_.times`withoutsupportforiterateeshorthands
   *ormaxarraylengthchecks.
   *
   *@private
   *@param{number}nThenumberoftimestoinvoke`iteratee`.
   *@param{Function}iterateeThefunctioninvokedperiteration.
   *@returns{Array}Returnsthearrayofresults.
   */
  functionbaseTimes(n,iteratee){
    varindex=-1,
        result=Array(n);

    while(++index<n){
      result[index]=iteratee(index);
    }
    returnresult;
  }

  /**
   *Thebaseimplementationof`_.toPairs`and`_.toPairsIn`whichcreatesanarray
   *ofkey-valuepairsfor`object`correspondingtothepropertynamesof`props`.
   *
   *@private
   *@param{Object}objectTheobjecttoquery.
   *@param{Array}propsThepropertynamestogetvaluesfor.
   *@returns{Object}Returnsthekey-valuepairs.
   */
  functionbaseToPairs(object,props){
    returnarrayMap(props,function(key){
      return[key,object[key]];
    });
  }

  /**
   *Thebaseimplementationof`_.unary`withoutsupportforstoringmetadata.
   *
   *@private
   *@param{Function}funcThefunctiontocapargumentsfor.
   *@returns{Function}Returnsthenewcappedfunction.
   */
  functionbaseUnary(func){
    returnfunction(value){
      returnfunc(value);
    };
  }

  /**
   *Thebaseimplementationof`_.values`and`_.valuesIn`whichcreatesan
   *arrayof`object`propertyvaluescorrespondingtothepropertynames
   *of`props`.
   *
   *@private
   *@param{Object}objectTheobjecttoquery.
   *@param{Array}propsThepropertynamestogetvaluesfor.
   *@returns{Object}Returnsthearrayofpropertyvalues.
   */
  functionbaseValues(object,props){
    returnarrayMap(props,function(key){
      returnobject[key];
    });
  }

  /**
   *Checksifa`cache`valuefor`key`exists.
   *
   *@private
   *@param{Object}cacheThecachetoquery.
   *@param{string}keyThekeyoftheentrytocheck.
   *@returns{boolean}Returns`true`ifanentryfor`key`exists,else`false`.
   */
  functioncacheHas(cache,key){
    returncache.has(key);
  }

  /**
   *Usedby`_.trim`and`_.trimStart`togettheindexofthefirststringsymbol
   *thatisnotfoundinthecharactersymbols.
   *
   *@private
   *@param{Array}strSymbolsThestringsymbolstoinspect.
   *@param{Array}chrSymbolsThecharactersymbolstofind.
   *@returns{number}Returnstheindexofthefirstunmatchedstringsymbol.
   */
  functioncharsStartIndex(strSymbols,chrSymbols){
    varindex=-1,
        length=strSymbols.length;

    while(++index<length&&baseIndexOf(chrSymbols,strSymbols[index],0)>-1){}
    returnindex;
  }

  /**
   *Usedby`_.trim`and`_.trimEnd`togettheindexofthelaststringsymbol
   *thatisnotfoundinthecharactersymbols.
   *
   *@private
   *@param{Array}strSymbolsThestringsymbolstoinspect.
   *@param{Array}chrSymbolsThecharactersymbolstofind.
   *@returns{number}Returnstheindexofthelastunmatchedstringsymbol.
   */
  functioncharsEndIndex(strSymbols,chrSymbols){
    varindex=strSymbols.length;

    while(index--&&baseIndexOf(chrSymbols,strSymbols[index],0)>-1){}
    returnindex;
  }

  /**
   *Getsthenumberof`placeholder`occurrencesin`array`.
   *
   *@private
   *@param{Array}arrayThearraytoinspect.
   *@param{*}placeholderTheplaceholdertosearchfor.
   *@returns{number}Returnstheplaceholdercount.
   */
  functioncountHolders(array,placeholder){
    varlength=array.length,
        result=0;

    while(length--){
      if(array[length]===placeholder){
        ++result;
      }
    }
    returnresult;
  }

  /**
   *Usedby`_.deburr`toconvertLatin-1SupplementandLatinExtended-A
   *letterstobasicLatinletters.
   *
   *@private
   *@param{string}letterThematchedlettertodeburr.
   *@returns{string}Returnsthedeburredletter.
   */
  vardeburrLetter=basePropertyOf(deburredLetters);

  /**
   *Usedby`_.escape`toconvertcharacterstoHTMLentities.
   *
   *@private
   *@param{string}chrThematchedcharactertoescape.
   *@returns{string}Returnstheescapedcharacter.
   */
  varescapeHtmlChar=basePropertyOf(htmlEscapes);

  /**
   *Usedby`_.template`toescapecharactersforinclusionincompiledstringliterals.
   *
   *@private
   *@param{string}chrThematchedcharactertoescape.
   *@returns{string}Returnstheescapedcharacter.
   */
  functionescapeStringChar(chr){
    return'\\'+stringEscapes[chr];
  }

  /**
   *Getsthevalueat`key`of`object`.
   *
   *@private
   *@param{Object}[object]Theobjecttoquery.
   *@param{string}keyThekeyofthepropertytoget.
   *@returns{*}Returnsthepropertyvalue.
   */
  functiongetValue(object,key){
    returnobject==null?undefined:object[key];
  }

  /**
   *Checksif`string`containsUnicodesymbols.
   *
   *@private
   *@param{string}stringThestringtoinspect.
   *@returns{boolean}Returns`true`ifasymbolisfound,else`false`.
   */
  functionhasUnicode(string){
    returnreHasUnicode.test(string);
  }

  /**
   *Checksif`string`containsawordcomposedofUnicodesymbols.
   *
   *@private
   *@param{string}stringThestringtoinspect.
   *@returns{boolean}Returns`true`ifawordisfound,else`false`.
   */
  functionhasUnicodeWord(string){
    returnreHasUnicodeWord.test(string);
  }

  /**
   *Converts`iterator`toanarray.
   *
   *@private
   *@param{Object}iteratorTheiteratortoconvert.
   *@returns{Array}Returnstheconvertedarray.
   */
  functioniteratorToArray(iterator){
    vardata,
        result=[];

    while(!(data=iterator.next()).done){
      result.push(data.value);
    }
    returnresult;
  }

  /**
   *Converts`map`toitskey-valuepairs.
   *
   *@private
   *@param{Object}mapThemaptoconvert.
   *@returns{Array}Returnsthekey-valuepairs.
   */
  functionmapToArray(map){
    varindex=-1,
        result=Array(map.size);

    map.forEach(function(value,key){
      result[++index]=[key,value];
    });
    returnresult;
  }

  /**
   *Createsaunaryfunctionthatinvokes`func`withitsargumenttransformed.
   *
   *@private
   *@param{Function}funcThefunctiontowrap.
   *@param{Function}transformTheargumenttransform.
   *@returns{Function}Returnsthenewfunction.
   */
  functionoverArg(func,transform){
    returnfunction(arg){
      returnfunc(transform(arg));
    };
  }

  /**
   *Replacesall`placeholder`elementsin`array`withaninternalplaceholder
   *andreturnsanarrayoftheirindexes.
   *
   *@private
   *@param{Array}arrayThearraytomodify.
   *@param{*}placeholderTheplaceholdertoreplace.
   *@returns{Array}Returnsthenewarrayofplaceholderindexes.
   */
  functionreplaceHolders(array,placeholder){
    varindex=-1,
        length=array.length,
        resIndex=0,
        result=[];

    while(++index<length){
      varvalue=array[index];
      if(value===placeholder||value===PLACEHOLDER){
        array[index]=PLACEHOLDER;
        result[resIndex++]=index;
      }
    }
    returnresult;
  }

  /**
   *Converts`set`toanarrayofitsvalues.
   *
   *@private
   *@param{Object}setThesettoconvert.
   *@returns{Array}Returnsthevalues.
   */
  functionsetToArray(set){
    varindex=-1,
        result=Array(set.size);

    set.forEach(function(value){
      result[++index]=value;
    });
    returnresult;
  }

  /**
   *Converts`set`toitsvalue-valuepairs.
   *
   *@private
   *@param{Object}setThesettoconvert.
   *@returns{Array}Returnsthevalue-valuepairs.
   */
  functionsetToPairs(set){
    varindex=-1,
        result=Array(set.size);

    set.forEach(function(value){
      result[++index]=[value,value];
    });
    returnresult;
  }

  /**
   *Aspecializedversionof`_.indexOf`whichperformsstrictequality
   *comparisonsofvalues,i.e.`===`.
   *
   *@private
   *@param{Array}arrayThearraytoinspect.
   *@param{*}valueThevaluetosearchfor.
   *@param{number}fromIndexTheindextosearchfrom.
   *@returns{number}Returnstheindexofthematchedvalue,else`-1`.
   */
  functionstrictIndexOf(array,value,fromIndex){
    varindex=fromIndex-1,
        length=array.length;

    while(++index<length){
      if(array[index]===value){
        returnindex;
      }
    }
    return-1;
  }

  /**
   *Aspecializedversionof`_.lastIndexOf`whichperformsstrictequality
   *comparisonsofvalues,i.e.`===`.
   *
   *@private
   *@param{Array}arrayThearraytoinspect.
   *@param{*}valueThevaluetosearchfor.
   *@param{number}fromIndexTheindextosearchfrom.
   *@returns{number}Returnstheindexofthematchedvalue,else`-1`.
   */
  functionstrictLastIndexOf(array,value,fromIndex){
    varindex=fromIndex+1;
    while(index--){
      if(array[index]===value){
        returnindex;
      }
    }
    returnindex;
  }

  /**
   *Getsthenumberofsymbolsin`string`.
   *
   *@private
   *@param{string}stringThestringtoinspect.
   *@returns{number}Returnsthestringsize.
   */
  functionstringSize(string){
    returnhasUnicode(string)
      ?unicodeSize(string)
      :asciiSize(string);
  }

  /**
   *Converts`string`toanarray.
   *
   *@private
   *@param{string}stringThestringtoconvert.
   *@returns{Array}Returnstheconvertedarray.
   */
  functionstringToArray(string){
    returnhasUnicode(string)
      ?unicodeToArray(string)
      :asciiToArray(string);
  }

  /**
   *Usedby`_.unescape`toconvertHTMLentitiestocharacters.
   *
   *@private
   *@param{string}chrThematchedcharactertounescape.
   *@returns{string}Returnstheunescapedcharacter.
   */
  varunescapeHtmlChar=basePropertyOf(htmlUnescapes);

  /**
   *GetsthesizeofaUnicode`string`.
   *
   *@private
   *@param{string}stringThestringinspect.
   *@returns{number}Returnsthestringsize.
   */
  functionunicodeSize(string){
    varresult=reUnicode.lastIndex=0;
    while(reUnicode.test(string)){
      ++result;
    }
    returnresult;
  }

  /**
   *ConvertsaUnicode`string`toanarray.
   *
   *@private
   *@param{string}stringThestringtoconvert.
   *@returns{Array}Returnstheconvertedarray.
   */
  functionunicodeToArray(string){
    returnstring.match(reUnicode)||[];
  }

  /**
   *SplitsaUnicode`string`intoanarrayofitswords.
   *
   *@private
   *@param{string}Thestringtoinspect.
   *@returns{Array}Returnsthewordsof`string`.
   */
  functionunicodeWords(string){
    returnstring.match(reUnicodeWord)||[];
  }

  /*--------------------------------------------------------------------------*/

  /**
   *Createanewpristine`lodash`functionusingthe`context`object.
   *
   *@static
   *@memberOf_
   *@since1.1.0
   *@categoryUtil
   *@param{Object}[context=root]Thecontextobject.
   *@returns{Function}Returnsanew`lodash`function.
   *@example
   *
   *_.mixin({'foo':_.constant('foo')});
   *
   *varlodash=_.runInContext();
   *lodash.mixin({'bar':lodash.constant('bar')});
   *
   *_.isFunction(_.foo);
   *//=>true
   *_.isFunction(_.bar);
   *//=>false
   *
   *lodash.isFunction(lodash.foo);
   *//=>false
   *lodash.isFunction(lodash.bar);
   *//=>true
   *
   *//Createasuped-up`defer`inNode.js.
   *vardefer=_.runInContext({'setTimeout':setImmediate}).defer;
   */
  varrunInContext=(functionrunInContext(context){
    context=context==null?root:_.defaults(root.Object(),context,_.pick(root,contextProps));

    /**Built-inconstructorreferences.*/
    varArray=context.Array,
        Date=context.Date,
        Error=context.Error,
        Function=context.Function,
        Math=context.Math,
        Object=context.Object,
        RegExp=context.RegExp,
        String=context.String,
        TypeError=context.TypeError;

    /**Usedforbuilt-inmethodreferences.*/
    vararrayProto=Array.prototype,
        funcProto=Function.prototype,
        objectProto=Object.prototype;

    /**Usedtodetectoverreachingcore-jsshims.*/
    varcoreJsData=context['__core-js_shared__'];

    /**Usedtoresolvethedecompiledsourceoffunctions.*/
    varfuncToString=funcProto.toString;

    /**Usedtocheckobjectsforownproperties.*/
    varhasOwnProperty=objectProto.hasOwnProperty;

    /**UsedtogenerateuniqueIDs.*/
    varidCounter=0;

    /**Usedtodetectmethodsmasqueradingasnative.*/
    varmaskSrcKey=(function(){
      varuid=/[^.]+$/.exec(coreJsData&&coreJsData.keys&&coreJsData.keys.IE_PROTO||'');
      returnuid?('Symbol(src)_1.'+uid):'';
    }());

    /**
     *Usedtoresolvethe
     *[`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     *ofvalues.
     */
    varnativeObjectToString=objectProto.toString;

    /**Usedtoinferthe`Object`constructor.*/
    varobjectCtorString=funcToString.call(Object);

    /**Usedtorestoretheoriginal`_`referencein`_.noConflict`.*/
    varoldDash=root._;

    /**Usedtodetectifamethodisnative.*/
    varreIsNative=RegExp('^'+
      funcToString.call(hasOwnProperty).replace(reRegExpChar,'\\$&')
      .replace(/hasOwnProperty|(function).*?(?=\\\()|for.+?(?=\\\])/g,'$1.*?')+'$'
    );

    /**Built-invaluereferences.*/
    varBuffer=moduleExports?context.Buffer:undefined,
        Symbol=context.Symbol,
        Uint8Array=context.Uint8Array,
        allocUnsafe=Buffer?Buffer.allocUnsafe:undefined,
        getPrototype=overArg(Object.getPrototypeOf,Object),
        objectCreate=Object.create,
        propertyIsEnumerable=objectProto.propertyIsEnumerable,
        splice=arrayProto.splice,
        spreadableSymbol=Symbol?Symbol.isConcatSpreadable:undefined,
        symIterator=Symbol?Symbol.iterator:undefined,
        symToStringTag=Symbol?Symbol.toStringTag:undefined;

    vardefineProperty=(function(){
      try{
        varfunc=getNative(Object,'defineProperty');
        func({},'',{});
        returnfunc;
      }catch(e){}
    }());

    /**Mockedbuilt-ins.*/
    varctxClearTimeout=context.clearTimeout!==root.clearTimeout&&context.clearTimeout,
        ctxNow=Date&&Date.now!==root.Date.now&&Date.now,
        ctxSetTimeout=context.setTimeout!==root.setTimeout&&context.setTimeout;

    /*Built-inmethodreferencesforthosewiththesamenameasother`lodash`methods.*/
    varnativeCeil=Math.ceil,
        nativeFloor=Math.floor,
        nativeGetSymbols=Object.getOwnPropertySymbols,
        nativeIsBuffer=Buffer?Buffer.isBuffer:undefined,
        nativeIsFinite=context.isFinite,
        nativeJoin=arrayProto.join,
        nativeKeys=overArg(Object.keys,Object),
        nativeMax=Math.max,
        nativeMin=Math.min,
        nativeNow=Date.now,
        nativeParseInt=context.parseInt,
        nativeRandom=Math.random,
        nativeReverse=arrayProto.reverse;

    /*Built-inmethodreferencesthatareverifiedtobenative.*/
    varDataView=getNative(context,'DataView'),
        Map=getNative(context,'Map'),
        Promise=getNative(context,'Promise'),
        Set=getNative(context,'Set'),
        WeakMap=getNative(context,'WeakMap'),
        nativeCreate=getNative(Object,'create');

    /**Usedtostorefunctionmetadata.*/
    varmetaMap=WeakMap&&newWeakMap;

    /**Usedtolookupunminifiedfunctionnames.*/
    varrealNames={};

    /**Usedtodetectmaps,sets,andweakmaps.*/
    vardataViewCtorString=toSource(DataView),
        mapCtorString=toSource(Map),
        promiseCtorString=toSource(Promise),
        setCtorString=toSource(Set),
        weakMapCtorString=toSource(WeakMap);

    /**Usedtoconvertsymbolstoprimitivesandstrings.*/
    varsymbolProto=Symbol?Symbol.prototype:undefined,
        symbolValueOf=symbolProto?symbolProto.valueOf:undefined,
        symbolToString=symbolProto?symbolProto.toString:undefined;

    /*------------------------------------------------------------------------*/

    /**
     *Createsa`lodash`objectwhichwraps`value`toenableimplicitmethod
     *chainsequences.Methodsthatoperateonandreturnarrays,collections,
     *andfunctionscanbechainedtogether.Methodsthatretrieveasinglevalue
     *ormayreturnaprimitivevaluewillautomaticallyendthechainsequence
     *andreturntheunwrappedvalue.Otherwise,thevaluemustbeunwrapped
     *with`_#value`.
     *
     *Explicitchainsequences,whichmustbeunwrappedwith`_#value`,maybe
     *enabledusing`_.chain`.
     *
     *Theexecutionofchainedmethodsislazy,thatis,it'sdeferreduntil
     *`_#value`isimplicitlyorexplicitlycalled.
     *
     *Lazyevaluationallowsseveralmethodstosupportshortcutfusion.
     *Shortcutfusionisanoptimizationtomergeiterateecalls;thisavoids
     *thecreationofintermediatearraysandcangreatlyreducethenumberof
     *iterateeexecutions.Sectionsofachainsequencequalifyforshortcut
     *fusionifthesectionisappliedtoanarrayanditerateesacceptonly
     *oneargument.Theheuristicforwhetherasectionqualifiesforshortcut
     *fusionissubjecttochange.
     *
     *Chainingissupportedincustombuildsaslongasthe`_#value`methodis
     *directlyorindirectlyincludedinthebuild.
     *
     *Inadditiontolodashmethods,wrappershave`Array`and`String`methods.
     *
     *Thewrapper`Array`methodsare:
     *`concat`,`join`,`pop`,`push`,`shift`,`sort`,`splice`,and`unshift`
     *
     *Thewrapper`String`methodsare:
     *`replace`and`split`
     *
     *Thewrappermethodsthatsupportshortcutfusionare:
     *`at`,`compact`,`drop`,`dropRight`,`dropWhile`,`filter`,`find`,
     *`findLast`,`head`,`initial`,`last`,`map`,`reject`,`reverse`,`slice`,
     *`tail`,`take`,`takeRight`,`takeRightWhile`,`takeWhile`,and`toArray`
     *
     *Thechainablewrappermethodsare:
     *`after`,`ary`,`assign`,`assignIn`,`assignInWith`,`assignWith`,`at`,
     *`before`,`bind`,`bindAll`,`bindKey`,`castArray`,`chain`,`chunk`,
     *`commit`,`compact`,`concat`,`conforms`,`constant`,`countBy`,`create`,
     *`curry`,`debounce`,`defaults`,`defaultsDeep`,`defer`,`delay`,
     *`difference`,`differenceBy`,`differenceWith`,`drop`,`dropRight`,
     *`dropRightWhile`,`dropWhile`,`extend`,`extendWith`,`fill`,`filter`,
     *`flatMap`,`flatMapDeep`,`flatMapDepth`,`flatten`,`flattenDeep`,
     *`flattenDepth`,`flip`,`flow`,`flowRight`,`fromPairs`,`functions`,
     *`functionsIn`,`groupBy`,`initial`,`intersection`,`intersectionBy`,
     *`intersectionWith`,`invert`,`invertBy`,`invokeMap`,`iteratee`,`keyBy`,
     *`keys`,`keysIn`,`map`,`mapKeys`,`mapValues`,`matches`,`matchesProperty`,
     *`memoize`,`merge`,`mergeWith`,`method`,`methodOf`,`mixin`,`negate`,
     *`nthArg`,`omit`,`omitBy`,`once`,`orderBy`,`over`,`overArgs`,
     *`overEvery`,`overSome`,`partial`,`partialRight`,`partition`,`pick`,
     *`pickBy`,`plant`,`property`,`propertyOf`,`pull`,`pullAll`,`pullAllBy`,
     *`pullAllWith`,`pullAt`,`push`,`range`,`rangeRight`,`rearg`,`reject`,
     *`remove`,`rest`,`reverse`,`sampleSize`,`set`,`setWith`,`shuffle`,
     *`slice`,`sort`,`sortBy`,`splice`,`spread`,`tail`,`take`,`takeRight`,
     *`takeRightWhile`,`takeWhile`,`tap`,`throttle`,`thru`,`toArray`,
     *`toPairs`,`toPairsIn`,`toPath`,`toPlainObject`,`transform`,`unary`,
     *`union`,`unionBy`,`unionWith`,`uniq`,`uniqBy`,`uniqWith`,`unset`,
     *`unshift`,`unzip`,`unzipWith`,`update`,`updateWith`,`values`,
     *`valuesIn`,`without`,`wrap`,`xor`,`xorBy`,`xorWith`,`zip`,
     *`zipObject`,`zipObjectDeep`,and`zipWith`
     *
     *Thewrappermethodsthatare**not**chainablebydefaultare:
     *`add`,`attempt`,`camelCase`,`capitalize`,`ceil`,`clamp`,`clone`,
     *`cloneDeep`,`cloneDeepWith`,`cloneWith`,`conformsTo`,`deburr`,
     *`defaultTo`,`divide`,`each`,`eachRight`,`endsWith`,`eq`,`escape`,
     *`escapeRegExp`,`every`,`find`,`findIndex`,`findKey`,`findLast`,
     *`findLastIndex`,`findLastKey`,`first`,`floor`,`forEach`,`forEachRight`,
     *`forIn`,`forInRight`,`forOwn`,`forOwnRight`,`get`,`gt`,`gte`,`has`,
     *`hasIn`,`head`,`identity`,`includes`,`indexOf`,`inRange`,`invoke`,
     *`isArguments`,`isArray`,`isArrayBuffer`,`isArrayLike`,`isArrayLikeObject`,
     *`isBoolean`,`isBuffer`,`isDate`,`isElement`,`isEmpty`,`isEqual`,
     *`isEqualWith`,`isError`,`isFinite`,`isFunction`,`isInteger`,`isLength`,
     *`isMap`,`isMatch`,`isMatchWith`,`isNaN`,`isNative`,`isNil`,`isNull`,
     *`isNumber`,`isObject`,`isObjectLike`,`isPlainObject`,`isRegExp`,
     *`isSafeInteger`,`isSet`,`isString`,`isUndefined`,`isTypedArray`,
     *`isWeakMap`,`isWeakSet`,`join`,`kebabCase`,`last`,`lastIndexOf`,
     *`lowerCase`,`lowerFirst`,`lt`,`lte`,`max`,`maxBy`,`mean`,`meanBy`,
     *`min`,`minBy`,`multiply`,`noConflict`,`noop`,`now`,`nth`,`pad`,
     *`padEnd`,`padStart`,`parseInt`,`pop`,`random`,`reduce`,`reduceRight`,
     *`repeat`,`result`,`round`,`runInContext`,`sample`,`shift`,`size`,
     *`snakeCase`,`some`,`sortedIndex`,`sortedIndexBy`,`sortedLastIndex`,
     *`sortedLastIndexBy`,`startCase`,`startsWith`,`stubArray`,`stubFalse`,
     *`stubObject`,`stubString`,`stubTrue`,`subtract`,`sum`,`sumBy`,
     *`template`,`times`,`toFinite`,`toInteger`,`toJSON`,`toLength`,
     *`toLower`,`toNumber`,`toSafeInteger`,`toString`,`toUpper`,`trim`,
     *`trimEnd`,`trimStart`,`truncate`,`unescape`,`uniqueId`,`upperCase`,
     *`upperFirst`,`value`,and`words`
     *
     *@name_
     *@constructor
     *@categorySeq
     *@param{*}valueThevaluetowrapina`lodash`instance.
     *@returns{Object}Returnsthenew`lodash`wrapperinstance.
     *@example
     *
     *functionsquare(n){
     *  returnn*n;
     *}
     *
     *varwrapped=_([1,2,3]);
     *
     *//Returnsanunwrappedvalue.
     *wrapped.reduce(_.add);
     *//=>6
     *
     *//Returnsawrappedvalue.
     *varsquares=wrapped.map(square);
     *
     *_.isArray(squares);
     *//=>false
     *
     *_.isArray(squares.value());
     *//=>true
     */
    functionlodash(value){
      if(isObjectLike(value)&&!isArray(value)&&!(valueinstanceofLazyWrapper)){
        if(valueinstanceofLodashWrapper){
          returnvalue;
        }
        if(hasOwnProperty.call(value,'__wrapped__')){
          returnwrapperClone(value);
        }
      }
      returnnewLodashWrapper(value);
    }

    /**
     *Thebaseimplementationof`_.create`withoutsupportforassigning
     *propertiestothecreatedobject.
     *
     *@private
     *@param{Object}protoTheobjecttoinheritfrom.
     *@returns{Object}Returnsthenewobject.
     */
    varbaseCreate=(function(){
      functionobject(){}
      returnfunction(proto){
        if(!isObject(proto)){
          return{};
        }
        if(objectCreate){
          returnobjectCreate(proto);
        }
        object.prototype=proto;
        varresult=newobject;
        object.prototype=undefined;
        returnresult;
      };
    }());

    /**
     *Thefunctionwhoseprototypechainsequencewrappersinheritfrom.
     *
     *@private
     */
    functionbaseLodash(){
      //Nooperationperformed.
    }

    /**
     *Thebaseconstructorforcreating`lodash`wrapperobjects.
     *
     *@private
     *@param{*}valueThevaluetowrap.
     *@param{boolean}[chainAll]Enableexplicitmethodchainsequences.
     */
    functionLodashWrapper(value,chainAll){
      this.__wrapped__=value;
      this.__actions__=[];
      this.__chain__=!!chainAll;
      this.__index__=0;
      this.__values__=undefined;
    }

    /**
     *Bydefault,thetemplatedelimitersusedbylodasharelikethosein
     *embeddedRuby(ERB)aswellasES2015templatestrings.Changethe
     *followingtemplatesettingstousealternativedelimiters.
     *
     *@static
     *@memberOf_
     *@type{Object}
     */
    lodash.templateSettings={

      /**
       *Usedtodetect`data`propertyvaluestobeHTML-escaped.
       *
       *@memberOf_.templateSettings
       *@type{RegExp}
       */
      'escape':reEscape,

      /**
       *Usedtodetectcodetobeevaluated.
       *
       *@memberOf_.templateSettings
       *@type{RegExp}
       */
      'evaluate':reEvaluate,

      /**
       *Usedtodetect`data`propertyvaluestoinject.
       *
       *@memberOf_.templateSettings
       *@type{RegExp}
       */
      'interpolate':reInterpolate,

      /**
       *Usedtoreferencethedataobjectinthetemplatetext.
       *
       *@memberOf_.templateSettings
       *@type{string}
       */
      'variable':'',

      /**
       *Usedtoimportvariablesintothecompiledtemplate.
       *
       *@memberOf_.templateSettings
       *@type{Object}
       */
      'imports':{

        /**
         *Areferencetothe`lodash`function.
         *
         *@memberOf_.templateSettings.imports
         *@type{Function}
         */
        '_':lodash
      }
    };

    //Ensurewrappersareinstancesof`baseLodash`.
    lodash.prototype=baseLodash.prototype;
    lodash.prototype.constructor=lodash;

    LodashWrapper.prototype=baseCreate(baseLodash.prototype);
    LodashWrapper.prototype.constructor=LodashWrapper;

    /*------------------------------------------------------------------------*/

    /**
     *Createsalazywrapperobjectwhichwraps`value`toenablelazyevaluation.
     *
     *@private
     *@constructor
     *@param{*}valueThevaluetowrap.
     */
    functionLazyWrapper(value){
      this.__wrapped__=value;
      this.__actions__=[];
      this.__dir__=1;
      this.__filtered__=false;
      this.__iteratees__=[];
      this.__takeCount__=MAX_ARRAY_LENGTH;
      this.__views__=[];
    }

    /**
     *Createsacloneofthelazywrapperobject.
     *
     *@private
     *@nameclone
     *@memberOfLazyWrapper
     *@returns{Object}Returnsthecloned`LazyWrapper`object.
     */
    functionlazyClone(){
      varresult=newLazyWrapper(this.__wrapped__);
      result.__actions__=copyArray(this.__actions__);
      result.__dir__=this.__dir__;
      result.__filtered__=this.__filtered__;
      result.__iteratees__=copyArray(this.__iteratees__);
      result.__takeCount__=this.__takeCount__;
      result.__views__=copyArray(this.__views__);
      returnresult;
    }

    /**
     *Reversesthedirectionoflazyiteration.
     *
     *@private
     *@namereverse
     *@memberOfLazyWrapper
     *@returns{Object}Returnsthenewreversed`LazyWrapper`object.
     */
    functionlazyReverse(){
      if(this.__filtered__){
        varresult=newLazyWrapper(this);
        result.__dir__=-1;
        result.__filtered__=true;
      }else{
        result=this.clone();
        result.__dir__*=-1;
      }
      returnresult;
    }

    /**
     *Extractstheunwrappedvaluefromitslazywrapper.
     *
     *@private
     *@namevalue
     *@memberOfLazyWrapper
     *@returns{*}Returnstheunwrappedvalue.
     */
    functionlazyValue(){
      vararray=this.__wrapped__.value(),
          dir=this.__dir__,
          isArr=isArray(array),
          isRight=dir<0,
          arrLength=isArr?array.length:0,
          view=getView(0,arrLength,this.__views__),
          start=view.start,
          end=view.end,
          length=end-start,
          index=isRight?end:(start-1),
          iteratees=this.__iteratees__,
          iterLength=iteratees.length,
          resIndex=0,
          takeCount=nativeMin(length,this.__takeCount__);

      if(!isArr||(!isRight&&arrLength==length&&takeCount==length)){
        returnbaseWrapperValue(array,this.__actions__);
      }
      varresult=[];

      outer:
      while(length--&&resIndex<takeCount){
        index+=dir;

        variterIndex=-1,
            value=array[index];

        while(++iterIndex<iterLength){
          vardata=iteratees[iterIndex],
              iteratee=data.iteratee,
              type=data.type,
              computed=iteratee(value);

          if(type==LAZY_MAP_FLAG){
            value=computed;
          }elseif(!computed){
            if(type==LAZY_FILTER_FLAG){
              continueouter;
            }else{
              breakouter;
            }
          }
        }
        result[resIndex++]=value;
      }
      returnresult;
    }

    //Ensure`LazyWrapper`isaninstanceof`baseLodash`.
    LazyWrapper.prototype=baseCreate(baseLodash.prototype);
    LazyWrapper.prototype.constructor=LazyWrapper;

    /*------------------------------------------------------------------------*/

    /**
     *Createsahashobject.
     *
     *@private
     *@constructor
     *@param{Array}[entries]Thekey-valuepairstocache.
     */
    functionHash(entries){
      varindex=-1,
          length=entries==null?0:entries.length;

      this.clear();
      while(++index<length){
        varentry=entries[index];
        this.set(entry[0],entry[1]);
      }
    }

    /**
     *Removesallkey-valueentriesfromthehash.
     *
     *@private
     *@nameclear
     *@memberOfHash
     */
    functionhashClear(){
      this.__data__=nativeCreate?nativeCreate(null):{};
      this.size=0;
    }

    /**
     *Removes`key`anditsvaluefromthehash.
     *
     *@private
     *@namedelete
     *@memberOfHash
     *@param{Object}hashThehashtomodify.
     *@param{string}keyThekeyofthevaluetoremove.
     *@returns{boolean}Returns`true`iftheentrywasremoved,else`false`.
     */
    functionhashDelete(key){
      varresult=this.has(key)&&deletethis.__data__[key];
      this.size-=result?1:0;
      returnresult;
    }

    /**
     *Getsthehashvaluefor`key`.
     *
     *@private
     *@nameget
     *@memberOfHash
     *@param{string}keyThekeyofthevaluetoget.
     *@returns{*}Returnstheentryvalue.
     */
    functionhashGet(key){
      vardata=this.__data__;
      if(nativeCreate){
        varresult=data[key];
        returnresult===HASH_UNDEFINED?undefined:result;
      }
      returnhasOwnProperty.call(data,key)?data[key]:undefined;
    }

    /**
     *Checksifahashvaluefor`key`exists.
     *
     *@private
     *@namehas
     *@memberOfHash
     *@param{string}keyThekeyoftheentrytocheck.
     *@returns{boolean}Returns`true`ifanentryfor`key`exists,else`false`.
     */
    functionhashHas(key){
      vardata=this.__data__;
      returnnativeCreate?(data[key]!==undefined):hasOwnProperty.call(data,key);
    }

    /**
     *Setsthehash`key`to`value`.
     *
     *@private
     *@nameset
     *@memberOfHash
     *@param{string}keyThekeyofthevaluetoset.
     *@param{*}valueThevaluetoset.
     *@returns{Object}Returnsthehashinstance.
     */
    functionhashSet(key,value){
      vardata=this.__data__;
      this.size+=this.has(key)?0:1;
      data[key]=(nativeCreate&&value===undefined)?HASH_UNDEFINED:value;
      returnthis;
    }

    //Addmethodsto`Hash`.
    Hash.prototype.clear=hashClear;
    Hash.prototype['delete']=hashDelete;
    Hash.prototype.get=hashGet;
    Hash.prototype.has=hashHas;
    Hash.prototype.set=hashSet;

    /*------------------------------------------------------------------------*/

    /**
     *Createsanlistcacheobject.
     *
     *@private
     *@constructor
     *@param{Array}[entries]Thekey-valuepairstocache.
     */
    functionListCache(entries){
      varindex=-1,
          length=entries==null?0:entries.length;

      this.clear();
      while(++index<length){
        varentry=entries[index];
        this.set(entry[0],entry[1]);
      }
    }

    /**
     *Removesallkey-valueentriesfromthelistcache.
     *
     *@private
     *@nameclear
     *@memberOfListCache
     */
    functionlistCacheClear(){
      this.__data__=[];
      this.size=0;
    }

    /**
     *Removes`key`anditsvaluefromthelistcache.
     *
     *@private
     *@namedelete
     *@memberOfListCache
     *@param{string}keyThekeyofthevaluetoremove.
     *@returns{boolean}Returns`true`iftheentrywasremoved,else`false`.
     */
    functionlistCacheDelete(key){
      vardata=this.__data__,
          index=assocIndexOf(data,key);

      if(index<0){
        returnfalse;
      }
      varlastIndex=data.length-1;
      if(index==lastIndex){
        data.pop();
      }else{
        splice.call(data,index,1);
      }
      --this.size;
      returntrue;
    }

    /**
     *Getsthelistcachevaluefor`key`.
     *
     *@private
     *@nameget
     *@memberOfListCache
     *@param{string}keyThekeyofthevaluetoget.
     *@returns{*}Returnstheentryvalue.
     */
    functionlistCacheGet(key){
      vardata=this.__data__,
          index=assocIndexOf(data,key);

      returnindex<0?undefined:data[index][1];
    }

    /**
     *Checksifalistcachevaluefor`key`exists.
     *
     *@private
     *@namehas
     *@memberOfListCache
     *@param{string}keyThekeyoftheentrytocheck.
     *@returns{boolean}Returns`true`ifanentryfor`key`exists,else`false`.
     */
    functionlistCacheHas(key){
      returnassocIndexOf(this.__data__,key)>-1;
    }

    /**
     *Setsthelistcache`key`to`value`.
     *
     *@private
     *@nameset
     *@memberOfListCache
     *@param{string}keyThekeyofthevaluetoset.
     *@param{*}valueThevaluetoset.
     *@returns{Object}Returnsthelistcacheinstance.
     */
    functionlistCacheSet(key,value){
      vardata=this.__data__,
          index=assocIndexOf(data,key);

      if(index<0){
        ++this.size;
        data.push([key,value]);
      }else{
        data[index][1]=value;
      }
      returnthis;
    }

    //Addmethodsto`ListCache`.
    ListCache.prototype.clear=listCacheClear;
    ListCache.prototype['delete']=listCacheDelete;
    ListCache.prototype.get=listCacheGet;
    ListCache.prototype.has=listCacheHas;
    ListCache.prototype.set=listCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     *Createsamapcacheobjecttostorekey-valuepairs.
     *
     *@private
     *@constructor
     *@param{Array}[entries]Thekey-valuepairstocache.
     */
    functionMapCache(entries){
      varindex=-1,
          length=entries==null?0:entries.length;

      this.clear();
      while(++index<length){
        varentry=entries[index];
        this.set(entry[0],entry[1]);
      }
    }

    /**
     *Removesallkey-valueentriesfromthemap.
     *
     *@private
     *@nameclear
     *@memberOfMapCache
     */
    functionmapCacheClear(){
      this.size=0;
      this.__data__={
        'hash':newHash,
        'map':new(Map||ListCache),
        'string':newHash
      };
    }

    /**
     *Removes`key`anditsvaluefromthemap.
     *
     *@private
     *@namedelete
     *@memberOfMapCache
     *@param{string}keyThekeyofthevaluetoremove.
     *@returns{boolean}Returns`true`iftheentrywasremoved,else`false`.
     */
    functionmapCacheDelete(key){
      varresult=getMapData(this,key)['delete'](key);
      this.size-=result?1:0;
      returnresult;
    }

    /**
     *Getsthemapvaluefor`key`.
     *
     *@private
     *@nameget
     *@memberOfMapCache
     *@param{string}keyThekeyofthevaluetoget.
     *@returns{*}Returnstheentryvalue.
     */
    functionmapCacheGet(key){
      returngetMapData(this,key).get(key);
    }

    /**
     *Checksifamapvaluefor`key`exists.
     *
     *@private
     *@namehas
     *@memberOfMapCache
     *@param{string}keyThekeyoftheentrytocheck.
     *@returns{boolean}Returns`true`ifanentryfor`key`exists,else`false`.
     */
    functionmapCacheHas(key){
      returngetMapData(this,key).has(key);
    }

    /**
     *Setsthemap`key`to`value`.
     *
     *@private
     *@nameset
     *@memberOfMapCache
     *@param{string}keyThekeyofthevaluetoset.
     *@param{*}valueThevaluetoset.
     *@returns{Object}Returnsthemapcacheinstance.
     */
    functionmapCacheSet(key,value){
      vardata=getMapData(this,key),
          size=data.size;

      data.set(key,value);
      this.size+=data.size==size?0:1;
      returnthis;
    }

    //Addmethodsto`MapCache`.
    MapCache.prototype.clear=mapCacheClear;
    MapCache.prototype['delete']=mapCacheDelete;
    MapCache.prototype.get=mapCacheGet;
    MapCache.prototype.has=mapCacheHas;
    MapCache.prototype.set=mapCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     *
     *Createsanarraycacheobjecttostoreuniquevalues.
     *
     *@private
     *@constructor
     *@param{Array}[values]Thevaluestocache.
     */
    functionSetCache(values){
      varindex=-1,
          length=values==null?0:values.length;

      this.__data__=newMapCache;
      while(++index<length){
        this.add(values[index]);
      }
    }

    /**
     *Adds`value`tothearraycache.
     *
     *@private
     *@nameadd
     *@memberOfSetCache
     *@aliaspush
     *@param{*}valueThevaluetocache.
     *@returns{Object}Returnsthecacheinstance.
     */
    functionsetCacheAdd(value){
      this.__data__.set(value,HASH_UNDEFINED);
      returnthis;
    }

    /**
     *Checksif`value`isinthearraycache.
     *
     *@private
     *@namehas
     *@memberOfSetCache
     *@param{*}valueThevaluetosearchfor.
     *@returns{number}Returns`true`if`value`isfound,else`false`.
     */
    functionsetCacheHas(value){
      returnthis.__data__.has(value);
    }

    //Addmethodsto`SetCache`.
    SetCache.prototype.add=SetCache.prototype.push=setCacheAdd;
    SetCache.prototype.has=setCacheHas;

    /*------------------------------------------------------------------------*/

    /**
     *Createsastackcacheobjecttostorekey-valuepairs.
     *
     *@private
     *@constructor
     *@param{Array}[entries]Thekey-valuepairstocache.
     */
    functionStack(entries){
      vardata=this.__data__=newListCache(entries);
      this.size=data.size;
    }

    /**
     *Removesallkey-valueentriesfromthestack.
     *
     *@private
     *@nameclear
     *@memberOfStack
     */
    functionstackClear(){
      this.__data__=newListCache;
      this.size=0;
    }

    /**
     *Removes`key`anditsvaluefromthestack.
     *
     *@private
     *@namedelete
     *@memberOfStack
     *@param{string}keyThekeyofthevaluetoremove.
     *@returns{boolean}Returns`true`iftheentrywasremoved,else`false`.
     */
    functionstackDelete(key){
      vardata=this.__data__,
          result=data['delete'](key);

      this.size=data.size;
      returnresult;
    }

    /**
     *Getsthestackvaluefor`key`.
     *
     *@private
     *@nameget
     *@memberOfStack
     *@param{string}keyThekeyofthevaluetoget.
     *@returns{*}Returnstheentryvalue.
     */
    functionstackGet(key){
      returnthis.__data__.get(key);
    }

    /**
     *Checksifastackvaluefor`key`exists.
     *
     *@private
     *@namehas
     *@memberOfStack
     *@param{string}keyThekeyoftheentrytocheck.
     *@returns{boolean}Returns`true`ifanentryfor`key`exists,else`false`.
     */
    functionstackHas(key){
      returnthis.__data__.has(key);
    }

    /**
     *Setsthestack`key`to`value`.
     *
     *@private
     *@nameset
     *@memberOfStack
     *@param{string}keyThekeyofthevaluetoset.
     *@param{*}valueThevaluetoset.
     *@returns{Object}Returnsthestackcacheinstance.
     */
    functionstackSet(key,value){
      vardata=this.__data__;
      if(datainstanceofListCache){
        varpairs=data.__data__;
        if(!Map||(pairs.length<LARGE_ARRAY_SIZE-1)){
          pairs.push([key,value]);
          this.size=++data.size;
          returnthis;
        }
        data=this.__data__=newMapCache(pairs);
      }
      data.set(key,value);
      this.size=data.size;
      returnthis;
    }

    //Addmethodsto`Stack`.
    Stack.prototype.clear=stackClear;
    Stack.prototype['delete']=stackDelete;
    Stack.prototype.get=stackGet;
    Stack.prototype.has=stackHas;
    Stack.prototype.set=stackSet;

    /*------------------------------------------------------------------------*/

    /**
     *Createsanarrayoftheenumerablepropertynamesofthearray-like`value`.
     *
     *@private
     *@param{*}valueThevaluetoquery.
     *@param{boolean}inheritedSpecifyreturninginheritedpropertynames.
     *@returns{Array}Returnsthearrayofpropertynames.
     */
    functionarrayLikeKeys(value,inherited){
      varisArr=isArray(value),
          isArg=!isArr&&isArguments(value),
          isBuff=!isArr&&!isArg&&isBuffer(value),
          isType=!isArr&&!isArg&&!isBuff&&isTypedArray(value),
          skipIndexes=isArr||isArg||isBuff||isType,
          result=skipIndexes?baseTimes(value.length,String):[],
          length=result.length;

      for(varkeyinvalue){
        if((inherited||hasOwnProperty.call(value,key))&&
            !(skipIndexes&&(
               //Safari9hasenumerable`arguments.length`instrictmode.
               key=='length'||
               //Node.js0.10hasenumerablenon-indexpropertiesonbuffers.
               (isBuff&&(key=='offset'||key=='parent'))||
               //PhantomJS2hasenumerablenon-indexpropertiesontypedarrays.
               (isType&&(key=='buffer'||key=='byteLength'||key=='byteOffset'))||
               //Skipindexproperties.
               isIndex(key,length)
            ))){
          result.push(key);
        }
      }
      returnresult;
    }

    /**
     *Aspecializedversionof`_.sample`forarrays.
     *
     *@private
     *@param{Array}arrayThearraytosample.
     *@returns{*}Returnstherandomelement.
     */
    functionarraySample(array){
      varlength=array.length;
      returnlength?array[baseRandom(0,length-1)]:undefined;
    }

    /**
     *Aspecializedversionof`_.sampleSize`forarrays.
     *
     *@private
     *@param{Array}arrayThearraytosample.
     *@param{number}nThenumberofelementstosample.
     *@returns{Array}Returnstherandomelements.
     */
    functionarraySampleSize(array,n){
      returnshuffleSelf(copyArray(array),baseClamp(n,0,array.length));
    }

    /**
     *Aspecializedversionof`_.shuffle`forarrays.
     *
     *@private
     *@param{Array}arrayThearraytoshuffle.
     *@returns{Array}Returnsthenewshuffledarray.
     */
    functionarrayShuffle(array){
      returnshuffleSelf(copyArray(array));
    }

    /**
     *Thisfunctionislike`assignValue`exceptthatitdoesn'tassign
     *`undefined`values.
     *
     *@private
     *@param{Object}objectTheobjecttomodify.
     *@param{string}keyThekeyofthepropertytoassign.
     *@param{*}valueThevaluetoassign.
     */
    functionassignMergeValue(object,key,value){
      if((value!==undefined&&!eq(object[key],value))||
          (value===undefined&&!(keyinobject))){
        baseAssignValue(object,key,value);
      }
    }

    /**
     *Assigns`value`to`key`of`object`iftheexistingvalueisnotequivalent
     *using[`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     *forequalitycomparisons.
     *
     *@private
     *@param{Object}objectTheobjecttomodify.
     *@param{string}keyThekeyofthepropertytoassign.
     *@param{*}valueThevaluetoassign.
     */
    functionassignValue(object,key,value){
      varobjValue=object[key];
      if(!(hasOwnProperty.call(object,key)&&eq(objValue,value))||
          (value===undefined&&!(keyinobject))){
        baseAssignValue(object,key,value);
      }
    }

    /**
     *Getstheindexatwhichthe`key`isfoundin`array`ofkey-valuepairs.
     *
     *@private
     *@param{Array}arrayThearraytoinspect.
     *@param{*}keyThekeytosearchfor.
     *@returns{number}Returnstheindexofthematchedvalue,else`-1`.
     */
    functionassocIndexOf(array,key){
      varlength=array.length;
      while(length--){
        if(eq(array[length][0],key)){
          returnlength;
        }
      }
      return-1;
    }

    /**
     *Aggregateselementsof`collection`on`accumulator`withkeystransformed
     *by`iteratee`andvaluessetby`setter`.
     *
     *@private
     *@param{Array|Object}collectionThecollectiontoiterateover.
     *@param{Function}setterThefunctiontoset`accumulator`values.
     *@param{Function}iterateeTheiterateetotransformkeys.
     *@param{Object}accumulatorTheinitialaggregatedobject.
     *@returns{Function}Returns`accumulator`.
     */
    functionbaseAggregator(collection,setter,iteratee,accumulator){
      baseEach(collection,function(value,key,collection){
        setter(accumulator,value,iteratee(value),collection);
      });
      returnaccumulator;
    }

    /**
     *Thebaseimplementationof`_.assign`withoutsupportformultiplesources
     *or`customizer`functions.
     *
     *@private
     *@param{Object}objectThedestinationobject.
     *@param{Object}sourceThesourceobject.
     *@returns{Object}Returns`object`.
     */
    functionbaseAssign(object,source){
      returnobject&&copyObject(source,keys(source),object);
    }

    /**
     *Thebaseimplementationof`_.assignIn`withoutsupportformultiplesources
     *or`customizer`functions.
     *
     *@private
     *@param{Object}objectThedestinationobject.
     *@param{Object}sourceThesourceobject.
     *@returns{Object}Returns`object`.
     */
    functionbaseAssignIn(object,source){
      returnobject&&copyObject(source,keysIn(source),object);
    }

    /**
     *Thebaseimplementationof`assignValue`and`assignMergeValue`without
     *valuechecks.
     *
     *@private
     *@param{Object}objectTheobjecttomodify.
     *@param{string}keyThekeyofthepropertytoassign.
     *@param{*}valueThevaluetoassign.
     */
    functionbaseAssignValue(object,key,value){
      if(key=='__proto__'&&defineProperty){
        defineProperty(object,key,{
          'configurable':true,
          'enumerable':true,
          'value':value,
          'writable':true
        });
      }else{
        object[key]=value;
      }
    }

    /**
     *Thebaseimplementationof`_.at`withoutsupportforindividualpaths.
     *
     *@private
     *@param{Object}objectTheobjecttoiterateover.
     *@param{string[]}pathsThepropertypathstopick.
     *@returns{Array}Returnsthepickedelements.
     */
    functionbaseAt(object,paths){
      varindex=-1,
          length=paths.length,
          result=Array(length),
          skip=object==null;

      while(++index<length){
        result[index]=skip?undefined:get(object,paths[index]);
      }
      returnresult;
    }

    /**
     *Thebaseimplementationof`_.clamp`whichdoesn'tcoercearguments.
     *
     *@private
     *@param{number}numberThenumbertoclamp.
     *@param{number}[lower]Thelowerbound.
     *@param{number}upperTheupperbound.
     *@returns{number}Returnstheclampednumber.
     */
    functionbaseClamp(number,lower,upper){
      if(number===number){
        if(upper!==undefined){
          number=number<=upper?number:upper;
        }
        if(lower!==undefined){
          number=number>=lower?number:lower;
        }
      }
      returnnumber;
    }

    /**
     *Thebaseimplementationof`_.clone`and`_.cloneDeep`whichtracks
     *traversedobjects.
     *
     *@private
     *@param{*}valueThevaluetoclone.
     *@param{boolean}bitmaskThebitmaskflags.
     * 1-Deepclone
     * 2-Flatteninheritedproperties
     * 4-Clonesymbols
     *@param{Function}[customizer]Thefunctiontocustomizecloning.
     *@param{string}[key]Thekeyof`value`.
     *@param{Object}[object]Theparentobjectof`value`.
     *@param{Object}[stack]Trackstraversedobjectsandtheirclonecounterparts.
     *@returns{*}Returnstheclonedvalue.
     */
    functionbaseClone(value,bitmask,customizer,key,object,stack){
      varresult,
          isDeep=bitmask&CLONE_DEEP_FLAG,
          isFlat=bitmask&CLONE_FLAT_FLAG,
          isFull=bitmask&CLONE_SYMBOLS_FLAG;

      if(customizer){
        result=object?customizer(value,key,object,stack):customizer(value);
      }
      if(result!==undefined){
        returnresult;
      }
      if(!isObject(value)){
        returnvalue;
      }
      varisArr=isArray(value);
      if(isArr){
        result=initCloneArray(value);
        if(!isDeep){
          returncopyArray(value,result);
        }
      }else{
        vartag=getTag(value),
            isFunc=tag==funcTag||tag==genTag;

        if(isBuffer(value)){
          returncloneBuffer(value,isDeep);
        }
        if(tag==objectTag||tag==argsTag||(isFunc&&!object)){
          result=(isFlat||isFunc)?{}:initCloneObject(value);
          if(!isDeep){
            returnisFlat
              ?copySymbolsIn(value,baseAssignIn(result,value))
              :copySymbols(value,baseAssign(result,value));
          }
        }else{
          if(!cloneableTags[tag]){
            returnobject?value:{};
          }
          result=initCloneByTag(value,tag,baseClone,isDeep);
        }
      }
      //Checkforcircularreferencesandreturnitscorrespondingclone.
      stack||(stack=newStack);
      varstacked=stack.get(value);
      if(stacked){
        returnstacked;
      }
      stack.set(value,result);

      varkeysFunc=isFull
        ?(isFlat?getAllKeysIn:getAllKeys)
        :(isFlat?keysIn:keys);

      varprops=isArr?undefined:keysFunc(value);
      arrayEach(props||value,function(subValue,key){
        if(props){
          key=subValue;
          subValue=value[key];
        }
        //Recursivelypopulateclone(susceptibletocallstacklimits).
        assignValue(result,key,baseClone(subValue,bitmask,customizer,key,value,stack));
      });
      returnresult;
    }

    /**
     *Thebaseimplementationof`_.conforms`whichdoesn'tclone`source`.
     *
     *@private
     *@param{Object}sourceTheobjectofpropertypredicatestoconformto.
     *@returns{Function}Returnsthenewspecfunction.
     */
    functionbaseConforms(source){
      varprops=keys(source);
      returnfunction(object){
        returnbaseConformsTo(object,source,props);
      };
    }

    /**
     *Thebaseimplementationof`_.conformsTo`whichaccepts`props`tocheck.
     *
     *@private
     *@param{Object}objectTheobjecttoinspect.
     *@param{Object}sourceTheobjectofpropertypredicatestoconformto.
     *@returns{boolean}Returns`true`if`object`conforms,else`false`.
     */
    functionbaseConformsTo(object,source,props){
      varlength=props.length;
      if(object==null){
        return!length;
      }
      object=Object(object);
      while(length--){
        varkey=props[length],
            predicate=source[key],
            value=object[key];

        if((value===undefined&&!(keyinobject))||!predicate(value)){
          returnfalse;
        }
      }
      returntrue;
    }

    /**
     *Thebaseimplementationof`_.delay`and`_.defer`whichaccepts`args`
     *toprovideto`func`.
     *
     *@private
     *@param{Function}funcThefunctiontodelay.
     *@param{number}waitThenumberofmillisecondstodelayinvocation.
     *@param{Array}argsTheargumentstoprovideto`func`.
     *@returns{number|Object}Returnsthetimeridortimeoutobject.
     */
    functionbaseDelay(func,wait,args){
      if(typeoffunc!='function'){
        thrownewTypeError(FUNC_ERROR_TEXT);
      }
      returnsetTimeout(function(){func.apply(undefined,args);},wait);
    }

    /**
     *Thebaseimplementationofmethodslike`_.difference`withoutsupport
     *forexcludingmultiplearraysoriterateeshorthands.
     *
     *@private
     *@param{Array}arrayThearraytoinspect.
     *@param{Array}valuesThevaluestoexclude.
     *@param{Function}[iteratee]Theiterateeinvokedperelement.
     *@param{Function}[comparator]Thecomparatorinvokedperelement.
     *@returns{Array}Returnsthenewarrayoffilteredvalues.
     */
    functionbaseDifference(array,values,iteratee,comparator){
      varindex=-1,
          includes=arrayIncludes,
          isCommon=true,
          length=array.length,
          result=[],
          valuesLength=values.length;

      if(!length){
        returnresult;
      }
      if(iteratee){
        values=arrayMap(values,baseUnary(iteratee));
      }
      if(comparator){
        includes=arrayIncludesWith;
        isCommon=false;
      }
      elseif(values.length>=LARGE_ARRAY_SIZE){
        includes=cacheHas;
        isCommon=false;
        values=newSetCache(values);
      }
      outer:
      while(++index<length){
        varvalue=array[index],
            computed=iteratee==null?value:iteratee(value);

        value=(comparator||value!==0)?value:0;
        if(isCommon&&computed===computed){
          varvaluesIndex=valuesLength;
          while(valuesIndex--){
            if(values[valuesIndex]===computed){
              continueouter;
            }
          }
          result.push(value);
        }
        elseif(!includes(values,computed,comparator)){
          result.push(value);
        }
      }
      returnresult;
    }

    /**
     *Thebaseimplementationof`_.forEach`withoutsupportforiterateeshorthands.
     *
     *@private
     *@param{Array|Object}collectionThecollectiontoiterateover.
     *@param{Function}iterateeThefunctioninvokedperiteration.
     *@returns{Array|Object}Returns`collection`.
     */
    varbaseEach=createBaseEach(baseForOwn);

    /**
     *Thebaseimplementationof`_.forEachRight`withoutsupportforiterateeshorthands.
     *
     *@private
     *@param{Array|Object}collectionThecollectiontoiterateover.
     *@param{Function}iterateeThefunctioninvokedperiteration.
     *@returns{Array|Object}Returns`collection`.
     */
    varbaseEachRight=createBaseEach(baseForOwnRight,true);

    /**
     *Thebaseimplementationof`_.every`withoutsupportforiterateeshorthands.
     *
     *@private
     *@param{Array|Object}collectionThecollectiontoiterateover.
     *@param{Function}predicateThefunctioninvokedperiteration.
     *@returns{boolean}Returns`true`ifallelementspassthepredicatecheck,
     * else`false`
     */
    functionbaseEvery(collection,predicate){
      varresult=true;
      baseEach(collection,function(value,index,collection){
        result=!!predicate(value,index,collection);
        returnresult;
      });
      returnresult;
    }

    /**
     *Thebaseimplementationofmethodslike`_.max`and`_.min`whichacceptsa
     *`comparator`todeterminetheextremumvalue.
     *
     *@private
     *@param{Array}arrayThearraytoiterateover.
     *@param{Function}iterateeTheiterateeinvokedperiteration.
     *@param{Function}comparatorThecomparatorusedtocomparevalues.
     *@returns{*}Returnstheextremumvalue.
     */
    functionbaseExtremum(array,iteratee,comparator){
      varindex=-1,
          length=array.length;

      while(++index<length){
        varvalue=array[index],
            current=iteratee(value);

        if(current!=null&&(computed===undefined
              ?(current===current&&!isSymbol(current))
              :comparator(current,computed)
            )){
          varcomputed=current,
              result=value;
        }
      }
      returnresult;
    }

    /**
     *Thebaseimplementationof`_.fill`withoutaniterateecallguard.
     *
     *@private
     *@param{Array}arrayThearraytofill.
     *@param{*}valueThevaluetofill`array`with.
     *@param{number}[start=0]Thestartposition.
     *@param{number}[end=array.length]Theendposition.
     *@returns{Array}Returns`array`.
     */
    functionbaseFill(array,value,start,end){
      varlength=array.length;

      start=toInteger(start);
      if(start<0){
        start=-start>length?0:(length+start);
      }
      end=(end===undefined||end>length)?length:toInteger(end);
      if(end<0){
        end+=length;
      }
      end=start>end?0:toLength(end);
      while(start<end){
        array[start++]=value;
      }
      returnarray;
    }

    /**
     *Thebaseimplementationof`_.filter`withoutsupportforiterateeshorthands.
     *
     *@private
     *@param{Array|Object}collectionThecollectiontoiterateover.
     *@param{Function}predicateThefunctioninvokedperiteration.
     *@returns{Array}Returnsthenewfilteredarray.
     */
    functionbaseFilter(collection,predicate){
      varresult=[];
      baseEach(collection,function(value,index,collection){
        if(predicate(value,index,collection)){
          result.push(value);
        }
      });
      returnresult;
    }

    /**
     *Thebaseimplementationof`_.flatten`withsupportforrestrictingflattening.
     *
     *@private
     *@param{Array}arrayThearraytoflatten.
     *@param{number}depthThemaximumrecursiondepth.
     *@param{boolean}[predicate=isFlattenable]Thefunctioninvokedperiteration.
     *@param{boolean}[isStrict]Restricttovaluesthatpass`predicate`checks.
     *@param{Array}[result=[]]Theinitialresultvalue.
     *@returns{Array}Returnsthenewflattenedarray.
     */
    functionbaseFlatten(array,depth,predicate,isStrict,result){
      varindex=-1,
          length=array.length;

      predicate||(predicate=isFlattenable);
      result||(result=[]);

      while(++index<length){
        varvalue=array[index];
        if(depth>0&&predicate(value)){
          if(depth>1){
            //Recursivelyflattenarrays(susceptibletocallstacklimits).
            baseFlatten(value,depth-1,predicate,isStrict,result);
          }else{
            arrayPush(result,value);
          }
        }elseif(!isStrict){
          result[result.length]=value;
        }
      }
      returnresult;
    }

    /**
     *Thebaseimplementationof`baseForOwn`whichiteratesover`object`
     *propertiesreturnedby`keysFunc`andinvokes`iteratee`foreachproperty.
     *Iterateefunctionsmayexititerationearlybyexplicitlyreturning`false`.
     *
     *@private
     *@param{Object}objectTheobjecttoiterateover.
     *@param{Function}iterateeThefunctioninvokedperiteration.
     *@param{Function}keysFuncThefunctiontogetthekeysof`object`.
     *@returns{Object}Returns`object`.
     */
    varbaseFor=createBaseFor();

    /**
     *Thisfunctionislike`baseFor`exceptthatititeratesoverproperties
     *intheoppositeorder.
     *
     *@private
     *@param{Object}objectTheobjecttoiterateover.
     *@param{Function}iterateeThefunctioninvokedperiteration.
     *@param{Function}keysFuncThefunctiontogetthekeysof`object`.
     *@returns{Object}Returns`object`.
     */
    varbaseForRight=createBaseFor(true);

    /**
     *Thebaseimplementationof`_.forOwn`withoutsupportforiterateeshorthands.
     *
     *@private
     *@param{Object}objectTheobjecttoiterateover.
     *@param{Function}iterateeThefunctioninvokedperiteration.
     *@returns{Object}Returns`object`.
     */
    functionbaseForOwn(object,iteratee){
      returnobject&&baseFor(object,iteratee,keys);
    }

    /**
     *Thebaseimplementationof`_.forOwnRight`withoutsupportforiterateeshorthands.
     *
     *@private
     *@param{Object}objectTheobjecttoiterateover.
     *@param{Function}iterateeThefunctioninvokedperiteration.
     *@returns{Object}Returns`object`.
     */
    functionbaseForOwnRight(object,iteratee){
      returnobject&&baseForRight(object,iteratee,keys);
    }

    /**
     *Thebaseimplementationof`_.functions`whichcreatesanarrayof
     *`object`functionpropertynamesfilteredfrom`props`.
     *
     *@private
     *@param{Object}objectTheobjecttoinspect.
     *@param{Array}propsThepropertynamestofilter.
     *@returns{Array}Returnsthefunctionnames.
     */
    functionbaseFunctions(object,props){
      returnarrayFilter(props,function(key){
        returnisFunction(object[key]);
      });
    }

    /**
     *Thebaseimplementationof`_.get`withoutsupportfordefaultvalues.
     *
     *@private
     *@param{Object}objectTheobjecttoquery.
     *@param{Array|string}pathThepathofthepropertytoget.
     *@returns{*}Returnstheresolvedvalue.
     */
    functionbaseGet(object,path){
      path=castPath(path,object);

      varindex=0,
          length=path.length;

      while(object!=null&&index<length){
        object=object[toKey(path[index++])];
      }
      return(index&&index==length)?object:undefined;
    }

    /**
     *Thebaseimplementationof`getAllKeys`and`getAllKeysIn`whichuses
     *`keysFunc`and`symbolsFunc`togettheenumerablepropertynamesand
     *symbolsof`object`.
     *
     *@private
     *@param{Object}objectTheobjecttoquery.
     *@param{Function}keysFuncThefunctiontogetthekeysof`object`.
     *@param{Function}symbolsFuncThefunctiontogetthesymbolsof`object`.
     *@returns{Array}Returnsthearrayofpropertynamesandsymbols.
     */
    functionbaseGetAllKeys(object,keysFunc,symbolsFunc){
      varresult=keysFunc(object);
      returnisArray(object)?result:arrayPush(result,symbolsFunc(object));
    }

    /**
     *Thebaseimplementationof`getTag`withoutfallbacksforbuggyenvironments.
     *
     *@private
     *@param{*}valueThevaluetoquery.
     *@returns{string}Returnsthe`toStringTag`.
     */
    functionbaseGetTag(value){
      if(value==null){
        returnvalue===undefined?undefinedTag:nullTag;
      }
      return(symToStringTag&&symToStringTaginObject(value))
        ?getRawTag(value)
        :objectToString(value);
    }

    /**
     *Thebaseimplementationof`_.gt`whichdoesn'tcoercearguments.
     *
     *@private
     *@param{*}valueThevaluetocompare.
     *@param{*}otherTheothervaluetocompare.
     *@returns{boolean}Returns`true`if`value`isgreaterthan`other`,
     * else`false`.
     */
    functionbaseGt(value,other){
      returnvalue>other;
    }

    /**
     *Thebaseimplementationof`_.has`withoutsupportfordeeppaths.
     *
     *@private
     *@param{Object}[object]Theobjecttoquery.
     *@param{Array|string}keyThekeytocheck.
     *@returns{boolean}Returns`true`if`key`exists,else`false`.
     */
    functionbaseHas(object,key){
      returnobject!=null&&hasOwnProperty.call(object,key);
    }

    /**
     *Thebaseimplementationof`_.hasIn`withoutsupportfordeeppaths.
     *
     *@private
     *@param{Object}[object]Theobjecttoquery.
     *@param{Array|string}keyThekeytocheck.
     *@returns{boolean}Returns`true`if`key`exists,else`false`.
     */
    functionbaseHasIn(object,key){
      returnobject!=null&&keyinObject(object);
    }

    /**
     *Thebaseimplementationof`_.inRange`whichdoesn'tcoercearguments.
     *
     *@private
     *@param{number}numberThenumbertocheck.
     *@param{number}startThestartoftherange.
     *@param{number}endTheendoftherange.
     *@returns{boolean}Returns`true`if`number`isintherange,else`false`.
     */
    functionbaseInRange(number,start,end){
      returnnumber>=nativeMin(start,end)&&number<nativeMax(start,end);
    }

    /**
     *Thebaseimplementationofmethodslike`_.intersection`,withoutsupport
     *foriterateeshorthands,thatacceptsanarrayofarraystoinspect.
     *
     *@private
     *@param{Array}arraysThearraystoinspect.
     *@param{Function}[iteratee]Theiterateeinvokedperelement.
     *@param{Function}[comparator]Thecomparatorinvokedperelement.
     *@returns{Array}Returnsthenewarrayofsharedvalues.
     */
    functionbaseIntersection(arrays,iteratee,comparator){
      varincludes=comparator?arrayIncludesWith:arrayIncludes,
          length=arrays[0].length,
          othLength=arrays.length,
          othIndex=othLength,
          caches=Array(othLength),
          maxLength=Infinity,
          result=[];

      while(othIndex--){
        vararray=arrays[othIndex];
        if(othIndex&&iteratee){
          array=arrayMap(array,baseUnary(iteratee));
        }
        maxLength=nativeMin(array.length,maxLength);
        caches[othIndex]=!comparator&&(iteratee||(length>=120&&array.length>=120))
          ?newSetCache(othIndex&&array)
          :undefined;
      }
      array=arrays[0];

      varindex=-1,
          seen=caches[0];

      outer:
      while(++index<length&&result.length<maxLength){
        varvalue=array[index],
            computed=iteratee?iteratee(value):value;

        value=(comparator||value!==0)?value:0;
        if(!(seen
              ?cacheHas(seen,computed)
              :includes(result,computed,comparator)
            )){
          othIndex=othLength;
          while(--othIndex){
            varcache=caches[othIndex];
            if(!(cache
                  ?cacheHas(cache,computed)
                  :includes(arrays[othIndex],computed,comparator))
                ){
              continueouter;
            }
          }
          if(seen){
            seen.push(computed);
          }
          result.push(value);
        }
      }
      returnresult;
    }

    /**
     *Thebaseimplementationof`_.invert`and`_.invertBy`whichinverts
     *`object`withvaluestransformedby`iteratee`andsetby`setter`.
     *
     *@private
     *@param{Object}objectTheobjecttoiterateover.
     *@param{Function}setterThefunctiontoset`accumulator`values.
     *@param{Function}iterateeTheiterateetotransformvalues.
     *@param{Object}accumulatorTheinitialinvertedobject.
     *@returns{Function}Returns`accumulator`.
     */
    functionbaseInverter(object,setter,iteratee,accumulator){
      baseForOwn(object,function(value,key,object){
        setter(accumulator,iteratee(value),key,object);
      });
      returnaccumulator;
    }

    /**
     *Thebaseimplementationof`_.invoke`withoutsupportforindividual
     *methodarguments.
     *
     *@private
     *@param{Object}objectTheobjecttoquery.
     *@param{Array|string}pathThepathofthemethodtoinvoke.
     *@param{Array}argsTheargumentstoinvokethemethodwith.
     *@returns{*}Returnstheresultoftheinvokedmethod.
     */
    functionbaseInvoke(object,path,args){
      path=castPath(path,object);
      object=parent(object,path);
      varfunc=object==null?object:object[toKey(last(path))];
      returnfunc==null?undefined:apply(func,object,args);
    }

    /**
     *Thebaseimplementationof`_.isArguments`.
     *
     *@private
     *@param{*}valueThevaluetocheck.
     *@returns{boolean}Returns`true`if`value`isan`arguments`object,
     */
    functionbaseIsArguments(value){
      returnisObjectLike(value)&&baseGetTag(value)==argsTag;
    }

    /**
     *Thebaseimplementationof`_.isArrayBuffer`withoutNode.jsoptimizations.
     *
     *@private
     *@param{*}valueThevaluetocheck.
     *@returns{boolean}Returns`true`if`value`isanarraybuffer,else`false`.
     */
    functionbaseIsArrayBuffer(value){
      returnisObjectLike(value)&&baseGetTag(value)==arrayBufferTag;
    }

    /**
     *Thebaseimplementationof`_.isDate`withoutNode.jsoptimizations.
     *
     *@private
     *@param{*}valueThevaluetocheck.
     *@returns{boolean}Returns`true`if`value`isadateobject,else`false`.
     */
    functionbaseIsDate(value){
      returnisObjectLike(value)&&baseGetTag(value)==dateTag;
    }

    /**
     *Thebaseimplementationof`_.isEqual`whichsupportspartialcomparisons
     *andtrackstraversedobjects.
     *
     *@private
     *@param{*}valueThevaluetocompare.
     *@param{*}otherTheothervaluetocompare.
     *@param{boolean}bitmaskThebitmaskflags.
     * 1-Unorderedcomparison
     * 2-Partialcomparison
     *@param{Function}[customizer]Thefunctiontocustomizecomparisons.
     *@param{Object}[stack]Trackstraversed`value`and`other`objects.
     *@returns{boolean}Returns`true`ifthevaluesareequivalent,else`false`.
     */
    functionbaseIsEqual(value,other,bitmask,customizer,stack){
      if(value===other){
        returntrue;
      }
      if(value==null||other==null||(!isObjectLike(value)&&!isObjectLike(other))){
        returnvalue!==value&&other!==other;
      }
      returnbaseIsEqualDeep(value,other,bitmask,customizer,baseIsEqual,stack);
    }

    /**
     *Aspecializedversionof`baseIsEqual`forarraysandobjectswhichperforms
     *deepcomparisonsandtrackstraversedobjectsenablingobjectswithcircular
     *referencestobecompared.
     *
     *@private
     *@param{Object}objectTheobjecttocompare.
     *@param{Object}otherTheotherobjecttocompare.
     *@param{number}bitmaskThebitmaskflags.See`baseIsEqual`formoredetails.
     *@param{Function}customizerThefunctiontocustomizecomparisons.
     *@param{Function}equalFuncThefunctiontodetermineequivalentsofvalues.
     *@param{Object}[stack]Trackstraversed`object`and`other`objects.
     *@returns{boolean}Returns`true`iftheobjectsareequivalent,else`false`.
     */
    functionbaseIsEqualDeep(object,other,bitmask,customizer,equalFunc,stack){
      varobjIsArr=isArray(object),
          othIsArr=isArray(other),
          objTag=objIsArr?arrayTag:getTag(object),
          othTag=othIsArr?arrayTag:getTag(other);

      objTag=objTag==argsTag?objectTag:objTag;
      othTag=othTag==argsTag?objectTag:othTag;

      varobjIsObj=objTag==objectTag,
          othIsObj=othTag==objectTag,
          isSameTag=objTag==othTag;

      if(isSameTag&&isBuffer(object)){
        if(!isBuffer(other)){
          returnfalse;
        }
        objIsArr=true;
        objIsObj=false;
      }
      if(isSameTag&&!objIsObj){
        stack||(stack=newStack);
        return(objIsArr||isTypedArray(object))
          ?equalArrays(object,other,bitmask,customizer,equalFunc,stack)
          :equalByTag(object,other,objTag,bitmask,customizer,equalFunc,stack);
      }
      if(!(bitmask&COMPARE_PARTIAL_FLAG)){
        varobjIsWrapped=objIsObj&&hasOwnProperty.call(object,'__wrapped__'),
            othIsWrapped=othIsObj&&hasOwnProperty.call(other,'__wrapped__');

        if(objIsWrapped||othIsWrapped){
          varobjUnwrapped=objIsWrapped?object.value():object,
              othUnwrapped=othIsWrapped?other.value():other;

          stack||(stack=newStack);
          returnequalFunc(objUnwrapped,othUnwrapped,bitmask,customizer,stack);
        }
      }
      if(!isSameTag){
        returnfalse;
      }
      stack||(stack=newStack);
      returnequalObjects(object,other,bitmask,customizer,equalFunc,stack);
    }

    /**
     *Thebaseimplementationof`_.isMap`withoutNode.jsoptimizations.
     *
     *@private
     *@param{*}valueThevaluetocheck.
     *@returns{boolean}Returns`true`if`value`isamap,else`false`.
     */
    functionbaseIsMap(value){
      returnisObjectLike(value)&&getTag(value)==mapTag;
    }

    /**
     *Thebaseimplementationof`_.isMatch`withoutsupportforiterateeshorthands.
     *
     *@private
     *@param{Object}objectTheobjecttoinspect.
     *@param{Object}sourceTheobjectofpropertyvaluestomatch.
     *@param{Array}matchDataThepropertynames,values,andcompareflagstomatch.
     *@param{Function}[customizer]Thefunctiontocustomizecomparisons.
     *@returns{boolean}Returns`true`if`object`isamatch,else`false`.
     */
    functionbaseIsMatch(object,source,matchData,customizer){
      varindex=matchData.length,
          length=index,
          noCustomizer=!customizer;

      if(object==null){
        return!length;
      }
      object=Object(object);
      while(index--){
        vardata=matchData[index];
        if((noCustomizer&&data[2])
              ?data[1]!==object[data[0]]
              :!(data[0]inobject)
            ){
          returnfalse;
        }
      }
      while(++index<length){
        data=matchData[index];
        varkey=data[0],
            objValue=object[key],
            srcValue=data[1];

        if(noCustomizer&&data[2]){
          if(objValue===undefined&&!(keyinobject)){
            returnfalse;
          }
        }else{
          varstack=newStack;
          if(customizer){
            varresult=customizer(objValue,srcValue,key,object,source,stack);
          }
          if(!(result===undefined
                ?baseIsEqual(srcValue,objValue,COMPARE_PARTIAL_FLAG|COMPARE_UNORDERED_FLAG,customizer,stack)
                :result
              )){
            returnfalse;
          }
        }
      }
      returntrue;
    }

    /**
     *Thebaseimplementationof`_.isNative`withoutbadshimchecks.
     *
     *@private
     *@param{*}valueThevaluetocheck.
     *@returns{boolean}Returns`true`if`value`isanativefunction,
     * else`false`.
     */
    functionbaseIsNative(value){
      if(!isObject(value)||isMasked(value)){
        returnfalse;
      }
      varpattern=isFunction(value)?reIsNative:reIsHostCtor;
      returnpattern.test(toSource(value));
    }

    /**
     *Thebaseimplementationof`_.isRegExp`withoutNode.jsoptimizations.
     *
     *@private
     *@param{*}valueThevaluetocheck.
     *@returns{boolean}Returns`true`if`value`isaregexp,else`false`.
     */
    functionbaseIsRegExp(value){
      returnisObjectLike(value)&&baseGetTag(value)==regexpTag;
    }

    /**
     *Thebaseimplementationof`_.isSet`withoutNode.jsoptimizations.
     *
     *@private
     *@param{*}valueThevaluetocheck.
     *@returns{boolean}Returns`true`if`value`isaset,else`false`.
     */
    functionbaseIsSet(value){
      returnisObjectLike(value)&&getTag(value)==setTag;
    }

    /**
     *Thebaseimplementationof`_.isTypedArray`withoutNode.jsoptimizations.
     *
     *@private
     *@param{*}valueThevaluetocheck.
     *@returns{boolean}Returns`true`if`value`isatypedarray,else`false`.
     */
    functionbaseIsTypedArray(value){
      returnisObjectLike(value)&&
        isLength(value.length)&&!!typedArrayTags[baseGetTag(value)];
    }

    /**
     *Thebaseimplementationof`_.iteratee`.
     *
     *@private
     *@param{*}[value=_.identity]Thevaluetoconverttoaniteratee.
     *@returns{Function}Returnstheiteratee.
     */
    functionbaseIteratee(value){
      //Don'tstorethe`typeof`resultinavariabletoavoidaJITbuginSafari9.
      //Seehttps://bugs.webkit.org/show_bug.cgi?id=156034formoredetails.
      if(typeofvalue=='function'){
        returnvalue;
      }
      if(value==null){
        returnidentity;
      }
      if(typeofvalue=='object'){
        returnisArray(value)
          ?baseMatchesProperty(value[0],value[1])
          :baseMatches(value);
      }
      returnproperty(value);
    }

    /**
     *Thebaseimplementationof`_.keys`whichdoesn'ttreatsparsearraysasdense.
     *
     *@private
     *@param{Object}objectTheobjecttoquery.
     *@returns{Array}Returnsthearrayofpropertynames.
     */
    functionbaseKeys(object){
      if(!isPrototype(object)){
        returnnativeKeys(object);
      }
      varresult=[];
      for(varkeyinObject(object)){
        if(hasOwnProperty.call(object,key)&&key!='constructor'){
          result.push(key);
        }
      }
      returnresult;
    }

    /**
     *Thebaseimplementationof`_.keysIn`whichdoesn'ttreatsparsearraysasdense.
     *
     *@private
     *@param{Object}objectTheobjecttoquery.
     *@returns{Array}Returnsthearrayofpropertynames.
     */
    functionbaseKeysIn(object){
      if(!isObject(object)){
        returnnativeKeysIn(object);
      }
      varisProto=isPrototype(object),
          result=[];

      for(varkeyinobject){
        if(!(key=='constructor'&&(isProto||!hasOwnProperty.call(object,key)))){
          result.push(key);
        }
      }
      returnresult;
    }

    /**
     *Thebaseimplementationof`_.lt`whichdoesn'tcoercearguments.
     *
     *@private
     *@param{*}valueThevaluetocompare.
     *@param{*}otherTheothervaluetocompare.
     *@returns{boolean}Returns`true`if`value`islessthan`other`,
     * else`false`.
     */
    functionbaseLt(value,other){
      returnvalue<other;
    }

    /**
     *Thebaseimplementationof`_.map`withoutsupportforiterateeshorthands.
     *
     *@private
     *@param{Array|Object}collectionThecollectiontoiterateover.
     *@param{Function}iterateeThefunctioninvokedperiteration.
     *@returns{Array}Returnsthenewmappedarray.
     */
    functionbaseMap(collection,iteratee){
      varindex=-1,
          result=isArrayLike(collection)?Array(collection.length):[];

      baseEach(collection,function(value,key,collection){
        result[++index]=iteratee(value,key,collection);
      });
      returnresult;
    }

    /**
     *Thebaseimplementationof`_.matches`whichdoesn'tclone`source`.
     *
     *@private
     *@param{Object}sourceTheobjectofpropertyvaluestomatch.
     *@returns{Function}Returnsthenewspecfunction.
     */
    functionbaseMatches(source){
      varmatchData=getMatchData(source);
      if(matchData.length==1&&matchData[0][2]){
        returnmatchesStrictComparable(matchData[0][0],matchData[0][1]);
      }
      returnfunction(object){
        returnobject===source||baseIsMatch(object,source,matchData);
      };
    }

    /**
     *Thebaseimplementationof`_.matchesProperty`whichdoesn'tclone`srcValue`.
     *
     *@private
     *@param{string}pathThepathofthepropertytoget.
     *@param{*}srcValueThevaluetomatch.
     *@returns{Function}Returnsthenewspecfunction.
     */
    functionbaseMatchesProperty(path,srcValue){
      if(isKey(path)&&isStrictComparable(srcValue)){
        returnmatchesStrictComparable(toKey(path),srcValue);
      }
      returnfunction(object){
        varobjValue=get(object,path);
        return(objValue===undefined&&objValue===srcValue)
          ?hasIn(object,path)
          :baseIsEqual(srcValue,objValue,COMPARE_PARTIAL_FLAG|COMPARE_UNORDERED_FLAG);
      };
    }

    /**
     *Thebaseimplementationof`_.merge`withoutsupportformultiplesources.
     *
     *@private
     *@param{Object}objectThedestinationobject.
     *@param{Object}sourceThesourceobject.
     *@param{number}srcIndexTheindexof`source`.
     *@param{Function}[customizer]Thefunctiontocustomizemergedvalues.
     *@param{Object}[stack]Trackstraversedsourcevaluesandtheirmerged
     * counterparts.
     */
    functionbaseMerge(object,source,srcIndex,customizer,stack){
      if(object===source){
        return;
      }
      baseFor(source,function(srcValue,key){
        if(isObject(srcValue)){
          stack||(stack=newStack);
          baseMergeDeep(object,source,key,srcIndex,baseMerge,customizer,stack);
        }
        else{
          varnewValue=customizer
            ?customizer(object[key],srcValue,(key+''),object,source,stack)
            :undefined;

          if(newValue===undefined){
            newValue=srcValue;
          }
          assignMergeValue(object,key,newValue);
        }
      },keysIn);
    }

    /**
     *Aspecializedversionof`baseMerge`forarraysandobjectswhichperforms
     *deepmergesandtrackstraversedobjectsenablingobjectswithcircular
     *referencestobemerged.
     *
     *@private
     *@param{Object}objectThedestinationobject.
     *@param{Object}sourceThesourceobject.
     *@param{string}keyThekeyofthevaluetomerge.
     *@param{number}srcIndexTheindexof`source`.
     *@param{Function}mergeFuncThefunctiontomergevalues.
     *@param{Function}[customizer]Thefunctiontocustomizeassignedvalues.
     *@param{Object}[stack]Trackstraversedsourcevaluesandtheirmerged
     * counterparts.
     */
    functionbaseMergeDeep(object,source,key,srcIndex,mergeFunc,customizer,stack){
      varobjValue=object[key],
          srcValue=source[key],
          stacked=stack.get(srcValue);

      if(stacked){
        assignMergeValue(object,key,stacked);
        return;
      }
      varnewValue=customizer
        ?customizer(objValue,srcValue,(key+''),object,source,stack)
        :undefined;

      varisCommon=newValue===undefined;

      if(isCommon){
        varisArr=isArray(srcValue),
            isBuff=!isArr&&isBuffer(srcValue),
            isTyped=!isArr&&!isBuff&&isTypedArray(srcValue);

        newValue=srcValue;
        if(isArr||isBuff||isTyped){
          if(isArray(objValue)){
            newValue=objValue;
          }
          elseif(isArrayLikeObject(objValue)){
            newValue=copyArray(objValue);
          }
          elseif(isBuff){
            isCommon=false;
            newValue=cloneBuffer(srcValue,true);
          }
          elseif(isTyped){
            isCommon=false;
            newValue=cloneTypedArray(srcValue,true);
          }
          else{
            newValue=[];
          }
        }
        elseif(isPlainObject(srcValue)||isArguments(srcValue)){
          newValue=objValue;
          if(isArguments(objValue)){
            newValue=toPlainObject(objValue);
          }
          elseif(!isObject(objValue)||(srcIndex&&isFunction(objValue))){
            newValue=initCloneObject(srcValue);
          }
        }
        else{
          isCommon=false;
        }
      }
      if(isCommon){
        //Recursivelymergeobjectsandarrays(susceptibletocallstacklimits).
        stack.set(srcValue,newValue);
        mergeFunc(newValue,srcValue,srcIndex,customizer,stack);
        stack['delete'](srcValue);
      }
      assignMergeValue(object,key,newValue);
    }

    /**
     *Thebaseimplementationof`_.nth`whichdoesn'tcoercearguments.
     *
     *@private
     *@param{Array}arrayThearraytoquery.
     *@param{number}nTheindexoftheelementtoreturn.
     *@returns{*}Returnsthenthelementof`array`.
     */
    functionbaseNth(array,n){
      varlength=array.length;
      if(!length){
        return;
      }
      n+=n<0?length:0;
      returnisIndex(n,length)?array[n]:undefined;
    }

    /**
     *Thebaseimplementationof`_.orderBy`withoutparamguards.
     *
     *@private
     *@param{Array|Object}collectionThecollectiontoiterateover.
     *@param{Function[]|Object[]|string[]}iterateesTheiterateestosortby.
     *@param{string[]}ordersThesortordersof`iteratees`.
     *@returns{Array}Returnsthenewsortedarray.
     */
    functionbaseOrderBy(collection,iteratees,orders){
      varindex=-1;
      iteratees=arrayMap(iteratees.length?iteratees:[identity],baseUnary(getIteratee()));

      varresult=baseMap(collection,function(value,key,collection){
        varcriteria=arrayMap(iteratees,function(iteratee){
          returniteratee(value);
        });
        return{'criteria':criteria,'index':++index,'value':value};
      });

      returnbaseSortBy(result,function(object,other){
        returncompareMultiple(object,other,orders);
      });
    }

    /**
     *Thebaseimplementationof`_.pick`withoutsupportforindividual
     *propertyidentifiers.
     *
     *@private
     *@param{Object}objectThesourceobject.
     *@param{string[]}pathsThepropertypathstopick.
     *@returns{Object}Returnsthenewobject.
     */
    functionbasePick(object,paths){
      returnbasePickBy(object,paths,function(value,path){
        returnhasIn(object,path);
      });
    }

    /**
     *Thebaseimplementationof `_.pickBy`withoutsupportforiterateeshorthands.
     *
     *@private
     *@param{Object}objectThesourceobject.
     *@param{string[]}pathsThepropertypathstopick.
     *@param{Function}predicateThefunctioninvokedperproperty.
     *@returns{Object}Returnsthenewobject.
     */
    functionbasePickBy(object,paths,predicate){
      varindex=-1,
          length=paths.length,
          result={};

      while(++index<length){
        varpath=paths[index],
            value=baseGet(object,path);

        if(predicate(value,path)){
          baseSet(result,castPath(path,object),value);
        }
      }
      returnresult;
    }

    /**
     *Aspecializedversionof`baseProperty`whichsupportsdeeppaths.
     *
     *@private
     *@param{Array|string}pathThepathofthepropertytoget.
     *@returns{Function}Returnsthenewaccessorfunction.
     */
    functionbasePropertyDeep(path){
      returnfunction(object){
        returnbaseGet(object,path);
      };
    }

    /**
     *Thebaseimplementationof`_.pullAllBy`withoutsupportforiteratee
     *shorthands.
     *
     *@private
     *@param{Array}arrayThearraytomodify.
     *@param{Array}valuesThevaluestoremove.
     *@param{Function}[iteratee]Theiterateeinvokedperelement.
     *@param{Function}[comparator]Thecomparatorinvokedperelement.
     *@returns{Array}Returns`array`.
     */
    functionbasePullAll(array,values,iteratee,comparator){
      varindexOf=comparator?baseIndexOfWith:baseIndexOf,
          index=-1,
          length=values.length,
          seen=array;

      if(array===values){
        values=copyArray(values);
      }
      if(iteratee){
        seen=arrayMap(array,baseUnary(iteratee));
      }
      while(++index<length){
        varfromIndex=0,
            value=values[index],
            computed=iteratee?iteratee(value):value;

        while((fromIndex=indexOf(seen,computed,fromIndex,comparator))>-1){
          if(seen!==array){
            splice.call(seen,fromIndex,1);
          }
          splice.call(array,fromIndex,1);
        }
      }
      returnarray;
    }

    /**
     *Thebaseimplementationof`_.pullAt`withoutsupportforindividual
     *indexesorcapturingtheremovedelements.
     *
     *@private
     *@param{Array}arrayThearraytomodify.
     *@param{number[]}indexesTheindexesofelementstoremove.
     *@returns{Array}Returns`array`.
     */
    functionbasePullAt(array,indexes){
      varlength=array?indexes.length:0,
          lastIndex=length-1;

      while(length--){
        varindex=indexes[length];
        if(length==lastIndex||index!==previous){
          varprevious=index;
          if(isIndex(index)){
            splice.call(array,index,1);
          }else{
            baseUnset(array,index);
          }
        }
      }
      returnarray;
    }

    /**
     *Thebaseimplementationof`_.random`withoutsupportforreturning
     *floating-pointnumbers.
     *
     *@private
     *@param{number}lowerThelowerbound.
     *@param{number}upperTheupperbound.
     *@returns{number}Returnstherandomnumber.
     */
    functionbaseRandom(lower,upper){
      returnlower+nativeFloor(nativeRandom()*(upper-lower+1));
    }

    /**
     *Thebaseimplementationof`_.range`and`_.rangeRight`whichdoesn't
     *coercearguments.
     *
     *@private
     *@param{number}startThestartoftherange.
     *@param{number}endTheendoftherange.
     *@param{number}stepThevaluetoincrementordecrementby.
     *@param{boolean}[fromRight]Specifyiteratingfromrighttoleft.
     *@returns{Array}Returnstherangeofnumbers.
     */
    functionbaseRange(start,end,step,fromRight){
      varindex=-1,
          length=nativeMax(nativeCeil((end-start)/(step||1)),0),
          result=Array(length);

      while(length--){
        result[fromRight?length:++index]=start;
        start+=step;
      }
      returnresult;
    }

    /**
     *Thebaseimplementationof`_.repeat`whichdoesn'tcoercearguments.
     *
     *@private
     *@param{string}stringThestringtorepeat.
     *@param{number}nThenumberoftimestorepeatthestring.
     *@returns{string}Returnstherepeatedstring.
     */
    functionbaseRepeat(string,n){
      varresult='';
      if(!string||n<1||n>MAX_SAFE_INTEGER){
        returnresult;
      }
      //Leveragetheexponentiationbysquaringalgorithmforafasterrepeat.
      //Seehttps://en.wikipedia.org/wiki/Exponentiation_by_squaringformoredetails.
      do{
        if(n%2){
          result+=string;
        }
        n=nativeFloor(n/2);
        if(n){
          string+=string;
        }
      }while(n);

      returnresult;
    }

    /**
     *Thebaseimplementationof`_.rest`whichdoesn'tvalidateorcoercearguments.
     *
     *@private
     *@param{Function}funcThefunctiontoapplyarestparameterto.
     *@param{number}[start=func.length-1]Thestartpositionoftherestparameter.
     *@returns{Function}Returnsthenewfunction.
     */
    functionbaseRest(func,start){
      returnsetToString(overRest(func,start,identity),func+'');
    }

    /**
     *Thebaseimplementationof`_.sample`.
     *
     *@private
     *@param{Array|Object}collectionThecollectiontosample.
     *@returns{*}Returnstherandomelement.
     */
    functionbaseSample(collection){
      returnarraySample(values(collection));
    }

    /**
     *Thebaseimplementationof`_.sampleSize`withoutparamguards.
     *
     *@private
     *@param{Array|Object}collectionThecollectiontosample.
     *@param{number}nThenumberofelementstosample.
     *@returns{Array}Returnstherandomelements.
     */
    functionbaseSampleSize(collection,n){
      vararray=values(collection);
      returnshuffleSelf(array,baseClamp(n,0,array.length));
    }

    /**
     *Thebaseimplementationof`_.set`.
     *
     *@private
     *@param{Object}objectTheobjecttomodify.
     *@param{Array|string}pathThepathofthepropertytoset.
     *@param{*}valueThevaluetoset.
     *@param{Function}[customizer]Thefunctiontocustomizepathcreation.
     *@returns{Object}Returns`object`.
     */
    functionbaseSet(object,path,value,customizer){
      if(!isObject(object)){
        returnobject;
      }
      path=castPath(path,object);

      varindex=-1,
          length=path.length,
          lastIndex=length-1,
          nested=object;

      while(nested!=null&&++index<length){
        varkey=toKey(path[index]),
            newValue=value;

        if(index!=lastIndex){
          varobjValue=nested[key];
          newValue=customizer?customizer(objValue,key,nested):undefined;
          if(newValue===undefined){
            newValue=isObject(objValue)
              ?objValue
              :(isIndex(path[index+1])?[]:{});
          }
        }
        assignValue(nested,key,newValue);
        nested=nested[key];
      }
      returnobject;
    }

    /**
     *Thebaseimplementationof`setData`withoutsupportforhotloopshorting.
     *
     *@private
     *@param{Function}funcThefunctiontoassociatemetadatawith.
     *@param{*}dataThemetadata.
     *@returns{Function}Returns`func`.
     */
    varbaseSetData=!metaMap?identity:function(func,data){
      metaMap.set(func,data);
      returnfunc;
    };

    /**
     *Thebaseimplementationof`setToString`withoutsupportforhotloopshorting.
     *
     *@private
     *@param{Function}funcThefunctiontomodify.
     *@param{Function}stringThe`toString`result.
     *@returns{Function}Returns`func`.
     */
    varbaseSetToString=!defineProperty?identity:function(func,string){
      returndefineProperty(func,'toString',{
        'configurable':true,
        'enumerable':false,
        'value':constant(string),
        'writable':true
      });
    };

    /**
     *Thebaseimplementationof`_.shuffle`.
     *
     *@private
     *@param{Array|Object}collectionThecollectiontoshuffle.
     *@returns{Array}Returnsthenewshuffledarray.
     */
    functionbaseShuffle(collection){
      returnshuffleSelf(values(collection));
    }

    /**
     *Thebaseimplementationof`_.slice`withoutaniterateecallguard.
     *
     *@private
     *@param{Array}arrayThearraytoslice.
     *@param{number}[start=0]Thestartposition.
     *@param{number}[end=array.length]Theendposition.
     *@returns{Array}Returnsthesliceof`array`.
     */
    functionbaseSlice(array,start,end){
      varindex=-1,
          length=array.length;

      if(start<0){
        start=-start>length?0:(length+start);
      }
      end=end>length?length:end;
      if(end<0){
        end+=length;
      }
      length=start>end?0:((end-start)>>>0);
      start>>>=0;

      varresult=Array(length);
      while(++index<length){
        result[index]=array[index+start];
      }
      returnresult;
    }

    /**
     *Thebaseimplementationof`_.some`withoutsupportforiterateeshorthands.
     *
     *@private
     *@param{Array|Object}collectionThecollectiontoiterateover.
     *@param{Function}predicateThefunctioninvokedperiteration.
     *@returns{boolean}Returns`true`ifanyelementpassesthepredicatecheck,
     * else`false`.
     */
    functionbaseSome(collection,predicate){
      varresult;

      baseEach(collection,function(value,index,collection){
        result=predicate(value,index,collection);
        return!result;
      });
      return!!result;
    }

    /**
     *Thebaseimplementationof`_.sortedIndex`and`_.sortedLastIndex`which
     *performsabinarysearchof`array`todeterminetheindexatwhich`value`
     *shouldbeinsertedinto`array`inordertomaintainitssortorder.
     *
     *@private
     *@param{Array}arrayThesortedarraytoinspect.
     *@param{*}valueThevaluetoevaluate.
     *@param{boolean}[retHighest]Specifyreturningthehighestqualifiedindex.
     *@returns{number}Returnstheindexatwhich`value`shouldbeinserted
     * into`array`.
     */
    functionbaseSortedIndex(array,value,retHighest){
      varlow=0,
          high=array==null?low:array.length;

      if(typeofvalue=='number'&&value===value&&high<=HALF_MAX_ARRAY_LENGTH){
        while(low<high){
          varmid=(low+high)>>>1,
              computed=array[mid];

          if(computed!==null&&!isSymbol(computed)&&
              (retHighest?(computed<=value):(computed<value))){
            low=mid+1;
          }else{
            high=mid;
          }
        }
        returnhigh;
      }
      returnbaseSortedIndexBy(array,value,identity,retHighest);
    }

    /**
     *Thebaseimplementationof`_.sortedIndexBy`and`_.sortedLastIndexBy`
     *whichinvokes`iteratee`for`value`andeachelementof`array`tocompute
     *theirsortranking.Theiterateeisinvokedwithoneargument;(value).
     *
     *@private
     *@param{Array}arrayThesortedarraytoinspect.
     *@param{*}valueThevaluetoevaluate.
     *@param{Function}iterateeTheiterateeinvokedperelement.
     *@param{boolean}[retHighest]Specifyreturningthehighestqualifiedindex.
     *@returns{number}Returnstheindexatwhich`value`shouldbeinserted
     * into`array`.
     */
    functionbaseSortedIndexBy(array,value,iteratee,retHighest){
      value=iteratee(value);

      varlow=0,
          high=array==null?0:array.length,
          valIsNaN=value!==value,
          valIsNull=value===null,
          valIsSymbol=isSymbol(value),
          valIsUndefined=value===undefined;

      while(low<high){
        varmid=nativeFloor((low+high)/2),
            computed=iteratee(array[mid]),
            othIsDefined=computed!==undefined,
            othIsNull=computed===null,
            othIsReflexive=computed===computed,
            othIsSymbol=isSymbol(computed);

        if(valIsNaN){
          varsetLow=retHighest||othIsReflexive;
        }elseif(valIsUndefined){
          setLow=othIsReflexive&&(retHighest||othIsDefined);
        }elseif(valIsNull){
          setLow=othIsReflexive&&othIsDefined&&(retHighest||!othIsNull);
        }elseif(valIsSymbol){
          setLow=othIsReflexive&&othIsDefined&&!othIsNull&&(retHighest||!othIsSymbol);
        }elseif(othIsNull||othIsSymbol){
          setLow=false;
        }else{
          setLow=retHighest?(computed<=value):(computed<value);
        }
        if(setLow){
          low=mid+1;
        }else{
          high=mid;
        }
      }
      returnnativeMin(high,MAX_ARRAY_INDEX);
    }

    /**
     *Thebaseimplementationof`_.sortedUniq`and`_.sortedUniqBy`without
     *supportforiterateeshorthands.
     *
     *@private
     *@param{Array}arrayThearraytoinspect.
     *@param{Function}[iteratee]Theiterateeinvokedperelement.
     *@returns{Array}Returnsthenewduplicatefreearray.
     */
    functionbaseSortedUniq(array,iteratee){
      varindex=-1,
          length=array.length,
          resIndex=0,
          result=[];

      while(++index<length){
        varvalue=array[index],
            computed=iteratee?iteratee(value):value;

        if(!index||!eq(computed,seen)){
          varseen=computed;
          result[resIndex++]=value===0?0:value;
        }
      }
      returnresult;
    }

    /**
     *Thebaseimplementationof`_.toNumber`whichdoesn'tensurecorrect
     *conversionsofbinary,hexadecimal,oroctalstringvalues.
     *
     *@private
     *@param{*}valueThevaluetoprocess.
     *@returns{number}Returnsthenumber.
     */
    functionbaseToNumber(value){
      if(typeofvalue=='number'){
        returnvalue;
      }
      if(isSymbol(value)){
        returnNAN;
      }
      return+value;
    }

    /**
     *Thebaseimplementationof`_.toString`whichdoesn'tconvertnullish
     *valuestoemptystrings.
     *
     *@private
     *@param{*}valueThevaluetoprocess.
     *@returns{string}Returnsthestring.
     */
    functionbaseToString(value){
      //Exitearlyforstringstoavoidaperformancehitinsomeenvironments.
      if(typeofvalue=='string'){
        returnvalue;
      }
      if(isArray(value)){
        //Recursivelyconvertvalues(susceptibletocallstacklimits).
        returnarrayMap(value,baseToString)+'';
      }
      if(isSymbol(value)){
        returnsymbolToString?symbolToString.call(value):'';
      }
      varresult=(value+'');
      return(result=='0'&&(1/value)==-INFINITY)?'-0':result;
    }

    /**
     *Thebaseimplementationof`_.uniqBy`withoutsupportforiterateeshorthands.
     *
     *@private
     *@param{Array}arrayThearraytoinspect.
     *@param{Function}[iteratee]Theiterateeinvokedperelement.
     *@param{Function}[comparator]Thecomparatorinvokedperelement.
     *@returns{Array}Returnsthenewduplicatefreearray.
     */
    functionbaseUniq(array,iteratee,comparator){
      varindex=-1,
          includes=arrayIncludes,
          length=array.length,
          isCommon=true,
          result=[],
          seen=result;

      if(comparator){
        isCommon=false;
        includes=arrayIncludesWith;
      }
      elseif(length>=LARGE_ARRAY_SIZE){
        varset=iteratee?null:createSet(array);
        if(set){
          returnsetToArray(set);
        }
        isCommon=false;
        includes=cacheHas;
        seen=newSetCache;
      }
      else{
        seen=iteratee?[]:result;
      }
      outer:
      while(++index<length){
        varvalue=array[index],
            computed=iteratee?iteratee(value):value;

        value=(comparator||value!==0)?value:0;
        if(isCommon&&computed===computed){
          varseenIndex=seen.length;
          while(seenIndex--){
            if(seen[seenIndex]===computed){
              continueouter;
            }
          }
          if(iteratee){
            seen.push(computed);
          }
          result.push(value);
        }
        elseif(!includes(seen,computed,comparator)){
          if(seen!==result){
            seen.push(computed);
          }
          result.push(value);
        }
      }
      returnresult;
    }

    /**
     *Thebaseimplementationof`_.unset`.
     *
     *@private
     *@param{Object}objectTheobjecttomodify.
     *@param{Array|string}pathThepropertypathtounset.
     *@returns{boolean}Returns`true`ifthepropertyisdeleted,else`false`.
     */
    functionbaseUnset(object,path){
      path=castPath(path,object);
      object=parent(object,path);
      returnobject==null||deleteobject[toKey(last(path))];
    }

    /**
     *Thebaseimplementationof`_.update`.
     *
     *@private
     *@param{Object}objectTheobjecttomodify.
     *@param{Array|string}pathThepathofthepropertytoupdate.
     *@param{Function}updaterThefunctiontoproducetheupdatedvalue.
     *@param{Function}[customizer]Thefunctiontocustomizepathcreation.
     *@returns{Object}Returns`object`.
     */
    functionbaseUpdate(object,path,updater,customizer){
      returnbaseSet(object,path,updater(baseGet(object,path)),customizer);
    }

    /**
     *Thebaseimplementationofmethodslike`_.dropWhile`and`_.takeWhile`
     *withoutsupportforiterateeshorthands.
     *
     *@private
     *@param{Array}arrayThearraytoquery.
     *@param{Function}predicateThefunctioninvokedperiteration.
     *@param{boolean}[isDrop]Specifydroppingelementsinsteadoftakingthem.
     *@param{boolean}[fromRight]Specifyiteratingfromrighttoleft.
     *@returns{Array}Returnsthesliceof`array`.
     */
    functionbaseWhile(array,predicate,isDrop,fromRight){
      varlength=array.length,
          index=fromRight?length:-1;

      while((fromRight?index--:++index<length)&&
        predicate(array[index],index,array)){}

      returnisDrop
        ?baseSlice(array,(fromRight?0:index),(fromRight?index+1:length))
        :baseSlice(array,(fromRight?index+1:0),(fromRight?length:index));
    }

    /**
     *Thebaseimplementationof`wrapperValue`whichreturnstheresultof
     *performingasequenceofactionsontheunwrapped`value`,whereeach
     *successiveactionissuppliedthereturnvalueoftheprevious.
     *
     *@private
     *@param{*}valueTheunwrappedvalue.
     *@param{Array}actionsActionstoperformtoresolvetheunwrappedvalue.
     *@returns{*}Returnstheresolvedvalue.
     */
    functionbaseWrapperValue(value,actions){
      varresult=value;
      if(resultinstanceofLazyWrapper){
        result=result.value();
      }
      returnarrayReduce(actions,function(result,action){
        returnaction.func.apply(action.thisArg,arrayPush([result],action.args));
      },result);
    }

    /**
     *Thebaseimplementationofmethodslike`_.xor`,withoutsupportfor
     *iterateeshorthands,thatacceptsanarrayofarraystoinspect.
     *
     *@private
     *@param{Array}arraysThearraystoinspect.
     *@param{Function}[iteratee]Theiterateeinvokedperelement.
     *@param{Function}[comparator]Thecomparatorinvokedperelement.
     *@returns{Array}Returnsthenewarrayofvalues.
     */
    functionbaseXor(arrays,iteratee,comparator){
      varlength=arrays.length;
      if(length<2){
        returnlength?baseUniq(arrays[0]):[];
      }
      varindex=-1,
          result=Array(length);

      while(++index<length){
        vararray=arrays[index],
            othIndex=-1;

        while(++othIndex<length){
          if(othIndex!=index){
            result[index]=baseDifference(result[index]||array,arrays[othIndex],iteratee,comparator);
          }
        }
      }
      returnbaseUniq(baseFlatten(result,1),iteratee,comparator);
    }

    /**
     *Thisbaseimplementationof`_.zipObject`whichassignsvaluesusing`assignFunc`.
     *
     *@private
     *@param{Array}propsThepropertyidentifiers.
     *@param{Array}valuesThepropertyvalues.
     *@param{Function}assignFuncThefunctiontoassignvalues.
     *@returns{Object}Returnsthenewobject.
     */
    functionbaseZipObject(props,values,assignFunc){
      varindex=-1,
          length=props.length,
          valsLength=values.length,
          result={};

      while(++index<length){
        varvalue=index<valsLength?values[index]:undefined;
        assignFunc(result,props[index],value);
      }
      returnresult;
    }

    /**
     *Casts`value`toanemptyarrayifit'snotanarraylikeobject.
     *
     *@private
     *@param{*}valueThevaluetoinspect.
     *@returns{Array|Object}Returnsthecastarray-likeobject.
     */
    functioncastArrayLikeObject(value){
      returnisArrayLikeObject(value)?value:[];
    }

    /**
     *Casts`value`to`identity`ifit'snotafunction.
     *
     *@private
     *@param{*}valueThevaluetoinspect.
     *@returns{Function}Returnscastfunction.
     */
    functioncastFunction(value){
      returntypeofvalue=='function'?value:identity;
    }

    /**
     *Casts`value`toapatharrayifit'snotone.
     *
     *@private
     *@param{*}valueThevaluetoinspect.
     *@param{Object}[object]Theobjecttoquerykeyson.
     *@returns{Array}Returnsthecastpropertypatharray.
     */
    functioncastPath(value,object){
      if(isArray(value)){
        returnvalue;
      }
      returnisKey(value,object)?[value]:stringToPath(toString(value));
    }

    /**
     *A`baseRest`aliaswhichcanbereplacedwith`identity`bymodule
     *replacementplugins.
     *
     *@private
     *@type{Function}
     *@param{Function}funcThefunctiontoapplyarestparameterto.
     *@returns{Function}Returnsthenewfunction.
     */
    varcastRest=baseRest;

    /**
     *Casts`array`toasliceifit'sneeded.
     *
     *@private
     *@param{Array}arrayThearraytoinspect.
     *@param{number}startThestartposition.
     *@param{number}[end=array.length]Theendposition.
     *@returns{Array}Returnsthecastslice.
     */
    functioncastSlice(array,start,end){
      varlength=array.length;
      end=end===undefined?length:end;
      return(!start&&end>=length)?array:baseSlice(array,start,end);
    }

    /**
     *Asimplewrapperaroundtheglobal[`clearTimeout`](https://mdn.io/clearTimeout).
     *
     *@private
     *@param{number|Object}idThetimeridortimeoutobjectofthetimertoclear.
     */
    varclearTimeout=ctxClearTimeout||function(id){
      returnroot.clearTimeout(id);
    };

    /**
     *Createsacloneof `buffer`.
     *
     *@private
     *@param{Buffer}bufferThebuffertoclone.
     *@param{boolean}[isDeep]Specifyadeepclone.
     *@returns{Buffer}Returnstheclonedbuffer.
     */
    functioncloneBuffer(buffer,isDeep){
      if(isDeep){
        returnbuffer.slice();
      }
      varlength=buffer.length,
          result=allocUnsafe?allocUnsafe(length):newbuffer.constructor(length);

      buffer.copy(result);
      returnresult;
    }

    /**
     *Createsacloneof`arrayBuffer`.
     *
     *@private
     *@param{ArrayBuffer}arrayBufferThearraybuffertoclone.
     *@returns{ArrayBuffer}Returnstheclonedarraybuffer.
     */
    functioncloneArrayBuffer(arrayBuffer){
      varresult=newarrayBuffer.constructor(arrayBuffer.byteLength);
      newUint8Array(result).set(newUint8Array(arrayBuffer));
      returnresult;
    }

    /**
     *Createsacloneof`dataView`.
     *
     *@private
     *@param{Object}dataViewThedataviewtoclone.
     *@param{boolean}[isDeep]Specifyadeepclone.
     *@returns{Object}Returnsthecloneddataview.
     */
    functioncloneDataView(dataView,isDeep){
      varbuffer=isDeep?cloneArrayBuffer(dataView.buffer):dataView.buffer;
      returnnewdataView.constructor(buffer,dataView.byteOffset,dataView.byteLength);
    }

    /**
     *Createsacloneof`map`.
     *
     *@private
     *@param{Object}mapThemaptoclone.
     *@param{Function}cloneFuncThefunctiontoclonevalues.
     *@param{boolean}[isDeep]Specifyadeepclone.
     *@returns{Object}Returnstheclonedmap.
     */
    functioncloneMap(map,isDeep,cloneFunc){
      vararray=isDeep?cloneFunc(mapToArray(map),CLONE_DEEP_FLAG):mapToArray(map);
      returnarrayReduce(array,addMapEntry,newmap.constructor);
    }

    /**
     *Createsacloneof`regexp`.
     *
     *@private
     *@param{Object}regexpTheregexptoclone.
     *@returns{Object}Returnstheclonedregexp.
     */
    functioncloneRegExp(regexp){
      varresult=newregexp.constructor(regexp.source,reFlags.exec(regexp));
      result.lastIndex=regexp.lastIndex;
      returnresult;
    }

    /**
     *Createsacloneof`set`.
     *
     *@private
     *@param{Object}setThesettoclone.
     *@param{Function}cloneFuncThefunctiontoclonevalues.
     *@param{boolean}[isDeep]Specifyadeepclone.
     *@returns{Object}Returnstheclonedset.
     */
    functioncloneSet(set,isDeep,cloneFunc){
      vararray=isDeep?cloneFunc(setToArray(set),CLONE_DEEP_FLAG):setToArray(set);
      returnarrayReduce(array,addSetEntry,newset.constructor);
    }

    /**
     *Createsacloneofthe`symbol`object.
     *
     *@private
     *@param{Object}symbolThesymbolobjecttoclone.
     *@returns{Object}Returnstheclonedsymbolobject.
     */
    functioncloneSymbol(symbol){
      returnsymbolValueOf?Object(symbolValueOf.call(symbol)):{};
    }

    /**
     *Createsacloneof`typedArray`.
     *
     *@private
     *@param{Object}typedArrayThetypedarraytoclone.
     *@param{boolean}[isDeep]Specifyadeepclone.
     *@returns{Object}Returnstheclonedtypedarray.
     */
    functioncloneTypedArray(typedArray,isDeep){
      varbuffer=isDeep?cloneArrayBuffer(typedArray.buffer):typedArray.buffer;
      returnnewtypedArray.constructor(buffer,typedArray.byteOffset,typedArray.length);
    }

    /**
     *Comparesvaluestosorttheminascendingorder.
     *
     *@private
     *@param{*}valueThevaluetocompare.
     *@param{*}otherTheothervaluetocompare.
     *@returns{number}Returnsthesortorderindicatorfor`value`.
     */
    functioncompareAscending(value,other){
      if(value!==other){
        varvalIsDefined=value!==undefined,
            valIsNull=value===null,
            valIsReflexive=value===value,
            valIsSymbol=isSymbol(value);

        varothIsDefined=other!==undefined,
            othIsNull=other===null,
            othIsReflexive=other===other,
            othIsSymbol=isSymbol(other);

        if((!othIsNull&&!othIsSymbol&&!valIsSymbol&&value>other)||
            (valIsSymbol&&othIsDefined&&othIsReflexive&&!othIsNull&&!othIsSymbol)||
            (valIsNull&&othIsDefined&&othIsReflexive)||
            (!valIsDefined&&othIsReflexive)||
            !valIsReflexive){
          return1;
        }
        if((!valIsNull&&!valIsSymbol&&!othIsSymbol&&value<other)||
            (othIsSymbol&&valIsDefined&&valIsReflexive&&!valIsNull&&!valIsSymbol)||
            (othIsNull&&valIsDefined&&valIsReflexive)||
            (!othIsDefined&&valIsReflexive)||
            !othIsReflexive){
          return-1;
        }
      }
      return0;
    }

    /**
     *Usedby`_.orderBy`tocomparemultiplepropertiesofavaluetoanother
     *andstablesortthem.
     *
     *If`orders`isunspecified,allvaluesaresortedinascendingorder.Otherwise,
     *specifyanorderof"desc"fordescendingor"asc"forascendingsortorder
     *ofcorrespondingvalues.
     *
     *@private
     *@param{Object}objectTheobjecttocompare.
     *@param{Object}otherTheotherobjecttocompare.
     *@param{boolean[]|string[]}ordersTheordertosortbyforeachproperty.
     *@returns{number}Returnsthesortorderindicatorfor`object`.
     */
    functioncompareMultiple(object,other,orders){
      varindex=-1,
          objCriteria=object.criteria,
          othCriteria=other.criteria,
          length=objCriteria.length,
          ordersLength=orders.length;

      while(++index<length){
        varresult=compareAscending(objCriteria[index],othCriteria[index]);
        if(result){
          if(index>=ordersLength){
            returnresult;
          }
          varorder=orders[index];
          returnresult*(order=='desc'?-1:1);
        }
      }
      //Fixesan`Array#sort`bugintheJSengineembeddedinAdobeapplications
      //thatcausesit,undercertaincircumstances,toprovidethesamevaluefor
      //`object`and`other`.Seehttps://github.com/jashkenas/underscore/pull/1247
      //formoredetails.
      //
      //ThisalsoensuresastablesortinV8andotherengines.
      //Seehttps://bugs.chromium.org/p/v8/issues/detail?id=90formoredetails.
      returnobject.index-other.index;
    }

    /**
     *Createsanarraythatisthecompositionofpartiallyappliedarguments,
     *placeholders,andprovidedargumentsintoasinglearrayofarguments.
     *
     *@private
     *@param{Array}argsTheprovidedarguments.
     *@param{Array}partialsTheargumentstoprependtothoseprovided.
     *@param{Array}holdersThe`partials`placeholderindexes.
     *@params{boolean}[isCurried]Specifycomposingforacurriedfunction.
     *@returns{Array}Returnsthenewarrayofcomposedarguments.
     */
    functioncomposeArgs(args,partials,holders,isCurried){
      varargsIndex=-1,
          argsLength=args.length,
          holdersLength=holders.length,
          leftIndex=-1,
          leftLength=partials.length,
          rangeLength=nativeMax(argsLength-holdersLength,0),
          result=Array(leftLength+rangeLength),
          isUncurried=!isCurried;

      while(++leftIndex<leftLength){
        result[leftIndex]=partials[leftIndex];
      }
      while(++argsIndex<holdersLength){
        if(isUncurried||argsIndex<argsLength){
          result[holders[argsIndex]]=args[argsIndex];
        }
      }
      while(rangeLength--){
        result[leftIndex++]=args[argsIndex++];
      }
      returnresult;
    }

    /**
     *Thisfunctionislike`composeArgs`exceptthattheargumentscomposition
     *istailoredfor`_.partialRight`.
     *
     *@private
     *@param{Array}argsTheprovidedarguments.
     *@param{Array}partialsTheargumentstoappendtothoseprovided.
     *@param{Array}holdersThe`partials`placeholderindexes.
     *@params{boolean}[isCurried]Specifycomposingforacurriedfunction.
     *@returns{Array}Returnsthenewarrayofcomposedarguments.
     */
    functioncomposeArgsRight(args,partials,holders,isCurried){
      varargsIndex=-1,
          argsLength=args.length,
          holdersIndex=-1,
          holdersLength=holders.length,
          rightIndex=-1,
          rightLength=partials.length,
          rangeLength=nativeMax(argsLength-holdersLength,0),
          result=Array(rangeLength+rightLength),
          isUncurried=!isCurried;

      while(++argsIndex<rangeLength){
        result[argsIndex]=args[argsIndex];
      }
      varoffset=argsIndex;
      while(++rightIndex<rightLength){
        result[offset+rightIndex]=partials[rightIndex];
      }
      while(++holdersIndex<holdersLength){
        if(isUncurried||argsIndex<argsLength){
          result[offset+holders[holdersIndex]]=args[argsIndex++];
        }
      }
      returnresult;
    }

    /**
     *Copiesthevaluesof`source`to`array`.
     *
     *@private
     *@param{Array}sourceThearraytocopyvaluesfrom.
     *@param{Array}[array=[]]Thearraytocopyvaluesto.
     *@returns{Array}Returns`array`.
     */
    functioncopyArray(source,array){
      varindex=-1,
          length=source.length;

      array||(array=Array(length));
      while(++index<length){
        array[index]=source[index];
      }
      returnarray;
    }

    /**
     *Copiespropertiesof`source`to`object`.
     *
     *@private
     *@param{Object}sourceTheobjecttocopypropertiesfrom.
     *@param{Array}propsThepropertyidentifierstocopy.
     *@param{Object}[object={}]Theobjecttocopypropertiesto.
     *@param{Function}[customizer]Thefunctiontocustomizecopiedvalues.
     *@returns{Object}Returns`object`.
     */
    functioncopyObject(source,props,object,customizer){
      varisNew=!object;
      object||(object={});

      varindex=-1,
          length=props.length;

      while(++index<length){
        varkey=props[index];

        varnewValue=customizer
          ?customizer(object[key],source[key],key,object,source)
          :undefined;

        if(newValue===undefined){
          newValue=source[key];
        }
        if(isNew){
          baseAssignValue(object,key,newValue);
        }else{
          assignValue(object,key,newValue);
        }
      }
      returnobject;
    }

    /**
     *Copiesownsymbolsof`source`to`object`.
     *
     *@private
     *@param{Object}sourceTheobjecttocopysymbolsfrom.
     *@param{Object}[object={}]Theobjecttocopysymbolsto.
     *@returns{Object}Returns`object`.
     */
    functioncopySymbols(source,object){
      returncopyObject(source,getSymbols(source),object);
    }

    /**
     *Copiesownandinheritedsymbolsof`source`to`object`.
     *
     *@private
     *@param{Object}sourceTheobjecttocopysymbolsfrom.
     *@param{Object}[object={}]Theobjecttocopysymbolsto.
     *@returns{Object}Returns`object`.
     */
    functioncopySymbolsIn(source,object){
      returncopyObject(source,getSymbolsIn(source),object);
    }

    /**
     *Createsafunctionlike`_.groupBy`.
     *
     *@private
     *@param{Function}setterThefunctiontosetaccumulatorvalues.
     *@param{Function}[initializer]Theaccumulatorobjectinitializer.
     *@returns{Function}Returnsthenewaggregatorfunction.
     */
    functioncreateAggregator(setter,initializer){
      returnfunction(collection,iteratee){
        varfunc=isArray(collection)?arrayAggregator:baseAggregator,
            accumulator=initializer?initializer():{};

        returnfunc(collection,setter,getIteratee(iteratee,2),accumulator);
      };
    }

    /**
     *Createsafunctionlike`_.assign`.
     *
     *@private
     *@param{Function}assignerThefunctiontoassignvalues.
     *@returns{Function}Returnsthenewassignerfunction.
     */
    functioncreateAssigner(assigner){
      returnbaseRest(function(object,sources){
        varindex=-1,
            length=sources.length,
            customizer=length>1?sources[length-1]:undefined,
            guard=length>2?sources[2]:undefined;

        customizer=(assigner.length>3&&typeofcustomizer=='function')
          ?(length--,customizer)
          :undefined;

        if(guard&&isIterateeCall(sources[0],sources[1],guard)){
          customizer=length<3?undefined:customizer;
          length=1;
        }
        object=Object(object);
        while(++index<length){
          varsource=sources[index];
          if(source){
            assigner(object,source,index,customizer);
          }
        }
        returnobject;
      });
    }

    /**
     *Createsa`baseEach`or`baseEachRight`function.
     *
     *@private
     *@param{Function}eachFuncThefunctiontoiterateoveracollection.
     *@param{boolean}[fromRight]Specifyiteratingfromrighttoleft.
     *@returns{Function}Returnsthenewbasefunction.
     */
    functioncreateBaseEach(eachFunc,fromRight){
      returnfunction(collection,iteratee){
        if(collection==null){
          returncollection;
        }
        if(!isArrayLike(collection)){
          returneachFunc(collection,iteratee);
        }
        varlength=collection.length,
            index=fromRight?length:-1,
            iterable=Object(collection);

        while((fromRight?index--:++index<length)){
          if(iteratee(iterable[index],index,iterable)===false){
            break;
          }
        }
        returncollection;
      };
    }

    /**
     *Createsabasefunctionformethodslike`_.forIn`and`_.forOwn`.
     *
     *@private
     *@param{boolean}[fromRight]Specifyiteratingfromrighttoleft.
     *@returns{Function}Returnsthenewbasefunction.
     */
    functioncreateBaseFor(fromRight){
      returnfunction(object,iteratee,keysFunc){
        varindex=-1,
            iterable=Object(object),
            props=keysFunc(object),
            length=props.length;

        while(length--){
          varkey=props[fromRight?length:++index];
          if(iteratee(iterable[key],key,iterable)===false){
            break;
          }
        }
        returnobject;
      };
    }

    /**
     *Createsafunctionthatwraps`func`toinvokeitwiththeoptional`this`
     *bindingof`thisArg`.
     *
     *@private
     *@param{Function}funcThefunctiontowrap.
     *@param{number}bitmaskThebitmaskflags.See`createWrap`formoredetails.
     *@param{*}[thisArg]The`this`bindingof`func`.
     *@returns{Function}Returnsthenewwrappedfunction.
     */
    functioncreateBind(func,bitmask,thisArg){
      varisBind=bitmask&WRAP_BIND_FLAG,
          Ctor=createCtor(func);

      functionwrapper(){
        varfn=(this&&this!==root&&thisinstanceofwrapper)?Ctor:func;
        returnfn.apply(isBind?thisArg:this,arguments);
      }
      returnwrapper;
    }

    /**
     *Createsafunctionlike`_.lowerFirst`.
     *
     *@private
     *@param{string}methodNameThenameofthe`String`casemethodtouse.
     *@returns{Function}Returnsthenewcasefunction.
     */
    functioncreateCaseFirst(methodName){
      returnfunction(string){
        string=toString(string);

        varstrSymbols=hasUnicode(string)
          ?stringToArray(string)
          :undefined;

        varchr=strSymbols
          ?strSymbols[0]
          :string.charAt(0);

        vartrailing=strSymbols
          ?castSlice(strSymbols,1).join('')
          :string.slice(1);

        returnchr[methodName]()+trailing;
      };
    }

    /**
     *Createsafunctionlike`_.camelCase`.
     *
     *@private
     *@param{Function}callbackThefunctiontocombineeachword.
     *@returns{Function}Returnsthenewcompounderfunction.
     */
    functioncreateCompounder(callback){
      returnfunction(string){
        returnarrayReduce(words(deburr(string).replace(reApos,'')),callback,'');
      };
    }

    /**
     *Createsafunctionthatproducesaninstanceof`Ctor`regardlessof
     *whetheritwasinvokedaspartofa`new`expressionorby`call`or`apply`.
     *
     *@private
     *@param{Function}CtorTheconstructortowrap.
     *@returns{Function}Returnsthenewwrappedfunction.
     */
    functioncreateCtor(Ctor){
      returnfunction(){
        //Usea`switch`statementtoworkwithclassconstructors.See
        //http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
        //formoredetails.
        varargs=arguments;
        switch(args.length){
          case0:returnnewCtor;
          case1:returnnewCtor(args[0]);
          case2:returnnewCtor(args[0],args[1]);
          case3:returnnewCtor(args[0],args[1],args[2]);
          case4:returnnewCtor(args[0],args[1],args[2],args[3]);
          case5:returnnewCtor(args[0],args[1],args[2],args[3],args[4]);
          case6:returnnewCtor(args[0],args[1],args[2],args[3],args[4],args[5]);
          case7:returnnewCtor(args[0],args[1],args[2],args[3],args[4],args[5],args[6]);
        }
        varthisBinding=baseCreate(Ctor.prototype),
            result=Ctor.apply(thisBinding,args);

        //Mimictheconstructor's`return`behavior.
        //Seehttps://es5.github.io/#x13.2.2formoredetails.
        returnisObject(result)?result:thisBinding;
      };
    }

    /**
     *Createsafunctionthatwraps`func`toenablecurrying.
     *
     *@private
     *@param{Function}funcThefunctiontowrap.
     *@param{number}bitmaskThebitmaskflags.See`createWrap`formoredetails.
     *@param{number}arityThearityof`func`.
     *@returns{Function}Returnsthenewwrappedfunction.
     */
    functioncreateCurry(func,bitmask,arity){
      varCtor=createCtor(func);

      functionwrapper(){
        varlength=arguments.length,
            args=Array(length),
            index=length,
            placeholder=getHolder(wrapper);

        while(index--){
          args[index]=arguments[index];
        }
        varholders=(length<3&&args[0]!==placeholder&&args[length-1]!==placeholder)
          ?[]
          :replaceHolders(args,placeholder);

        length-=holders.length;
        if(length<arity){
          returncreateRecurry(
            func,bitmask,createHybrid,wrapper.placeholder,undefined,
            args,holders,undefined,undefined,arity-length);
        }
        varfn=(this&&this!==root&&thisinstanceofwrapper)?Ctor:func;
        returnapply(fn,this,args);
      }
      returnwrapper;
    }

    /**
     *Createsa`_.find`or`_.findLast`function.
     *
     *@private
     *@param{Function}findIndexFuncThefunctiontofindthecollectionindex.
     *@returns{Function}Returnsthenewfindfunction.
     */
    functioncreateFind(findIndexFunc){
      returnfunction(collection,predicate,fromIndex){
        variterable=Object(collection);
        if(!isArrayLike(collection)){
          variteratee=getIteratee(predicate,3);
          collection=keys(collection);
          predicate=function(key){returniteratee(iterable[key],key,iterable);};
        }
        varindex=findIndexFunc(collection,predicate,fromIndex);
        returnindex>-1?iterable[iteratee?collection[index]:index]:undefined;
      };
    }

    /**
     *Createsa`_.flow`or`_.flowRight`function.
     *
     *@private
     *@param{boolean}[fromRight]Specifyiteratingfromrighttoleft.
     *@returns{Function}Returnsthenewflowfunction.
     */
    functioncreateFlow(fromRight){
      returnflatRest(function(funcs){
        varlength=funcs.length,
            index=length,
            prereq=LodashWrapper.prototype.thru;

        if(fromRight){
          funcs.reverse();
        }
        while(index--){
          varfunc=funcs[index];
          if(typeoffunc!='function'){
            thrownewTypeError(FUNC_ERROR_TEXT);
          }
          if(prereq&&!wrapper&&getFuncName(func)=='wrapper'){
            varwrapper=newLodashWrapper([],true);
          }
        }
        index=wrapper?index:length;
        while(++index<length){
          func=funcs[index];

          varfuncName=getFuncName(func),
              data=funcName=='wrapper'?getData(func):undefined;

          if(data&&isLaziable(data[0])&&
                data[1]==(WRAP_ARY_FLAG|WRAP_CURRY_FLAG|WRAP_PARTIAL_FLAG|WRAP_REARG_FLAG)&&
                !data[4].length&&data[9]==1
              ){
            wrapper=wrapper[getFuncName(data[0])].apply(wrapper,data[3]);
          }else{
            wrapper=(func.length==1&&isLaziable(func))
              ?wrapper[funcName]()
              :wrapper.thru(func);
          }
        }
        returnfunction(){
          varargs=arguments,
              value=args[0];

          if(wrapper&&args.length==1&&isArray(value)){
            returnwrapper.plant(value).value();
          }
          varindex=0,
              result=length?funcs[index].apply(this,args):value;

          while(++index<length){
            result=funcs[index].call(this,result);
          }
          returnresult;
        };
      });
    }

    /**
     *Createsafunctionthatwraps`func`toinvokeitwithoptional`this`
     *bindingof`thisArg`,partialapplication,andcurrying.
     *
     *@private
     *@param{Function|string}funcThefunctionormethodnametowrap.
     *@param{number}bitmaskThebitmaskflags.See`createWrap`formoredetails.
     *@param{*}[thisArg]The`this`bindingof`func`.
     *@param{Array}[partials]Theargumentstoprependtothoseprovidedto
     * thenewfunction.
     *@param{Array}[holders]The`partials`placeholderindexes.
     *@param{Array}[partialsRight]Theargumentstoappendtothoseprovided
     * tothenewfunction.
     *@param{Array}[holdersRight]The`partialsRight`placeholderindexes.
     *@param{Array}[argPos]Theargumentpositionsofthenewfunction.
     *@param{number}[ary]Thearitycapof`func`.
     *@param{number}[arity]Thearityof`func`.
     *@returns{Function}Returnsthenewwrappedfunction.
     */
    functioncreateHybrid(func,bitmask,thisArg,partials,holders,partialsRight,holdersRight,argPos,ary,arity){
      varisAry=bitmask&WRAP_ARY_FLAG,
          isBind=bitmask&WRAP_BIND_FLAG,
          isBindKey=bitmask&WRAP_BIND_KEY_FLAG,
          isCurried=bitmask&(WRAP_CURRY_FLAG|WRAP_CURRY_RIGHT_FLAG),
          isFlip=bitmask&WRAP_FLIP_FLAG,
          Ctor=isBindKey?undefined:createCtor(func);

      functionwrapper(){
        varlength=arguments.length,
            args=Array(length),
            index=length;

        while(index--){
          args[index]=arguments[index];
        }
        if(isCurried){
          varplaceholder=getHolder(wrapper),
              holdersCount=countHolders(args,placeholder);
        }
        if(partials){
          args=composeArgs(args,partials,holders,isCurried);
        }
        if(partialsRight){
          args=composeArgsRight(args,partialsRight,holdersRight,isCurried);
        }
        length-=holdersCount;
        if(isCurried&&length<arity){
          varnewHolders=replaceHolders(args,placeholder);
          returncreateRecurry(
            func,bitmask,createHybrid,wrapper.placeholder,thisArg,
            args,newHolders,argPos,ary,arity-length
          );
        }
        varthisBinding=isBind?thisArg:this,
            fn=isBindKey?thisBinding[func]:func;

        length=args.length;
        if(argPos){
          args=reorder(args,argPos);
        }elseif(isFlip&&length>1){
          args.reverse();
        }
        if(isAry&&ary<length){
          args.length=ary;
        }
        if(this&&this!==root&&thisinstanceofwrapper){
          fn=Ctor||createCtor(fn);
        }
        returnfn.apply(thisBinding,args);
      }
      returnwrapper;
    }

    /**
     *Createsafunctionlike`_.invertBy`.
     *
     *@private
     *@param{Function}setterThefunctiontosetaccumulatorvalues.
     *@param{Function}toIterateeThefunctiontoresolveiteratees.
     *@returns{Function}Returnsthenewinverterfunction.
     */
    functioncreateInverter(setter,toIteratee){
      returnfunction(object,iteratee){
        returnbaseInverter(object,setter,toIteratee(iteratee),{});
      };
    }

    /**
     *Createsafunctionthatperformsamathematicaloperationontwovalues.
     *
     *@private
     *@param{Function}operatorThefunctiontoperformtheoperation.
     *@param{number}[defaultValue]Thevalueusedfor`undefined`arguments.
     *@returns{Function}Returnsthenewmathematicaloperationfunction.
     */
    functioncreateMathOperation(operator,defaultValue){
      returnfunction(value,other){
        varresult;
        if(value===undefined&&other===undefined){
          returndefaultValue;
        }
        if(value!==undefined){
          result=value;
        }
        if(other!==undefined){
          if(result===undefined){
            returnother;
          }
          if(typeofvalue=='string'||typeofother=='string'){
            value=baseToString(value);
            other=baseToString(other);
          }else{
            value=baseToNumber(value);
            other=baseToNumber(other);
          }
          result=operator(value,other);
        }
        returnresult;
      };
    }

    /**
     *Createsafunctionlike`_.over`.
     *
     *@private
     *@param{Function}arrayFuncThefunctiontoiterateoveriteratees.
     *@returns{Function}Returnsthenewoverfunction.
     */
    functioncreateOver(arrayFunc){
      returnflatRest(function(iteratees){
        iteratees=arrayMap(iteratees,baseUnary(getIteratee()));
        returnbaseRest(function(args){
          varthisArg=this;
          returnarrayFunc(iteratees,function(iteratee){
            returnapply(iteratee,thisArg,args);
          });
        });
      });
    }

    /**
     *Createsthepaddingfor`string`basedon`length`.The`chars`string
     *istruncatedifthenumberofcharactersexceeds`length`.
     *
     *@private
     *@param{number}lengthThepaddinglength.
     *@param{string}[chars='']Thestringusedaspadding.
     *@returns{string}Returnsthepaddingfor`string`.
     */
    functioncreatePadding(length,chars){
      chars=chars===undefined?'':baseToString(chars);

      varcharsLength=chars.length;
      if(charsLength<2){
        returncharsLength?baseRepeat(chars,length):chars;
      }
      varresult=baseRepeat(chars,nativeCeil(length/stringSize(chars)));
      returnhasUnicode(chars)
        ?castSlice(stringToArray(result),0,length).join('')
        :result.slice(0,length);
    }

    /**
     *Createsafunctionthatwraps`func`toinvokeitwiththe`this`binding
     *of`thisArg`and`partials`prependedtotheargumentsitreceives.
     *
     *@private
     *@param{Function}funcThefunctiontowrap.
     *@param{number}bitmaskThebitmaskflags.See`createWrap`formoredetails.
     *@param{*}thisArgThe`this`bindingof`func`.
     *@param{Array}partialsTheargumentstoprependtothoseprovidedto
     * thenewfunction.
     *@returns{Function}Returnsthenewwrappedfunction.
     */
    functioncreatePartial(func,bitmask,thisArg,partials){
      varisBind=bitmask&WRAP_BIND_FLAG,
          Ctor=createCtor(func);

      functionwrapper(){
        varargsIndex=-1,
            argsLength=arguments.length,
            leftIndex=-1,
            leftLength=partials.length,
            args=Array(leftLength+argsLength),
            fn=(this&&this!==root&&thisinstanceofwrapper)?Ctor:func;

        while(++leftIndex<leftLength){
          args[leftIndex]=partials[leftIndex];
        }
        while(argsLength--){
          args[leftIndex++]=arguments[++argsIndex];
        }
        returnapply(fn,isBind?thisArg:this,args);
      }
      returnwrapper;
    }

    /**
     *Createsa`_.range`or`_.rangeRight`function.
     *
     *@private
     *@param{boolean}[fromRight]Specifyiteratingfromrighttoleft.
     *@returns{Function}Returnsthenewrangefunction.
     */
    functioncreateRange(fromRight){
      returnfunction(start,end,step){
        if(step&&typeofstep!='number'&&isIterateeCall(start,end,step)){
          end=step=undefined;
        }
        //Ensurethesignof`-0`ispreserved.
        start=toFinite(start);
        if(end===undefined){
          end=start;
          start=0;
        }else{
          end=toFinite(end);
        }
        step=step===undefined?(start<end?1:-1):toFinite(step);
        returnbaseRange(start,end,step,fromRight);
      };
    }

    /**
     *Createsafunctionthatperformsarelationaloperationontwovalues.
     *
     *@private
     *@param{Function}operatorThefunctiontoperformtheoperation.
     *@returns{Function}Returnsthenewrelationaloperationfunction.
     */
    functioncreateRelationalOperation(operator){
      returnfunction(value,other){
        if(!(typeofvalue=='string'&&typeofother=='string')){
          value=toNumber(value);
          other=toNumber(other);
        }
        returnoperator(value,other);
      };
    }

    /**
     *Createsafunctionthatwraps`func`tocontinuecurrying.
     *
     *@private
     *@param{Function}funcThefunctiontowrap.
     *@param{number}bitmaskThebitmaskflags.See`createWrap`formoredetails.
     *@param{Function}wrapFuncThefunctiontocreatethe`func`wrapper.
     *@param{*}placeholderTheplaceholdervalue.
     *@param{*}[thisArg]The`this`bindingof`func`.
     *@param{Array}[partials]Theargumentstoprependtothoseprovidedto
     * thenewfunction.
     *@param{Array}[holders]The`partials`placeholderindexes.
     *@param{Array}[argPos]Theargumentpositionsofthenewfunction.
     *@param{number}[ary]Thearitycapof`func`.
     *@param{number}[arity]Thearityof`func`.
     *@returns{Function}Returnsthenewwrappedfunction.
     */
    functioncreateRecurry(func,bitmask,wrapFunc,placeholder,thisArg,partials,holders,argPos,ary,arity){
      varisCurry=bitmask&WRAP_CURRY_FLAG,
          newHolders=isCurry?holders:undefined,
          newHoldersRight=isCurry?undefined:holders,
          newPartials=isCurry?partials:undefined,
          newPartialsRight=isCurry?undefined:partials;

      bitmask|=(isCurry?WRAP_PARTIAL_FLAG:WRAP_PARTIAL_RIGHT_FLAG);
      bitmask&=~(isCurry?WRAP_PARTIAL_RIGHT_FLAG:WRAP_PARTIAL_FLAG);

      if(!(bitmask&WRAP_CURRY_BOUND_FLAG)){
        bitmask&=~(WRAP_BIND_FLAG|WRAP_BIND_KEY_FLAG);
      }
      varnewData=[
        func,bitmask,thisArg,newPartials,newHolders,newPartialsRight,
        newHoldersRight,argPos,ary,arity
      ];

      varresult=wrapFunc.apply(undefined,newData);
      if(isLaziable(func)){
        setData(result,newData);
      }
      result.placeholder=placeholder;
      returnsetWrapToString(result,func,bitmask);
    }

    /**
     *Createsafunctionlike`_.round`.
     *
     *@private
     *@param{string}methodNameThenameofthe`Math`methodtousewhenrounding.
     *@returns{Function}Returnsthenewroundfunction.
     */
    functioncreateRound(methodName){
      varfunc=Math[methodName];
      returnfunction(number,precision){
        number=toNumber(number);
        precision=precision==null?0:nativeMin(toInteger(precision),292);
        if(precision){
          //Shiftwithexponentialnotationtoavoidfloating-pointissues.
          //See[MDN](https://mdn.io/round#Examples)formoredetails.
          varpair=(toString(number)+'e').split('e'),
              value=func(pair[0]+'e'+(+pair[1]+precision));

          pair=(toString(value)+'e').split('e');
          return+(pair[0]+'e'+(+pair[1]-precision));
        }
        returnfunc(number);
      };
    }

    /**
     *Createsasetobjectof`values`.
     *
     *@private
     *@param{Array}valuesThevaluestoaddtotheset.
     *@returns{Object}Returnsthenewset.
     */
    varcreateSet=!(Set&&(1/setToArray(newSet([,-0]))[1])==INFINITY)?noop:function(values){
      returnnewSet(values);
    };

    /**
     *Createsa`_.toPairs`or`_.toPairsIn`function.
     *
     *@private
     *@param{Function}keysFuncThefunctiontogetthekeysofagivenobject.
     *@returns{Function}Returnsthenewpairsfunction.
     */
    functioncreateToPairs(keysFunc){
      returnfunction(object){
        vartag=getTag(object);
        if(tag==mapTag){
          returnmapToArray(object);
        }
        if(tag==setTag){
          returnsetToPairs(object);
        }
        returnbaseToPairs(object,keysFunc(object));
      };
    }

    /**
     *Createsafunctionthateithercurriesorinvokes`func`withoptional
     *`this`bindingandpartiallyappliedarguments.
     *
     *@private
     *@param{Function|string}funcThefunctionormethodnametowrap.
     *@param{number}bitmaskThebitmaskflags.
     *   1-`_.bind`
     *   2-`_.bindKey`
     *   4-`_.curry`or`_.curryRight`ofaboundfunction
     *   8-`_.curry`
     *  16-`_.curryRight`
     *  32-`_.partial`
     *  64-`_.partialRight`
     * 128-`_.rearg`
     * 256-`_.ary`
     * 512-`_.flip`
     *@param{*}[thisArg]The`this`bindingof`func`.
     *@param{Array}[partials]Theargumentstobepartiallyapplied.
     *@param{Array}[holders]The`partials`placeholderindexes.
     *@param{Array}[argPos]Theargumentpositionsofthenewfunction.
     *@param{number}[ary]Thearitycapof`func`.
     *@param{number}[arity]Thearityof`func`.
     *@returns{Function}Returnsthenewwrappedfunction.
     */
    functioncreateWrap(func,bitmask,thisArg,partials,holders,argPos,ary,arity){
      varisBindKey=bitmask&WRAP_BIND_KEY_FLAG;
      if(!isBindKey&&typeoffunc!='function'){
        thrownewTypeError(FUNC_ERROR_TEXT);
      }
      varlength=partials?partials.length:0;
      if(!length){
        bitmask&=~(WRAP_PARTIAL_FLAG|WRAP_PARTIAL_RIGHT_FLAG);
        partials=holders=undefined;
      }
      ary=ary===undefined?ary:nativeMax(toInteger(ary),0);
      arity=arity===undefined?arity:toInteger(arity);
      length-=holders?holders.length:0;

      if(bitmask&WRAP_PARTIAL_RIGHT_FLAG){
        varpartialsRight=partials,
            holdersRight=holders;

        partials=holders=undefined;
      }
      vardata=isBindKey?undefined:getData(func);

      varnewData=[
        func,bitmask,thisArg,partials,holders,partialsRight,holdersRight,
        argPos,ary,arity
      ];

      if(data){
        mergeData(newData,data);
      }
      func=newData[0];
      bitmask=newData[1];
      thisArg=newData[2];
      partials=newData[3];
      holders=newData[4];
      arity=newData[9]=newData[9]===undefined
        ?(isBindKey?0:func.length)
        :nativeMax(newData[9]-length,0);

      if(!arity&&bitmask&(WRAP_CURRY_FLAG|WRAP_CURRY_RIGHT_FLAG)){
        bitmask&=~(WRAP_CURRY_FLAG|WRAP_CURRY_RIGHT_FLAG);
      }
      if(!bitmask||bitmask==WRAP_BIND_FLAG){
        varresult=createBind(func,bitmask,thisArg);
      }elseif(bitmask==WRAP_CURRY_FLAG||bitmask==WRAP_CURRY_RIGHT_FLAG){
        result=createCurry(func,bitmask,arity);
      }elseif((bitmask==WRAP_PARTIAL_FLAG||bitmask==(WRAP_BIND_FLAG|WRAP_PARTIAL_FLAG))&&!holders.length){
        result=createPartial(func,bitmask,thisArg,partials);
      }else{
        result=createHybrid.apply(undefined,newData);
      }
      varsetter=data?baseSetData:setData;
      returnsetWrapToString(setter(result,newData),func,bitmask);
    }

    /**
     *Usedby`_.defaults`tocustomizeits`_.assignIn`usetoassignproperties
     *ofsourceobjectstothedestinationobjectforalldestinationproperties
     *thatresolveto`undefined`.
     *
     *@private
     *@param{*}objValueThedestinationvalue.
     *@param{*}srcValueThesourcevalue.
     *@param{string}keyThekeyofthepropertytoassign.
     *@param{Object}objectTheparentobjectof`objValue`.
     *@returns{*}Returnsthevaluetoassign.
     */
    functioncustomDefaultsAssignIn(objValue,srcValue,key,object){
      if(objValue===undefined||
          (eq(objValue,objectProto[key])&&!hasOwnProperty.call(object,key))){
        returnsrcValue;
      }
      returnobjValue;
    }

    /**
     *Usedby`_.defaultsDeep`tocustomizeits`_.merge`usetomergesource
     *objectsintodestinationobjectsthatarepassedthru.
     *
     *@private
     *@param{*}objValueThedestinationvalue.
     *@param{*}srcValueThesourcevalue.
     *@param{string}keyThekeyofthepropertytomerge.
     *@param{Object}objectTheparentobjectof`objValue`.
     *@param{Object}sourceTheparentobjectof`srcValue`.
     *@param{Object}[stack]Trackstraversedsourcevaluesandtheirmerged
     * counterparts.
     *@returns{*}Returnsthevaluetoassign.
     */
    functioncustomDefaultsMerge(objValue,srcValue,key,object,source,stack){
      if(isObject(objValue)&&isObject(srcValue)){
        //Recursivelymergeobjectsandarrays(susceptibletocallstacklimits).
        stack.set(srcValue,objValue);
        baseMerge(objValue,srcValue,undefined,customDefaultsMerge,stack);
        stack['delete'](srcValue);
      }
      returnobjValue;
    }

    /**
     *Usedby`_.omit`tocustomizeits`_.cloneDeep`usetoonlycloneplain
     *objects.
     *
     *@private
     *@param{*}valueThevaluetoinspect.
     *@param{string}keyThekeyofthepropertytoinspect.
     *@returns{*}Returnstheunclonedvalueor`undefined`todefercloningto`_.cloneDeep`.
     */
    functioncustomOmitClone(value){
      returnisPlainObject(value)?undefined:value;
    }

    /**
     *Aspecializedversionof`baseIsEqualDeep`forarrayswithsupportfor
     *partialdeepcomparisons.
     *
     *@private
     *@param{Array}arrayThearraytocompare.
     *@param{Array}otherTheotherarraytocompare.
     *@param{number}bitmaskThebitmaskflags.See`baseIsEqual`formoredetails.
     *@param{Function}customizerThefunctiontocustomizecomparisons.
     *@param{Function}equalFuncThefunctiontodetermineequivalentsofvalues.
     *@param{Object}stackTrackstraversed`array`and`other`objects.
     *@returns{boolean}Returns`true`ifthearraysareequivalent,else`false`.
     */
    functionequalArrays(array,other,bitmask,customizer,equalFunc,stack){
      varisPartial=bitmask&COMPARE_PARTIAL_FLAG,
          arrLength=array.length,
          othLength=other.length;

      if(arrLength!=othLength&&!(isPartial&&othLength>arrLength)){
        returnfalse;
      }
      //Assumecyclicvaluesareequal.
      varstacked=stack.get(array);
      if(stacked&&stack.get(other)){
        returnstacked==other;
      }
      varindex=-1,
          result=true,
          seen=(bitmask&COMPARE_UNORDERED_FLAG)?newSetCache:undefined;

      stack.set(array,other);
      stack.set(other,array);

      //Ignorenon-indexproperties.
      while(++index<arrLength){
        vararrValue=array[index],
            othValue=other[index];

        if(customizer){
          varcompared=isPartial
            ?customizer(othValue,arrValue,index,other,array,stack)
            :customizer(arrValue,othValue,index,array,other,stack);
        }
        if(compared!==undefined){
          if(compared){
            continue;
          }
          result=false;
          break;
        }
        //Recursivelycomparearrays(susceptibletocallstacklimits).
        if(seen){
          if(!arraySome(other,function(othValue,othIndex){
                if(!cacheHas(seen,othIndex)&&
                    (arrValue===othValue||equalFunc(arrValue,othValue,bitmask,customizer,stack))){
                  returnseen.push(othIndex);
                }
              })){
            result=false;
            break;
          }
        }elseif(!(
              arrValue===othValue||
                equalFunc(arrValue,othValue,bitmask,customizer,stack)
            )){
          result=false;
          break;
        }
      }
      stack['delete'](array);
      stack['delete'](other);
      returnresult;
    }

    /**
     *Aspecializedversionof`baseIsEqualDeep`forcomparingobjectsof
     *thesame`toStringTag`.
     *
     ***Note:**Thisfunctiononlysupportscomparingvalueswithtagsof
     *`Boolean`,`Date`,`Error`,`Number`,`RegExp`,or`String`.
     *
     *@private
     *@param{Object}objectTheobjecttocompare.
     *@param{Object}otherTheotherobjecttocompare.
     *@param{string}tagThe`toStringTag`oftheobjectstocompare.
     *@param{number}bitmaskThebitmaskflags.See`baseIsEqual`formoredetails.
     *@param{Function}customizerThefunctiontocustomizecomparisons.
     *@param{Function}equalFuncThefunctiontodetermineequivalentsofvalues.
     *@param{Object}stackTrackstraversed`object`and`other`objects.
     *@returns{boolean}Returns`true`iftheobjectsareequivalent,else`false`.
     */
    functionequalByTag(object,other,tag,bitmask,customizer,equalFunc,stack){
      switch(tag){
        casedataViewTag:
          if((object.byteLength!=other.byteLength)||
              (object.byteOffset!=other.byteOffset)){
            returnfalse;
          }
          object=object.buffer;
          other=other.buffer;

        casearrayBufferTag:
          if((object.byteLength!=other.byteLength)||
              !equalFunc(newUint8Array(object),newUint8Array(other))){
            returnfalse;
          }
          returntrue;

        caseboolTag:
        casedateTag:
        casenumberTag:
          //Coercebooleansto`1`or`0`anddatestomilliseconds.
          //Invaliddatesarecoercedto`NaN`.
          returneq(+object,+other);

        caseerrorTag:
          returnobject.name==other.name&&object.message==other.message;

        caseregexpTag:
        casestringTag:
          //Coerceregexestostringsandtreatstrings,primitivesandobjects,
          //asequal.Seehttp://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
          //formoredetails.
          returnobject==(other+'');

        casemapTag:
          varconvert=mapToArray;

        casesetTag:
          varisPartial=bitmask&COMPARE_PARTIAL_FLAG;
          convert||(convert=setToArray);

          if(object.size!=other.size&&!isPartial){
            returnfalse;
          }
          //Assumecyclicvaluesareequal.
          varstacked=stack.get(object);
          if(stacked){
            returnstacked==other;
          }
          bitmask|=COMPARE_UNORDERED_FLAG;

          //Recursivelycompareobjects(susceptibletocallstacklimits).
          stack.set(object,other);
          varresult=equalArrays(convert(object),convert(other),bitmask,customizer,equalFunc,stack);
          stack['delete'](object);
          returnresult;

        casesymbolTag:
          if(symbolValueOf){
            returnsymbolValueOf.call(object)==symbolValueOf.call(other);
          }
      }
      returnfalse;
    }

    /**
     *Aspecializedversionof`baseIsEqualDeep`forobjectswithsupportfor
     *partialdeepcomparisons.
     *
     *@private
     *@param{Object}objectTheobjecttocompare.
     *@param{Object}otherTheotherobjecttocompare.
     *@param{number}bitmaskThebitmaskflags.See`baseIsEqual`formoredetails.
     *@param{Function}customizerThefunctiontocustomizecomparisons.
     *@param{Function}equalFuncThefunctiontodetermineequivalentsofvalues.
     *@param{Object}stackTrackstraversed`object`and`other`objects.
     *@returns{boolean}Returns`true`iftheobjectsareequivalent,else`false`.
     */
    functionequalObjects(object,other,bitmask,customizer,equalFunc,stack){
      varisPartial=bitmask&COMPARE_PARTIAL_FLAG,
          objProps=getAllKeys(object),
          objLength=objProps.length,
          othProps=getAllKeys(other),
          othLength=othProps.length;

      if(objLength!=othLength&&!isPartial){
        returnfalse;
      }
      varindex=objLength;
      while(index--){
        varkey=objProps[index];
        if(!(isPartial?keyinother:hasOwnProperty.call(other,key))){
          returnfalse;
        }
      }
      //Assumecyclicvaluesareequal.
      varstacked=stack.get(object);
      if(stacked&&stack.get(other)){
        returnstacked==other;
      }
      varresult=true;
      stack.set(object,other);
      stack.set(other,object);

      varskipCtor=isPartial;
      while(++index<objLength){
        key=objProps[index];
        varobjValue=object[key],
            othValue=other[key];

        if(customizer){
          varcompared=isPartial
            ?customizer(othValue,objValue,key,other,object,stack)
            :customizer(objValue,othValue,key,object,other,stack);
        }
        //Recursivelycompareobjects(susceptibletocallstacklimits).
        if(!(compared===undefined
              ?(objValue===othValue||equalFunc(objValue,othValue,bitmask,customizer,stack))
              :compared
            )){
          result=false;
          break;
        }
        skipCtor||(skipCtor=key=='constructor');
      }
      if(result&&!skipCtor){
        varobjCtor=object.constructor,
            othCtor=other.constructor;

        //Non`Object`objectinstanceswithdifferentconstructorsarenotequal.
        if(objCtor!=othCtor&&
            ('constructor'inobject&&'constructor'inother)&&
            !(typeofobjCtor=='function'&&objCtorinstanceofobjCtor&&
              typeofothCtor=='function'&&othCtorinstanceofothCtor)){
          result=false;
        }
      }
      stack['delete'](object);
      stack['delete'](other);
      returnresult;
    }

    /**
     *Aspecializedversionof`baseRest`whichflattenstherestarray.
     *
     *@private
     *@param{Function}funcThefunctiontoapplyarestparameterto.
     *@returns{Function}Returnsthenewfunction.
     */
    functionflatRest(func){
      returnsetToString(overRest(func,undefined,flatten),func+'');
    }

    /**
     *Createsanarrayofownenumerablepropertynamesandsymbolsof`object`.
     *
     *@private
     *@param{Object}objectTheobjecttoquery.
     *@returns{Array}Returnsthearrayofpropertynamesandsymbols.
     */
    functiongetAllKeys(object){
      returnbaseGetAllKeys(object,keys,getSymbols);
    }

    /**
     *Createsanarrayofownandinheritedenumerablepropertynamesand
     *symbolsof`object`.
     *
     *@private
     *@param{Object}objectTheobjecttoquery.
     *@returns{Array}Returnsthearrayofpropertynamesandsymbols.
     */
    functiongetAllKeysIn(object){
      returnbaseGetAllKeys(object,keysIn,getSymbolsIn);
    }

    /**
     *Getsmetadatafor`func`.
     *
     *@private
     *@param{Function}funcThefunctiontoquery.
     *@returns{*}Returnsthemetadatafor`func`.
     */
    vargetData=!metaMap?noop:function(func){
      returnmetaMap.get(func);
    };

    /**
     *Getsthenameof`func`.
     *
     *@private
     *@param{Function}funcThefunctiontoquery.
     *@returns{string}Returnsthefunctionname.
     */
    functiongetFuncName(func){
      varresult=(func.name+''),
          array=realNames[result],
          length=hasOwnProperty.call(realNames,result)?array.length:0;

      while(length--){
        vardata=array[length],
            otherFunc=data.func;
        if(otherFunc==null||otherFunc==func){
          returndata.name;
        }
      }
      returnresult;
    }

    /**
     *Getstheargumentplaceholdervaluefor`func`.
     *
     *@private
     *@param{Function}funcThefunctiontoinspect.
     *@returns{*}Returnstheplaceholdervalue.
     */
    functiongetHolder(func){
      varobject=hasOwnProperty.call(lodash,'placeholder')?lodash:func;
      returnobject.placeholder;
    }

    /**
     *Getstheappropriate"iteratee"function.If`_.iteratee`iscustomized,
     *thisfunctionreturnsthecustommethod,otherwiseitreturns`baseIteratee`.
     *Ifargumentsareprovided,thechosenfunctionisinvokedwiththemand
     *itsresultisreturned.
     *
     *@private
     *@param{*}[value]Thevaluetoconverttoaniteratee.
     *@param{number}[arity]Thearityofthecreatediteratee.
     *@returns{Function}Returnsthechosenfunctionoritsresult.
     */
    functiongetIteratee(){
      varresult=lodash.iteratee||iteratee;
      result=result===iteratee?baseIteratee:result;
      returnarguments.length?result(arguments[0],arguments[1]):result;
    }

    /**
     *Getsthedatafor`map`.
     *
     *@private
     *@param{Object}mapThemaptoquery.
     *@param{string}keyThereferencekey.
     *@returns{*}Returnsthemapdata.
     */
    functiongetMapData(map,key){
      vardata=map.__data__;
      returnisKeyable(key)
        ?data[typeofkey=='string'?'string':'hash']
        :data.map;
    }

    /**
     *Getsthepropertynames,values,andcompareflagsof`object`.
     *
     *@private
     *@param{Object}objectTheobjecttoquery.
     *@returns{Array}Returnsthematchdataof`object`.
     */
    functiongetMatchData(object){
      varresult=keys(object),
          length=result.length;

      while(length--){
        varkey=result[length],
            value=object[key];

        result[length]=[key,value,isStrictComparable(value)];
      }
      returnresult;
    }

    /**
     *Getsthenativefunctionat`key`of`object`.
     *
     *@private
     *@param{Object}objectTheobjecttoquery.
     *@param{string}keyThekeyofthemethodtoget.
     *@returns{*}Returnsthefunctionifit'snative,else`undefined`.
     */
    functiongetNative(object,key){
      varvalue=getValue(object,key);
      returnbaseIsNative(value)?value:undefined;
    }

    /**
     *Aspecializedversionof`baseGetTag`whichignores`Symbol.toStringTag`values.
     *
     *@private
     *@param{*}valueThevaluetoquery.
     *@returns{string}Returnstheraw`toStringTag`.
     */
    functiongetRawTag(value){
      varisOwn=hasOwnProperty.call(value,symToStringTag),
          tag=value[symToStringTag];

      try{
        value[symToStringTag]=undefined;
        varunmasked=true;
      }catch(e){}

      varresult=nativeObjectToString.call(value);
      if(unmasked){
        if(isOwn){
          value[symToStringTag]=tag;
        }else{
          deletevalue[symToStringTag];
        }
      }
      returnresult;
    }

    /**
     *Createsanarrayoftheownenumerablesymbolsof`object`.
     *
     *@private
     *@param{Object}objectTheobjecttoquery.
     *@returns{Array}Returnsthearrayofsymbols.
     */
    vargetSymbols=!nativeGetSymbols?stubArray:function(object){
      if(object==null){
        return[];
      }
      object=Object(object);
      returnarrayFilter(nativeGetSymbols(object),function(symbol){
        returnpropertyIsEnumerable.call(object,symbol);
      });
    };

    /**
     *Createsanarrayoftheownandinheritedenumerablesymbolsof`object`.
     *
     *@private
     *@param{Object}objectTheobjecttoquery.
     *@returns{Array}Returnsthearrayofsymbols.
     */
    vargetSymbolsIn=!nativeGetSymbols?stubArray:function(object){
      varresult=[];
      while(object){
        arrayPush(result,getSymbols(object));
        object=getPrototype(object);
      }
      returnresult;
    };

    /**
     *Getsthe`toStringTag`of`value`.
     *
     *@private
     *@param{*}valueThevaluetoquery.
     *@returns{string}Returnsthe`toStringTag`.
     */
    vargetTag=baseGetTag;

    //Fallbackfordataviews,maps,sets,andweakmapsinIE11andpromisesinNode.js<6.
    if((DataView&&getTag(newDataView(newArrayBuffer(1)))!=dataViewTag)||
        (Map&&getTag(newMap)!=mapTag)||
        (Promise&&getTag(Promise.resolve())!=promiseTag)||
        (Set&&getTag(newSet)!=setTag)||
        (WeakMap&&getTag(newWeakMap)!=weakMapTag)){
      getTag=function(value){
        varresult=baseGetTag(value),
            Ctor=result==objectTag?value.constructor:undefined,
            ctorString=Ctor?toSource(Ctor):'';

        if(ctorString){
          switch(ctorString){
            casedataViewCtorString:returndataViewTag;
            casemapCtorString:returnmapTag;
            casepromiseCtorString:returnpromiseTag;
            casesetCtorString:returnsetTag;
            caseweakMapCtorString:returnweakMapTag;
          }
        }
        returnresult;
      };
    }

    /**
     *Getstheview,applyingany`transforms`tothe`start`and`end`positions.
     *
     *@private
     *@param{number}startThestartoftheview.
     *@param{number}endTheendoftheview.
     *@param{Array}transformsThetransformationstoapplytotheview.
     *@returns{Object}Returnsanobjectcontainingthe`start`and`end`
     * positionsoftheview.
     */
    functiongetView(start,end,transforms){
      varindex=-1,
          length=transforms.length;

      while(++index<length){
        vardata=transforms[index],
            size=data.size;

        switch(data.type){
          case'drop':     start+=size;break;
          case'dropRight':end-=size;break;
          case'take':     end=nativeMin(end,start+size);break;
          case'takeRight':start=nativeMax(start,end-size);break;
        }
      }
      return{'start':start,'end':end};
    }

    /**
     *Extractswrapperdetailsfromthe`source`bodycomment.
     *
     *@private
     *@param{string}sourceThesourcetoinspect.
     *@returns{Array}Returnsthewrapperdetails.
     */
    functiongetWrapDetails(source){
      varmatch=source.match(reWrapDetails);
      returnmatch?match[1].split(reSplitDetails):[];
    }

    /**
     *Checksif`path`existson`object`.
     *
     *@private
     *@param{Object}objectTheobjecttoquery.
     *@param{Array|string}pathThepathtocheck.
     *@param{Function}hasFuncThefunctiontocheckproperties.
     *@returns{boolean}Returns`true`if`path`exists,else`false`.
     */
    functionhasPath(object,path,hasFunc){
      path=castPath(path,object);

      varindex=-1,
          length=path.length,
          result=false;

      while(++index<length){
        varkey=toKey(path[index]);
        if(!(result=object!=null&&hasFunc(object,key))){
          break;
        }
        object=object[key];
      }
      if(result||++index!=length){
        returnresult;
      }
      length=object==null?0:object.length;
      return!!length&&isLength(length)&&isIndex(key,length)&&
        (isArray(object)||isArguments(object));
    }

    /**
     *Initializesanarrayclone.
     *
     *@private
     *@param{Array}arrayThearraytoclone.
     *@returns{Array}Returnstheinitializedclone.
     */
    functioninitCloneArray(array){
      varlength=array.length,
          result=array.constructor(length);

      //Addpropertiesassignedby`RegExp#exec`.
      if(length&&typeofarray[0]=='string'&&hasOwnProperty.call(array,'index')){
        result.index=array.index;
        result.input=array.input;
      }
      returnresult;
    }

    /**
     *Initializesanobjectclone.
     *
     *@private
     *@param{Object}objectTheobjecttoclone.
     *@returns{Object}Returnstheinitializedclone.
     */
    functioninitCloneObject(object){
      return(typeofobject.constructor=='function'&&!isPrototype(object))
        ?baseCreate(getPrototype(object))
        :{};
    }

    /**
     *Initializesanobjectclonebasedonits`toStringTag`.
     *
     ***Note:**Thisfunctiononlysupportscloningvalueswithtagsof
     *`Boolean`,`Date`,`Error`,`Number`,`RegExp`,or`String`.
     *
     *@private
     *@param{Object}objectTheobjecttoclone.
     *@param{string}tagThe`toStringTag`oftheobjecttoclone.
     *@param{Function}cloneFuncThefunctiontoclonevalues.
     *@param{boolean}[isDeep]Specifyadeepclone.
     *@returns{Object}Returnstheinitializedclone.
     */
    functioninitCloneByTag(object,tag,cloneFunc,isDeep){
      varCtor=object.constructor;
      switch(tag){
        casearrayBufferTag:
          returncloneArrayBuffer(object);

        caseboolTag:
        casedateTag:
          returnnewCtor(+object);

        casedataViewTag:
          returncloneDataView(object,isDeep);

        casefloat32Tag:casefloat64Tag:
        caseint8Tag:caseint16Tag:caseint32Tag:
        caseuint8Tag:caseuint8ClampedTag:caseuint16Tag:caseuint32Tag:
          returncloneTypedArray(object,isDeep);

        casemapTag:
          returncloneMap(object,isDeep,cloneFunc);

        casenumberTag:
        casestringTag:
          returnnewCtor(object);

        caseregexpTag:
          returncloneRegExp(object);

        casesetTag:
          returncloneSet(object,isDeep,cloneFunc);

        casesymbolTag:
          returncloneSymbol(object);
      }
    }

    /**
     *Insertswrapper`details`inacommentatthetopofthe`source`body.
     *
     *@private
     *@param{string}sourceThesourcetomodify.
     *@returns{Array}detailsThedetailstoinsert.
     *@returns{string}Returnsthemodifiedsource.
     */
    functioninsertWrapDetails(source,details){
      varlength=details.length;
      if(!length){
        returnsource;
      }
      varlastIndex=length-1;
      details[lastIndex]=(length>1?'&':'')+details[lastIndex];
      details=details.join(length>2?',':'');
      returnsource.replace(reWrapComment,'{\n/*[wrappedwith'+details+']*/\n');
    }

    /**
     *Checksif`value`isaflattenable`arguments`objectorarray.
     *
     *@private
     *@param{*}valueThevaluetocheck.
     *@returns{boolean}Returns`true`if`value`isflattenable,else`false`.
     */
    functionisFlattenable(value){
      returnisArray(value)||isArguments(value)||
        !!(spreadableSymbol&&value&&value[spreadableSymbol]);
    }

    /**
     *Checksif`value`isavalidarray-likeindex.
     *
     *@private
     *@param{*}valueThevaluetocheck.
     *@param{number}[length=MAX_SAFE_INTEGER]Theupperboundsofavalidindex.
     *@returns{boolean}Returns`true`if`value`isavalidindex,else`false`.
     */
    functionisIndex(value,length){
      length=length==null?MAX_SAFE_INTEGER:length;
      return!!length&&
        (typeofvalue=='number'||reIsUint.test(value))&&
        (value>-1&&value%1==0&&value<length);
    }

    /**
     *Checksifthegivenargumentsarefromaniterateecall.
     *
     *@private
     *@param{*}valueThepotentialiterateevalueargument.
     *@param{*}indexThepotentialiterateeindexorkeyargument.
     *@param{*}objectThepotentialiterateeobjectargument.
     *@returns{boolean}Returns`true`iftheargumentsarefromaniterateecall,
     * else`false`.
     */
    functionisIterateeCall(value,index,object){
      if(!isObject(object)){
        returnfalse;
      }
      vartype=typeofindex;
      if(type=='number'
            ?(isArrayLike(object)&&isIndex(index,object.length))
            :(type=='string'&&indexinobject)
          ){
        returneq(object[index],value);
      }
      returnfalse;
    }

    /**
     *Checksif`value`isapropertynameandnotapropertypath.
     *
     *@private
     *@param{*}valueThevaluetocheck.
     *@param{Object}[object]Theobjecttoquerykeyson.
     *@returns{boolean}Returns`true`if`value`isapropertyname,else`false`.
     */
    functionisKey(value,object){
      if(isArray(value)){
        returnfalse;
      }
      vartype=typeofvalue;
      if(type=='number'||type=='symbol'||type=='boolean'||
          value==null||isSymbol(value)){
        returntrue;
      }
      returnreIsPlainProp.test(value)||!reIsDeepProp.test(value)||
        (object!=null&&valueinObject(object));
    }

    /**
     *Checksif`value`issuitableforuseasuniqueobjectkey.
     *
     *@private
     *@param{*}valueThevaluetocheck.
     *@returns{boolean}Returns`true`if`value`issuitable,else`false`.
     */
    functionisKeyable(value){
      vartype=typeofvalue;
      return(type=='string'||type=='number'||type=='symbol'||type=='boolean')
        ?(value!=='__proto__')
        :(value===null);
    }

    /**
     *Checksif`func`hasalazycounterpart.
     *
     *@private
     *@param{Function}funcThefunctiontocheck.
     *@returns{boolean}Returns`true`if`func`hasalazycounterpart,
     * else`false`.
     */
    functionisLaziable(func){
      varfuncName=getFuncName(func),
          other=lodash[funcName];

      if(typeofother!='function'||!(funcNameinLazyWrapper.prototype)){
        returnfalse;
      }
      if(func===other){
        returntrue;
      }
      vardata=getData(other);
      return!!data&&func===data[0];
    }

    /**
     *Checksif`func`hasitssourcemasked.
     *
     *@private
     *@param{Function}funcThefunctiontocheck.
     *@returns{boolean}Returns`true`if`func`ismasked,else`false`.
     */
    functionisMasked(func){
      return!!maskSrcKey&&(maskSrcKeyinfunc);
    }

    /**
     *Checksif`func`iscapableofbeingmasked.
     *
     *@private
     *@param{*}valueThevaluetocheck.
     *@returns{boolean}Returns`true`if`func`ismaskable,else`false`.
     */
    varisMaskable=coreJsData?isFunction:stubFalse;

    /**
     *Checksif`value`islikelyaprototypeobject.
     *
     *@private
     *@param{*}valueThevaluetocheck.
     *@returns{boolean}Returns`true`if`value`isaprototype,else`false`.
     */
    functionisPrototype(value){
      varCtor=value&&value.constructor,
          proto=(typeofCtor=='function'&&Ctor.prototype)||objectProto;

      returnvalue===proto;
    }

    /**
     *Checksif`value`issuitableforstrictequalitycomparisons,i.e.`===`.
     *
     *@private
     *@param{*}valueThevaluetocheck.
     *@returns{boolean}Returns`true`if`value`ifsuitableforstrict
     * equalitycomparisons,else`false`.
     */
    functionisStrictComparable(value){
      returnvalue===value&&!isObject(value);
    }

    /**
     *Aspecializedversionof`matchesProperty`forsourcevaluessuitable
     *forstrictequalitycomparisons,i.e.`===`.
     *
     *@private
     *@param{string}keyThekeyofthepropertytoget.
     *@param{*}srcValueThevaluetomatch.
     *@returns{Function}Returnsthenewspecfunction.
     */
    functionmatchesStrictComparable(key,srcValue){
      returnfunction(object){
        if(object==null){
          returnfalse;
        }
        returnobject[key]===srcValue&&
          (srcValue!==undefined||(keyinObject(object)));
      };
    }

    /**
     *Aspecializedversionof`_.memoize`whichclearsthememoizedfunction's
     *cachewhenitexceeds`MAX_MEMOIZE_SIZE`.
     *
     *@private
     *@param{Function}funcThefunctiontohaveitsoutputmemoized.
     *@returns{Function}Returnsthenewmemoizedfunction.
     */
    functionmemoizeCapped(func){
      varresult=memoize(func,function(key){
        if(cache.size===MAX_MEMOIZE_SIZE){
          cache.clear();
        }
        returnkey;
      });

      varcache=result.cache;
      returnresult;
    }

    /**
     *Mergesthefunctionmetadataof`source`into`data`.
     *
     *Mergingmetadatareducesthenumberofwrappersusedtoinvokeafunction.
     *Thisispossiblebecausemethodslike`_.bind`,`_.curry`,and`_.partial`
     *maybeappliedregardlessofexecutionorder.Methodslike`_.ary`and
     *`_.rearg`modifyfunctionarguments,makingtheorderinwhichtheyare
     *executedimportant,preventingthemergingofmetadata.However,wemake
     *anexceptionforasafecombinedcasewherecurriedfunctionshave`_.ary`
     *andor`_.rearg`applied.
     *
     *@private
     *@param{Array}dataThedestinationmetadata.
     *@param{Array}sourceThesourcemetadata.
     *@returns{Array}Returns`data`.
     */
    functionmergeData(data,source){
      varbitmask=data[1],
          srcBitmask=source[1],
          newBitmask=bitmask|srcBitmask,
          isCommon=newBitmask<(WRAP_BIND_FLAG|WRAP_BIND_KEY_FLAG|WRAP_ARY_FLAG);

      varisCombo=
        ((srcBitmask==WRAP_ARY_FLAG)&&(bitmask==WRAP_CURRY_FLAG))||
        ((srcBitmask==WRAP_ARY_FLAG)&&(bitmask==WRAP_REARG_FLAG)&&(data[7].length<=source[8]))||
        ((srcBitmask==(WRAP_ARY_FLAG|WRAP_REARG_FLAG))&&(source[7].length<=source[8])&&(bitmask==WRAP_CURRY_FLAG));

      //Exitearlyifmetadatacan'tbemerged.
      if(!(isCommon||isCombo)){
        returndata;
      }
      //Usesource`thisArg`ifavailable.
      if(srcBitmask&WRAP_BIND_FLAG){
        data[2]=source[2];
        //Setwhencurryingaboundfunction.
        newBitmask|=bitmask&WRAP_BIND_FLAG?0:WRAP_CURRY_BOUND_FLAG;
      }
      //Composepartialarguments.
      varvalue=source[3];
      if(value){
        varpartials=data[3];
        data[3]=partials?composeArgs(partials,value,source[4]):value;
        data[4]=partials?replaceHolders(data[3],PLACEHOLDER):source[4];
      }
      //Composepartialrightarguments.
      value=source[5];
      if(value){
        partials=data[5];
        data[5]=partials?composeArgsRight(partials,value,source[6]):value;
        data[6]=partials?replaceHolders(data[5],PLACEHOLDER):source[6];
      }
      //Usesource`argPos`ifavailable.
      value=source[7];
      if(value){
        data[7]=value;
      }
      //Usesource`ary`ifit'ssmaller.
      if(srcBitmask&WRAP_ARY_FLAG){
        data[8]=data[8]==null?source[8]:nativeMin(data[8],source[8]);
      }
      //Usesource`arity`ifoneisnotprovided.
      if(data[9]==null){
        data[9]=source[9];
      }
      //Usesource`func`andmergebitmasks.
      data[0]=source[0];
      data[1]=newBitmask;

      returndata;
    }

    /**
     *Thisfunctionislike
     *[`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     *exceptthatitincludesinheritedenumerableproperties.
     *
     *@private
     *@param{Object}objectTheobjecttoquery.
     *@returns{Array}Returnsthearrayofpropertynames.
     */
    functionnativeKeysIn(object){
      varresult=[];
      if(object!=null){
        for(varkeyinObject(object)){
          result.push(key);
        }
      }
      returnresult;
    }

    /**
     *Converts`value`toastringusing`Object.prototype.toString`.
     *
     *@private
     *@param{*}valueThevaluetoconvert.
     *@returns{string}Returnstheconvertedstring.
     */
    functionobjectToString(value){
      returnnativeObjectToString.call(value);
    }

    /**
     *Aspecializedversionof`baseRest`whichtransformstherestarray.
     *
     *@private
     *@param{Function}funcThefunctiontoapplyarestparameterto.
     *@param{number}[start=func.length-1]Thestartpositionoftherestparameter.
     *@param{Function}transformTherestarraytransform.
     *@returns{Function}Returnsthenewfunction.
     */
    functionoverRest(func,start,transform){
      start=nativeMax(start===undefined?(func.length-1):start,0);
      returnfunction(){
        varargs=arguments,
            index=-1,
            length=nativeMax(args.length-start,0),
            array=Array(length);

        while(++index<length){
          array[index]=args[start+index];
        }
        index=-1;
        varotherArgs=Array(start+1);
        while(++index<start){
          otherArgs[index]=args[index];
        }
        otherArgs[start]=transform(array);
        returnapply(func,this,otherArgs);
      };
    }

    /**
     *Getstheparentvalueat`path`of`object`.
     *
     *@private
     *@param{Object}objectTheobjecttoquery.
     *@param{Array}pathThepathtogettheparentvalueof.
     *@returns{*}Returnstheparentvalue.
     */
    functionparent(object,path){
      returnpath.length<2?object:baseGet(object,baseSlice(path,0,-1));
    }

    /**
     *Reorder`array`accordingtothespecifiedindexeswheretheelementat
     *thefirstindexisassignedasthefirstelement,theelementat
     *thesecondindexisassignedasthesecondelement,andsoon.
     *
     *@private
     *@param{Array}arrayThearraytoreorder.
     *@param{Array}indexesThearrangedarrayindexes.
     *@returns{Array}Returns`array`.
     */
    functionreorder(array,indexes){
      vararrLength=array.length,
          length=nativeMin(indexes.length,arrLength),
          oldArray=copyArray(array);

      while(length--){
        varindex=indexes[length];
        array[length]=isIndex(index,arrLength)?oldArray[index]:undefined;
      }
      returnarray;
    }

    /**
     *Setsmetadatafor`func`.
     *
     ***Note:**Ifthisfunctionbecomeshot,i.e.isinvokedalotinashort
     *periodoftime,itwilltripitsbreakerandtransitiontoanidentity
     *functiontoavoidgarbagecollectionpausesinV8.See
     *[V8issue2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
     *formoredetails.
     *
     *@private
     *@param{Function}funcThefunctiontoassociatemetadatawith.
     *@param{*}dataThemetadata.
     *@returns{Function}Returns`func`.
     */
    varsetData=shortOut(baseSetData);

    /**
     *Asimplewrapperaroundtheglobal[`setTimeout`](https://mdn.io/setTimeout).
     *
     *@private
     *@param{Function}funcThefunctiontodelay.
     *@param{number}waitThenumberofmillisecondstodelayinvocation.
     *@returns{number|Object}Returnsthetimeridortimeoutobject.
     */
    varsetTimeout=ctxSetTimeout||function(func,wait){
      returnroot.setTimeout(func,wait);
    };

    /**
     *Setsthe`toString`methodof`func`toreturn`string`.
     *
     *@private
     *@param{Function}funcThefunctiontomodify.
     *@param{Function}stringThe`toString`result.
     *@returns{Function}Returns`func`.
     */
    varsetToString=shortOut(baseSetToString);

    /**
     *Setsthe`toString`methodof`wrapper`tomimicthesourceof`reference`
     *withwrapperdetailsinacommentatthetopofthesourcebody.
     *
     *@private
     *@param{Function}wrapperThefunctiontomodify.
     *@param{Function}referenceThereferencefunction.
     *@param{number}bitmaskThebitmaskflags.See`createWrap`formoredetails.
     *@returns{Function}Returns`wrapper`.
     */
    functionsetWrapToString(wrapper,reference,bitmask){
      varsource=(reference+'');
      returnsetToString(wrapper,insertWrapDetails(source,updateWrapDetails(getWrapDetails(source),bitmask)));
    }

    /**
     *Createsafunctionthat'llshortoutandinvoke`identity`instead
     *of`func`whenit'scalled`HOT_COUNT`ormoretimesin`HOT_SPAN`
     *milliseconds.
     *
     *@private
     *@param{Function}funcThefunctiontorestrict.
     *@returns{Function}Returnsthenewshortablefunction.
     */
    functionshortOut(func){
      varcount=0,
          lastCalled=0;

      returnfunction(){
        varstamp=nativeNow(),
            remaining=HOT_SPAN-(stamp-lastCalled);

        lastCalled=stamp;
        if(remaining>0){
          if(++count>=HOT_COUNT){
            returnarguments[0];
          }
        }else{
          count=0;
        }
        returnfunc.apply(undefined,arguments);
      };
    }

    /**
     *Aspecializedversionof`_.shuffle`whichmutatesandsetsthesizeof`array`.
     *
     *@private
     *@param{Array}arrayThearraytoshuffle.
     *@param{number}[size=array.length]Thesizeof`array`.
     *@returns{Array}Returns`array`.
     */
    functionshuffleSelf(array,size){
      varindex=-1,
          length=array.length,
          lastIndex=length-1;

      size=size===undefined?length:size;
      while(++index<size){
        varrand=baseRandom(index,lastIndex),
            value=array[rand];

        array[rand]=array[index];
        array[index]=value;
      }
      array.length=size;
      returnarray;
    }

    /**
     *Converts`string`toapropertypatharray.
     *
     *@private
     *@param{string}stringThestringtoconvert.
     *@returns{Array}Returnsthepropertypatharray.
     */
    varstringToPath=memoizeCapped(function(string){
      varresult=[];
      if(reLeadingDot.test(string)){
        result.push('');
      }
      string.replace(rePropName,function(match,number,quote,string){
        result.push(quote?string.replace(reEscapeChar,'$1'):(number||match));
      });
      returnresult;
    });

    /**
     *Converts`value`toastringkeyifit'snotastringorsymbol.
     *
     *@private
     *@param{*}valueThevaluetoinspect.
     *@returns{string|symbol}Returnsthekey.
     */
    functiontoKey(value){
      if(typeofvalue=='string'||isSymbol(value)){
        returnvalue;
      }
      varresult=(value+'');
      return(result=='0'&&(1/value)==-INFINITY)?'-0':result;
    }

    /**
     *Converts`func`toitssourcecode.
     *
     *@private
     *@param{Function}funcThefunctiontoconvert.
     *@returns{string}Returnsthesourcecode.
     */
    functiontoSource(func){
      if(func!=null){
        try{
          returnfuncToString.call(func);
        }catch(e){}
        try{
          return(func+'');
        }catch(e){}
      }
      return'';
    }

    /**
     *Updateswrapper`details`basedon`bitmask`flags.
     *
     *@private
     *@returns{Array}detailsThedetailstomodify.
     *@param{number}bitmaskThebitmaskflags.See`createWrap`formoredetails.
     *@returns{Array}Returns`details`.
     */
    functionupdateWrapDetails(details,bitmask){
      arrayEach(wrapFlags,function(pair){
        varvalue='_.'+pair[0];
        if((bitmask&pair[1])&&!arrayIncludes(details,value)){
          details.push(value);
        }
      });
      returndetails.sort();
    }

    /**
     *Createsacloneof`wrapper`.
     *
     *@private
     *@param{Object}wrapperThewrappertoclone.
     *@returns{Object}Returnstheclonedwrapper.
     */
    functionwrapperClone(wrapper){
      if(wrapperinstanceofLazyWrapper){
        returnwrapper.clone();
      }
      varresult=newLodashWrapper(wrapper.__wrapped__,wrapper.__chain__);
      result.__actions__=copyArray(wrapper.__actions__);
      result.__index__ =wrapper.__index__;
      result.__values__=wrapper.__values__;
      returnresult;
    }

    /*------------------------------------------------------------------------*/

    /**
     *Createsanarrayofelementssplitintogroupsthelengthof`size`.
     *If`array`can'tbesplitevenly,thefinalchunkwillbetheremaining
     *elements.
     *
     *@static
     *@memberOf_
     *@since3.0.0
     *@categoryArray
     *@param{Array}arrayThearraytoprocess.
     *@param{number}[size=1]Thelengthofeachchunk
     *@param-{Object}[guard]Enablesuseasaniterateeformethodslike`_.map`.
     *@returns{Array}Returnsthenewarrayofchunks.
     *@example
     *
     *_.chunk(['a','b','c','d'],2);
     *//=>[['a','b'],['c','d']]
     *
     *_.chunk(['a','b','c','d'],3);
     *//=>[['a','b','c'],['d']]
     */
    functionchunk(array,size,guard){
      if((guard?isIterateeCall(array,size,guard):size===undefined)){
        size=1;
      }else{
        size=nativeMax(toInteger(size),0);
      }
      varlength=array==null?0:array.length;
      if(!length||size<1){
        return[];
      }
      varindex=0,
          resIndex=0,
          result=Array(nativeCeil(length/size));

      while(index<length){
        result[resIndex++]=baseSlice(array,index,(index+=size));
      }
      returnresult;
    }

    /**
     *Createsanarraywithallfalseyvaluesremoved.Thevalues`false`,`null`,
     *`0`,`""`,`undefined`,and`NaN`arefalsey.
     *
     *@static
     *@memberOf_
     *@since0.1.0
     *@categoryArray
     *@param{Array}arrayThearraytocompact.
     *@returns{Array}Returnsthenewarrayoffilteredvalues.
     *@example
     *
     *_.compact([0,1,false,2,'',3]);
     *//=>[1,2,3]
     */
    functioncompact(array){
      varindex=-1,
          length=array==null?0:array.length,
          resIndex=0,
          result=[];

      while(++index<length){
        varvalue=array[index];
        if(value){
          result[resIndex++]=value;
        }
      }
      returnresult;
    }

    /**
     *Createsanewarrayconcatenating`array`withanyadditionalarrays
     *and/orvalues.
     *
     *@static
     *@memberOf_
     *@since4.0.0
     *@categoryArray
     *@param{Array}arrayThearraytoconcatenate.
     *@param{...*}[values]Thevaluestoconcatenate.
     *@returns{Array}Returnsthenewconcatenatedarray.
     *@example
     *
     *vararray=[1];
     *varother=_.concat(array,2,[3],[[4]]);
     *
     *console.log(other);
     *//=>[1,2,3,[4]]
     *
     *console.log(array);
     *//=>[1]
     */
    functionconcat(){
      varlength=arguments.length;
      if(!length){
        return[];
      }
      varargs=Array(length-1),
          array=arguments[0],
          index=length;

      while(index--){
        args[index-1]=arguments[index];
      }
      returnarrayPush(isArray(array)?copyArray(array):[array],baseFlatten(args,1));
    }

    /**
     *Createsanarrayof`array`valuesnotincludedintheothergivenarrays
     *using[`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     *forequalitycomparisons.Theorderandreferencesofresultvaluesare
     *determinedbythefirstarray.
     *
     ***Note:**Unlike`_.pullAll`,thismethodreturnsanewarray.
     *
     *@static
     *@memberOf_
     *@since0.1.0
     *@categoryArray
     *@param{Array}arrayThearraytoinspect.
     *@param{...Array}[values]Thevaluestoexclude.
     *@returns{Array}Returnsthenewarrayoffilteredvalues.
     *@see_.without,_.xor
     *@example
     *
     *_.difference([2,1],[2,3]);
     *//=>[1]
     */
    vardifference=baseRest(function(array,values){
      returnisArrayLikeObject(array)
        ?baseDifference(array,baseFlatten(values,1,isArrayLikeObject,true))
        :[];
    });

    /**
     *Thismethodislike`_.difference`exceptthatitaccepts`iteratee`which
     *isinvokedforeachelementof`array`and`values`togeneratethecriterion
     *bywhichthey'recompared.Theorderandreferencesofresultvaluesare
     *determinedbythefirstarray.Theiterateeisinvokedwithoneargument:
     *(value).
     *
     ***Note:**Unlike`_.pullAllBy`,thismethodreturnsanewarray.
     *
     *@static
     *@memberOf_
     *@since4.0.0
     *@categoryArray
     *@param{Array}arrayThearraytoinspect.
     *@param{...Array}[values]Thevaluestoexclude.
     *@param{Function}[iteratee=_.identity]Theiterateeinvokedperelement.
     *@returns{Array}Returnsthenewarrayoffilteredvalues.
     *@example
     *
     *_.differenceBy([2.1,1.2],[2.3,3.4],Math.floor);
     *//=>[1.2]
     *
     *//The`_.property`iterateeshorthand.
     *_.differenceBy([{'x':2},{'x':1}],[{'x':1}],'x');
     *//=>[{'x':2}]
     */
    vardifferenceBy=baseRest(function(array,values){
      variteratee=last(values);
      if(isArrayLikeObject(iteratee)){
        iteratee=undefined;
      }
      returnisArrayLikeObject(array)
        ?baseDifference(array,baseFlatten(values,1,isArrayLikeObject,true),getIteratee(iteratee,2))
        :[];
    });

    /**
     *Thismethodislike`_.difference`exceptthatitaccepts`comparator`
     *whichisinvokedtocompareelementsof`array`to`values`.Theorderand
     *referencesofresultvaluesaredeterminedbythefirstarray.Thecomparator
     *isinvokedwithtwoarguments:(arrVal,othVal).
     *
     ***Note:**Unlike`_.pullAllWith`,thismethodreturnsanewarray.
     *
     *@static
     *@memberOf_
     *@since4.0.0
     *@categoryArray
     *@param{Array}arrayThearraytoinspect.
     *@param{...Array}[values]Thevaluestoexclude.
     *@param{Function}[comparator]Thecomparatorinvokedperelement.
     *@returns{Array}Returnsthenewarrayoffilteredvalues.
     *@example
     *
     *varobjects=[{'x':1,'y':2},{'x':2,'y':1}];
     *
     *_.differenceWith(objects,[{'x':1,'y':2}],_.isEqual);
     *//=>[{'x':2,'y':1}]
     */
    vardifferenceWith=baseRest(function(array,values){
      varcomparator=last(values);
      if(isArrayLikeObject(comparator)){
        comparator=undefined;
      }
      returnisArrayLikeObject(array)
        ?baseDifference(array,baseFlatten(values,1,isArrayLikeObject,true),undefined,comparator)
        :[];
    });

    /**
     *Createsasliceof`array`with`n`elementsdroppedfromthebeginning.
     *
     *@static
     *@memberOf_
     *@since0.5.0
     *@categoryArray
     *@param{Array}arrayThearraytoquery.
     *@param{number}[n=1]Thenumberofelementstodrop.
     *@param-{Object}[guard]Enablesuseasaniterateeformethodslike`_.map`.
     *@returns{Array}Returnsthesliceof`array`.
     *@example
     *
     *_.drop([1,2,3]);
     *//=>[2,3]
     *
     *_.drop([1,2,3],2);
     *//=>[3]
     *
     *_.drop([1,2,3],5);
     *//=>[]
     *
     *_.drop([1,2,3],0);
     *//=>[1,2,3]
     */
    functiondrop(array,n,guard){
      varlength=array==null?0:array.length;
      if(!length){
        return[];
      }
      n=(guard||n===undefined)?1:toInteger(n);
      returnbaseSlice(array,n<0?0:n,length);
    }

    /**
     *Createsasliceof`array`with`n`elementsdroppedfromtheend.
     *
     *@static
     *@memberOf_
     *@since3.0.0
     *@categoryArray
     *@param{Array}arrayThearraytoquery.
     *@param{number}[n=1]Thenumberofelementstodrop.
     *@param-{Object}[guard]Enablesuseasaniterateeformethodslike`_.map`.
     *@returns{Array}Returnsthesliceof`array`.
     *@example
     *
     *_.dropRight([1,2,3]);
     *//=>[1,2]
     *
     *_.dropRight([1,2,3],2);
     *//=>[1]
     *
     *_.dropRight([1,2,3],5);
     *//=>[]
     *
     *_.dropRight([1,2,3],0);
     *//=>[1,2,3]
     */
    functiondropRight(array,n,guard){
      varlength=array==null?0:array.length;
      if(!length){
        return[];
      }
      n=(guard||n===undefined)?1:toInteger(n);
      n=length-n;
      returnbaseSlice(array,0,n<0?0:n);
    }

    /**
     *Createsasliceof`array`excludingelementsdroppedfromtheend.
     *Elementsaredroppeduntil`predicate`returnsfalsey.Thepredicateis
     *invokedwiththreearguments:(value,index,array).
     *
     *@static
     *@memberOf_
     *@since3.0.0
     *@categoryArray
     *@param{Array}arrayThearraytoquery.
     *@param{Function}[predicate=_.identity]Thefunctioninvokedperiteration.
     *@returns{Array}Returnsthesliceof`array`.
     *@example
     *
     *varusers=[
     *  {'user':'barney', 'active':true},
     *  {'user':'fred',   'active':false},
     *  {'user':'pebbles','active':false}
     *];
     *
     *_.dropRightWhile(users,function(o){return!o.active;});
     *//=>objectsfor['barney']
     *
     *//The`_.matches`iterateeshorthand.
     *_.dropRightWhile(users,{'user':'pebbles','active':false});
     *//=>objectsfor['barney','fred']
     *
     *//The`_.matchesProperty`iterateeshorthand.
     *_.dropRightWhile(users,['active',false]);
     *//=>objectsfor['barney']
     *
     *//The`_.property`iterateeshorthand.
     *_.dropRightWhile(users,'active');
     *//=>objectsfor['barney','fred','pebbles']
     */
    functiondropRightWhile(array,predicate){
      return(array&&array.length)
        ?baseWhile(array,getIteratee(predicate,3),true,true)
        :[];
    }

    /**
     *Createsasliceof`array`excludingelementsdroppedfromthebeginning.
     *Elementsaredroppeduntil`predicate`returnsfalsey.Thepredicateis
     *invokedwiththreearguments:(value,index,array).
     *
     *@static
     *@memberOf_
     *@since3.0.0
     *@categoryArray
     *@param{Array}arrayThearraytoquery.
     *@param{Function}[predicate=_.identity]Thefunctioninvokedperiteration.
     *@returns{Array}Returnsthesliceof`array`.
     *@example
     *
     *varusers=[
     *  {'user':'barney', 'active':false},
     *  {'user':'fred',   'active':false},
     *  {'user':'pebbles','active':true}
     *];
     *
     *_.dropWhile(users,function(o){return!o.active;});
     *//=>objectsfor['pebbles']
     *
     *//The`_.matches`iterateeshorthand.
     *_.dropWhile(users,{'user':'barney','active':false});
     *//=>objectsfor['fred','pebbles']
     *
     *//The`_.matchesProperty`iterateeshorthand.
     *_.dropWhile(users,['active',false]);
     *//=>objectsfor['pebbles']
     *
     *//The`_.property`iterateeshorthand.
     *_.dropWhile(users,'active');
     *//=>objectsfor['barney','fred','pebbles']
     */
    functiondropWhile(array,predicate){
      return(array&&array.length)
        ?baseWhile(array,getIteratee(predicate,3),true)
        :[];
    }

    /**
     *Fillselementsof`array`with`value`from`start`upto,butnot
     *including,`end`.
     *
     ***Note:**Thismethodmutates`array`.
     *
     *@static
     *@memberOf_
     *@since3.2.0
     *@categoryArray
     *@param{Array}arrayThearraytofill.
     *@param{*}valueThevaluetofill`array`with.
     *@param{number}[start=0]Thestartposition.
     *@param{number}[end=array.length]Theendposition.
     *@returns{Array}Returns`array`.
     *@example
     *
     *vararray=[1,2,3];
     *
     *_.fill(array,'a');
     *console.log(array);
     *//=>['a','a','a']
     *
     *_.fill(Array(3),2);
     *//=>[2,2,2]
     *
     *_.fill([4,6,8,10],'*',1,3);
     *//=>[4,'*','*',10]
     */
    functionfill(array,value,start,end){
      varlength=array==null?0:array.length;
      if(!length){
        return[];
      }
      if(start&&typeofstart!='number'&&isIterateeCall(array,value,start)){
        start=0;
        end=length;
      }
      returnbaseFill(array,value,start,end);
    }

    /**
     *Thismethodislike`_.find`exceptthatitreturnstheindexofthefirst
     *element`predicate`returnstruthyforinsteadoftheelementitself.
     *
     *@static
     *@memberOf_
     *@since1.1.0
     *@categoryArray
     *@param{Array}arrayThearraytoinspect.
     *@param{Function}[predicate=_.identity]Thefunctioninvokedperiteration.
     *@param{number}[fromIndex=0]Theindextosearchfrom.
     *@returns{number}Returnstheindexofthefoundelement,else`-1`.
     *@example
     *
     *varusers=[
     *  {'user':'barney', 'active':false},
     *  {'user':'fred',   'active':false},
     *  {'user':'pebbles','active':true}
     *];
     *
     *_.findIndex(users,function(o){returno.user=='barney';});
     *//=>0
     *
     *//The`_.matches`iterateeshorthand.
     *_.findIndex(users,{'user':'fred','active':false});
     *//=>1
     *
     *//The`_.matchesProperty`iterateeshorthand.
     *_.findIndex(users,['active',false]);
     *//=>0
     *
     *//The`_.property`iterateeshorthand.
     *_.findIndex(users,'active');
     *//=>2
     */
    functionfindIndex(array,predicate,fromIndex){
      varlength=array==null?0:array.length;
      if(!length){
        return-1;
      }
      varindex=fromIndex==null?0:toInteger(fromIndex);
      if(index<0){
        index=nativeMax(length+index,0);
      }
      returnbaseFindIndex(array,getIteratee(predicate,3),index);
    }

    /**
     *Thismethodislike`_.findIndex`exceptthatititeratesoverelements
     *of`collection`fromrighttoleft.
     *
     *@static
     *@memberOf_
     *@since2.0.0
     *@categoryArray
     *@param{Array}arrayThearraytoinspect.
     *@param{Function}[predicate=_.identity]Thefunctioninvokedperiteration.
     *@param{number}[fromIndex=array.length-1]Theindextosearchfrom.
     *@returns{number}Returnstheindexofthefoundelement,else`-1`.
     *@example
     *
     *varusers=[
     *  {'user':'barney', 'active':true},
     *  {'user':'fred',   'active':false},
     *  {'user':'pebbles','active':false}
     *];
     *
     *_.findLastIndex(users,function(o){returno.user=='pebbles';});
     *//=>2
     *
     *//The`_.matches`iterateeshorthand.
     *_.findLastIndex(users,{'user':'barney','active':true});
     *//=>0
     *
     *//The`_.matchesProperty`iterateeshorthand.
     *_.findLastIndex(users,['active',false]);
     *//=>2
     *
     *//The`_.property`iterateeshorthand.
     *_.findLastIndex(users,'active');
     *//=>0
     */
    functionfindLastIndex(array,predicate,fromIndex){
      varlength=array==null?0:array.length;
      if(!length){
        return-1;
      }
      varindex=length-1;
      if(fromIndex!==undefined){
        index=toInteger(fromIndex);
        index=fromIndex<0
          ?nativeMax(length+index,0)
          :nativeMin(index,length-1);
      }
      returnbaseFindIndex(array,getIteratee(predicate,3),index,true);
    }

    /**
     *Flattens`array`asingleleveldeep.
     *
     *@static
     *@memberOf_
     *@since0.1.0
     *@categoryArray
     *@param{Array}arrayThearraytoflatten.
     *@returns{Array}Returnsthenewflattenedarray.
     *@example
     *
     *_.flatten([1,[2,[3,[4]],5]]);
     *//=>[1,2,[3,[4]],5]
     */
    functionflatten(array){
      varlength=array==null?0:array.length;
      returnlength?baseFlatten(array,1):[];
    }

    /**
     *Recursivelyflattens`array`.
     *
     *@static
     *@memberOf_
     *@since3.0.0
     *@categoryArray
     *@param{Array}arrayThearraytoflatten.
     *@returns{Array}Returnsthenewflattenedarray.
     *@example
     *
     *_.flattenDeep([1,[2,[3,[4]],5]]);
     *//=>[1,2,3,4,5]
     */
    functionflattenDeep(array){
      varlength=array==null?0:array.length;
      returnlength?baseFlatten(array,INFINITY):[];
    }

    /**
     *Recursivelyflatten`array`upto`depth`times.
     *
     *@static
     *@memberOf_
     *@since4.4.0
     *@categoryArray
     *@param{Array}arrayThearraytoflatten.
     *@param{number}[depth=1]Themaximumrecursiondepth.
     *@returns{Array}Returnsthenewflattenedarray.
     *@example
     *
     *vararray=[1,[2,[3,[4]],5]];
     *
     *_.flattenDepth(array,1);
     *//=>[1,2,[3,[4]],5]
     *
     *_.flattenDepth(array,2);
     *//=>[1,2,3,[4],5]
     */
    functionflattenDepth(array,depth){
      varlength=array==null?0:array.length;
      if(!length){
        return[];
      }
      depth=depth===undefined?1:toInteger(depth);
      returnbaseFlatten(array,depth);
    }

    /**
     *Theinverseof`_.toPairs`;thismethodreturnsanobjectcomposed
     *fromkey-value`pairs`.
     *
     *@static
     *@memberOf_
     *@since4.0.0
     *@categoryArray
     *@param{Array}pairsThekey-valuepairs.
     *@returns{Object}Returnsthenewobject.
     *@example
     *
     *_.fromPairs([['a',1],['b',2]]);
     *//=>{'a':1,'b':2}
     */
    functionfromPairs(pairs){
      varindex=-1,
          length=pairs==null?0:pairs.length,
          result={};

      while(++index<length){
        varpair=pairs[index];
        result[pair[0]]=pair[1];
      }
      returnresult;
    }

    /**
     *Getsthefirstelementof`array`.
     *
     *@static
     *@memberOf_
     *@since0.1.0
     *@aliasfirst
     *@categoryArray
     *@param{Array}arrayThearraytoquery.
     *@returns{*}Returnsthefirstelementof`array`.
     *@example
     *
     *_.head([1,2,3]);
     *//=>1
     *
     *_.head([]);
     *//=>undefined
     */
    functionhead(array){
      return(array&&array.length)?array[0]:undefined;
    }

    /**
     *Getstheindexatwhichthefirstoccurrenceof`value`isfoundin`array`
     *using[`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     *forequalitycomparisons.If`fromIndex`isnegative,it'susedasthe
     *offsetfromtheendof`array`.
     *
     *@static
     *@memberOf_
     *@since0.1.0
     *@categoryArray
     *@param{Array}arrayThearraytoinspect.
     *@param{*}valueThevaluetosearchfor.
     *@param{number}[fromIndex=0]Theindextosearchfrom.
     *@returns{number}Returnstheindexofthematchedvalue,else`-1`.
     *@example
     *
     *_.indexOf([1,2,1,2],2);
     *//=>1
     *
     *//Searchfromthe`fromIndex`.
     *_.indexOf([1,2,1,2],2,2);
     *//=>3
     */
    functionindexOf(array,value,fromIndex){
      varlength=array==null?0:array.length;
      if(!length){
        return-1;
      }
      varindex=fromIndex==null?0:toInteger(fromIndex);
      if(index<0){
        index=nativeMax(length+index,0);
      }
      returnbaseIndexOf(array,value,index);
    }

    /**
     *Getsallbutthelastelementof`array`.
     *
     *@static
     *@memberOf_
     *@since0.1.0
     *@categoryArray
     *@param{Array}arrayThearraytoquery.
     *@returns{Array}Returnsthesliceof`array`.
     *@example
     *
     *_.initial([1,2,3]);
     *//=>[1,2]
     */
    functioninitial(array){
      varlength=array==null?0:array.length;
      returnlength?baseSlice(array,0,-1):[];
    }

    /**
     *Createsanarrayofuniquevaluesthatareincludedinallgivenarrays
     *using[`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     *forequalitycomparisons.Theorderandreferencesofresultvaluesare
     *determinedbythefirstarray.
     *
     *@static
     *@memberOf_
     *@since0.1.0
     *@categoryArray
     *@param{...Array}[arrays]Thearraystoinspect.
     *@returns{Array}Returnsthenewarrayofintersectingvalues.
     *@example
     *
     *_.intersection([2,1],[2,3]);
     *//=>[2]
     */
    varintersection=baseRest(function(arrays){
      varmapped=arrayMap(arrays,castArrayLikeObject);
      return(mapped.length&&mapped[0]===arrays[0])
        ?baseIntersection(mapped)
        :[];
    });

    /**
     *Thismethodislike`_.intersection`exceptthatitaccepts`iteratee`
     *whichisinvokedforeachelementofeach`arrays`togeneratethecriterion
     *bywhichthey'recompared.Theorderandreferencesofresultvaluesare
     *determinedbythefirstarray.Theiterateeisinvokedwithoneargument:
     *(value).
     *
     *@static
     *@memberOf_
     *@since4.0.0
     *@categoryArray
     *@param{...Array}[arrays]Thearraystoinspect.
     *@param{Function}[iteratee=_.identity]Theiterateeinvokedperelement.
     *@returns{Array}Returnsthenewarrayofintersectingvalues.
     *@example
     *
     *_.intersectionBy([2.1,1.2],[2.3,3.4],Math.floor);
     *//=>[2.1]
     *
     *//The`_.property`iterateeshorthand.
     *_.intersectionBy([{'x':1}],[{'x':2},{'x':1}],'x');
     *//=>[{'x':1}]
     */
    varintersectionBy=baseRest(function(arrays){
      variteratee=last(arrays),
          mapped=arrayMap(arrays,castArrayLikeObject);

      if(iteratee===last(mapped)){
        iteratee=undefined;
      }else{
        mapped.pop();
      }
      return(mapped.length&&mapped[0]===arrays[0])
        ?baseIntersection(mapped,getIteratee(iteratee,2))
        :[];
    });

    /**
     *Thismethodislike`_.intersection`exceptthatitaccepts`comparator`
     *whichisinvokedtocompareelementsof`arrays`.Theorderandreferences
     *ofresultvaluesaredeterminedbythefirstarray.Thecomparatoris
     *invokedwithtwoarguments:(arrVal,othVal).
     *
     *@static
     *@memberOf_
     *@since4.0.0
     *@categoryArray
     *@param{...Array}[arrays]Thearraystoinspect.
     *@param{Function}[comparator]Thecomparatorinvokedperelement.
     *@returns{Array}Returnsthenewarrayofintersectingvalues.
     *@example
     *
     *varobjects=[{'x':1,'y':2},{'x':2,'y':1}];
     *varothers=[{'x':1,'y':1},{'x':1,'y':2}];
     *
     *_.intersectionWith(objects,others,_.isEqual);
     *//=>[{'x':1,'y':2}]
     */
    varintersectionWith=baseRest(function(arrays){
      varcomparator=last(arrays),
          mapped=arrayMap(arrays,castArrayLikeObject);

      comparator=typeofcomparator=='function'?comparator:undefined;
      if(comparator){
        mapped.pop();
      }
      return(mapped.length&&mapped[0]===arrays[0])
        ?baseIntersection(mapped,undefined,comparator)
        :[];
    });

    /**
     *Convertsallelementsin`array`intoastringseparatedby`separator`.
     *
     *@static
     *@memberOf_
     *@since4.0.0
     *@categoryArray
     *@param{Array}arrayThearraytoconvert.
     *@param{string}[separator=',']Theelementseparator.
     *@returns{string}Returnsthejoinedstring.
     *@example
     *
     *_.join(['a','b','c'],'~');
     *//=>'a~b~c'
     */
    functionjoin(array,separator){
      returnarray==null?'':nativeJoin.call(array,separator);
    }

    /**
     *Getsthelastelementof`array`.
     *
     *@static
     *@memberOf_
     *@since0.1.0
     *@categoryArray
     *@param{Array}arrayThearraytoquery.
     *@returns{*}Returnsthelastelementof`array`.
     *@example
     *
     *_.last([1,2,3]);
     *//=>3
     */
    functionlast(array){
      varlength=array==null?0:array.length;
      returnlength?array[length-1]:undefined;
    }

    /**
     *Thismethodislike`_.indexOf`exceptthatititeratesoverelementsof
     *`array`fromrighttoleft.
     *
     *@static
     *@memberOf_
     *@since0.1.0
     *@categoryArray
     *@param{Array}arrayThearraytoinspect.
     *@param{*}valueThevaluetosearchfor.
     *@param{number}[fromIndex=array.length-1]Theindextosearchfrom.
     *@returns{number}Returnstheindexofthematchedvalue,else`-1`.
     *@example
     *
     *_.lastIndexOf([1,2,1,2],2);
     *//=>3
     *
     *//Searchfromthe`fromIndex`.
     *_.lastIndexOf([1,2,1,2],2,2);
     *//=>1
     */
    functionlastIndexOf(array,value,fromIndex){
      varlength=array==null?0:array.length;
      if(!length){
        return-1;
      }
      varindex=length;
      if(fromIndex!==undefined){
        index=toInteger(fromIndex);
        index=index<0?nativeMax(length+index,0):nativeMin(index,length-1);
      }
      returnvalue===value
        ?strictLastIndexOf(array,value,index)
        :baseFindIndex(array,baseIsNaN,index,true);
    }

    /**
     *Getstheelementatindex`n`of`array`.If`n`isnegative,thenth
     *elementfromtheendisreturned.
     *
     *@static
     *@memberOf_
     *@since4.11.0
     *@categoryArray
     *@param{Array}arrayThearraytoquery.
     *@param{number}[n=0]Theindexoftheelementtoreturn.
     *@returns{*}Returnsthenthelementof`array`.
     *@example
     *
     *vararray=['a','b','c','d'];
     *
     *_.nth(array,1);
     *//=>'b'
     *
     *_.nth(array,-2);
     *//=>'c';
     */
    functionnth(array,n){
      return(array&&array.length)?baseNth(array,toInteger(n)):undefined;
    }

    /**
     *Removesallgivenvaluesfrom`array`using
     *[`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     *forequalitycomparisons.
     *
     ***Note:**Unlike`_.without`,thismethodmutates`array`.Use`_.remove`
     *toremoveelementsfromanarraybypredicate.
     *
     *@static
     *@memberOf_
     *@since2.0.0
     *@categoryArray
     *@param{Array}arrayThearraytomodify.
     *@param{...*}[values]Thevaluestoremove.
     *@returns{Array}Returns`array`.
     *@example
     *
     *vararray=['a','b','c','a','b','c'];
     *
     *_.pull(array,'a','c');
     *console.log(array);
     *//=>['b','b']
     */
    varpull=baseRest(pullAll);

    /**
     *Thismethodislike`_.pull`exceptthatitacceptsanarrayofvaluestoremove.
     *
     ***Note:**Unlike`_.difference`,thismethodmutates`array`.
     *
     *@static
     *@memberOf_
     *@since4.0.0
     *@categoryArray
     *@param{Array}arrayThearraytomodify.
     *@param{Array}valuesThevaluestoremove.
     *@returns{Array}Returns`array`.
     *@example
     *
     *vararray=['a','b','c','a','b','c'];
     *
     *_.pullAll(array,['a','c']);
     *console.log(array);
     *//=>['b','b']
     */
    functionpullAll(array,values){
      return(array&&array.length&&values&&values.length)
        ?basePullAll(array,values)
        :array;
    }

    /**
     *Thismethodislike`_.pullAll`exceptthatitaccepts`iteratee`whichis
     *invokedforeachelementof`array`and`values`togeneratethecriterion
     *bywhichthey'recompared.Theiterateeisinvokedwithoneargument:(value).
     *
     ***Note:**Unlike`_.differenceBy`,thismethodmutates`array`.
     *
     *@static
     *@memberOf_
     *@since4.0.0
     *@categoryArray
     *@param{Array}arrayThearraytomodify.
     *@param{Array}valuesThevaluestoremove.
     *@param{Function}[iteratee=_.identity]Theiterateeinvokedperelement.
     *@returns{Array}Returns`array`.
     *@example
     *
     *vararray=[{'x':1},{'x':2},{'x':3},{'x':1}];
     *
     *_.pullAllBy(array,[{'x':1},{'x':3}],'x');
     *console.log(array);
     *//=>[{'x':2}]
     */
    functionpullAllBy(array,values,iteratee){
      return(array&&array.length&&values&&values.length)
        ?basePullAll(array,values,getIteratee(iteratee,2))
        :array;
    }

    /**
     *Thismethodislike`_.pullAll`exceptthatitaccepts`comparator`which
     *isinvokedtocompareelementsof`array`to`values`.Thecomparatoris
     *invokedwithtwoarguments:(arrVal,othVal).
     *
     ***Note:**Unlike`_.differenceWith`,thismethodmutates`array`.
     *
     *@static
     *@memberOf_
     *@since4.6.0
     *@categoryArray
     *@param{Array}arrayThearraytomodify.
     *@param{Array}valuesThevaluestoremove.
     *@param{Function}[comparator]Thecomparatorinvokedperelement.
     *@returns{Array}Returns`array`.
     *@example
     *
     *vararray=[{'x':1,'y':2},{'x':3,'y':4},{'x':5,'y':6}];
     *
     *_.pullAllWith(array,[{'x':3,'y':4}],_.isEqual);
     *console.log(array);
     *//=>[{'x':1,'y':2},{'x':5,'y':6}]
     */
    functionpullAllWith(array,values,comparator){
      return(array&&array.length&&values&&values.length)
        ?basePullAll(array,values,undefined,comparator)
        :array;
    }

    /**
     *Removeselementsfrom`array`correspondingto`indexes`andreturnsan
     *arrayofremovedelements.
     *
     ***Note:**Unlike`_.at`,thismethodmutates`array`.
     *
     *@static
     *@memberOf_
     *@since3.0.0
     *@categoryArray
     *@param{Array}arrayThearraytomodify.
     *@param{...(number|number[])}[indexes]Theindexesofelementstoremove.
     *@returns{Array}Returnsthenewarrayofremovedelements.
     *@example
     *
     *vararray=['a','b','c','d'];
     *varpulled=_.pullAt(array,[1,3]);
     *
     *console.log(array);
     *//=>['a','c']
     *
     *console.log(pulled);
     *//=>['b','d']
     */
    varpullAt=flatRest(function(array,indexes){
      varlength=array==null?0:array.length,
          result=baseAt(array,indexes);

      basePullAt(array,arrayMap(indexes,function(index){
        returnisIndex(index,length)?+index:index;
      }).sort(compareAscending));

      returnresult;
    });

    /**
     *Removesallelementsfrom`array`that`predicate`returnstruthyfor
     *andreturnsanarrayoftheremovedelements.Thepredicateisinvoked
     *withthreearguments:(value,index,array).
     *
     ***Note:**Unlike`_.filter`,thismethodmutates`array`.Use`_.pull`
     *topullelementsfromanarraybyvalue.
     *
     *@static
     *@memberOf_
     *@since2.0.0
     *@categoryArray
     *@param{Array}arrayThearraytomodify.
     *@param{Function}[predicate=_.identity]Thefunctioninvokedperiteration.
     *@returns{Array}Returnsthenewarrayofremovedelements.
     *@example
     *
     *vararray=[1,2,3,4];
     *varevens=_.remove(array,function(n){
     *  returnn%2==0;
     *});
     *
     *console.log(array);
     *//=>[1,3]
     *
     *console.log(evens);
     *//=>[2,4]
     */
    functionremove(array,predicate){
      varresult=[];
      if(!(array&&array.length)){
        returnresult;
      }
      varindex=-1,
          indexes=[],
          length=array.length;

      predicate=getIteratee(predicate,3);
      while(++index<length){
        varvalue=array[index];
        if(predicate(value,index,array)){
          result.push(value);
          indexes.push(index);
        }
      }
      basePullAt(array,indexes);
      returnresult;
    }

    /**
     *Reverses`array`sothatthefirstelementbecomesthelast,thesecond
     *elementbecomesthesecondtolast,andsoon.
     *
     ***Note:**Thismethodmutates`array`andisbasedon
     *[`Array#reverse`](https://mdn.io/Array/reverse).
     *
     *@static
     *@memberOf_
     *@since4.0.0
     *@categoryArray
     *@param{Array}arrayThearraytomodify.
     *@returns{Array}Returns`array`.
     *@example
     *
     *vararray=[1,2,3];
     *
     *_.reverse(array);
     *//=>[3,2,1]
     *
     *console.log(array);
     *//=>[3,2,1]
     */
    functionreverse(array){
      returnarray==null?array:nativeReverse.call(array);
    }

    /**
     *Createsasliceof`array`from`start`upto,butnotincluding,`end`.
     *
     ***Note:**Thismethodisusedinsteadof
     *[`Array#slice`](https://mdn.io/Array/slice)toensuredensearraysare
     *returned.
     *
     *@static
     *@memberOf_
     *@since3.0.0
     *@categoryArray
     *@param{Array}arrayThearraytoslice.
     *@param{number}[start=0]Thestartposition.
     *@param{number}[end=array.length]Theendposition.
     *@returns{Array}Returnsthesliceof`array`.
     */
    functionslice(array,start,end){
      varlength=array==null?0:array.length;
      if(!length){
        return[];
      }
      if(end&&typeofend!='number'&&isIterateeCall(array,start,end)){
        start=0;
        end=length;
      }
      else{
        start=start==null?0:toInteger(start);
        end=end===undefined?length:toInteger(end);
      }
      returnbaseSlice(array,start,end);
    }

    /**
     *Usesabinarysearchtodeterminethelowestindexatwhich`value`
     *shouldbeinsertedinto`array`inordertomaintainitssortorder.
     *
     *@static
     *@memberOf_
     *@since0.1.0
     *@categoryArray
     *@param{Array}arrayThesortedarraytoinspect.
     *@param{*}valueThevaluetoevaluate.
     *@returns{number}Returnstheindexatwhich`value`shouldbeinserted
     * into`array`.
     *@example
     *
     *_.sortedIndex([30,50],40);
     *//=>1
     */
    functionsortedIndex(array,value){
      returnbaseSortedIndex(array,value);
    }

    /**
     *Thismethodislike`_.sortedIndex`exceptthatitaccepts`iteratee`
     *whichisinvokedfor`value`andeachelementof`array`tocomputetheir
     *sortranking.Theiterateeisinvokedwithoneargument:(value).
     *
     *@static
     *@memberOf_
     *@since4.0.0
     *@categoryArray
     *@param{Array}arrayThesortedarraytoinspect.
     *@param{*}valueThevaluetoevaluate.
     *@param{Function}[iteratee=_.identity]Theiterateeinvokedperelement.
     *@returns{number}Returnstheindexatwhich`value`shouldbeinserted
     * into`array`.
     *@example
     *
     *varobjects=[{'x':4},{'x':5}];
     *
     *_.sortedIndexBy(objects,{'x':4},function(o){returno.x;});
     *//=>0
     *
     *//The`_.property`iterateeshorthand.
     *_.sortedIndexBy(objects,{'x':4},'x');
     *//=>0
     */
    functionsortedIndexBy(array,value,iteratee){
      returnbaseSortedIndexBy(array,value,getIteratee(iteratee,2));
    }

    /**
     *Thismethodislike`_.indexOf`exceptthatitperformsabinary
     *searchonasorted`array`.
     *
     *@static
     *@memberOf_
     *@since4.0.0
     *@categoryArray
     *@param{Array}arrayThearraytoinspect.
     *@param{*}valueThevaluetosearchfor.
     *@returns{number}Returnstheindexofthematchedvalue,else`-1`.
     *@example
     *
     *_.sortedIndexOf([4,5,5,5,6],5);
     *//=>1
     */
    functionsortedIndexOf(array,value){
      varlength=array==null?0:array.length;
      if(length){
        varindex=baseSortedIndex(array,value);
        if(index<length&&eq(array[index],value)){
          returnindex;
        }
      }
      return-1;
    }

    /**
     *Thismethodislike`_.sortedIndex`exceptthatitreturnsthehighest
     *indexatwhich`value`shouldbeinsertedinto`array`inorderto
     *maintainitssortorder.
     *
     *@static
     *@memberOf_
     *@since3.0.0
     *@categoryArray
     *@param{Array}arrayThesortedarraytoinspect.
     *@param{*}valueThevaluetoevaluate.
     *@returns{number}Returnstheindexatwhich`value`shouldbeinserted
     * into`array`.
     *@example
     *
     *_.sortedLastIndex([4,5,5,5,6],5);
     *//=>4
     */
    functionsortedLastIndex(array,value){
      returnbaseSortedIndex(array,value,true);
    }

    /**
     *Thismethodislike`_.sortedLastIndex`exceptthatitaccepts`iteratee`
     *whichisinvokedfor`value`andeachelementof`array`tocomputetheir
     *sortranking.Theiterateeisinvokedwithoneargument:(value).
     *
     *@static
     *@memberOf_
     *@since4.0.0
     *@categoryArray
     *@param{Array}arrayThesortedarraytoinspect.
     *@param{*}valueThevaluetoevaluate.
     *@param{Function}[iteratee=_.identity]Theiterateeinvokedperelement.
     *@returns{number}Returnstheindexatwhich`value`shouldbeinserted
     * into`array`.
     *@example
     *
     *varobjects=[{'x':4},{'x':5}];
     *
     *_.sortedLastIndexBy(objects,{'x':4},function(o){returno.x;});
     *//=>1
     *
     *//The`_.property`iterateeshorthand.
     *_.sortedLastIndexBy(objects,{'x':4},'x');
     *//=>1
     */
    functionsortedLastIndexBy(array,value,iteratee){
      returnbaseSortedIndexBy(array,value,getIteratee(iteratee,2),true);
    }

    /**
     *Thismethodislike`_.lastIndexOf`exceptthatitperformsabinary
     *searchonasorted`array`.
     *
     *@static
     *@memberOf_
     *@since4.0.0
     *@categoryArray
     *@param{Array}arrayThearraytoinspect.
     *@param{*}valueThevaluetosearchfor.
     *@returns{number}Returnstheindexofthematchedvalue,else`-1`.
     *@example
     *
     *_.sortedLastIndexOf([4,5,5,5,6],5);
     *//=>3
     */
    functionsortedLastIndexOf(array,value){
      varlength=array==null?0:array.length;
      if(length){
        varindex=baseSortedIndex(array,value,true)-1;
        if(eq(array[index],value)){
          returnindex;
        }
      }
      return-1;
    }

    /**
     *Thismethodislike`_.uniq`exceptthatit'sdesignedandoptimized
     *forsortedarrays.
     *
     *@static
     *@memberOf_
     *@since4.0.0
     *@categoryArray
     *@param{Array}arrayThearraytoinspect.
     *@returns{Array}Returnsthenewduplicatefreearray.
     *@example
     *
     *_.sortedUniq([1,1,2]);
     *//=>[1,2]
     */
    functionsortedUniq(array){
      return(array&&array.length)
        ?baseSortedUniq(array)
        :[];
    }

    /**
     *Thismethodislike`_.uniqBy`exceptthatit'sdesignedandoptimized
     *forsortedarrays.
     *
     *@static
     *@memberOf_
     *@since4.0.0
     *@categoryArray
     *@param{Array}arrayThearraytoinspect.
     *@param{Function}[iteratee]Theiterateeinvokedperelement.
     *@returns{Array}Returnsthenewduplicatefreearray.
     *@example
     *
     *_.sortedUniqBy([1.1,1.2,2.3,2.4],Math.floor);
     *//=>[1.1,2.3]
     */
    functionsortedUniqBy(array,iteratee){
      return(array&&array.length)
        ?baseSortedUniq(array,getIteratee(iteratee,2))
        :[];
    }

    /**
     *Getsallbutthefirstelementof`array`.
     *
     *@static
     *@memberOf_
     *@since4.0.0
     *@categoryArray
     *@param{Array}arrayThearraytoquery.
     *@returns{Array}Returnsthesliceof`array`.
     *@example
     *
     *_.tail([1,2,3]);
     *//=>[2,3]
     */
    functiontail(array){
      varlength=array==null?0:array.length;
      returnlength?baseSlice(array,1,length):[];
    }

    /**
     *Createsasliceof`array`with`n`elementstakenfromthebeginning.
     *
     *@static
     *@memberOf_
     *@since0.1.0
     *@categoryArray
     *@param{Array}arrayThearraytoquery.
     *@param{number}[n=1]Thenumberofelementstotake.
     *@param-{Object}[guard]Enablesuseasaniterateeformethodslike`_.map`.
     *@returns{Array}Returnsthesliceof`array`.
     *@example
     *
     *_.take([1,2,3]);
     *//=>[1]
     *
     *_.take([1,2,3],2);
     *//=>[1,2]
     *
     *_.take([1,2,3],5);
     *//=>[1,2,3]
     *
     *_.take([1,2,3],0);
     *//=>[]
     */
    functiontake(array,n,guard){
      if(!(array&&array.length)){
        return[];
      }
      n=(guard||n===undefined)?1:toInteger(n);
      returnbaseSlice(array,0,n<0?0:n);
    }

    /**
     *Createsasliceof`array`with`n`elementstakenfromtheend.
     *
     *@static
     *@memberOf_
     *@since3.0.0
     *@categoryArray
     *@param{Array}arrayThearraytoquery.
     *@param{number}[n=1]Thenumberofelementstotake.
     *@param-{Object}[guard]Enablesuseasaniterateeformethodslike`_.map`.
     *@returns{Array}Returnsthesliceof`array`.
     *@example
     *
     *_.takeRight([1,2,3]);
     *//=>[3]
     *
     *_.takeRight([1,2,3],2);
     *//=>[2,3]
     *
     *_.takeRight([1,2,3],5);
     *//=>[1,2,3]
     *
     *_.takeRight([1,2,3],0);
     *//=>[]
     */
    functiontakeRight(array,n,guard){
      varlength=array==null?0:array.length;
      if(!length){
        return[];
      }
      n=(guard||n===undefined)?1:toInteger(n);
      n=length-n;
      returnbaseSlice(array,n<0?0:n,length);
    }

    /**
     *Createsasliceof`array`withelementstakenfromtheend.Elementsare
     *takenuntil`predicate`returnsfalsey.Thepredicateisinvokedwith
     *threearguments:(value,index,array).
     *
     *@static
     *@memberOf_
     *@since3.0.0
     *@categoryArray
     *@param{Array}arrayThearraytoquery.
     *@param{Function}[predicate=_.identity]Thefunctioninvokedperiteration.
     *@returns{Array}Returnsthesliceof`array`.
     *@example
     *
     *varusers=[
     *  {'user':'barney', 'active':true},
     *  {'user':'fred',   'active':false},
     *  {'user':'pebbles','active':false}
     *];
     *
     *_.takeRightWhile(users,function(o){return!o.active;});
     *//=>objectsfor['fred','pebbles']
     *
     *//The`_.matches`iterateeshorthand.
     *_.takeRightWhile(users,{'user':'pebbles','active':false});
     *//=>objectsfor['pebbles']
     *
     *//The`_.matchesProperty`iterateeshorthand.
     *_.takeRightWhile(users,['active',false]);
     *//=>objectsfor['fred','pebbles']
     *
     *//The`_.property`iterateeshorthand.
     *_.takeRightWhile(users,'active');
     *//=>[]
     */
    functiontakeRightWhile(array,predicate){
      return(array&&array.length)
        ?baseWhile(array,getIteratee(predicate,3),false,true)
        :[];
    }

    /**
     *Createsasliceof`array`withelementstakenfromthebeginning.Elements
     *aretakenuntil`predicate`returnsfalsey.Thepredicateisinvokedwith
     *threearguments:(value,index,array).
     *
     *@static
     *@memberOf_
     *@since3.0.0
     *@categoryArray
     *@param{Array}arrayThearraytoquery.
     *@param{Function}[predicate=_.identity]Thefunctioninvokedperiteration.
     *@returns{Array}Returnsthesliceof`array`.
     *@example
     *
     *varusers=[
     *  {'user':'barney', 'active':false},
     *  {'user':'fred',   'active':false},
     *  {'user':'pebbles','active':true}
     *];
     *
     *_.takeWhile(users,function(o){return!o.active;});
     *//=>objectsfor['barney','fred']
     *
     *//The`_.matches`iterateeshorthand.
     *_.takeWhile(users,{'user':'barney','active':false});
     *//=>objectsfor['barney']
     *
     *//The`_.matchesProperty`iterateeshorthand.
     *_.takeWhile(users,['active',false]);
     *//=>objectsfor['barney','fred']
     *
     *//The`_.property`iterateeshorthand.
     *_.takeWhile(users,'active');
     *//=>[]
     */
    functiontakeWhile(array,predicate){
      return(array&&array.length)
        ?baseWhile(array,getIteratee(predicate,3))
        :[];
    }

    /**
     *Createsanarrayofuniquevalues,inorder,fromallgivenarraysusing
     *[`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     *forequalitycomparisons.
     *
     *@static
     *@memberOf_
     *@since0.1.0
     *@categoryArray
     *@param{...Array}[arrays]Thearraystoinspect.
     *@returns{Array}Returnsthenewarrayofcombinedvalues.
     *@example
     *
     *_.union([2],[1,2]);
     *//=>[2,1]
     */
    varunion=baseRest(function(arrays){
      returnbaseUniq(baseFlatten(arrays,1,isArrayLikeObject,true));
    });

    /**
     *Thismethodislike`_.union`exceptthatitaccepts`iteratee`whichis
     *invokedforeachelementofeach`arrays`togeneratethecriterionby
     *whichuniquenessiscomputed.Resultvaluesarechosenfromthefirst
     *arrayinwhichthevalueoccurs.Theiterateeisinvokedwithoneargument:
     *(value).
     *
     *@static
     *@memberOf_
     *@since4.0.0
     *@categoryArray
     *@param{...Array}[arrays]Thearraystoinspect.
     *@param{Function}[iteratee=_.identity]Theiterateeinvokedperelement.
     *@returns{Array}Returnsthenewarrayofcombinedvalues.
     *@example
     *
     *_.unionBy([2.1],[1.2,2.3],Math.floor);
     *//=>[2.1,1.2]
     *
     *//The`_.property`iterateeshorthand.
     *_.unionBy([{'x':1}],[{'x':2},{'x':1}],'x');
     *//=>[{'x':1},{'x':2}]
     */
    varunionBy=baseRest(function(arrays){
      variteratee=last(arrays);
      if(isArrayLikeObject(iteratee)){
        iteratee=undefined;
      }
      returnbaseUniq(baseFlatten(arrays,1,isArrayLikeObject,true),getIteratee(iteratee,2));
    });

    /**
     *Thismethodislike`_.union`exceptthatitaccepts`comparator`which
     *isinvokedtocompareelementsof`arrays`.Resultvaluesarechosenfrom
     *thefirstarrayinwhichthevalueoccurs.Thecomparatorisinvoked
     *withtwoarguments:(arrVal,othVal).
     *
     *@static
     *@memberOf_
     *@since4.0.0
     *@categoryArray
     *@param{...Array}[arrays]Thearraystoinspect.
     *@param{Function}[comparator]Thecomparatorinvokedperelement.
     *@returns{Array}Returnsthenewarrayofcombinedvalues.
     *@example
     *
     *varobjects=[{'x':1,'y':2},{'x':2,'y':1}];
     *varothers=[{'x':1,'y':1},{'x':1,'y':2}];
     *
     *_.unionWith(objects,others,_.isEqual);
     *//=>[{'x':1,'y':2},{'x':2,'y':1},{'x':1,'y':1}]
     */
    varunionWith=baseRest(function(arrays){
      varcomparator=last(arrays);
      comparator=typeofcomparator=='function'?comparator:undefined;
      returnbaseUniq(baseFlatten(arrays,1,isArrayLikeObject,true),undefined,comparator);
    });

    /**
     *Createsaduplicate-freeversionofanarray,using
     *[`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     *forequalitycomparisons,inwhichonlythefirstoccurrenceofeachelement
     *iskept.Theorderofresultvaluesisdeterminedbytheordertheyoccur
     *inthearray.
     *
     *@static
     *@memberOf_
     *@since0.1.0
     *@categoryArray
     *@param{Array}arrayThearraytoinspect.
     *@returns{Array}Returnsthenewduplicatefreearray.
     *@example
     *
     *_.uniq([2,1,2]);
     *//=>[2,1]
     */
    functionuniq(array){
      return(array&&array.length)?baseUniq(array):[];
    }

    /**
     *Thismethodislike`_.uniq`exceptthatitaccepts`iteratee`whichis
     *invokedforeachelementin`array`togeneratethecriterionbywhich
     *uniquenessiscomputed.Theorderofresultvaluesisdeterminedbythe
     *ordertheyoccurinthearray.Theiterateeisinvokedwithoneargument:
     *(value).
     *
     *@static
     *@memberOf_
     *@since4.0.0
     *@categoryArray
     *@param{Array}arrayThearraytoinspect.
     *@param{Function}[iteratee=_.identity]Theiterateeinvokedperelement.
     *@returns{Array}Returnsthenewduplicatefreearray.
     *@example
     *
     *_.uniqBy([2.1,1.2,2.3],Math.floor);
     *//=>[2.1,1.2]
     *
     *//The`_.property`iterateeshorthand.
     *_.uniqBy([{'x':1},{'x':2},{'x':1}],'x');
     *//=>[{'x':1},{'x':2}]
     */
    functionuniqBy(array,iteratee){
      return(array&&array.length)?baseUniq(array,getIteratee(iteratee,2)):[];
    }

    /**
     *Thismethodislike`_.uniq`exceptthatitaccepts`comparator`which
     *isinvokedtocompareelementsof`array`.Theorderofresultvaluesis
     *determinedbytheordertheyoccurinthearray.Thecomparatorisinvoked
     *withtwoarguments:(arrVal,othVal).
     *
     *@static
     *@memberOf_
     *@since4.0.0
     *@categoryArray
     *@param{Array}arrayThearraytoinspect.
     *@param{Function}[comparator]Thecomparatorinvokedperelement.
     *@returns{Array}Returnsthenewduplicatefreearray.
     *@example
     *
     *varobjects=[{'x':1,'y':2},{'x':2,'y':1},{'x':1,'y':2}];
     *
     *_.uniqWith(objects,_.isEqual);
     *//=>[{'x':1,'y':2},{'x':2,'y':1}]
     */
    functionuniqWith(array,comparator){
      comparator=typeofcomparator=='function'?comparator:undefined;
      return(array&&array.length)?baseUniq(array,undefined,comparator):[];
    }

    /**
     *Thismethodislike`_.zip`exceptthatitacceptsanarrayofgrouped
     *elementsandcreatesanarrayregroupingtheelementstotheirpre-zip
     *configuration.
     *
     *@static
     *@memberOf_
     *@since1.2.0
     *@categoryArray
     *@param{Array}arrayThearrayofgroupedelementstoprocess.
     *@returns{Array}Returnsthenewarrayofregroupedelements.
     *@example
     *
     *varzipped=_.zip(['a','b'],[1,2],[true,false]);
     *//=>[['a',1,true],['b',2,false]]
     *
     *_.unzip(zipped);
     *//=>[['a','b'],[1,2],[true,false]]
     */
    functionunzip(array){
      if(!(array&&array.length)){
        return[];
      }
      varlength=0;
      array=arrayFilter(array,function(group){
        if(isArrayLikeObject(group)){
          length=nativeMax(group.length,length);
          returntrue;
        }
      });
      returnbaseTimes(length,function(index){
        returnarrayMap(array,baseProperty(index));
      });
    }

    /**
     *Thismethodislike`_.unzip`exceptthatitaccepts`iteratee`tospecify
     *howregroupedvaluesshouldbecombined.Theiterateeisinvokedwiththe
     *elementsofeachgroup:(...group).
     *
     *@static
     *@memberOf_
     *@since3.8.0
     *@categoryArray
     *@param{Array}arrayThearrayofgroupedelementstoprocess.
     *@param{Function}[iteratee=_.identity]Thefunctiontocombine
     * regroupedvalues.
     *@returns{Array}Returnsthenewarrayofregroupedelements.
     *@example
     *
     *varzipped=_.zip([1,2],[10,20],[100,200]);
     *//=>[[1,10,100],[2,20,200]]
     *
     *_.unzipWith(zipped,_.add);
     *//=>[3,30,300]
     */
    functionunzipWith(array,iteratee){
      if(!(array&&array.length)){
        return[];
      }
      varresult=unzip(array);
      if(iteratee==null){
        returnresult;
      }
      returnarrayMap(result,function(group){
        returnapply(iteratee,undefined,group);
      });
    }

    /**
     *Createsanarrayexcludingallgivenvaluesusing
     *[`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     *forequalitycomparisons.
     *
     ***Note:**Unlike`_.pull`,thismethodreturnsanewarray.
     *
     *@static
     *@memberOf_
     *@since0.1.0
     *@categoryArray
     *@param{Array}arrayThearraytoinspect.
     *@param{...*}[values]Thevaluestoexclude.
     *@returns{Array}Returnsthenewarrayoffilteredvalues.
     *@see_.difference,_.xor
     *@example
     *
     *_.without([2,1,2,3],1,2);
     *//=>[3]
     */
    varwithout=baseRest(function(array,values){
      returnisArrayLikeObject(array)
        ?baseDifference(array,values)
        :[];
    });

    /**
     *Createsanarrayofuniquevaluesthatisthe
     *[symmetricdifference](https://en.wikipedia.org/wiki/Symmetric_difference)
     *ofthegivenarrays.Theorderofresultvaluesisdeterminedbytheorder
     *theyoccurinthearrays.
     *
     *@static
     *@memberOf_
     *@since2.4.0
     *@categoryArray
     *@param{...Array}[arrays]Thearraystoinspect.
     *@returns{Array}Returnsthenewarrayoffilteredvalues.
     *@see_.difference,_.without
     *@example
     *
     *_.xor([2,1],[2,3]);
     *//=>[1,3]
     */
    varxor=baseRest(function(arrays){
      returnbaseXor(arrayFilter(arrays,isArrayLikeObject));
    });

    /**
     *Thismethodislike`_.xor`exceptthatitaccepts`iteratee`whichis
     *invokedforeachelementofeach`arrays`togeneratethecriterionby
     *whichbywhichthey'recompared.Theorderofresultvaluesisdetermined
     *bytheordertheyoccurinthearrays.Theiterateeisinvokedwithone
     *argument:(value).
     *
     *@static
     *@memberOf_
     *@since4.0.0
     *@categoryArray
     *@param{...Array}[arrays]Thearraystoinspect.
     *@param{Function}[iteratee=_.identity]Theiterateeinvokedperelement.
     *@returns{Array}Returnsthenewarrayoffilteredvalues.
     *@example
     *
     *_.xorBy([2.1,1.2],[2.3,3.4],Math.floor);
     *//=>[1.2,3.4]
     *
     *//The`_.property`iterateeshorthand.
     *_.xorBy([{'x':1}],[{'x':2},{'x':1}],'x');
     *//=>[{'x':2}]
     */
    varxorBy=baseRest(function(arrays){
      variteratee=last(arrays);
      if(isArrayLikeObject(iteratee)){
        iteratee=undefined;
      }
      returnbaseXor(arrayFilter(arrays,isArrayLikeObject),getIteratee(iteratee,2));
    });

    /**
     *Thismethodislike`_.xor`exceptthatitaccepts`comparator`whichis
     *invokedtocompareelementsof`arrays`.Theorderofresultvaluesis
     *determinedbytheordertheyoccurinthearrays.Thecomparatorisinvoked
     *withtwoarguments:(arrVal,othVal).
     *
     *@static
     *@memberOf_
     *@since4.0.0
     *@categoryArray
     *@param{...Array}[arrays]Thearraystoinspect.
     *@param{Function}[comparator]Thecomparatorinvokedperelement.
     *@returns{Array}Returnsthenewarrayoffilteredvalues.
     *@example
     *
     *varobjects=[{'x':1,'y':2},{'x':2,'y':1}];
     *varothers=[{'x':1,'y':1},{'x':1,'y':2}];
     *
     *_.xorWith(objects,others,_.isEqual);
     *//=>[{'x':2,'y':1},{'x':1,'y':1}]
     */
    varxorWith=baseRest(function(arrays){
      varcomparator=last(arrays);
      comparator=typeofcomparator=='function'?comparator:undefined;
      returnbaseXor(arrayFilter(arrays,isArrayLikeObject),undefined,comparator);
    });

    /**
     *Createsanarrayofgroupedelements,thefirstofwhichcontainsthe
     *firstelementsofthegivenarrays,thesecondofwhichcontainsthe
     *secondelementsofthegivenarrays,andsoon.
     *
     *@static
     *@memberOf_
     *@since0.1.0
     *@categoryArray
     *@param{...Array}[arrays]Thearraystoprocess.
     *@returns{Array}Returnsthenewarrayofgroupedelements.
     *@example
     *
     *_.zip(['a','b'],[1,2],[true,false]);
     *//=>[['a',1,true],['b',2,false]]
     */
    varzip=baseRest(unzip);

    /**
     *Thismethodislike`_.fromPairs`exceptthatitacceptstwoarrays,
     *oneofpropertyidentifiersandoneofcorrespondingvalues.
     *
     *@static
     *@memberOf_
     *@since0.4.0
     *@categoryArray
     *@param{Array}[props=[]]Thepropertyidentifiers.
     *@param{Array}[values=[]]Thepropertyvalues.
     *@returns{Object}Returnsthenewobject.
     *@example
     *
     *_.zipObject(['a','b'],[1,2]);
     *//=>{'a':1,'b':2}
     */
    functionzipObject(props,values){
      returnbaseZipObject(props||[],values||[],assignValue);
    }

    /**
     *Thismethodislike`_.zipObject`exceptthatitsupportspropertypaths.
     *
     *@static
     *@memberOf_
     *@since4.1.0
     *@categoryArray
     *@param{Array}[props=[]]Thepropertyidentifiers.
     *@param{Array}[values=[]]Thepropertyvalues.
     *@returns{Object}Returnsthenewobject.
     *@example
     *
     *_.zipObjectDeep(['a.b[0].c','a.b[1].d'],[1,2]);
     *//=>{'a':{'b':[{'c':1},{'d':2}]}}
     */
    functionzipObjectDeep(props,values){
      returnbaseZipObject(props||[],values||[],baseSet);
    }

    /**
     *Thismethodislike`_.zip`exceptthatitaccepts`iteratee`tospecify
     *howgroupedvaluesshouldbecombined.Theiterateeisinvokedwiththe
     *elementsofeachgroup:(...group).
     *
     *@static
     *@memberOf_
     *@since3.8.0
     *@categoryArray
     *@param{...Array}[arrays]Thearraystoprocess.
     *@param{Function}[iteratee=_.identity]Thefunctiontocombine
     * groupedvalues.
     *@returns{Array}Returnsthenewarrayofgroupedelements.
     *@example
     *
     *_.zipWith([1,2],[10,20],[100,200],function(a,b,c){
     *  returna+b+c;
     *});
     *//=>[111,222]
     */
    varzipWith=baseRest(function(arrays){
      varlength=arrays.length,
          iteratee=length>1?arrays[length-1]:undefined;

      iteratee=typeofiteratee=='function'?(arrays.pop(),iteratee):undefined;
      returnunzipWith(arrays,iteratee);
    });

    /*------------------------------------------------------------------------*/

    /**
     *Createsa`lodash`wrapperinstancethatwraps`value`withexplicitmethod
     *chainsequencesenabled.Theresultofsuchsequencesmustbeunwrapped
     *with`_#value`.
     *
     *@static
     *@memberOf_
     *@since1.3.0
     *@categorySeq
     *@param{*}valueThevaluetowrap.
     *@returns{Object}Returnsthenew`lodash`wrapperinstance.
     *@example
     *
     *varusers=[
     *  {'user':'barney', 'age':36},
     *  {'user':'fred',   'age':40},
     *  {'user':'pebbles','age':1}
     *];
     *
     *varyoungest=_
     *  .chain(users)
     *  .sortBy('age')
     *  .map(function(o){
     *    returno.user+'is'+o.age;
     *  })
     *  .head()
     *  .value();
     *//=>'pebblesis1'
     */
    functionchain(value){
      varresult=lodash(value);
      result.__chain__=true;
      returnresult;
    }

    /**
     *Thismethodinvokes`interceptor`andreturns`value`.Theinterceptor
     *isinvokedwithoneargument;(value).Thepurposeofthismethodisto
     *"tapinto"amethodchainsequenceinordertomodifyintermediateresults.
     *
     *@static
     *@memberOf_
     *@since0.1.0
     *@categorySeq
     *@param{*}valueThevaluetoprovideto`interceptor`.
     *@param{Function}interceptorThefunctiontoinvoke.
     *@returns{*}Returns`value`.
     *@example
     *
     *_([1,2,3])
     * .tap(function(array){
     *   //Mutateinputarray.
     *   array.pop();
     * })
     * .reverse()
     * .value();
     *//=>[2,1]
     */
    functiontap(value,interceptor){
      interceptor(value);
      returnvalue;
    }

    /**
     *Thismethodislike`_.tap`exceptthatitreturnstheresultof`interceptor`.
     *Thepurposeofthismethodisto"passthru"valuesreplacingintermediate
     *resultsinamethodchainsequence.
     *
     *@static
     *@memberOf_
     *@since3.0.0
     *@categorySeq
     *@param{*}valueThevaluetoprovideto`interceptor`.
     *@param{Function}interceptorThefunctiontoinvoke.
     *@returns{*}Returnstheresultof`interceptor`.
     *@example
     *
     *_(' abc ')
     * .chain()
     * .trim()
     * .thru(function(value){
     *   return[value];
     * })
     * .value();
     *//=>['abc']
     */
    functionthru(value,interceptor){
      returninterceptor(value);
    }

    /**
     *Thismethodisthewrapperversionof`_.at`.
     *
     *@nameat
     *@memberOf_
     *@since1.0.0
     *@categorySeq
     *@param{...(string|string[])}[paths]Thepropertypathstopick.
     *@returns{Object}Returnsthenew`lodash`wrapperinstance.
     *@example
     *
     *varobject={'a':[{'b':{'c':3}},4]};
     *
     *_(object).at(['a[0].b.c','a[1]']).value();
     *//=>[3,4]
     */
    varwrapperAt=flatRest(function(paths){
      varlength=paths.length,
          start=length?paths[0]:0,
          value=this.__wrapped__,
          interceptor=function(object){returnbaseAt(object,paths);};

      if(length>1||this.__actions__.length||
          !(valueinstanceofLazyWrapper)||!isIndex(start)){
        returnthis.thru(interceptor);
      }
      value=value.slice(start,+start+(length?1:0));
      value.__actions__.push({
        'func':thru,
        'args':[interceptor],
        'thisArg':undefined
      });
      returnnewLodashWrapper(value,this.__chain__).thru(function(array){
        if(length&&!array.length){
          array.push(undefined);
        }
        returnarray;
      });
    });

    /**
     *Createsa`lodash`wrapperinstancewithexplicitmethodchainsequencesenabled.
     *
     *@namechain
     *@memberOf_
     *@since0.1.0
     *@categorySeq
     *@returns{Object}Returnsthenew`lodash`wrapperinstance.
     *@example
     *
     *varusers=[
     *  {'user':'barney','age':36},
     *  {'user':'fred',  'age':40}
     *];
     *
     *//Asequencewithoutexplicitchaining.
     *_(users).head();
     *//=>{'user':'barney','age':36}
     *
     *//Asequencewithexplicitchaining.
     *_(users)
     *  .chain()
     *  .head()
     *  .pick('user')
     *  .value();
     *//=>{'user':'barney'}
     */
    functionwrapperChain(){
      returnchain(this);
    }

    /**
     *Executesthechainsequenceandreturnsthewrappedresult.
     *
     *@namecommit
     *@memberOf_
     *@since3.2.0
     *@categorySeq
     *@returns{Object}Returnsthenew`lodash`wrapperinstance.
     *@example
     *
     *vararray=[1,2];
     *varwrapped=_(array).push(3);
     *
     *console.log(array);
     *//=>[1,2]
     *
     *wrapped=wrapped.commit();
     *console.log(array);
     *//=>[1,2,3]
     *
     *wrapped.last();
     *//=>3
     *
     *console.log(array);
     *//=>[1,2,3]
     */
    functionwrapperCommit(){
      returnnewLodashWrapper(this.value(),this.__chain__);
    }

    /**
     *Getsthenextvalueonawrappedobjectfollowingthe
     *[iteratorprotocol](https://mdn.io/iteration_protocols#iterator).
     *
     *@namenext
     *@memberOf_
     *@since4.0.0
     *@categorySeq
     *@returns{Object}Returnsthenextiteratorvalue.
     *@example
     *
     *varwrapped=_([1,2]);
     *
     *wrapped.next();
     *//=>{'done':false,'value':1}
     *
     *wrapped.next();
     *//=>{'done':false,'value':2}
     *
     *wrapped.next();
     *//=>{'done':true,'value':undefined}
     */
    functionwrapperNext(){
      if(this.__values__===undefined){
        this.__values__=toArray(this.value());
      }
      vardone=this.__index__>=this.__values__.length,
          value=done?undefined:this.__values__[this.__index__++];

      return{'done':done,'value':value};
    }

    /**
     *Enablesthewrappertobeiterable.
     *
     *@nameSymbol.iterator
     *@memberOf_
     *@since4.0.0
     *@categorySeq
     *@returns{Object}Returnsthewrapperobject.
     *@example
     *
     *varwrapped=_([1,2]);
     *
     *wrapped[Symbol.iterator]()===wrapped;
     *//=>true
     *
     *Array.from(wrapped);
     *//=>[1,2]
     */
    functionwrapperToIterator(){
      returnthis;
    }

    /**
     *Createsacloneofthechainsequenceplanting`value`asthewrappedvalue.
     *
     *@nameplant
     *@memberOf_
     *@since3.2.0
     *@categorySeq
     *@param{*}valueThevaluetoplant.
     *@returns{Object}Returnsthenew`lodash`wrapperinstance.
     *@example
     *
     *functionsquare(n){
     *  returnn*n;
     *}
     *
     *varwrapped=_([1,2]).map(square);
     *varother=wrapped.plant([3,4]);
     *
     *other.value();
     *//=>[9,16]
     *
     *wrapped.value();
     *//=>[1,4]
     */
    functionwrapperPlant(value){
      varresult,
          parent=this;

      while(parentinstanceofbaseLodash){
        varclone=wrapperClone(parent);
        clone.__index__=0;
        clone.__values__=undefined;
        if(result){
          previous.__wrapped__=clone;
        }else{
          result=clone;
        }
        varprevious=clone;
        parent=parent.__wrapped__;
      }
      previous.__wrapped__=value;
      returnresult;
    }

    /**
     *Thismethodisthewrapperversionof`_.reverse`.
     *
     ***Note:**Thismethodmutatesthewrappedarray.
     *
     *@namereverse
     *@memberOf_
     *@since0.1.0
     *@categorySeq
     *@returns{Object}Returnsthenew`lodash`wrapperinstance.
     *@example
     *
     *vararray=[1,2,3];
     *
     *_(array).reverse().value()
     *//=>[3,2,1]
     *
     *console.log(array);
     *//=>[3,2,1]
     */
    functionwrapperReverse(){
      varvalue=this.__wrapped__;
      if(valueinstanceofLazyWrapper){
        varwrapped=value;
        if(this.__actions__.length){
          wrapped=newLazyWrapper(this);
        }
        wrapped=wrapped.reverse();
        wrapped.__actions__.push({
          'func':thru,
          'args':[reverse],
          'thisArg':undefined
        });
        returnnewLodashWrapper(wrapped,this.__chain__);
      }
      returnthis.thru(reverse);
    }

    /**
     *Executesthechainsequencetoresolvetheunwrappedvalue.
     *
     *@namevalue
     *@memberOf_
     *@since0.1.0
     *@aliastoJSON,valueOf
     *@categorySeq
     *@returns{*}Returnstheresolvedunwrappedvalue.
     *@example
     *
     *_([1,2,3]).value();
     *//=>[1,2,3]
     */
    functionwrapperValue(){
      returnbaseWrapperValue(this.__wrapped__,this.__actions__);
    }

    /*------------------------------------------------------------------------*/

    /**
     *Createsanobjectcomposedofkeysgeneratedfromtheresultsofrunning
     *eachelementof`collection`thru`iteratee`.Thecorrespondingvalueof
     *eachkeyisthenumberoftimesthekeywasreturnedby`iteratee`.The
     *iterateeisinvokedwithoneargument:(value).
     *
     *@static
     *@memberOf_
     *@since0.5.0
     *@categoryCollection
     *@param{Array|Object}collectionThecollectiontoiterateover.
     *@param{Function}[iteratee=_.identity]Theiterateetotransformkeys.
     *@returns{Object}Returnsthecomposedaggregateobject.
     *@example
     *
     *_.countBy([6.1,4.2,6.3],Math.floor);
     *//=>{'4':1,'6':2}
     *
     *//The`_.property`iterateeshorthand.
     *_.countBy(['one','two','three'],'length');
     *//=>{'3':2,'5':1}
     */
    varcountBy=createAggregator(function(result,value,key){
      if(hasOwnProperty.call(result,key)){
        ++result[key];
      }else{
        baseAssignValue(result,key,1);
      }
    });

    /**
     *Checksif`predicate`returnstruthyfor**all**elementsof`collection`.
     *Iterationisstoppedonce`predicate`returnsfalsey.Thepredicateis
     *invokedwiththreearguments:(value,index|key,collection).
     *
     ***Note:**Thismethodreturns`true`for
     *[emptycollections](https://en.wikipedia.org/wiki/Empty_set)because
     *[everythingistrue](https://en.wikipedia.org/wiki/Vacuous_truth)of
     *elementsofemptycollections.
     *
     *@static
     *@memberOf_
     *@since0.1.0
     *@categoryCollection
     *@param{Array|Object}collectionThecollectiontoiterateover.
     *@param{Function}[predicate=_.identity]Thefunctioninvokedperiteration.
     *@param-{Object}[guard]Enablesuseasaniterateeformethodslike`_.map`.
     *@returns{boolean}Returns`true`ifallelementspassthepredicatecheck,
     * else`false`.
     *@example
     *
     *_.every([true,1,null,'yes'],Boolean);
     *//=>false
     *
     *varusers=[
     *  {'user':'barney','age':36,'active':false},
     *  {'user':'fred',  'age':40,'active':false}
     *];
     *
     *//The`_.matches`iterateeshorthand.
     *_.every(users,{'user':'barney','active':false});
     *//=>false
     *
     *//The`_.matchesProperty`iterateeshorthand.
     *_.every(users,['active',false]);
     *//=>true
     *
     *//The`_.property`iterateeshorthand.
     *_.every(users,'active');
     *//=>false
     */
    functionevery(collection,predicate,guard){
      varfunc=isArray(collection)?arrayEvery:baseEvery;
      if(guard&&isIterateeCall(collection,predicate,guard)){
        predicate=undefined;
      }
      returnfunc(collection,getIteratee(predicate,3));
    }

    /**
     *Iteratesoverelementsof`collection`,returninganarrayofallelements
     *`predicate`returnstruthyfor.Thepredicateisinvokedwiththree
     *arguments:(value,index|key,collection).
     *
     ***Note:**Unlike`_.remove`,thismethodreturnsanewarray.
     *
     *@static
     *@memberOf_
     *@since0.1.0
     *@categoryCollection
     *@param{Array|Object}collectionThecollectiontoiterateover.
     *@param{Function}[predicate=_.identity]Thefunctioninvokedperiteration.
     *@returns{Array}Returnsthenewfilteredarray.
     *@see_.reject
     *@example
     *
     *varusers=[
     *  {'user':'barney','age':36,'active':true},
     *  {'user':'fred',  'age':40,'active':false}
     *];
     *
     *_.filter(users,function(o){return!o.active;});
     *//=>objectsfor['fred']
     *
     *//The`_.matches`iterateeshorthand.
     *_.filter(users,{'age':36,'active':true});
     *//=>objectsfor['barney']
     *
     *//The`_.matchesProperty`iterateeshorthand.
     *_.filter(users,['active',false]);
     *//=>objectsfor['fred']
     *
     *//The`_.property`iterateeshorthand.
     *_.filter(users,'active');
     *//=>objectsfor['barney']
     */
    functionfilter(collection,predicate){
      varfunc=isArray(collection)?arrayFilter:baseFilter;
      returnfunc(collection,getIteratee(predicate,3));
    }

    /**
     *Iteratesoverelementsof`collection`,returningthefirstelement
     *`predicate`returnstruthyfor.Thepredicateisinvokedwiththree
     *arguments:(value,index|key,collection).
     *
     *@static
     *@memberOf_
     *@since0.1.0
     *@categoryCollection
     *@param{Array|Object}collectionThecollectiontoinspect.
     *@param{Function}[predicate=_.identity]Thefunctioninvokedperiteration.
     *@param{number}[fromIndex=0]Theindextosearchfrom.
     *@returns{*}Returnsthematchedelement,else`undefined`.
     *@example
     *
     *varusers=[
     *  {'user':'barney', 'age':36,'active':true},
     *  {'user':'fred',   'age':40,'active':false},
     *  {'user':'pebbles','age':1, 'active':true}
     *];
     *
     *_.find(users,function(o){returno.age<40;});
     *//=>objectfor'barney'
     *
     *//The`_.matches`iterateeshorthand.
     *_.find(users,{'age':1,'active':true});
     *//=>objectfor'pebbles'
     *
     *//The`_.matchesProperty`iterateeshorthand.
     *_.find(users,['active',false]);
     *//=>objectfor'fred'
     *
     *//The`_.property`iterateeshorthand.
     *_.find(users,'active');
     *//=>objectfor'barney'
     */
    varfind=createFind(findIndex);

    /**
     *Thismethodislike`_.find`exceptthatititeratesoverelementsof
     *`collection`fromrighttoleft.
     *
     *@static
     *@memberOf_
     *@since2.0.0
     *@categoryCollection
     *@param{Array|Object}collectionThecollectiontoinspect.
     *@param{Function}[predicate=_.identity]Thefunctioninvokedperiteration.
     *@param{number}[fromIndex=collection.length-1]Theindextosearchfrom.
     *@returns{*}Returnsthematchedelement,else`undefined`.
     *@example
     *
     *_.findLast([1,2,3,4],function(n){
     *  returnn%2==1;
     *});
     *//=>3
     */
    varfindLast=createFind(findLastIndex);

    /**
     *Createsaflattenedarrayofvaluesbyrunningeachelementin`collection`
     *thru`iteratee`andflatteningthemappedresults.Theiterateeisinvoked
     *withthreearguments:(value,index|key,collection).
     *
     *@static
     *@memberOf_
     *@since4.0.0
     *@categoryCollection
     *@param{Array|Object}collectionThecollectiontoiterateover.
     *@param{Function}[iteratee=_.identity]Thefunctioninvokedperiteration.
     *@returns{Array}Returnsthenewflattenedarray.
     *@example
     *
     *functionduplicate(n){
     *  return[n,n];
     *}
     *
     *_.flatMap([1,2],duplicate);
     *//=>[1,1,2,2]
     */
    functionflatMap(collection,iteratee){
      returnbaseFlatten(map(collection,iteratee),1);
    }

    /**
     *Thismethodislike`_.flatMap`exceptthatitrecursivelyflattensthe
     *mappedresults.
     *
     *@static
     *@memberOf_
     *@since4.7.0
     *@categoryCollection
     *@param{Array|Object}collectionThecollectiontoiterateover.
     *@param{Function}[iteratee=_.identity]Thefunctioninvokedperiteration.
     *@returns{Array}Returnsthenewflattenedarray.
     *@example
     *
     *functionduplicate(n){
     *  return[[[n,n]]];
     *}
     *
     *_.flatMapDeep([1,2],duplicate);
     *//=>[1,1,2,2]
     */
    functionflatMapDeep(collection,iteratee){
      returnbaseFlatten(map(collection,iteratee),INFINITY);
    }

    /**
     *Thismethodislike`_.flatMap`exceptthatitrecursivelyflattensthe
     *mappedresultsupto`depth`times.
     *
     *@static
     *@memberOf_
     *@since4.7.0
     *@categoryCollection
     *@param{Array|Object}collectionThecollectiontoiterateover.
     *@param{Function}[iteratee=_.identity]Thefunctioninvokedperiteration.
     *@param{number}[depth=1]Themaximumrecursiondepth.
     *@returns{Array}Returnsthenewflattenedarray.
     *@example
     *
     *functionduplicate(n){
     *  return[[[n,n]]];
     *}
     *
     *_.flatMapDepth([1,2],duplicate,2);
     *//=>[[1,1],[2,2]]
     */
    functionflatMapDepth(collection,iteratee,depth){
      depth=depth===undefined?1:toInteger(depth);
      returnbaseFlatten(map(collection,iteratee),depth);
    }

    /**
     *Iteratesoverelementsof`collection`andinvokes`iteratee`foreachelement.
     *Theiterateeisinvokedwiththreearguments:(value,index|key,collection).
     *Iterateefunctionsmayexititerationearlybyexplicitlyreturning`false`.
     *
     ***Note:**Aswithother"Collections"methods,objectswitha"length"
     *propertyareiteratedlikearrays.Toavoidthisbehavioruse`_.forIn`
     *or`_.forOwn`forobjectiteration.
     *
     *@static
     *@memberOf_
     *@since0.1.0
     *@aliaseach
     *@categoryCollection
     *@param{Array|Object}collectionThecollectiontoiterateover.
     *@param{Function}[iteratee=_.identity]Thefunctioninvokedperiteration.
     *@returns{Array|Object}Returns`collection`.
     *@see_.forEachRight
     *@example
     *
     *_.forEach([1,2],function(value){
     *  console.log(value);
     *});
     *//=>Logs`1`then`2`.
     *
     *_.forEach({'a':1,'b':2},function(value,key){
     *  console.log(key);
     *});
     *//=>Logs'a'then'b'(iterationorderisnotguaranteed).
     */
    functionforEach(collection,iteratee){
      varfunc=isArray(collection)?arrayEach:baseEach;
      returnfunc(collection,getIteratee(iteratee,3));
    }

    /**
     *Thismethodislike`_.forEach`exceptthatititeratesoverelementsof
     *`collection`fromrighttoleft.
     *
     *@static
     *@memberOf_
     *@since2.0.0
     *@aliaseachRight
     *@categoryCollection
     *@param{Array|Object}collectionThecollectiontoiterateover.
     *@param{Function}[iteratee=_.identity]Thefunctioninvokedperiteration.
     *@returns{Array|Object}Returns`collection`.
     *@see_.forEach
     *@example
     *
     *_.forEachRight([1,2],function(value){
     *  console.log(value);
     *});
     *//=>Logs`2`then`1`.
     */
    functionforEachRight(collection,iteratee){
      varfunc=isArray(collection)?arrayEachRight:baseEachRight;
      returnfunc(collection,getIteratee(iteratee,3));
    }

    /**
     *Createsanobjectcomposedofkeysgeneratedfromtheresultsofrunning
     *eachelementof`collection`thru`iteratee`.Theorderofgroupedvalues
     *isdeterminedbytheordertheyoccurin`collection`.Thecorresponding
     *valueofeachkeyisanarrayofelementsresponsibleforgeneratingthe
     *key.Theiterateeisinvokedwithoneargument:(value).
     *
     *@static
     *@memberOf_
     *@since0.1.0
     *@categoryCollection
     *@param{Array|Object}collectionThecollectiontoiterateover.
     *@param{Function}[iteratee=_.identity]Theiterateetotransformkeys.
     *@returns{Object}Returnsthecomposedaggregateobject.
     *@example
     *
     *_.groupBy([6.1,4.2,6.3],Math.floor);
     *//=>{'4':[4.2],'6':[6.1,6.3]}
     *
     *//The`_.property`iterateeshorthand.
     *_.groupBy(['one','two','three'],'length');
     *//=>{'3':['one','two'],'5':['three']}
     */
    vargroupBy=createAggregator(function(result,value,key){
      if(hasOwnProperty.call(result,key)){
        result[key].push(value);
      }else{
        baseAssignValue(result,key,[value]);
      }
    });

    /**
     *Checksif`value`isin`collection`.If`collection`isastring,it's
     *checkedforasubstringof`value`,otherwise
     *[`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     *isusedforequalitycomparisons.If`fromIndex`isnegative,it'susedas
     *theoffsetfromtheendof`collection`.
     *
     *@static
     *@memberOf_
     *@since0.1.0
     *@categoryCollection
     *@param{Array|Object|string}collectionThecollectiontoinspect.
     *@param{*}valueThevaluetosearchfor.
     *@param{number}[fromIndex=0]Theindextosearchfrom.
     *@param-{Object}[guard]Enablesuseasaniterateeformethodslike`_.reduce`.
     *@returns{boolean}Returns`true`if`value`isfound,else`false`.
     *@example
     *
     *_.includes([1,2,3],1);
     *//=>true
     *
     *_.includes([1,2,3],1,2);
     *//=>false
     *
     *_.includes({'a':1,'b':2},1);
     *//=>true
     *
     *_.includes('abcd','bc');
     *//=>true
     */
    functionincludes(collection,value,fromIndex,guard){
      collection=isArrayLike(collection)?collection:values(collection);
      fromIndex=(fromIndex&&!guard)?toInteger(fromIndex):0;

      varlength=collection.length;
      if(fromIndex<0){
        fromIndex=nativeMax(length+fromIndex,0);
      }
      returnisString(collection)
        ?(fromIndex<=length&&collection.indexOf(value,fromIndex)>-1)
        :(!!length&&baseIndexOf(collection,value,fromIndex)>-1);
    }

    /**
     *Invokesthemethodat`path`ofeachelementin`collection`,returning
     *anarrayoftheresultsofeachinvokedmethod.Anyadditionalarguments
     *areprovidedtoeachinvokedmethod.If`path`isafunction,it'sinvoked
     *for,and`this`boundto,eachelementin`collection`.
     *
     *@static
     *@memberOf_
     *@since4.0.0
     *@categoryCollection
     *@param{Array|Object}collectionThecollectiontoiterateover.
     *@param{Array|Function|string}pathThepathofthemethodtoinvokeor
     * thefunctioninvokedperiteration.
     *@param{...*}[args]Theargumentstoinvokeeachmethodwith.
     *@returns{Array}Returnsthearrayofresults.
     *@example
     *
     *_.invokeMap([[5,1,7],[3,2,1]],'sort');
     *//=>[[1,5,7],[1,2,3]]
     *
     *_.invokeMap([123,456],String.prototype.split,'');
     *//=>[['1','2','3'],['4','5','6']]
     */
    varinvokeMap=baseRest(function(collection,path,args){
      varindex=-1,
          isFunc=typeofpath=='function',
          result=isArrayLike(collection)?Array(collection.length):[];

      baseEach(collection,function(value){
        result[++index]=isFunc?apply(path,value,args):baseInvoke(value,path,args);
      });
      returnresult;
    });

    /**
     *Createsanobjectcomposedofkeysgeneratedfromtheresultsofrunning
     *eachelementof`collection`thru`iteratee`.Thecorrespondingvalueof
     *eachkeyisthelastelementresponsibleforgeneratingthekey.The
     *iterateeisinvokedwithoneargument:(value).
     *
     *@static
     *@memberOf_
     *@since4.0.0
     *@categoryCollection
     *@param{Array|Object}collectionThecollectiontoiterateover.
     *@param{Function}[iteratee=_.identity]Theiterateetotransformkeys.
     *@returns{Object}Returnsthecomposedaggregateobject.
     *@example
     *
     *vararray=[
     *  {'dir':'left','code':97},
     *  {'dir':'right','code':100}
     *];
     *
     *_.keyBy(array,function(o){
     *  returnString.fromCharCode(o.code);
     *});
     *//=>{'a':{'dir':'left','code':97},'d':{'dir':'right','code':100}}
     *
     *_.keyBy(array,'dir');
     *//=>{'left':{'dir':'left','code':97},'right':{'dir':'right','code':100}}
     */
    varkeyBy=createAggregator(function(result,value,key){
      baseAssignValue(result,key,value);
    });

    /**
     *Createsanarrayofvaluesbyrunningeachelementin`collection`thru
     *`iteratee`.Theiterateeisinvokedwiththreearguments:
     *(value,index|key,collection).
     *
     *Manylodashmethodsareguardedtoworkasiterateesformethodslike
     *`_.every`,`_.filter`,`_.map`,`_.mapValues`,`_.reject`,and`_.some`.
     *
     *Theguardedmethodsare:
     *`ary`,`chunk`,`curry`,`curryRight`,`drop`,`dropRight`,`every`,
     *`fill`,`invert`,`parseInt`,`random`,`range`,`rangeRight`,`repeat`,
     *`sampleSize`,`slice`,`some`,`sortBy`,`split`,`take`,`takeRight`,
     *`template`,`trim`,`trimEnd`,`trimStart`,and`words`
     *
     *@static
     *@memberOf_
     *@since0.1.0
     *@categoryCollection
     *@param{Array|Object}collectionThecollectiontoiterateover.
     *@param{Function}[iteratee=_.identity]Thefunctioninvokedperiteration.
     *@returns{Array}Returnsthenewmappedarray.
     *@example
     *
     *functionsquare(n){
     *  returnn*n;
     *}
     *
     *_.map([4,8],square);
     *//=>[16,64]
     *
     *_.map({'a':4,'b':8},square);
     *//=>[16,64](iterationorderisnotguaranteed)
     *
     *varusers=[
     *  {'user':'barney'},
     *  {'user':'fred'}
     *];
     *
     *//The`_.property`iterateeshorthand.
     *_.map(users,'user');
     *//=>['barney','fred']
     */
    functionmap(collection,iteratee){
      varfunc=isArray(collection)?arrayMap:baseMap;
      returnfunc(collection,getIteratee(iteratee,3));
    }

    /**
     *Thismethodislike`_.sortBy`exceptthatitallowsspecifyingthesort
     *ordersoftheiterateestosortby.If`orders`isunspecified,allvalues
     *aresortedinascendingorder.Otherwise,specifyanorderof"desc"for
     *descendingor"asc"forascendingsortorderofcorrespondingvalues.
     *
     *@static
     *@memberOf_
     *@since4.0.0
     *@categoryCollection
     *@param{Array|Object}collectionThecollectiontoiterateover.
     *@param{Array[]|Function[]|Object[]|string[]}[iteratees=[_.identity]]
     * Theiterateestosortby.
     *@param{string[]}[orders]Thesortordersof`iteratees`.
     *@param-{Object}[guard]Enablesuseasaniterateeformethodslike`_.reduce`.
     *@returns{Array}Returnsthenewsortedarray.
     *@example
     *
     *varusers=[
     *  {'user':'fred',  'age':48},
     *  {'user':'barney','age':34},
     *  {'user':'fred',  'age':40},
     *  {'user':'barney','age':36}
     *];
     *
     *//Sortby`user`inascendingorderandby`age`indescendingorder.
     *_.orderBy(users,['user','age'],['asc','desc']);
     *//=>objectsfor[['barney',36],['barney',34],['fred',48],['fred',40]]
     */
    functionorderBy(collection,iteratees,orders,guard){
      if(collection==null){
        return[];
      }
      if(!isArray(iteratees)){
        iteratees=iteratees==null?[]:[iteratees];
      }
      orders=guard?undefined:orders;
      if(!isArray(orders)){
        orders=orders==null?[]:[orders];
      }
      returnbaseOrderBy(collection,iteratees,orders);
    }

    /**
     *Createsanarrayofelementssplitintotwogroups,thefirstofwhich
     *containselements`predicate`returnstruthyfor,thesecondofwhich
     *containselements`predicate`returnsfalseyfor.Thepredicateis
     *invokedwithoneargument:(value).
     *
     *@static
     *@memberOf_
     *@since3.0.0
     *@categoryCollection
     *@param{Array|Object}collectionThecollectiontoiterateover.
     *@param{Function}[predicate=_.identity]Thefunctioninvokedperiteration.
     *@returns{Array}Returnsthearrayofgroupedelements.
     *@example
     *
     *varusers=[
     *  {'user':'barney', 'age':36,'active':false},
     *  {'user':'fred',   'age':40,'active':true},
     *  {'user':'pebbles','age':1, 'active':false}
     *];
     *
     *_.partition(users,function(o){returno.active;});
     *//=>objectsfor[['fred'],['barney','pebbles']]
     *
     *//The`_.matches`iterateeshorthand.
     *_.partition(users,{'age':1,'active':false});
     *//=>objectsfor[['pebbles'],['barney','fred']]
     *
     *//The`_.matchesProperty`iterateeshorthand.
     *_.partition(users,['active',false]);
     *//=>objectsfor[['barney','pebbles'],['fred']]
     *
     *//The`_.property`iterateeshorthand.
     *_.partition(users,'active');
     *//=>objectsfor[['fred'],['barney','pebbles']]
     */
    varpartition=createAggregator(function(result,value,key){
      result[key?0:1].push(value);
    },function(){return[[],[]];});

    /**
     *Reduces`collection`toavaluewhichistheaccumulatedresultofrunning
     *eachelementin`collection`thru`iteratee`,whereeachsuccessive
     *invocationissuppliedthereturnvalueoftheprevious.If`accumulator`
     *isnotgiven,thefirstelementof`collection`isusedastheinitial
     *value.Theiterateeisinvokedwithfourarguments:
     *(accumulator,value,index|key,collection).
     *
     *Manylodashmethodsareguardedtoworkasiterateesformethodslike
     *`_.reduce`,`_.reduceRight`,and`_.transform`.
     *
     *Theguardedmethodsare:
     *`assign`,`defaults`,`defaultsDeep`,`includes`,`merge`,`orderBy`,
     *and`sortBy`
     *
     *@static
     *@memberOf_
     *@since0.1.0
     *@categoryCollection
     *@param{Array|Object}collectionThecollectiontoiterateover.
     *@param{Function}[iteratee=_.identity]Thefunctioninvokedperiteration.
     *@param{*}[accumulator]Theinitialvalue.
     *@returns{*}Returnstheaccumulatedvalue.
     *@see_.reduceRight
     *@example
     *
     *_.reduce([1,2],function(sum,n){
     *  returnsum+n;
     *},0);
     *//=>3
     *
     *_.reduce({'a':1,'b':2,'c':1},function(result,value,key){
     *  (result[value]||(result[value]=[])).push(key);
     *  returnresult;
     *},{});
     *//=>{'1':['a','c'],'2':['b']}(iterationorderisnotguaranteed)
     */
    functionreduce(collection,iteratee,accumulator){
      varfunc=isArray(collection)?arrayReduce:baseReduce,
          initAccum=arguments.length<3;

      returnfunc(collection,getIteratee(iteratee,4),accumulator,initAccum,baseEach);
    }

    /**
     *Thismethodislike`_.reduce`exceptthatititeratesoverelementsof
     *`collection`fromrighttoleft.
     *
     *@static
     *@memberOf_
     *@since0.1.0
     *@categoryCollection
     *@param{Array|Object}collectionThecollectiontoiterateover.
     *@param{Function}[iteratee=_.identity]Thefunctioninvokedperiteration.
     *@param{*}[accumulator]Theinitialvalue.
     *@returns{*}Returnstheaccumulatedvalue.
     *@see_.reduce
     *@example
     *
     *vararray=[[0,1],[2,3],[4,5]];
     *
     *_.reduceRight(array,function(flattened,other){
     *  returnflattened.concat(other);
     *},[]);
     *//=>[4,5,2,3,0,1]
     */
    functionreduceRight(collection,iteratee,accumulator){
      varfunc=isArray(collection)?arrayReduceRight:baseReduce,
          initAccum=arguments.length<3;

      returnfunc(collection,getIteratee(iteratee,4),accumulator,initAccum,baseEachRight);
    }

    /**
     *Theoppositeof`_.filter`;thismethodreturnstheelementsof`collection`
     *that`predicate`does**not**returntruthyfor.
     *
     *@static
     *@memberOf_
     *@since0.1.0
     *@categoryCollection
     *@param{Array|Object}collectionThecollectiontoiterateover.
     *@param{Function}[predicate=_.identity]Thefunctioninvokedperiteration.
     *@returns{Array}Returnsthenewfilteredarray.
     *@see_.filter
     *@example
     *
     *varusers=[
     *  {'user':'barney','age':36,'active':false},
     *  {'user':'fred',  'age':40,'active':true}
     *];
     *
     *_.reject(users,function(o){return!o.active;});
     *//=>objectsfor['fred']
     *
     *//The`_.matches`iterateeshorthand.
     *_.reject(users,{'age':40,'active':true});
     *//=>objectsfor['barney']
     *
     *//The`_.matchesProperty`iterateeshorthand.
     *_.reject(users,['active',false]);
     *//=>objectsfor['fred']
     *
     *//The`_.property`iterateeshorthand.
     *_.reject(users,'active');
     *//=>objectsfor['barney']
     */
    functionreject(collection,predicate){
      varfunc=isArray(collection)?arrayFilter:baseFilter;
      returnfunc(collection,negate(getIteratee(predicate,3)));
    }

    /**
     *Getsarandomelementfrom`collection`.
     *
     *@static
     *@memberOf_
     *@since2.0.0
     *@categoryCollection
     *@param{Array|Object}collectionThecollectiontosample.
     *@returns{*}Returnstherandomelement.
     *@example
     *
     *_.sample([1,2,3,4]);
     *//=>2
     */
    functionsample(collection){
      varfunc=isArray(collection)?arraySample:baseSample;
      returnfunc(collection);
    }

    /**
     *Gets`n`randomelementsatuniquekeysfrom`collection`uptothe
     *sizeof`collection`.
     *
     *@static
     *@memberOf_
     *@since4.0.0
     *@categoryCollection
     *@param{Array|Object}collectionThecollectiontosample.
     *@param{number}[n=1]Thenumberofelementstosample.
     *@param-{Object}[guard]Enablesuseasaniterateeformethodslike`_.map`.
     *@returns{Array}Returnstherandomelements.
     *@example
     *
     *_.sampleSize([1,2,3],2);
     *//=>[3,1]
     *
     *_.sampleSize([1,2,3],4);
     *//=>[2,3,1]
     */
    functionsampleSize(collection,n,guard){
      if((guard?isIterateeCall(collection,n,guard):n===undefined)){
        n=1;
      }else{
        n=toInteger(n);
      }
      varfunc=isArray(collection)?arraySampleSize:baseSampleSize;
      returnfunc(collection,n);
    }

    /**
     *Createsanarrayofshuffledvalues,usingaversionofthe
     *[Fisher-Yatesshuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     *@static
     *@memberOf_
     *@since0.1.0
     *@categoryCollection
     *@param{Array|Object}collectionThecollectiontoshuffle.
     *@returns{Array}Returnsthenewshuffledarray.
     *@example
     *
     *_.shuffle([1,2,3,4]);
     *//=>[4,1,3,2]
     */
    functionshuffle(collection){
      varfunc=isArray(collection)?arrayShuffle:baseShuffle;
      returnfunc(collection);
    }

    /**
     *Getsthesizeof`collection`byreturningitslengthforarray-like
     *valuesorthenumberofownenumerablestringkeyedpropertiesforobjects.
     *
     *@static
     *@memberOf_
     *@since0.1.0
     *@categoryCollection
     *@param{Array|Object|string}collectionThecollectiontoinspect.
     *@returns{number}Returnsthecollectionsize.
     *@example
     *
     *_.size([1,2,3]);
     *//=>3
     *
     *_.size({'a':1,'b':2});
     *//=>2
     *
     *_.size('pebbles');
     *//=>7
     */
    functionsize(collection){
      if(collection==null){
        return0;
      }
      if(isArrayLike(collection)){
        returnisString(collection)?stringSize(collection):collection.length;
      }
      vartag=getTag(collection);
      if(tag==mapTag||tag==setTag){
        returncollection.size;
      }
      returnbaseKeys(collection).length;
    }

    /**
     *Checksif`predicate`returnstruthyfor**any**elementof`collection`.
     *Iterationisstoppedonce`predicate`returnstruthy.Thepredicateis
     *invokedwiththreearguments:(value,index|key,collection).
     *
     *@static
     *@memberOf_
     *@since0.1.0
     *@categoryCollection
     *@param{Array|Object}collectionThecollectiontoiterateover.
     *@param{Function}[predicate=_.identity]Thefunctioninvokedperiteration.
     *@param-{Object}[guard]Enablesuseasaniterateeformethodslike`_.map`.
     *@returns{boolean}Returns`true`ifanyelementpassesthepredicatecheck,
     * else`false`.
     *@example
     *
     *_.some([null,0,'yes',false],Boolean);
     *//=>true
     *
     *varusers=[
     *  {'user':'barney','active':true},
     *  {'user':'fred',  'active':false}
     *];
     *
     *//The`_.matches`iterateeshorthand.
     *_.some(users,{'user':'barney','active':false});
     *//=>false
     *
     *//The`_.matchesProperty`iterateeshorthand.
     *_.some(users,['active',false]);
     *//=>true
     *
     *//The`_.property`iterateeshorthand.
     *_.some(users,'active');
     *//=>true
     */
    functionsome(collection,predicate,guard){
      varfunc=isArray(collection)?arraySome:baseSome;
      if(guard&&isIterateeCall(collection,predicate,guard)){
        predicate=undefined;
      }
      returnfunc(collection,getIteratee(predicate,3));
    }

    /**
     *Createsanarrayofelements,sortedinascendingorderbytheresultsof
     *runningeachelementinacollectionthrueachiteratee.Thismethod
     *performsastablesort,thatis,itpreservestheoriginalsortorderof
     *equalelements.Theiterateesareinvokedwithoneargument:(value).
     *
     *@static
     *@memberOf_
     *@since0.1.0
     *@categoryCollection
     *@param{Array|Object}collectionThecollectiontoiterateover.
     *@param{...(Function|Function[])}[iteratees=[_.identity]]
     * Theiterateestosortby.
     *@returns{Array}Returnsthenewsortedarray.
     *@example
     *
     *varusers=[
     *  {'user':'fred',  'age':48},
     *  {'user':'barney','age':36},
     *  {'user':'fred',  'age':40},
     *  {'user':'barney','age':34}
     *];
     *
     *_.sortBy(users,[function(o){returno.user;}]);
     *//=>objectsfor[['barney',36],['barney',34],['fred',48],['fred',40]]
     *
     *_.sortBy(users,['user','age']);
     *//=>objectsfor[['barney',34],['barney',36],['fred',40],['fred',48]]
     */
    varsortBy=baseRest(function(collection,iteratees){
      if(collection==null){
        return[];
      }
      varlength=iteratees.length;
      if(length>1&&isIterateeCall(collection,iteratees[0],iteratees[1])){
        iteratees=[];
      }elseif(length>2&&isIterateeCall(iteratees[0],iteratees[1],iteratees[2])){
        iteratees=[iteratees[0]];
      }
      returnbaseOrderBy(collection,baseFlatten(iteratees,1),[]);
    });

    /*------------------------------------------------------------------------*/

    /**
     *Getsthetimestampofthenumberofmillisecondsthathaveelapsedsince
     *theUnixepoch(1January197000:00:00UTC).
     *
     *@static
     *@memberOf_
     *@since2.4.0
     *@categoryDate
     *@returns{number}Returnsthetimestamp.
     *@example
     *
     *_.defer(function(stamp){
     *  console.log(_.now()-stamp);
     *},_.now());
     *//=>Logsthenumberofmillisecondsittookforthedeferredinvocation.
     */
    varnow=ctxNow||function(){
      returnroot.Date.now();
    };

    /*------------------------------------------------------------------------*/

    /**
     *Theoppositeof`_.before`;thismethodcreatesafunctionthatinvokes
     *`func`onceit'scalled`n`ormoretimes.
     *
     *@static
     *@memberOf_
     *@since0.1.0
     *@categoryFunction
     *@param{number}nThenumberofcallsbefore`func`isinvoked.
     *@param{Function}funcThefunctiontorestrict.
     *@returns{Function}Returnsthenewrestrictedfunction.
     *@example
     *
     *varsaves=['profile','settings'];
     *
     *vardone=_.after(saves.length,function(){
     *  console.log('donesaving!');
     *});
     *
     *_.forEach(saves,function(type){
     *  asyncSave({'type':type,'complete':done});
     *});
     *//=>Logs'donesaving!'afterthetwoasyncsaveshavecompleted.
     */
    functionafter(n,func){
      if(typeoffunc!='function'){
        thrownewTypeError(FUNC_ERROR_TEXT);
      }
      n=toInteger(n);
      returnfunction(){
        if(--n<1){
          returnfunc.apply(this,arguments);
        }
      };
    }

    /**
     *Createsafunctionthatinvokes`func`,withupto`n`arguments,
     *ignoringanyadditionalarguments.
     *
     *@static
     *@memberOf_
     *@since3.0.0
     *@categoryFunction
     *@param{Function}funcThefunctiontocapargumentsfor.
     *@param{number}[n=func.length]Thearitycap.
     *@param-{Object}[guard]Enablesuseasaniterateeformethodslike`_.map`.
     *@returns{Function}Returnsthenewcappedfunction.
     *@example
     *
     *_.map(['6','8','10'],_.ary(parseInt,1));
     *//=>[6,8,10]
     */
    functionary(func,n,guard){
      n=guard?undefined:n;
      n=(func&&n==null)?func.length:n;
      returncreateWrap(func,WRAP_ARY_FLAG,undefined,undefined,undefined,undefined,n);
    }

    /**
     *Createsafunctionthatinvokes`func`,withthe`this`bindingandarguments
     *ofthecreatedfunction,whileit'scalledlessthan`n`times.Subsequent
     *callstothecreatedfunctionreturntheresultofthelast`func`invocation.
     *
     *@static
     *@memberOf_
     *@since3.0.0
     *@categoryFunction
     *@param{number}nThenumberofcallsatwhich`func`isnolongerinvoked.
     *@param{Function}funcThefunctiontorestrict.
     *@returns{Function}Returnsthenewrestrictedfunction.
     *@example
     *
     *jQuery(element).on('click',_.before(5,addContactToList));
     *//=>Allowsaddingupto4contactstothelist.
     */
    functionbefore(n,func){
      varresult;
      if(typeoffunc!='function'){
        thrownewTypeError(FUNC_ERROR_TEXT);
      }
      n=toInteger(n);
      returnfunction(){
        if(--n>0){
          result=func.apply(this,arguments);
        }
        if(n<=1){
          func=undefined;
        }
        returnresult;
      };
    }

    /**
     *Createsafunctionthatinvokes`func`withthe`this`bindingof`thisArg`
     *and`partials`prependedtotheargumentsitreceives.
     *
     *The`_.bind.placeholder`value,whichdefaultsto`_`inmonolithicbuilds,
     *maybeusedasaplaceholderforpartiallyappliedarguments.
     *
     ***Note:**Unlikenative`Function#bind`,thismethoddoesn'tsetthe"length"
     *propertyofboundfunctions.
     *
     *@static
     *@memberOf_
     *@since0.1.0
     *@categoryFunction
     *@param{Function}funcThefunctiontobind.
     *@param{*}thisArgThe`this`bindingof`func`.
     *@param{...*}[partials]Theargumentstobepartiallyapplied.
     *@returns{Function}Returnsthenewboundfunction.
     *@example
     *
     *functiongreet(greeting,punctuation){
     *  returngreeting+''+this.user+punctuation;
     *}
     *
     *varobject={'user':'fred'};
     *
     *varbound=_.bind(greet,object,'hi');
     *bound('!');
     *//=>'hifred!'
     *
     *//Boundwithplaceholders.
     *varbound=_.bind(greet,object,_,'!');
     *bound('hi');
     *//=>'hifred!'
     */
    varbind=baseRest(function(func,thisArg,partials){
      varbitmask=WRAP_BIND_FLAG;
      if(partials.length){
        varholders=replaceHolders(partials,getHolder(bind));
        bitmask|=WRAP_PARTIAL_FLAG;
      }
      returncreateWrap(func,bitmask,thisArg,partials,holders);
    });

    /**
     *Createsafunctionthatinvokesthemethodat`object[key]`with`partials`
     *prependedtotheargumentsitreceives.
     *
     *Thismethoddiffersfrom`_.bind`byallowingboundfunctionstoreference
     *methodsthatmayberedefinedordon'tyetexist.See
     *[PeterMichaux'sarticle](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
     *formoredetails.
     *
     *The`_.bindKey.placeholder`value,whichdefaultsto`_`inmonolithic
     *builds,maybeusedasaplaceholderforpartiallyappliedarguments.
     *
     *@static
     *@memberOf_
     *@since0.10.0
     *@categoryFunction
     *@param{Object}objectTheobjecttoinvokethemethodon.
     *@param{string}keyThekeyofthemethod.
     *@param{...*}[partials]Theargumentstobepartiallyapplied.
     *@returns{Function}Returnsthenewboundfunction.
     *@example
     *
     *varobject={
     *  'user':'fred',
     *  'greet':function(greeting,punctuation){
     *    returngreeting+''+this.user+punctuation;
     *  }
     *};
     *
     *varbound=_.bindKey(object,'greet','hi');
     *bound('!');
     *//=>'hifred!'
     *
     *object.greet=function(greeting,punctuation){
     *  returngreeting+'ya'+this.user+punctuation;
     *};
     *
     *bound('!');
     *//=>'hiyafred!'
     *
     *//Boundwithplaceholders.
     *varbound=_.bindKey(object,'greet',_,'!');
     *bound('hi');
     *//=>'hiyafred!'
     */
    varbindKey=baseRest(function(object,key,partials){
      varbitmask=WRAP_BIND_FLAG|WRAP_BIND_KEY_FLAG;
      if(partials.length){
        varholders=replaceHolders(partials,getHolder(bindKey));
        bitmask|=WRAP_PARTIAL_FLAG;
      }
      returncreateWrap(key,bitmask,object,partials,holders);
    });

    /**
     *Createsafunctionthatacceptsargumentsof`func`andeitherinvokes
     *`func`returningitsresult,ifatleast`arity`numberofargumentshave
     *beenprovided,orreturnsafunctionthatacceptstheremaining`func`
     *arguments,andsoon.Thearityof`func`maybespecifiedif`func.length`
     *isnotsufficient.
     *
     *The`_.curry.placeholder`value,whichdefaultsto`_`inmonolithicbuilds,
     *maybeusedasaplaceholderforprovidedarguments.
     *
     ***Note:**Thismethoddoesn'tsetthe"length"propertyofcurriedfunctions.
     *
     *@static
     *@memberOf_
     *@since2.0.0
     *@categoryFunction
     *@param{Function}funcThefunctiontocurry.
     *@param{number}[arity=func.length]Thearityof`func`.
     *@param-{Object}[guard]Enablesuseasaniterateeformethodslike`_.map`.
     *@returns{Function}Returnsthenewcurriedfunction.
     *@example
     *
     *varabc=function(a,b,c){
     *  return[a,b,c];
     *};
     *
     *varcurried=_.curry(abc);
     *
     *curried(1)(2)(3);
     *//=>[1,2,3]
     *
     *curried(1,2)(3);
     *//=>[1,2,3]
     *
     *curried(1,2,3);
     *//=>[1,2,3]
     *
     *//Curriedwithplaceholders.
     *curried(1)(_,3)(2);
     *//=>[1,2,3]
     */
    functioncurry(func,arity,guard){
      arity=guard?undefined:arity;
      varresult=createWrap(func,WRAP_CURRY_FLAG,undefined,undefined,undefined,undefined,undefined,arity);
      result.placeholder=curry.placeholder;
      returnresult;
    }

    /**
     *Thismethodislike`_.curry`exceptthatargumentsareappliedto`func`
     *inthemannerof`_.partialRight`insteadof`_.partial`.
     *
     *The`_.curryRight.placeholder`value,whichdefaultsto`_`inmonolithic
     *builds,maybeusedasaplaceholderforprovidedarguments.
     *
     ***Note:**Thismethoddoesn'tsetthe"length"propertyofcurriedfunctions.
     *
     *@static
     *@memberOf_
     *@since3.0.0
     *@categoryFunction
     *@param{Function}funcThefunctiontocurry.
     *@param{number}[arity=func.length]Thearityof`func`.
     *@param-{Object}[guard]Enablesuseasaniterateeformethodslike`_.map`.
     *@returns{Function}Returnsthenewcurriedfunction.
     *@example
     *
     *varabc=function(a,b,c){
     *  return[a,b,c];
     *};
     *
     *varcurried=_.curryRight(abc);
     *
     *curried(3)(2)(1);
     *//=>[1,2,3]
     *
     *curried(2,3)(1);
     *//=>[1,2,3]
     *
     *curried(1,2,3);
     *//=>[1,2,3]
     *
     *//Curriedwithplaceholders.
     *curried(3)(1,_)(2);
     *//=>[1,2,3]
     */
    functioncurryRight(func,arity,guard){
      arity=guard?undefined:arity;
      varresult=createWrap(func,WRAP_CURRY_RIGHT_FLAG,undefined,undefined,undefined,undefined,undefined,arity);
      result.placeholder=curryRight.placeholder;
      returnresult;
    }

    /**
     *Createsadebouncedfunctionthatdelaysinvoking`func`untilafter`wait`
     *millisecondshaveelapsedsincethelasttimethedebouncedfunctionwas
     *invoked.Thedebouncedfunctioncomeswitha`cancel`methodtocancel
     *delayed`func`invocationsanda`flush`methodtoimmediatelyinvokethem.
     *Provide`options`toindicatewhether`func`shouldbeinvokedonthe
     *leadingand/ortrailingedgeofthe`wait`timeout.The`func`isinvoked
     *withthelastargumentsprovidedtothedebouncedfunction.Subsequent
     *callstothedebouncedfunctionreturntheresultofthelast`func`
     *invocation.
     *
     ***Note:**If`leading`and`trailing`optionsare`true`,`func`is
     *invokedonthetrailingedgeofthetimeoutonlyifthedebouncedfunction
     *isinvokedmorethanonceduringthe`wait`timeout.
     *
     *If`wait`is`0`and`leading`is`false`,`func`invocationisdeferred
     *untiltothenexttick,similarto`setTimeout`withatimeoutof`0`.
     *
     *See[DavidCorbacho'sarticle](https://css-tricks.com/debouncing-throttling-explained-examples/)
     *fordetailsoverthedifferencesbetween`_.debounce`and`_.throttle`.
     *
     *@static
     *@memberOf_
     *@since0.1.0
     *@categoryFunction
     *@param{Function}funcThefunctiontodebounce.
     *@param{number}[wait=0]Thenumberofmillisecondstodelay.
     *@param{Object}[options={}]Theoptionsobject.
     *@param{boolean}[options.leading=false]
     * Specifyinvokingontheleadingedgeofthetimeout.
     *@param{number}[options.maxWait]
     * Themaximumtime`func`isallowedtobedelayedbeforeit'sinvoked.
     *@param{boolean}[options.trailing=true]
     * Specifyinvokingonthetrailingedgeofthetimeout.
     *@returns{Function}Returnsthenewdebouncedfunction.
     *@example
     *
     *//Avoidcostlycalculationswhilethewindowsizeisinflux.
     *jQuery(window).on('resize',_.debounce(calculateLayout,150));
     *
     *//Invoke`sendMail`whenclicked,debouncingsubsequentcalls.
     *jQuery(element).on('click',_.debounce(sendMail,300,{
     *  'leading':true,
     *  'trailing':false
     *}));
     *
     *//Ensure`batchLog`isinvokedonceafter1secondofdebouncedcalls.
     *vardebounced=_.debounce(batchLog,250,{'maxWait':1000});
     *varsource=newEventSource('/stream');
     *jQuery(source).on('message',debounced);
     *
     *//Cancelthetrailingdebouncedinvocation.
     *jQuery(window).on('popstate',debounced.cancel);
     */
    functiondebounce(func,wait,options){
      varlastArgs,
          lastThis,
          maxWait,
          result,
          timerId,
          lastCallTime,
          lastInvokeTime=0,
          leading=false,
          maxing=false,
          trailing=true;

      if(typeoffunc!='function'){
        thrownewTypeError(FUNC_ERROR_TEXT);
      }
      wait=toNumber(wait)||0;
      if(isObject(options)){
        leading=!!options.leading;
        maxing='maxWait'inoptions;
        maxWait=maxing?nativeMax(toNumber(options.maxWait)||0,wait):maxWait;
        trailing='trailing'inoptions?!!options.trailing:trailing;
      }

      functioninvokeFunc(time){
        varargs=lastArgs,
            thisArg=lastThis;

        lastArgs=lastThis=undefined;
        lastInvokeTime=time;
        result=func.apply(thisArg,args);
        returnresult;
      }

      functionleadingEdge(time){
        //Resetany`maxWait`timer.
        lastInvokeTime=time;
        //Startthetimerforthetrailingedge.
        timerId=setTimeout(timerExpired,wait);
        //Invoketheleadingedge.
        returnleading?invokeFunc(time):result;
      }

      functionremainingWait(time){
        vartimeSinceLastCall=time-lastCallTime,
            timeSinceLastInvoke=time-lastInvokeTime,
            result=wait-timeSinceLastCall;

        returnmaxing?nativeMin(result,maxWait-timeSinceLastInvoke):result;
      }

      functionshouldInvoke(time){
        vartimeSinceLastCall=time-lastCallTime,
            timeSinceLastInvoke=time-lastInvokeTime;

        //Eitherthisisthefirstcall,activityhasstoppedandwe'reatthe
        //trailingedge,thesystemtimehasgonebackwardsandwe'retreating
        //itasthetrailingedge,orwe'vehitthe`maxWait`limit.
        return(lastCallTime===undefined||(timeSinceLastCall>=wait)||
          (timeSinceLastCall<0)||(maxing&&timeSinceLastInvoke>=maxWait));
      }

      functiontimerExpired(){
        vartime=now();
        if(shouldInvoke(time)){
          returntrailingEdge(time);
        }
        //Restartthetimer.
        timerId=setTimeout(timerExpired,remainingWait(time));
      }

      functiontrailingEdge(time){
        timerId=undefined;

        //Onlyinvokeifwehave`lastArgs`whichmeans`func`hasbeen
        //debouncedatleastonce.
        if(trailing&&lastArgs){
          returninvokeFunc(time);
        }
        lastArgs=lastThis=undefined;
        returnresult;
      }

      functioncancel(){
        if(timerId!==undefined){
          clearTimeout(timerId);
        }
        lastInvokeTime=0;
        lastArgs=lastCallTime=lastThis=timerId=undefined;
      }

      functionflush(){
        returntimerId===undefined?result:trailingEdge(now());
      }

      functiondebounced(){
        vartime=now(),
            isInvoking=shouldInvoke(time);

        lastArgs=arguments;
        lastThis=this;
        lastCallTime=time;

        if(isInvoking){
          if(timerId===undefined){
            returnleadingEdge(lastCallTime);
          }
          if(maxing){
            //Handleinvocationsinatightloop.
            timerId=setTimeout(timerExpired,wait);
            returninvokeFunc(lastCallTime);
          }
        }
        if(timerId===undefined){
          timerId=setTimeout(timerExpired,wait);
        }
        returnresult;
      }
      debounced.cancel=cancel;
      debounced.flush=flush;
      returndebounced;
    }

    /**
     *Defersinvokingthe`func`untilthecurrentcallstackhascleared.Any
     *additionalargumentsareprovidedto`func`whenit'sinvoked.
     *
     *@static
     *@memberOf_
     *@since0.1.0
     *@categoryFunction
     *@param{Function}funcThefunctiontodefer.
     *@param{...*}[args]Theargumentstoinvoke`func`with.
     *@returns{number}Returnsthetimerid.
     *@example
     *
     *_.defer(function(text){
     *  console.log(text);
     *},'deferred');
     *//=>Logs'deferred'afteronemillisecond.
     */
    vardefer=baseRest(function(func,args){
      returnbaseDelay(func,1,args);
    });

    /**
     *Invokes`func`after`wait`milliseconds.Anyadditionalargumentsare
     *providedto`func`whenit'sinvoked.
     *
     *@static
     *@memberOf_
     *@since0.1.0
     *@categoryFunction
     *@param{Function}funcThefunctiontodelay.
     *@param{number}waitThenumberofmillisecondstodelayinvocation.
     *@param{...*}[args]Theargumentstoinvoke`func`with.
     *@returns{number}Returnsthetimerid.
     *@example
     *
     *_.delay(function(text){
     *  console.log(text);
     *},1000,'later');
     *//=>Logs'later'afteronesecond.
     */
    vardelay=baseRest(function(func,wait,args){
      returnbaseDelay(func,toNumber(wait)||0,args);
    });

    /**
     *Createsafunctionthatinvokes`func`withargumentsreversed.
     *
     *@static
     *@memberOf_
     *@since4.0.0
     *@categoryFunction
     *@param{Function}funcThefunctiontoflipargumentsfor.
     *@returns{Function}Returnsthenewflippedfunction.
     *@example
     *
     *varflipped=_.flip(function(){
     *  return_.toArray(arguments);
     *});
     *
     *flipped('a','b','c','d');
     *//=>['d','c','b','a']
     */
    functionflip(func){
      returncreateWrap(func,WRAP_FLIP_FLAG);
    }

    /**
     *Createsafunctionthatmemoizestheresultof`func`.If`resolver`is
     *provided,itdeterminesthecachekeyforstoringtheresultbasedonthe
     *argumentsprovidedtothememoizedfunction.Bydefault,thefirstargument
     *providedtothememoizedfunctionisusedasthemapcachekey.The`func`
     *isinvokedwiththe`this`bindingofthememoizedfunction.
     *
     ***Note:**Thecacheisexposedasthe`cache`propertyonthememoized
     *function.Itscreationmaybecustomizedbyreplacingthe`_.memoize.Cache`
     *constructorwithonewhoseinstancesimplementthe
     *[`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
     *methodinterfaceof`clear`,`delete`,`get`,`has`,and`set`.
     *
     *@static
     *@memberOf_
     *@since0.1.0
     *@categoryFunction
     *@param{Function}funcThefunctiontohaveitsoutputmemoized.
     *@param{Function}[resolver]Thefunctiontoresolvethecachekey.
     *@returns{Function}Returnsthenewmemoizedfunction.
     *@example
     *
     *varobject={'a':1,'b':2};
     *varother={'c':3,'d':4};
     *
     *varvalues=_.memoize(_.values);
     *values(object);
     *//=>[1,2]
     *
     *values(other);
     *//=>[3,4]
     *
     *object.a=2;
     *values(object);
     *//=>[1,2]
     *
     *//Modifytheresultcache.
     *values.cache.set(object,['a','b']);
     *values(object);
     *//=>['a','b']
     *
     *//Replace`_.memoize.Cache`.
     *_.memoize.Cache=WeakMap;
     */
    functionmemoize(func,resolver){
      if(typeoffunc!='function'||(resolver!=null&&typeofresolver!='function')){
        thrownewTypeError(FUNC_ERROR_TEXT);
      }
      varmemoized=function(){
        varargs=arguments,
            key=resolver?resolver.apply(this,args):args[0],
            cache=memoized.cache;

        if(cache.has(key)){
          returncache.get(key);
        }
        varresult=func.apply(this,args);
        memoized.cache=cache.set(key,result)||cache;
        returnresult;
      };
      memoized.cache=new(memoize.Cache||MapCache);
      returnmemoized;
    }

    //Expose`MapCache`.
    memoize.Cache=MapCache;

    /**
     *Createsafunctionthatnegatestheresultofthepredicate`func`.The
     *`func`predicateisinvokedwiththe`this`bindingandargumentsofthe
     *createdfunction.
     *
     *@static
     *@memberOf_
     *@since3.0.0
     *@categoryFunction
     *@param{Function}predicateThepredicatetonegate.
     *@returns{Function}Returnsthenewnegatedfunction.
     *@example
     *
     *functionisEven(n){
     *  returnn%2==0;
     *}
     *
     *_.filter([1,2,3,4,5,6],_.negate(isEven));
     *//=>[1,3,5]
     */
    functionnegate(predicate){
      if(typeofpredicate!='function'){
        thrownewTypeError(FUNC_ERROR_TEXT);
      }
      returnfunction(){
        varargs=arguments;
        switch(args.length){
          case0:return!predicate.call(this);
          case1:return!predicate.call(this,args[0]);
          case2:return!predicate.call(this,args[0],args[1]);
          case3:return!predicate.call(this,args[0],args[1],args[2]);
        }
        return!predicate.apply(this,args);
      };
    }

    /**
     *Createsafunctionthatisrestrictedtoinvoking`func`once.Repeatcalls
     *tothefunctionreturnthevalueofthefirstinvocation.The`func`is
     *invokedwiththe`this`bindingandargumentsofthecreatedfunction.
     *
     *@static
     *@memberOf_
     *@since0.1.0
     *@categoryFunction
     *@param{Function}funcThefunctiontorestrict.
     *@returns{Function}Returnsthenewrestrictedfunction.
     *@example
     *
     *varinitialize=_.once(createApplication);
     *initialize();
     *initialize();
     *//=>`createApplication`isinvokedonce
     */
    functiononce(func){
      returnbefore(2,func);
    }

    /**
     *Createsafunctionthatinvokes`func`withitsargumentstransformed.
     *
     *@static
     *@since4.0.0
     *@memberOf_
     *@categoryFunction
     *@param{Function}funcThefunctiontowrap.
     *@param{...(Function|Function[])}[transforms=[_.identity]]
     * Theargumenttransforms.
     *@returns{Function}Returnsthenewfunction.
     *@example
     *
     *functiondoubled(n){
     *  returnn*2;
     *}
     *
     *functionsquare(n){
     *  returnn*n;
     *}
     *
     *varfunc=_.overArgs(function(x,y){
     *  return[x,y];
     *},[square,doubled]);
     *
     *func(9,3);
     *//=>[81,6]
     *
     *func(10,5);
     *//=>[100,10]
     */
    varoverArgs=castRest(function(func,transforms){
      transforms=(transforms.length==1&&isArray(transforms[0]))
        ?arrayMap(transforms[0],baseUnary(getIteratee()))
        :arrayMap(baseFlatten(transforms,1),baseUnary(getIteratee()));

      varfuncsLength=transforms.length;
      returnbaseRest(function(args){
        varindex=-1,
            length=nativeMin(args.length,funcsLength);

        while(++index<length){
          args[index]=transforms[index].call(this,args[index]);
        }
        returnapply(func,this,args);
      });
    });

    /**
     *Createsafunctionthatinvokes`func`with`partials`prependedtothe
     *argumentsitreceives.Thismethodislike`_.bind`exceptitdoes**not**
     *alterthe`this`binding.
     *
     *The`_.partial.placeholder`value,whichdefaultsto`_`inmonolithic
     *builds,maybeusedasaplaceholderforpartiallyappliedarguments.
     *
     ***Note:**Thismethoddoesn'tsetthe"length"propertyofpartially
     *appliedfunctions.
     *
     *@static
     *@memberOf_
     *@since0.2.0
     *@categoryFunction
     *@param{Function}funcThefunctiontopartiallyapplyargumentsto.
     *@param{...*}[partials]Theargumentstobepartiallyapplied.
     *@returns{Function}Returnsthenewpartiallyappliedfunction.
     *@example
     *
     *functiongreet(greeting,name){
     *  returngreeting+''+name;
     *}
     *
     *varsayHelloTo=_.partial(greet,'hello');
     *sayHelloTo('fred');
     *//=>'hellofred'
     *
     *//Partiallyappliedwithplaceholders.
     *vargreetFred=_.partial(greet,_,'fred');
     *greetFred('hi');
     *//=>'hifred'
     */
    varpartial=baseRest(function(func,partials){
      varholders=replaceHolders(partials,getHolder(partial));
      returncreateWrap(func,WRAP_PARTIAL_FLAG,undefined,partials,holders);
    });

    /**
     *Thismethodislike`_.partial`exceptthatpartiallyappliedarguments
     *areappendedtotheargumentsitreceives.
     *
     *The`_.partialRight.placeholder`value,whichdefaultsto`_`inmonolithic
     *builds,maybeusedasaplaceholderforpartiallyappliedarguments.
     *
     ***Note:**Thismethoddoesn'tsetthe"length"propertyofpartially
     *appliedfunctions.
     *
     *@static
     *@memberOf_
     *@since1.0.0
     *@categoryFunction
     *@param{Function}funcThefunctiontopartiallyapplyargumentsto.
     *@param{...*}[partials]Theargumentstobepartiallyapplied.
     *@returns{Function}Returnsthenewpartiallyappliedfunction.
     *@example
     *
     *functiongreet(greeting,name){
     *  returngreeting+''+name;
     *}
     *
     *vargreetFred=_.partialRight(greet,'fred');
     *greetFred('hi');
     *//=>'hifred'
     *
     *//Partiallyappliedwithplaceholders.
     *varsayHelloTo=_.partialRight(greet,'hello',_);
     *sayHelloTo('fred');
     *//=>'hellofred'
     */
    varpartialRight=baseRest(function(func,partials){
      varholders=replaceHolders(partials,getHolder(partialRight));
      returncreateWrap(func,WRAP_PARTIAL_RIGHT_FLAG,undefined,partials,holders);
    });

    /**
     *Createsafunctionthatinvokes`func`withargumentsarrangedaccording
     *tothespecified`indexes`wheretheargumentvalueatthefirstindexis
     *providedasthefirstargument,theargumentvalueatthesecondindexis
     *providedasthesecondargument,andsoon.
     *
     *@static
     *@memberOf_
     *@since3.0.0
     *@categoryFunction
     *@param{Function}funcThefunctiontorearrangeargumentsfor.
     *@param{...(number|number[])}indexesThearrangedargumentindexes.
     *@returns{Function}Returnsthenewfunction.
     *@example
     *
     *varrearged=_.rearg(function(a,b,c){
     *  return[a,b,c];
     *},[2,0,1]);
     *
     *rearged('b','c','a')
     *//=>['a','b','c']
     */
    varrearg=flatRest(function(func,indexes){
      returncreateWrap(func,WRAP_REARG_FLAG,undefined,undefined,undefined,indexes);
    });

    /**
     *Createsafunctionthatinvokes`func`withthe`this`bindingofthe
     *createdfunctionandargumentsfrom`start`andbeyondprovidedas
     *anarray.
     *
     ***Note:**Thismethodisbasedonthe
     *[restparameter](https://mdn.io/rest_parameters).
     *
     *@static
     *@memberOf_
     *@since4.0.0
     *@categoryFunction
     *@param{Function}funcThefunctiontoapplyarestparameterto.
     *@param{number}[start=func.length-1]Thestartpositionoftherestparameter.
     *@returns{Function}Returnsthenewfunction.
     *@example
     *
     *varsay=_.rest(function(what,names){
     *  returnwhat+''+_.initial(names).join(',')+
     *    (_.size(names)>1?',&':'')+_.last(names);
     *});
     *
     *say('hello','fred','barney','pebbles');
     *//=>'hellofred,barney,&pebbles'
     */
    functionrest(func,start){
      if(typeoffunc!='function'){
        thrownewTypeError(FUNC_ERROR_TEXT);
      }
      start=start===undefined?start:toInteger(start);
      returnbaseRest(func,start);
    }

    /**
     *Createsafunctionthatinvokes`func`withthe`this`bindingofthe
     *createfunctionandanarrayofargumentsmuchlike
     *[`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
     *
     ***Note:**Thismethodisbasedonthe
     *[spreadoperator](https://mdn.io/spread_operator).
     *
     *@static
     *@memberOf_
     *@since3.2.0
     *@categoryFunction
     *@param{Function}funcThefunctiontospreadargumentsover.
     *@param{number}[start=0]Thestartpositionofthespread.
     *@returns{Function}Returnsthenewfunction.
     *@example
     *
     *varsay=_.spread(function(who,what){
     *  returnwho+'says'+what;
     *});
     *
     *say(['fred','hello']);
     *//=>'fredsayshello'
     *
     *varnumbers=Promise.all([
     *  Promise.resolve(40),
     *  Promise.resolve(36)
     *]);
     *
     *numbers.then(_.spread(function(x,y){
     *  returnx+y;
     *}));
     *//=>aPromiseof76
     */
    functionspread(func,start){
      if(typeoffunc!='function'){
        thrownewTypeError(FUNC_ERROR_TEXT);
      }
      start=start==null?0:nativeMax(toInteger(start),0);
      returnbaseRest(function(args){
        vararray=args[start],
            otherArgs=castSlice(args,0,start);

        if(array){
          arrayPush(otherArgs,array);
        }
        returnapply(func,this,otherArgs);
      });
    }

    /**
     *Createsathrottledfunctionthatonlyinvokes`func`atmostonceper
     *every`wait`milliseconds.Thethrottledfunctioncomeswitha`cancel`
     *methodtocanceldelayed`func`invocationsanda`flush`methodto
     *immediatelyinvokethem.Provide`options`toindicatewhether`func`
     *shouldbeinvokedontheleadingand/ortrailingedgeofthe`wait`
     *timeout.The`func`isinvokedwiththelastargumentsprovidedtothe
     *throttledfunction.Subsequentcallstothethrottledfunctionreturnthe
     *resultofthelast`func`invocation.
     *
     ***Note:**If`leading`and`trailing`optionsare`true`,`func`is
     *invokedonthetrailingedgeofthetimeoutonlyifthethrottledfunction
     *isinvokedmorethanonceduringthe`wait`timeout.
     *
     *If`wait`is`0`and`leading`is`false`,`func`invocationisdeferred
     *untiltothenexttick,similarto`setTimeout`withatimeoutof`0`.
     *
     *See[DavidCorbacho'sarticle](https://css-tricks.com/debouncing-throttling-explained-examples/)
     *fordetailsoverthedifferencesbetween`_.throttle`and`_.debounce`.
     *
     *@static
     *@memberOf_
     *@since0.1.0
     *@categoryFunction
     *@param{Function}funcThefunctiontothrottle.
     *@param{number}[wait=0]Thenumberofmillisecondstothrottleinvocationsto.
     *@param{Object}[options={}]Theoptionsobject.
     *@param{boolean}[options.leading=true]
     * Specifyinvokingontheleadingedgeofthetimeout.
     *@param{boolean}[options.trailing=true]
     * Specifyinvokingonthetrailingedgeofthetimeout.
     *@returns{Function}Returnsthenewthrottledfunction.
     *@example
     *
     *//Avoidexcessivelyupdatingthepositionwhilescrolling.
     *jQuery(window).on('scroll',_.throttle(updatePosition,100));
     *
     *//Invoke`renewToken`whentheclickeventisfired,butnotmorethanonceevery5minutes.
     *varthrottled=_.throttle(renewToken,300000,{'trailing':false});
     *jQuery(element).on('click',throttled);
     *
     *//Cancelthetrailingthrottledinvocation.
     *jQuery(window).on('popstate',throttled.cancel);
     */
    functionthrottle(func,wait,options){
      varleading=true,
          trailing=true;

      if(typeoffunc!='function'){
        thrownewTypeError(FUNC_ERROR_TEXT);
      }
      if(isObject(options)){
        leading='leading'inoptions?!!options.leading:leading;
        trailing='trailing'inoptions?!!options.trailing:trailing;
      }
      returndebounce(func,wait,{
        'leading':leading,
        'maxWait':wait,
        'trailing':trailing
      });
    }

    /**
     *Createsafunctionthatacceptsuptooneargument,ignoringany
     *additionalarguments.
     *
     *@static
     *@memberOf_
     *@since4.0.0
     *@categoryFunction
     *@param{Function}funcThefunctiontocapargumentsfor.
     *@returns{Function}Returnsthenewcappedfunction.
     *@example
     *
     *_.map(['6','8','10'],_.unary(parseInt));
     *//=>[6,8,10]
     */
    functionunary(func){
      returnary(func,1);
    }

    /**
     *Createsafunctionthatprovides`value`to`wrapper`asitsfirst
     *argument.Anyadditionalargumentsprovidedtothefunctionareappended
     *tothoseprovidedtothe`wrapper`.Thewrapperisinvokedwiththe`this`
     *bindingofthecreatedfunction.
     *
     *@static
     *@memberOf_
     *@since0.1.0
     *@categoryFunction
     *@param{*}valueThevaluetowrap.
     *@param{Function}[wrapper=identity]Thewrapperfunction.
     *@returns{Function}Returnsthenewfunction.
     *@example
     *
     *varp=_.wrap(_.escape,function(func,text){
     *  return'<p>'+func(text)+'</p>';
     *});
     *
     *p('fred,barney,&pebbles');
     *//=>'<p>fred,barney,&amp;pebbles</p>'
     */
    functionwrap(value,wrapper){
      returnpartial(castFunction(wrapper),value);
    }

    /*------------------------------------------------------------------------*/

    /**
     *Casts`value`asanarrayifit'snotone.
     *
     *@static
     *@memberOf_
     *@since4.4.0
     *@categoryLang
     *@param{*}valueThevaluetoinspect.
     *@returns{Array}Returnsthecastarray.
     *@example
     *
     *_.castArray(1);
     *//=>[1]
     *
     *_.castArray({'a':1});
     *//=>[{'a':1}]
     *
     *_.castArray('abc');
     *//=>['abc']
     *
     *_.castArray(null);
     *//=>[null]
     *
     *_.castArray(undefined);
     *//=>[undefined]
     *
     *_.castArray();
     *//=>[]
     *
     *vararray=[1,2,3];
     *console.log(_.castArray(array)===array);
     *//=>true
     */
    functioncastArray(){
      if(!arguments.length){
        return[];
      }
      varvalue=arguments[0];
      returnisArray(value)?value:[value];
    }

    /**
     *Createsashallowcloneof`value`.
     *
     ***Note:**Thismethodislooselybasedonthe
     *[structuredclonealgorithm](https://mdn.io/Structured_clone_algorithm)
     *andsupportscloningarrays,arraybuffers,booleans,dateobjects,maps,
     *numbers,`Object`objects,regexes,sets,strings,symbols,andtyped
     *arrays.Theownenumerablepropertiesof`arguments`objectsarecloned
     *asplainobjects.Anemptyobjectisreturnedforuncloneablevaluessuch
     *aserrorobjects,functions,DOMnodes,andWeakMaps.
     *
     *@static
     *@memberOf_
     *@since0.1.0
     *@categoryLang
     *@param{*}valueThevaluetoclone.
     *@returns{*}Returnstheclonedvalue.
     *@see_.cloneDeep
     *@example
     *
     *varobjects=[{'a':1},{'b':2}];
     *
     *varshallow=_.clone(objects);
     *console.log(shallow[0]===objects[0]);
     *//=>true
     */
    functionclone(value){
      returnbaseClone(value,CLONE_SYMBOLS_FLAG);
    }

    /**
     *Thismethodislike`_.clone`exceptthatitaccepts`customizer`which
     *isinvokedtoproducetheclonedvalue.If`customizer`returns`undefined`,
     *cloningishandledbythemethodinstead.The`customizer`isinvokedwith
     *uptofourarguments;(value[,index|key,object,stack]).
     *
     *@static
     *@memberOf_
     *@since4.0.0
     *@categoryLang
     *@param{*}valueThevaluetoclone.
     *@param{Function}[customizer]Thefunctiontocustomizecloning.
     *@returns{*}Returnstheclonedvalue.
     *@see_.cloneDeepWith
     *@example
     *
     *functioncustomizer(value){
     *  if(_.isElement(value)){
     *    returnvalue.cloneNode(false);
     *  }
     *}
     *
     *varel=_.cloneWith(document.body,customizer);
     *
     *console.log(el===document.body);
     *//=>false
     *console.log(el.nodeName);
     *//=>'BODY'
     *console.log(el.childNodes.length);
     *//=>0
     */
    functioncloneWith(value,customizer){
      customizer=typeofcustomizer=='function'?customizer:undefined;
      returnbaseClone(value,CLONE_SYMBOLS_FLAG,customizer);
    }

    /**
     *Thismethodislike`_.clone`exceptthatitrecursivelyclones`value`.
     *
     *@static
     *@memberOf_
     *@since1.0.0
     *@categoryLang
     *@param{*}valueThevaluetorecursivelyclone.
     *@returns{*}Returnsthedeepclonedvalue.
     *@see_.clone
     *@example
     *
     *varobjects=[{'a':1},{'b':2}];
     *
     *vardeep=_.cloneDeep(objects);
     *console.log(deep[0]===objects[0]);
     *//=>false
     */
    functioncloneDeep(value){
      returnbaseClone(value,CLONE_DEEP_FLAG|CLONE_SYMBOLS_FLAG);
    }

    /**
     *Thismethodislike`_.cloneWith`exceptthatitrecursivelyclones`value`.
     *
     *@static
     *@memberOf_
     *@since4.0.0
     *@categoryLang
     *@param{*}valueThevaluetorecursivelyclone.
     *@param{Function}[customizer]Thefunctiontocustomizecloning.
     *@returns{*}Returnsthedeepclonedvalue.
     *@see_.cloneWith
     *@example
     *
     *functioncustomizer(value){
     *  if(_.isElement(value)){
     *    returnvalue.cloneNode(true);
     *  }
     *}
     *
     *varel=_.cloneDeepWith(document.body,customizer);
     *
     *console.log(el===document.body);
     *//=>false
     *console.log(el.nodeName);
     *//=>'BODY'
     *console.log(el.childNodes.length);
     *//=>20
     */
    functioncloneDeepWith(value,customizer){
      customizer=typeofcustomizer=='function'?customizer:undefined;
      returnbaseClone(value,CLONE_DEEP_FLAG|CLONE_SYMBOLS_FLAG,customizer);
    }

    /**
     *Checksif`object`conformsto`source`byinvokingthepredicate
     *propertiesof`source`withthecorrespondingpropertyvaluesof`object`.
     *
     ***Note:**Thismethodisequivalentto`_.conforms`when`source`is
     *partiallyapplied.
     *
     *@static
     *@memberOf_
     *@since4.14.0
     *@categoryLang
     *@param{Object}objectTheobjecttoinspect.
     *@param{Object}sourceTheobjectofpropertypredicatestoconformto.
     *@returns{boolean}Returns`true`if`object`conforms,else`false`.
     *@example
     *
     *varobject={'a':1,'b':2};
     *
     *_.conformsTo(object,{'b':function(n){returnn>1;}});
     *//=>true
     *
     *_.conformsTo(object,{'b':function(n){returnn>2;}});
     *//=>false
     */
    functionconformsTo(object,source){
      returnsource==null||baseConformsTo(object,source,keys(source));
    }

    /**
     *Performsa
     *[`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     *comparisonbetweentwovaluestodetermineiftheyareequivalent.
     *
     *@static
     *@memberOf_
     *@since4.0.0
     *@categoryLang
     *@param{*}valueThevaluetocompare.
     *@param{*}otherTheothervaluetocompare.
     *@returns{boolean}Returns`true`ifthevaluesareequivalent,else`false`.
     *@example
     *
     *varobject={'a':1};
     *varother={'a':1};
     *
     *_.eq(object,object);
     *//=>true
     *
     *_.eq(object,other);
     *//=>false
     *
     *_.eq('a','a');
     *//=>true
     *
     *_.eq('a',Object('a'));
     *//=>false
     *
     *_.eq(NaN,NaN);
     *//=>true
     */
    functioneq(value,other){
      returnvalue===other||(value!==value&&other!==other);
    }

    /**
     *Checksif`value`isgreaterthan`other`.
     *
     *@static
     *@memberOf_
     *@since3.9.0
     *@categoryLang
     *@param{*}valueThevaluetocompare.
     *@param{*}otherTheothervaluetocompare.
     *@returns{boolean}Returns`true`if`value`isgreaterthan`other`,
     * else`false`.
     *@see_.lt
     *@example
     *
     *_.gt(3,1);
     *//=>true
     *
     *_.gt(3,3);
     *//=>false
     *
     *_.gt(1,3);
     *//=>false
     */
    vargt=createRelationalOperation(baseGt);

    /**
     *Checksif`value`isgreaterthanorequalto`other`.
     *
     *@static
     *@memberOf_
     *@since3.9.0
     *@categoryLang
     *@param{*}valueThevaluetocompare.
     *@param{*}otherTheothervaluetocompare.
     *@returns{boolean}Returns`true`if`value`isgreaterthanorequalto
     * `other`,else`false`.
     *@see_.lte
     *@example
     *
     *_.gte(3,1);
     *//=>true
     *
     *_.gte(3,3);
     *//=>true
     *
     *_.gte(1,3);
     *//=>false
     */
    vargte=createRelationalOperation(function(value,other){
      returnvalue>=other;
    });

    /**
     *Checksif`value`islikelyan`arguments`object.
     *
     *@static
     *@memberOf_
     *@since0.1.0
     *@categoryLang
     *@param{*}valueThevaluetocheck.
     *@returns{boolean}Returns`true`if`value`isan`arguments`object,
     * else`false`.
     *@example
     *
     *_.isArguments(function(){returnarguments;}());
     *//=>true
     *
     *_.isArguments([1,2,3]);
     *//=>false
     */
    varisArguments=baseIsArguments(function(){returnarguments;}())?baseIsArguments:function(value){
      returnisObjectLike(value)&&hasOwnProperty.call(value,'callee')&&
        !propertyIsEnumerable.call(value,'callee');
    };

    /**
     *Checksif`value`isclassifiedasan`Array`object.
     *
     *@static
     *@memberOf_
     *@since0.1.0
     *@categoryLang
     *@param{*}valueThevaluetocheck.
     *@returns{boolean}Returns`true`if`value`isanarray,else`false`.
     *@example
     *
     *_.isArray([1,2,3]);
     *//=>true
     *
     *_.isArray(document.body.children);
     *//=>false
     *
     *_.isArray('abc');
     *//=>false
     *
     *_.isArray(_.noop);
     *//=>false
     */
    varisArray=Array.isArray;

    /**
     *Checksif`value`isclassifiedasan`ArrayBuffer`object.
     *
     *@static
     *@memberOf_
     *@since4.3.0
     *@categoryLang
     *@param{*}valueThevaluetocheck.
     *@returns{boolean}Returns`true`if`value`isanarraybuffer,else`false`.
     *@example
     *
     *_.isArrayBuffer(newArrayBuffer(2));
     *//=>true
     *
     *_.isArrayBuffer(newArray(2));
     *//=>false
     */
    varisArrayBuffer=nodeIsArrayBuffer?baseUnary(nodeIsArrayBuffer):baseIsArrayBuffer;

    /**
     *Checksif`value`isarray-like.Avalueisconsideredarray-likeifit's
     *notafunctionandhasa`value.length`that'sanintegergreaterthanor
     *equalto`0`andlessthanorequalto`Number.MAX_SAFE_INTEGER`.
     *
     *@static
     *@memberOf_
     *@since4.0.0
     *@categoryLang
     *@param{*}valueThevaluetocheck.
     *@returns{boolean}Returns`true`if`value`isarray-like,else`false`.
     *@example
     *
     *_.isArrayLike([1,2,3]);
     *//=>true
     *
     *_.isArrayLike(document.body.children);
     *//=>true
     *
     *_.isArrayLike('abc');
     *//=>true
     *
     *_.isArrayLike(_.noop);
     *//=>false
     */
    functionisArrayLike(value){
      returnvalue!=null&&isLength(value.length)&&!isFunction(value);
    }

    /**
     *Thismethodislike`_.isArrayLike`exceptthatitalsochecksif`value`
     *isanobject.
     *
     *@static
     *@memberOf_
     *@since4.0.0
     *@categoryLang
     *@param{*}valueThevaluetocheck.
     *@returns{boolean}Returns`true`if`value`isanarray-likeobject,
     * else`false`.
     *@example
     *
     *_.isArrayLikeObject([1,2,3]);
     *//=>true
     *
     *_.isArrayLikeObject(document.body.children);
     *//=>true
     *
     *_.isArrayLikeObject('abc');
     *//=>false
     *
     *_.isArrayLikeObject(_.noop);
     *//=>false
     */
    functionisArrayLikeObject(value){
      returnisObjectLike(value)&&isArrayLike(value);
    }

    /**
     *Checksif`value`isclassifiedasabooleanprimitiveorobject.
     *
     *@static
     *@memberOf_
     *@since0.1.0
     *@categoryLang
     *@param{*}valueThevaluetocheck.
     *@returns{boolean}Returns`true`if`value`isaboolean,else`false`.
     *@example
     *
     *_.isBoolean(false);
     *//=>true
     *
     *_.isBoolean(null);
     *//=>false
     */
    functionisBoolean(value){
      returnvalue===true||value===false||
        (isObjectLike(value)&&baseGetTag(value)==boolTag);
    }

    /**
     *Checksif`value`isabuffer.
     *
     *@static
     *@memberOf_
     *@since4.3.0
     *@categoryLang
     *@param{*}valueThevaluetocheck.
     *@returns{boolean}Returns`true`if`value`isabuffer,else`false`.
     *@example
     *
     *_.isBuffer(newBuffer(2));
     *//=>true
     *
     *_.isBuffer(newUint8Array(2));
     *//=>false
     */
    varisBuffer=nativeIsBuffer||stubFalse;

    /**
     *Checksif`value`isclassifiedasa`Date`object.
     *
     *@static
     *@memberOf_
     *@since0.1.0
     *@categoryLang
     *@param{*}valueThevaluetocheck.
     *@returns{boolean}Returns`true`if`value`isadateobject,else`false`.
     *@example
     *
     *_.isDate(newDate);
     *//=>true
     *
     *_.isDate('MonApril232012');
     *//=>false
     */
    varisDate=nodeIsDate?baseUnary(nodeIsDate):baseIsDate;

    /**
     *Checksif`value`islikelyaDOMelement.
     *
     *@static
     *@memberOf_
     *@since0.1.0
     *@categoryLang
     *@param{*}valueThevaluetocheck.
     *@returns{boolean}Returns`true`if`value`isaDOMelement,else`false`.
     *@example
     *
     *_.isElement(document.body);
     *//=>true
     *
     *_.isElement('<body>');
     *//=>false
     */
    functionisElement(value){
      returnisObjectLike(value)&&value.nodeType===1&&!isPlainObject(value);
    }

    /**
     *Checksif`value`isanemptyobject,collection,map,orset.
     *
     *Objectsareconsideredemptyiftheyhavenoownenumerablestringkeyed
     *properties.
     *
     *Array-likevaluessuchas`arguments`objects,arrays,buffers,strings,or
     *jQuery-likecollectionsareconsideredemptyiftheyhavea`length`of`0`.
     *Similarly,mapsandsetsareconsideredemptyiftheyhavea`size`of`0`.
     *
     *@static
     *@memberOf_
     *@since0.1.0
     *@categoryLang
     *@param{*}valueThevaluetocheck.
     *@returns{boolean}Returns`true`if`value`isempty,else`false`.
     *@example
     *
     *_.isEmpty(null);
     *//=>true
     *
     *_.isEmpty(true);
     *//=>true
     *
     *_.isEmpty(1);
     *//=>true
     *
     *_.isEmpty([1,2,3]);
     *//=>false
     *
     *_.isEmpty({'a':1});
     *//=>false
     */
    functionisEmpty(value){
      if(value==null){
        returntrue;
      }
      if(isArrayLike(value)&&
          (isArray(value)||typeofvalue=='string'||typeofvalue.splice=='function'||
            isBuffer(value)||isTypedArray(value)||isArguments(value))){
        return!value.length;
      }
      vartag=getTag(value);
      if(tag==mapTag||tag==setTag){
        return!value.size;
      }
      if(isPrototype(value)){
        return!baseKeys(value).length;
      }
      for(varkeyinvalue){
        if(hasOwnProperty.call(value,key)){
          returnfalse;
        }
      }
      returntrue;
    }

    /**
     *Performsadeepcomparisonbetweentwovaluestodetermineiftheyare
     *equivalent.
     *
     ***Note:**Thismethodsupportscomparingarrays,arraybuffers,booleans,
     *dateobjects,errorobjects,maps,numbers,`Object`objects,regexes,
     *sets,strings,symbols,andtypedarrays.`Object`objectsarecompared
     *bytheirown,notinherited,enumerableproperties.FunctionsandDOM
     *nodesarecomparedbystrictequality,i.e.`===`.
     *
     *@static
     *@memberOf_
     *@since0.1.0
     *@categoryLang
     *@param{*}valueThevaluetocompare.
     *@param{*}otherTheothervaluetocompare.
     *@returns{boolean}Returns`true`ifthevaluesareequivalent,else`false`.
     *@example
     *
     *varobject={'a':1};
     *varother={'a':1};
     *
     *_.isEqual(object,other);
     *//=>true
     *
     *object===other;
     *//=>false
     */
    functionisEqual(value,other){
      returnbaseIsEqual(value,other);
    }

    /**
     *Thismethodislike`_.isEqual`exceptthatitaccepts`customizer`which
     *isinvokedtocomparevalues.If`customizer`returns`undefined`,comparisons
     *arehandledbythemethodinstead.The`customizer`isinvokedwithupto
     *sixarguments:(objValue,othValue[,index|key,object,other,stack]).
     *
     *@static
     *@memberOf_
     *@since4.0.0
     *@categoryLang
     *@param{*}valueThevaluetocompare.
     *@param{*}otherTheothervaluetocompare.
     *@param{Function}[customizer]Thefunctiontocustomizecomparisons.
     *@returns{boolean}Returns`true`ifthevaluesareequivalent,else`false`.
     *@example
     *
     *functionisGreeting(value){
     *  return/^h(?:i|ello)$/.test(value);
     *}
     *
     *functioncustomizer(objValue,othValue){
     *  if(isGreeting(objValue)&&isGreeting(othValue)){
     *    returntrue;
     *  }
     *}
     *
     *vararray=['hello','goodbye'];
     *varother=['hi','goodbye'];
     *
     *_.isEqualWith(array,other,customizer);
     *//=>true
     */
    functionisEqualWith(value,other,customizer){
      customizer=typeofcustomizer=='function'?customizer:undefined;
      varresult=customizer?customizer(value,other):undefined;
      returnresult===undefined?baseIsEqual(value,other,undefined,customizer):!!result;
    }

    /**
     *Checksif`value`isan`Error`,`EvalError`,`RangeError`,`ReferenceError`,
     *`SyntaxError`,`TypeError`,or`URIError`object.
     *
     *@static
     *@memberOf_
     *@since3.0.0
     *@categoryLang
     *@param{*}valueThevaluetocheck.
     *@returns{boolean}Returns`true`if`value`isanerrorobject,else`false`.
     *@example
     *
     *_.isError(newError);
     *//=>true
     *
     *_.isError(Error);
     *//=>false
     */
    functionisError(value){
      if(!isObjectLike(value)){
        returnfalse;
      }
      vartag=baseGetTag(value);
      returntag==errorTag||tag==domExcTag||
        (typeofvalue.message=='string'&&typeofvalue.name=='string'&&!isPlainObject(value));
    }

    /**
     *Checksif`value`isafiniteprimitivenumber.
     *
     ***Note:**Thismethodisbasedon
     *[`Number.isFinite`](https://mdn.io/Number/isFinite).
     *
     *@static
     *@memberOf_
     *@since0.1.0
     *@categoryLang
     *@param{*}valueThevaluetocheck.
     *@returns{boolean}Returns`true`if`value`isafinitenumber,else`false`.
     *@example
     *
     *_.isFinite(3);
     *//=>true
     *
     *_.isFinite(Number.MIN_VALUE);
     *//=>true
     *
     *_.isFinite(Infinity);
     *//=>false
     *
     *_.isFinite('3');
     *//=>false
     */
    functionisFinite(value){
      returntypeofvalue=='number'&&nativeIsFinite(value);
    }

    /**
     *Checksif`value`isclassifiedasa`Function`object.
     *
     *@static
     *@memberOf_
     *@since0.1.0
     *@categoryLang
     *@param{*}valueThevaluetocheck.
     *@returns{boolean}Returns`true`if`value`isafunction,else`false`.
     *@example
     *
     *_.isFunction(_);
     *//=>true
     *
     *_.isFunction(/abc/);
     *//=>false
     */
    functionisFunction(value){
      if(!isObject(value)){
        returnfalse;
      }
      //Theuseof`Object#toString`avoidsissueswiththe`typeof`operator
      //inSafari9whichreturns'object'fortypedarraysandotherconstructors.
      vartag=baseGetTag(value);
      returntag==funcTag||tag==genTag||tag==asyncTag||tag==proxyTag;
    }

    /**
     *Checksif`value`isaninteger.
     *
     ***Note:**Thismethodisbasedon
     *[`Number.isInteger`](https://mdn.io/Number/isInteger).
     *
     *@static
     *@memberOf_
     *@since4.0.0
     *@categoryLang
     *@param{*}valueThevaluetocheck.
     *@returns{boolean}Returns`true`if`value`isaninteger,else`false`.
     *@example
     *
     *_.isInteger(3);
     *//=>true
     *
     *_.isInteger(Number.MIN_VALUE);
     *//=>false
     *
     *_.isInteger(Infinity);
     *//=>false
     *
     *_.isInteger('3');
     *//=>false
     */
    functionisInteger(value){
      returntypeofvalue=='number'&&value==toInteger(value);
    }

    /**
     *Checksif`value`isavalidarray-likelength.
     *
     ***Note:**Thismethodislooselybasedon
     *[`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     *@static
     *@memberOf_
     *@since4.0.0
     *@categoryLang
     *@param{*}valueThevaluetocheck.
     *@returns{boolean}Returns`true`if`value`isavalidlength,else`false`.
     *@example
     *
     *_.isLength(3);
     *//=>true
     *
     *_.isLength(Number.MIN_VALUE);
     *//=>false
     *
     *_.isLength(Infinity);
     *//=>false
     *
     *_.isLength('3');
     *//=>false
     */
    functionisLength(value){
      returntypeofvalue=='number'&&
        value>-1&&value%1==0&&value<=MAX_SAFE_INTEGER;
    }

    /**
     *Checksif`value`isthe
     *[languagetype](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     *of`Object`.(e.g.arrays,functions,objects,regexes,`newNumber(0)`,and`newString('')`)
     *
     *@static
     *@memberOf_
     *@since0.1.0
     *@categoryLang
     *@param{*}valueThevaluetocheck.
     *@returns{boolean}Returns`true`if`value`isanobject,else`false`.
     *@example
     *
     *_.isObject({});
     *//=>true
     *
     *_.isObject([1,2,3]);
     *//=>true
     *
     *_.isObject(_.noop);
     *//=>true
     *
     *_.isObject(null);
     *//=>false
     */
    functionisObject(value){
      vartype=typeofvalue;
      returnvalue!=null&&(type=='object'||type=='function');
    }

    /**
     *Checksif`value`isobject-like.Avalueisobject-likeifit'snot`null`
     *andhasa`typeof`resultof"object".
     *
     *@static
     *@memberOf_
     *@since4.0.0
     *@categoryLang
     *@param{*}valueThevaluetocheck.
     *@returns{boolean}Returns`true`if`value`isobject-like,else`false`.
     *@example
     *
     *_.isObjectLike({});
     *//=>true
     *
     *_.isObjectLike([1,2,3]);
     *//=>true
     *
     *_.isObjectLike(_.noop);
     *//=>false
     *
     *_.isObjectLike(null);
     *//=>false
     */
    functionisObjectLike(value){
      returnvalue!=null&&typeofvalue=='object';
    }

    /**
     *Checksif`value`isclassifiedasa`Map`object.
     *
     *@static
     *@memberOf_
     *@since4.3.0
     *@categoryLang
     *@param{*}valueThevaluetocheck.
     *@returns{boolean}Returns`true`if`value`isamap,else`false`.
     *@example
     *
     *_.isMap(newMap);
     *//=>true
     *
     *_.isMap(newWeakMap);
     *//=>false
     */
    varisMap=nodeIsMap?baseUnary(nodeIsMap):baseIsMap;

    /**
     *Performsapartialdeepcomparisonbetween`object`and`source`to
     *determineif`object`containsequivalentpropertyvalues.
     *
     ***Note:**Thismethodisequivalentto`_.matches`when`source`is
     *partiallyapplied.
     *
     *Partialcomparisonswillmatchemptyarrayandemptyobject`source`
     *valuesagainstanyarrayorobjectvalue,respectively.See`_.isEqual`
     *foralistofsupportedvaluecomparisons.
     *
     *@static
     *@memberOf_
     *@since3.0.0
     *@categoryLang
     *@param{Object}objectTheobjecttoinspect.
     *@param{Object}sourceTheobjectofpropertyvaluestomatch.
     *@returns{boolean}Returns`true`if`object`isamatch,else`false`.
     *@example
     *
     *varobject={'a':1,'b':2};
     *
     *_.isMatch(object,{'b':2});
     *//=>true
     *
     *_.isMatch(object,{'b':1});
     *//=>false
     */
    functionisMatch(object,source){
      returnobject===source||baseIsMatch(object,source,getMatchData(source));
    }

    /**
     *Thismethodislike`_.isMatch`exceptthatitaccepts`customizer`which
     *isinvokedtocomparevalues.If`customizer`returns`undefined`,comparisons
     *arehandledbythemethodinstead.The`customizer`isinvokedwithfive
     *arguments:(objValue,srcValue,index|key,object,source).
     *
     *@static
     *@memberOf_
     *@since4.0.0
     *@categoryLang
     *@param{Object}objectTheobjecttoinspect.
     *@param{Object}sourceTheobjectofpropertyvaluestomatch.
     *@param{Function}[customizer]Thefunctiontocustomizecomparisons.
     *@returns{boolean}Returns`true`if`object`isamatch,else`false`.
     *@example
     *
     *functionisGreeting(value){
     *  return/^h(?:i|ello)$/.test(value);
     *}
     *
     *functioncustomizer(objValue,srcValue){
     *  if(isGreeting(objValue)&&isGreeting(srcValue)){
     *    returntrue;
     *  }
     *}
     *
     *varobject={'greeting':'hello'};
     *varsource={'greeting':'hi'};
     *
     *_.isMatchWith(object,source,customizer);
     *//=>true
     */
    functionisMatchWith(object,source,customizer){
      customizer=typeofcustomizer=='function'?customizer:undefined;
      returnbaseIsMatch(object,source,getMatchData(source),customizer);
    }

    /**
     *Checksif`value`is`NaN`.
     *
     ***Note:**Thismethodisbasedon
     *[`Number.isNaN`](https://mdn.io/Number/isNaN)andisnotthesameas
     *global[`isNaN`](https://mdn.io/isNaN)whichreturns`true`for
     *`undefined`andothernon-numbervalues.
     *
     *@static
     *@memberOf_
     *@since0.1.0
     *@categoryLang
     *@param{*}valueThevaluetocheck.
     *@returns{boolean}Returns`true`if`value`is`NaN`,else`false`.
     *@example
     *
     *_.isNaN(NaN);
     *//=>true
     *
     *_.isNaN(newNumber(NaN));
     *//=>true
     *
     *isNaN(undefined);
     *//=>true
     *
     *_.isNaN(undefined);
     *//=>false
     */
    functionisNaN(value){
      //An`NaN`primitiveistheonlyvaluethatisnotequaltoitself.
      //Performthe`toStringTag`checkfirsttoavoiderrorswithsome
      //ActiveXobjectsinIE.
      returnisNumber(value)&&value!=+value;
    }

    /**
     *Checksif`value`isapristinenativefunction.
     *
     ***Note:**Thismethodcan'treliablydetectnativefunctionsinthepresence
     *ofthecore-jspackagebecausecore-jscircumventsthiskindofdetection.
     *Despitemultiplerequests,thecore-jsmaintainerhasmadeitclear:any
     *attempttofixthedetectionwillbeobstructed.Asaresult,we'releft
     *withlittlechoicebuttothrowanerror.Unfortunately,thisalsoaffects
     *packages,like[babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
     *whichrelyoncore-js.
     *
     *@static
     *@memberOf_
     *@since3.0.0
     *@categoryLang
     *@param{*}valueThevaluetocheck.
     *@returns{boolean}Returns`true`if`value`isanativefunction,
     * else`false`.
     *@example
     *
     *_.isNative(Array.prototype.push);
     *//=>true
     *
     *_.isNative(_);
     *//=>false
     */
    functionisNative(value){
      if(isMaskable(value)){
        thrownewError(CORE_ERROR_TEXT);
      }
      returnbaseIsNative(value);
    }

    /**
     *Checksif`value`is`null`.
     *
     *@static
     *@memberOf_
     *@since0.1.0
     *@categoryLang
     *@param{*}valueThevaluetocheck.
     *@returns{boolean}Returns`true`if`value`is`null`,else`false`.
     *@example
     *
     *_.isNull(null);
     *//=>true
     *
     *_.isNull(void0);
     *//=>false
     */
    functionisNull(value){
      returnvalue===null;
    }

    /**
     *Checksif`value`is`null`or`undefined`.
     *
     *@static
     *@memberOf_
     *@since4.0.0
     *@categoryLang
     *@param{*}valueThevaluetocheck.
     *@returns{boolean}Returns`true`if`value`isnullish,else`false`.
     *@example
     *
     *_.isNil(null);
     *//=>true
     *
     *_.isNil(void0);
     *//=>true
     *
     *_.isNil(NaN);
     *//=>false
     */
    functionisNil(value){
      returnvalue==null;
    }

    /**
     *Checksif`value`isclassifiedasa`Number`primitiveorobject.
     *
     ***Note:**Toexclude`Infinity`,`-Infinity`,and`NaN`,whichare
     *classifiedasnumbers,usethe`_.isFinite`method.
     *
     *@static
     *@memberOf_
     *@since0.1.0
     *@categoryLang
     *@param{*}valueThevaluetocheck.
     *@returns{boolean}Returns`true`if`value`isanumber,else`false`.
     *@example
     *
     *_.isNumber(3);
     *//=>true
     *
     *_.isNumber(Number.MIN_VALUE);
     *//=>true
     *
     *_.isNumber(Infinity);
     *//=>true
     *
     *_.isNumber('3');
     *//=>false
     */
    functionisNumber(value){
      returntypeofvalue=='number'||
        (isObjectLike(value)&&baseGetTag(value)==numberTag);
    }

    /**
     *Checksif`value`isaplainobject,thatis,anobjectcreatedbythe
     *`Object`constructororonewitha`[[Prototype]]`of`null`.
     *
     *@static
     *@memberOf_
     *@since0.8.0
     *@categoryLang
     *@param{*}valueThevaluetocheck.
     *@returns{boolean}Returns`true`if`value`isaplainobject,else`false`.
     *@example
     *
     *functionFoo(){
     *  this.a=1;
     *}
     *
     *_.isPlainObject(newFoo);
     *//=>false
     *
     *_.isPlainObject([1,2,3]);
     *//=>false
     *
     *_.isPlainObject({'x':0,'y':0});
     *//=>true
     *
     *_.isPlainObject(Object.create(null));
     *//=>true
     */
    functionisPlainObject(value){
      if(!isObjectLike(value)||baseGetTag(value)!=objectTag){
        returnfalse;
      }
      varproto=getPrototype(value);
      if(proto===null){
        returntrue;
      }
      varCtor=hasOwnProperty.call(proto,'constructor')&&proto.constructor;
      returntypeofCtor=='function'&&CtorinstanceofCtor&&
        funcToString.call(Ctor)==objectCtorString;
    }

    /**
     *Checksif`value`isclassifiedasa`RegExp`object.
     *
     *@static
     *@memberOf_
     *@since0.1.0
     *@categoryLang
     *@param{*}valueThevaluetocheck.
     *@returns{boolean}Returns`true`if`value`isaregexp,else`false`.
     *@example
     *
     *_.isRegExp(/abc/);
     *//=>true
     *
     *_.isRegExp('/abc/');
     *//=>false
     */
    varisRegExp=nodeIsRegExp?baseUnary(nodeIsRegExp):baseIsRegExp;

    /**
     *Checksif`value`isasafeinteger.Anintegerissafeifit'sanIEEE-754
     *doubleprecisionnumberwhichisn'ttheresultofaroundedunsafeinteger.
     *
     ***Note:**Thismethodisbasedon
     *[`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
     *
     *@static
     *@memberOf_
     *@since4.0.0
     *@categoryLang
     *@param{*}valueThevaluetocheck.
     *@returns{boolean}Returns`true`if`value`isasafeinteger,else`false`.
     *@example
     *
     *_.isSafeInteger(3);
     *//=>true
     *
     *_.isSafeInteger(Number.MIN_VALUE);
     *//=>false
     *
     *_.isSafeInteger(Infinity);
     *//=>false
     *
     *_.isSafeInteger('3');
     *//=>false
     */
    functionisSafeInteger(value){
      returnisInteger(value)&&value>=-MAX_SAFE_INTEGER&&value<=MAX_SAFE_INTEGER;
    }

    /**
     *Checksif`value`isclassifiedasa`Set`object.
     *
     *@static
     *@memberOf_
     *@since4.3.0
     *@categoryLang
     *@param{*}valueThevaluetocheck.
     *@returns{boolean}Returns`true`if`value`isaset,else`false`.
     *@example
     *
     *_.isSet(newSet);
     *//=>true
     *
     *_.isSet(newWeakSet);
     *//=>false
     */
    varisSet=nodeIsSet?baseUnary(nodeIsSet):baseIsSet;

    /**
     *Checksif`value`isclassifiedasa`String`primitiveorobject.
     *
     *@static
     *@since0.1.0
     *@memberOf_
     *@categoryLang
     *@param{*}valueThevaluetocheck.
     *@returns{boolean}Returns`true`if`value`isastring,else`false`.
     *@example
     *
     *_.isString('abc');
     *//=>true
     *
     *_.isString(1);
     *//=>false
     */
    functionisString(value){
      returntypeofvalue=='string'||
        (!isArray(value)&&isObjectLike(value)&&baseGetTag(value)==stringTag);
    }

    /**
     *Checksif`value`isclassifiedasa`Symbol`primitiveorobject.
     *
     *@static
     *@memberOf_
     *@since4.0.0
     *@categoryLang
     *@param{*}valueThevaluetocheck.
     *@returns{boolean}Returns`true`if`value`isasymbol,else`false`.
     *@example
     *
     *_.isSymbol(Symbol.iterator);
     *//=>true
     *
     *_.isSymbol('abc');
     *//=>false
     */
    functionisSymbol(value){
      returntypeofvalue=='symbol'||
        (isObjectLike(value)&&baseGetTag(value)==symbolTag);
    }

    /**
     *Checksif`value`isclassifiedasatypedarray.
     *
     *@static
     *@memberOf_
     *@since3.0.0
     *@categoryLang
     *@param{*}valueThevaluetocheck.
     *@returns{boolean}Returns`true`if`value`isatypedarray,else`false`.
     *@example
     *
     *_.isTypedArray(newUint8Array);
     *//=>true
     *
     *_.isTypedArray([]);
     *//=>false
     */
    varisTypedArray=nodeIsTypedArray?baseUnary(nodeIsTypedArray):baseIsTypedArray;

    /**
     *Checksif`value`is`undefined`.
     *
     *@static
     *@since0.1.0
     *@memberOf_
     *@categoryLang
     *@param{*}valueThevaluetocheck.
     *@returns{boolean}Returns`true`if`value`is`undefined`,else`false`.
     *@example
     *
     *_.isUndefined(void0);
     *//=>true
     *
     *_.isUndefined(null);
     *//=>false
     */
    functionisUndefined(value){
      returnvalue===undefined;
    }

    /**
     *Checksif`value`isclassifiedasa`WeakMap`object.
     *
     *@static
     *@memberOf_
     *@since4.3.0
     *@categoryLang
     *@param{*}valueThevaluetocheck.
     *@returns{boolean}Returns`true`if`value`isaweakmap,else`false`.
     *@example
     *
     *_.isWeakMap(newWeakMap);
     *//=>true
     *
     *_.isWeakMap(newMap);
     *//=>false
     */
    functionisWeakMap(value){
      returnisObjectLike(value)&&getTag(value)==weakMapTag;
    }

    /**
     *Checksif`value`isclassifiedasa`WeakSet`object.
     *
     *@static
     *@memberOf_
     *@since4.3.0
     *@categoryLang
     *@param{*}valueThevaluetocheck.
     *@returns{boolean}Returns`true`if`value`isaweakset,else`false`.
     *@example
     *
     *_.isWeakSet(newWeakSet);
     *//=>true
     *
     *_.isWeakSet(newSet);
     *//=>false
     */
    functionisWeakSet(value){
      returnisObjectLike(value)&&baseGetTag(value)==weakSetTag;
    }

    /**
     *Checksif`value`islessthan`other`.
     *
     *@static
     *@memberOf_
     *@since3.9.0
     *@categoryLang
     *@param{*}valueThevaluetocompare.
     *@param{*}otherTheothervaluetocompare.
     *@returns{boolean}Returns`true`if`value`islessthan`other`,
     * else`false`.
     *@see_.gt
     *@example
     *
     *_.lt(1,3);
     *//=>true
     *
     *_.lt(3,3);
     *//=>false
     *
     *_.lt(3,1);
     *//=>false
     */
    varlt=createRelationalOperation(baseLt);

    /**
     *Checksif`value`islessthanorequalto`other`.
     *
     *@static
     *@memberOf_
     *@since3.9.0
     *@categoryLang
     *@param{*}valueThevaluetocompare.
     *@param{*}otherTheothervaluetocompare.
     *@returns{boolean}Returns`true`if`value`islessthanorequalto
     * `other`,else`false`.
     *@see_.gte
     *@example
     *
     *_.lte(1,3);
     *//=>true
     *
     *_.lte(3,3);
     *//=>true
     *
     *_.lte(3,1);
     *//=>false
     */
    varlte=createRelationalOperation(function(value,other){
      returnvalue<=other;
    });

    /**
     *Converts`value`toanarray.
     *
     *@static
     *@since0.1.0
     *@memberOf_
     *@categoryLang
     *@param{*}valueThevaluetoconvert.
     *@returns{Array}Returnstheconvertedarray.
     *@example
     *
     *_.toArray({'a':1,'b':2});
     *//=>[1,2]
     *
     *_.toArray('abc');
     *//=>['a','b','c']
     *
     *_.toArray(1);
     *//=>[]
     *
     *_.toArray(null);
     *//=>[]
     */
    functiontoArray(value){
      if(!value){
        return[];
      }
      if(isArrayLike(value)){
        returnisString(value)?stringToArray(value):copyArray(value);
      }
      if(symIterator&&value[symIterator]){
        returniteratorToArray(value[symIterator]());
      }
      vartag=getTag(value),
          func=tag==mapTag?mapToArray:(tag==setTag?setToArray:values);

      returnfunc(value);
    }

    /**
     *Converts`value`toafinitenumber.
     *
     *@static
     *@memberOf_
     *@since4.12.0
     *@categoryLang
     *@param{*}valueThevaluetoconvert.
     *@returns{number}Returnstheconvertednumber.
     *@example
     *
     *_.toFinite(3.2);
     *//=>3.2
     *
     *_.toFinite(Number.MIN_VALUE);
     *//=>5e-324
     *
     *_.toFinite(Infinity);
     *//=>1.7976931348623157e+308
     *
     *_.toFinite('3.2');
     *//=>3.2
     */
    functiontoFinite(value){
      if(!value){
        returnvalue===0?value:0;
      }
      value=toNumber(value);
      if(value===INFINITY||value===-INFINITY){
        varsign=(value<0?-1:1);
        returnsign*MAX_INTEGER;
      }
      returnvalue===value?value:0;
    }

    /**
     *Converts`value`toaninteger.
     *
     ***Note:**Thismethodislooselybasedon
     *[`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
     *
     *@static
     *@memberOf_
     *@since4.0.0
     *@categoryLang
     *@param{*}valueThevaluetoconvert.
     *@returns{number}Returnstheconvertedinteger.
     *@example
     *
     *_.toInteger(3.2);
     *//=>3
     *
     *_.toInteger(Number.MIN_VALUE);
     *//=>0
     *
     *_.toInteger(Infinity);
     *//=>1.7976931348623157e+308
     *
     *_.toInteger('3.2');
     *//=>3
     */
    functiontoInteger(value){
      varresult=toFinite(value),
          remainder=result%1;

      returnresult===result?(remainder?result-remainder:result):0;
    }

    /**
     *Converts`value`toanintegersuitableforuseasthelengthofan
     *array-likeobject.
     *
     ***Note:**Thismethodisbasedon
     *[`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     *@static
     *@memberOf_
     *@since4.0.0
     *@categoryLang
     *@param{*}valueThevaluetoconvert.
     *@returns{number}Returnstheconvertedinteger.
     *@example
     *
     *_.toLength(3.2);
     *//=>3
     *
     *_.toLength(Number.MIN_VALUE);
     *//=>0
     *
     *_.toLength(Infinity);
     *//=>4294967295
     *
     *_.toLength('3.2');
     *//=>3
     */
    functiontoLength(value){
      returnvalue?baseClamp(toInteger(value),0,MAX_ARRAY_LENGTH):0;
    }

    /**
     *Converts`value`toanumber.
     *
     *@static
     *@memberOf_
     *@since4.0.0
     *@categoryLang
     *@param{*}valueThevaluetoprocess.
     *@returns{number}Returnsthenumber.
     *@example
     *
     *_.toNumber(3.2);
     *//=>3.2
     *
     *_.toNumber(Number.MIN_VALUE);
     *//=>5e-324
     *
     *_.toNumber(Infinity);
     *//=>Infinity
     *
     *_.toNumber('3.2');
     *//=>3.2
     */
    functiontoNumber(value){
      if(typeofvalue=='number'){
        returnvalue;
      }
      if(isSymbol(value)){
        returnNAN;
      }
      if(isObject(value)){
        varother=typeofvalue.valueOf=='function'?value.valueOf():value;
        value=isObject(other)?(other+''):other;
      }
      if(typeofvalue!='string'){
        returnvalue===0?value:+value;
      }
      value=value.replace(reTrim,'');
      varisBinary=reIsBinary.test(value);
      return(isBinary||reIsOctal.test(value))
        ?freeParseInt(value.slice(2),isBinary?2:8)
        :(reIsBadHex.test(value)?NAN:+value);
    }

    /**
     *Converts`value`toaplainobjectflatteninginheritedenumerablestring
     *keyedpropertiesof`value`toownpropertiesoftheplainobject.
     *
     *@static
     *@memberOf_
     *@since3.0.0
     *@categoryLang
     *@param{*}valueThevaluetoconvert.
     *@returns{Object}Returnstheconvertedplainobject.
     *@example
     *
     *functionFoo(){
     *  this.b=2;
     *}
     *
     *Foo.prototype.c=3;
     *
     *_.assign({'a':1},newFoo);
     *//=>{'a':1,'b':2}
     *
     *_.assign({'a':1},_.toPlainObject(newFoo));
     *//=>{'a':1,'b':2,'c':3}
     */
    functiontoPlainObject(value){
      returncopyObject(value,keysIn(value));
    }

    /**
     *Converts`value`toasafeinteger.Asafeintegercanbecomparedand
     *representedcorrectly.
     *
     *@static
     *@memberOf_
     *@since4.0.0
     *@categoryLang
     *@param{*}valueThevaluetoconvert.
     *@returns{number}Returnstheconvertedinteger.
     *@example
     *
     *_.toSafeInteger(3.2);
     *//=>3
     *
     *_.toSafeInteger(Number.MIN_VALUE);
     *//=>0
     *
     *_.toSafeInteger(Infinity);
     *//=>9007199254740991
     *
     *_.toSafeInteger('3.2');
     *//=>3
     */
    functiontoSafeInteger(value){
      returnvalue
        ?baseClamp(toInteger(value),-MAX_SAFE_INTEGER,MAX_SAFE_INTEGER)
        :(value===0?value:0);
    }

    /**
     *Converts`value`toastring.Anemptystringisreturnedfor`null`
     *and`undefined`values.Thesignof`-0`ispreserved.
     *
     *@static
     *@memberOf_
     *@since4.0.0
     *@categoryLang
     *@param{*}valueThevaluetoconvert.
     *@returns{string}Returnstheconvertedstring.
     *@example
     *
     *_.toString(null);
     *//=>''
     *
     *_.toString(-0);
     *//=>'-0'
     *
     *_.toString([1,2,3]);
     *//=>'1,2,3'
     */
    functiontoString(value){
      returnvalue==null?'':baseToString(value);
    }

    /*------------------------------------------------------------------------*/

    /**
     *Assignsownenumerablestringkeyedpropertiesofsourceobjectstothe
     *destinationobject.Sourceobjectsareappliedfromlefttoright.
     *Subsequentsourcesoverwritepropertyassignmentsofprevioussources.
     *
     ***Note:**Thismethodmutates`object`andislooselybasedon
     *[`Object.assign`](https://mdn.io/Object/assign).
     *
     *@static
     *@memberOf_
     *@since0.10.0
     *@categoryObject
     *@param{Object}objectThedestinationobject.
     *@param{...Object}[sources]Thesourceobjects.
     *@returns{Object}Returns`object`.
     *@see_.assignIn
     *@example
     *
     *functionFoo(){
     *  this.a=1;
     *}
     *
     *functionBar(){
     *  this.c=3;
     *}
     *
     *Foo.prototype.b=2;
     *Bar.prototype.d=4;
     *
     *_.assign({'a':0},newFoo,newBar);
     *//=>{'a':1,'c':3}
     */
    varassign=createAssigner(function(object,source){
      if(isPrototype(source)||isArrayLike(source)){
        copyObject(source,keys(source),object);
        return;
      }
      for(varkeyinsource){
        if(hasOwnProperty.call(source,key)){
          assignValue(object,key,source[key]);
        }
      }
    });

    /**
     *Thismethodislike`_.assign`exceptthatititeratesoverownand
     *inheritedsourceproperties.
     *
     ***Note:**Thismethodmutates`object`.
     *
     *@static
     *@memberOf_
     *@since4.0.0
     *@aliasextend
     *@categoryObject
     *@param{Object}objectThedestinationobject.
     *@param{...Object}[sources]Thesourceobjects.
     *@returns{Object}Returns`object`.
     *@see_.assign
     *@example
     *
     *functionFoo(){
     *  this.a=1;
     *}
     *
     *functionBar(){
     *  this.c=3;
     *}
     *
     *Foo.prototype.b=2;
     *Bar.prototype.d=4;
     *
     *_.assignIn({'a':0},newFoo,newBar);
     *//=>{'a':1,'b':2,'c':3,'d':4}
     */
    varassignIn=createAssigner(function(object,source){
      copyObject(source,keysIn(source),object);
    });

    /**
     *Thismethodislike`_.assignIn`exceptthatitaccepts`customizer`
     *whichisinvokedtoproducetheassignedvalues.If`customizer`returns
     *`undefined`,assignmentishandledbythemethodinstead.The`customizer`
     *isinvokedwithfivearguments:(objValue,srcValue,key,object,source).
     *
     ***Note:**Thismethodmutates`object`.
     *
     *@static
     *@memberOf_
     *@since4.0.0
     *@aliasextendWith
     *@categoryObject
     *@param{Object}objectThedestinationobject.
     *@param{...Object}sourcesThesourceobjects.
     *@param{Function}[customizer]Thefunctiontocustomizeassignedvalues.
     *@returns{Object}Returns`object`.
     *@see_.assignWith
     *@example
     *
     *functioncustomizer(objValue,srcValue){
     *  return_.isUndefined(objValue)?srcValue:objValue;
     *}
     *
     *vardefaults=_.partialRight(_.assignInWith,customizer);
     *
     *defaults({'a':1},{'b':2},{'a':3});
     *//=>{'a':1,'b':2}
     */
    varassignInWith=createAssigner(function(object,source,srcIndex,customizer){
      copyObject(source,keysIn(source),object,customizer);
    });

    /**
     *Thismethodislike`_.assign`exceptthatitaccepts`customizer`
     *whichisinvokedtoproducetheassignedvalues.If`customizer`returns
     *`undefined`,assignmentishandledbythemethodinstead.The`customizer`
     *isinvokedwithfivearguments:(objValue,srcValue,key,object,source).
     *
     ***Note:**Thismethodmutates`object`.
     *
     *@static
     *@memberOf_
     *@since4.0.0
     *@categoryObject
     *@param{Object}objectThedestinationobject.
     *@param{...Object}sourcesThesourceobjects.
     *@param{Function}[customizer]Thefunctiontocustomizeassignedvalues.
     *@returns{Object}Returns`object`.
     *@see_.assignInWith
     *@example
     *
     *functioncustomizer(objValue,srcValue){
     *  return_.isUndefined(objValue)?srcValue:objValue;
     *}
     *
     *vardefaults=_.partialRight(_.assignWith,customizer);
     *
     *defaults({'a':1},{'b':2},{'a':3});
     *//=>{'a':1,'b':2}
     */
    varassignWith=createAssigner(function(object,source,srcIndex,customizer){
      copyObject(source,keys(source),object,customizer);
    });

    /**
     *Createsanarrayofvaluescorrespondingto`paths`of`object`.
     *
     *@static
     *@memberOf_
     *@since1.0.0
     *@categoryObject
     *@param{Object}objectTheobjecttoiterateover.
     *@param{...(string|string[])}[paths]Thepropertypathstopick.
     *@returns{Array}Returnsthepickedvalues.
     *@example
     *
     *varobject={'a':[{'b':{'c':3}},4]};
     *
     *_.at(object,['a[0].b.c','a[1]']);
     *//=>[3,4]
     */
    varat=flatRest(baseAt);

    /**
     *Createsanobjectthatinheritsfromthe`prototype`object.Ifa
     *`properties`objectisgiven,itsownenumerablestringkeyedproperties
     *areassignedtothecreatedobject.
     *
     *@static
     *@memberOf_
     *@since2.3.0
     *@categoryObject
     *@param{Object}prototypeTheobjecttoinheritfrom.
     *@param{Object}[properties]Thepropertiestoassigntotheobject.
     *@returns{Object}Returnsthenewobject.
     *@example
     *
     *functionShape(){
     *  this.x=0;
     *  this.y=0;
     *}
     *
     *functionCircle(){
     *  Shape.call(this);
     *}
     *
     *Circle.prototype=_.create(Shape.prototype,{
     *  'constructor':Circle
     *});
     *
     *varcircle=newCircle;
     *circleinstanceofCircle;
     *//=>true
     *
     *circleinstanceofShape;
     *//=>true
     */
    functioncreate(prototype,properties){
      varresult=baseCreate(prototype);
      returnproperties==null?result:baseAssign(result,properties);
    }

    /**
     *Assignsownandinheritedenumerablestringkeyedpropertiesofsource
     *objectstothedestinationobjectforalldestinationpropertiesthat
     *resolveto`undefined`.Sourceobjectsareappliedfromlefttoright.
     *Onceapropertyisset,additionalvaluesofthesamepropertyareignored.
     *
     ***Note:**Thismethodmutates`object`.
     *
     *@static
     *@since0.1.0
     *@memberOf_
     *@categoryObject
     *@param{Object}objectThedestinationobject.
     *@param{...Object}[sources]Thesourceobjects.
     *@returns{Object}Returns`object`.
     *@see_.defaultsDeep
     *@example
     *
     *_.defaults({'a':1},{'b':2},{'a':3});
     *//=>{'a':1,'b':2}
     */
    vardefaults=baseRest(function(args){
      args.push(undefined,customDefaultsAssignIn);
      returnapply(assignInWith,undefined,args);
    });

    /**
     *Thismethodislike`_.defaults`exceptthatitrecursivelyassigns
     *defaultproperties.
     *
     ***Note:**Thismethodmutates`object`.
     *
     *@static
     *@memberOf_
     *@since3.10.0
     *@categoryObject
     *@param{Object}objectThedestinationobject.
     *@param{...Object}[sources]Thesourceobjects.
     *@returns{Object}Returns`object`.
     *@see_.defaults
     *@example
     *
     *_.defaultsDeep({'a':{'b':2}},{'a':{'b':1,'c':3}});
     *//=>{'a':{'b':2,'c':3}}
     */
    vardefaultsDeep=baseRest(function(args){
      args.push(undefined,customDefaultsMerge);
      returnapply(mergeWith,undefined,args);
    });

    /**
     *Thismethodislike`_.find`exceptthatitreturnsthekeyofthefirst
     *element`predicate`returnstruthyforinsteadoftheelementitself.
     *
     *@static
     *@memberOf_
     *@since1.1.0
     *@categoryObject
     *@param{Object}objectTheobjecttoinspect.
     *@param{Function}[predicate=_.identity]Thefunctioninvokedperiteration.
     *@returns{string|undefined}Returnsthekeyofthematchedelement,
     * else`undefined`.
     *@example
     *
     *varusers={
     *  'barney': {'age':36,'active':true},
     *  'fred':   {'age':40,'active':false},
     *  'pebbles':{'age':1, 'active':true}
     *};
     *
     *_.findKey(users,function(o){returno.age<40;});
     *//=>'barney'(iterationorderisnotguaranteed)
     *
     *//The`_.matches`iterateeshorthand.
     *_.findKey(users,{'age':1,'active':true});
     *//=>'pebbles'
     *
     *//The`_.matchesProperty`iterateeshorthand.
     *_.findKey(users,['active',false]);
     *//=>'fred'
     *
     *//The`_.property`iterateeshorthand.
     *_.findKey(users,'active');
     *//=>'barney'
     */
    functionfindKey(object,predicate){
      returnbaseFindKey(object,getIteratee(predicate,3),baseForOwn);
    }

    /**
     *Thismethodislike`_.findKey`exceptthatititeratesoverelementsof
     *acollectionintheoppositeorder.
     *
     *@static
     *@memberOf_
     *@since2.0.0
     *@categoryObject
     *@param{Object}objectTheobjecttoinspect.
     *@param{Function}[predicate=_.identity]Thefunctioninvokedperiteration.
     *@returns{string|undefined}Returnsthekeyofthematchedelement,
     * else`undefined`.
     *@example
     *
     *varusers={
     *  'barney': {'age':36,'active':true},
     *  'fred':   {'age':40,'active':false},
     *  'pebbles':{'age':1, 'active':true}
     *};
     *
     *_.findLastKey(users,function(o){returno.age<40;});
     *//=>returns'pebbles'assuming`_.findKey`returns'barney'
     *
     *//The`_.matches`iterateeshorthand.
     *_.findLastKey(users,{'age':36,'active':true});
     *//=>'barney'
     *
     *//The`_.matchesProperty`iterateeshorthand.
     *_.findLastKey(users,['active',false]);
     *//=>'fred'
     *
     *//The`_.property`iterateeshorthand.
     *_.findLastKey(users,'active');
     *//=>'pebbles'
     */
    functionfindLastKey(object,predicate){
      returnbaseFindKey(object,getIteratee(predicate,3),baseForOwnRight);
    }

    /**
     *Iteratesoverownandinheritedenumerablestringkeyedpropertiesofan
     *objectandinvokes`iteratee`foreachproperty.Theiterateeisinvoked
     *withthreearguments:(value,key,object).Iterateefunctionsmayexit
     *iterationearlybyexplicitlyreturning`false`.
     *
     *@static
     *@memberOf_
     *@since0.3.0
     *@categoryObject
     *@param{Object}objectTheobjecttoiterateover.
     *@param{Function}[iteratee=_.identity]Thefunctioninvokedperiteration.
     *@returns{Object}Returns`object`.
     *@see_.forInRight
     *@example
     *
     *functionFoo(){
     *  this.a=1;
     *  this.b=2;
     *}
     *
     *Foo.prototype.c=3;
     *
     *_.forIn(newFoo,function(value,key){
     *  console.log(key);
     *});
     *//=>Logs'a','b',then'c'(iterationorderisnotguaranteed).
     */
    functionforIn(object,iteratee){
      returnobject==null
        ?object
        :baseFor(object,getIteratee(iteratee,3),keysIn);
    }

    /**
     *Thismethodislike`_.forIn`exceptthatititeratesoverpropertiesof
     *`object`intheoppositeorder.
     *
     *@static
     *@memberOf_
     *@since2.0.0
     *@categoryObject
     *@param{Object}objectTheobjecttoiterateover.
     *@param{Function}[iteratee=_.identity]Thefunctioninvokedperiteration.
     *@returns{Object}Returns`object`.
     *@see_.forIn
     *@example
     *
     *functionFoo(){
     *  this.a=1;
     *  this.b=2;
     *}
     *
     *Foo.prototype.c=3;
     *
     *_.forInRight(newFoo,function(value,key){
     *  console.log(key);
     *});
     *//=>Logs'c','b',then'a'assuming`_.forIn`logs'a','b',then'c'.
     */
    functionforInRight(object,iteratee){
      returnobject==null
        ?object
        :baseForRight(object,getIteratee(iteratee,3),keysIn);
    }

    /**
     *Iteratesoverownenumerablestringkeyedpropertiesofanobjectand
     *invokes`iteratee`foreachproperty.Theiterateeisinvokedwiththree
     *arguments:(value,key,object).Iterateefunctionsmayexititeration
     *earlybyexplicitlyreturning`false`.
     *
     *@static
     *@memberOf_
     *@since0.3.0
     *@categoryObject
     *@param{Object}objectTheobjecttoiterateover.
     *@param{Function}[iteratee=_.identity]Thefunctioninvokedperiteration.
     *@returns{Object}Returns`object`.
     *@see_.forOwnRight
     *@example
     *
     *functionFoo(){
     *  this.a=1;
     *  this.b=2;
     *}
     *
     *Foo.prototype.c=3;
     *
     *_.forOwn(newFoo,function(value,key){
     *  console.log(key);
     *});
     *//=>Logs'a'then'b'(iterationorderisnotguaranteed).
     */
    functionforOwn(object,iteratee){
      returnobject&&baseForOwn(object,getIteratee(iteratee,3));
    }

    /**
     *Thismethodislike`_.forOwn`exceptthatititeratesoverpropertiesof
     *`object`intheoppositeorder.
     *
     *@static
     *@memberOf_
     *@since2.0.0
     *@categoryObject
     *@param{Object}objectTheobjecttoiterateover.
     *@param{Function}[iteratee=_.identity]Thefunctioninvokedperiteration.
     *@returns{Object}Returns`object`.
     *@see_.forOwn
     *@example
     *
     *functionFoo(){
     *  this.a=1;
     *  this.b=2;
     *}
     *
     *Foo.prototype.c=3;
     *
     *_.forOwnRight(newFoo,function(value,key){
     *  console.log(key);
     *});
     *//=>Logs'b'then'a'assuming`_.forOwn`logs'a'then'b'.
     */
    functionforOwnRight(object,iteratee){
      returnobject&&baseForOwnRight(object,getIteratee(iteratee,3));
    }

    /**
     *Createsanarrayoffunctionpropertynamesfromownenumerableproperties
     *of`object`.
     *
     *@static
     *@since0.1.0
     *@memberOf_
     *@categoryObject
     *@param{Object}objectTheobjecttoinspect.
     *@returns{Array}Returnsthefunctionnames.
     *@see_.functionsIn
     *@example
     *
     *functionFoo(){
     *  this.a=_.constant('a');
     *  this.b=_.constant('b');
     *}
     *
     *Foo.prototype.c=_.constant('c');
     *
     *_.functions(newFoo);
     *//=>['a','b']
     */
    functionfunctions(object){
      returnobject==null?[]:baseFunctions(object,keys(object));
    }

    /**
     *Createsanarrayoffunctionpropertynamesfromownandinherited
     *enumerablepropertiesof`object`.
     *
     *@static
     *@memberOf_
     *@since4.0.0
     *@categoryObject
     *@param{Object}objectTheobjecttoinspect.
     *@returns{Array}Returnsthefunctionnames.
     *@see_.functions
     *@example
     *
     *functionFoo(){
     *  this.a=_.constant('a');
     *  this.b=_.constant('b');
     *}
     *
     *Foo.prototype.c=_.constant('c');
     *
     *_.functionsIn(newFoo);
     *//=>['a','b','c']
     */
    functionfunctionsIn(object){
      returnobject==null?[]:baseFunctions(object,keysIn(object));
    }

    /**
     *Getsthevalueat`path`of`object`.Iftheresolvedvalueis
     *`undefined`,the`defaultValue`isreturnedinitsplace.
     *
     *@static
     *@memberOf_
     *@since3.7.0
     *@categoryObject
     *@param{Object}objectTheobjecttoquery.
     *@param{Array|string}pathThepathofthepropertytoget.
     *@param{*}[defaultValue]Thevaluereturnedfor`undefined`resolvedvalues.
     *@returns{*}Returnstheresolvedvalue.
     *@example
     *
     *varobject={'a':[{'b':{'c':3}}]};
     *
     *_.get(object,'a[0].b.c');
     *//=>3
     *
     *_.get(object,['a','0','b','c']);
     *//=>3
     *
     *_.get(object,'a.b.c','default');
     *//=>'default'
     */
    functionget(object,path,defaultValue){
      varresult=object==null?undefined:baseGet(object,path);
      returnresult===undefined?defaultValue:result;
    }

    /**
     *Checksif`path`isadirectpropertyof`object`.
     *
     *@static
     *@since0.1.0
     *@memberOf_
     *@categoryObject
     *@param{Object}objectTheobjecttoquery.
     *@param{Array|string}pathThepathtocheck.
     *@returns{boolean}Returns`true`if`path`exists,else`false`.
     *@example
     *
     *varobject={'a':{'b':2}};
     *varother=_.create({'a':_.create({'b':2})});
     *
     *_.has(object,'a');
     *//=>true
     *
     *_.has(object,'a.b');
     *//=>true
     *
     *_.has(object,['a','b']);
     *//=>true
     *
     *_.has(other,'a');
     *//=>false
     */
    functionhas(object,path){
      returnobject!=null&&hasPath(object,path,baseHas);
    }

    /**
     *Checksif`path`isadirectorinheritedpropertyof`object`.
     *
     *@static
     *@memberOf_
     *@since4.0.0
     *@categoryObject
     *@param{Object}objectTheobjecttoquery.
     *@param{Array|string}pathThepathtocheck.
     *@returns{boolean}Returns`true`if`path`exists,else`false`.
     *@example
     *
     *varobject=_.create({'a':_.create({'b':2})});
     *
     *_.hasIn(object,'a');
     *//=>true
     *
     *_.hasIn(object,'a.b');
     *//=>true
     *
     *_.hasIn(object,['a','b']);
     *//=>true
     *
     *_.hasIn(object,'b');
     *//=>false
     */
    functionhasIn(object,path){
      returnobject!=null&&hasPath(object,path,baseHasIn);
    }

    /**
     *Createsanobjectcomposedoftheinvertedkeysandvaluesof`object`.
     *If`object`containsduplicatevalues,subsequentvaluesoverwrite
     *propertyassignmentsofpreviousvalues.
     *
     *@static
     *@memberOf_
     *@since0.7.0
     *@categoryObject
     *@param{Object}objectTheobjecttoinvert.
     *@returns{Object}Returnsthenewinvertedobject.
     *@example
     *
     *varobject={'a':1,'b':2,'c':1};
     *
     *_.invert(object);
     *//=>{'1':'c','2':'b'}
     */
    varinvert=createInverter(function(result,value,key){
      result[value]=key;
    },constant(identity));

    /**
     *Thismethodislike`_.invert`exceptthattheinvertedobjectisgenerated
     *fromtheresultsofrunningeachelementof`object`thru`iteratee`.The
     *correspondinginvertedvalueofeachinvertedkeyisanarrayofkeys
     *responsibleforgeneratingtheinvertedvalue.Theiterateeisinvoked
     *withoneargument:(value).
     *
     *@static
     *@memberOf_
     *@since4.1.0
     *@categoryObject
     *@param{Object}objectTheobjecttoinvert.
     *@param{Function}[iteratee=_.identity]Theiterateeinvokedperelement.
     *@returns{Object}Returnsthenewinvertedobject.
     *@example
     *
     *varobject={'a':1,'b':2,'c':1};
     *
     *_.invertBy(object);
     *//=>{'1':['a','c'],'2':['b']}
     *
     *_.invertBy(object,function(value){
     *  return'group'+value;
     *});
     *//=>{'group1':['a','c'],'group2':['b']}
     */
    varinvertBy=createInverter(function(result,value,key){
      if(hasOwnProperty.call(result,value)){
        result[value].push(key);
      }else{
        result[value]=[key];
      }
    },getIteratee);

    /**
     *Invokesthemethodat`path`of`object`.
     *
     *@static
     *@memberOf_
     *@since4.0.0
     *@categoryObject
     *@param{Object}objectTheobjecttoquery.
     *@param{Array|string}pathThepathofthemethodtoinvoke.
     *@param{...*}[args]Theargumentstoinvokethemethodwith.
     *@returns{*}Returnstheresultoftheinvokedmethod.
     *@example
     *
     *varobject={'a':[{'b':{'c':[1,2,3,4]}}]};
     *
     *_.invoke(object,'a[0].b.c.slice',1,3);
     *//=>[2,3]
     */
    varinvoke=baseRest(baseInvoke);

    /**
     *Createsanarrayoftheownenumerablepropertynamesof`object`.
     *
     ***Note:**Non-objectvaluesarecoercedtoobjects.Seethe
     *[ESspec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     *formoredetails.
     *
     *@static
     *@since0.1.0
     *@memberOf_
     *@categoryObject
     *@param{Object}objectTheobjecttoquery.
     *@returns{Array}Returnsthearrayofpropertynames.
     *@example
     *
     *functionFoo(){
     *  this.a=1;
     *  this.b=2;
     *}
     *
     *Foo.prototype.c=3;
     *
     *_.keys(newFoo);
     *//=>['a','b'](iterationorderisnotguaranteed)
     *
     *_.keys('hi');
     *//=>['0','1']
     */
    functionkeys(object){
      returnisArrayLike(object)?arrayLikeKeys(object):baseKeys(object);
    }

    /**
     *Createsanarrayoftheownandinheritedenumerablepropertynamesof`object`.
     *
     ***Note:**Non-objectvaluesarecoercedtoobjects.
     *
     *@static
     *@memberOf_
     *@since3.0.0
     *@categoryObject
     *@param{Object}objectTheobjecttoquery.
     *@returns{Array}Returnsthearrayofpropertynames.
     *@example
     *
     *functionFoo(){
     *  this.a=1;
     *  this.b=2;
     *}
     *
     *Foo.prototype.c=3;
     *
     *_.keysIn(newFoo);
     *//=>['a','b','c'](iterationorderisnotguaranteed)
     */
    functionkeysIn(object){
      returnisArrayLike(object)?arrayLikeKeys(object,true):baseKeysIn(object);
    }

    /**
     *Theoppositeof`_.mapValues`;thismethodcreatesanobjectwiththe
     *samevaluesas`object`andkeysgeneratedbyrunningeachownenumerable
     *stringkeyedpropertyof`object`thru`iteratee`.Theiterateeisinvoked
     *withthreearguments:(value,key,object).
     *
     *@static
     *@memberOf_
     *@since3.8.0
     *@categoryObject
     *@param{Object}objectTheobjecttoiterateover.
     *@param{Function}[iteratee=_.identity]Thefunctioninvokedperiteration.
     *@returns{Object}Returnsthenewmappedobject.
     *@see_.mapValues
     *@example
     *
     *_.mapKeys({'a':1,'b':2},function(value,key){
     *  returnkey+value;
     *});
     *//=>{'a1':1,'b2':2}
     */
    functionmapKeys(object,iteratee){
      varresult={};
      iteratee=getIteratee(iteratee,3);

      baseForOwn(object,function(value,key,object){
        baseAssignValue(result,iteratee(value,key,object),value);
      });
      returnresult;
    }

    /**
     *Createsanobjectwiththesamekeysas`object`andvaluesgenerated
     *byrunningeachownenumerablestringkeyedpropertyof`object`thru
     *`iteratee`.Theiterateeisinvokedwiththreearguments:
     *(value,key,object).
     *
     *@static
     *@memberOf_
     *@since2.4.0
     *@categoryObject
     *@param{Object}objectTheobjecttoiterateover.
     *@param{Function}[iteratee=_.identity]Thefunctioninvokedperiteration.
     *@returns{Object}Returnsthenewmappedobject.
     *@see_.mapKeys
     *@example
     *
     *varusers={
     *  'fred':   {'user':'fred',   'age':40},
     *  'pebbles':{'user':'pebbles','age':1}
     *};
     *
     *_.mapValues(users,function(o){returno.age;});
     *//=>{'fred':40,'pebbles':1}(iterationorderisnotguaranteed)
     *
     *//The`_.property`iterateeshorthand.
     *_.mapValues(users,'age');
     *//=>{'fred':40,'pebbles':1}(iterationorderisnotguaranteed)
     */
    functionmapValues(object,iteratee){
      varresult={};
      iteratee=getIteratee(iteratee,3);

      baseForOwn(object,function(value,key,object){
        baseAssignValue(result,key,iteratee(value,key,object));
      });
      returnresult;
    }

    /**
     *Thismethodislike`_.assign`exceptthatitrecursivelymergesownand
     *inheritedenumerablestringkeyedpropertiesofsourceobjectsintothe
     *destinationobject.Sourcepropertiesthatresolveto`undefined`are
     *skippedifadestinationvalueexists.Arrayandplainobjectproperties
     *aremergedrecursively.Otherobjectsandvaluetypesareoverriddenby
     *assignment.Sourceobjectsareappliedfromlefttoright.Subsequent
     *sourcesoverwritepropertyassignmentsofprevioussources.
     *
     ***Note:**Thismethodmutates`object`.
     *
     *@static
     *@memberOf_
     *@since0.5.0
     *@categoryObject
     *@param{Object}objectThedestinationobject.
     *@param{...Object}[sources]Thesourceobjects.
     *@returns{Object}Returns`object`.
     *@example
     *
     *varobject={
     *  'a':[{'b':2},{'d':4}]
     *};
     *
     *varother={
     *  'a':[{'c':3},{'e':5}]
     *};
     *
     *_.merge(object,other);
     *//=>{'a':[{'b':2,'c':3},{'d':4,'e':5}]}
     */
    varmerge=createAssigner(function(object,source,srcIndex){
      baseMerge(object,source,srcIndex);
    });

    /**
     *Thismethodislike`_.merge`exceptthatitaccepts`customizer`which
     *isinvokedtoproducethemergedvaluesofthedestinationandsource
     *properties.If`customizer`returns`undefined`,mergingishandledbythe
     *methodinstead.The`customizer`isinvokedwithsixarguments:
     *(objValue,srcValue,key,object,source,stack).
     *
     ***Note:**Thismethodmutates`object`.
     *
     *@static
     *@memberOf_
     *@since4.0.0
     *@categoryObject
     *@param{Object}objectThedestinationobject.
     *@param{...Object}sourcesThesourceobjects.
     *@param{Function}customizerThefunctiontocustomizeassignedvalues.
     *@returns{Object}Returns`object`.
     *@example
     *
     *functioncustomizer(objValue,srcValue){
     *  if(_.isArray(objValue)){
     *    returnobjValue.concat(srcValue);
     *  }
     *}
     *
     *varobject={'a':[1],'b':[2]};
     *varother={'a':[3],'b':[4]};
     *
     *_.mergeWith(object,other,customizer);
     *//=>{'a':[1,3],'b':[2,4]}
     */
    varmergeWith=createAssigner(function(object,source,srcIndex,customizer){
      baseMerge(object,source,srcIndex,customizer);
    });

    /**
     *Theoppositeof`_.pick`;thismethodcreatesanobjectcomposedofthe
     *ownandinheritedenumerablepropertypathsof`object`thatarenotomitted.
     *
     ***Note:**Thismethodisconsiderablyslowerthan`_.pick`.
     *
     *@static
     *@since0.1.0
     *@memberOf_
     *@categoryObject
     *@param{Object}objectThesourceobject.
     *@param{...(string|string[])}[paths]Thepropertypathstoomit.
     *@returns{Object}Returnsthenewobject.
     *@example
     *
     *varobject={'a':1,'b':'2','c':3};
     *
     *_.omit(object,['a','c']);
     *//=>{'b':'2'}
     */
    varomit=flatRest(function(object,paths){
      varresult={};
      if(object==null){
        returnresult;
      }
      varisDeep=false;
      paths=arrayMap(paths,function(path){
        path=castPath(path,object);
        isDeep||(isDeep=path.length>1);
        returnpath;
      });
      copyObject(object,getAllKeysIn(object),result);
      if(isDeep){
        result=baseClone(result,CLONE_DEEP_FLAG|CLONE_FLAT_FLAG|CLONE_SYMBOLS_FLAG,customOmitClone);
      }
      varlength=paths.length;
      while(length--){
        baseUnset(result,paths[length]);
      }
      returnresult;
    });

    /**
     *Theoppositeof`_.pickBy`;thismethodcreatesanobjectcomposedof
     *theownandinheritedenumerablestringkeyedpropertiesof`object`that
     *`predicate`doesn'treturntruthyfor.Thepredicateisinvokedwithtwo
     *arguments:(value,key).
     *
     *@static
     *@memberOf_
     *@since4.0.0
     *@categoryObject
     *@param{Object}objectThesourceobject.
     *@param{Function}[predicate=_.identity]Thefunctioninvokedperproperty.
     *@returns{Object}Returnsthenewobject.
     *@example
     *
     *varobject={'a':1,'b':'2','c':3};
     *
     *_.omitBy(object,_.isNumber);
     *//=>{'b':'2'}
     */
    functionomitBy(object,predicate){
      returnpickBy(object,negate(getIteratee(predicate)));
    }

    /**
     *Createsanobjectcomposedofthepicked`object`properties.
     *
     *@static
     *@since0.1.0
     *@memberOf_
     *@categoryObject
     *@param{Object}objectThesourceobject.
     *@param{...(string|string[])}[paths]Thepropertypathstopick.
     *@returns{Object}Returnsthenewobject.
     *@example
     *
     *varobject={'a':1,'b':'2','c':3};
     *
     *_.pick(object,['a','c']);
     *//=>{'a':1,'c':3}
     */
    varpick=flatRest(function(object,paths){
      returnobject==null?{}:basePick(object,paths);
    });

    /**
     *Createsanobjectcomposedofthe`object`properties`predicate`returns
     *truthyfor.Thepredicateisinvokedwithtwoarguments:(value,key).
     *
     *@static
     *@memberOf_
     *@since4.0.0
     *@categoryObject
     *@param{Object}objectThesourceobject.
     *@param{Function}[predicate=_.identity]Thefunctioninvokedperproperty.
     *@returns{Object}Returnsthenewobject.
     *@example
     *
     *varobject={'a':1,'b':'2','c':3};
     *
     *_.pickBy(object,_.isNumber);
     *//=>{'a':1,'c':3}
     */
    functionpickBy(object,predicate){
      if(object==null){
        return{};
      }
      varprops=arrayMap(getAllKeysIn(object),function(prop){
        return[prop];
      });
      predicate=getIteratee(predicate);
      returnbasePickBy(object,props,function(value,path){
        returnpredicate(value,path[0]);
      });
    }

    /**
     *Thismethodislike`_.get`exceptthatiftheresolvedvalueisa
     *functionit'sinvokedwiththe`this`bindingofitsparentobjectand
     *itsresultisreturned.
     *
     *@static
     *@since0.1.0
     *@memberOf_
     *@categoryObject
     *@param{Object}objectTheobjecttoquery.
     *@param{Array|string}pathThepathofthepropertytoresolve.
     *@param{*}[defaultValue]Thevaluereturnedfor`undefined`resolvedvalues.
     *@returns{*}Returnstheresolvedvalue.
     *@example
     *
     *varobject={'a':[{'b':{'c1':3,'c2':_.constant(4)}}]};
     *
     *_.result(object,'a[0].b.c1');
     *//=>3
     *
     *_.result(object,'a[0].b.c2');
     *//=>4
     *
     *_.result(object,'a[0].b.c3','default');
     *//=>'default'
     *
     *_.result(object,'a[0].b.c3',_.constant('default'));
     *//=>'default'
     */
    functionresult(object,path,defaultValue){
      path=castPath(path,object);

      varindex=-1,
          length=path.length;

      //Ensuretheloopisenteredwhenpathisempty.
      if(!length){
        length=1;
        object=undefined;
      }
      while(++index<length){
        varvalue=object==null?undefined:object[toKey(path[index])];
        if(value===undefined){
          index=length;
          value=defaultValue;
        }
        object=isFunction(value)?value.call(object):value;
      }
      returnobject;
    }

    /**
     *Setsthevalueat`path`of`object`.Ifaportionof`path`doesn'texist,
     *it'screated.Arraysarecreatedformissingindexpropertieswhileobjects
     *arecreatedforallothermissingproperties.Use`_.setWith`tocustomize
     *`path`creation.
     *
     ***Note:**Thismethodmutates`object`.
     *
     *@static
     *@memberOf_
     *@since3.7.0
     *@categoryObject
     *@param{Object}objectTheobjecttomodify.
     *@param{Array|string}pathThepathofthepropertytoset.
     *@param{*}valueThevaluetoset.
     *@returns{Object}Returns`object`.
     *@example
     *
     *varobject={'a':[{'b':{'c':3}}]};
     *
     *_.set(object,'a[0].b.c',4);
     *console.log(object.a[0].b.c);
     *//=>4
     *
     *_.set(object,['x','0','y','z'],5);
     *console.log(object.x[0].y.z);
     *//=>5
     */
    functionset(object,path,value){
      returnobject==null?object:baseSet(object,path,value);
    }

    /**
     *Thismethodislike`_.set`exceptthatitaccepts`customizer`whichis
     *invokedtoproducetheobjectsof`path`. If`customizer`returns`undefined`
     *pathcreationishandledbythemethodinstead.The`customizer`isinvoked
     *withthreearguments:(nsValue,key,nsObject).
     *
     ***Note:**Thismethodmutates`object`.
     *
     *@static
     *@memberOf_
     *@since4.0.0
     *@categoryObject
     *@param{Object}objectTheobjecttomodify.
     *@param{Array|string}pathThepathofthepropertytoset.
     *@param{*}valueThevaluetoset.
     *@param{Function}[customizer]Thefunctiontocustomizeassignedvalues.
     *@returns{Object}Returns`object`.
     *@example
     *
     *varobject={};
     *
     *_.setWith(object,'[0][1]','a',Object);
     *//=>{'0':{'1':'a'}}
     */
    functionsetWith(object,path,value,customizer){
      customizer=typeofcustomizer=='function'?customizer:undefined;
      returnobject==null?object:baseSet(object,path,value,customizer);
    }

    /**
     *Createsanarrayofownenumerablestringkeyed-valuepairsfor`object`
     *whichcanbeconsumedby`_.fromPairs`.If`object`isamaporset,its
     *entriesarereturned.
     *
     *@static
     *@memberOf_
     *@since4.0.0
     *@aliasentries
     *@categoryObject
     *@param{Object}objectTheobjecttoquery.
     *@returns{Array}Returnsthekey-valuepairs.
     *@example
     *
     *functionFoo(){
     *  this.a=1;
     *  this.b=2;
     *}
     *
     *Foo.prototype.c=3;
     *
     *_.toPairs(newFoo);
     *//=>[['a',1],['b',2]](iterationorderisnotguaranteed)
     */
    vartoPairs=createToPairs(keys);

    /**
     *Createsanarrayofownandinheritedenumerablestringkeyed-valuepairs
     *for`object`whichcanbeconsumedby`_.fromPairs`.If`object`isamap
     *orset,itsentriesarereturned.
     *
     *@static
     *@memberOf_
     *@since4.0.0
     *@aliasentriesIn
     *@categoryObject
     *@param{Object}objectTheobjecttoquery.
     *@returns{Array}Returnsthekey-valuepairs.
     *@example
     *
     *functionFoo(){
     *  this.a=1;
     *  this.b=2;
     *}
     *
     *Foo.prototype.c=3;
     *
     *_.toPairsIn(newFoo);
     *//=>[['a',1],['b',2],['c',3]](iterationorderisnotguaranteed)
     */
    vartoPairsIn=createToPairs(keysIn);

    /**
     *Analternativeto`_.reduce`;thismethodtransforms`object`toanew
     *`accumulator`objectwhichistheresultofrunningeachofitsown
     *enumerablestringkeyedpropertiesthru`iteratee`,witheachinvocation
     *potentiallymutatingthe`accumulator`object.If`accumulator`isnot
     *provided,anewobjectwiththesame`[[Prototype]]`willbeused.The
     *iterateeisinvokedwithfourarguments:(accumulator,value,key,object).
     *Iterateefunctionsmayexititerationearlybyexplicitlyreturning`false`.
     *
     *@static
     *@memberOf_
     *@since1.3.0
     *@categoryObject
     *@param{Object}objectTheobjecttoiterateover.
     *@param{Function}[iteratee=_.identity]Thefunctioninvokedperiteration.
     *@param{*}[accumulator]Thecustomaccumulatorvalue.
     *@returns{*}Returnstheaccumulatedvalue.
     *@example
     *
     *_.transform([2,3,4],function(result,n){
     *  result.push(n*=n);
     *  returnn%2==0;
     *},[]);
     *//=>[4,9]
     *
     *_.transform({'a':1,'b':2,'c':1},function(result,value,key){
     *  (result[value]||(result[value]=[])).push(key);
     *},{});
     *//=>{'1':['a','c'],'2':['b']}
     */
    functiontransform(object,iteratee,accumulator){
      varisArr=isArray(object),
          isArrLike=isArr||isBuffer(object)||isTypedArray(object);

      iteratee=getIteratee(iteratee,4);
      if(accumulator==null){
        varCtor=object&&object.constructor;
        if(isArrLike){
          accumulator=isArr?newCtor:[];
        }
        elseif(isObject(object)){
          accumulator=isFunction(Ctor)?baseCreate(getPrototype(object)):{};
        }
        else{
          accumulator={};
        }
      }
      (isArrLike?arrayEach:baseForOwn)(object,function(value,index,object){
        returniteratee(accumulator,value,index,object);
      });
      returnaccumulator;
    }

    /**
     *Removesthepropertyat`path`of`object`.
     *
     ***Note:**Thismethodmutates`object`.
     *
     *@static
     *@memberOf_
     *@since4.0.0
     *@categoryObject
     *@param{Object}objectTheobjecttomodify.
     *@param{Array|string}pathThepathofthepropertytounset.
     *@returns{boolean}Returns`true`ifthepropertyisdeleted,else`false`.
     *@example
     *
     *varobject={'a':[{'b':{'c':7}}]};
     *_.unset(object,'a[0].b.c');
     *//=>true
     *
     *console.log(object);
     *//=>{'a':[{'b':{}}]};
     *
     *_.unset(object,['a','0','b','c']);
     *//=>true
     *
     *console.log(object);
     *//=>{'a':[{'b':{}}]};
     */
    functionunset(object,path){
      returnobject==null?true:baseUnset(object,path);
    }

    /**
     *Thismethodislike`_.set`exceptthataccepts`updater`toproducethe
     *valuetoset.Use`_.updateWith`tocustomize`path`creation.The`updater`
     *isinvokedwithoneargument:(value).
     *
     ***Note:**Thismethodmutates`object`.
     *
     *@static
     *@memberOf_
     *@since4.6.0
     *@categoryObject
     *@param{Object}objectTheobjecttomodify.
     *@param{Array|string}pathThepathofthepropertytoset.
     *@param{Function}updaterThefunctiontoproducetheupdatedvalue.
     *@returns{Object}Returns`object`.
     *@example
     *
     *varobject={'a':[{'b':{'c':3}}]};
     *
     *_.update(object,'a[0].b.c',function(n){returnn*n;});
     *console.log(object.a[0].b.c);
     *//=>9
     *
     *_.update(object,'x[0].y.z',function(n){returnn?n+1:0;});
     *console.log(object.x[0].y.z);
     *//=>0
     */
    functionupdate(object,path,updater){
      returnobject==null?object:baseUpdate(object,path,castFunction(updater));
    }

    /**
     *Thismethodislike`_.update`exceptthatitaccepts`customizer`whichis
     *invokedtoproducetheobjectsof`path`. If`customizer`returns`undefined`
     *pathcreationishandledbythemethodinstead.The`customizer`isinvoked
     *withthreearguments:(nsValue,key,nsObject).
     *
     ***Note:**Thismethodmutates`object`.
     *
     *@static
     *@memberOf_
     *@since4.6.0
     *@categoryObject
     *@param{Object}objectTheobjecttomodify.
     *@param{Array|string}pathThepathofthepropertytoset.
     *@param{Function}updaterThefunctiontoproducetheupdatedvalue.
     *@param{Function}[customizer]Thefunctiontocustomizeassignedvalues.
     *@returns{Object}Returns`object`.
     *@example
     *
     *varobject={};
     *
     *_.updateWith(object,'[0][1]',_.constant('a'),Object);
     *//=>{'0':{'1':'a'}}
     */
    functionupdateWith(object,path,updater,customizer){
      customizer=typeofcustomizer=='function'?customizer:undefined;
      returnobject==null?object:baseUpdate(object,path,castFunction(updater),customizer);
    }

    /**
     *Createsanarrayoftheownenumerablestringkeyedpropertyvaluesof`object`.
     *
     ***Note:**Non-objectvaluesarecoercedtoobjects.
     *
     *@static
     *@since0.1.0
     *@memberOf_
     *@categoryObject
     *@param{Object}objectTheobjecttoquery.
     *@returns{Array}Returnsthearrayofpropertyvalues.
     *@example
     *
     *functionFoo(){
     *  this.a=1;
     *  this.b=2;
     *}
     *
     *Foo.prototype.c=3;
     *
     *_.values(newFoo);
     *//=>[1,2](iterationorderisnotguaranteed)
     *
     *_.values('hi');
     *//=>['h','i']
     */
    functionvalues(object){
      returnobject==null?[]:baseValues(object,keys(object));
    }

    /**
     *Createsanarrayoftheownandinheritedenumerablestringkeyedproperty
     *valuesof`object`.
     *
     ***Note:**Non-objectvaluesarecoercedtoobjects.
     *
     *@static
     *@memberOf_
     *@since3.0.0
     *@categoryObject
     *@param{Object}objectTheobjecttoquery.
     *@returns{Array}Returnsthearrayofpropertyvalues.
     *@example
     *
     *functionFoo(){
     *  this.a=1;
     *  this.b=2;
     *}
     *
     *Foo.prototype.c=3;
     *
     *_.valuesIn(newFoo);
     *//=>[1,2,3](iterationorderisnotguaranteed)
     */
    functionvaluesIn(object){
      returnobject==null?[]:baseValues(object,keysIn(object));
    }

    /*------------------------------------------------------------------------*/

    /**
     *Clamps`number`withintheinclusive`lower`and`upper`bounds.
     *
     *@static
     *@memberOf_
     *@since4.0.0
     *@categoryNumber
     *@param{number}numberThenumbertoclamp.
     *@param{number}[lower]Thelowerbound.
     *@param{number}upperTheupperbound.
     *@returns{number}Returnstheclampednumber.
     *@example
     *
     *_.clamp(-10,-5,5);
     *//=>-5
     *
     *_.clamp(10,-5,5);
     *//=>5
     */
    functionclamp(number,lower,upper){
      if(upper===undefined){
        upper=lower;
        lower=undefined;
      }
      if(upper!==undefined){
        upper=toNumber(upper);
        upper=upper===upper?upper:0;
      }
      if(lower!==undefined){
        lower=toNumber(lower);
        lower=lower===lower?lower:0;
      }
      returnbaseClamp(toNumber(number),lower,upper);
    }

    /**
     *Checksif`n`isbetween`start`andupto,butnotincluding,`end`.If
     *`end`isnotspecified,it'ssetto`start`with`start`thensetto`0`.
     *If`start`isgreaterthan`end`theparamsareswappedtosupport
     *negativeranges.
     *
     *@static
     *@memberOf_
     *@since3.3.0
     *@categoryNumber
     *@param{number}numberThenumbertocheck.
     *@param{number}[start=0]Thestartoftherange.
     *@param{number}endTheendoftherange.
     *@returns{boolean}Returns`true`if`number`isintherange,else`false`.
     *@see_.range,_.rangeRight
     *@example
     *
     *_.inRange(3,2,4);
     *//=>true
     *
     *_.inRange(4,8);
     *//=>true
     *
     *_.inRange(4,2);
     *//=>false
     *
     *_.inRange(2,2);
     *//=>false
     *
     *_.inRange(1.2,2);
     *//=>true
     *
     *_.inRange(5.2,4);
     *//=>false
     *
     *_.inRange(-3,-2,-6);
     *//=>true
     */
    functioninRange(number,start,end){
      start=toFinite(start);
      if(end===undefined){
        end=start;
        start=0;
      }else{
        end=toFinite(end);
      }
      number=toNumber(number);
      returnbaseInRange(number,start,end);
    }

    /**
     *Producesarandomnumberbetweentheinclusive`lower`and`upper`bounds.
     *Ifonlyoneargumentisprovidedanumberbetween`0`andthegivennumber
     *isreturned.If`floating`is`true`,oreither`lower`or`upper`are
     *floats,afloating-pointnumberisreturnedinsteadofaninteger.
     *
     ***Note:**JavaScriptfollowstheIEEE-754standardforresolving
     *floating-pointvalueswhichcanproduceunexpectedresults.
     *
     *@static
     *@memberOf_
     *@since0.7.0
     *@categoryNumber
     *@param{number}[lower=0]Thelowerbound.
     *@param{number}[upper=1]Theupperbound.
     *@param{boolean}[floating]Specifyreturningafloating-pointnumber.
     *@returns{number}Returnstherandomnumber.
     *@example
     *
     *_.random(0,5);
     *//=>anintegerbetween0and5
     *
     *_.random(5);
     *//=>alsoanintegerbetween0and5
     *
     *_.random(5,true);
     *//=>afloating-pointnumberbetween0and5
     *
     *_.random(1.2,5.2);
     *//=>afloating-pointnumberbetween1.2and5.2
     */
    functionrandom(lower,upper,floating){
      if(floating&&typeoffloating!='boolean'&&isIterateeCall(lower,upper,floating)){
        upper=floating=undefined;
      }
      if(floating===undefined){
        if(typeofupper=='boolean'){
          floating=upper;
          upper=undefined;
        }
        elseif(typeoflower=='boolean'){
          floating=lower;
          lower=undefined;
        }
      }
      if(lower===undefined&&upper===undefined){
        lower=0;
        upper=1;
      }
      else{
        lower=toFinite(lower);
        if(upper===undefined){
          upper=lower;
          lower=0;
        }else{
          upper=toFinite(upper);
        }
      }
      if(lower>upper){
        vartemp=lower;
        lower=upper;
        upper=temp;
      }
      if(floating||lower%1||upper%1){
        varrand=nativeRandom();
        returnnativeMin(lower+(rand*(upper-lower+freeParseFloat('1e-'+((rand+'').length-1)))),upper);
      }
      returnbaseRandom(lower,upper);
    }

    /*------------------------------------------------------------------------*/

    /**
     *Converts`string`to[camelcase](https://en.wikipedia.org/wiki/CamelCase).
     *
     *@static
     *@memberOf_
     *@since3.0.0
     *@categoryString
     *@param{string}[string='']Thestringtoconvert.
     *@returns{string}Returnsthecamelcasedstring.
     *@example
     *
     *_.camelCase('FooBar');
     *//=>'fooBar'
     *
     *_.camelCase('--foo-bar--');
     *//=>'fooBar'
     *
     *_.camelCase('__FOO_BAR__');
     *//=>'fooBar'
     */
    varcamelCase=createCompounder(function(result,word,index){
      word=word.toLowerCase();
      returnresult+(index?capitalize(word):word);
    });

    /**
     *Convertsthefirstcharacterof`string`touppercaseandtheremaining
     *tolowercase.
     *
     *@static
     *@memberOf_
     *@since3.0.0
     *@categoryString
     *@param{string}[string='']Thestringtocapitalize.
     *@returns{string}Returnsthecapitalizedstring.
     *@example
     *
     *_.capitalize('FRED');
     *//=>'Fred'
     */
    functioncapitalize(string){
      returnupperFirst(toString(string).toLowerCase());
    }

    /**
     *Deburrs`string`byconverting
     *[Latin-1Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     *and[LatinExtended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
     *letterstobasicLatinlettersandremoving
     *[combiningdiacriticalmarks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     *@static
     *@memberOf_
     *@since3.0.0
     *@categoryString
     *@param{string}[string='']Thestringtodeburr.
     *@returns{string}Returnsthedeburredstring.
     *@example
     *
     *_.deburr('déjàvu');
     *//=>'dejavu'
     */
    functiondeburr(string){
      string=toString(string);
      returnstring&&string.replace(reLatin,deburrLetter).replace(reComboMark,'');
    }

    /**
     *Checksif`string`endswiththegiventargetstring.
     *
     *@static
     *@memberOf_
     *@since3.0.0
     *@categoryString
     *@param{string}[string='']Thestringtoinspect.
     *@param{string}[target]Thestringtosearchfor.
     *@param{number}[position=string.length]Thepositiontosearchupto.
     *@returns{boolean}Returns`true`if`string`endswith`target`,
     * else`false`.
     *@example
     *
     *_.endsWith('abc','c');
     *//=>true
     *
     *_.endsWith('abc','b');
     *//=>false
     *
     *_.endsWith('abc','b',2);
     *//=>true
     */
    functionendsWith(string,target,position){
      string=toString(string);
      target=baseToString(target);

      varlength=string.length;
      position=position===undefined
        ?length
        :baseClamp(toInteger(position),0,length);

      varend=position;
      position-=target.length;
      returnposition>=0&&string.slice(position,end)==target;
    }

    /**
     *Convertsthecharacters"&","<",">",'"',and"'"in`string`totheir
     *correspondingHTMLentities.
     *
     ***Note:**Noothercharactersareescaped.Toescapeadditional
     *charactersuseathird-partylibrarylike[_he_](https://mths.be/he).
     *
     *Thoughthe">"characterisescapedforsymmetry,characterslike
     *">"and"/"don'tneedescapinginHTMLandhavenospecialmeaning
     *unlessthey'repartofatagorunquotedattributevalue.See
     *[MathiasBynens'sarticle](https://mathiasbynens.be/notes/ambiguous-ampersands)
     *(under"semi-relatedfunfact")formoredetails.
     *
     *WhenworkingwithHTMLyoushouldalways
     *[quoteattributevalues](http://wonko.com/post/html-escaping)toreduce
     *XSSvectors.
     *
     *@static
     *@since0.1.0
     *@memberOf_
     *@categoryString
     *@param{string}[string='']Thestringtoescape.
     *@returns{string}Returnstheescapedstring.
     *@example
     *
     *_.escape('fred,barney,&pebbles');
     *//=>'fred,barney,&amp;pebbles'
     */
    functionescape(string){
      string=toString(string);
      return(string&&reHasUnescapedHtml.test(string))
        ?string.replace(reUnescapedHtml,escapeHtmlChar)
        :string;
    }

    /**
     *Escapesthe`RegExp`specialcharacters"^","$","\",".","*","+",
     *"?","(",")","[","]","{","}",and"|"in`string`.
     *
     *@static
     *@memberOf_
     *@since3.0.0
     *@categoryString
     *@param{string}[string='']Thestringtoescape.
     *@returns{string}Returnstheescapedstring.
     *@example
     *
     *_.escapeRegExp('[lodash](https://lodash.com/)');
     *//=>'\[lodash\]\(https://lodash\.com/\)'
     */
    functionescapeRegExp(string){
      string=toString(string);
      return(string&&reHasRegExpChar.test(string))
        ?string.replace(reRegExpChar,'\\$&')
        :string;
    }

    /**
     *Converts`string`to
     *[kebabcase](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
     *
     *@static
     *@memberOf_
     *@since3.0.0
     *@categoryString
     *@param{string}[string='']Thestringtoconvert.
     *@returns{string}Returnsthekebabcasedstring.
     *@example
     *
     *_.kebabCase('FooBar');
     *//=>'foo-bar'
     *
     *_.kebabCase('fooBar');
     *//=>'foo-bar'
     *
     *_.kebabCase('__FOO_BAR__');
     *//=>'foo-bar'
     */
    varkebabCase=createCompounder(function(result,word,index){
      returnresult+(index?'-':'')+word.toLowerCase();
    });

    /**
     *Converts`string`,asspaceseparatedwords,tolowercase.
     *
     *@static
     *@memberOf_
     *@since4.0.0
     *@categoryString
     *@param{string}[string='']Thestringtoconvert.
     *@returns{string}Returnsthelowercasedstring.
     *@example
     *
     *_.lowerCase('--Foo-Bar--');
     *//=>'foobar'
     *
     *_.lowerCase('fooBar');
     *//=>'foobar'
     *
     *_.lowerCase('__FOO_BAR__');
     *//=>'foobar'
     */
    varlowerCase=createCompounder(function(result,word,index){
      returnresult+(index?'':'')+word.toLowerCase();
    });

    /**
     *Convertsthefirstcharacterof`string`tolowercase.
     *
     *@static
     *@memberOf_
     *@since4.0.0
     *@categoryString
     *@param{string}[string='']Thestringtoconvert.
     *@returns{string}Returnstheconvertedstring.
     *@example
     *
     *_.lowerFirst('Fred');
     *//=>'fred'
     *
     *_.lowerFirst('FRED');
     *//=>'fRED'
     */
    varlowerFirst=createCaseFirst('toLowerCase');

    /**
     *Pads`string`ontheleftandrightsidesifit'sshorterthan`length`.
     *Paddingcharactersaretruncatediftheycan'tbeevenlydividedby`length`.
     *
     *@static
     *@memberOf_
     *@since3.0.0
     *@categoryString
     *@param{string}[string='']Thestringtopad.
     *@param{number}[length=0]Thepaddinglength.
     *@param{string}[chars='']Thestringusedaspadding.
     *@returns{string}Returnsthepaddedstring.
     *@example
     *
     *_.pad('abc',8);
     *//=>' abc  '
     *
     *_.pad('abc',8,'_-');
     *//=>'_-abc_-_'
     *
     *_.pad('abc',3);
     *//=>'abc'
     */
    functionpad(string,length,chars){
      string=toString(string);
      length=toInteger(length);

      varstrLength=length?stringSize(string):0;
      if(!length||strLength>=length){
        returnstring;
      }
      varmid=(length-strLength)/2;
      return(
        createPadding(nativeFloor(mid),chars)+
        string+
        createPadding(nativeCeil(mid),chars)
      );
    }

    /**
     *Pads`string`ontherightsideifit'sshorterthan`length`.Padding
     *charactersaretruncatediftheyexceed`length`.
     *
     *@static
     *@memberOf_
     *@since4.0.0
     *@categoryString
     *@param{string}[string='']Thestringtopad.
     *@param{number}[length=0]Thepaddinglength.
     *@param{string}[chars='']Thestringusedaspadding.
     *@returns{string}Returnsthepaddedstring.
     *@example
     *
     *_.padEnd('abc',6);
     *//=>'abc  '
     *
     *_.padEnd('abc',6,'_-');
     *//=>'abc_-_'
     *
     *_.padEnd('abc',3);
     *//=>'abc'
     */
    functionpadEnd(string,length,chars){
      string=toString(string);
      length=toInteger(length);

      varstrLength=length?stringSize(string):0;
      return(length&&strLength<length)
        ?(string+createPadding(length-strLength,chars))
        :string;
    }

    /**
     *Pads`string`ontheleftsideifit'sshorterthan`length`.Padding
     *charactersaretruncatediftheyexceed`length`.
     *
     *@static
     *@memberOf_
     *@since4.0.0
     *@categoryString
     *@param{string}[string='']Thestringtopad.
     *@param{number}[length=0]Thepaddinglength.
     *@param{string}[chars='']Thestringusedaspadding.
     *@returns{string}Returnsthepaddedstring.
     *@example
     *
     *_.padStart('abc',6);
     *//=>'  abc'
     *
     *_.padStart('abc',6,'_-');
     *//=>'_-_abc'
     *
     *_.padStart('abc',3);
     *//=>'abc'
     */
    functionpadStart(string,length,chars){
      string=toString(string);
      length=toInteger(length);

      varstrLength=length?stringSize(string):0;
      return(length&&strLength<length)
        ?(createPadding(length-strLength,chars)+string)
        :string;
    }

    /**
     *Converts`string`toanintegerofthespecifiedradix.If`radix`is
     *`undefined`or`0`,a`radix`of`10`isusedunless`value`isa
     *hexadecimal,inwhichcasea`radix`of`16`isused.
     *
     ***Note:**Thismethodalignswiththe
     *[ES5implementation](https://es5.github.io/#x15.1.2.2)of`parseInt`.
     *
     *@static
     *@memberOf_
     *@since1.1.0
     *@categoryString
     *@param{string}stringThestringtoconvert.
     *@param{number}[radix=10]Theradixtointerpret`value`by.
     *@param-{Object}[guard]Enablesuseasaniterateeformethodslike`_.map`.
     *@returns{number}Returnstheconvertedinteger.
     *@example
     *
     *_.parseInt('08');
     *//=>8
     *
     *_.map(['6','08','10'],_.parseInt);
     *//=>[6,8,10]
     */
    functionparseInt(string,radix,guard){
      if(guard||radix==null){
        radix=0;
      }elseif(radix){
        radix=+radix;
      }
      returnnativeParseInt(toString(string).replace(reTrimStart,''),radix||0);
    }

    /**
     *Repeatsthegivenstring`n`times.
     *
     *@static
     *@memberOf_
     *@since3.0.0
     *@categoryString
     *@param{string}[string='']Thestringtorepeat.
     *@param{number}[n=1]Thenumberoftimestorepeatthestring.
     *@param-{Object}[guard]Enablesuseasaniterateeformethodslike`_.map`.
     *@returns{string}Returnstherepeatedstring.
     *@example
     *
     *_.repeat('*',3);
     *//=>'***'
     *
     *_.repeat('abc',2);
     *//=>'abcabc'
     *
     *_.repeat('abc',0);
     *//=>''
     */
    functionrepeat(string,n,guard){
      if((guard?isIterateeCall(string,n,guard):n===undefined)){
        n=1;
      }else{
        n=toInteger(n);
      }
      returnbaseRepeat(toString(string),n);
    }

    /**
     *Replacesmatchesfor`pattern`in`string`with`replacement`.
     *
     ***Note:**Thismethodisbasedon
     *[`String#replace`](https://mdn.io/String/replace).
     *
     *@static
     *@memberOf_
     *@since4.0.0
     *@categoryString
     *@param{string}[string='']Thestringtomodify.
     *@param{RegExp|string}patternThepatterntoreplace.
     *@param{Function|string}replacementThematchreplacement.
     *@returns{string}Returnsthemodifiedstring.
     *@example
     *
     *_.replace('HiFred','Fred','Barney');
     *//=>'HiBarney'
     */
    functionreplace(){
      varargs=arguments,
          string=toString(args[0]);

      returnargs.length<3?string:string.replace(args[1],args[2]);
    }

    /**
     *Converts`string`to
     *[snakecase](https://en.wikipedia.org/wiki/Snake_case).
     *
     *@static
     *@memberOf_
     *@since3.0.0
     *@categoryString
     *@param{string}[string='']Thestringtoconvert.
     *@returns{string}Returnsthesnakecasedstring.
     *@example
     *
     *_.snakeCase('FooBar');
     *//=>'foo_bar'
     *
     *_.snakeCase('fooBar');
     *//=>'foo_bar'
     *
     *_.snakeCase('--FOO-BAR--');
     *//=>'foo_bar'
     */
    varsnakeCase=createCompounder(function(result,word,index){
      returnresult+(index?'_':'')+word.toLowerCase();
    });

    /**
     *Splits`string`by`separator`.
     *
     ***Note:**Thismethodisbasedon
     *[`String#split`](https://mdn.io/String/split).
     *
     *@static
     *@memberOf_
     *@since4.0.0
     *@categoryString
     *@param{string}[string='']Thestringtosplit.
     *@param{RegExp|string}separatorTheseparatorpatterntosplitby.
     *@param{number}[limit]Thelengthtotruncateresultsto.
     *@returns{Array}Returnsthestringsegments.
     *@example
     *
     *_.split('a-b-c','-',2);
     *//=>['a','b']
     */
    functionsplit(string,separator,limit){
      if(limit&&typeoflimit!='number'&&isIterateeCall(string,separator,limit)){
        separator=limit=undefined;
      }
      limit=limit===undefined?MAX_ARRAY_LENGTH:limit>>>0;
      if(!limit){
        return[];
      }
      string=toString(string);
      if(string&&(
            typeofseparator=='string'||
            (separator!=null&&!isRegExp(separator))
          )){
        separator=baseToString(separator);
        if(!separator&&hasUnicode(string)){
          returncastSlice(stringToArray(string),0,limit);
        }
      }
      returnstring.split(separator,limit);
    }

    /**
     *Converts`string`to
     *[startcase](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
     *
     *@static
     *@memberOf_
     *@since3.1.0
     *@categoryString
     *@param{string}[string='']Thestringtoconvert.
     *@returns{string}Returnsthestartcasedstring.
     *@example
     *
     *_.startCase('--foo-bar--');
     *//=>'FooBar'
     *
     *_.startCase('fooBar');
     *//=>'FooBar'
     *
     *_.startCase('__FOO_BAR__');
     *//=>'FOOBAR'
     */
    varstartCase=createCompounder(function(result,word,index){
      returnresult+(index?'':'')+upperFirst(word);
    });

    /**
     *Checksif`string`startswiththegiventargetstring.
     *
     *@static
     *@memberOf_
     *@since3.0.0
     *@categoryString
     *@param{string}[string='']Thestringtoinspect.
     *@param{string}[target]Thestringtosearchfor.
     *@param{number}[position=0]Thepositiontosearchfrom.
     *@returns{boolean}Returns`true`if`string`startswith`target`,
     * else`false`.
     *@example
     *
     *_.startsWith('abc','a');
     *//=>true
     *
     *_.startsWith('abc','b');
     *//=>false
     *
     *_.startsWith('abc','b',1);
     *//=>true
     */
    functionstartsWith(string,target,position){
      string=toString(string);
      position=position==null
        ?0
        :baseClamp(toInteger(position),0,string.length);

      target=baseToString(target);
      returnstring.slice(position,position+target.length)==target;
    }

    /**
     *Createsacompiledtemplatefunctionthatcaninterpolatedataproperties
     *in"interpolate"delimiters,HTML-escapeinterpolateddatapropertiesin
     *"escape"delimiters,andexecuteJavaScriptin"evaluate"delimiters.Data
     *propertiesmaybeaccessedasfreevariablesinthetemplate.Ifasetting
     *objectisgiven,ittakesprecedenceover`_.templateSettings`values.
     *
     ***Note:**Inthedevelopmentbuild`_.template`utilizes
     *[sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     *foreasierdebugging.
     *
     *Formoreinformationonprecompilingtemplatessee
     *[lodash'scustombuildsdocumentation](https://lodash.com/custom-builds).
     *
     *FormoreinformationonChromeextensionsandboxessee
     *[Chrome'sextensionsdocumentation](https://developer.chrome.com/extensions/sandboxingEval).
     *
     *@static
     *@since0.1.0
     *@memberOf_
     *@categoryString
     *@param{string}[string='']Thetemplatestring.
     *@param{Object}[options={}]Theoptionsobject.
     *@param{RegExp}[options.escape=_.templateSettings.escape]
     * TheHTML"escape"delimiter.
     *@param{RegExp}[options.evaluate=_.templateSettings.evaluate]
     * The"evaluate"delimiter.
     *@param{Object}[options.imports=_.templateSettings.imports]
     * Anobjecttoimportintothetemplateasfreevariables.
     *@param{RegExp}[options.interpolate=_.templateSettings.interpolate]
     * The"interpolate"delimiter.
     *@param{string}[options.sourceURL='lodash.templateSources[n]']
     * ThesourceURLofthecompiledtemplate.
     *@param{string}[options.variable='obj']
     * Thedataobjectvariablename.
     *@param-{Object}[guard]Enablesuseasaniterateeformethodslike`_.map`.
     *@returns{Function}Returnsthecompiledtemplatefunction.
     *@example
     *
     *//Usethe"interpolate"delimitertocreateacompiledtemplate.
     *varcompiled=_.template('hello<%=user%>!');
     *compiled({'user':'fred'});
     *//=>'hellofred!'
     *
     *//UsetheHTML"escape"delimitertoescapedatapropertyvalues.
     *varcompiled=_.template('<b><%-value%></b>');
     *compiled({'value':'<script>'});
     *//=>'<b>&lt;script&gt;</b>'
     *
     *//Usethe"evaluate"delimitertoexecuteJavaScriptandgenerateHTML.
     *varcompiled=_.template('<%_.forEach(users,function(user){%><li><%-user%></li><%});%>');
     *compiled({'users':['fred','barney']});
     *//=>'<li>fred</li><li>barney</li>'
     *
     *//Usetheinternal`print`functionin"evaluate"delimiters.
     *varcompiled=_.template('<%print("hello"+user);%>!');
     *compiled({'user':'barney'});
     *//=>'hellobarney!'
     *
     *//UsetheEStemplateliteraldelimiterasan"interpolate"delimiter.
     *//Disablesupportbyreplacingthe"interpolate"delimiter.
     *varcompiled=_.template('hello${user}!');
     *compiled({'user':'pebbles'});
     *//=>'hellopebbles!'
     *
     *//Usebackslashestotreatdelimitersasplaintext.
     *varcompiled=_.template('<%="\\<%-value%\\>"%>');
     *compiled({'value':'ignored'});
     *//=>'<%-value%>'
     *
     *//Usethe`imports`optiontoimport`jQuery`as`jq`.
     *vartext='<%jq.each(users,function(user){%><li><%-user%></li><%});%>';
     *varcompiled=_.template(text,{'imports':{'jq':jQuery}});
     *compiled({'users':['fred','barney']});
     *//=>'<li>fred</li><li>barney</li>'
     *
     *//Usethe`sourceURL`optiontospecifyacustomsourceURLforthetemplate.
     *varcompiled=_.template('hello<%=user%>!',{'sourceURL':'/basic/greeting.jst'});
     *compiled(data);
     *//=>Findthesourceof"greeting.jst"undertheSourcestaborResourcespanelofthewebinspector.
     *
     *//Usethe`variable`optiontoensureawith-statementisn'tusedinthecompiledtemplate.
     *varcompiled=_.template('hi<%=data.user%>!',{'variable':'data'});
     *compiled.source;
     *//=>function(data){
     *//  var__t,__p='';
     *//  __p+='hi'+((__t=(data.user))==null?'':__t)+'!';
     *//  return__p;
     *//}
     *
     *//Usecustomtemplatedelimiters.
     *_.templateSettings.interpolate=/{{([\s\S]+?)}}/g;
     *varcompiled=_.template('hello{{user}}!');
     *compiled({'user':'mustache'});
     *//=>'hellomustache!'
     *
     *//Usethe`source`propertytoinlinecompiledtemplatesformeaningful
     *//linenumbersinerrormessagesandstacktraces.
     *fs.writeFileSync(path.join(process.cwd(),'jst.js'),'\
     *  varJST={\
     *    "main":'+_.template(mainText).source+'\
     *  };\
     *');
     */
    functiontemplate(string,options,guard){
      //BasedonJohnResig's`tmpl`implementation
      //(http://ejohn.org/blog/javascript-micro-templating/)
      //andLauraDoktorova'sdoT.js(https://github.com/olado/doT).
      varsettings=lodash.templateSettings;

      if(guard&&isIterateeCall(string,options,guard)){
        options=undefined;
      }
      string=toString(string);
      options=assignInWith({},options,settings,customDefaultsAssignIn);

      varimports=assignInWith({},options.imports,settings.imports,customDefaultsAssignIn),
          importsKeys=keys(imports),
          importsValues=baseValues(imports,importsKeys);

      varisEscaping,
          isEvaluating,
          index=0,
          interpolate=options.interpolate||reNoMatch,
          source="__p+='";

      //Compiletheregexptomatcheachdelimiter.
      varreDelimiters=RegExp(
        (options.escape||reNoMatch).source+'|'+
        interpolate.source+'|'+
        (interpolate===reInterpolate?reEsTemplate:reNoMatch).source+'|'+
        (options.evaluate||reNoMatch).source+'|$'
      ,'g');

      //UseasourceURLforeasierdebugging.
      varsourceURL='//#sourceURL='+
        ('sourceURL'inoptions
          ?options.sourceURL
          :('lodash.templateSources['+(++templateCounter)+']')
        )+'\n';

      string.replace(reDelimiters,function(match,escapeValue,interpolateValue,esTemplateValue,evaluateValue,offset){
        interpolateValue||(interpolateValue=esTemplateValue);

        //Escapecharactersthatcan'tbeincludedinstringliterals.
        source+=string.slice(index,offset).replace(reUnescapedString,escapeStringChar);

        //Replacedelimiterswithsnippets.
        if(escapeValue){
          isEscaping=true;
          source+="'+\n__e("+escapeValue+")+\n'";
        }
        if(evaluateValue){
          isEvaluating=true;
          source+="';\n"+evaluateValue+";\n__p+='";
        }
        if(interpolateValue){
          source+="'+\n((__t=("+interpolateValue+"))==null?'':__t)+\n'";
        }
        index=offset+match.length;

        //TheJSengineembeddedinAdobeproductsneeds`match`returnedin
        //ordertoproducethecorrect`offset`value.
        returnmatch;
      });

      source+="';\n";

      //If`variable`isnotspecifiedwrapawith-statementaroundthegenerated
      //codetoaddthedataobjecttothetopofthescopechain.
      varvariable=options.variable;
      if(!variable){
        source='with(obj){\n'+source+'\n}\n';
      }
      //Cleanupcodebystrippingemptystrings.
      source=(isEvaluating?source.replace(reEmptyStringLeading,''):source)
        .replace(reEmptyStringMiddle,'$1')
        .replace(reEmptyStringTrailing,'$1;');

      //Framecodeasthefunctionbody.
      source='function('+(variable||'obj')+'){\n'+
        (variable
          ?''
          :'obj||(obj={});\n'
        )+
        "var__t,__p=''"+
        (isEscaping
           ?',__e=_.escape'
           :''
        )+
        (isEvaluating
          ?',__j=Array.prototype.join;\n'+
            "functionprint(){__p+=__j.call(arguments,'')}\n"
          :';\n'
        )+
        source+
        'return__p\n}';

      varresult=attempt(function(){
        returnFunction(importsKeys,sourceURL+'return'+source)
          .apply(undefined,importsValues);
      });

      //Providethecompiledfunction'ssourcebyits`toString`methodor
      //the`source`propertyasaconvenienceforinliningcompiledtemplates.
      result.source=source;
      if(isError(result)){
        throwresult;
      }
      returnresult;
    }

    /**
     *Converts`string`,asawhole,tolowercasejustlike
     *[String#toLowerCase](https://mdn.io/toLowerCase).
     *
     *@static
     *@memberOf_
     *@since4.0.0
     *@categoryString
     *@param{string}[string='']Thestringtoconvert.
     *@returns{string}Returnsthelowercasedstring.
     *@example
     *
     *_.toLower('--Foo-Bar--');
     *//=>'--foo-bar--'
     *
     *_.toLower('fooBar');
     *//=>'foobar'
     *
     *_.toLower('__FOO_BAR__');
     *//=>'__foo_bar__'
     */
    functiontoLower(value){
      returntoString(value).toLowerCase();
    }

    /**
     *Converts`string`,asawhole,touppercasejustlike
     *[String#toUpperCase](https://mdn.io/toUpperCase).
     *
     *@static
     *@memberOf_
     *@since4.0.0
     *@categoryString
     *@param{string}[string='']Thestringtoconvert.
     *@returns{string}Returnstheuppercasedstring.
     *@example
     *
     *_.toUpper('--foo-bar--');
     *//=>'--FOO-BAR--'
     *
     *_.toUpper('fooBar');
     *//=>'FOOBAR'
     *
     *_.toUpper('__foo_bar__');
     *//=>'__FOO_BAR__'
     */
    functiontoUpper(value){
      returntoString(value).toUpperCase();
    }

    /**
     *Removesleadingandtrailingwhitespaceorspecifiedcharactersfrom`string`.
     *
     *@static
     *@memberOf_
     *@since3.0.0
     *@categoryString
     *@param{string}[string='']Thestringtotrim.
     *@param{string}[chars=whitespace]Thecharacterstotrim.
     *@param-{Object}[guard]Enablesuseasaniterateeformethodslike`_.map`.
     *@returns{string}Returnsthetrimmedstring.
     *@example
     *
     *_.trim(' abc ');
     *//=>'abc'
     *
     *_.trim('-_-abc-_-','_-');
     *//=>'abc'
     *
     *_.map([' foo ',' bar '],_.trim);
     *//=>['foo','bar']
     */
    functiontrim(string,chars,guard){
      string=toString(string);
      if(string&&(guard||chars===undefined)){
        returnstring.replace(reTrim,'');
      }
      if(!string||!(chars=baseToString(chars))){
        returnstring;
      }
      varstrSymbols=stringToArray(string),
          chrSymbols=stringToArray(chars),
          start=charsStartIndex(strSymbols,chrSymbols),
          end=charsEndIndex(strSymbols,chrSymbols)+1;

      returncastSlice(strSymbols,start,end).join('');
    }

    /**
     *Removestrailingwhitespaceorspecifiedcharactersfrom`string`.
     *
     *@static
     *@memberOf_
     *@since4.0.0
     *@categoryString
     *@param{string}[string='']Thestringtotrim.
     *@param{string}[chars=whitespace]Thecharacterstotrim.
     *@param-{Object}[guard]Enablesuseasaniterateeformethodslike`_.map`.
     *@returns{string}Returnsthetrimmedstring.
     *@example
     *
     *_.trimEnd(' abc ');
     *//=>' abc'
     *
     *_.trimEnd('-_-abc-_-','_-');
     *//=>'-_-abc'
     */
    functiontrimEnd(string,chars,guard){
      string=toString(string);
      if(string&&(guard||chars===undefined)){
        returnstring.replace(reTrimEnd,'');
      }
      if(!string||!(chars=baseToString(chars))){
        returnstring;
      }
      varstrSymbols=stringToArray(string),
          end=charsEndIndex(strSymbols,stringToArray(chars))+1;

      returncastSlice(strSymbols,0,end).join('');
    }

    /**
     *Removesleadingwhitespaceorspecifiedcharactersfrom`string`.
     *
     *@static
     *@memberOf_
     *@since4.0.0
     *@categoryString
     *@param{string}[string='']Thestringtotrim.
     *@param{string}[chars=whitespace]Thecharacterstotrim.
     *@param-{Object}[guard]Enablesuseasaniterateeformethodslike`_.map`.
     *@returns{string}Returnsthetrimmedstring.
     *@example
     *
     *_.trimStart(' abc ');
     *//=>'abc '
     *
     *_.trimStart('-_-abc-_-','_-');
     *//=>'abc-_-'
     */
    functiontrimStart(string,chars,guard){
      string=toString(string);
      if(string&&(guard||chars===undefined)){
        returnstring.replace(reTrimStart,'');
      }
      if(!string||!(chars=baseToString(chars))){
        returnstring;
      }
      varstrSymbols=stringToArray(string),
          start=charsStartIndex(strSymbols,stringToArray(chars));

      returncastSlice(strSymbols,start).join('');
    }

    /**
     *Truncates`string`ifit'slongerthanthegivenmaximumstringlength.
     *Thelastcharactersofthetruncatedstringarereplacedwiththeomission
     *stringwhichdefaultsto"...".
     *
     *@static
     *@memberOf_
     *@since4.0.0
     *@categoryString
     *@param{string}[string='']Thestringtotruncate.
     *@param{Object}[options={}]Theoptionsobject.
     *@param{number}[options.length=30]Themaximumstringlength.
     *@param{string}[options.omission='...']Thestringtoindicatetextisomitted.
     *@param{RegExp|string}[options.separator]Theseparatorpatterntotruncateto.
     *@returns{string}Returnsthetruncatedstring.
     *@example
     *
     *_.truncate('hi-diddly-hothere,neighborino');
     *//=>'hi-diddly-hothere,neighbo...'
     *
     *_.truncate('hi-diddly-hothere,neighborino',{
     *  'length':24,
     *  'separator':''
     *});
     *//=>'hi-diddly-hothere,...'
     *
     *_.truncate('hi-diddly-hothere,neighborino',{
     *  'length':24,
     *  'separator':/,?+/
     *});
     *//=>'hi-diddly-hothere...'
     *
     *_.truncate('hi-diddly-hothere,neighborino',{
     *  'omission':'[...]'
     *});
     *//=>'hi-diddly-hothere,neig[...]'
     */
    functiontruncate(string,options){
      varlength=DEFAULT_TRUNC_LENGTH,
          omission=DEFAULT_TRUNC_OMISSION;

      if(isObject(options)){
        varseparator='separator'inoptions?options.separator:separator;
        length='length'inoptions?toInteger(options.length):length;
        omission='omission'inoptions?baseToString(options.omission):omission;
      }
      string=toString(string);

      varstrLength=string.length;
      if(hasUnicode(string)){
        varstrSymbols=stringToArray(string);
        strLength=strSymbols.length;
      }
      if(length>=strLength){
        returnstring;
      }
      varend=length-stringSize(omission);
      if(end<1){
        returnomission;
      }
      varresult=strSymbols
        ?castSlice(strSymbols,0,end).join('')
        :string.slice(0,end);

      if(separator===undefined){
        returnresult+omission;
      }
      if(strSymbols){
        end+=(result.length-end);
      }
      if(isRegExp(separator)){
        if(string.slice(end).search(separator)){
          varmatch,
              substring=result;

          if(!separator.global){
            separator=RegExp(separator.source,toString(reFlags.exec(separator))+'g');
          }
          separator.lastIndex=0;
          while((match=separator.exec(substring))){
            varnewEnd=match.index;
          }
          result=result.slice(0,newEnd===undefined?end:newEnd);
        }
      }elseif(string.indexOf(baseToString(separator),end)!=end){
        varindex=result.lastIndexOf(separator);
        if(index>-1){
          result=result.slice(0,index);
        }
      }
      returnresult+omission;
    }

    /**
     *Theinverseof`_.escape`;thismethodconvertstheHTMLentities
     *`&amp;`,`&lt;`,`&gt;`,`&quot;`,and`&#39;`in`string`to
     *theircorrespondingcharacters.
     *
     ***Note:**NootherHTMLentitiesareunescaped.Tounescapeadditional
     *HTMLentitiesuseathird-partylibrarylike[_he_](https://mths.be/he).
     *
     *@static
     *@memberOf_
     *@since0.6.0
     *@categoryString
     *@param{string}[string='']Thestringtounescape.
     *@returns{string}Returnstheunescapedstring.
     *@example
     *
     *_.unescape('fred,barney,&amp;pebbles');
     *//=>'fred,barney,&pebbles'
     */
    functionunescape(string){
      string=toString(string);
      return(string&&reHasEscapedHtml.test(string))
        ?string.replace(reEscapedHtml,unescapeHtmlChar)
        :string;
    }

    /**
     *Converts`string`,asspaceseparatedwords,touppercase.
     *
     *@static
     *@memberOf_
     *@since4.0.0
     *@categoryString
     *@param{string}[string='']Thestringtoconvert.
     *@returns{string}Returnstheuppercasedstring.
     *@example
     *
     *_.upperCase('--foo-bar');
     *//=>'FOOBAR'
     *
     *_.upperCase('fooBar');
     *//=>'FOOBAR'
     *
     *_.upperCase('__foo_bar__');
     *//=>'FOOBAR'
     */
    varupperCase=createCompounder(function(result,word,index){
      returnresult+(index?'':'')+word.toUpperCase();
    });

    /**
     *Convertsthefirstcharacterof`string`touppercase.
     *
     *@static
     *@memberOf_
     *@since4.0.0
     *@categoryString
     *@param{string}[string='']Thestringtoconvert.
     *@returns{string}Returnstheconvertedstring.
     *@example
     *
     *_.upperFirst('fred');
     *//=>'Fred'
     *
     *_.upperFirst('FRED');
     *//=>'FRED'
     */
    varupperFirst=createCaseFirst('toUpperCase');

    /**
     *Splits`string`intoanarrayofitswords.
     *
     *@static
     *@memberOf_
     *@since3.0.0
     *@categoryString
     *@param{string}[string='']Thestringtoinspect.
     *@param{RegExp|string}[pattern]Thepatterntomatchwords.
     *@param-{Object}[guard]Enablesuseasaniterateeformethodslike`_.map`.
     *@returns{Array}Returnsthewordsof`string`.
     *@example
     *
     *_.words('fred,barney,&pebbles');
     *//=>['fred','barney','pebbles']
     *
     *_.words('fred,barney,&pebbles',/[^,]+/g);
     *//=>['fred','barney','&','pebbles']
     */
    functionwords(string,pattern,guard){
      string=toString(string);
      pattern=guard?undefined:pattern;

      if(pattern===undefined){
        returnhasUnicodeWord(string)?unicodeWords(string):asciiWords(string);
      }
      returnstring.match(pattern)||[];
    }

    /*------------------------------------------------------------------------*/

    /**
     *Attemptstoinvoke`func`,returningeithertheresultorthecaughterror
     *object.Anyadditionalargumentsareprovidedto`func`whenit'sinvoked.
     *
     *@static
     *@memberOf_
     *@since3.0.0
     *@categoryUtil
     *@param{Function}funcThefunctiontoattempt.
     *@param{...*}[args]Theargumentstoinvoke`func`with.
     *@returns{*}Returnsthe`func`resultorerrorobject.
     *@example
     *
     *//Avoidthrowingerrorsforinvalidselectors.
     *varelements=_.attempt(function(selector){
     *  returndocument.querySelectorAll(selector);
     *},'>_>');
     *
     *if(_.isError(elements)){
     *  elements=[];
     *}
     */
    varattempt=baseRest(function(func,args){
      try{
        returnapply(func,undefined,args);
      }catch(e){
        returnisError(e)?e:newError(e);
      }
    });

    /**
     *Bindsmethodsofanobjecttotheobjectitself,overwritingtheexisting
     *method.
     *
     ***Note:**Thismethoddoesn'tsetthe"length"propertyofboundfunctions.
     *
     *@static
     *@since0.1.0
     *@memberOf_
     *@categoryUtil
     *@param{Object}objectTheobjecttobindandassigntheboundmethodsto.
     *@param{...(string|string[])}methodNamesTheobjectmethodnamestobind.
     *@returns{Object}Returns`object`.
     *@example
     *
     *varview={
     *  'label':'docs',
     *  'click':function(){
     *    console.log('clicked'+this.label);
     *  }
     *};
     *
     *_.bindAll(view,['click']);
     *jQuery(element).on('click',view.click);
     *//=>Logs'clickeddocs'whenclicked.
     */
    varbindAll=flatRest(function(object,methodNames){
      arrayEach(methodNames,function(key){
        key=toKey(key);
        baseAssignValue(object,key,bind(object[key],object));
      });
      returnobject;
    });

    /**
     *Createsafunctionthatiteratesover`pairs`andinvokesthecorresponding
     *functionofthefirstpredicatetoreturntruthy.Thepredicate-function
     *pairsareinvokedwiththe`this`bindingandargumentsofthecreated
     *function.
     *
     *@static
     *@memberOf_
     *@since4.0.0
     *@categoryUtil
     *@param{Array}pairsThepredicate-functionpairs.
     *@returns{Function}Returnsthenewcompositefunction.
     *@example
     *
     *varfunc=_.cond([
     *  [_.matches({'a':1}),          _.constant('matchesA')],
     *  [_.conforms({'b':_.isNumber}),_.constant('matchesB')],
     *  [_.stubTrue,                     _.constant('nomatch')]
     *]);
     *
     *func({'a':1,'b':2});
     *//=>'matchesA'
     *
     *func({'a':0,'b':1});
     *//=>'matchesB'
     *
     *func({'a':'1','b':'2'});
     *//=>'nomatch'
     */
    functioncond(pairs){
      varlength=pairs==null?0:pairs.length,
          toIteratee=getIteratee();

      pairs=!length?[]:arrayMap(pairs,function(pair){
        if(typeofpair[1]!='function'){
          thrownewTypeError(FUNC_ERROR_TEXT);
        }
        return[toIteratee(pair[0]),pair[1]];
      });

      returnbaseRest(function(args){
        varindex=-1;
        while(++index<length){
          varpair=pairs[index];
          if(apply(pair[0],this,args)){
            returnapply(pair[1],this,args);
          }
        }
      });
    }

    /**
     *Createsafunctionthatinvokesthepredicatepropertiesof`source`with
     *thecorrespondingpropertyvaluesofagivenobject,returning`true`if
     *allpredicatesreturntruthy,else`false`.
     *
     ***Note:**Thecreatedfunctionisequivalentto`_.conformsTo`with
     *`source`partiallyapplied.
     *
     *@static
     *@memberOf_
     *@since4.0.0
     *@categoryUtil
     *@param{Object}sourceTheobjectofpropertypredicatestoconformto.
     *@returns{Function}Returnsthenewspecfunction.
     *@example
     *
     *varobjects=[
     *  {'a':2,'b':1},
     *  {'a':1,'b':2}
     *];
     *
     *_.filter(objects,_.conforms({'b':function(n){returnn>1;}}));
     *//=>[{'a':1,'b':2}]
     */
    functionconforms(source){
      returnbaseConforms(baseClone(source,CLONE_DEEP_FLAG));
    }

    /**
     *Createsafunctionthatreturns`value`.
     *
     *@static
     *@memberOf_
     *@since2.4.0
     *@categoryUtil
     *@param{*}valueThevaluetoreturnfromthenewfunction.
     *@returns{Function}Returnsthenewconstantfunction.
     *@example
     *
     *varobjects=_.times(2,_.constant({'a':1}));
     *
     *console.log(objects);
     *//=>[{'a':1},{'a':1}]
     *
     *console.log(objects[0]===objects[1]);
     *//=>true
     */
    functionconstant(value){
      returnfunction(){
        returnvalue;
      };
    }

    /**
     *Checks`value`todeterminewhetheradefaultvalueshouldbereturnedin
     *itsplace.The`defaultValue`isreturnedif`value`is`NaN`,`null`,
     *or`undefined`.
     *
     *@static
     *@memberOf_
     *@since4.14.0
     *@categoryUtil
     *@param{*}valueThevaluetocheck.
     *@param{*}defaultValueThedefaultvalue.
     *@returns{*}Returnstheresolvedvalue.
     *@example
     *
     *_.defaultTo(1,10);
     *//=>1
     *
     *_.defaultTo(undefined,10);
     *//=>10
     */
    functiondefaultTo(value,defaultValue){
      return(value==null||value!==value)?defaultValue:value;
    }

    /**
     *Createsafunctionthatreturnstheresultofinvokingthegivenfunctions
     *withthe`this`bindingofthecreatedfunction,whereeachsuccessive
     *invocationissuppliedthereturnvalueoftheprevious.
     *
     *@static
     *@memberOf_
     *@since3.0.0
     *@categoryUtil
     *@param{...(Function|Function[])}[funcs]Thefunctionstoinvoke.
     *@returns{Function}Returnsthenewcompositefunction.
     *@see_.flowRight
     *@example
     *
     *functionsquare(n){
     *  returnn*n;
     *}
     *
     *varaddSquare=_.flow([_.add,square]);
     *addSquare(1,2);
     *//=>9
     */
    varflow=createFlow();

    /**
     *Thismethodislike`_.flow`exceptthatitcreatesafunctionthat
     *invokesthegivenfunctionsfromrighttoleft.
     *
     *@static
     *@since3.0.0
     *@memberOf_
     *@categoryUtil
     *@param{...(Function|Function[])}[funcs]Thefunctionstoinvoke.
     *@returns{Function}Returnsthenewcompositefunction.
     *@see_.flow
     *@example
     *
     *functionsquare(n){
     *  returnn*n;
     *}
     *
     *varaddSquare=_.flowRight([square,_.add]);
     *addSquare(1,2);
     *//=>9
     */
    varflowRight=createFlow(true);

    /**
     *Thismethodreturnsthefirstargumentitreceives.
     *
     *@static
     *@since0.1.0
     *@memberOf_
     *@categoryUtil
     *@param{*}valueAnyvalue.
     *@returns{*}Returns`value`.
     *@example
     *
     *varobject={'a':1};
     *
     *console.log(_.identity(object)===object);
     *//=>true
     */
    functionidentity(value){
      returnvalue;
    }

    /**
     *Createsafunctionthatinvokes`func`withtheargumentsofthecreated
     *function.If`func`isapropertyname,thecreatedfunctionreturnsthe
     *propertyvalueforagivenelement.If`func`isanarrayorobject,the
     *createdfunctionreturns`true`forelementsthatcontaintheequivalent
     *sourceproperties,otherwiseitreturns`false`.
     *
     *@static
     *@since4.0.0
     *@memberOf_
     *@categoryUtil
     *@param{*}[func=_.identity]Thevaluetoconverttoacallback.
     *@returns{Function}Returnsthecallback.
     *@example
     *
     *varusers=[
     *  {'user':'barney','age':36,'active':true},
     *  {'user':'fred',  'age':40,'active':false}
     *];
     *
     *//The`_.matches`iterateeshorthand.
     *_.filter(users,_.iteratee({'user':'barney','active':true}));
     *//=>[{'user':'barney','age':36,'active':true}]
     *
     *//The`_.matchesProperty`iterateeshorthand.
     *_.filter(users,_.iteratee(['user','fred']));
     *//=>[{'user':'fred','age':40}]
     *
     *//The`_.property`iterateeshorthand.
     *_.map(users,_.iteratee('user'));
     *//=>['barney','fred']
     *
     *//Createcustomiterateeshorthands.
     *_.iteratee=_.wrap(_.iteratee,function(iteratee,func){
     *  return!_.isRegExp(func)?iteratee(func):function(string){
     *    returnfunc.test(string);
     *  };
     *});
     *
     *_.filter(['abc','def'],/ef/);
     *//=>['def']
     */
    functioniteratee(func){
      returnbaseIteratee(typeoffunc=='function'?func:baseClone(func,CLONE_DEEP_FLAG));
    }

    /**
     *Createsafunctionthatperformsapartialdeepcomparisonbetweenagiven
     *objectand`source`,returning`true`ifthegivenobjecthasequivalent
     *propertyvalues,else`false`.
     *
     ***Note:**Thecreatedfunctionisequivalentto`_.isMatch`with`source`
     *partiallyapplied.
     *
     *Partialcomparisonswillmatchemptyarrayandemptyobject`source`
     *valuesagainstanyarrayorobjectvalue,respectively.See`_.isEqual`
     *foralistofsupportedvaluecomparisons.
     *
     *@static
     *@memberOf_
     *@since3.0.0
     *@categoryUtil
     *@param{Object}sourceTheobjectofpropertyvaluestomatch.
     *@returns{Function}Returnsthenewspecfunction.
     *@example
     *
     *varobjects=[
     *  {'a':1,'b':2,'c':3},
     *  {'a':4,'b':5,'c':6}
     *];
     *
     *_.filter(objects,_.matches({'a':4,'c':6}));
     *//=>[{'a':4,'b':5,'c':6}]
     */
    functionmatches(source){
      returnbaseMatches(baseClone(source,CLONE_DEEP_FLAG));
    }

    /**
     *Createsafunctionthatperformsapartialdeepcomparisonbetweenthe
     *valueat`path`ofagivenobjectto`srcValue`,returning`true`ifthe
     *objectvalueisequivalent,else`false`.
     *
     ***Note:**Partialcomparisonswillmatchemptyarrayandemptyobject
     *`srcValue`valuesagainstanyarrayorobjectvalue,respectively.See
     *`_.isEqual`foralistofsupportedvaluecomparisons.
     *
     *@static
     *@memberOf_
     *@since3.2.0
     *@categoryUtil
     *@param{Array|string}pathThepathofthepropertytoget.
     *@param{*}srcValueThevaluetomatch.
     *@returns{Function}Returnsthenewspecfunction.
     *@example
     *
     *varobjects=[
     *  {'a':1,'b':2,'c':3},
     *  {'a':4,'b':5,'c':6}
     *];
     *
     *_.find(objects,_.matchesProperty('a',4));
     *//=>{'a':4,'b':5,'c':6}
     */
    functionmatchesProperty(path,srcValue){
      returnbaseMatchesProperty(path,baseClone(srcValue,CLONE_DEEP_FLAG));
    }

    /**
     *Createsafunctionthatinvokesthemethodat`path`ofagivenobject.
     *Anyadditionalargumentsareprovidedtotheinvokedmethod.
     *
     *@static
     *@memberOf_
     *@since3.7.0
     *@categoryUtil
     *@param{Array|string}pathThepathofthemethodtoinvoke.
     *@param{...*}[args]Theargumentstoinvokethemethodwith.
     *@returns{Function}Returnsthenewinvokerfunction.
     *@example
     *
     *varobjects=[
     *  {'a':{'b':_.constant(2)}},
     *  {'a':{'b':_.constant(1)}}
     *];
     *
     *_.map(objects,_.method('a.b'));
     *//=>[2,1]
     *
     *_.map(objects,_.method(['a','b']));
     *//=>[2,1]
     */
    varmethod=baseRest(function(path,args){
      returnfunction(object){
        returnbaseInvoke(object,path,args);
      };
    });

    /**
     *Theoppositeof`_.method`;thismethodcreatesafunctionthatinvokes
     *themethodatagivenpathof`object`.Anyadditionalargumentsare
     *providedtotheinvokedmethod.
     *
     *@static
     *@memberOf_
     *@since3.7.0
     *@categoryUtil
     *@param{Object}objectTheobjecttoquery.
     *@param{...*}[args]Theargumentstoinvokethemethodwith.
     *@returns{Function}Returnsthenewinvokerfunction.
     *@example
     *
     *vararray=_.times(3,_.constant),
     *    object={'a':array,'b':array,'c':array};
     *
     *_.map(['a[2]','c[0]'],_.methodOf(object));
     *//=>[2,0]
     *
     *_.map([['a','2'],['c','0']],_.methodOf(object));
     *//=>[2,0]
     */
    varmethodOf=baseRest(function(object,args){
      returnfunction(path){
        returnbaseInvoke(object,path,args);
      };
    });

    /**
     *Addsallownenumerablestringkeyedfunctionpropertiesofasource
     *objecttothedestinationobject.If`object`isafunction,thenmethods
     *areaddedtoitsprototypeaswell.
     *
     ***Note:**Use`_.runInContext`tocreateapristine`lodash`functionto
     *avoidconflictscausedbymodifyingtheoriginal.
     *
     *@static
     *@since0.1.0
     *@memberOf_
     *@categoryUtil
     *@param{Function|Object}[object=lodash]Thedestinationobject.
     *@param{Object}sourceTheobjectoffunctionstoadd.
     *@param{Object}[options={}]Theoptionsobject.
     *@param{boolean}[options.chain=true]Specifywhethermixinsarechainable.
     *@returns{Function|Object}Returns`object`.
     *@example
     *
     *functionvowels(string){
     *  return_.filter(string,function(v){
     *    return/[aeiou]/i.test(v);
     *  });
     *}
     *
     *_.mixin({'vowels':vowels});
     *_.vowels('fred');
     *//=>['e']
     *
     *_('fred').vowels().value();
     *//=>['e']
     *
     *_.mixin({'vowels':vowels},{'chain':false});
     *_('fred').vowels();
     *//=>['e']
     */
    functionmixin(object,source,options){
      varprops=keys(source),
          methodNames=baseFunctions(source,props);

      if(options==null&&
          !(isObject(source)&&(methodNames.length||!props.length))){
        options=source;
        source=object;
        object=this;
        methodNames=baseFunctions(source,keys(source));
      }
      varchain=!(isObject(options)&&'chain'inoptions)||!!options.chain,
          isFunc=isFunction(object);

      arrayEach(methodNames,function(methodName){
        varfunc=source[methodName];
        object[methodName]=func;
        if(isFunc){
          object.prototype[methodName]=function(){
            varchainAll=this.__chain__;
            if(chain||chainAll){
              varresult=object(this.__wrapped__),
                  actions=result.__actions__=copyArray(this.__actions__);

              actions.push({'func':func,'args':arguments,'thisArg':object});
              result.__chain__=chainAll;
              returnresult;
            }
            returnfunc.apply(object,arrayPush([this.value()],arguments));
          };
        }
      });

      returnobject;
    }

    /**
     *Revertsthe`_`variabletoitspreviousvalueandreturnsareferenceto
     *the`lodash`function.
     *
     *@static
     *@since0.1.0
     *@memberOf_
     *@categoryUtil
     *@returns{Function}Returnsthe`lodash`function.
     *@example
     *
     *varlodash=_.noConflict();
     */
    functionnoConflict(){
      if(root._===this){
        root._=oldDash;
      }
      returnthis;
    }

    /**
     *Thismethodreturns`undefined`.
     *
     *@static
     *@memberOf_
     *@since2.3.0
     *@categoryUtil
     *@example
     *
     *_.times(2,_.noop);
     *//=>[undefined,undefined]
     */
    functionnoop(){
      //Nooperationperformed.
    }

    /**
     *Createsafunctionthatgetstheargumentatindex`n`.If`n`isnegative,
     *thenthargumentfromtheendisreturned.
     *
     *@static
     *@memberOf_
     *@since4.0.0
     *@categoryUtil
     *@param{number}[n=0]Theindexoftheargumenttoreturn.
     *@returns{Function}Returnsthenewpass-thrufunction.
     *@example
     *
     *varfunc=_.nthArg(1);
     *func('a','b','c','d');
     *//=>'b'
     *
     *varfunc=_.nthArg(-2);
     *func('a','b','c','d');
     *//=>'c'
     */
    functionnthArg(n){
      n=toInteger(n);
      returnbaseRest(function(args){
        returnbaseNth(args,n);
      });
    }

    /**
     *Createsafunctionthatinvokes`iteratees`withtheargumentsitreceives
     *andreturnstheirresults.
     *
     *@static
     *@memberOf_
     *@since4.0.0
     *@categoryUtil
     *@param{...(Function|Function[])}[iteratees=[_.identity]]
     * Theiterateestoinvoke.
     *@returns{Function}Returnsthenewfunction.
     *@example
     *
     *varfunc=_.over([Math.max,Math.min]);
     *
     *func(1,2,3,4);
     *//=>[4,1]
     */
    varover=createOver(arrayMap);

    /**
     *Createsafunctionthatchecksif**all**ofthe`predicates`return
     *truthywheninvokedwiththeargumentsitreceives.
     *
     *@static
     *@memberOf_
     *@since4.0.0
     *@categoryUtil
     *@param{...(Function|Function[])}[predicates=[_.identity]]
     * Thepredicatestocheck.
     *@returns{Function}Returnsthenewfunction.
     *@example
     *
     *varfunc=_.overEvery([Boolean,isFinite]);
     *
     *func('1');
     *//=>true
     *
     *func(null);
     *//=>false
     *
     *func(NaN);
     *//=>false
     */
    varoverEvery=createOver(arrayEvery);

    /**
     *Createsafunctionthatchecksif**any**ofthe`predicates`return
     *truthywheninvokedwiththeargumentsitreceives.
     *
     *@static
     *@memberOf_
     *@since4.0.0
     *@categoryUtil
     *@param{...(Function|Function[])}[predicates=[_.identity]]
     * Thepredicatestocheck.
     *@returns{Function}Returnsthenewfunction.
     *@example
     *
     *varfunc=_.overSome([Boolean,isFinite]);
     *
     *func('1');
     *//=>true
     *
     *func(null);
     *//=>true
     *
     *func(NaN);
     *//=>false
     */
    varoverSome=createOver(arraySome);

    /**
     *Createsafunctionthatreturnsthevalueat`path`ofagivenobject.
     *
     *@static
     *@memberOf_
     *@since2.4.0
     *@categoryUtil
     *@param{Array|string}pathThepathofthepropertytoget.
     *@returns{Function}Returnsthenewaccessorfunction.
     *@example
     *
     *varobjects=[
     *  {'a':{'b':2}},
     *  {'a':{'b':1}}
     *];
     *
     *_.map(objects,_.property('a.b'));
     *//=>[2,1]
     *
     *_.map(_.sortBy(objects,_.property(['a','b'])),'a.b');
     *//=>[1,2]
     */
    functionproperty(path){
      returnisKey(path)?baseProperty(toKey(path)):basePropertyDeep(path);
    }

    /**
     *Theoppositeof`_.property`;thismethodcreatesafunctionthatreturns
     *thevalueatagivenpathof`object`.
     *
     *@static
     *@memberOf_
     *@since3.0.0
     *@categoryUtil
     *@param{Object}objectTheobjecttoquery.
     *@returns{Function}Returnsthenewaccessorfunction.
     *@example
     *
     *vararray=[0,1,2],
     *    object={'a':array,'b':array,'c':array};
     *
     *_.map(['a[2]','c[0]'],_.propertyOf(object));
     *//=>[2,0]
     *
     *_.map([['a','2'],['c','0']],_.propertyOf(object));
     *//=>[2,0]
     */
    functionpropertyOf(object){
      returnfunction(path){
        returnobject==null?undefined:baseGet(object,path);
      };
    }

    /**
     *Createsanarrayofnumbers(positiveand/ornegative)progressingfrom
     *`start`upto,butnotincluding,`end`.Astepof`-1`isusedifanegative
     *`start`isspecifiedwithoutan`end`or`step`.If`end`isnotspecified,
     *it'ssetto`start`with`start`thensetto`0`.
     *
     ***Note:**JavaScriptfollowstheIEEE-754standardforresolving
     *floating-pointvalueswhichcanproduceunexpectedresults.
     *
     *@static
     *@since0.1.0
     *@memberOf_
     *@categoryUtil
     *@param{number}[start=0]Thestartoftherange.
     *@param{number}endTheendoftherange.
     *@param{number}[step=1]Thevaluetoincrementordecrementby.
     *@returns{Array}Returnstherangeofnumbers.
     *@see_.inRange,_.rangeRight
     *@example
     *
     *_.range(4);
     *//=>[0,1,2,3]
     *
     *_.range(-4);
     *//=>[0,-1,-2,-3]
     *
     *_.range(1,5);
     *//=>[1,2,3,4]
     *
     *_.range(0,20,5);
     *//=>[0,5,10,15]
     *
     *_.range(0,-4,-1);
     *//=>[0,-1,-2,-3]
     *
     *_.range(1,4,0);
     *//=>[1,1,1]
     *
     *_.range(0);
     *//=>[]
     */
    varrange=createRange();

    /**
     *Thismethodislike`_.range`exceptthatitpopulatesvaluesin
     *descendingorder.
     *
     *@static
     *@memberOf_
     *@since4.0.0
     *@categoryUtil
     *@param{number}[start=0]Thestartoftherange.
     *@param{number}endTheendoftherange.
     *@param{number}[step=1]Thevaluetoincrementordecrementby.
     *@returns{Array}Returnstherangeofnumbers.
     *@see_.inRange,_.range
     *@example
     *
     *_.rangeRight(4);
     *//=>[3,2,1,0]
     *
     *_.rangeRight(-4);
     *//=>[-3,-2,-1,0]
     *
     *_.rangeRight(1,5);
     *//=>[4,3,2,1]
     *
     *_.rangeRight(0,20,5);
     *//=>[15,10,5,0]
     *
     *_.rangeRight(0,-4,-1);
     *//=>[-3,-2,-1,0]
     *
     *_.rangeRight(1,4,0);
     *//=>[1,1,1]
     *
     *_.rangeRight(0);
     *//=>[]
     */
    varrangeRight=createRange(true);

    /**
     *Thismethodreturnsanewemptyarray.
     *
     *@static
     *@memberOf_
     *@since4.13.0
     *@categoryUtil
     *@returns{Array}Returnsthenewemptyarray.
     *@example
     *
     *vararrays=_.times(2,_.stubArray);
     *
     *console.log(arrays);
     *//=>[[],[]]
     *
     *console.log(arrays[0]===arrays[1]);
     *//=>false
     */
    functionstubArray(){
      return[];
    }

    /**
     *Thismethodreturns`false`.
     *
     *@static
     *@memberOf_
     *@since4.13.0
     *@categoryUtil
     *@returns{boolean}Returns`false`.
     *@example
     *
     *_.times(2,_.stubFalse);
     *//=>[false,false]
     */
    functionstubFalse(){
      returnfalse;
    }

    /**
     *Thismethodreturnsanewemptyobject.
     *
     *@static
     *@memberOf_
     *@since4.13.0
     *@categoryUtil
     *@returns{Object}Returnsthenewemptyobject.
     *@example
     *
     *varobjects=_.times(2,_.stubObject);
     *
     *console.log(objects);
     *//=>[{},{}]
     *
     *console.log(objects[0]===objects[1]);
     *//=>false
     */
    functionstubObject(){
      return{};
    }

    /**
     *Thismethodreturnsanemptystring.
     *
     *@static
     *@memberOf_
     *@since4.13.0
     *@categoryUtil
     *@returns{string}Returnstheemptystring.
     *@example
     *
     *_.times(2,_.stubString);
     *//=>['','']
     */
    functionstubString(){
      return'';
    }

    /**
     *Thismethodreturns`true`.
     *
     *@static
     *@memberOf_
     *@since4.13.0
     *@categoryUtil
     *@returns{boolean}Returns`true`.
     *@example
     *
     *_.times(2,_.stubTrue);
     *//=>[true,true]
     */
    functionstubTrue(){
      returntrue;
    }

    /**
     *Invokestheiteratee`n`times,returninganarrayoftheresultsof
     *eachinvocation.Theiterateeisinvokedwithoneargument;(index).
     *
     *@static
     *@since0.1.0
     *@memberOf_
     *@categoryUtil
     *@param{number}nThenumberoftimestoinvoke`iteratee`.
     *@param{Function}[iteratee=_.identity]Thefunctioninvokedperiteration.
     *@returns{Array}Returnsthearrayofresults.
     *@example
     *
     *_.times(3,String);
     *//=>['0','1','2']
     *
     * _.times(4,_.constant(0));
     *//=>[0,0,0,0]
     */
    functiontimes(n,iteratee){
      n=toInteger(n);
      if(n<1||n>MAX_SAFE_INTEGER){
        return[];
      }
      varindex=MAX_ARRAY_LENGTH,
          length=nativeMin(n,MAX_ARRAY_LENGTH);

      iteratee=getIteratee(iteratee);
      n-=MAX_ARRAY_LENGTH;

      varresult=baseTimes(length,iteratee);
      while(++index<n){
        iteratee(index);
      }
      returnresult;
    }

    /**
     *Converts`value`toapropertypatharray.
     *
     *@static
     *@memberOf_
     *@since4.0.0
     *@categoryUtil
     *@param{*}valueThevaluetoconvert.
     *@returns{Array}Returnsthenewpropertypatharray.
     *@example
     *
     *_.toPath('a.b.c');
     *//=>['a','b','c']
     *
     *_.toPath('a[0].b.c');
     *//=>['a','0','b','c']
     */
    functiontoPath(value){
      if(isArray(value)){
        returnarrayMap(value,toKey);
      }
      returnisSymbol(value)?[value]:copyArray(stringToPath(toString(value)));
    }

    /**
     *GeneratesauniqueID.If`prefix`isgiven,theIDisappendedtoit.
     *
     *@static
     *@since0.1.0
     *@memberOf_
     *@categoryUtil
     *@param{string}[prefix='']ThevaluetoprefixtheIDwith.
     *@returns{string}ReturnstheuniqueID.
     *@example
     *
     *_.uniqueId('contact_');
     *//=>'contact_104'
     *
     *_.uniqueId();
     *//=>'105'
     */
    functionuniqueId(prefix){
      varid=++idCounter;
      returntoString(prefix)+id;
    }

    /*------------------------------------------------------------------------*/

    /**
     *Addstwonumbers.
     *
     *@static
     *@memberOf_
     *@since3.4.0
     *@categoryMath
     *@param{number}augendThefirstnumberinanaddition.
     *@param{number}addendThesecondnumberinanaddition.
     *@returns{number}Returnsthetotal.
     *@example
     *
     *_.add(6,4);
     *//=>10
     */
    varadd=createMathOperation(function(augend,addend){
      returnaugend+addend;
    },0);

    /**
     *Computes`number`roundedupto`precision`.
     *
     *@static
     *@memberOf_
     *@since3.10.0
     *@categoryMath
     *@param{number}numberThenumbertoroundup.
     *@param{number}[precision=0]Theprecisiontoroundupto.
     *@returns{number}Returnstheroundedupnumber.
     *@example
     *
     *_.ceil(4.006);
     *//=>5
     *
     *_.ceil(6.004,2);
     *//=>6.01
     *
     *_.ceil(6040,-2);
     *//=>6100
     */
    varceil=createRound('ceil');

    /**
     *Dividetwonumbers.
     *
     *@static
     *@memberOf_
     *@since4.7.0
     *@categoryMath
     *@param{number}dividendThefirstnumberinadivision.
     *@param{number}divisorThesecondnumberinadivision.
     *@returns{number}Returnsthequotient.
     *@example
     *
     *_.divide(6,4);
     *//=>1.5
     */
    vardivide=createMathOperation(function(dividend,divisor){
      returndividend/divisor;
    },1);

    /**
     *Computes`number`roundeddownto`precision`.
     *
     *@static
     *@memberOf_
     *@since3.10.0
     *@categoryMath
     *@param{number}numberThenumbertorounddown.
     *@param{number}[precision=0]Theprecisiontorounddownto.
     *@returns{number}Returnstheroundeddownnumber.
     *@example
     *
     *_.floor(4.006);
     *//=>4
     *
     *_.floor(0.046,2);
     *//=>0.04
     *
     *_.floor(4060,-2);
     *//=>4000
     */
    varfloor=createRound('floor');

    /**
     *Computesthemaximumvalueof`array`.If`array`isemptyorfalsey,
     *`undefined`isreturned.
     *
     *@static
     *@since0.1.0
     *@memberOf_
     *@categoryMath
     *@param{Array}arrayThearraytoiterateover.
     *@returns{*}Returnsthemaximumvalue.
     *@example
     *
     *_.max([4,2,8,6]);
     *//=>8
     *
     *_.max([]);
     *//=>undefined
     */
    functionmax(array){
      return(array&&array.length)
        ?baseExtremum(array,identity,baseGt)
        :undefined;
    }

    /**
     *Thismethodislike`_.max`exceptthatitaccepts`iteratee`whichis
     *invokedforeachelementin`array`togeneratethecriterionbywhich
     *thevalueisranked.Theiterateeisinvokedwithoneargument:(value).
     *
     *@static
     *@memberOf_
     *@since4.0.0
     *@categoryMath
     *@param{Array}arrayThearraytoiterateover.
     *@param{Function}[iteratee=_.identity]Theiterateeinvokedperelement.
     *@returns{*}Returnsthemaximumvalue.
     *@example
     *
     *varobjects=[{'n':1},{'n':2}];
     *
     *_.maxBy(objects,function(o){returno.n;});
     *//=>{'n':2}
     *
     *//The`_.property`iterateeshorthand.
     *_.maxBy(objects,'n');
     *//=>{'n':2}
     */
    functionmaxBy(array,iteratee){
      return(array&&array.length)
        ?baseExtremum(array,getIteratee(iteratee,2),baseGt)
        :undefined;
    }

    /**
     *Computesthemeanofthevaluesin`array`.
     *
     *@static
     *@memberOf_
     *@since4.0.0
     *@categoryMath
     *@param{Array}arrayThearraytoiterateover.
     *@returns{number}Returnsthemean.
     *@example
     *
     *_.mean([4,2,8,6]);
     *//=>5
     */
    functionmean(array){
      returnbaseMean(array,identity);
    }

    /**
     *Thismethodislike`_.mean`exceptthatitaccepts`iteratee`whichis
     *invokedforeachelementin`array`togeneratethevaluetobeaveraged.
     *Theiterateeisinvokedwithoneargument:(value).
     *
     *@static
     *@memberOf_
     *@since4.7.0
     *@categoryMath
     *@param{Array}arrayThearraytoiterateover.
     *@param{Function}[iteratee=_.identity]Theiterateeinvokedperelement.
     *@returns{number}Returnsthemean.
     *@example
     *
     *varobjects=[{'n':4},{'n':2},{'n':8},{'n':6}];
     *
     *_.meanBy(objects,function(o){returno.n;});
     *//=>5
     *
     *//The`_.property`iterateeshorthand.
     *_.meanBy(objects,'n');
     *//=>5
     */
    functionmeanBy(array,iteratee){
      returnbaseMean(array,getIteratee(iteratee,2));
    }

    /**
     *Computestheminimumvalueof`array`.If`array`isemptyorfalsey,
     *`undefined`isreturned.
     *
     *@static
     *@since0.1.0
     *@memberOf_
     *@categoryMath
     *@param{Array}arrayThearraytoiterateover.
     *@returns{*}Returnstheminimumvalue.
     *@example
     *
     *_.min([4,2,8,6]);
     *//=>2
     *
     *_.min([]);
     *//=>undefined
     */
    functionmin(array){
      return(array&&array.length)
        ?baseExtremum(array,identity,baseLt)
        :undefined;
    }

    /**
     *Thismethodislike`_.min`exceptthatitaccepts`iteratee`whichis
     *invokedforeachelementin`array`togeneratethecriterionbywhich
     *thevalueisranked.Theiterateeisinvokedwithoneargument:(value).
     *
     *@static
     *@memberOf_
     *@since4.0.0
     *@categoryMath
     *@param{Array}arrayThearraytoiterateover.
     *@param{Function}[iteratee=_.identity]Theiterateeinvokedperelement.
     *@returns{*}Returnstheminimumvalue.
     *@example
     *
     *varobjects=[{'n':1},{'n':2}];
     *
     *_.minBy(objects,function(o){returno.n;});
     *//=>{'n':1}
     *
     *//The`_.property`iterateeshorthand.
     *_.minBy(objects,'n');
     *//=>{'n':1}
     */
    functionminBy(array,iteratee){
      return(array&&array.length)
        ?baseExtremum(array,getIteratee(iteratee,2),baseLt)
        :undefined;
    }

    /**
     *Multiplytwonumbers.
     *
     *@static
     *@memberOf_
     *@since4.7.0
     *@categoryMath
     *@param{number}multiplierThefirstnumberinamultiplication.
     *@param{number}multiplicandThesecondnumberinamultiplication.
     *@returns{number}Returnstheproduct.
     *@example
     *
     *_.multiply(6,4);
     *//=>24
     */
    varmultiply=createMathOperation(function(multiplier,multiplicand){
      returnmultiplier*multiplicand;
    },1);

    /**
     *Computes`number`roundedto`precision`.
     *
     *@static
     *@memberOf_
     *@since3.10.0
     *@categoryMath
     *@param{number}numberThenumbertoround.
     *@param{number}[precision=0]Theprecisiontoroundto.
     *@returns{number}Returnstheroundednumber.
     *@example
     *
     *_.round(4.006);
     *//=>4
     *
     *_.round(4.006,2);
     *//=>4.01
     *
     *_.round(4060,-2);
     *//=>4100
     */
    varround=createRound('round');

    /**
     *Subtracttwonumbers.
     *
     *@static
     *@memberOf_
     *@since4.0.0
     *@categoryMath
     *@param{number}minuendThefirstnumberinasubtraction.
     *@param{number}subtrahendThesecondnumberinasubtraction.
     *@returns{number}Returnsthedifference.
     *@example
     *
     *_.subtract(6,4);
     *//=>2
     */
    varsubtract=createMathOperation(function(minuend,subtrahend){
      returnminuend-subtrahend;
    },0);

    /**
     *Computesthesumofthevaluesin`array`.
     *
     *@static
     *@memberOf_
     *@since3.4.0
     *@categoryMath
     *@param{Array}arrayThearraytoiterateover.
     *@returns{number}Returnsthesum.
     *@example
     *
     *_.sum([4,2,8,6]);
     *//=>20
     */
    functionsum(array){
      return(array&&array.length)
        ?baseSum(array,identity)
        :0;
    }

    /**
     *Thismethodislike`_.sum`exceptthatitaccepts`iteratee`whichis
     *invokedforeachelementin`array`togeneratethevaluetobesummed.
     *Theiterateeisinvokedwithoneargument:(value).
     *
     *@static
     *@memberOf_
     *@since4.0.0
     *@categoryMath
     *@param{Array}arrayThearraytoiterateover.
     *@param{Function}[iteratee=_.identity]Theiterateeinvokedperelement.
     *@returns{number}Returnsthesum.
     *@example
     *
     *varobjects=[{'n':4},{'n':2},{'n':8},{'n':6}];
     *
     *_.sumBy(objects,function(o){returno.n;});
     *//=>20
     *
     *//The`_.property`iterateeshorthand.
     *_.sumBy(objects,'n');
     *//=>20
     */
    functionsumBy(array,iteratee){
      return(array&&array.length)
        ?baseSum(array,getIteratee(iteratee,2))
        :0;
    }

    /*------------------------------------------------------------------------*/

    //Addmethodsthatreturnwrappedvaluesinchainsequences.
    lodash.after=after;
    lodash.ary=ary;
    lodash.assign=assign;
    lodash.assignIn=assignIn;
    lodash.assignInWith=assignInWith;
    lodash.assignWith=assignWith;
    lodash.at=at;
    lodash.before=before;
    lodash.bind=bind;
    lodash.bindAll=bindAll;
    lodash.bindKey=bindKey;
    lodash.castArray=castArray;
    lodash.chain=chain;
    lodash.chunk=chunk;
    lodash.compact=compact;
    lodash.concat=concat;
    lodash.cond=cond;
    lodash.conforms=conforms;
    lodash.constant=constant;
    lodash.countBy=countBy;
    lodash.create=create;
    lodash.curry=curry;
    lodash.curryRight=curryRight;
    lodash.debounce=debounce;
    lodash.defaults=defaults;
    lodash.defaultsDeep=defaultsDeep;
    lodash.defer=defer;
    lodash.delay=delay;
    lodash.difference=difference;
    lodash.differenceBy=differenceBy;
    lodash.differenceWith=differenceWith;
    lodash.drop=drop;
    lodash.dropRight=dropRight;
    lodash.dropRightWhile=dropRightWhile;
    lodash.dropWhile=dropWhile;
    lodash.fill=fill;
    lodash.filter=filter;
    lodash.flatMap=flatMap;
    lodash.flatMapDeep=flatMapDeep;
    lodash.flatMapDepth=flatMapDepth;
    lodash.flatten=flatten;
    lodash.flattenDeep=flattenDeep;
    lodash.flattenDepth=flattenDepth;
    lodash.flip=flip;
    lodash.flow=flow;
    lodash.flowRight=flowRight;
    lodash.fromPairs=fromPairs;
    lodash.functions=functions;
    lodash.functionsIn=functionsIn;
    lodash.groupBy=groupBy;
    lodash.initial=initial;
    lodash.intersection=intersection;
    lodash.intersectionBy=intersectionBy;
    lodash.intersectionWith=intersectionWith;
    lodash.invert=invert;
    lodash.invertBy=invertBy;
    lodash.invokeMap=invokeMap;
    lodash.iteratee=iteratee;
    lodash.keyBy=keyBy;
    lodash.keys=keys;
    lodash.keysIn=keysIn;
    lodash.map=map;
    lodash.mapKeys=mapKeys;
    lodash.mapValues=mapValues;
    lodash.matches=matches;
    lodash.matchesProperty=matchesProperty;
    lodash.memoize=memoize;
    lodash.merge=merge;
    lodash.mergeWith=mergeWith;
    lodash.method=method;
    lodash.methodOf=methodOf;
    lodash.mixin=mixin;
    lodash.negate=negate;
    lodash.nthArg=nthArg;
    lodash.omit=omit;
    lodash.omitBy=omitBy;
    lodash.once=once;
    lodash.orderBy=orderBy;
    lodash.over=over;
    lodash.overArgs=overArgs;
    lodash.overEvery=overEvery;
    lodash.overSome=overSome;
    lodash.partial=partial;
    lodash.partialRight=partialRight;
    lodash.partition=partition;
    lodash.pick=pick;
    lodash.pickBy=pickBy;
    lodash.property=property;
    lodash.propertyOf=propertyOf;
    lodash.pull=pull;
    lodash.pullAll=pullAll;
    lodash.pullAllBy=pullAllBy;
    lodash.pullAllWith=pullAllWith;
    lodash.pullAt=pullAt;
    lodash.range=range;
    lodash.rangeRight=rangeRight;
    lodash.rearg=rearg;
    lodash.reject=reject;
    lodash.remove=remove;
    lodash.rest=rest;
    lodash.reverse=reverse;
    lodash.sampleSize=sampleSize;
    lodash.set=set;
    lodash.setWith=setWith;
    lodash.shuffle=shuffle;
    lodash.slice=slice;
    lodash.sortBy=sortBy;
    lodash.sortedUniq=sortedUniq;
    lodash.sortedUniqBy=sortedUniqBy;
    lodash.split=split;
    lodash.spread=spread;
    lodash.tail=tail;
    lodash.take=take;
    lodash.takeRight=takeRight;
    lodash.takeRightWhile=takeRightWhile;
    lodash.takeWhile=takeWhile;
    lodash.tap=tap;
    lodash.throttle=throttle;
    lodash.thru=thru;
    lodash.toArray=toArray;
    lodash.toPairs=toPairs;
    lodash.toPairsIn=toPairsIn;
    lodash.toPath=toPath;
    lodash.toPlainObject=toPlainObject;
    lodash.transform=transform;
    lodash.unary=unary;
    lodash.union=union;
    lodash.unionBy=unionBy;
    lodash.unionWith=unionWith;
    lodash.uniq=uniq;
    lodash.uniqBy=uniqBy;
    lodash.uniqWith=uniqWith;
    lodash.unset=unset;
    lodash.unzip=unzip;
    lodash.unzipWith=unzipWith;
    lodash.update=update;
    lodash.updateWith=updateWith;
    lodash.values=values;
    lodash.valuesIn=valuesIn;
    lodash.without=without;
    lodash.words=words;
    lodash.wrap=wrap;
    lodash.xor=xor;
    lodash.xorBy=xorBy;
    lodash.xorWith=xorWith;
    lodash.zip=zip;
    lodash.zipObject=zipObject;
    lodash.zipObjectDeep=zipObjectDeep;
    lodash.zipWith=zipWith;

    //Addaliases.
    lodash.entries=toPairs;
    lodash.entriesIn=toPairsIn;
    lodash.extend=assignIn;
    lodash.extendWith=assignInWith;

    //Addmethodsto`lodash.prototype`.
    mixin(lodash,lodash);

    /*------------------------------------------------------------------------*/

    //Addmethodsthatreturnunwrappedvaluesinchainsequences.
    lodash.add=add;
    lodash.attempt=attempt;
    lodash.camelCase=camelCase;
    lodash.capitalize=capitalize;
    lodash.ceil=ceil;
    lodash.clamp=clamp;
    lodash.clone=clone;
    lodash.cloneDeep=cloneDeep;
    lodash.cloneDeepWith=cloneDeepWith;
    lodash.cloneWith=cloneWith;
    lodash.conformsTo=conformsTo;
    lodash.deburr=deburr;
    lodash.defaultTo=defaultTo;
    lodash.divide=divide;
    lodash.endsWith=endsWith;
    lodash.eq=eq;
    lodash.escape=escape;
    lodash.escapeRegExp=escapeRegExp;
    lodash.every=every;
    lodash.find=find;
    lodash.findIndex=findIndex;
    lodash.findKey=findKey;
    lodash.findLast=findLast;
    lodash.findLastIndex=findLastIndex;
    lodash.findLastKey=findLastKey;
    lodash.floor=floor;
    lodash.forEach=forEach;
    lodash.forEachRight=forEachRight;
    lodash.forIn=forIn;
    lodash.forInRight=forInRight;
    lodash.forOwn=forOwn;
    lodash.forOwnRight=forOwnRight;
    lodash.get=get;
    lodash.gt=gt;
    lodash.gte=gte;
    lodash.has=has;
    lodash.hasIn=hasIn;
    lodash.head=head;
    lodash.identity=identity;
    lodash.includes=includes;
    lodash.indexOf=indexOf;
    lodash.inRange=inRange;
    lodash.invoke=invoke;
    lodash.isArguments=isArguments;
    lodash.isArray=isArray;
    lodash.isArrayBuffer=isArrayBuffer;
    lodash.isArrayLike=isArrayLike;
    lodash.isArrayLikeObject=isArrayLikeObject;
    lodash.isBoolean=isBoolean;
    lodash.isBuffer=isBuffer;
    lodash.isDate=isDate;
    lodash.isElement=isElement;
    lodash.isEmpty=isEmpty;
    lodash.isEqual=isEqual;
    lodash.isEqualWith=isEqualWith;
    lodash.isError=isError;
    lodash.isFinite=isFinite;
    lodash.isFunction=isFunction;
    lodash.isInteger=isInteger;
    lodash.isLength=isLength;
    lodash.isMap=isMap;
    lodash.isMatch=isMatch;
    lodash.isMatchWith=isMatchWith;
    lodash.isNaN=isNaN;
    lodash.isNative=isNative;
    lodash.isNil=isNil;
    lodash.isNull=isNull;
    lodash.isNumber=isNumber;
    lodash.isObject=isObject;
    lodash.isObjectLike=isObjectLike;
    lodash.isPlainObject=isPlainObject;
    lodash.isRegExp=isRegExp;
    lodash.isSafeInteger=isSafeInteger;
    lodash.isSet=isSet;
    lodash.isString=isString;
    lodash.isSymbol=isSymbol;
    lodash.isTypedArray=isTypedArray;
    lodash.isUndefined=isUndefined;
    lodash.isWeakMap=isWeakMap;
    lodash.isWeakSet=isWeakSet;
    lodash.join=join;
    lodash.kebabCase=kebabCase;
    lodash.last=last;
    lodash.lastIndexOf=lastIndexOf;
    lodash.lowerCase=lowerCase;
    lodash.lowerFirst=lowerFirst;
    lodash.lt=lt;
    lodash.lte=lte;
    lodash.max=max;
    lodash.maxBy=maxBy;
    lodash.mean=mean;
    lodash.meanBy=meanBy;
    lodash.min=min;
    lodash.minBy=minBy;
    lodash.stubArray=stubArray;
    lodash.stubFalse=stubFalse;
    lodash.stubObject=stubObject;
    lodash.stubString=stubString;
    lodash.stubTrue=stubTrue;
    lodash.multiply=multiply;
    lodash.nth=nth;
    lodash.noConflict=noConflict;
    lodash.noop=noop;
    lodash.now=now;
    lodash.pad=pad;
    lodash.padEnd=padEnd;
    lodash.padStart=padStart;
    lodash.parseInt=parseInt;
    lodash.random=random;
    lodash.reduce=reduce;
    lodash.reduceRight=reduceRight;
    lodash.repeat=repeat;
    lodash.replace=replace;
    lodash.result=result;
    lodash.round=round;
    lodash.runInContext=runInContext;
    lodash.sample=sample;
    lodash.size=size;
    lodash.snakeCase=snakeCase;
    lodash.some=some;
    lodash.sortedIndex=sortedIndex;
    lodash.sortedIndexBy=sortedIndexBy;
    lodash.sortedIndexOf=sortedIndexOf;
    lodash.sortedLastIndex=sortedLastIndex;
    lodash.sortedLastIndexBy=sortedLastIndexBy;
    lodash.sortedLastIndexOf=sortedLastIndexOf;
    lodash.startCase=startCase;
    lodash.startsWith=startsWith;
    lodash.subtract=subtract;
    lodash.sum=sum;
    lodash.sumBy=sumBy;
    lodash.template=template;
    lodash.times=times;
    lodash.toFinite=toFinite;
    lodash.toInteger=toInteger;
    lodash.toLength=toLength;
    lodash.toLower=toLower;
    lodash.toNumber=toNumber;
    lodash.toSafeInteger=toSafeInteger;
    lodash.toString=toString;
    lodash.toUpper=toUpper;
    lodash.trim=trim;
    lodash.trimEnd=trimEnd;
    lodash.trimStart=trimStart;
    lodash.truncate=truncate;
    lodash.unescape=unescape;
    lodash.uniqueId=uniqueId;
    lodash.upperCase=upperCase;
    lodash.upperFirst=upperFirst;

    //Addaliases.
    lodash.each=forEach;
    lodash.eachRight=forEachRight;
    lodash.first=head;

    mixin(lodash,(function(){
      varsource={};
      baseForOwn(lodash,function(func,methodName){
        if(!hasOwnProperty.call(lodash.prototype,methodName)){
          source[methodName]=func;
        }
      });
      returnsource;
    }()),{'chain':false});

    /*------------------------------------------------------------------------*/

    /**
     *Thesemanticversionnumber.
     *
     *@static
     *@memberOf_
     *@type{string}
     */
    lodash.VERSION=VERSION;

    //Assigndefaultplaceholders.
    arrayEach(['bind','bindKey','curry','curryRight','partial','partialRight'],function(methodName){
      lodash[methodName].placeholder=lodash;
    });

    //Add`LazyWrapper`methodsfor`_.drop`and`_.take`variants.
    arrayEach(['drop','take'],function(methodName,index){
      LazyWrapper.prototype[methodName]=function(n){
        n=n===undefined?1:nativeMax(toInteger(n),0);

        varresult=(this.__filtered__&&!index)
          ?newLazyWrapper(this)
          :this.clone();

        if(result.__filtered__){
          result.__takeCount__=nativeMin(n,result.__takeCount__);
        }else{
          result.__views__.push({
            'size':nativeMin(n,MAX_ARRAY_LENGTH),
            'type':methodName+(result.__dir__<0?'Right':'')
          });
        }
        returnresult;
      };

      LazyWrapper.prototype[methodName+'Right']=function(n){
        returnthis.reverse()[methodName](n).reverse();
      };
    });

    //Add`LazyWrapper`methodsthatacceptan`iteratee`value.
    arrayEach(['filter','map','takeWhile'],function(methodName,index){
      vartype=index+1,
          isFilter=type==LAZY_FILTER_FLAG||type==LAZY_WHILE_FLAG;

      LazyWrapper.prototype[methodName]=function(iteratee){
        varresult=this.clone();
        result.__iteratees__.push({
          'iteratee':getIteratee(iteratee,3),
          'type':type
        });
        result.__filtered__=result.__filtered__||isFilter;
        returnresult;
      };
    });

    //Add`LazyWrapper`methodsfor`_.head`and`_.last`.
    arrayEach(['head','last'],function(methodName,index){
      vartakeName='take'+(index?'Right':'');

      LazyWrapper.prototype[methodName]=function(){
        returnthis[takeName](1).value()[0];
      };
    });

    //Add`LazyWrapper`methodsfor`_.initial`and`_.tail`.
    arrayEach(['initial','tail'],function(methodName,index){
      vardropName='drop'+(index?'':'Right');

      LazyWrapper.prototype[methodName]=function(){
        returnthis.__filtered__?newLazyWrapper(this):this[dropName](1);
      };
    });

    LazyWrapper.prototype.compact=function(){
      returnthis.filter(identity);
    };

    LazyWrapper.prototype.find=function(predicate){
      returnthis.filter(predicate).head();
    };

    LazyWrapper.prototype.findLast=function(predicate){
      returnthis.reverse().find(predicate);
    };

    LazyWrapper.prototype.invokeMap=baseRest(function(path,args){
      if(typeofpath=='function'){
        returnnewLazyWrapper(this);
      }
      returnthis.map(function(value){
        returnbaseInvoke(value,path,args);
      });
    });

    LazyWrapper.prototype.reject=function(predicate){
      returnthis.filter(negate(getIteratee(predicate)));
    };

    LazyWrapper.prototype.slice=function(start,end){
      start=toInteger(start);

      varresult=this;
      if(result.__filtered__&&(start>0||end<0)){
        returnnewLazyWrapper(result);
      }
      if(start<0){
        result=result.takeRight(-start);
      }elseif(start){
        result=result.drop(start);
      }
      if(end!==undefined){
        end=toInteger(end);
        result=end<0?result.dropRight(-end):result.take(end-start);
      }
      returnresult;
    };

    LazyWrapper.prototype.takeRightWhile=function(predicate){
      returnthis.reverse().takeWhile(predicate).reverse();
    };

    LazyWrapper.prototype.toArray=function(){
      returnthis.take(MAX_ARRAY_LENGTH);
    };

    //Add`LazyWrapper`methodsto`lodash.prototype`.
    baseForOwn(LazyWrapper.prototype,function(func,methodName){
      varcheckIteratee=/^(?:filter|find|map|reject)|While$/.test(methodName),
          isTaker=/^(?:head|last)$/.test(methodName),
          lodashFunc=lodash[isTaker?('take'+(methodName=='last'?'Right':'')):methodName],
          retUnwrapped=isTaker||/^find/.test(methodName);

      if(!lodashFunc){
        return;
      }
      lodash.prototype[methodName]=function(){
        varvalue=this.__wrapped__,
            args=isTaker?[1]:arguments,
            isLazy=valueinstanceofLazyWrapper,
            iteratee=args[0],
            useLazy=isLazy||isArray(value);

        varinterceptor=function(value){
          varresult=lodashFunc.apply(lodash,arrayPush([value],args));
          return(isTaker&&chainAll)?result[0]:result;
        };

        if(useLazy&&checkIteratee&&typeofiteratee=='function'&&iteratee.length!=1){
          //Avoidlazyuseiftheiterateehasa"length"valueotherthan`1`.
          isLazy=useLazy=false;
        }
        varchainAll=this.__chain__,
            isHybrid=!!this.__actions__.length,
            isUnwrapped=retUnwrapped&&!chainAll,
            onlyLazy=isLazy&&!isHybrid;

        if(!retUnwrapped&&useLazy){
          value=onlyLazy?value:newLazyWrapper(this);
          varresult=func.apply(value,args);
          result.__actions__.push({'func':thru,'args':[interceptor],'thisArg':undefined});
          returnnewLodashWrapper(result,chainAll);
        }
        if(isUnwrapped&&onlyLazy){
          returnfunc.apply(this,args);
        }
        result=this.thru(interceptor);
        returnisUnwrapped?(isTaker?result.value()[0]:result.value()):result;
      };
    });

    //Add`Array`methodsto`lodash.prototype`.
    arrayEach(['pop','push','shift','sort','splice','unshift'],function(methodName){
      varfunc=arrayProto[methodName],
          chainName=/^(?:push|sort|unshift)$/.test(methodName)?'tap':'thru',
          retUnwrapped=/^(?:pop|shift)$/.test(methodName);

      lodash.prototype[methodName]=function(){
        varargs=arguments;
        if(retUnwrapped&&!this.__chain__){
          varvalue=this.value();
          returnfunc.apply(isArray(value)?value:[],args);
        }
        returnthis[chainName](function(value){
          returnfunc.apply(isArray(value)?value:[],args);
        });
      };
    });

    //Mapminifiedmethodnamestotheirrealnames.
    baseForOwn(LazyWrapper.prototype,function(func,methodName){
      varlodashFunc=lodash[methodName];
      if(lodashFunc){
        varkey=(lodashFunc.name+''),
            names=realNames[key]||(realNames[key]=[]);

        names.push({'name':methodName,'func':lodashFunc});
      }
    });

    realNames[createHybrid(undefined,WRAP_BIND_KEY_FLAG).name]=[{
      'name':'wrapper',
      'func':undefined
    }];

    //Addmethodsto`LazyWrapper`.
    LazyWrapper.prototype.clone=lazyClone;
    LazyWrapper.prototype.reverse=lazyReverse;
    LazyWrapper.prototype.value=lazyValue;

    //Addchainsequencemethodstothe`lodash`wrapper.
    lodash.prototype.at=wrapperAt;
    lodash.prototype.chain=wrapperChain;
    lodash.prototype.commit=wrapperCommit;
    lodash.prototype.next=wrapperNext;
    lodash.prototype.plant=wrapperPlant;
    lodash.prototype.reverse=wrapperReverse;
    lodash.prototype.toJSON=lodash.prototype.valueOf=lodash.prototype.value=wrapperValue;

    //Addlazyaliases.
    lodash.prototype.first=lodash.prototype.head;

    if(symIterator){
      lodash.prototype[symIterator]=wrapperToIterator;
    }
    returnlodash;
  });

  /*--------------------------------------------------------------------------*/

  //Exportlodash.
  var_=runInContext();

  //SomeAMDbuildoptimizers,liker.js,checkforconditionpatternslike:
  if(typeofdefine=='function'&&typeofdefine.amd=='object'&&define.amd){
    //ExposeLodashontheglobalobjecttopreventerrorswhenLodashis
    //loadedbyascripttaginthepresenceofanAMDloader.
    //Seehttp://requirejs.org/docs/errors.html#mismatchformoredetails.
    //Use`_.noConflict`toremoveLodashfromtheglobalobject.
    root._=_;

    //Defineasananonymousmoduleso,throughpathmapping,itcanbe
    //referencedasthe"underscore"module.
    define(function(){
      return_;
    });
  }
  //Checkfor`exports`after`define`incaseabuildoptimizeraddsit.
  elseif(freeModule){
    //ExportforNode.js.
    (freeModule.exports=_)._=_;
    //ExportforCommonJSsupport.
    freeExports._=_;
  }
  else{
    //Exporttotheglobalobject.
    root._=_;
  }
}.call(this));
