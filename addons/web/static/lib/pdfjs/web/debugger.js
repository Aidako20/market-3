/*Copyright2012MozillaFoundation
 *
 *LicensedundertheApacheLicense,Version2.0(the"License");
 *youmaynotusethisfileexceptincompliancewiththeLicense.
 *YoumayobtainacopyoftheLicenseat
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 *Unlessrequiredbyapplicablelaworagreedtoinwriting,software
 *distributedundertheLicenseisdistributedonan"ASIS"BASIS,
 *WITHOUTWARRANTIESORCONDITIONSOFANYKIND,eitherexpressorimplied.
 *SeetheLicenseforthespecificlanguagegoverningpermissionsand
 *limitationsundertheLicense.
 */
/*eslint-disableno-var*/

'usestrict';

varFontInspector=(functionFontInspectorClosure(){
  varfonts,createObjectURL;
  varactive=false;
  varfontAttribute='data-font-name';
  functionremoveSelection(){
    letdivs=document.querySelectorAll(`span[${fontAttribute}]`);
    for(letdivofdivs){
      div.className='';
    }
  }
  functionresetSelection(){
    letdivs=document.querySelectorAll(`span[${fontAttribute}]`);
    for(letdivofdivs){
      div.className='debuggerHideText';
    }
  }
  functionselectFont(fontName,show){
    letdivs=document.querySelectorAll(`span[${fontAttribute}=${fontName}]`);
    for(letdivofdivs){
      div.className=show?'debuggerShowText':'debuggerHideText';
    }
  }
  functiontextLayerClick(e){
    if(!e.target.dataset.fontName||
        e.target.tagName.toUpperCase()!=='SPAN'){
      return;
    }
    varfontName=e.target.dataset.fontName;
    varselects=document.getElementsByTagName('input');
    for(vari=0;i<selects.length;++i){
      varselect=selects[i];
      if(select.dataset.fontName!==fontName){
        continue;
      }
      select.checked=!select.checked;
      selectFont(fontName,select.checked);
      select.scrollIntoView();
    }
  }
  return{
    //Properties/functionsneededbyPDFBug.
    id:'FontInspector',
    name:'FontInspector',
    panel:null,
    manager:null,
    init:functioninit(pdfjsLib){
      varpanel=this.panel;
      panel.setAttribute('style','padding:5px;');
      vartmp=document.createElement('button');
      tmp.addEventListener('click',resetSelection);
      tmp.textContent='Refresh';
      panel.appendChild(tmp);

      fonts=document.createElement('div');
      panel.appendChild(fonts);

      createObjectURL=pdfjsLib.createObjectURL;
    },
    cleanup:functioncleanup(){
      fonts.textContent='';
    },
    enabled:false,
    getactive(){
      returnactive;
    },
    setactive(value){
      active=value;
      if(active){
        document.body.addEventListener('click',textLayerClick,true);
        resetSelection();
      }else{
        document.body.removeEventListener('click',textLayerClick,true);
        removeSelection();
      }
    },
    //FontInspectorspecificfunctions.
    fontAdded:functionfontAdded(fontObj,url){
      functionproperties(obj,list){
        varmoreInfo=document.createElement('table');
        for(vari=0;i<list.length;i++){
          vartr=document.createElement('tr');
          vartd1=document.createElement('td');
          td1.textContent=list[i];
          tr.appendChild(td1);
          vartd2=document.createElement('td');
          td2.textContent=obj[list[i]].toString();
          tr.appendChild(td2);
          moreInfo.appendChild(tr);
        }
        returnmoreInfo;
      }
      varmoreInfo=properties(fontObj,['name','type']);
      varfontName=fontObj.loadedName;
      varfont=document.createElement('div');
      varname=document.createElement('span');
      name.textContent=fontName;
      vardownload=document.createElement('a');
      if(url){
        url=/url\(['"]?([^\)"']+)/.exec(url);
        download.href=url[1];
      }elseif(fontObj.data){
        download.href=createObjectURL(fontObj.data,fontObj.mimeType);
      }
      download.textContent='Download';
      varlogIt=document.createElement('a');
      logIt.href='';
      logIt.textContent='Log';
      logIt.addEventListener('click',function(event){
        event.preventDefault();
        console.log(fontObj);
      });
      varselect=document.createElement('input');
      select.setAttribute('type','checkbox');
      select.dataset.fontName=fontName;
      select.addEventListener('click',(function(select,fontName){
        return(function(){
           selectFont(fontName,select.checked);
        });
      })(select,fontName));
      font.appendChild(select);
      font.appendChild(name);
      font.appendChild(document.createTextNode(''));
      font.appendChild(download);
      font.appendChild(document.createTextNode(''));
      font.appendChild(logIt);
      font.appendChild(moreInfo);
      fonts.appendChild(font);
      //Somewhatofahack,shouldprobablyaddahookforwhenthetextlayer
      //isdonerendering.
      setTimeout(()=>{
        if(this.active){
          resetSelection();
        }
      },2000);
    },
  };
})();

varopMap;

//Managesallthepagesteppers.
varStepperManager=(functionStepperManagerClosure(){
  varsteppers=[];
  varstepperDiv=null;
  varstepperControls=null;
  varstepperChooser=null;
  varbreakPoints=Object.create(null);
  return{
    //Properties/functionsneededbyPDFBug.
    id:'Stepper',
    name:'Stepper',
    panel:null,
    manager:null,
    init:functioninit(pdfjsLib){
      varself=this;
      this.panel.setAttribute('style','padding:5px;');
      stepperControls=document.createElement('div');
      stepperChooser=document.createElement('select');
      stepperChooser.addEventListener('change',function(event){
        self.selectStepper(this.value);
      });
      stepperControls.appendChild(stepperChooser);
      stepperDiv=document.createElement('div');
      this.panel.appendChild(stepperControls);
      this.panel.appendChild(stepperDiv);
      if(sessionStorage.getItem('pdfjsBreakPoints')){
        breakPoints=JSON.parse(sessionStorage.getItem('pdfjsBreakPoints'));
      }

      opMap=Object.create(null);
      for(varkeyinpdfjsLib.OPS){
        opMap[pdfjsLib.OPS[key]]=key;
      }
    },
    cleanup:functioncleanup(){
      stepperChooser.textContent='';
      stepperDiv.textContent='';
      steppers=[];
    },
    enabled:false,
    active:false,
    //Stepperspecificfunctions.
    create:functioncreate(pageIndex){
      vardebug=document.createElement('div');
      debug.id='stepper'+pageIndex;
      debug.setAttribute('hidden',true);
      debug.className='stepper';
      stepperDiv.appendChild(debug);
      varb=document.createElement('option');
      b.textContent='Page'+(pageIndex+1);
      b.value=pageIndex;
      stepperChooser.appendChild(b);
      varinitBreakPoints=breakPoints[pageIndex]||[];
      varstepper=newStepper(debug,pageIndex,initBreakPoints);
      steppers.push(stepper);
      if(steppers.length===1){
        this.selectStepper(pageIndex,false);
      }
      returnstepper;
    },
    selectStepper:functionselectStepper(pageIndex,selectPanel){
      vari;
      pageIndex=pageIndex|0;
      if(selectPanel){
        this.manager.selectPanel(this);
      }
      for(i=0;i<steppers.length;++i){
        varstepper=steppers[i];
        if(stepper.pageIndex===pageIndex){
          stepper.panel.removeAttribute('hidden');
        }else{
          stepper.panel.setAttribute('hidden',true);
        }
      }
      varoptions=stepperChooser.options;
      for(i=0;i<options.length;++i){
        varoption=options[i];
        option.selected=(option.value|0)===pageIndex;
      }
    },
    saveBreakPoints:functionsaveBreakPoints(pageIndex,bps){
      breakPoints[pageIndex]=bps;
      sessionStorage.setItem('pdfjsBreakPoints',JSON.stringify(breakPoints));
    },
  };
})();

//Thestepperforeachpage'sIRQueue.
varStepper=(functionStepperClosure(){
  //ShorterwaytocreateelementandoptionallysettextContent.
  functionc(tag,textContent){
    vard=document.createElement(tag);
    if(textContent){
      d.textContent=textContent;
    }
    returnd;
  }

  functionsimplifyArgs(args){
    if(typeofargs==='string'){
      varMAX_STRING_LENGTH=75;
      returnargs.length<=MAX_STRING_LENGTH?args:
        args.substring(0,MAX_STRING_LENGTH)+'...';
    }
    if(typeofargs!=='object'||args===null){
      returnargs;
    }
    if('length'inargs){//array
      varsimpleArgs=[],i,ii;
      varMAX_ITEMS=10;
      for(i=0,ii=Math.min(MAX_ITEMS,args.length);i<ii;i++){
        simpleArgs.push(simplifyArgs(args[i]));
      }
      if(i<args.length){
        simpleArgs.push('...');
      }
      returnsimpleArgs;
    }
    varsimpleObj={};
    for(varkeyinargs){
      simpleObj[key]=simplifyArgs(args[key]);
    }
    returnsimpleObj;
  }

  functionStepper(panel,pageIndex,initialBreakPoints){
    this.panel=panel;
    this.breakPoint=0;
    this.nextBreakPoint=null;
    this.pageIndex=pageIndex;
    this.breakPoints=initialBreakPoints;
    this.currentIdx=-1;
    this.operatorListIdx=0;
  }
  Stepper.prototype={
    init:functioninit(operatorList){
      varpanel=this.panel;
      varcontent=c('div','c=continue,s=step');
      vartable=c('table');
      content.appendChild(table);
      table.cellSpacing=0;
      varheaderRow=c('tr');
      table.appendChild(headerRow);
      headerRow.appendChild(c('th','Break'));
      headerRow.appendChild(c('th','Idx'));
      headerRow.appendChild(c('th','fn'));
      headerRow.appendChild(c('th','args'));
      panel.appendChild(content);
      this.table=table;
      this.updateOperatorList(operatorList);
    },
    updateOperatorList:functionupdateOperatorList(operatorList){
      varself=this;

      functioncboxOnClick(){
        varx=+this.dataset.idx;
        if(this.checked){
          self.breakPoints.push(x);
        }else{
          self.breakPoints.splice(self.breakPoints.indexOf(x),1);
        }
        StepperManager.saveBreakPoints(self.pageIndex,self.breakPoints);
      }

      varMAX_OPERATORS_COUNT=15000;
      if(this.operatorListIdx>MAX_OPERATORS_COUNT){
        return;
      }

      varchunk=document.createDocumentFragment();
      varoperatorsToDisplay=Math.min(MAX_OPERATORS_COUNT,
                                        operatorList.fnArray.length);
      for(vari=this.operatorListIdx;i<operatorsToDisplay;i++){
        varline=c('tr');
        line.className='line';
        line.dataset.idx=i;
        chunk.appendChild(line);
        varchecked=this.breakPoints.includes(i);
        varargs=operatorList.argsArray[i]||[];

        varbreakCell=c('td');
        varcbox=c('input');
        cbox.type='checkbox';
        cbox.className='points';
        cbox.checked=checked;
        cbox.dataset.idx=i;
        cbox.onclick=cboxOnClick;

        breakCell.appendChild(cbox);
        line.appendChild(breakCell);
        line.appendChild(c('td',i.toString()));
        varfn=opMap[operatorList.fnArray[i]];
        vardecArgs=args;
        if(fn==='showText'){
          varglyphs=args[0];
          varnewArgs=[];
          varstr=[];
          for(varj=0;j<glyphs.length;j++){
            varglyph=glyphs[j];
            if(typeofglyph==='object'&&glyph!==null){
              str.push(glyph.fontChar);
            }else{
              if(str.length>0){
                newArgs.push(str.join(''));
                str=[];
              }
              newArgs.push(glyph);//nullornumber
            }
          }
          if(str.length>0){
            newArgs.push(str.join(''));
          }
          decArgs=[newArgs];
        }
        line.appendChild(c('td',fn));
        line.appendChild(c('td',JSON.stringify(simplifyArgs(decArgs))));
      }
      if(operatorsToDisplay<operatorList.fnArray.length){
        line=c('tr');
        varlastCell=c('td','...');
        lastCell.colspan=4;
        chunk.appendChild(lastCell);
      }
      this.operatorListIdx=operatorList.fnArray.length;
      this.table.appendChild(chunk);
    },
    getNextBreakPoint:functiongetNextBreakPoint(){
      this.breakPoints.sort(function(a,b){
        returna-b;
      });
      for(vari=0;i<this.breakPoints.length;i++){
        if(this.breakPoints[i]>this.currentIdx){
          returnthis.breakPoints[i];
        }
      }
      returnnull;
    },
    breakIt:functionbreakIt(idx,callback){
      StepperManager.selectStepper(this.pageIndex,true);
      varself=this;
      vardom=document;
      self.currentIdx=idx;
      varlistener=function(e){
        switch(e.keyCode){
          case83://step
            dom.removeEventListener('keydown',listener);
            self.nextBreakPoint=self.currentIdx+1;
            self.goTo(-1);
            callback();
            break;
          case67://continue
            dom.removeEventListener('keydown',listener);
            varbreakPoint=self.getNextBreakPoint();
            self.nextBreakPoint=breakPoint;
            self.goTo(-1);
            callback();
            break;
        }
      };
      dom.addEventListener('keydown',listener);
      self.goTo(idx);
    },
    goTo:functiongoTo(idx){
      varallRows=this.panel.getElementsByClassName('line');
      for(varx=0,xx=allRows.length;x<xx;++x){
        varrow=allRows[x];
        if((row.dataset.idx|0)===idx){
          row.style.backgroundColor='rgb(251,250,207)';
          row.scrollIntoView();
        }else{
          row.style.backgroundColor=null;
        }
      }
    },
  };
  returnStepper;
})();

varStats=(functionStats(){
  varstats=[];
  functionclear(node){
    while(node.hasChildNodes()){
      node.removeChild(node.lastChild);
    }
  }
  functiongetStatIndex(pageNumber){
    for(vari=0,ii=stats.length;i<ii;++i){
      if(stats[i].pageNumber===pageNumber){
        returni;
      }
    }
    returnfalse;
  }
  return{
    //Properties/functionsneededbyPDFBug.
    id:'Stats',
    name:'Stats',
    panel:null,
    manager:null,
    init(pdfjsLib){
      this.panel.setAttribute('style','padding:5px;');
    },
    enabled:false,
    active:false,
    //Statsspecificfunctions.
    add(pageNumber,stat){
      if(!stat){
        return;
      }
      varstatsIndex=getStatIndex(pageNumber);
      if(statsIndex!==false){
        varb=stats[statsIndex];
        this.panel.removeChild(b.div);
        stats.splice(statsIndex,1);
      }
      varwrapper=document.createElement('div');
      wrapper.className='stats';
      vartitle=document.createElement('div');
      title.className='title';
      title.textContent='Page:'+pageNumber;
      varstatsDiv=document.createElement('div');
      statsDiv.textContent=stat.toString();
      wrapper.appendChild(title);
      wrapper.appendChild(statsDiv);
      stats.push({pageNumber,div:wrapper,});
      stats.sort(function(a,b){
        returna.pageNumber-b.pageNumber;
      });
      clear(this.panel);
      for(vari=0,ii=stats.length;i<ii;++i){
        this.panel.appendChild(stats[i].div);
      }
    },
    cleanup(){
      stats=[];
      clear(this.panel);
    },
  };
})();

//Managesallthedebuggingtools.
window.PDFBug=(functionPDFBugClosure(){
  varpanelWidth=300;
  varbuttons=[];
  varactivePanel=null;

  return{
    tools:[
      FontInspector,
      StepperManager,
      Stats
    ],
    enable(ids){
      varall=false,tools=this.tools;
      if(ids.length===1&&ids[0]==='all'){
        all=true;
      }
      for(vari=0;i<tools.length;++i){
        vartool=tools[i];
        if(all||ids.includes(tool.id)){
          tool.enabled=true;
        }
      }
      if(!all){
        //Sortthetoolsbytheordertheyareenabled.
        tools.sort(function(a,b){
          varindexA=ids.indexOf(a.id);
          indexA=indexA<0?tools.length:indexA;
          varindexB=ids.indexOf(b.id);
          indexB=indexB<0?tools.length:indexB;
          returnindexA-indexB;
        });
      }
    },
    init(pdfjsLib,container){
      /*
       *BasicLayout:
       *PDFBug
       * Controls
       * Panels
       *   Panel
       *   Panel
       *   ...
       */
      varui=document.createElement('div');
      ui.id='PDFBug';

      varcontrols=document.createElement('div');
      controls.setAttribute('class','controls');
      ui.appendChild(controls);

      varpanels=document.createElement('div');
      panels.setAttribute('class','panels');
      ui.appendChild(panels);

      container.appendChild(ui);
      container.style.right=panelWidth+'px';

      //Initializeallthedebuggingtools.
      vartools=this.tools;
      varself=this;
      for(vari=0;i<tools.length;++i){
        vartool=tools[i];
        varpanel=document.createElement('div');
        varpanelButton=document.createElement('button');
        panelButton.textContent=tool.name;
        panelButton.addEventListener('click',(function(selected){
          returnfunction(event){
            event.preventDefault();
            self.selectPanel(selected);
          };
        })(i));
        controls.appendChild(panelButton);
        panels.appendChild(panel);
        tool.panel=panel;
        tool.manager=this;
        if(tool.enabled){
          tool.init(pdfjsLib);
        }else{
          panel.textContent=tool.name+'isdisabled.Toenableadd'+
                              '"'+tool.id+'"tothepdfBugparameter'+
                              'andrefresh(separatemultiplebycommas).';
        }
        buttons.push(panelButton);
      }
      this.selectPanel(0);
    },
    cleanup(){
      for(vari=0,ii=this.tools.length;i<ii;i++){
        if(this.tools[i].enabled){
          this.tools[i].cleanup();
        }
      }
    },
    selectPanel(index){
      if(typeofindex!=='number'){
        index=this.tools.indexOf(index);
      }
      if(index===activePanel){
        return;
      }
      activePanel=index;
      vartools=this.tools;
      for(varj=0;j<tools.length;++j){
        if(j===index){
          buttons[j].setAttribute('class','active');
          tools[j].active=true;
          tools[j].panel.removeAttribute('hidden');
        }else{
          buttons[j].setAttribute('class','');
          tools[j].active=false;
          tools[j].panel.setAttribute('hidden','true');
        }
      }
    },
  };
})();
