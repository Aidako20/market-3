/*!
FullCalendarDayGridPluginv4.4.0
Docs&License:https://fullcalendar.io/
(c)2019AdamShaw
*/

(function(global,factory){
    typeofexports==='object'&&typeofmodule!=='undefined'?factory(exports,require('@fullcalendar/core')):
    typeofdefine==='function'&&define.amd?define(['exports','@fullcalendar/core'],factory):
    (global=global||self,factory(global.FullCalendarDayGrid={},global.FullCalendar));
}(this,function(exports,core){'usestrict';

    /*!*****************************************************************************
    Copyright(c)MicrosoftCorporation.Allrightsreserved.
    LicensedundertheApacheLicense,Version2.0(the"License");youmaynotuse
    thisfileexceptincompliancewiththeLicense.Youmayobtainacopyofthe
    Licenseathttp://www.apache.org/licenses/LICENSE-2.0

    THISCODEISPROVIDEDONAN*ASIS*BASIS,WITHOUTWARRANTIESORCONDITIONSOFANY
    KIND,EITHEREXPRESSORIMPLIED,INCLUDINGWITHOUTLIMITATIONANYIMPLIED
    WARRANTIESORCONDITIONSOFTITLE,FITNESSFORAPARTICULARPURPOSE,
    MERCHANTABLITYORNON-INFRINGEMENT.

    SeetheApacheVersion2.0Licenseforspecificlanguagegoverningpermissions
    andlimitationsundertheLicense.
    ******************************************************************************/
    /*globalReflect,Promise*/

    varextendStatics=function(d,b){
        extendStatics=Object.setPrototypeOf||
            ({__proto__:[]}instanceofArray&&function(d,b){d.__proto__=b;})||
            function(d,b){for(varpinb)if(b.hasOwnProperty(p))d[p]=b[p];};
        returnextendStatics(d,b);
    };

    function__extends(d,b){
        extendStatics(d,b);
        function__(){this.constructor=d;}
        d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new__());
    }

    var__assign=function(){
        __assign=Object.assign||function__assign(t){
            for(vars,i=1,n=arguments.length;i<n;i++){
                s=arguments[i];
                for(varpins)if(Object.prototype.hasOwnProperty.call(s,p))t[p]=s[p];
            }
            returnt;
        };
        return__assign.apply(this,arguments);
    };

    varDayGridDateProfileGenerator=/**@class*/(function(_super){
        __extends(DayGridDateProfileGenerator,_super);
        functionDayGridDateProfileGenerator(){
            return_super!==null&&_super.apply(this,arguments)||this;
        }
        //Computesthedaterangethatwillberendered.
        DayGridDateProfileGenerator.prototype.buildRenderRange=function(currentRange,currentRangeUnit,isRangeAllDay){
            vardateEnv=this.dateEnv;
            varrenderRange=_super.prototype.buildRenderRange.call(this,currentRange,currentRangeUnit,isRangeAllDay);
            varstart=renderRange.start;
            varend=renderRange.end;
            varendOfWeek;
            //yearandmonthviewsshouldbealignedwithweeks.thisisalreadydoneforweek
            if(/^(year|month)$/.test(currentRangeUnit)){
                start=dateEnv.startOfWeek(start);
                //makeend-of-weekifnotalready
                endOfWeek=dateEnv.startOfWeek(end);
                if(endOfWeek.valueOf()!==end.valueOf()){
                    end=core.addWeeks(endOfWeek,1);
                }
            }
            //ensure6weeks
            if(this.options.monthMode&&
                this.options.fixedWeekCount){
                varrowCnt=Math.ceil(//couldbepartialweeksduetohiddenDays
                core.diffWeeks(start,end));
                end=core.addWeeks(end,6-rowCnt);
            }
            return{start:start,end:end};
        };
        returnDayGridDateProfileGenerator;
    }(core.DateProfileGenerator));

    /*Arectangularpanelthatisabsolutelypositionedoverothercontent
    ------------------------------------------------------------------------------------------------------------------------
    Options:
      -className(string)
      -content(HTMLstring,element,orelementarray)
      -parentEl
      -top
      -left
      -right(thexcoordofwheretherightedgeshouldbe.nota"CSS"right)
      -autoHide(boolean)
      -show(callback)
      -hide(callback)
    */
    varPopover=/**@class*/(function(){
        functionPopover(options){
            var_this=this;
            this.isHidden=true;
            this.margin=10;//thespacerequiredbetweenthepopoverandtheedgesofthescrollcontainer
            //Triggeredwhentheuserclicks*anywhere*inthedocument,fortheautoHidefeature
            this.documentMousedown=function(ev){
                //onlyhidethepopoveriftheclickhappenedoutsidethepopover
                if(_this.el&&!_this.el.contains(ev.target)){
                    _this.hide();
                }
            };
            this.options=options;
        }
        //Showsthepopoveronthespecifiedposition.Rendersitifnotalready
        Popover.prototype.show=function(){
            if(this.isHidden){
                if(!this.el){
                    this.render();
                }
                this.el.style.display='';
                this.position();
                this.isHidden=false;
                this.trigger('show');
            }
        };
        //Hidesthepopover,throughCSS,butdoesnotremoveitfromtheDOM
        Popover.prototype.hide=function(){
            if(!this.isHidden){
                this.el.style.display='none';
                this.isHidden=true;
                this.trigger('hide');
            }
        };
        //Creates`this.el`andrenderscontentinsideofit
        Popover.prototype.render=function(){
            var_this=this;
            varoptions=this.options;
            varel=this.el=core.createElement('div',{
                className:'fc-popover'+(options.className||''),
                style:{
                    top:'0',
                    left:'0'
                }
            });
            if(typeofoptions.content==='function'){
                options.content(el);
            }
            options.parentEl.appendChild(el);
            //whenaclickhappensonanythinginsidewitha'fc-close'className,hidethepopover
            core.listenBySelector(el,'click','.fc-close',function(ev){
                _this.hide();
            });
            if(options.autoHide){
                document.addEventListener('mousedown',this.documentMousedown);
            }
        };
        //Hidesandunregistersanyhandlers
        Popover.prototype.destroy=function(){
            this.hide();
            if(this.el){
                core.removeElement(this.el);
                this.el=null;
            }
            document.removeEventListener('mousedown',this.documentMousedown);
        };
        //Positionsthepopoveroptimally,usingthetop/left/rightoptions
        Popover.prototype.position=function(){
            varoptions=this.options;
            varel=this.el;
            varelDims=el.getBoundingClientRect();//onlyusedforwidth,height
            varorigin=core.computeRect(el.offsetParent);
            varclippingRect=core.computeClippingRect(options.parentEl);
            vartop;//the"position"(not"offset")valuesforthepopover
            varleft;//
            //computetopandleft
            top=options.top||0;
            if(options.left!==undefined){
                left=options.left;
            }
            elseif(options.right!==undefined){
                left=options.right-elDims.width;//derivetheleftvaluefromtherightvalue
            }
            else{
                left=0;
            }
            //constraintotheviewport.ifconstrainedbytwoedges,giveprecedencetotop/left
            top=Math.min(top,clippingRect.bottom-elDims.height-this.margin);
            top=Math.max(top,clippingRect.top+this.margin);
            left=Math.min(left,clippingRect.right-elDims.width-this.margin);
            left=Math.max(left,clippingRect.left+this.margin);
            core.applyStyle(el,{
                top:top-origin.top,
                left:left-origin.left
            });
        };
        //Triggersacallback.Callsafunctionintheoptionhashofthesamename.
        //Argumentsbeyondthefirst`name`areforwardedon.
        //TODO:bettercodereuseforthis.Repeatcode
        //cankillthis???
        Popover.prototype.trigger=function(name){
            if(this.options[name]){
                this.options[name].apply(this,Array.prototype.slice.call(arguments,1));
            }
        };
        returnPopover;
    }());

    /*Event-renderingmethodsfortheDayGridclass
    ----------------------------------------------------------------------------------------------------------------------*/
    //"Simple"isbadaname.hasnothingtodowithSimpleDayGrid
    varSimpleDayGridEventRenderer=/**@class*/(function(_super){
        __extends(SimpleDayGridEventRenderer,_super);
        functionSimpleDayGridEventRenderer(){
            return_super!==null&&_super.apply(this,arguments)||this;
        }
        //BuildstheHTMLtobeusedforthedefaultelementforanindividualsegment
        SimpleDayGridEventRenderer.prototype.renderSegHtml=function(seg,mirrorInfo){
            varcontext=this.context;
            vareventRange=seg.eventRange;
            vareventDef=eventRange.def;
            vareventUi=eventRange.ui;
            varallDay=eventDef.allDay;
            varisDraggable=core.computeEventDraggable(context,eventDef,eventUi);
            varisResizableFromStart=allDay&&seg.isStart&&core.computeEventStartResizable(context,eventDef,eventUi);
            varisResizableFromEnd=allDay&&seg.isEnd&&core.computeEventEndResizable(context,eventDef,eventUi);
            varclasses=this.getSegClasses(seg,isDraggable,isResizableFromStart||isResizableFromEnd,mirrorInfo);
            varskinCss=core.cssToStr(this.getSkinCss(eventUi));
            vartimeHtml='';
            vartimeText;
            vartitleHtml;
            classes.unshift('fc-day-grid-event','fc-h-event');
            //Onlydisplayatimedeventstimeifitisthestartingsegment
            if(seg.isStart){
                timeText=this.getTimeText(eventRange);
                if(timeText){
                    timeHtml='<spanclass="fc-time">'+core.htmlEscape(timeText)+'</span>';
                }
            }
            titleHtml=
                '<spanclass="fc-title">'+
                    (core.htmlEscape(eventDef.title||'')||'&nbsp;')+//wealwayswantonelineofheight
                    '</span>';
            return'<aclass="'+classes.join('')+'"'+
                (eventDef.url?
                    'href="'+core.htmlEscape(eventDef.url)+'"':
                    '')+
                (skinCss?
                    'style="'+skinCss+'"':
                    '')+
                '>'+
                '<divclass="fc-content">'+
                (context.options.dir==='rtl'?
                    titleHtml+''+timeHtml://putanaturalspaceinbetween
                    timeHtml+''+titleHtml//
                )+
                '</div>'+
                (isResizableFromStart?
                    '<divclass="fc-resizerfc-start-resizer"></div>':
                    '')+
                (isResizableFromEnd?
                    '<divclass="fc-resizerfc-end-resizer"></div>':
                    '')+
                '</a>';
        };
        //Computesadefaulteventtimeformattingstringif`eventTimeFormat`isnotexplicitlydefined
        SimpleDayGridEventRenderer.prototype.computeEventTimeFormat=function(){
            return{
                hour:'numeric',
                minute:'2-digit',
                omitZeroMinute:true,
                meridiem:'narrow'
            };
        };
        SimpleDayGridEventRenderer.prototype.computeDisplayEventEnd=function(){
            returnfalse;//TODO:somehowconsidertheoriginatingDayGrid'scolumncount
        };
        returnSimpleDayGridEventRenderer;
    }(core.FgEventRenderer));

    /*Event-renderingmethodsfortheDayGridclass
    ----------------------------------------------------------------------------------------------------------------------*/
    varDayGridEventRenderer=/**@class*/(function(_super){
        __extends(DayGridEventRenderer,_super);
        functionDayGridEventRenderer(dayGrid){
            var_this=_super.call(this)||this;
            _this.dayGrid=dayGrid;
            return_this;
        }
        //Rendersthegivenforegroundeventsegmentsontothegrid
        DayGridEventRenderer.prototype.attachSegs=function(segs,mirrorInfo){
            varrowStructs=this.rowStructs=this.renderSegRows(segs);
            //appendtoeachrow'scontentskeleton
            this.dayGrid.rowEls.forEach(function(rowNode,i){
                rowNode.querySelector('.fc-content-skeleton>table').appendChild(rowStructs[i].tbodyEl);
            });
            //removesthe"more.."eventspopover
            if(!mirrorInfo){
                this.dayGrid.removeSegPopover();
            }
        };
        //Unrendersallcurrentlyrenderedforegroundeventsegments
        DayGridEventRenderer.prototype.detachSegs=function(){
            varrowStructs=this.rowStructs||[];
            varrowStruct;
            while((rowStruct=rowStructs.pop())){
                core.removeElement(rowStruct.tbodyEl);
            }
            this.rowStructs=null;
        };
        //Usesthegiveneventsarraytogenerate<tbody>elementsthatshouldbeappendedtoeachrow'scontentskeleton.
        //ReturnsanarrayofrowStructobjects(seethebottomof`renderSegRow`).
        //PRECONDITION:eachsegmentshoudalreadyhavearenderedandassigned`.el`
        DayGridEventRenderer.prototype.renderSegRows=function(segs){
            varrowStructs=[];
            varsegRows;
            varrow;
            segRows=this.groupSegRows(segs);//groupintonestedarrays
            //iterateeachrowofsegmentgroupings
            for(row=0;row<segRows.length;row++){
                rowStructs.push(this.renderSegRow(row,segRows[row]));
            }
            returnrowStructs;
        };
        //Givenarow#andanarrayofsegmentsallinthesamerow,rendera<tbody>element,askeletonthatcontains
        //thesegments.Returnsobjectwithabunchofinternaldataabouthowtherenderwascalculated.
        //NOTE:modifiesrowSegs
        DayGridEventRenderer.prototype.renderSegRow=function(row,rowSegs){
            varisRtl=this.context.isRtl;
            vardayGrid=this.dayGrid;
            varcolCnt=dayGrid.colCnt;
            varsegLevels=this.buildSegLevels(rowSegs);//groupintosub-arraysoflevels
            varlevelCnt=Math.max(1,segLevels.length);//ensureatleastonelevel
            vartbody=document.createElement('tbody');
            varsegMatrix=[];//lookupforwhichsegmentsarerenderedintowhichlevel+colcells
            varcellMatrix=[];//lookupforall<td>elementsofthelevel+colmatrix
            varloneCellMatrix=[];//lookupfor<td>elementsthatonlytakeupasinglecolumn
            vari;
            varlevelSegs;
            varcol;
            vartr;
            varj;
            varseg;
            vartd;
            //populatesemptycellsfromthecurrentcolumn(`col`)to`endCol`
            functionemptyCellsUntil(endCol){
                while(col<endCol){
                    //trytograbacellfromthelevelaboveandextenditsrowspan.otherwise,createafreshcell
                    td=(loneCellMatrix[i-1]||[])[col];
                    if(td){
                        td.rowSpan=(td.rowSpan||1)+1;
                    }
                    else{
                        td=document.createElement('td');
                        tr.appendChild(td);
                    }
                    cellMatrix[i][col]=td;
                    loneCellMatrix[i][col]=td;
                    col++;
                }
            }
            for(i=0;i<levelCnt;i++){//iteratethroughalllevels
                levelSegs=segLevels[i];
                col=0;
                tr=document.createElement('tr');
                segMatrix.push([]);
                cellMatrix.push([]);
                loneCellMatrix.push([]);
                //levelCntmightbe1eventhoughtherearenoactuallevels.protectagainstthis.
                //thissingleemptyrowisusefulforstyling.
                if(levelSegs){
                    for(j=0;j<levelSegs.length;j++){//iteratethroughsegmentsinlevel
                        seg=levelSegs[j];
                        varleftCol=isRtl?(colCnt-1-seg.lastCol):seg.firstCol;
                        varrightCol=isRtl?(colCnt-1-seg.firstCol):seg.lastCol;
                        emptyCellsUntil(leftCol);
                        //createacontainerthatoccupiesormorecolumns.appendtheeventelement.
                        td=core.createElement('td',{className:'fc-event-container'},seg.el);
                        if(leftCol!==rightCol){
                            td.colSpan=rightCol-leftCol+1;
                        }
                        else{//asingle-columnsegment
                            loneCellMatrix[i][col]=td;
                        }
                        while(col<=rightCol){
                            cellMatrix[i][col]=td;
                            segMatrix[i][col]=seg;
                            col++;
                        }
                        tr.appendChild(td);
                    }
                }
                emptyCellsUntil(colCnt);//finishofftherow
                varintroHtml=dayGrid.renderProps.renderIntroHtml();
                if(introHtml){
                    if(isRtl){
                        core.appendToElement(tr,introHtml);
                    }
                    else{
                        core.prependToElement(tr,introHtml);
                    }
                }
                tbody.appendChild(tr);
            }
            return{
                row:row,
                tbodyEl:tbody,
                cellMatrix:cellMatrix,
                segMatrix:segMatrix,
                segLevels:segLevels,
                segs:rowSegs
            };
        };
        //Stacksaflatarrayofsegments,whichareallassumedtobeinthesamerow,intosubarraysofverticallevels.
        //NOTE:modifiessegs
        DayGridEventRenderer.prototype.buildSegLevels=function(segs){
            varisRtl=this.context.isRtl;
            varcolCnt=this.dayGrid.colCnt;
            varlevels=[];
            vari;
            varseg;
            varj;
            //Givepreferencetoelementswithcertaincriteria,sotheyhave
            //achancetobeclosertothetop.
            segs=this.sortEventSegs(segs);
            for(i=0;i<segs.length;i++){
                seg=segs[i];
                //loopthroughlevels,startingwiththetopmost,untilthesegmentdoesn'tcollidewithothersegments
                for(j=0;j<levels.length;j++){
                    if(!isDaySegCollision(seg,levels[j])){
                        break;
                    }
                }
                //`j`nowholdsthedesiredsubrowindex
                seg.level=j;
                seg.leftCol=isRtl?(colCnt-1-seg.lastCol):seg.firstCol;//forsortingonly
                seg.rightCol=isRtl?(colCnt-1-seg.firstCol):seg.lastCol//forsortingonly
                ;
                (levels[j]||(levels[j]=[])).push(seg);
            }
            //ordersegmentsleft-to-right.veryimportantifcalendarisRTL
            for(j=0;j<levels.length;j++){
                levels[j].sort(compareDaySegCols);
            }
            returnlevels;
        };
        //Givenaflatarrayofsegments,returnanarrayofsub-arrays,groupedbyeachsegment'srow
        DayGridEventRenderer.prototype.groupSegRows=function(segs){
            varsegRows=[];
            vari;
            for(i=0;i<this.dayGrid.rowCnt;i++){
                segRows.push([]);
            }
            for(i=0;i<segs.length;i++){
                segRows[segs[i].row].push(segs[i]);
            }
            returnsegRows;
        };
        //Computesadefault`displayEventEnd`valueifoneisnotexplicltydefined
        DayGridEventRenderer.prototype.computeDisplayEventEnd=function(){
            returnthis.dayGrid.colCnt===1;//we'lllikelyhavespaceifthere'sonlyoneday
        };
        returnDayGridEventRenderer;
    }(SimpleDayGridEventRenderer));
    //Computeswhethertwosegments'columnscollide.Theyareassumedtobeinthesamerow.
    functionisDaySegCollision(seg,otherSegs){
        vari;
        varotherSeg;
        for(i=0;i<otherSegs.length;i++){
            otherSeg=otherSegs[i];
            if(otherSeg.firstCol<=seg.lastCol&&
                otherSeg.lastCol>=seg.firstCol){
                returntrue;
            }
        }
        returnfalse;
    }
    //Acmpfunctionfordeterminingtheleftmostevent
    functioncompareDaySegCols(a,b){
        returna.leftCol-b.leftCol;
    }

    varDayGridMirrorRenderer=/**@class*/(function(_super){
        __extends(DayGridMirrorRenderer,_super);
        functionDayGridMirrorRenderer(){
            return_super!==null&&_super.apply(this,arguments)||this;
        }
        DayGridMirrorRenderer.prototype.attachSegs=function(segs,mirrorInfo){
            varsourceSeg=mirrorInfo.sourceSeg;
            varrowStructs=this.rowStructs=this.renderSegRows(segs);
            //injecteachneweventskeletonintoeachassociatedrow
            this.dayGrid.rowEls.forEach(function(rowNode,row){
                varskeletonEl=core.htmlToElement('<divclass="fc-mirror-skeleton"><table></table></div>');//willbeabsolutelypositioned
                varskeletonTopEl;
                varskeletonTop;
                //Ifthereisanoriginalsegment,matchthetopposition.Otherwise,putitattherow'stoplevel
                if(sourceSeg&&sourceSeg.row===row){
                    skeletonTopEl=sourceSeg.el;
                }
                else{
                    skeletonTopEl=rowNode.querySelector('.fc-content-skeletontbody');
                    if(!skeletonTopEl){//whennoevents
                        skeletonTopEl=rowNode.querySelector('.fc-content-skeletontable');
                    }
                }
                skeletonTop=skeletonTopEl.getBoundingClientRect().top-
                    rowNode.getBoundingClientRect().top;//theoffsetParentorigin
                skeletonEl.style.top=skeletonTop+'px';
                skeletonEl.querySelector('table').appendChild(rowStructs[row].tbodyEl);
                rowNode.appendChild(skeletonEl);
            });
        };
        returnDayGridMirrorRenderer;
    }(DayGridEventRenderer));

    varEMPTY_CELL_HTML='<tdstyle="pointer-events:none"></td>';
    varDayGridFillRenderer=/**@class*/(function(_super){
        __extends(DayGridFillRenderer,_super);
        functionDayGridFillRenderer(dayGrid){
            var_this=_super.call(this)||this;
            _this.fillSegTag='td';//overridethedefaulttagname
            _this.dayGrid=dayGrid;
            return_this;
        }
        DayGridFillRenderer.prototype.renderSegs=function(type,context,segs){
            //don'trendertimedbackgroundevents
            if(type==='bgEvent'){
                segs=segs.filter(function(seg){
                    returnseg.eventRange.def.allDay;
                });
            }
            _super.prototype.renderSegs.call(this,type,context,segs);
        };
        DayGridFillRenderer.prototype.attachSegs=function(type,segs){
            varels=[];
            vari;
            varseg;
            varskeletonEl;
            for(i=0;i<segs.length;i++){
                seg=segs[i];
                skeletonEl=this.renderFillRow(type,seg);
                this.dayGrid.rowEls[seg.row].appendChild(skeletonEl);
                els.push(skeletonEl);
            }
            returnels;
        };
        //GeneratestheHTMLneededforonerowofafill.Requirestheseg'seltoberendered.
        DayGridFillRenderer.prototype.renderFillRow=function(type,seg){
            vardayGrid=this.dayGrid;
            varisRtl=this.context.isRtl;
            varcolCnt=dayGrid.colCnt;
            varleftCol=isRtl?(colCnt-1-seg.lastCol):seg.firstCol;
            varrightCol=isRtl?(colCnt-1-seg.firstCol):seg.lastCol;
            varstartCol=leftCol;
            varendCol=rightCol+1;
            varclassName;
            varskeletonEl;
            vartrEl;
            if(type==='businessHours'){
                className='bgevent';
            }
            else{
                className=type.toLowerCase();
            }
            skeletonEl=core.htmlToElement('<divclass="fc-'+className+'-skeleton">'+
                '<table><tr></tr></table>'+
                '</div>');
            trEl=skeletonEl.getElementsByTagName('tr')[0];
            if(startCol>0){
                core.appendToElement(trEl,
                //willcreate(startCol+1)td's
                newArray(startCol+1).join(EMPTY_CELL_HTML));
            }
            seg.el.colSpan=endCol-startCol;
            trEl.appendChild(seg.el);
            if(endCol<colCnt){
                core.appendToElement(trEl,
                //willcreate(colCnt-endCol)td's
                newArray(colCnt-endCol+1).join(EMPTY_CELL_HTML));
            }
            varintroHtml=dayGrid.renderProps.renderIntroHtml();
            if(introHtml){
                if(isRtl){
                    core.appendToElement(trEl,introHtml);
                }
                else{
                    core.prependToElement(trEl,introHtml);
                }
            }
            returnskeletonEl;
        };
        returnDayGridFillRenderer;
    }(core.FillRenderer));

    varDayTile=/**@class*/(function(_super){
        __extends(DayTile,_super);
        functionDayTile(el){
            var_this=_super.call(this,el)||this;
            vareventRenderer=_this.eventRenderer=newDayTileEventRenderer(_this);
            varrenderFrame=_this.renderFrame=core.memoizeRendering(_this._renderFrame);
            _this.renderFgEvents=core.memoizeRendering(eventRenderer.renderSegs.bind(eventRenderer),eventRenderer.unrender.bind(eventRenderer),[renderFrame]);
            _this.renderEventSelection=core.memoizeRendering(eventRenderer.selectByInstanceId.bind(eventRenderer),eventRenderer.unselectByInstanceId.bind(eventRenderer),[_this.renderFgEvents]);
            _this.renderEventDrag=core.memoizeRendering(eventRenderer.hideByHash.bind(eventRenderer),eventRenderer.showByHash.bind(eventRenderer),[renderFrame]);
            _this.renderEventResize=core.memoizeRendering(eventRenderer.hideByHash.bind(eventRenderer),eventRenderer.showByHash.bind(eventRenderer),[renderFrame]);
            return_this;
        }
        DayTile.prototype.firstContext=function(context){
            context.calendar.registerInteractiveComponent(this,{
                el:this.el,
                useEventCenter:false
            });
        };
        DayTile.prototype.render=function(props,context){
            this.renderFrame(props.date);
            this.renderFgEvents(context,props.fgSegs);
            this.renderEventSelection(props.eventSelection);
            this.renderEventDrag(props.eventDragInstances);
            this.renderEventResize(props.eventResizeInstances);
        };
        DayTile.prototype.destroy=function(){
            _super.prototype.destroy.call(this);
            this.renderFrame.unrender();//shouldunrendereverythingelse
            this.context.calendar.unregisterInteractiveComponent(this);
        };
        DayTile.prototype._renderFrame=function(date){
            var_a=this.context,theme=_a.theme,dateEnv=_a.dateEnv,options=_a.options;
            vartitle=dateEnv.format(date,core.createFormatter(options.dayPopoverFormat)//TODO:cache
            );
            this.el.innerHTML=
                '<divclass="fc-header'+theme.getClass('popoverHeader')+'">'+
                    '<spanclass="fc-title">'+
                    core.htmlEscape(title)+
                    '</span>'+
                    '<spanclass="fc-close'+theme.getIconClass('close')+'"></span>'+
                    '</div>'+
                    '<divclass="fc-body'+theme.getClass('popoverContent')+'">'+
                    '<divclass="fc-event-container"></div>'+
                    '</div>';
            this.segContainerEl=this.el.querySelector('.fc-event-container');
        };
        DayTile.prototype.queryHit=function(positionLeft,positionTop,elWidth,elHeight){
            vardate=this.props.date;//HACK
            if(positionLeft<elWidth&&positionTop<elHeight){
                return{
                    component:this,
                    dateSpan:{
                        allDay:true,
                        range:{start:date,end:core.addDays(date,1)}
                    },
                    dayEl:this.el,
                    rect:{
                        left:0,
                        top:0,
                        right:elWidth,
                        bottom:elHeight
                    },
                    layer:1
                };
            }
        };
        returnDayTile;
    }(core.DateComponent));
    varDayTileEventRenderer=/**@class*/(function(_super){
        __extends(DayTileEventRenderer,_super);
        functionDayTileEventRenderer(dayTile){
            var_this=_super.call(this)||this;
            _this.dayTile=dayTile;
            return_this;
        }
        DayTileEventRenderer.prototype.attachSegs=function(segs){
            for(var_i=0,segs_1=segs;_i<segs_1.length;_i++){
                varseg=segs_1[_i];
                this.dayTile.segContainerEl.appendChild(seg.el);
            }
        };
        DayTileEventRenderer.prototype.detachSegs=function(segs){
            for(var_i=0,segs_2=segs;_i<segs_2.length;_i++){
                varseg=segs_2[_i];
                core.removeElement(seg.el);
            }
        };
        returnDayTileEventRenderer;
    }(SimpleDayGridEventRenderer));

    varDayBgRow=/**@class*/(function(){
        functionDayBgRow(context){
            this.context=context;
        }
        DayBgRow.prototype.renderHtml=function(props){
            varparts=[];
            if(props.renderIntroHtml){
                parts.push(props.renderIntroHtml());
            }
            for(var_i=0,_a=props.cells;_i<_a.length;_i++){
                varcell=_a[_i];
                parts.push(renderCellHtml(cell.date,props.dateProfile,this.context,cell.htmlAttrs));
            }
            if(!props.cells.length){
                parts.push('<tdclass="fc-day'+this.context.theme.getClass('widgetContent')+'"></td>');
            }
            if(this.context.options.dir==='rtl'){
                parts.reverse();
            }
            return'<tr>'+parts.join('')+'</tr>';
        };
        returnDayBgRow;
    }());
    functionrenderCellHtml(date,dateProfile,context,otherAttrs){
        vardateEnv=context.dateEnv,theme=context.theme;
        varisDateValid=core.rangeContainsMarker(dateProfile.activeRange,date);//TODO:calledtoofrequently.cachesomehow.
        varclasses=core.getDayClasses(date,dateProfile,context);
        classes.unshift('fc-day',theme.getClass('widgetContent'));
        return'<tdclass="'+classes.join('')+'"'+
            (isDateValid?
                'data-date="'+dateEnv.formatIso(date,{omitTime:true})+'"':
                '')+
            (otherAttrs?
                ''+otherAttrs:
                '')+
            '></td>';
    }

    varDAY_NUM_FORMAT=core.createFormatter({day:'numeric'});
    varWEEK_NUM_FORMAT=core.createFormatter({week:'numeric'});
    varDayGrid=/**@class*/(function(_super){
        __extends(DayGrid,_super);
        functionDayGrid(el,renderProps){
            var_this=_super.call(this,el)||this;
            _this.bottomCoordPadding=0;//hackforextendingthehitareaforthelastrowofthecoordinategrid
            _this.isCellSizesDirty=false;
            _this.renderProps=renderProps;
            vareventRenderer=_this.eventRenderer=newDayGridEventRenderer(_this);
            varfillRenderer=_this.fillRenderer=newDayGridFillRenderer(_this);
            _this.mirrorRenderer=newDayGridMirrorRenderer(_this);
            varrenderCells=_this.renderCells=core.memoizeRendering(_this._renderCells,_this._unrenderCells);
            _this.renderBusinessHours=core.memoizeRendering(fillRenderer.renderSegs.bind(fillRenderer,'businessHours'),fillRenderer.unrender.bind(fillRenderer,'businessHours'),[renderCells]);
            _this.renderDateSelection=core.memoizeRendering(fillRenderer.renderSegs.bind(fillRenderer,'highlight'),fillRenderer.unrender.bind(fillRenderer,'highlight'),[renderCells]);
            _this.renderBgEvents=core.memoizeRendering(fillRenderer.renderSegs.bind(fillRenderer,'bgEvent'),fillRenderer.unrender.bind(fillRenderer,'bgEvent'),[renderCells]);
            _this.renderFgEvents=core.memoizeRendering(eventRenderer.renderSegs.bind(eventRenderer),eventRenderer.unrender.bind(eventRenderer),[renderCells]);
            _this.renderEventSelection=core.memoizeRendering(eventRenderer.selectByInstanceId.bind(eventRenderer),eventRenderer.unselectByInstanceId.bind(eventRenderer),[_this.renderFgEvents]);
            _this.renderEventDrag=core.memoizeRendering(_this._renderEventDrag,_this._unrenderEventDrag,[renderCells]);
            _this.renderEventResize=core.memoizeRendering(_this._renderEventResize,_this._unrenderEventResize,[renderCells]);
            return_this;
        }
        DayGrid.prototype.render=function(props,context){
            varcells=props.cells;
            this.rowCnt=cells.length;
            this.colCnt=cells[0].length;
            this.renderCells(cells,props.isRigid);
            this.renderBusinessHours(context,props.businessHourSegs);
            this.renderDateSelection(context,props.dateSelectionSegs);
            this.renderBgEvents(context,props.bgEventSegs);
            this.renderFgEvents(context,props.fgEventSegs);
            this.renderEventSelection(props.eventSelection);
            this.renderEventDrag(props.eventDrag);
            this.renderEventResize(props.eventResize);
            if(this.segPopoverTile){
                this.updateSegPopoverTile();
            }
        };
        DayGrid.prototype.destroy=function(){
            _super.prototype.destroy.call(this);
            this.renderCells.unrender();//willunrendereverythingelse
        };
        DayGrid.prototype.getCellRange=function(row,col){
            varstart=this.props.cells[row][col].date;
            varend=core.addDays(start,1);
            return{start:start,end:end};
        };
        DayGrid.prototype.updateSegPopoverTile=function(date,segs){
            varownProps=this.props;
            this.segPopoverTile.receiveProps({
                date:date||this.segPopoverTile.props.date,
                fgSegs:segs||this.segPopoverTile.props.fgSegs,
                eventSelection:ownProps.eventSelection,
                eventDragInstances:ownProps.eventDrag?ownProps.eventDrag.affectedInstances:null,
                eventResizeInstances:ownProps.eventResize?ownProps.eventResize.affectedInstances:null
            },this.context);
        };
        /*DateRendering
        ------------------------------------------------------------------------------------------------------------------*/
        DayGrid.prototype._renderCells=function(cells,isRigid){
            var_a=this.context,calendar=_a.calendar,view=_a.view,isRtl=_a.isRtl,dateEnv=_a.dateEnv;
            var_b=this,rowCnt=_b.rowCnt,colCnt=_b.colCnt;
            varhtml='';
            varrow;
            varcol;
            for(row=0;row<rowCnt;row++){
                html+=this.renderDayRowHtml(row,isRigid);
            }
            this.el.innerHTML=html;
            this.rowEls=core.findElements(this.el,'.fc-row');
            this.cellEls=core.findElements(this.el,'.fc-day,.fc-disabled-day');
            if(isRtl){
                this.cellEls.reverse();
            }
            this.rowPositions=newcore.PositionCache(this.el,this.rowEls,false,true//vertical
            );
            this.colPositions=newcore.PositionCache(this.el,this.cellEls.slice(0,colCnt),//onlythefirstrow
            true,false//horizontal
            );
            //triggerdayRenderwitheachcell'selement
            for(row=0;row<rowCnt;row++){
                for(col=0;col<colCnt;col++){
                    calendar.publiclyTrigger('dayRender',[
                        {
                            date:dateEnv.toDate(cells[row][col].date),
                            el:this.getCellEl(row,col),
                            view:view
                        }
                    ]);
                }
            }
            this.isCellSizesDirty=true;
        };
        DayGrid.prototype._unrenderCells=function(){
            this.removeSegPopover();
        };
        //GeneratestheHTMLforasinglerow,whichisadivthatwrapsatable.
        //`row`istherownumber.
        DayGrid.prototype.renderDayRowHtml=function(row,isRigid){
            vartheme=this.context.theme;
            varclasses=['fc-row','fc-week',theme.getClass('dayRow')];
            if(isRigid){
                classes.push('fc-rigid');
            }
            varbgRow=newDayBgRow(this.context);
            return''+
                '<divclass="'+classes.join('')+'">'+
                '<divclass="fc-bg">'+
                '<tableclass="'+theme.getClass('tableGrid')+'">'+
                bgRow.renderHtml({
                    cells:this.props.cells[row],
                    dateProfile:this.props.dateProfile,
                    renderIntroHtml:this.renderProps.renderBgIntroHtml
                })+
                '</table>'+
                '</div>'+
                '<divclass="fc-content-skeleton">'+
                '<table>'+
                (this.getIsNumbersVisible()?
                    '<thead>'+
                        this.renderNumberTrHtml(row)+
                        '</thead>':
                    '')+
                '</table>'+
                '</div>'+
                '</div>';
        };
        DayGrid.prototype.getIsNumbersVisible=function(){
            returnthis.getIsDayNumbersVisible()||
                this.renderProps.cellWeekNumbersVisible||
                this.renderProps.colWeekNumbersVisible;
        };
        DayGrid.prototype.getIsDayNumbersVisible=function(){
            returnthis.rowCnt>1;
        };
        /*GridNumberRendering
        ------------------------------------------------------------------------------------------------------------------*/
        DayGrid.prototype.renderNumberTrHtml=function(row){
            varisRtl=this.context.isRtl;
            varintro=this.renderProps.renderNumberIntroHtml(row,this);
            return''+
                '<tr>'+
                (isRtl?'':intro)+
                this.renderNumberCellsHtml(row)+
                (isRtl?intro:'')+
                '</tr>';
        };
        DayGrid.prototype.renderNumberCellsHtml=function(row){
            varhtmls=[];
            varcol;
            vardate;
            for(col=0;col<this.colCnt;col++){
                date=this.props.cells[row][col].date;
                htmls.push(this.renderNumberCellHtml(date));
            }
            if(this.context.isRtl){
                htmls.reverse();
            }
            returnhtmls.join('');
        };
        //GeneratestheHTMLforthe<td>softhe"number"rowintheDayGrid'scontentskeleton.
        //Thenumberrowwillonlyexistifeitherdaynumbersorweeknumbersareturnedon.
        DayGrid.prototype.renderNumberCellHtml=function(date){
            var_a=this.context,dateEnv=_a.dateEnv,options=_a.options;
            varhtml='';
            varisDateValid=core.rangeContainsMarker(this.props.dateProfile.activeRange,date);//TODO:calledtoofrequently.cachesomehow.
            varisDayNumberVisible=this.getIsDayNumbersVisible()&&isDateValid;
            varclasses;
            varweekCalcFirstDow;
            if(!isDayNumberVisible&&!this.renderProps.cellWeekNumbersVisible){
                //nonumbersindaycell(weeknumbermustbealongtheside)
                return'<td></td>';// willcreateanemptyspaceaboveevents:(
            }
            classes=core.getDayClasses(date,this.props.dateProfile,this.context);
            classes.unshift('fc-day-top');
            if(this.renderProps.cellWeekNumbersVisible){
                weekCalcFirstDow=dateEnv.weekDow;
            }
            html+='<tdclass="'+classes.join('')+'"'+
                (isDateValid?
                    'data-date="'+dateEnv.formatIso(date,{omitTime:true})+'"':
                    '')+
                '>';
            if(this.renderProps.cellWeekNumbersVisible&&(date.getUTCDay()===weekCalcFirstDow)){
                html+=core.buildGotoAnchorHtml(options,dateEnv,{date:date,type:'week'},{'class':'fc-week-number'},dateEnv.format(date,WEEK_NUM_FORMAT)//innerHTML
                );
            }
            if(isDayNumberVisible){
                html+=core.buildGotoAnchorHtml(options,dateEnv,date,{'class':'fc-day-number'},dateEnv.format(date,DAY_NUM_FORMAT)//innerHTML
                );
            }
            html+='</td>';
            returnhtml;
        };
        /*Sizing
        ------------------------------------------------------------------------------------------------------------------*/
        DayGrid.prototype.updateSize=function(isResize){
            varcalendar=this.context.calendar;
            var_a=this,fillRenderer=_a.fillRenderer,eventRenderer=_a.eventRenderer,mirrorRenderer=_a.mirrorRenderer;
            if(isResize||
                this.isCellSizesDirty||
                calendar.isEventsUpdated//hack
            ){
                this.buildPositionCaches();
                this.isCellSizesDirty=false;
            }
            fillRenderer.computeSizes(isResize);
            eventRenderer.computeSizes(isResize);
            mirrorRenderer.computeSizes(isResize);
            fillRenderer.assignSizes(isResize);
            eventRenderer.assignSizes(isResize);
            mirrorRenderer.assignSizes(isResize);
        };
        DayGrid.prototype.buildPositionCaches=function(){
            this.buildColPositions();
            this.buildRowPositions();
        };
        DayGrid.prototype.buildColPositions=function(){
            this.colPositions.build();
        };
        DayGrid.prototype.buildRowPositions=function(){
            this.rowPositions.build();
            this.rowPositions.bottoms[this.rowCnt-1]+=this.bottomCoordPadding;//hack
        };
        /*HitSystem
        ------------------------------------------------------------------------------------------------------------------*/
        DayGrid.prototype.positionToHit=function(leftPosition,topPosition){
            var_a=this,colPositions=_a.colPositions,rowPositions=_a.rowPositions;
            varcol=colPositions.leftToIndex(leftPosition);
            varrow=rowPositions.topToIndex(topPosition);
            if(row!=null&&col!=null){
                return{
                    row:row,
                    col:col,
                    dateSpan:{
                        range:this.getCellRange(row,col),
                        allDay:true
                    },
                    dayEl:this.getCellEl(row,col),
                    relativeRect:{
                        left:colPositions.lefts[col],
                        right:colPositions.rights[col],
                        top:rowPositions.tops[row],
                        bottom:rowPositions.bottoms[row]
                    }
                };
            }
        };
        /*CellSystem
        ------------------------------------------------------------------------------------------------------------------*/
        //FYI:thefirstcolumnistheleftmostcolumn,regardlessofdate
        DayGrid.prototype.getCellEl=function(row,col){
            returnthis.cellEls[row*this.colCnt+col];
        };
        /*EventDragVisualization
        ------------------------------------------------------------------------------------------------------------------*/
        DayGrid.prototype._renderEventDrag=function(state){
            if(state){
                this.eventRenderer.hideByHash(state.affectedInstances);
                this.fillRenderer.renderSegs('highlight',this.context,state.segs);
            }
        };
        DayGrid.prototype._unrenderEventDrag=function(state){
            if(state){
                this.eventRenderer.showByHash(state.affectedInstances);
                this.fillRenderer.unrender('highlight',this.context);
            }
        };
        /*EventResizeVisualization
        ------------------------------------------------------------------------------------------------------------------*/
        DayGrid.prototype._renderEventResize=function(state){
            if(state){
                this.eventRenderer.hideByHash(state.affectedInstances);
                this.fillRenderer.renderSegs('highlight',this.context,state.segs);
                this.mirrorRenderer.renderSegs(this.context,state.segs,{isResizing:true,sourceSeg:state.sourceSeg});
            }
        };
        DayGrid.prototype._unrenderEventResize=function(state){
            if(state){
                this.eventRenderer.showByHash(state.affectedInstances);
                this.fillRenderer.unrender('highlight',this.context);
                this.mirrorRenderer.unrender(this.context,state.segs,{isResizing:true,sourceSeg:state.sourceSeg});
            }
        };
        /*More+LinkPopover
        ------------------------------------------------------------------------------------------------------------------*/
        DayGrid.prototype.removeSegPopover=function(){
            if(this.segPopover){
                this.segPopover.hide();//inhandler,willcallsegPopover'sremoveElement
            }
        };
        //Limitsthenumberof"levels"(verticallystackinglayersofevents)foreachrowofthegrid.
        //`levelLimit`canbefalse(don'tlimit),anumber,ortrue(shouldbecomputed).
        DayGrid.prototype.limitRows=function(levelLimit){
            varrowStructs=this.eventRenderer.rowStructs||[];
            varrow;//row#
            varrowLevelLimit;
            for(row=0;row<rowStructs.length;row++){
                this.unlimitRow(row);
                if(!levelLimit){
                    rowLevelLimit=false;
                }
                elseif(typeoflevelLimit==='number'){
                    rowLevelLimit=levelLimit;
                }
                else{
                    rowLevelLimit=this.computeRowLevelLimit(row);
                }
                if(rowLevelLimit!==false){
                    this.limitRow(row,rowLevelLimit);
                }
            }
        };
        //Computesthenumberoflevelsarowwillaccomodatewithoutgoingoutsideitsbounds.
        //Assumestherowis"rigid"(maintainsaconstantheightregardlessofwhatisinside).
        //`row`istherownumber.
        DayGrid.prototype.computeRowLevelLimit=function(row){
            varrowEl=this.rowEls[row];//thecontaining"fake"rowdiv
            varrowBottom=rowEl.getBoundingClientRect().bottom;//relativetoviewport!
            vartrEls=core.findChildren(this.eventRenderer.rowStructs[row].tbodyEl);
            vari;
            vartrEl;
            //Revealonelevel<tr>atatimeandstopwhenwefindoneoutofbounds
            for(i=0;i<trEls.length;i++){
                trEl=trEls[i];
                trEl.classList.remove('fc-limited');//resettooriginalstate(reveal)
                if(trEl.getBoundingClientRect().bottom>rowBottom){
                    returni;
                }
            }
            returnfalse;//shouldnotlimitatall
        };
        //Limitsthegivengridrowtothemaximumnumberoflevelsandinjects"more"linksifnecessary.
        //`row`istherownumber.
        //`levelLimit`isanumberforthemaximum(inclusive)numberoflevelsallowed.
        DayGrid.prototype.limitRow=function(row,levelLimit){
            var_this=this;
            varcolCnt=this.colCnt;
            varisRtl=this.context.isRtl;
            varrowStruct=this.eventRenderer.rowStructs[row];
            varmoreNodes=[];//arrayof"more"<a>linksand<td>DOMnodes
            varcol=0;//col#,left-to-right(notchronologically)
            varlevelSegs;//arrayofsegmentobjectsinthelastallowablelevel,orderedleft-to-right
            varcellMatrix;//amatrix(bylevel,thencolumn)ofall<td>elementsintherow
            varlimitedNodes;//arrayoftemporarilyhiddenlevel<tr>andsegment<td>DOMnodes
            vari;
            varseg;
            varsegsBelow;//arrayofsegmentobjectsbelow`seg`inthecurrent`col`
            vartotalSegsBelow;//totalnumberofsegmentsbelow`seg`inanyofthecolumns`seg`occupies
            varcolSegsBelow;//arrayofsegmentarrays,belowseg,oneforeachcolumn(offsetfromsegs'sfirstcolumn)
            vartd;
            varrowSpan;
            varsegMoreNodes;//arrayof"more"<td>cellsthatwillstand-inforthecurrentseg'scell
            varj;
            varmoreTd;
            varmoreWrap;
            varmoreLink;
            //Iteratesthroughemptylevelcellsandplaces"more"linksinsideifneedbe
            varemptyCellsUntil=function(endCol){
                while(col<endCol){
                    segsBelow=_this.getCellSegs(row,col,levelLimit);
                    if(segsBelow.length){
                        td=cellMatrix[levelLimit-1][col];
                        moreLink=_this.renderMoreLink(row,col,segsBelow);
                        moreWrap=core.createElement('div',null,moreLink);
                        td.appendChild(moreWrap);
                        moreNodes.push(moreWrap);
                    }
                    col++;
                }
            };
            if(levelLimit&&levelLimit<rowStruct.segLevels.length){//isitactuallyoverthelimit?
                levelSegs=rowStruct.segLevels[levelLimit-1];
                cellMatrix=rowStruct.cellMatrix;
                limitedNodes=core.findChildren(rowStruct.tbodyEl).slice(levelLimit);//getlevel<tr>elementspastthelimit
                limitedNodes.forEach(function(node){
                    node.classList.add('fc-limited');//hideelementsandgetasimpleDOM-nodesarray
                });
                //iteratethoughsegmentsinthelastallowablelevel
                for(i=0;i<levelSegs.length;i++){
                    seg=levelSegs[i];
                    varleftCol=isRtl?(colCnt-1-seg.lastCol):seg.firstCol;
                    varrightCol=isRtl?(colCnt-1-seg.firstCol):seg.lastCol;
                    emptyCellsUntil(leftCol);//processemptycellsbeforethesegment
                    //determine*all*segmentsbelow`seg`thatoccupythesamecolumns
                    colSegsBelow=[];
                    totalSegsBelow=0;
                    while(col<=rightCol){
                        segsBelow=this.getCellSegs(row,col,levelLimit);
                        colSegsBelow.push(segsBelow);
                        totalSegsBelow+=segsBelow.length;
                        col++;
                    }
                    if(totalSegsBelow){//doweneedtoreplacethissegmentwithoneormany"more"links?
                        td=cellMatrix[levelLimit-1][leftCol];//thesegment'sparentcell
                        rowSpan=td.rowSpan||1;
                        segMoreNodes=[];
                        //makeareplacement<td>foreachcolumnthesegmentoccupies.willbeoneforeachcolspan
                        for(j=0;j<colSegsBelow.length;j++){
                            moreTd=core.createElement('td',{className:'fc-more-cell',rowSpan:rowSpan});
                            segsBelow=colSegsBelow[j];
                            moreLink=this.renderMoreLink(row,leftCol+j,[seg].concat(segsBelow)//countsegashiddentoo
                            );
                            moreWrap=core.createElement('div',null,moreLink);
                            moreTd.appendChild(moreWrap);
                            segMoreNodes.push(moreTd);
                            moreNodes.push(moreTd);
                        }
                        td.classList.add('fc-limited');
                        core.insertAfterElement(td,segMoreNodes);
                        limitedNodes.push(td);
                    }
                }
                emptyCellsUntil(this.colCnt);//finishoffthelevel
                rowStruct.moreEls=moreNodes;//foreasyundoinglater
                rowStruct.limitedEls=limitedNodes;//foreasyundoinglater
            }
        };
        //Revealsalllevelsandremovesall"more"-relatedelementsforagrid'srow.
        //`row`isarownumber.
        DayGrid.prototype.unlimitRow=function(row){
            varrowStruct=this.eventRenderer.rowStructs[row];
            if(rowStruct.moreEls){
                rowStruct.moreEls.forEach(core.removeElement);
                rowStruct.moreEls=null;
            }
            if(rowStruct.limitedEls){
                rowStruct.limitedEls.forEach(function(limitedEl){
                    limitedEl.classList.remove('fc-limited');
                });
                rowStruct.limitedEls=null;
            }
        };
        //Rendersan<a>elementthatrepresentshiddeneventelementforacell.
        //Responsibleforattachingclickhandleraswell.
        DayGrid.prototype.renderMoreLink=function(row,col,hiddenSegs){
            var_this=this;
            var_a=this.context,calendar=_a.calendar,view=_a.view,dateEnv=_a.dateEnv,options=_a.options,isRtl=_a.isRtl;
            vara=core.createElement('a',{className:'fc-more'});
            a.innerText=this.getMoreLinkText(hiddenSegs.length);
            a.addEventListener('click',function(ev){
                varclickOption=options.eventLimitClick;
                var_col=isRtl?_this.colCnt-col-1:col;//HACK:props.cellshasdifferentdirsystem?
                vardate=_this.props.cells[row][_col].date;
                varmoreEl=ev.currentTarget;
                vardayEl=_this.getCellEl(row,col);
                varallSegs=_this.getCellSegs(row,col);
                //rescopethesegmentstobewithinthecell'sdate
                varreslicedAllSegs=_this.resliceDaySegs(allSegs,date);
                varreslicedHiddenSegs=_this.resliceDaySegs(hiddenSegs,date);
                if(typeofclickOption==='function'){
                    //thereturnedvaluecanbeanatomicoption
                    clickOption=calendar.publiclyTrigger('eventLimitClick',[
                        {
                            date:dateEnv.toDate(date),
                            allDay:true,
                            dayEl:dayEl,
                            moreEl:moreEl,
                            segs:reslicedAllSegs,
                            hiddenSegs:reslicedHiddenSegs,
                            jsEvent:ev,
                            view:view
                        }
                    ]);
                }
                if(clickOption==='popover'){
                    _this.showSegPopover(row,col,moreEl,reslicedAllSegs);
                }
                elseif(typeofclickOption==='string'){//aviewname
                    calendar.zoomTo(date,clickOption);
                }
            });
            returna;
        };
        //Revealsthepopoverthatdisplaysalleventswithinacell
        DayGrid.prototype.showSegPopover=function(row,col,moreLink,segs){
            var_this=this;
            var_a=this.context,calendar=_a.calendar,view=_a.view,theme=_a.theme,isRtl=_a.isRtl;
            var_col=isRtl?this.colCnt-col-1:col;//HACK:props.cellshasdifferentdirsystem?
            varmoreWrap=moreLink.parentNode;//the<div>wrapperaroundthe<a>
            vartopEl;//theelementwewanttomatchthetopcoordinateof
            varoptions;
            if(this.rowCnt===1){
                topEl=view.el;//willcausethepopovertocoveranysortofheader
            }
            else{
                topEl=this.rowEls[row];//willalignwithtopofrow
            }
            options={
                className:'fc-more-popover'+theme.getClass('popover'),
                parentEl:view.el,
                top:core.computeRect(topEl).top,
                autoHide:true,
                content:function(el){
                    _this.segPopoverTile=newDayTile(el);
                    _this.updateSegPopoverTile(_this.props.cells[row][_col].date,segs);
                },
                hide:function(){
                    _this.segPopoverTile.destroy();
                    _this.segPopoverTile=null;
                    _this.segPopover.destroy();
                    _this.segPopover=null;
                }
            };
            //Determinehorizontalcoordinate.
            //WeusethemoreWrapinsteadofthe<td>toavoidborderconfusion.
            if(isRtl){
                options.right=core.computeRect(moreWrap).right+1;//+1tobeovercellborder
            }
            else{
                options.left=core.computeRect(moreWrap).left-1;//-1tobeovercellborder
            }
            this.segPopover=newPopover(options);
            this.segPopover.show();
            calendar.releaseAfterSizingTriggers();//hackforeventPositioned
        };
        //Giventheeventswithinanarrayofsegmentobjects,reslicethemtobeinasingleday
        DayGrid.prototype.resliceDaySegs=function(segs,dayDate){
            vardayStart=dayDate;
            vardayEnd=core.addDays(dayStart,1);
            vardayRange={start:dayStart,end:dayEnd};
            varnewSegs=[];
            for(var_i=0,segs_1=segs;_i<segs_1.length;_i++){
                varseg=segs_1[_i];
                vareventRange=seg.eventRange;
                varorigRange=eventRange.range;
                varslicedRange=core.intersectRanges(origRange,dayRange);
                if(slicedRange){
                    newSegs.push(__assign({},seg,{eventRange:{
                            def:eventRange.def,
                            ui:__assign({},eventRange.ui,{durationEditable:false}),
                            instance:eventRange.instance,
                            range:slicedRange
                        },isStart:seg.isStart&&slicedRange.start.valueOf()===origRange.start.valueOf(),isEnd:seg.isEnd&&slicedRange.end.valueOf()===origRange.end.valueOf()}));
                }
            }
            returnnewSegs;
        };
        //Generatesthetextthatshouldbeinsidea"more"link,giventhenumberofeventsitrepresents
        DayGrid.prototype.getMoreLinkText=function(num){
            varopt=this.context.options.eventLimitText;
            if(typeofopt==='function'){
                returnopt(num);
            }
            else{
                return'+'+num+''+opt;
            }
        };
        //Returnssegmentswithinagivencell.
        //If`startLevel`isspecified,returnsonlyeventsincludingandbelowthatlevel.Otherwisereturnsallsegs.
        DayGrid.prototype.getCellSegs=function(row,col,startLevel){
            varsegMatrix=this.eventRenderer.rowStructs[row].segMatrix;
            varlevel=startLevel||0;
            varsegs=[];
            varseg;
            while(level<segMatrix.length){
                seg=segMatrix[level][col];
                if(seg){
                    segs.push(seg);
                }
                level++;
            }
            returnsegs;
        };
        returnDayGrid;
    }(core.DateComponent));

    varWEEK_NUM_FORMAT$1=core.createFormatter({week:'numeric'});
    /*Anabstractclassforthedaygridviews,aswellasmonthview.Rendersoneormorerowsofdaycells.
    ----------------------------------------------------------------------------------------------------------------------*/
    //ItisamanagerforaDayGridsubcomponent,whichdoesmostoftheheavylifting.
    //Itisresponsibleformanagingwidth/height.
    varAbstractDayGridView=/**@class*/(function(_super){
        __extends(AbstractDayGridView,_super);
        functionAbstractDayGridView(){
            var_this=_super!==null&&_super.apply(this,arguments)||this;
            _this.processOptions=core.memoize(_this._processOptions);
            _this.renderSkeleton=core.memoizeRendering(_this._renderSkeleton,_this._unrenderSkeleton);
            /*HeaderRendering
            ------------------------------------------------------------------------------------------------------------------*/
            //GeneratestheHTMLthatwillgobeforetheday-ofweekheadercells
            _this.renderHeadIntroHtml=function(){
                var_a=_this.context,theme=_a.theme,options=_a.options;
                if(_this.colWeekNumbersVisible){
                    return''+
                        '<thclass="fc-week-number'+theme.getClass('widgetHeader')+'"'+_this.weekNumberStyleAttr()+'>'+
                        '<span>'+//neededformatchCellWidths
                        core.htmlEscape(options.weekLabel)+
                        '</span>'+
                        '</th>';
                }
                return'';
            };
            /*DayGridRendering
            ------------------------------------------------------------------------------------------------------------------*/
            //GeneratestheHTMLthatwillgobeforecontent-skeletoncellsthatdisplaytheday/weeknumbers
            _this.renderDayGridNumberIntroHtml=function(row,dayGrid){
                var_a=_this.context,options=_a.options,dateEnv=_a.dateEnv;
                varweekStart=dayGrid.props.cells[row][0].date;
                if(_this.colWeekNumbersVisible){
                    return''+
                        '<tdclass="fc-week-number"'+_this.weekNumberStyleAttr()+'>'+
                        core.buildGotoAnchorHtml(//asidefromlink,importantformatchCellWidths
                        options,dateEnv,{date:weekStart,type:'week',forceOff:dayGrid.colCnt===1},dateEnv.format(weekStart,WEEK_NUM_FORMAT$1)//innerHTML
                        )+
                        '</td>';
                }
                return'';
            };
            //GeneratestheHTMLthatgoesbeforethedaybgcellsforeachday-row
            _this.renderDayGridBgIntroHtml=function(){
                vartheme=_this.context.theme;
                if(_this.colWeekNumbersVisible){
                    return'<tdclass="fc-week-number'+theme.getClass('widgetContent')+'"'+_this.weekNumberStyleAttr()+'></td>';
                }
                return'';
            };
            //GeneratestheHTMLthatgoesbeforeeveryothertypeofrowgeneratedbyDayGrid.
            //Affectsmirror-skeletonandhighlight-skeletonrows.
            _this.renderDayGridIntroHtml=function(){
                if(_this.colWeekNumbersVisible){
                    return'<tdclass="fc-week-number"'+_this.weekNumberStyleAttr()+'></td>';
                }
                return'';
            };
            return_this;
        }
        AbstractDayGridView.prototype._processOptions=function(options){
            if(options.weekNumbers){
                if(options.weekNumbersWithinDays){
                    this.cellWeekNumbersVisible=true;
                    this.colWeekNumbersVisible=false;
                }
                else{
                    this.cellWeekNumbersVisible=false;
                    this.colWeekNumbersVisible=true;
                }
            }
            else{
                this.colWeekNumbersVisible=false;
                this.cellWeekNumbersVisible=false;
            }
        };
        AbstractDayGridView.prototype.render=function(props,context){
            _super.prototype.render.call(this,props,context);
            this.processOptions(context.options);
            this.renderSkeleton(context);
        };
        AbstractDayGridView.prototype.destroy=function(){
            _super.prototype.destroy.call(this);
            this.renderSkeleton.unrender();
        };
        AbstractDayGridView.prototype._renderSkeleton=function(context){
            this.el.classList.add('fc-dayGrid-view');
            this.el.innerHTML=this.renderSkeletonHtml();
            this.scroller=newcore.ScrollComponent('hidden',//overflowx
            'auto'//overflowy
            );
            vardayGridContainerEl=this.scroller.el;
            this.el.querySelector('.fc-body>tr>td').appendChild(dayGridContainerEl);
            dayGridContainerEl.classList.add('fc-day-grid-container');
            vardayGridEl=core.createElement('div',{className:'fc-day-grid'});
            dayGridContainerEl.appendChild(dayGridEl);
            this.dayGrid=newDayGrid(dayGridEl,{
                renderNumberIntroHtml:this.renderDayGridNumberIntroHtml,
                renderBgIntroHtml:this.renderDayGridBgIntroHtml,
                renderIntroHtml:this.renderDayGridIntroHtml,
                colWeekNumbersVisible:this.colWeekNumbersVisible,
                cellWeekNumbersVisible:this.cellWeekNumbersVisible
            });
        };
        AbstractDayGridView.prototype._unrenderSkeleton=function(){
            this.el.classList.remove('fc-dayGrid-view');
            this.dayGrid.destroy();
            this.scroller.destroy();
        };
        //BuildstheHTMLskeletonfortheview.
        //Theday-gridcomponentwillrenderinsideofacontainerdefinedbythisHTML.
        AbstractDayGridView.prototype.renderSkeletonHtml=function(){
            var_a=this.context,theme=_a.theme,options=_a.options;
            return''+
                '<tableclass="'+theme.getClass('tableGrid')+'">'+
                (options.columnHeader?
                    '<theadclass="fc-head">'+
                        '<tr>'+
                        '<tdclass="fc-head-container'+theme.getClass('widgetHeader')+'">&nbsp;</td>'+
                        '</tr>'+
                        '</thead>':
                    '')+
                '<tbodyclass="fc-body">'+
                '<tr>'+
                '<tdclass="'+theme.getClass('widgetContent')+'"></td>'+
                '</tr>'+
                '</tbody>'+
                '</table>';
        };
        //GeneratesanHTMLattributestringforsettingthewidthoftheweeknumbercolumn,ifitisknown
        AbstractDayGridView.prototype.weekNumberStyleAttr=function(){
            if(this.weekNumberWidth!=null){
                return'style="width:'+this.weekNumberWidth+'px"';
            }
            return'';
        };
        //Determineswhethereachrowshouldhaveaconstantheight
        AbstractDayGridView.prototype.hasRigidRows=function(){
            vareventLimit=this.context.options.eventLimit;
            returneventLimit&&typeofeventLimit!=='number';
        };
        /*Dimensions
        ------------------------------------------------------------------------------------------------------------------*/
        AbstractDayGridView.prototype.updateSize=function(isResize,viewHeight,isAuto){
            _super.prototype.updateSize.call(this,isResize,viewHeight,isAuto);//willcallupdateBaseSize.importantthatexecutesfirst
            this.dayGrid.updateSize(isResize);
        };
        //Refreshesthehorizontaldimensionsoftheview
        AbstractDayGridView.prototype.updateBaseSize=function(isResize,viewHeight,isAuto){
            vardayGrid=this.dayGrid;
            vareventLimit=this.context.options.eventLimit;
            varheadRowEl=this.header?this.header.el:null;//HACK
            varscrollerHeight;
            varscrollbarWidths;
            //hacktogivetheviewsomeheightpriortodayGrid'scolumnsbeingrendered
            //TODO:separatesettingheightfromscrollerVSdayGrid.
            if(!dayGrid.rowEls){
                if(!isAuto){
                    scrollerHeight=this.computeScrollerHeight(viewHeight);
                    this.scroller.setHeight(scrollerHeight);
                }
                return;
            }
            if(this.colWeekNumbersVisible){
                //Makesureallweeknumbercellsrunningdownthesidehavethesamewidth.
                this.weekNumberWidth=core.matchCellWidths(core.findElements(this.el,'.fc-week-number'));
            }
            //resetallheightstobenatural
            this.scroller.clear();
            if(headRowEl){
                core.uncompensateScroll(headRowEl);
            }
            dayGrid.removeSegPopover();//killthe"more"popoverifdisplayed
            //istheeventlimitaconstantlevelnumber?
            if(eventLimit&&typeofeventLimit==='number'){
                dayGrid.limitRows(eventLimit);//limitthelevelsfirstsotheheightcanredistributeafter
            }
            //distributetheheighttotherows
            //(viewHeightisa"recommended"valueifisAuto)
            scrollerHeight=this.computeScrollerHeight(viewHeight);
            this.setGridHeight(scrollerHeight,isAuto);
            //istheeventlimitdynamicallycalculated?
            if(eventLimit&&typeofeventLimit!=='number'){
                dayGrid.limitRows(eventLimit);//limitthelevelsafterthegrid'srowheightshavebeenset
            }
            if(!isAuto){//shouldweforcedimensionsofthescrollcontainer?
                this.scroller.setHeight(scrollerHeight);
                scrollbarWidths=this.scroller.getScrollbarWidths();
                if(scrollbarWidths.left||scrollbarWidths.right){//usingscrollbars?
                    if(headRowEl){
                        core.compensateScroll(headRowEl,scrollbarWidths);
                    }
                    //doingthescrollbarcompensationmighthavecreatedtextoverflowwhichcreatedmoreheight.redo
                    scrollerHeight=this.computeScrollerHeight(viewHeight);
                    this.scroller.setHeight(scrollerHeight);
                }
                //guaranteesthesamescrollbarwidths
                this.scroller.lockOverflow(scrollbarWidths);
            }
        };
        //givenadesiredtotalheightoftheview,returnswhattheheightofthescrollershouldbe
        AbstractDayGridView.prototype.computeScrollerHeight=function(viewHeight){
            returnviewHeight-
                core.subtractInnerElHeight(this.el,this.scroller.el);//everythingthat'sNOTthescroller
        };
        //SetstheheightofjusttheDayGridcomponentinthisview
        AbstractDayGridView.prototype.setGridHeight=function(height,isAuto){
            if(this.context.options.monthMode){
                //ifauto,maketheheightofeachrowtheheightthatitwouldbeiftherewere6weeks
                if(isAuto){
                    height*=this.dayGrid.rowCnt/6;
                }
                core.distributeHeight(this.dayGrid.rowEls,height,!isAuto);//ifauto,don'tcompensateforheight-hoggingrows
            }
            else{
                if(isAuto){
                    core.undistributeHeight(this.dayGrid.rowEls);//lettherowsbetheirnaturalheightwithnoexpanding
                }
                else{
                    core.distributeHeight(this.dayGrid.rowEls,height,true);//true=compensateforheight-hoggingrows
                }
            }
        };
        /*Scroll
        ------------------------------------------------------------------------------------------------------------------*/
        AbstractDayGridView.prototype.computeDateScroll=function(duration){
            return{top:0};
        };
        AbstractDayGridView.prototype.queryDateScroll=function(){
            return{top:this.scroller.getScrollTop()};
        };
        AbstractDayGridView.prototype.applyDateScroll=function(scroll){
            if(scroll.top!==undefined){
                this.scroller.setScrollTop(scroll.top);
            }
        };
        returnAbstractDayGridView;
    }(core.View));
    AbstractDayGridView.prototype.dateProfileGeneratorClass=DayGridDateProfileGenerator;

    varSimpleDayGrid=/**@class*/(function(_super){
        __extends(SimpleDayGrid,_super);
        functionSimpleDayGrid(dayGrid){
            var_this=_super.call(this,dayGrid.el)||this;
            _this.slicer=newDayGridSlicer();
            _this.dayGrid=dayGrid;
            return_this;
        }
        SimpleDayGrid.prototype.firstContext=function(context){
            context.calendar.registerInteractiveComponent(this,{el:this.dayGrid.el});
        };
        SimpleDayGrid.prototype.destroy=function(){
            _super.prototype.destroy.call(this);
            this.context.calendar.unregisterInteractiveComponent(this);
        };
        SimpleDayGrid.prototype.render=function(props,context){
            vardayGrid=this.dayGrid;
            vardateProfile=props.dateProfile,dayTable=props.dayTable;
            dayGrid.receiveProps(__assign({},this.slicer.sliceProps(props,dateProfile,props.nextDayThreshold,context.calendar,dayGrid,dayTable),{dateProfile:dateProfile,cells:dayTable.cells,isRigid:props.isRigid}),context);
        };
        SimpleDayGrid.prototype.buildPositionCaches=function(){
            this.dayGrid.buildPositionCaches();
        };
        SimpleDayGrid.prototype.queryHit=function(positionLeft,positionTop){
            varrawHit=this.dayGrid.positionToHit(positionLeft,positionTop);
            if(rawHit){
                return{
                    component:this.dayGrid,
                    dateSpan:rawHit.dateSpan,
                    dayEl:rawHit.dayEl,
                    rect:{
                        left:rawHit.relativeRect.left,
                        right:rawHit.relativeRect.right,
                        top:rawHit.relativeRect.top,
                        bottom:rawHit.relativeRect.bottom
                    },
                    layer:0
                };
            }
        };
        returnSimpleDayGrid;
    }(core.DateComponent));
    varDayGridSlicer=/**@class*/(function(_super){
        __extends(DayGridSlicer,_super);
        functionDayGridSlicer(){
            return_super!==null&&_super.apply(this,arguments)||this;
        }
        DayGridSlicer.prototype.sliceRange=function(dateRange,dayTable){
            returndayTable.sliceRange(dateRange);
        };
        returnDayGridSlicer;
    }(core.Slicer));

    varDayGridView=/**@class*/(function(_super){
        __extends(DayGridView,_super);
        functionDayGridView(){
            var_this=_super!==null&&_super.apply(this,arguments)||this;
            _this.buildDayTable=core.memoize(buildDayTable);
            return_this;
        }
        DayGridView.prototype.render=function(props,context){
            _super.prototype.render.call(this,props,context);//willcall_renderSkeleton/_unrenderSkeleton
            vardateProfile=this.props.dateProfile;
            vardayTable=this.dayTable=
                this.buildDayTable(dateProfile,props.dateProfileGenerator);
            if(this.header){
                this.header.receiveProps({
                    dateProfile:dateProfile,
                    dates:dayTable.headerDates,
                    datesRepDistinctDays:dayTable.rowCnt===1,
                    renderIntroHtml:this.renderHeadIntroHtml
                },context);
            }
            this.simpleDayGrid.receiveProps({
                dateProfile:dateProfile,
                dayTable:dayTable,
                businessHours:props.businessHours,
                dateSelection:props.dateSelection,
                eventStore:props.eventStore,
                eventUiBases:props.eventUiBases,
                eventSelection:props.eventSelection,
                eventDrag:props.eventDrag,
                eventResize:props.eventResize,
                isRigid:this.hasRigidRows(),
                nextDayThreshold:this.context.nextDayThreshold
            },context);
        };
        DayGridView.prototype._renderSkeleton=function(context){
            _super.prototype._renderSkeleton.call(this,context);
            if(context.options.columnHeader){
                this.header=newcore.DayHeader(this.el.querySelector('.fc-head-container'));
            }
            this.simpleDayGrid=newSimpleDayGrid(this.dayGrid);
        };
        DayGridView.prototype._unrenderSkeleton=function(){
            _super.prototype._unrenderSkeleton.call(this);
            if(this.header){
                this.header.destroy();
            }
            this.simpleDayGrid.destroy();
        };
        returnDayGridView;
    }(AbstractDayGridView));
    functionbuildDayTable(dateProfile,dateProfileGenerator){
        vardaySeries=newcore.DaySeries(dateProfile.renderRange,dateProfileGenerator);
        returnnewcore.DayTable(daySeries,/year|month|week/.test(dateProfile.currentRangeUnit));
    }

    varmain=core.createPlugin({
        defaultView:'dayGridMonth',
        views:{
            dayGrid:DayGridView,
            dayGridDay:{
                type:'dayGrid',
                duration:{days:1}
            },
            dayGridWeek:{
                type:'dayGrid',
                duration:{weeks:1}
            },
            dayGridMonth:{
                type:'dayGrid',
                duration:{months:1},
                monthMode:true,
                fixedWeekCount:true
            }
        }
    });

    exports.AbstractDayGridView=AbstractDayGridView;
    exports.DayBgRow=DayBgRow;
    exports.DayGrid=DayGrid;
    exports.DayGridSlicer=DayGridSlicer;
    exports.DayGridView=DayGridView;
    exports.SimpleDayGrid=SimpleDayGrid;
    exports.buildBasicDayTable=buildDayTable;
    exports.default=main;

    Object.defineProperty(exports,'__esModule',{value:true});

}));
