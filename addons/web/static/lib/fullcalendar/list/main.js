/*!
FullCalendarListViewPluginv4.4.0
Docs&License:https://fullcalendar.io/
(c)2019AdamShaw
*/

(function(global,factory){
    typeofexports==='object'&&typeofmodule!=='undefined'?factory(exports,require('@fullcalendar/core')):
    typeofdefine==='function'&&define.amd?define(['exports','@fullcalendar/core'],factory):
    (global=global||self,factory(global.FullCalendarList={},global.FullCalendar));
}(this,function(exports,core){'usestrict';

    /*!*****************************************************************************
    Copyright(c)MicrosoftCorporation.Allrightsreserved.
    LicensedundertheApacheLicense,Version2.0(the"License");youmaynotuse
    thisfileexceptincompliancewiththeLicense.Youmayobtainacopyofthe
    Licenseathttp://www.apache.org/licenses/LICENSE-2.0

    THISCODEISPROVIDEDONAN*ASIS*BASIS,WITHOUTWARRANTIESORCONDITIONSOFANY
    KIND,EITHEREXPRESSORIMPLIED,INCLUDINGWITHOUTLIMITATIONANYIMPLIED
    WARRANTIESORCONDITIONSOFTITLE,FITNESSFORAPARTICULARPURPOSE,
    MERCHANTABLITYORNON-INFRINGEMENT.

    SeetheApacheVersion2.0Licenseforspecificlanguagegoverningpermissions
    andlimitationsundertheLicense.
    ******************************************************************************/
    /*globalReflect,Promise*/

    varextendStatics=function(d,b){
        extendStatics=Object.setPrototypeOf||
            ({__proto__:[]}instanceofArray&&function(d,b){d.__proto__=b;})||
            function(d,b){for(varpinb)if(b.hasOwnProperty(p))d[p]=b[p];};
        returnextendStatics(d,b);
    };

    function__extends(d,b){
        extendStatics(d,b);
        function__(){this.constructor=d;}
        d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new__());
    }

    varListEventRenderer=/**@class*/(function(_super){
        __extends(ListEventRenderer,_super);
        functionListEventRenderer(listView){
            var_this=_super.call(this)||this;
            _this.listView=listView;
            return_this;
        }
        ListEventRenderer.prototype.attachSegs=function(segs){
            if(!segs.length){
                this.listView.renderEmptyMessage();
            }
            else{
                this.listView.renderSegList(segs);
            }
        };
        ListEventRenderer.prototype.detachSegs=function(){
        };
        //generatestheHTMLforasingleeventrow
        ListEventRenderer.prototype.renderSegHtml=function(seg){
            var_a=this.context,theme=_a.theme,options=_a.options;
            vareventRange=seg.eventRange;
            vareventDef=eventRange.def;
            vareventInstance=eventRange.instance;
            vareventUi=eventRange.ui;
            varurl=eventDef.url;
            varclasses=['fc-list-item'].concat(eventUi.classNames);
            varbgColor=eventUi.backgroundColor;
            vartimeHtml;
            if(eventDef.allDay){
                timeHtml=core.getAllDayHtml(options);
            }
            elseif(core.isMultiDayRange(eventRange.range)){
                if(seg.isStart){
                    timeHtml=core.htmlEscape(this._getTimeText(eventInstance.range.start,seg.end,false//allDay
                    ));
                }
                elseif(seg.isEnd){
                    timeHtml=core.htmlEscape(this._getTimeText(seg.start,eventInstance.range.end,false//allDay
                    ));
                }
                else{//innersegmentthatlaststhewholeday
                    timeHtml=core.getAllDayHtml(options);
                }
            }
            else{
                //Displaythenormaltimetextforthe*event's*times
                timeHtml=core.htmlEscape(this.getTimeText(eventRange));
            }
            if(url){
                classes.push('fc-has-url');
            }
            return'<trclass="'+classes.join('')+'">'+
                (this.displayEventTime?
                    '<tdclass="fc-list-item-time'+theme.getClass('widgetContent')+'">'+
                        (timeHtml||'')+
                        '</td>':
                    '')+
                '<tdclass="fc-list-item-marker'+theme.getClass('widgetContent')+'">'+
                '<spanclass="fc-event-dot"'+
                (bgColor?
                    'style="background-color:'+bgColor+'"':
                    '')+
                '></span>'+
                '</td>'+
                '<tdclass="fc-list-item-title'+theme.getClass('widgetContent')+'">'+
                '<a'+(url?'href="'+core.htmlEscape(url)+'"':'')+'>'+
                core.htmlEscape(eventDef.title||'')+
                '</a>'+
                '</td>'+
                '</tr>';
        };
        //like"4:00am"
        ListEventRenderer.prototype.computeEventTimeFormat=function(){
            return{
                hour:'numeric',
                minute:'2-digit',
                meridiem:'short'
            };
        };
        returnListEventRenderer;
    }(core.FgEventRenderer));

    /*
    Responsibleforthescroller,andforwardingevent-relatedactionsintothe"grid".
    */
    varListView=/**@class*/(function(_super){
        __extends(ListView,_super);
        functionListView(viewSpec,parentEl){
            var_this=_super.call(this,viewSpec,parentEl)||this;
            _this.computeDateVars=core.memoize(computeDateVars);
            _this.eventStoreToSegs=core.memoize(_this._eventStoreToSegs);
            _this.renderSkeleton=core.memoizeRendering(_this._renderSkeleton,_this._unrenderSkeleton);
            vareventRenderer=_this.eventRenderer=newListEventRenderer(_this);
            _this.renderContent=core.memoizeRendering(eventRenderer.renderSegs.bind(eventRenderer),eventRenderer.unrender.bind(eventRenderer),[_this.renderSkeleton]);
            return_this;
        }
        ListView.prototype.firstContext=function(context){
            context.calendar.registerInteractiveComponent(this,{
                el:this.el
                //TODO:makeawarethatitdoesn'tdoHits
            });
        };
        ListView.prototype.render=function(props,context){
            _super.prototype.render.call(this,props,context);
            var_a=this.computeDateVars(props.dateProfile),dayDates=_a.dayDates,dayRanges=_a.dayRanges;
            this.dayDates=dayDates;
            this.renderSkeleton(context);
            this.renderContent(context,this.eventStoreToSegs(props.eventStore,props.eventUiBases,dayRanges));
        };
        ListView.prototype.destroy=function(){
            _super.prototype.destroy.call(this);
            this.renderSkeleton.unrender();
            this.renderContent.unrender();
            this.context.calendar.unregisterInteractiveComponent(this);
        };
        ListView.prototype._renderSkeleton=function(context){
            vartheme=context.theme;
            this.el.classList.add('fc-list-view');
            varlistViewClassNames=(theme.getClass('listView')||'').split('');//wishwedidn'thavetodothis
            for(var_i=0,listViewClassNames_1=listViewClassNames;_i<listViewClassNames_1.length;_i++){
                varlistViewClassName=listViewClassNames_1[_i];
                if(listViewClassName){//incaseinputwasemptystring
                    this.el.classList.add(listViewClassName);
                }
            }
            this.scroller=newcore.ScrollComponent('hidden',//overflowx
            'auto'//overflowy
            );
            this.el.appendChild(this.scroller.el);
            this.contentEl=this.scroller.el;//shortcut
        };
        ListView.prototype._unrenderSkeleton=function(){
            //TODO:removeclassNames
            this.scroller.destroy();//willremovetheGridtoo
        };
        ListView.prototype.updateSize=function(isResize,viewHeight,isAuto){
            _super.prototype.updateSize.call(this,isResize,viewHeight,isAuto);
            this.eventRenderer.computeSizes(isResize);
            this.eventRenderer.assignSizes(isResize);
            this.scroller.clear();//setsheightto'auto'andclearsoverflow
            if(!isAuto){
                this.scroller.setHeight(this.computeScrollerHeight(viewHeight));
            }
        };
        ListView.prototype.computeScrollerHeight=function(viewHeight){
            returnviewHeight-
                core.subtractInnerElHeight(this.el,this.scroller.el);//everythingthat'sNOTthescroller
        };
        ListView.prototype._eventStoreToSegs=function(eventStore,eventUiBases,dayRanges){
            returnthis.eventRangesToSegs(core.sliceEventStore(eventStore,eventUiBases,this.props.dateProfile.activeRange,this.context.nextDayThreshold).fg,dayRanges);
        };
        ListView.prototype.eventRangesToSegs=function(eventRanges,dayRanges){
            varsegs=[];
            for(var_i=0,eventRanges_1=eventRanges;_i<eventRanges_1.length;_i++){
                vareventRange=eventRanges_1[_i];
                segs.push.apply(segs,this.eventRangeToSegs(eventRange,dayRanges));
            }
            returnsegs;
        };
        ListView.prototype.eventRangeToSegs=function(eventRange,dayRanges){
            var_a=this.context,dateEnv=_a.dateEnv,nextDayThreshold=_a.nextDayThreshold;
            varrange=eventRange.range;
            varallDay=eventRange.def.allDay;
            vardayIndex;
            varsegRange;
            varseg;
            varsegs=[];
            for(dayIndex=0;dayIndex<dayRanges.length;dayIndex++){
                segRange=core.intersectRanges(range,dayRanges[dayIndex]);
                if(segRange){
                    seg={
                        component:this,
                        eventRange:eventRange,
                        start:segRange.start,
                        end:segRange.end,
                        isStart:eventRange.isStart&&segRange.start.valueOf()===range.start.valueOf(),
                        isEnd:eventRange.isEnd&&segRange.end.valueOf()===range.end.valueOf(),
                        dayIndex:dayIndex
                    };
                    segs.push(seg);
                    //detectwhenrangewon'tgofullyintothenextday,
                    //andmutatethelatestsegtothebetheend.
                    if(!seg.isEnd&&!allDay&&
                        dayIndex+1<dayRanges.length&&
                        range.end<
                            dateEnv.add(dayRanges[dayIndex+1].start,nextDayThreshold)){
                        seg.end=range.end;
                        seg.isEnd=true;
                        break;
                    }
                }
            }
            returnsegs;
        };
        ListView.prototype.renderEmptyMessage=function(){
            this.contentEl.innerHTML=
                '<divclass="fc-list-empty-wrap2">'+//TODO:trylesswraps
                    '<divclass="fc-list-empty-wrap1">'+
                    '<divclass="fc-list-empty">'+
                    core.htmlEscape(this.context.options.noEventsMessage)+
                    '</div>'+
                    '</div>'+
                    '</div>';
        };
        //calledbyListEventRenderer
        ListView.prototype.renderSegList=function(allSegs){
            vartheme=this.context.theme;
            varsegsByDay=this.groupSegsByDay(allSegs);//sparsearray
            vardayIndex;
            vardaySegs;
            vari;
            vartableEl=core.htmlToElement('<tableclass="fc-list-table'+theme.getClass('tableList')+'"><tbody></tbody></table>');
            vartbodyEl=tableEl.querySelector('tbody');
            for(dayIndex=0;dayIndex<segsByDay.length;dayIndex++){
                daySegs=segsByDay[dayIndex];
                if(daySegs){//sparsearray,somightbeundefined
                    //appendadayheader
                    tbodyEl.appendChild(this.buildDayHeaderRow(this.dayDates[dayIndex]));
                    daySegs=this.eventRenderer.sortEventSegs(daySegs);
                    for(i=0;i<daySegs.length;i++){
                        tbodyEl.appendChild(daySegs[i].el);//appendeventrow
                    }
                }
            }
            this.contentEl.innerHTML='';
            this.contentEl.appendChild(tableEl);
        };
        //Returnsasparsearrayofarrays,segsgroupedbytheirdayIndex
        ListView.prototype.groupSegsByDay=function(segs){
            varsegsByDay=[];//sparsearray
            vari;
            varseg;
            for(i=0;i<segs.length;i++){
                seg=segs[i];
                (segsByDay[seg.dayIndex]||(segsByDay[seg.dayIndex]=[]))
                    .push(seg);
            }
            returnsegsByDay;
        };
        //generatestheHTMLforthedayheadersthatliveamongsttheeventrows
        ListView.prototype.buildDayHeaderRow=function(dayDate){
            var_a=this.context,theme=_a.theme,dateEnv=_a.dateEnv,options=_a.options;
            varmainFormat=core.createFormatter(options.listDayFormat);//TODO:cache
            varaltFormat=core.createFormatter(options.listDayAltFormat);//TODO:cache
            returncore.createElement('tr',{
                className:'fc-list-heading',
                'data-date':dateEnv.formatIso(dayDate,{omitTime:true})
            },'<tdclass="'+(theme.getClass('tableListHeading')||
                theme.getClass('widgetHeader'))+'"colspan="3">'+
                (mainFormat?
                    core.buildGotoAnchorHtml(options,dateEnv,dayDate,{'class':'fc-list-heading-main'},core.htmlEscape(dateEnv.format(dayDate,mainFormat))//innerHTML
                    ):
                    '')+
                (altFormat?
                    core.buildGotoAnchorHtml(options,dateEnv,dayDate,{'class':'fc-list-heading-alt'},core.htmlEscape(dateEnv.format(dayDate,altFormat))//innerHTML
                    ):
                    '')+
                '</td>');
        };
        returnListView;
    }(core.View));
    ListView.prototype.fgSegSelector='.fc-list-item';//whichelementsaccepteventactions
    functioncomputeDateVars(dateProfile){
        vardayStart=core.startOfDay(dateProfile.renderRange.start);
        varviewEnd=dateProfile.renderRange.end;
        vardayDates=[];
        vardayRanges=[];
        while(dayStart<viewEnd){
            dayDates.push(dayStart);
            dayRanges.push({
                start:dayStart,
                end:core.addDays(dayStart,1)
            });
            dayStart=core.addDays(dayStart,1);
        }
        return{dayDates:dayDates,dayRanges:dayRanges};
    }

    varmain=core.createPlugin({
        views:{
            list:{
                class:ListView,
                buttonTextKey:'list',
                listDayFormat:{month:'long',day:'numeric',year:'numeric'}//like"January1,2016"
            },
            listDay:{
                type:'list',
                duration:{days:1},
                listDayFormat:{weekday:'long'}//day-of-weekisallweneed.fulldateisprobablyinheader
            },
            listWeek:{
                type:'list',
                duration:{weeks:1},
                listDayFormat:{weekday:'long'},
                listDayAltFormat:{month:'long',day:'numeric',year:'numeric'}
            },
            listMonth:{
                type:'list',
                duration:{month:1},
                listDayAltFormat:{weekday:'long'}//day-of-weekisnice-to-have
            },
            listYear:{
                type:'list',
                duration:{year:1},
                listDayAltFormat:{weekday:'long'}//day-of-weekisnice-to-have
            }
        }
    });

    exports.ListView=ListView;
    exports.default=main;

    Object.defineProperty(exports,'__esModule',{value:true});

}));
