/*!
FullCalendarTimeGridPluginv4.4.0
Docs&License:https://fullcalendar.io/
(c)2019AdamShaw
*/

(function(global,factory){
    typeofexports==='object'&&typeofmodule!=='undefined'?factory(exports,require('@fullcalendar/core'),require('@fullcalendar/daygrid')):
    typeofdefine==='function'&&define.amd?define(['exports','@fullcalendar/core','@fullcalendar/daygrid'],factory):
    (global=global||self,factory(global.FullCalendarTimeGrid={},global.FullCalendar,global.FullCalendarDayGrid));
}(this,function(exports,core,daygrid){'usestrict';

    /*!*****************************************************************************
    Copyright(c)MicrosoftCorporation.Allrightsreserved.
    LicensedundertheApacheLicense,Version2.0(the"License");youmaynotuse
    thisfileexceptincompliancewiththeLicense.Youmayobtainacopyofthe
    Licenseathttp://www.apache.org/licenses/LICENSE-2.0

    THISCODEISPROVIDEDONAN*ASIS*BASIS,WITHOUTWARRANTIESORCONDITIONSOFANY
    KIND,EITHEREXPRESSORIMPLIED,INCLUDINGWITHOUTLIMITATIONANYIMPLIED
    WARRANTIESORCONDITIONSOFTITLE,FITNESSFORAPARTICULARPURPOSE,
    MERCHANTABLITYORNON-INFRINGEMENT.

    SeetheApacheVersion2.0Licenseforspecificlanguagegoverningpermissions
    andlimitationsundertheLicense.
    ******************************************************************************/
    /*globalReflect,Promise*/

    varextendStatics=function(d,b){
        extendStatics=Object.setPrototypeOf||
            ({__proto__:[]}instanceofArray&&function(d,b){d.__proto__=b;})||
            function(d,b){for(varpinb)if(b.hasOwnProperty(p))d[p]=b[p];};
        returnextendStatics(d,b);
    };

    function__extends(d,b){
        extendStatics(d,b);
        function__(){this.constructor=d;}
        d.prototype=b===null?Object.create(b):(__.prototype=b.prototype,new__());
    }

    var__assign=function(){
        __assign=Object.assign||function__assign(t){
            for(vars,i=1,n=arguments.length;i<n;i++){
                s=arguments[i];
                for(varpins)if(Object.prototype.hasOwnProperty.call(s,p))t[p]=s[p];
            }
            returnt;
        };
        return__assign.apply(this,arguments);
    };

    /*
    Onlyhandlesforegroundsegs.
    Doesnotownrendering.Useforlow-levelutilmethodsbyTimeGrid.
    */
    varTimeGridEventRenderer=/**@class*/(function(_super){
        __extends(TimeGridEventRenderer,_super);
        functionTimeGridEventRenderer(timeGrid){
            var_this=_super.call(this)||this;
            _this.timeGrid=timeGrid;
            return_this;
        }
        TimeGridEventRenderer.prototype.renderSegs=function(context,segs,mirrorInfo){
            _super.prototype.renderSegs.call(this,context,segs,mirrorInfo);
            //TODO:dontdoeverytime.memoize
            this.fullTimeFormat=core.createFormatter({
                hour:'numeric',
                minute:'2-digit',
                separator:this.context.options.defaultRangeSeparator
            });
        };
        //Givenanarrayofforegroundsegments,renderaDOMelementforeach,computesposition,
        //andattachestothecolumninner-containerelements.
        TimeGridEventRenderer.prototype.attachSegs=function(segs,mirrorInfo){
            varsegsByCol=this.timeGrid.groupSegsByCol(segs);
            //orderthesegswithineachcolumn
            //TODO:havegroupSegsByColdothis?
            for(varcol=0;col<segsByCol.length;col++){
                segsByCol[col]=this.sortEventSegs(segsByCol[col]);
            }
            this.segsByCol=segsByCol;
            this.timeGrid.attachSegsByCol(segsByCol,this.timeGrid.fgContainerEls);
        };
        TimeGridEventRenderer.prototype.detachSegs=function(segs){
            segs.forEach(function(seg){
                core.removeElement(seg.el);
            });
            this.segsByCol=null;
        };
        TimeGridEventRenderer.prototype.computeSegSizes=function(allSegs){
            var_a=this,timeGrid=_a.timeGrid,segsByCol=_a.segsByCol;
            varcolCnt=timeGrid.colCnt;
            timeGrid.computeSegVerticals(allSegs);//horizontalsreliesonthis
            if(segsByCol){
                for(varcol=0;col<colCnt;col++){
                    this.computeSegHorizontals(segsByCol[col]);//computehorizontalcoordinates,z-index's,andreorderthearray
                }
            }
        };
        TimeGridEventRenderer.prototype.assignSegSizes=function(allSegs){
            var_a=this,timeGrid=_a.timeGrid,segsByCol=_a.segsByCol;
            varcolCnt=timeGrid.colCnt;
            timeGrid.assignSegVerticals(allSegs);//horizontalsreliesonthis
            if(segsByCol){
                for(varcol=0;col<colCnt;col++){
                    this.assignSegCss(segsByCol[col]);
                }
            }
        };
        //Computesadefaulteventtimeformattingstringif`eventTimeFormat`isnotexplicitlydefined
        TimeGridEventRenderer.prototype.computeEventTimeFormat=function(){
            return{
                hour:'numeric',
                minute:'2-digit',
                meridiem:false
            };
        };
        //Computesadefault`displayEventEnd`valueifoneisnotexplicltydefined
        TimeGridEventRenderer.prototype.computeDisplayEventEnd=function(){
            returntrue;
        };
        //RenderstheHTMLforasingleeventsegment'sdefaultrendering
        TimeGridEventRenderer.prototype.renderSegHtml=function(seg,mirrorInfo){
            vareventRange=seg.eventRange;
            vareventDef=eventRange.def;
            vareventUi=eventRange.ui;
            varallDay=eventDef.allDay;
            varisDraggable=core.computeEventDraggable(this.context,eventDef,eventUi);
            varisResizableFromStart=seg.isStart&&core.computeEventStartResizable(this.context,eventDef,eventUi);
            varisResizableFromEnd=seg.isEnd&&core.computeEventEndResizable(this.context,eventDef,eventUi);
            varclasses=this.getSegClasses(seg,isDraggable,isResizableFromStart||isResizableFromEnd,mirrorInfo);
            varskinCss=core.cssToStr(this.getSkinCss(eventUi));
            vartimeText;
            varfullTimeText;//moreverbosetimetext.fortheprintstylesheet
            varstartTimeText;//justthestarttimetext
            classes.unshift('fc-time-grid-event');
            //iftheeventappearstospanmorethanoneday...
            if(core.isMultiDayRange(eventRange.range)){
                //Don'tdisplaytimetextonsegmentsthatrunentirelythroughaday.
                //Thatwouldappearasmidnight-midnightandwouldlookdumb.
                //Otherwise,displaythetimetextforthe*segment's*times(like6pm-midnightormidnight-10am)
                if(seg.isStart||seg.isEnd){
                    varunzonedStart=seg.start;
                    varunzonedEnd=seg.end;
                    timeText=this._getTimeText(unzonedStart,unzonedEnd,allDay);//TODO:givethetimezones
                    fullTimeText=this._getTimeText(unzonedStart,unzonedEnd,allDay,this.fullTimeFormat);
                    startTimeText=this._getTimeText(unzonedStart,unzonedEnd,allDay,null,false);//displayEnd=false
                }
            }
            else{
                //Displaythenormaltimetextforthe*event's*times
                timeText=this.getTimeText(eventRange);
                fullTimeText=this.getTimeText(eventRange,this.fullTimeFormat);
                startTimeText=this.getTimeText(eventRange,null,false);//displayEnd=false
            }
            return'<aclass="'+classes.join('')+'"'+
                (eventDef.url?
                    'href="'+core.htmlEscape(eventDef.url)+'"':
                    '')+
                (skinCss?
                    'style="'+skinCss+'"':
                    '')+
                '>'+
                '<divclass="fc-content">'+
                (timeText?
                    '<divclass="fc-time"'+
                        'data-start="'+core.htmlEscape(startTimeText)+'"'+
                        'data-full="'+core.htmlEscape(fullTimeText)+'"'+
                        '>'+
                        '<span>'+core.htmlEscape(timeText)+'</span>'+
                        '</div>':
                    '')+
                (eventDef.title?
                    '<divclass="fc-title">'+
                        core.htmlEscape(eventDef.title)+
                        '</div>':
                    '')+
                '</div>'+
                /*TODO:writeCSSforthis
                (isResizableFromStart?
                  '<divclass="fc-resizerfc-start-resizer"></div>':
                  ''
                  )+
                */
                (isResizableFromEnd?
                    '<divclass="fc-resizerfc-end-resizer"></div>':
                    '')+
                '</a>';
        };
        //Givenanarrayofsegmentsthatareallinthesamecolumn,setsthebackwardCoordandforwardCoordoneach.
        //Assumedthesegsarealreadyordered.
        //NOTE:Alsoreordersthegivenarraybydate!
        TimeGridEventRenderer.prototype.computeSegHorizontals=function(segs){
            varlevels;
            varlevel0;
            vari;
            levels=buildSlotSegLevels(segs);
            computeForwardSlotSegs(levels);
            if((level0=levels[0])){
                for(i=0;i<level0.length;i++){
                    computeSlotSegPressures(level0[i]);
                }
                for(i=0;i<level0.length;i++){
                    this.computeSegForwardBack(level0[i],0,0);
                }
            }
        };
        //Calculateseg.forwardCoordandseg.backwardCoordforthesegment,wherebothvaluesrange
        //from0to1.Ifthecalendarisleft-to-right,theseg.backwardCoordmapsto"left"and
        //seg.forwardCoordmapsto"right"(viapercentage).Vice-versaifthecalendarisright-to-left.
        //
        //Thesegmentmightbepartofa"series",whichmeansconsecutivesegmentswiththesamepressure
        //who'swidthisunknownuntilanedgehasbeenhit.`seriesBackwardPressure`isthenumberof
        //segmentsbehindthisoneinthecurrentseries,and`seriesBackwardCoord`isthestarting
        //coordinateofthefirstsegmentintheseries.
        TimeGridEventRenderer.prototype.computeSegForwardBack=function(seg,seriesBackwardPressure,seriesBackwardCoord){
            varforwardSegs=seg.forwardSegs;
            vari;
            if(seg.forwardCoord===undefined){//notalreadycomputed
                if(!forwardSegs.length){
                    //iftherearenoforwardsegments,thissegmentshouldbuttupagainsttheedge
                    seg.forwardCoord=1;
                }
                else{
                    //sorthighestpressurefirst
                    this.sortForwardSegs(forwardSegs);
                    //thissegment'sforwardCoordwillbecalculatedfromthebackwardCoordofthe
                    //highest-pressureforwardsegment.
                    this.computeSegForwardBack(forwardSegs[0],seriesBackwardPressure+1,seriesBackwardCoord);
                    seg.forwardCoord=forwardSegs[0].backwardCoord;
                }
                //calculatethebackwardCoordfromtheforwardCoord.considertheseries
                seg.backwardCoord=seg.forwardCoord-
                    (seg.forwardCoord-seriesBackwardCoord)///availablewidthforseries
                        (seriesBackwardPressure+1);//#ofsegmentsintheseries
                //usethissegment'scoordinatestocomputedthecoordinatesoftheless-pressurized
                //forwardsegments
                for(i=0;i<forwardSegs.length;i++){
                    this.computeSegForwardBack(forwardSegs[i],0,seg.forwardCoord);
                }
            }
        };
        TimeGridEventRenderer.prototype.sortForwardSegs=function(forwardSegs){
            varobjs=forwardSegs.map(buildTimeGridSegCompareObj);
            varspecs=[
                //puthigher-pressurefirst
                {field:'forwardPressure',order:-1},
                //putsegmentsthatareclosertoinitialedgefirst(andfavoroneswithnocoordsyet)
                {field:'backwardCoord',order:1}
            ].concat(this.context.eventOrderSpecs);
            objs.sort(function(obj0,obj1){
                returncore.compareByFieldSpecs(obj0,obj1,specs);
            });
            returnobjs.map(function(c){
                returnc._seg;
            });
        };
        //Givenforegroundeventsegmentsthathavealreadyhadtheirpositioncoordinatescomputed,
        //assignsposition-relatedCSSvaluestotheirelements.
        TimeGridEventRenderer.prototype.assignSegCss=function(segs){
            for(var_i=0,segs_1=segs;_i<segs_1.length;_i++){
                varseg=segs_1[_i];
                core.applyStyle(seg.el,this.generateSegCss(seg));
                if(seg.level>0){
                    seg.el.classList.add('fc-time-grid-event-inset');
                }
                //iftheeventisshortthatthetitlewillbecutoff,
                //attachaclassNamethatcondensesthetitleintothetimearea.
                //if(seg.eventRange.def.title&&seg.bottom-seg.top<30){
                //FLECTRAFIX:fc-shortwithouttitleasdonein3.0and5.0
                if(seg.bottom-seg.top<30){
                    seg.el.classList.add('fc-short');//TODO:"condensed"isabettername
                }
            }
        };
        //GeneratesanobjectwithCSSproperties/valuesthatshouldbeappliedtoaneventsegmentelement.
        //Containsimportantpositioning-relatedpropertiesthatshouldbeappliedtoanyeventelement,customizedornot.
        TimeGridEventRenderer.prototype.generateSegCss=function(seg){
            varshouldOverlap=this.context.options.slotEventOverlap;
            varbackwardCoord=seg.backwardCoord;//theleftsideifLTR.therightsideifRTL.floating-point
            varforwardCoord=seg.forwardCoord;//therightsideifLTR.theleftsideifRTL.floating-point
            varprops=this.timeGrid.generateSegVerticalCss(seg);//gettop/bottomfirst
            varisRtl=this.context.isRtl;
            varleft;//amountofspacefromleftedge,afractionofthetotalwidth
            varright;//amountofspacefromrightedge,afractionofthetotalwidth
            if(shouldOverlap){
                //doublethewidth,butdon'tgobeyondthemaximumforwardcoordinate(1.0)
                forwardCoord=Math.min(1,backwardCoord+(forwardCoord-backwardCoord)*2);
            }
            if(isRtl){
                left=1-forwardCoord;
                right=backwardCoord;
            }
            else{
                left=backwardCoord;
                right=1-forwardCoord;
            }
            props.zIndex=seg.level+1;//convertfrom0-baseto1-based
            props.left=left*100+'%';
            props.right=right*100+'%';
            if(shouldOverlap&&seg.forwardPressure){
                //addpaddingtotheedgesothatforwardstackedeventsdon'tcovertheresizer'sicon
                props[isRtl?'marginLeft':'marginRight']=10*2;//10isaguesstimateoftheicon'swidth
            }
            returnprops;
        };
        returnTimeGridEventRenderer;
    }(core.FgEventRenderer));
    //Buildsanarrayofsegments"levels".Thefirstlevelwillbetheleftmosttierofsegmentsifthecalendaris
    //left-to-right,ortherightmostifthecalendarisright-to-left.Assumesthesegmentsarealreadyorderedbydate.
    functionbuildSlotSegLevels(segs){
        varlevels=[];
        vari;
        varseg;
        varj;
        for(i=0;i<segs.length;i++){
            seg=segs[i];
            //gothroughallthelevelsandstoponthefirstlevelwheretherearenocollisions
            for(j=0;j<levels.length;j++){
                if(!computeSlotSegCollisions(seg,levels[j]).length){
                    break;
                }
            }
            seg.level=j;
            (levels[j]||(levels[j]=[])).push(seg);
        }
        returnlevels;
    }
    //Foreverysegment,figureouttheothersegmentsthatareinsubsequent
    //levelsthatalsooccupythesameverticalspace.Accumulateinseg.forwardSegs
    functioncomputeForwardSlotSegs(levels){
        vari;
        varlevel;
        varj;
        varseg;
        vark;
        for(i=0;i<levels.length;i++){
            level=levels[i];
            for(j=0;j<level.length;j++){
                seg=level[j];
                seg.forwardSegs=[];
                for(k=i+1;k<levels.length;k++){
                    computeSlotSegCollisions(seg,levels[k],seg.forwardSegs);
                }
            }
        }
    }
    //Figureoutwhichpathforward(viaseg.forwardSegs)resultsinthelongestpathuntil
    //thefurthestedgeisreached.Thenumberofsegmentsinthispathwillbeseg.forwardPressure
    functioncomputeSlotSegPressures(seg){
        varforwardSegs=seg.forwardSegs;
        varforwardPressure=0;
        vari;
        varforwardSeg;
        if(seg.forwardPressure===undefined){//notalreadycomputed
            for(i=0;i<forwardSegs.length;i++){
                forwardSeg=forwardSegs[i];
                //figureoutthechild'smaximumforwardpath
                computeSlotSegPressures(forwardSeg);
                //eitherusetheexistingmaximum,orusethechild'sforwardpressure
                //plusone(fortheforwardSegitself)
                forwardPressure=Math.max(forwardPressure,1+forwardSeg.forwardPressure);
            }
            seg.forwardPressure=forwardPressure;
        }
    }
    //Findallthesegmentsin`otherSegs`thatverticallycollidewith`seg`.
    //Appendintoanoptionally-supplied`results`arrayandreturn.
    functioncomputeSlotSegCollisions(seg,otherSegs,results){
        if(results===void0){results=[];}
        for(vari=0;i<otherSegs.length;i++){
            if(isSlotSegCollision(seg,otherSegs[i])){
                results.push(otherSegs[i]);
            }
        }
        returnresults;
    }
    //Dothesesegmentsoccupythesameverticalspace?
    functionisSlotSegCollision(seg1,seg2){
        returnseg1.bottom>seg2.top&&seg1.top<seg2.bottom;
    }
    functionbuildTimeGridSegCompareObj(seg){
        varobj=core.buildSegCompareObj(seg);
        obj.forwardPressure=seg.forwardPressure;
        obj.backwardCoord=seg.backwardCoord;
        returnobj;
    }

    varTimeGridMirrorRenderer=/**@class*/(function(_super){
        __extends(TimeGridMirrorRenderer,_super);
        functionTimeGridMirrorRenderer(){
            return_super!==null&&_super.apply(this,arguments)||this;
        }
        TimeGridMirrorRenderer.prototype.attachSegs=function(segs,mirrorInfo){
            this.segsByCol=this.timeGrid.groupSegsByCol(segs);
            this.timeGrid.attachSegsByCol(this.segsByCol,this.timeGrid.mirrorContainerEls);
            this.sourceSeg=mirrorInfo.sourceSeg;
        };
        TimeGridMirrorRenderer.prototype.generateSegCss=function(seg){
            varprops=_super.prototype.generateSegCss.call(this,seg);
            varsourceSeg=this.sourceSeg;
            if(sourceSeg&&sourceSeg.col===seg.col){
                varsourceSegProps=_super.prototype.generateSegCss.call(this,sourceSeg);
                props.left=sourceSegProps.left;
                props.right=sourceSegProps.right;
                props.marginLeft=sourceSegProps.marginLeft;
                props.marginRight=sourceSegProps.marginRight;
            }
            returnprops;
        };
        returnTimeGridMirrorRenderer;
    }(TimeGridEventRenderer));

    varTimeGridFillRenderer=/**@class*/(function(_super){
        __extends(TimeGridFillRenderer,_super);
        functionTimeGridFillRenderer(timeGrid){
            var_this=_super.call(this)||this;
            _this.timeGrid=timeGrid;
            return_this;
        }
        TimeGridFillRenderer.prototype.attachSegs=function(type,segs){
            vartimeGrid=this.timeGrid;
            varcontainerEls;
            //TODO:moreefficientlookup
            if(type==='bgEvent'){
                containerEls=timeGrid.bgContainerEls;
            }
            elseif(type==='businessHours'){
                containerEls=timeGrid.businessContainerEls;
            }
            elseif(type==='highlight'){
                containerEls=timeGrid.highlightContainerEls;
            }
            timeGrid.attachSegsByCol(timeGrid.groupSegsByCol(segs),containerEls);
            returnsegs.map(function(seg){
                returnseg.el;
            });
        };
        TimeGridFillRenderer.prototype.computeSegSizes=function(segs){
            this.timeGrid.computeSegVerticals(segs);
        };
        TimeGridFillRenderer.prototype.assignSegSizes=function(segs){
            this.timeGrid.assignSegVerticals(segs);
        };
        returnTimeGridFillRenderer;
    }(core.FillRenderer));

    /*Acomponentthatrendersoneormorecolumnsofverticaltimeslots
    ----------------------------------------------------------------------------------------------------------------------*/
    //potentialnicevaluesfortheslot-durationandinterval-duration
    //fromlargesttosmallest
    varAGENDA_STOCK_SUB_DURATIONS=[
        {hours:1},
        {minutes:30},
        {minutes:15},
        {seconds:30},
        {seconds:15}
    ];
    varTimeGrid=/**@class*/(function(_super){
        __extends(TimeGrid,_super);
        functionTimeGrid(el,renderProps){
            var_this=_super.call(this,el)||this;
            _this.isSlatSizesDirty=false;
            _this.isColSizesDirty=false;
            _this.processOptions=core.memoize(_this._processOptions);
            _this.renderSkeleton=core.memoizeRendering(_this._renderSkeleton);
            _this.renderSlats=core.memoizeRendering(_this._renderSlats,null,[_this.renderSkeleton]);
            _this.renderColumns=core.memoizeRendering(_this._renderColumns,_this._unrenderColumns,[_this.renderSkeleton]);
            _this.renderProps=renderProps;
            varrenderColumns=_this.renderColumns;
            vareventRenderer=_this.eventRenderer=newTimeGridEventRenderer(_this);
            varfillRenderer=_this.fillRenderer=newTimeGridFillRenderer(_this);
            _this.mirrorRenderer=newTimeGridMirrorRenderer(_this);
            _this.renderBusinessHours=core.memoizeRendering(fillRenderer.renderSegs.bind(fillRenderer,'businessHours'),fillRenderer.unrender.bind(fillRenderer,'businessHours'),[renderColumns]);
            _this.renderDateSelection=core.memoizeRendering(_this._renderDateSelection,_this._unrenderDateSelection,[renderColumns]);
            _this.renderFgEvents=core.memoizeRendering(eventRenderer.renderSegs.bind(eventRenderer),eventRenderer.unrender.bind(eventRenderer),[renderColumns]);
            _this.renderBgEvents=core.memoizeRendering(fillRenderer.renderSegs.bind(fillRenderer,'bgEvent'),fillRenderer.unrender.bind(fillRenderer,'bgEvent'),[renderColumns]);
            _this.renderEventSelection=core.memoizeRendering(eventRenderer.selectByInstanceId.bind(eventRenderer),eventRenderer.unselectByInstanceId.bind(eventRenderer),[_this.renderFgEvents]);
            _this.renderEventDrag=core.memoizeRendering(_this._renderEventDrag,_this._unrenderEventDrag,[renderColumns]);
            _this.renderEventResize=core.memoizeRendering(_this._renderEventResize,_this._unrenderEventResize,[renderColumns]);
            return_this;
        }
        /*Options
        ------------------------------------------------------------------------------------------------------------------*/
        //Parsesvariousoptionsintopropertiesofthisobject
        //MUSThavecontextalreadyset
        TimeGrid.prototype._processOptions=function(options){
            varslotDuration=options.slotDuration,snapDuration=options.snapDuration;
            varsnapsPerSlot;
            varinput;
            slotDuration=core.createDuration(slotDuration);
            snapDuration=snapDuration?core.createDuration(snapDuration):slotDuration;
            snapsPerSlot=core.wholeDivideDurations(slotDuration,snapDuration);
            if(snapsPerSlot===null){
                snapDuration=slotDuration;
                snapsPerSlot=1;
                //TODO:saywarning?
            }
            this.slotDuration=slotDuration;
            this.snapDuration=snapDuration;
            this.snapsPerSlot=snapsPerSlot;
            //mightbeanarrayvalue(forTimelineView).
            //ifso,gettingthemostgranularentry(thelastoneprobably).
            input=options.slotLabelFormat;
            if(Array.isArray(input)){
                input=input[input.length-1];
            }
            this.labelFormat=core.createFormatter(input||{
                hour:'numeric',
                minute:'2-digit',
                omitZeroMinute:true,
                meridiem:'short'
            });
            input=options.slotLabelInterval;
            this.labelInterval=input?
                core.createDuration(input):
                this.computeLabelInterval(slotDuration);
        };
        //ComputesanautomaticvalueforslotLabelInterval
        TimeGrid.prototype.computeLabelInterval=function(slotDuration){
            vari;
            varlabelInterval;
            varslotsPerLabel;
            //findthesmalleststocklabelintervalthatresultsinmorethanoneslots-per-label
            for(i=AGENDA_STOCK_SUB_DURATIONS.length-1;i>=0;i--){
                labelInterval=core.createDuration(AGENDA_STOCK_SUB_DURATIONS[i]);
                slotsPerLabel=core.wholeDivideDurations(labelInterval,slotDuration);
                if(slotsPerLabel!==null&&slotsPerLabel>1){
                    returnlabelInterval;
                }
            }
            returnslotDuration;//fallback
        };
        /*Rendering
        ------------------------------------------------------------------------------------------------------------------*/
        TimeGrid.prototype.render=function(props,context){
            this.processOptions(context.options);
            varcells=props.cells;
            this.colCnt=cells.length;
            this.renderSkeleton(context.theme);
            this.renderSlats(props.dateProfile);
            this.renderColumns(props.cells,props.dateProfile);
            this.renderBusinessHours(context,props.businessHourSegs);
            this.renderDateSelection(props.dateSelectionSegs);
            this.renderFgEvents(context,props.fgEventSegs);
            this.renderBgEvents(context,props.bgEventSegs);
            this.renderEventSelection(props.eventSelection);
            this.renderEventDrag(props.eventDrag);
            this.renderEventResize(props.eventResize);
        };
        TimeGrid.prototype.destroy=function(){
            _super.prototype.destroy.call(this);
            //shouldunrendereverythingelsetoo
            this.renderSlats.unrender();
            this.renderColumns.unrender();
            this.renderSkeleton.unrender();
        };
        TimeGrid.prototype.updateSize=function(isResize){
            var_a=this,fillRenderer=_a.fillRenderer,eventRenderer=_a.eventRenderer,mirrorRenderer=_a.mirrorRenderer;
            if(isResize||this.isSlatSizesDirty){
                this.buildSlatPositions();
                this.isSlatSizesDirty=false;
            }
            if(isResize||this.isColSizesDirty){
                this.buildColPositions();
                this.isColSizesDirty=false;
            }
            fillRenderer.computeSizes(isResize);
            eventRenderer.computeSizes(isResize);
            mirrorRenderer.computeSizes(isResize);
            fillRenderer.assignSizes(isResize);
            eventRenderer.assignSizes(isResize);
            mirrorRenderer.assignSizes(isResize);
        };
        TimeGrid.prototype._renderSkeleton=function(theme){
            varel=this.el;
            el.innerHTML=
                '<divclass="fc-bg"></div>'+
                    '<divclass="fc-slats"></div>'+
                    '<hrclass="fc-divider'+theme.getClass('widgetHeader')+'"style="display:none"/>';
            this.rootBgContainerEl=el.querySelector('.fc-bg');
            this.slatContainerEl=el.querySelector('.fc-slats');
            this.bottomRuleEl=el.querySelector('.fc-divider');
        };
        TimeGrid.prototype._renderSlats=function(dateProfile){
            vartheme=this.context.theme;
            this.slatContainerEl.innerHTML=
                '<tableclass="'+theme.getClass('tableGrid')+'">'+
                    this.renderSlatRowHtml(dateProfile)+
                    '</table>';
            this.slatEls=core.findElements(this.slatContainerEl,'tr');
            this.slatPositions=newcore.PositionCache(this.el,this.slatEls,false,true//vertical
            );
            this.isSlatSizesDirty=true;
        };
        //GeneratestheHTMLforthehorizontal"slats"thatrunwidth-wise.Hasatimeaxisonaside.DependsonRTL.
        TimeGrid.prototype.renderSlatRowHtml=function(dateProfile){
            var_a=this.context,dateEnv=_a.dateEnv,theme=_a.theme,isRtl=_a.isRtl;
            varhtml='';
            vardayStart=core.startOfDay(dateProfile.renderRange.start);
            varslotTime=dateProfile.minTime;
            varslotIterator=core.createDuration(0);
            varslotDate;//willbeontheview'sfirstday,butweonlycareaboutitstime
            varisLabeled;
            varaxisHtml;
            //Calculatethetimeforeachslot
            while(core.asRoughMs(slotTime)<core.asRoughMs(dateProfile.maxTime)){
                slotDate=dateEnv.add(dayStart,slotTime);
                isLabeled=core.wholeDivideDurations(slotIterator,this.labelInterval)!==null;
                axisHtml=
                    '<tdclass="fc-axisfc-time'+theme.getClass('widgetContent')+'">'+
                        (isLabeled?
                            '<span>'+//formatchCellWidths
                                core.htmlEscape(dateEnv.format(slotDate,this.labelFormat))+
                                '</span>':
                            '')+
                        '</td>';
                html+=
                    '<trdata-time="'+core.formatIsoTimeString(slotDate)+'"'+
                        (isLabeled?'':'class="fc-minor"')+
                        '>'+
                        (!isRtl?axisHtml:'')+
                        '<tdclass="'+theme.getClass('widgetContent')+'"></td>'+
                        (isRtl?axisHtml:'')+
                        '</tr>';
                slotTime=core.addDurations(slotTime,this.slotDuration);
                slotIterator=core.addDurations(slotIterator,this.slotDuration);
            }
            returnhtml;
        };
        TimeGrid.prototype._renderColumns=function(cells,dateProfile){
            var_a=this.context,calendar=_a.calendar,view=_a.view,isRtl=_a.isRtl,theme=_a.theme,dateEnv=_a.dateEnv;
            varbgRow=newdaygrid.DayBgRow(this.context);
            this.rootBgContainerEl.innerHTML=
                '<tableclass="'+theme.getClass('tableGrid')+'">'+
                    bgRow.renderHtml({
                        cells:cells,
                        dateProfile:dateProfile,
                        renderIntroHtml:this.renderProps.renderBgIntroHtml
                    })+
                    '</table>';
            this.colEls=core.findElements(this.el,'.fc-day,.fc-disabled-day');
            for(varcol=0;col<this.colCnt;col++){
                calendar.publiclyTrigger('dayRender',[
                    {
                        date:dateEnv.toDate(cells[col].date),
                        el:this.colEls[col],
                        view:view
                    }
                ]);
            }
            if(isRtl){
                this.colEls.reverse();
            }
            this.colPositions=newcore.PositionCache(this.el,this.colEls,true,//horizontal
            false);
            this.renderContentSkeleton();
            this.isColSizesDirty=true;
        };
        TimeGrid.prototype._unrenderColumns=function(){
            this.unrenderContentSkeleton();
        };
        /*ContentSkeleton
        ------------------------------------------------------------------------------------------------------------------*/
        //RenderstheDOMthattheview'scontentwilllivein
        TimeGrid.prototype.renderContentSkeleton=function(){
            varisRtl=this.context.isRtl;
            varparts=[];
            varskeletonEl;
            parts.push(this.renderProps.renderIntroHtml());
            for(vari=0;i<this.colCnt;i++){
                parts.push('<td>'+
                    '<divclass="fc-content-col">'+
                    '<divclass="fc-event-containerfc-mirror-container"></div>'+
                    '<divclass="fc-event-container"></div>'+
                    '<divclass="fc-highlight-container"></div>'+
                    '<divclass="fc-bgevent-container"></div>'+
                    '<divclass="fc-business-container"></div>'+
                    '</div>'+
                    '</td>');
            }
            if(isRtl){
                parts.reverse();
            }
            skeletonEl=this.contentSkeletonEl=core.htmlToElement('<divclass="fc-content-skeleton">'+
                '<table>'+
                '<tr>'+parts.join('')+'</tr>'+
                '</table>'+
                '</div>');
            this.colContainerEls=core.findElements(skeletonEl,'.fc-content-col');
            this.mirrorContainerEls=core.findElements(skeletonEl,'.fc-mirror-container');
            this.fgContainerEls=core.findElements(skeletonEl,'.fc-event-container:not(.fc-mirror-container)');
            this.bgContainerEls=core.findElements(skeletonEl,'.fc-bgevent-container');
            this.highlightContainerEls=core.findElements(skeletonEl,'.fc-highlight-container');
            this.businessContainerEls=core.findElements(skeletonEl,'.fc-business-container');
            if(isRtl){
                this.colContainerEls.reverse();
                this.mirrorContainerEls.reverse();
                this.fgContainerEls.reverse();
                this.bgContainerEls.reverse();
                this.highlightContainerEls.reverse();
                this.businessContainerEls.reverse();
            }
            this.el.appendChild(skeletonEl);
        };
        TimeGrid.prototype.unrenderContentSkeleton=function(){
            core.removeElement(this.contentSkeletonEl);
        };
        //Givenaflatarrayofsegments,returnanarrayofsub-arrays,groupedbyeachsegment'scol
        TimeGrid.prototype.groupSegsByCol=function(segs){
            varsegsByCol=[];
            vari;
            for(i=0;i<this.colCnt;i++){
                segsByCol.push([]);
            }
            for(i=0;i<segs.length;i++){
                segsByCol[segs[i].col].push(segs[i]);
            }
            returnsegsByCol;
        };
        //Givensegmentsgroupedbycolumn,insertthesegments'elementsintoaparallelarrayofcontainer
        //elements,eachlivingwithinacolumn.
        TimeGrid.prototype.attachSegsByCol=function(segsByCol,containerEls){
            varcol;
            varsegs;
            vari;
            for(col=0;col<this.colCnt;col++){//iterateeachcolumngrouping
                segs=segsByCol[col];
                for(i=0;i<segs.length;i++){
                    containerEls[col].appendChild(segs[i].el);
                }
            }
        };
        /*NowIndicator
        ------------------------------------------------------------------------------------------------------------------*/
        TimeGrid.prototype.getNowIndicatorUnit=function(){
            return'minute';//willrefreshontheminute
        };
        TimeGrid.prototype.renderNowIndicator=function(segs,date){
            //HACK:ifdatecolumnsnotreadyforsomereason(scheduler)
            if(!this.colContainerEls){
                return;
            }
            vartop=this.computeDateTop(date);
            varnodes=[];
            vari;
            //renderlineswithinthecolumns
            for(i=0;i<segs.length;i++){
                varlineEl=core.createElement('div',{className:'fc-now-indicatorfc-now-indicator-line'});
                lineEl.style.top=top+'px';
                this.colContainerEls[segs[i].col].appendChild(lineEl);
                nodes.push(lineEl);
            }
            //renderanarrowovertheaxis
            if(segs.length>0){//isthecurrenttimeinview?
                vararrowEl=core.createElement('div',{className:'fc-now-indicatorfc-now-indicator-arrow'});
                arrowEl.style.top=top+'px';
                this.contentSkeletonEl.appendChild(arrowEl);
                nodes.push(arrowEl);
            }
            this.nowIndicatorEls=nodes;
        };
        TimeGrid.prototype.unrenderNowIndicator=function(){
            if(this.nowIndicatorEls){
                this.nowIndicatorEls.forEach(core.removeElement);
                this.nowIndicatorEls=null;
            }
        };
        /*Coordinates
        ------------------------------------------------------------------------------------------------------------------*/
        TimeGrid.prototype.getTotalSlatHeight=function(){
            returnthis.slatContainerEl.getBoundingClientRect().height;
        };
        //Computesthetopcoordinate,relativetotheboundsofthegrid,ofthegivendate.
        //A`startOfDayDate`mustbegivenforavoidingambiguityoverhowtotreatmidnight.
        TimeGrid.prototype.computeDateTop=function(when,startOfDayDate){
            if(!startOfDayDate){
                startOfDayDate=core.startOfDay(when);
            }
            returnthis.computeTimeTop(core.createDuration(when.valueOf()-startOfDayDate.valueOf()));
        };
        //Computesthetopcoordinate,relativetotheboundsofthegrid,ofthegiventime(aDuration).
        TimeGrid.prototype.computeTimeTop=function(duration){
            varlen=this.slatEls.length;
            vardateProfile=this.props.dateProfile;
            varslatCoverage=(duration.milliseconds-core.asRoughMs(dateProfile.minTime))/core.asRoughMs(this.slotDuration);//floating-pointvalueof#ofslotscovered
            varslatIndex;
            varslatRemainder;
            //computeafloating-pointnumberforhowmanyslatsshouldbeprogressedthrough.
            //from0tonumberofslats(inclusive)
            //constrainedbecauseminTime/maxTimemightbecustomized.
            slatCoverage=Math.max(0,slatCoverage);
            slatCoverage=Math.min(len,slatCoverage);
            //anintegerindexofthefurthestwholeslat
            //from0tonumberslats(*exclusive*,solen-1)
            slatIndex=Math.floor(slatCoverage);
            slatIndex=Math.min(slatIndex,len-1);
            //howmuchfurtherthroughtheslatIndexslat(from0.0-1.0)mustbecoveredinaddition.
            //couldbe1.0ifslatCoverageiscovering*all*theslots
            slatRemainder=slatCoverage-slatIndex;
            returnthis.slatPositions.tops[slatIndex]+
                this.slatPositions.getHeight(slatIndex)*slatRemainder;
        };
        //Foreachsegmentinanarray,computesandassignsitstopandbottomproperties
        TimeGrid.prototype.computeSegVerticals=function(segs){
            varoptions=this.context.options;
            vareventMinHeight=options.timeGridEventMinHeight;
            vari;
            varseg;
            vardayDate;
            for(i=0;i<segs.length;i++){
                seg=segs[i];
                dayDate=this.props.cells[seg.col].date;
                seg.top=this.computeDateTop(seg.start,dayDate);
                seg.bottom=Math.max(seg.top+eventMinHeight,this.computeDateTop(seg.end,dayDate));
            }
        };
        //Givensegmentsthatalreadyhavetheirtop/bottompropertiescomputed,appliesthosevaluesto
        //thesegments'elements.
        TimeGrid.prototype.assignSegVerticals=function(segs){
            vari;
            varseg;
            for(i=0;i<segs.length;i++){
                seg=segs[i];
                core.applyStyle(seg.el,this.generateSegVerticalCss(seg));
            }
        };
        //GeneratesanobjectwithCSSpropertiesforthetop/bottomcoordinatesofasegmentelement
        TimeGrid.prototype.generateSegVerticalCss=function(seg){
            return{
                top:seg.top,
                bottom:-seg.bottom//flippedbecauseneedstobespacebeyondbottomedgeofeventcontainer
            };
        };
        /*Sizing
        ------------------------------------------------------------------------------------------------------------------*/
        TimeGrid.prototype.buildPositionCaches=function(){
            this.buildColPositions();
            this.buildSlatPositions();
        };
        TimeGrid.prototype.buildColPositions=function(){
            this.colPositions.build();
        };
        TimeGrid.prototype.buildSlatPositions=function(){
            this.slatPositions.build();
        };
        /*HitSystem
        ------------------------------------------------------------------------------------------------------------------*/
        TimeGrid.prototype.positionToHit=function(positionLeft,positionTop){
            vardateEnv=this.context.dateEnv;
            var_a=this,snapsPerSlot=_a.snapsPerSlot,slatPositions=_a.slatPositions,colPositions=_a.colPositions;
            varcolIndex=colPositions.leftToIndex(positionLeft);
            varslatIndex=slatPositions.topToIndex(positionTop);
            if(colIndex!=null&&slatIndex!=null){
                varslatTop=slatPositions.tops[slatIndex];
                varslatHeight=slatPositions.getHeight(slatIndex);
                varpartial=(positionTop-slatTop)/slatHeight;//floatingpointnumberbetween0and1
                varlocalSnapIndex=Math.floor(partial*snapsPerSlot);//thesnap#relativetostartofslat
                varsnapIndex=slatIndex*snapsPerSlot+localSnapIndex;
                vardayDate=this.props.cells[colIndex].date;
                vartime=core.addDurations(this.props.dateProfile.minTime,core.multiplyDuration(this.snapDuration,snapIndex));
                varstart=dateEnv.add(dayDate,time);
                varend=dateEnv.add(start,this.snapDuration);
                return{
                    col:colIndex,
                    dateSpan:{
                        range:{start:start,end:end},
                        allDay:false
                    },
                    dayEl:this.colEls[colIndex],
                    relativeRect:{
                        left:colPositions.lefts[colIndex],
                        right:colPositions.rights[colIndex],
                        top:slatTop,
                        bottom:slatTop+slatHeight
                    }
                };
            }
        };
        /*EventDragVisualization
        ------------------------------------------------------------------------------------------------------------------*/
        TimeGrid.prototype._renderEventDrag=function(state){
            if(state){
                this.eventRenderer.hideByHash(state.affectedInstances);
                if(state.isEvent){
                    this.mirrorRenderer.renderSegs(this.context,state.segs,{isDragging:true,sourceSeg:state.sourceSeg});
                }
                else{
                    this.fillRenderer.renderSegs('highlight',this.context,state.segs);
                }
            }
        };
        TimeGrid.prototype._unrenderEventDrag=function(state){
            if(state){
                this.eventRenderer.showByHash(state.affectedInstances);
                if(state.isEvent){
                    this.mirrorRenderer.unrender(this.context,state.segs,{isDragging:true,sourceSeg:state.sourceSeg});
                }
                else{
                    this.fillRenderer.unrender('highlight',this.context);
                }
            }
        };
        /*EventResizeVisualization
        ------------------------------------------------------------------------------------------------------------------*/
        TimeGrid.prototype._renderEventResize=function(state){
            if(state){
                this.eventRenderer.hideByHash(state.affectedInstances);
                this.mirrorRenderer.renderSegs(this.context,state.segs,{isResizing:true,sourceSeg:state.sourceSeg});
            }
        };
        TimeGrid.prototype._unrenderEventResize=function(state){
            if(state){
                this.eventRenderer.showByHash(state.affectedInstances);
                this.mirrorRenderer.unrender(this.context,state.segs,{isResizing:true,sourceSeg:state.sourceSeg});
            }
        };
        /*Selection
        ------------------------------------------------------------------------------------------------------------------*/
        //Rendersavisualindicationofaselection.Overridesthedefault,whichwastosimplyrenderahighlight.
        TimeGrid.prototype._renderDateSelection=function(segs){
            if(segs){
                if(this.context.options.selectMirror){
                    this.mirrorRenderer.renderSegs(this.context,segs,{isSelecting:true});
                }
                else{
                    this.fillRenderer.renderSegs('highlight',this.context,segs);
                }
            }
        };
        TimeGrid.prototype._unrenderDateSelection=function(segs){
            if(segs){
                if(this.context.options.selectMirror){
                    this.mirrorRenderer.unrender(this.context,segs,{isSelecting:true});
                }
                else{
                    this.fillRenderer.unrender('highlight',this.context);
                }
            }
        };
        returnTimeGrid;
    }(core.DateComponent));

    varAllDaySplitter=/**@class*/(function(_super){
        __extends(AllDaySplitter,_super);
        functionAllDaySplitter(){
            return_super!==null&&_super.apply(this,arguments)||this;
        }
        AllDaySplitter.prototype.getKeyInfo=function(){
            return{
                allDay:{},
                timed:{}
            };
        };
        AllDaySplitter.prototype.getKeysForDateSpan=function(dateSpan){
            if(dateSpan.allDay){
                return['allDay'];
            }
            else{
                return['timed'];
            }
        };
        AllDaySplitter.prototype.getKeysForEventDef=function(eventDef){
            if(!eventDef.allDay){
                return['timed'];
            }
            elseif(core.hasBgRendering(eventDef)){
                return['timed','allDay'];
            }
            else{
                return['allDay'];
            }
        };
        returnAllDaySplitter;
    }(core.Splitter));

    varTIMEGRID_ALL_DAY_EVENT_LIMIT=5;
    varWEEK_HEADER_FORMAT=core.createFormatter({week:'short'});
    /*Anabstractclassforalltimegrid-relatedviews.Displaysonemorecolumnswithtimeslotsrunningvertically.
    ----------------------------------------------------------------------------------------------------------------------*/
    //IsamanagerfortheTimeGridsubcomponentandpossiblytheDayGridsubcomponent(ifallDaySlotison).
    //Responsibleformanagingwidth/height.
    varAbstractTimeGridView=/**@class*/(function(_super){
        __extends(AbstractTimeGridView,_super);
        functionAbstractTimeGridView(){
            var_this=_super!==null&&_super.apply(this,arguments)||this;
            _this.splitter=newAllDaySplitter();
            _this.renderSkeleton=core.memoizeRendering(_this._renderSkeleton,_this._unrenderSkeleton);
            /*HeaderRenderMethods
            ------------------------------------------------------------------------------------------------------------------*/
            //GeneratestheHTMLthatwillgobeforetheday-ofweekheadercells
            _this.renderHeadIntroHtml=function(){
                var_a=_this.context,theme=_a.theme,dateEnv=_a.dateEnv,options=_a.options;
                varrange=_this.props.dateProfile.renderRange;
                vardayCnt=core.diffDays(range.start,range.end);
                varweekText;
                if(options.weekNumbers){
                    weekText=dateEnv.format(range.start,WEEK_HEADER_FORMAT);
                    return''+
                        '<thclass="fc-axisfc-week-number'+theme.getClass('widgetHeader')+'"'+_this.axisStyleAttr()+'>'+
                        core.buildGotoAnchorHtml(//asidefromlink,importantformatchCellWidths
                        options,dateEnv,{date:range.start,type:'week',forceOff:dayCnt>1},core.htmlEscape(weekText)//innerHTML
                        )+
                        '</th>';
                }
                else{
                    return'<thclass="fc-axis'+theme.getClass('widgetHeader')+'"'+_this.axisStyleAttr()+'></th>';
                }
            };
            /*TimeGridRenderMethods
            ------------------------------------------------------------------------------------------------------------------*/
            //GeneratestheHTMLthatgoesbeforethebgoftheTimeGridslotarea.Longverticalcolumn.
            _this.renderTimeGridBgIntroHtml=function(){
                vartheme=_this.context.theme;
                return'<tdclass="fc-axis'+theme.getClass('widgetContent')+'"'+_this.axisStyleAttr()+'></td>';
            };
            //GeneratestheHTMLthatgoesbeforeallothertypesofcells.
            //Affectscontent-skeleton,mirror-skeleton,highlight-skeletonforboththetime-gridandday-grid.
            _this.renderTimeGridIntroHtml=function(){
                return'<tdclass="fc-axis"'+_this.axisStyleAttr()+'></td>';
            };
            /*DayGridRenderMethods
            ------------------------------------------------------------------------------------------------------------------*/
            //GeneratestheHTMLthatgoesbeforetheall-daycells
            _this.renderDayGridBgIntroHtml=function(){
                var_a=_this.context,theme=_a.theme,options=_a.options;
                return''+
                    '<tdclass="fc-axis'+theme.getClass('widgetContent')+'"'+_this.axisStyleAttr()+'>'+
                    '<span>'+//neededformatchCellWidths
                    core.getAllDayHtml(options)+
                    '</span>'+
                    '</td>';
            };
            //GeneratestheHTMLthatgoesbeforeallothertypesofcells.
            //Affectscontent-skeleton,mirror-skeleton,highlight-skeletonforboththetime-gridandday-grid.
            _this.renderDayGridIntroHtml=function(){
                return'<tdclass="fc-axis"'+_this.axisStyleAttr()+'></td>';
            };
            return_this;
        }
        AbstractTimeGridView.prototype.render=function(props,context){
            _super.prototype.render.call(this,props,context);
            this.renderSkeleton(context);
        };
        AbstractTimeGridView.prototype.destroy=function(){
            _super.prototype.destroy.call(this);
            this.renderSkeleton.unrender();
        };
        AbstractTimeGridView.prototype._renderSkeleton=function(context){
            this.el.classList.add('fc-timeGrid-view');
            this.el.innerHTML=this.renderSkeletonHtml();
            this.scroller=newcore.ScrollComponent('hidden',//overflowx
            'auto'//overflowy
            );
            vartimeGridWrapEl=this.scroller.el;
            this.el.querySelector('.fc-body>tr>td').appendChild(timeGridWrapEl);
            timeGridWrapEl.classList.add('fc-time-grid-container');
            vartimeGridEl=core.createElement('div',{className:'fc-time-grid'});
            timeGridWrapEl.appendChild(timeGridEl);
            this.timeGrid=newTimeGrid(timeGridEl,{
                renderBgIntroHtml:this.renderTimeGridBgIntroHtml,
                renderIntroHtml:this.renderTimeGridIntroHtml
            });
            if(context.options.allDaySlot){//shouldwedisplaythe"all-day"area?
                this.dayGrid=newdaygrid.DayGrid(//theall-daysubcomponentofthisview
                this.el.querySelector('.fc-day-grid'),{
                    renderNumberIntroHtml:this.renderDayGridIntroHtml,
                    renderBgIntroHtml:this.renderDayGridBgIntroHtml,
                    renderIntroHtml:this.renderDayGridIntroHtml,
                    colWeekNumbersVisible:false,
                    cellWeekNumbersVisible:false
                });
                //havetheday-gridextendit'scoordinateareaoverthe<hr>dividingthetwogrids
                vardividerEl=this.el.querySelector('.fc-divider');
                this.dayGrid.bottomCoordPadding=dividerEl.getBoundingClientRect().height;
            }
        };
        AbstractTimeGridView.prototype._unrenderSkeleton=function(){
            this.el.classList.remove('fc-timeGrid-view');
            this.timeGrid.destroy();
            if(this.dayGrid){
                this.dayGrid.destroy();
            }
            this.scroller.destroy();
        };
        /*Rendering
        ------------------------------------------------------------------------------------------------------------------*/
        //BuildstheHTMLskeletonfortheview.
        //Theday-gridandtime-gridcomponentswillrenderinsidecontainersdefinedbythisHTML.
        AbstractTimeGridView.prototype.renderSkeletonHtml=function(){
            var_a=this.context,theme=_a.theme,options=_a.options;
            return''+
                '<tableclass="'+theme.getClass('tableGrid')+'">'+
                (options.columnHeader?
                    '<theadclass="fc-head">'+
                        '<tr>'+
                        '<tdclass="fc-head-container'+theme.getClass('widgetHeader')+'">&nbsp;</td>'+
                        '</tr>'+
                        '</thead>':
                    '')+
                '<tbodyclass="fc-body">'+
                '<tr>'+
                '<tdclass="'+theme.getClass('widgetContent')+'">'+
                (options.allDaySlot?
                    '<divclass="fc-day-grid"></div>'+
                        '<hrclass="fc-divider'+theme.getClass('widgetHeader')+'"/>':
                    '')+
                '</td>'+
                '</tr>'+
                '</tbody>'+
                '</table>';
        };
        /*NowIndicator
        ------------------------------------------------------------------------------------------------------------------*/
        AbstractTimeGridView.prototype.getNowIndicatorUnit=function(){
            returnthis.timeGrid.getNowIndicatorUnit();
        };
        //subclassesshouldimplement
        //renderNowIndicator(date:DateMarker){
        //}
        AbstractTimeGridView.prototype.unrenderNowIndicator=function(){
            this.timeGrid.unrenderNowIndicator();
        };
        /*Dimensions
        ------------------------------------------------------------------------------------------------------------------*/
        AbstractTimeGridView.prototype.updateSize=function(isResize,viewHeight,isAuto){
            _super.prototype.updateSize.call(this,isResize,viewHeight,isAuto);//willcallupdateBaseSize.importantthatexecutesfirst
            this.timeGrid.updateSize(isResize);
            if(this.dayGrid){
                this.dayGrid.updateSize(isResize);
            }
        };
        //Adjuststheverticaldimensionsoftheviewtothespecifiedvalues
        AbstractTimeGridView.prototype.updateBaseSize=function(isResize,viewHeight,isAuto){
            var_this=this;
            vareventLimit;
            varscrollerHeight;
            varscrollbarWidths;
            //makeallaxiscellslineup
            this.axisWidth=core.matchCellWidths(core.findElements(this.el,'.fc-axis'));
            //hacktogivetheviewsomeheightpriortotimeGrid'scolumnsbeingrendered
            //TODO:separatesettingheightfromscrollerVStimeGrid.
            if(!this.timeGrid.colEls){
                if(!isAuto){
                    scrollerHeight=this.computeScrollerHeight(viewHeight);
                    this.scroller.setHeight(scrollerHeight);
                }
                return;
            }
            //setoffakerowelementsthatmustcompensatewhenscrollerhasscrollbars
            varnoScrollRowEls=core.findElements(this.el,'.fc-row').filter(function(node){
                return!_this.scroller.el.contains(node);
            });
            //resetalldimensionsbacktotheoriginalstate
            this.timeGrid.bottomRuleEl.style.display='none';//willbeshownlaterifthis<hr>isnecessary
            this.scroller.clear();//setsheightto'auto'andclearsoverflow
            noScrollRowEls.forEach(core.uncompensateScroll);
            //limitnumberofeventsintheall-dayarea
            if(this.dayGrid){
                this.dayGrid.removeSegPopover();//killthe"more"popoverifdisplayed
                eventLimit=this.context.options.eventLimit;
                if(eventLimit&&typeofeventLimit!=='number'){
                    eventLimit=TIMEGRID_ALL_DAY_EVENT_LIMIT;//makesure"auto"goestoarealnumber
                }
                if(eventLimit){
                    this.dayGrid.limitRows(eventLimit);
                }
            }
            if(!isAuto){//shouldweforcedimensionsofthescrollcontainer?
                scrollerHeight=this.computeScrollerHeight(viewHeight);
                this.scroller.setHeight(scrollerHeight);
                scrollbarWidths=this.scroller.getScrollbarWidths();
                if(scrollbarWidths.left||scrollbarWidths.right){//usingscrollbars?
                    //maketheall-dayandheaderrowslinesup
                    noScrollRowEls.forEach(function(rowEl){
                        core.compensateScroll(rowEl,scrollbarWidths);
                    });
                    //thescrollbarcompensationmighthavechangedtextflow,whichmightaffectheight,sorecalculate
                    //andreapplythedesiredheighttothescroller.
                    scrollerHeight=this.computeScrollerHeight(viewHeight);
                    this.scroller.setHeight(scrollerHeight);
                }
                //guaranteesthesamescrollbarwidths
                this.scroller.lockOverflow(scrollbarWidths);
                //ifthere'sanyspacebelowtheslats,showthehorizontalrule.
                //thiswon'tcauseanynewoverflow,becauselockOverflowalreadycalled.
                if(this.timeGrid.getTotalSlatHeight()<scrollerHeight){
                    this.timeGrid.bottomRuleEl.style.display='';
                }
            }
        };
        //givenadesiredtotalheightoftheview,returnswhattheheightofthescrollershouldbe
        AbstractTimeGridView.prototype.computeScrollerHeight=function(viewHeight){
            returnviewHeight-
                core.subtractInnerElHeight(this.el,this.scroller.el);//everythingthat'sNOTthescroller
        };
        /*Scroll
        ------------------------------------------------------------------------------------------------------------------*/
        //Computestheinitialpre-configuredscrollstatepriortoallowingtheusertochangeit
        AbstractTimeGridView.prototype.computeDateScroll=function(duration){
            vartop=this.timeGrid.computeTimeTop(duration);
            //zoomcangiveweirdfloating-pointvalues.ratherscrollalittlebitfurther
            top=Math.ceil(top);
            if(top){
                top++;//toovercometopborderthatslotsbeyondthefirsthave.looksbetter
            }
            return{top:top};
        };
        AbstractTimeGridView.prototype.queryDateScroll=function(){
            return{top:this.scroller.getScrollTop()};
        };
        AbstractTimeGridView.prototype.applyDateScroll=function(scroll){
            if(scroll.top!==undefined){
                this.scroller.setScrollTop(scroll.top);
            }
        };
        //GeneratesanHTMLattributestringforsettingthewidthoftheaxis,ifitisknown
        AbstractTimeGridView.prototype.axisStyleAttr=function(){
            if(this.axisWidth!=null){
                return'style="width:'+this.axisWidth+'px"';
            }
            return'';
        };
        returnAbstractTimeGridView;
    }(core.View));
    AbstractTimeGridView.prototype.usesMinMaxTime=true;//indicatesthatminTime/maxTimeaffectsrendering

    varSimpleTimeGrid=/**@class*/(function(_super){
        __extends(SimpleTimeGrid,_super);
        functionSimpleTimeGrid(timeGrid){
            var_this=_super.call(this,timeGrid.el)||this;
            _this.buildDayRanges=core.memoize(buildDayRanges);
            _this.slicer=newTimeGridSlicer();
            _this.timeGrid=timeGrid;
            return_this;
        }
        SimpleTimeGrid.prototype.firstContext=function(context){
            context.calendar.registerInteractiveComponent(this,{
                el:this.timeGrid.el
            });
        };
        SimpleTimeGrid.prototype.destroy=function(){
            _super.prototype.destroy.call(this);
            this.context.calendar.unregisterInteractiveComponent(this);
        };
        SimpleTimeGrid.prototype.render=function(props,context){
            vardateEnv=this.context.dateEnv;
            vardateProfile=props.dateProfile,dayTable=props.dayTable;
            vardayRanges=this.dayRanges=this.buildDayRanges(dayTable,dateProfile,dateEnv);
            this.timeGrid.receiveProps(__assign({},this.slicer.sliceProps(props,dateProfile,null,context.calendar,this.timeGrid,dayRanges),{dateProfile:dateProfile,cells:dayTable.cells[0]}),context);
        };
        SimpleTimeGrid.prototype.renderNowIndicator=function(date){
            this.timeGrid.renderNowIndicator(this.slicer.sliceNowDate(date,this.timeGrid,this.dayRanges),date);
        };
        SimpleTimeGrid.prototype.buildPositionCaches=function(){
            this.timeGrid.buildPositionCaches();
        };
        SimpleTimeGrid.prototype.queryHit=function(positionLeft,positionTop){
            varrawHit=this.timeGrid.positionToHit(positionLeft,positionTop);
            if(rawHit){
                return{
                    component:this.timeGrid,
                    dateSpan:rawHit.dateSpan,
                    dayEl:rawHit.dayEl,
                    rect:{
                        left:rawHit.relativeRect.left,
                        right:rawHit.relativeRect.right,
                        top:rawHit.relativeRect.top,
                        bottom:rawHit.relativeRect.bottom
                    },
                    layer:0
                };
            }
        };
        returnSimpleTimeGrid;
    }(core.DateComponent));
    functionbuildDayRanges(dayTable,dateProfile,dateEnv){
        varranges=[];
        for(var_i=0,_a=dayTable.headerDates;_i<_a.length;_i++){
            vardate=_a[_i];
            ranges.push({
                start:dateEnv.add(date,dateProfile.minTime),
                end:dateEnv.add(date,dateProfile.maxTime)
            });
        }
        returnranges;
    }
    varTimeGridSlicer=/**@class*/(function(_super){
        __extends(TimeGridSlicer,_super);
        functionTimeGridSlicer(){
            return_super!==null&&_super.apply(this,arguments)||this;
        }
        TimeGridSlicer.prototype.sliceRange=function(range,dayRanges){
            varsegs=[];
            for(varcol=0;col<dayRanges.length;col++){
                varsegRange=core.intersectRanges(range,dayRanges[col]);
                if(segRange){
                    segs.push({
                        start:segRange.start,
                        end:segRange.end,
                        isStart:segRange.start.valueOf()===range.start.valueOf(),
                        isEnd:segRange.end.valueOf()===range.end.valueOf(),
                        col:col
                    });
                }
            }
            returnsegs;
        };
        returnTimeGridSlicer;
    }(core.Slicer));

    varTimeGridView=/**@class*/(function(_super){
        __extends(TimeGridView,_super);
        functionTimeGridView(){
            var_this=_super!==null&&_super.apply(this,arguments)||this;
            _this.buildDayTable=core.memoize(buildDayTable);
            return_this;
        }
        TimeGridView.prototype.render=function(props,context){
            _super.prototype.render.call(this,props,context);//forflagsforupdateSize.also_renderSkeleton/_unrenderSkeleton
            var_a=this.props,dateProfile=_a.dateProfile,dateProfileGenerator=_a.dateProfileGenerator;
            varnextDayThreshold=context.nextDayThreshold;
            vardayTable=this.buildDayTable(dateProfile,dateProfileGenerator);
            varsplitProps=this.splitter.splitProps(props);
            if(this.header){
                this.header.receiveProps({
                    dateProfile:dateProfile,
                    dates:dayTable.headerDates,
                    datesRepDistinctDays:true,
                    renderIntroHtml:this.renderHeadIntroHtml
                },context);
            }
            this.simpleTimeGrid.receiveProps(__assign({},splitProps['timed'],{dateProfile:dateProfile,
                dayTable:dayTable}),context);
            if(this.simpleDayGrid){
                this.simpleDayGrid.receiveProps(__assign({},splitProps['allDay'],{dateProfile:dateProfile,
                    dayTable:dayTable,
                    nextDayThreshold:nextDayThreshold,isRigid:false}),context);
            }
            this.startNowIndicator(dateProfile,dateProfileGenerator);
        };
        TimeGridView.prototype._renderSkeleton=function(context){
            _super.prototype._renderSkeleton.call(this,context);
            if(context.options.columnHeader){
                this.header=newcore.DayHeader(this.el.querySelector('.fc-head-container'));
            }
            this.simpleTimeGrid=newSimpleTimeGrid(this.timeGrid);
            if(this.dayGrid){
                this.simpleDayGrid=newdaygrid.SimpleDayGrid(this.dayGrid);
            }
        };
        TimeGridView.prototype._unrenderSkeleton=function(){
            _super.prototype._unrenderSkeleton.call(this);
            if(this.header){
                this.header.destroy();
            }
            this.simpleTimeGrid.destroy();
            if(this.simpleDayGrid){
                this.simpleDayGrid.destroy();
            }
        };
        TimeGridView.prototype.renderNowIndicator=function(date){
            this.simpleTimeGrid.renderNowIndicator(date);
        };
        returnTimeGridView;
    }(AbstractTimeGridView));
    functionbuildDayTable(dateProfile,dateProfileGenerator){
        vardaySeries=newcore.DaySeries(dateProfile.renderRange,dateProfileGenerator);
        returnnewcore.DayTable(daySeries,false);
    }

    varmain=core.createPlugin({
        defaultView:'timeGridWeek',
        views:{
            timeGrid:{
                class:TimeGridView,
                allDaySlot:true,
                slotDuration:'00:30:00',
                slotEventOverlap:true//abadname.confusedwithoverlap/constraintsystem
            },
            timeGridDay:{
                type:'timeGrid',
                duration:{days:1}
            },
            timeGridWeek:{
                type:'timeGrid',
                duration:{weeks:1}
            }
        }
    });

    exports.AbstractTimeGridView=AbstractTimeGridView;
    exports.TimeGrid=TimeGrid;
    exports.TimeGridSlicer=TimeGridSlicer;
    exports.TimeGridView=TimeGridView;
    exports.buildDayRanges=buildDayRanges;
    exports.buildDayTable=buildDayTable;
    exports.default=main;

    Object.defineProperty(exports,'__esModule',{value:true});

}));
