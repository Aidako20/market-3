varpy={};
(function(py){
    varcreate=function(o,props){
        functionF(){}
        F.prototype=o;
        varinst=newF;
        if(props){
            for(varnameinprops){
                if(!props.hasOwnProperty(name)){continue;}
                inst[name]=props[name];
            }
        }
        returninst;
    };

    varsymbols={};
    varcomparators={};
    varBase={
        nud:function(){thrownewError(this.id+"undefinedasprefix");},
        led:function(led){thrownewError(this.id+"undefinedasinfix");},
        toString:function(){
            if(this.id==='(constant)'||this.id==='(number)'||this.id==='(name)'||this.id==='(string)'){
                return[this.id.slice(0,this.id.length-1),'',this.value,')'].join('');
            }elseif(this.id==='(end)'){
                return'(end)';
            }elseif(this.id==='(comparator)'){
                varrepr=['(comparator',this.expressions[0]];
                for(vari=0;i<this.operators.length;++i){
                    repr.push(this.operators[i],this.expressions[i+1]);
                }
                returnrepr.join('')+')';
            }
            varout=[this.id,this.first,this.second,this.third]
                .filter(function(r){returnr}).join('');
            return'('+out+')';
        }
    };
    functionsymbol(id,bp){
        bp=bp||0;
        vars=symbols[id];
        if(s){
            if(bp>s.lbp){
                s.lbp=bp;
            }
            returns;
        }
        returnsymbols[id]=create(Base,{
            id:id,
            lbp:bp
        });
    }
    functionconstant(id){
        vars=symbol(id);
        s.id='(constant)';
        s.value=id;
        s.nud=function(){
            returnthis;
        };
    }
    functionprefix(id,bp,nud){
        symbol(id).nud=nud||function(){
            this.first=expression(bp);
            returnthis
        }
    }
    functioninfix(id,bp,led){
        symbol(id,bp).led=led||function(left){
            this.first=left;
            this.second=expression(bp);
            returnthis;
        }
    }
    functioninfixr(id,bp){
        symbol(id,bp).led=function(left){
            this.first=left;
            this.second=expression(bp-1);
            returnthis;
        }
    }
    functioncomparator(id){
        comparators[id]=true;
        varbp=60;
        infix(id,bp,function(left){
            this.id='(comparator)';
            this.operators=[id];
            this.expressions=[left,expression(bp)];
            while(token.idincomparators){
                this.operators.push(token.id);
                advance();
                this.expressions.push(
                    expression(bp));
            }
            returnthis;
        });
    }

    constant('None');constant('False');constant('True');

    symbol('(number)').nud=function(){returnthis;};
    symbol('(name)').nud=function(){returnthis;};
    symbol('(string)').nud=function(){returnthis;};
    symbol('(end)');

    symbol(':');symbol(')');symbol(']');symbol('}');symbol(',');
    symbol('else');

    infix('=',10,function(left){
        if(left.id!=='(name)'){
            thrownewError("Expectedkeywordargumentname,got"+token.id);
        }
        this.first=left;
        this.second=expression();
        returnthis;
    });

    symbol('lambda',20).nud=function(){
        this.first=[];
        if(token.id!==':'){
            for(;;){
                if(token.id!=='(name)'){
                    thrownewError('Exceptedanargumentname');
                }
                this.first.push(token);
                advance();
                if(token.id!==','){
                    break;
                }
                advance(',');
            }
        }
        advance(':');
        this.second=expression();
        returnthis;
    };
    infix('if',20,function(left){
        this.ifTrue=left;
        this.condition=expression();
        advance('else');
        this.ifFalse=expression();
        returnthis;
    });

    infixr('or',30);infixr('and',40);prefix('not',50);

    comparator('in');comparator('notin');
    comparator('is');comparator('isnot');
    comparator('<');comparator('<=');
    comparator('>');comparator('>=');
    comparator('<>');comparator('!=');comparator('==');

    infix('|',70);infix('^',80);infix('&',90);

    infix('<<',100);infix('>>',100);

    infix('+',110);infix('-',110);

    infix('*',120);infix('/',120);
    infix('//',120);infix('%',120);

    prefix('-',130);prefix('+',130);prefix('~',130);

    infixr('**',140);

    infix('.',150,function(left){
        if(token.id!=='(name)'){
            thrownewError('Expectedattributename,got'+token.id);
        }
        this.first=left;
        this.second=token;
        advance();
        returnthis;
    });
    symbol('(',150).nud=function(){
        this.first=[];
        varcomma=false;
        if(token.id!==')'){
            while(true){
                if(token.id===')'){
                    break;
                }
                this.first.push(expression());
                if(token.id!==','){
                    break;
                }
                comma=true;
                advance(',');
            }
        }
        advance(')');
        if(!this.first.length||comma){
            returnthis;
        }else{
            returnthis.first[0];
        }
    };
    symbol('(').led=function(left){
        this.first=left;
        this.second=[];
        if(token.id!==")"){
            for(;;){
                this.second.push(expression());
                if(token.id!==','){
                    break;
                }
                advance(',');
            }
        }
        advance(")");
        returnthis;

    };
    infix('[',150,function(left){
        this.first=left;
        this.second=expression();
        advance("]");
        returnthis;
    });
    symbol('[').nud=function(){
        this.first=[];
        if(token.id!==']'){
            for(;;){
                if(token.id===']'){
                    break;
                }
                this.first.push(expression());
                if(token.id!==','){
                    break;
                }
                advance(',');
            }
        }
        advance(']');
        returnthis;
    };

    symbol('{').nud=function(){
        this.first=[];
        if(token.id!=='}'){
            for(;;){
                if(token.id==='}'){
                    break;
                }
                varkey=expression();
                advance(':');
                varvalue=expression();
                this.first.push([key,value]);
                if(token.id!==','){
                    break;
                }
                advance(',');
            }
        }
        advance('}');
        returnthis;
    };

    py.tokenize=(function(){
        functiongroup(){return'('+Array.prototype.join.call(arguments,'|')+')';}

        varWhitespace='[\\f\\t]*';

        varName='[a-zA-Z_]\\w*';

        varDecNumber='\\d+(L|l)?';
        varIntNumber=DecNumber;
        varPointFloat=group('\\d+\\.\\d*','\\.\\d+');
        varFloatNumber=PointFloat;
        varNumber=group(FloatNumber,IntNumber);

        varOperator=group("\\*\\*=?",">>=?","<<=?","<>","!=",
                             "//=?","[+\\-*/%&|^=<>]=?","~");
        varBracket='[\\[\\]\\(\\)\\{\\}]';
        varSpecial='[:;.,`@]';
        varFunny=group(Operator,Bracket,Special);

        varContStr=group("([uU])?'([^\n'\\\\]*(?:\\\\.[^\n'\\\\]*)*)'",'([uU])?"([^\n"\\\\]*(?:\\\\.[^\n"\\\\]*)*)"');
        varPseudoToken=Whitespace+group(Number,Funny,ContStr,Name);

        varnumber_pattern=newRegExp('^'+Number+'$');
        varstring_pattern=newRegExp('^'+ContStr+'$');
        varname_pattern=newRegExp('^'+Name+'$');
        varstrip=newRegExp('^'+Whitespace);
        returnfunctiontokenize(s){
            varmax=s.length,tokens=[],start,end;
            ///gflagmakesrepeatedexec()havememory
            varpseudoprog=newRegExp(PseudoToken,'g');

            while(pseudoprog.lastIndex<max){
                varpseudomatch=pseudoprog.exec(s);
                if(!pseudomatch){
                    //ifmatchfailedontrailingwhitespace,endtokenizing
                    if(/^\s+$/.test(s.slice(end))){
                        break;
                    }
                    thrownewError('Failedtotokenize<<'+s
                                    +'>>atindex'+(end||0)
                                    +';parsedsofar:'+tokens);
                }

                start=pseudomatch.index;
                end=pseudoprog.lastIndex;
                //stripleadingspacecaughtbyWhitespace
                vartoken=s.slice(start,end).replace(strip,'');

                if(number_pattern.test(token)){
                    tokens.push(create(symbols['(number)'],{
                        value:parseFloat(token)
                    }));
                }elseif(string_pattern.test(token)){
                    varm=string_pattern.exec(token);
                    tokens.push(create(symbols['(string)'],{
                        value:PY_decode_string_literal(
                            m[3]!==undefined?m[3]:m[5],
                            !!(m[2]||m[4])
                        )
                    }));
                }elseif(tokeninsymbols){
                    varsymbol;
                    //transform'notin'and'isnot'inasingletoken
                    if(token==='in'&&tokens.length>1&&tokens[tokens.length-1].id==='not'){
                        symbol=symbols['notin'];
                        tokens.pop();
                    }elseif(token==='not'&&tokens.length>1&&tokens[tokens.length-1].id==='is'){
                        symbol=symbols['isnot'];
                        tokens.pop();
                    }else{
                        symbol=symbols[token];
                    }
                    tokens.push(create(symbol));
                }elseif(name_pattern.test(token)){
                    tokens.push(create(symbols['(name)'],{
                        value:token
                    }));
                }else{
                     thrownewError("Tokenizingfailureof<<"+s+">>atindex"+start
                                     +"fortoken[["+token+"]]"
                                     +";parsedsofar:"+tokens);

                }
            }
            tokens.push(create(symbols['(end)']));
            returntokens;
        }
    })();

    vartoken,next;
    functionexpression(rbp){
        rbp=rbp||0;
        vart=token;
        token=next();
        varleft=t.nud();
        while(rbp<token.lbp){
            t=token;
            token=next();
            left=t.led(left);
        }
        returnleft;
    }
    functionadvance(id){
        if(id&&token.id!==id){
            thrownewError(
                'Expected"'+id+'",got"'+token.id+'"');
        }
        token=next();
    }

    functionPY_ensurepy(val,name){
        switch(val){
        caseundefined:
            thrownewError("NameError:name'"+name+"'isnotdefined");
        casenull:
            returnpy.None;
        casetrue:
            returnpy.True;
        casefalse:
            returnpy.False;
        }

        varfn=function(){};
        fn.prototype=py.object;
        if(py.PY_isInstance(val,py.object)
            ||py.PY_isSubclass(val,py.object)){
            returnval;
        }

        switch(typeofval){
        case'number':
            returnpy.float.fromJSON(val);
        case'string':
            returnpy.str.fromJSON(val);
        case'function':
            returnpy.PY_def.fromJSON(val);
        }

        switch(val.constructor){
        caseObject:
            //TODO:whypy.objectinsteadofpy.dict?
            varo=py.PY_call(py.object);
            for(varpropinval){
                if(val.hasOwnProperty(prop)){
                    o[prop]=val[prop];
                }
            }
            returno;
        caseArray:
            returnpy.list.fromJSON(val);
        }

        thrownewError("Couldnotconvert"+val+"toapyval");
    }

    vartypename=function(obj){
        if(obj.__class__){//pytype
            returnobj.__class__.__name__;
        }elseif(typeofobj!=='object'){//JSprimitive
            returntypeofobj;
        }else{//JSobject
            returnobj.constructor.name;
        }
    };
    //JSAPI,JS-levelutilityfunctionsforimplementingnewpy.js
    //types
    py.py={};

    py.PY_parseArgs=functionPY_parseArgs(argument,format){
        varout={};
        varargs=argument[0];
        varkwargs={};
        for(varkinargument[1]){
            if(!argument[1].hasOwnProperty(k)){continue;}
            kwargs[k]=argument[1][k];
        }
        if(typeofformat==='string'){
            format=format.split(/\s+/);
        }
        varname=function(spec){
            if(typeofspec==='string'){
                returnspec;
            }elseif(specinstanceofArray&&spec.length===2){
                returnspec[0];
            }
            thrownewError(
                "TypeError:unknownformatspecification"+
                    JSON.stringify(spec));
        };
        varspec;
        //TODO:ensureallformatargnamesareactualnames?
        for(vari=0;i<args.length;++i){
            spec=format[i];
            //speclistended,orspecsswitchingtokeyword-only
            if(!spec||spec==='*'){
                thrownewError(
                    "TypeError:functiontakesexactly"+(i-1)+
                    "positionalarguments("+args.length+
                    "given")
            }elseif(/^\*\w/.test(spec)){
                //*args,final
                out[name(spec.slice(1))]=args.slice(i);
                break;
            }

            out[name(spec)]=args[i];
        }
        for(varj=i;j<format.length;++j){
            spec=format[j];
            varn=name(spec);

            if(ninout){
                thrownewError(
                    "TypeError:functiongotmultiplevalues"+
                    "forkeywordargument'"+kwarg+"'");
            }
            if(/^\*\*\w/.test(n)){
                //**kwarg
                out[n.slice(2)]=kwargs;
                kwargs={};
                break;
            }
            if(ninkwargs){
                out[n]=kwargs[n];
                //Removefromargsmap
                deletekwargs[n];
            }
        }
        //Ensureallkeywordargumentswereconsumed
        for(varkeyinkwargs){
            thrownewError(
                "TypeError:functiongotanunexpectedkeywordargument'"
                    +key+"'");
        }

        //Fixupargscountifthere'sakwonlyflag(oran*args)
        varkwonly=0;
        for(vark=0;k<format.length;++k){
            if(/^\*/.test(format[k])){kwonly=1;break;}
        }
        //Checkthatallrequiredargumentshavebeenmatched,add
        //optionalvalues
        for(vark=0;k<format.length;++k){
            spec=format[k];
            varn=name(spec);
            //kwonly,va_argormatchedargument
            if(/^\*/.test(n)||ninout){continue;}
            //Unmatchedrequiredargument
            if(!(specinstanceofArray)){
                thrownewError(
                    "TypeError:functiontakesexactly"+(format.length-kwonly)
                    +"arguments");
            }
            //Setdefaultvalue
            out[n]=spec[1];
        }
        
        returnout;
    };

    py.PY_hasAttr=function(o,attr_name){
        try{
            py.PY_getAttr(o,attr_name);
            returntrue;
        }catch(e){
            returnfalse;
        }
    };
    py.PY_getAttr=function(o,attr_name){
        returnPY_ensurepy(o.__getattribute__(attr_name));
    };
    py.PY_str=function(o){
        varv=o.__str__();
        if(py.PY_isInstance(v,py.str)){
            returnv;
        }
        thrownewError(
            'TypeError:__str__returnednon-string(type'
                +typename(v)
                +')');
    };
    py.PY_isInstance=function(inst,cls){
        varfn=function(){};
        fn.prototype=cls;
        returninstinstanceoffn;
    };
    py.PY_isSubclass=function(derived,cls){
        varfn=function(){};
        fn.prototype=cls;
        returnderived===cls||derivedinstanceoffn;
    };
    py.PY_call=function(callable,args,kwargs){
        if(!args){
            args=[];
        }
        if(typeofargs==='object'&&!(argsinstanceofArray)){
            kwargs=args;
            args=[];
        }
        if(!kwargs){
            kwargs={};
        }
        if(callable.__is_type){
            //classhack
            varinstance=callable.__new__.call(callable,args,kwargs);
            vartyp=function(){};
            typ.prototype=callable;
            if(instanceinstanceoftyp){
                instance.__init__.call(instance,args,kwargs);
            }
            returninstance
        }
        returncallable.__call__(args,kwargs);
    };
    py.PY_isTrue=function(o){
        varres=o.__nonzero__();
        if(res===py.True){
            returntrue;
        }
        if(res===py.False){
            returnfalse;
        }
        thrownewError(
            "TypeError:__nonzero__shouldreturnbool,returned"
                +typename(res));
    };
    py.PY_not=function(o){
        return!py.PY_isTrue(o);
    };
    py.PY_size=function(o){
        if(!o.__len__){
            thrownewError(
                "TypeError:objectoftype'"+
                    typename(o)+
                    "'hasnolen()");
        }
        varv=o.__len__();
        if(typeofv!=='number'){
            thrownewError("TypeError:anumberisrequired");
        }
        returnv;
    };
    py.PY_getItem=function(o,key){
        if(!('__getitem__'ino)){
            thrownewError(
                "TypeError:'"+typename(o)+
                    "'objectisunsubscriptable")
        }
        if(!py.PY_isInstance(key,py.object)){
            thrownewError(
                "TypeError:'"+typename(key)+
                    "'isnotapy.jsobject");
        }
        varres=o.__getitem__(key);
        if(!py.PY_isInstance(key,py.object)){
            thrownewError(
                "TypeError:__getitem__mustreturnapy.jsobject,got"
                    +typename(res));
        }
        returnres;
    };
    py.PY_setItem=function(o,key,v){
        if(!('__setitem__'ino)){
            thrownewError(
                "TypeError:'"+typename(o)+
                    "'objectdoesnotsupportitemassignment");
        }
        if(!py.PY_isInstance(key,py.object)){
            thrownewError(
                "TypeError:'"+typename(key)+
                    "'isnotapy.jsobject");
        }
        if(!py.PY_isInstance(v,py.object)){
            thrownewError(
                "TypeError:'"+typename(v)+
                    "'isnotapy.jsobject");
        }
        o.__setitem__(key,v);
    };

    py.PY_add=function(o1,o2){
        returnPY_op(o1,o2,'+');
    };
    py.PY_subtract=function(o1,o2){
        returnPY_op(o1,o2,'-');
    };
    py.PY_multiply=function(o1,o2){
        returnPY_op(o1,o2,'*');
    };
    py.PY_divide=function(o1,o2){
        returnPY_op(o1,o2,'/');
    };
    py.PY_negative=function(o){
        if(!o.__neg__){
            thrownewError(
                "TypeError:badoperandforunary-:'"
                    +typename(o)
                    +"'");
        }
        returno.__neg__();
    };
    py.PY_positive=function(o){
        if(!o.__pos__){
            thrownewError(
                "TypeError:badoperandforunary+:'"
                    +typename(o)
                    +"'");
        }
        returno.__pos__();
    };

    //Builtins
    py.type=functiontype(name,bases,dict){
        if(typeofname!=='string'){
            thrownewError("ValueError:aclassnameshouldbeastring");
        }
        if(!bases||bases.length===0){
            bases=[py.object];
        }elseif(bases.length>1){
            thrownewError("ValueError:can'tprovidemultiplebasesfora"
                          +"newtype");
        }
        varbase=bases[0];
        varClassObj=create(base);
        if(dict){
            for(varkindict){
                if(!dict.hasOwnProperty(k)){continue;}
                ClassObj[k]=dict[k];
            }
        }
        ClassObj.__class__=ClassObj;
        ClassObj.__name__=name;
        ClassObj.__bases__=bases;
        ClassObj.__is_type=true;

        returnClassObj;
    };
    py.type.__call__=function(){
        varargs=py.PY_parseArgs(arguments,['object']);
        returnargs.object.__class__;
    };

    varhash_counter=0;
    py.object=py.type('object',[{}],{
        __new__:function(){
            //If``this``isn'ttheclassobject,thisisgoingtobe
            //beyondfuckedup
            varinst=create(this);
            inst.__is_type=false;
            returninst;
        },
        __init__:function(){},
        //Basiccustomization
        __hash__:function(){
            if(this._hash){
                returnthis._hash;
            }
            //taggedcounter,toavoidcollisionswithe.g.numberhashes
            returnthis._hash='\0\0\0'+String(hash_counter++);
        },
        __eq__:function(other){
            return(this===other)?py.True:py.False;
        },
        __ne__:function(other){
            if(py.PY_isTrue(this.__eq__(other))){
                returnpy.False;
            }else{
                returnpy.True;
            }
        },
        __lt__:function(){returnpy.NotImplemented;},
        __le__:function(){returnpy.NotImplemented;},
        __ge__:function(){returnpy.NotImplemented;},
        __gt__:function(){returnpy.NotImplemented;},
        __str__:function(){
            returnthis.__unicode__();
        },
        __unicode__:function(){
            returnpy.str.fromJSON('<'+typename(this)+'object>');
        },
        __nonzero__:function(){
            returnpy.True;
        },
        //Attributeaccess
        __getattribute__:function(name){
            if(nameinthis){
                varval=this[name];
                if(typeofval==='object'&&'__get__'inval){
                    //TODO:secondargumentshouldbeclass
                    returnval.__get__(this,py.PY_call(py.type,[this]));
                }
                if(typeofval==='function'&&!this.hasOwnProperty(name)){
                    //valisamethodfromtheclass
                    returnPY_instancemethod.fromJSON(val,this);
                }
                returnval;
            }
            if('__getattr__'inthis){
                returnthis.__getattr__(name);
            }
            thrownewError("AttributeError:objecthasnoattribute'"+name+"'");
        },
        __setattr__:function(name,value){
            if(nameinthis&&'__set__'inthis[name]){
                this[name].__set__(this,value);
            }
            this[name]=value;
        },
        //nodelattr,becauseno'del'statement

        //Conversion
        toJSON:function(){
            thrownewError(this.constructor.name+'cannotbeconvertedtoJSON');
        }
    });
    varNoneType=py.type('NoneType',null,{
        __nonzero__:function(){returnpy.False;},
        toJSON:function(){returnnull;}
    });
    py.None=py.PY_call(NoneType);
    varNotImplementedType=py.type('NotImplementedType',null,{});
    py.NotImplemented=py.PY_call(NotImplementedType);
    varbooleans_initialized=false;
    py.bool=py.type('bool',null,{
        __new__:function(){
            if(!booleans_initialized){
                returnpy.object.__new__.apply(this);
            }

            varph={};
            varargs=py.PY_parseArgs(arguments,[['value',ph]]);
            if(args.value===ph){
                returnpy.False;
            }
            returnpy.PY_isTrue(args.value)?py.True:py.False;
        },
        __str__:function(){
            returnpy.str.fromJSON((this===py.True)?"True":"False");
        },
        __nonzero__:function(){returnthis;},
        fromJSON:function(val){returnval?py.True:py.False},
        toJSON:function(){returnthis===py.True;}
    });
    py.True=py.PY_call(py.bool);
    py.False=py.PY_call(py.bool);
    booleans_initialized=true;
    py.float=py.type('float',null,{
        __init__:function(){
            varplaceholder={};
            varargs=py.PY_parseArgs(arguments,[['value',placeholder]]);
            varvalue=args.value;
            if(value===placeholder){
                this._value=0;return;
            }
            if(py.PY_isInstance(value,py.float)){
                this._value=value._value;
            }
            if(py.PY_isInstance(value,py.object)&&'__float__'invalue){
                varres=value.__float__();
                if(py.PY_isInstance(res,py.float)){
                    this._value=res._value;
                    return;
                }
                thrownewError('TypeError:__float__returnednon-float(type'+
                                typename(res)+')');
            }
            thrownewError('TypeError:float()argumentmustbeastringoranumber');
        },
        __str__:function(){
            returnpy.str.fromJSON(String(this._value));
        },
        __eq__:function(other){
            returnthis._value===other._value?py.True:py.False;
        },
        __lt__:function(other){
            if(!py.PY_isInstance(other,py.float)){
                returnpy.NotImplemented;
            }
            returnthis._value<other._value?py.True:py.False;
        },
        __le__:function(other){
            if(!py.PY_isInstance(other,py.float)){
                returnpy.NotImplemented;
            }
            returnthis._value<=other._value?py.True:py.False;
        },
        __gt__:function(other){
            if(!py.PY_isInstance(other,py.float)){
                returnpy.NotImplemented;
            }
            returnthis._value>other._value?py.True:py.False;
        },
        __ge__:function(other){
            if(!py.PY_isInstance(other,py.float)){
                returnpy.NotImplemented;
            }
            returnthis._value>=other._value?py.True:py.False;
        },
        __abs__:function(){
            returnpy.float.fromJSON(
                Math.abs(this._value));
        },
        __add__:function(other){
            if(!py.PY_isInstance(other,py.float)){
                returnpy.NotImplemented;
            }
            returnpy.float.fromJSON(this._value+other._value);
        },
        __mod__:function(other){
            if(!py.PY_isInstance(other,py.float)){
                returnpy.NotImplemented;
            }
            returnpy.float.fromJSON(this._value%other._value);
        },
        __neg__:function(){
            returnpy.float.fromJSON(-this._value);
        },
        __sub__:function(other){
            if(!py.PY_isInstance(other,py.float)){
                returnpy.NotImplemented;
            }
            returnpy.float.fromJSON(this._value-other._value);
        },
        __mul__:function(other){
            if(!py.PY_isInstance(other,py.float)){
                returnpy.NotImplemented;
            }
            returnpy.float.fromJSON(this._value*other._value);
        },
        __pow__:function(other){
            if(!py.PY_isInstance(other,py.float)){
                returnpy.NotImplemented;
            }
            returnpy.float.fromJSON(this._value**other._value);
        },
        __div__:function(other){
            if(!py.PY_isInstance(other,py.float)){
                returnpy.NotImplemented;
            }
            returnpy.float.fromJSON(this._value/other._value);
        },
        __nonzero__:function(){
            returnthis._value?py.True:py.False;
        },
        fromJSON:function(v){
            if(!(typeofv==='number')){
                thrownewError('py.float.fromJSONcanonlytakenumbers');
            }
            varinstance=py.PY_call(py.float);
            instance._value=v;
            returninstance;
        },
        toJSON:function(){
            returnthis._value;
        }
    });
    py.str=py.type('str',null,{
        __init__:function(){
            varplaceholder={};
            varargs=py.PY_parseArgs(arguments,[['value',placeholder]]);
            vars=args.value;
            if(s===placeholder){this._value='';return;}
            this._value=py.PY_str(s)._value;
        },
        __hash__:function(){
            return'\1\0\1'+this._value;
        },
        __str__:function(){
            returnthis;
        },
        __eq__:function(other){
            if(py.PY_isInstance(other,py.str)
                    &&this._value===other._value){
                returnpy.True;
            }
            returnpy.False;
        },
        __lt__:function(other){
            if(py.PY_not(py.PY_call(py.isinstance,[other,py.str]))){
                returnpy.NotImplemented;
            }
            returnthis._value<other._value?py.True:py.False;
        },
        __le__:function(other){
            if(!py.PY_isInstance(other,py.str)){
                returnpy.NotImplemented;
            }
            returnthis._value<=other._value?py.True:py.False;
        },
        __gt__:function(other){
            if(!py.PY_isInstance(other,py.str)){
                returnpy.NotImplemented;
            }
            returnthis._value>other._value?py.True:py.False;
        },
        __ge__:function(other){
            if(!py.PY_isInstance(other,py.str)){
                returnpy.NotImplemented;
            }
            returnthis._value>=other._value?py.True:py.False;
        },
        __add__:function(other){
            if(!py.PY_isInstance(other,py.str)){
                returnpy.NotImplemented;
            }
            returnpy.str.fromJSON(this._value+other._value);
        },
        __nonzero__:function(){
            returnthis._value.length?py.True:py.False;
        },
        __contains__:function(s){
            return(this._value.indexOf(s._value)!==-1)?py.True:py.False;
        },
        fromJSON:function(s){
            if(typeofs==='string'){
                varinstance=py.PY_call(py.str);
                instance._value=s;
                returninstance;
            }
            thrownewError("str.fromJSONcanonlytakestrings");
        },
        toJSON:function(){
            returnthis._value;
        }
    });
    py.tuple=py.type('tuple',null,{
        __init__:function(){
            this._values=[];
        },
        __len__:function(){
            returnthis._values.length;
        },
        __nonzero__:function(){
            returnpy.PY_size(this)>0?py.True:py.False;
        },
        __contains__:function(value){
            for(vari=0,len=this._values.length;i<len;++i){
                if(py.PY_isTrue(this._values[i].__eq__(value))){
                    returnpy.True;
                }
            }
            returnpy.False;
        },
        __getitem__:function(index){
            returnthis._values[index.toJSON()];
        },
        toJSON:function(){
            varout=[];
            for(vari=0;i<this._values.length;++i){
                out.push(this._values[i].toJSON());
            }
            returnout;
        },
        fromJSON:function(ar){
            if(!(arinstanceofArray)){
                thrownewError("Canonlycreateapy.tuplefromanArray");
            }
            vart=py.PY_call(py.tuple);
            for(vari=0;i<ar.length;++i){
                t._values.push(PY_ensurepy(ar[i]));
            }
            returnt;
        }
    });
    py.list=py.type('list',null,{
        __nonzero__:function(){
            returnthis.__len__>0?py.True:py.False;
        },
    });
    _.defaults(py.list,py.tuple)//Copyattributesnotredefinedintypelist
    py.dict=py.type('dict',null,{
        __init__:function(){
            this._store={};
        },
        __getitem__:function(key){
            varh=key.__hash__();
            if(!(hinthis._store)){
                thrownewError("KeyError:'"+key.toJSON()+"'");
            }
            returnthis._store[h][1];
        },
        __setitem__:function(key,value){
            this._store[key.__hash__()]=[key,value];
        },
        __len__:function(){
            returnObject.keys(this._store).length
        },
        __nonzero__:function(){
            returnpy.PY_size(this)>0?py.True:py.False;
        },
        get:function(){
            varargs=py.PY_parseArgs(arguments,['k',['d',py.None]]);
            varh=args.k.__hash__();
            if(!(hinthis._store)){
                returnargs.d;
            }
            returnthis._store[h][1];
        },
        fromJSON:function(d){
            varinstance=py.PY_call(py.dict);
            for(varkin(d||{})){
                if(!d.hasOwnProperty(k)){continue;}
                instance.__setitem__(
                    py.str.fromJSON(k),
                    PY_ensurepy(d[k]));
            }
            returninstance;
        },
        toJSON:function(){
            varout={};
            for(varkinthis._store){
                varitem=this._store[k];
                out[item[0].toJSON()]=item[1].toJSON();
            }
            returnout;
        }
    });
    py.PY_def=py.type('function',null,{
        __call__:function(){
            //don'twanttorewrite__call__forinstancemethod
            returnthis._func.apply(this._inst,arguments);
        },
        fromJSON:function(nativefunc){
            varinstance=py.PY_call(py.PY_def);
            instance._inst=null;
            instance._func=nativefunc;
            returninstance;
        },
        toJSON:function(){
            returnthis._func;
        }
    });
    py.classmethod=py.type('classmethod',null,{
        __init__:function(){
            varargs=py.PY_parseArgs(arguments,'function');
            this._func=args['function'];
        },
        __get__:function(obj,type){
            returnPY_instancemethod.fromJSON(this._func,type);
        },
        fromJSON:function(func){
            returnpy.PY_call(py.classmethod,[func]);
        }
    });
    varPY_instancemethod=py.type('instancemethod',[py.PY_def],{
        fromJSON:function(nativefunc,instance){
            varinst=py.PY_call(PY_instancemethod);
            //couldalsousebind?
            inst._inst=instance;
            inst._func=nativefunc;
            returninst;
        }
    });

    py.abs=newpy.PY_def.fromJSON(functionabs(){
        varargs=py.PY_parseArgs(arguments,['number']);
        if(!args.number.__abs__){
            thrownewError(
                "TypeError:badoperandtypeforabs():'"
                    +typename(args.number)
                    +"'");
        }
        return args.number.__abs__();
    });
    py.len=newpy.PY_def.fromJSON(functionlen(){
        varargs=py.PY_parseArgs(arguments,['object']);
        returnpy.float.fromJSON(py.PY_size(args.object));
    });
    py.isinstance=newpy.PY_def.fromJSON(functionisinstance(){
        varargs=py.PY_parseArgs(arguments,['object','class']);
        returnpy.PY_isInstance(args.object,args['class'])
            ?py.True:py.False;
    });
    py.issubclass=newpy.PY_def.fromJSON(functionissubclass(){
        varargs=py.PY_parseArgs(arguments,['C','B']);
        returnpy.PY_isSubclass(args.C,args.B)
            ?py.True:py.False;
    });


    /**
     *ImplementsthedecodingofPythonstringliterals(embeddedin
     *JSstrings)intoactualJSstrings.Thisincludesthedecoding
     *ofescapesintotheircorrespondingJS
     *characters/codepoints/whatever.
     *
     *The``unicode``flagsnoteswhethertheliteralshouldbe
     *decodedasabytestringliteraloraunicodeliteral,which
     *prettymuchonlyimpactsdecoding(ornot)ofunicodeescapes
     *atthispointsincebytestringsarenottechnicallyhandled
     *(everythingisdecodedtoJS"unicode"strings)
     *
     *Eventurally,``str``couldeventuallyusetypedarrays,that'd
     *beinteresting...
     */
    varPY_decode_string_literal=function(str,unicode){
        varout=[],code;
        //Directlymapsasingleescapecodetoanoutput
        //character
        vardirect_map={
            '\\':'\\',
            '"':'"',
            "'":"'",
            'a':'\x07',
            'b':'\x08',
            'f':'\x0c',
            'n':'\n',
            'r':'\r',
            't':'\t',
            'v':'\v'
        };

        for(vari=0;i<str.length;++i){
            if(str[i]!=='\\'){
                out.push(str[i]);
                continue;
            }
            varescape=str[i+1];
            if(escapeindirect_map){
                out.push(direct_map[escape]);
                ++i;
                continue;
            }

            switch(escape){
            //Ignored
            case'\n':++i;continue;
            //CharacternamednameintheUnicodedatabase(Unicodeonly)
            case'N':
                if(!unicode){break;}
                throwError("SyntaxError:\\N{}escapenotimplemented");
            case'u':
                if(!unicode){break;}
                varuni=str.slice(i+2,i+6);
                if(!/[0-9a-f]{4}/i.test(uni)){
                    thrownewError([
                        "SyntaxError:(unicodeerror)'unicodeescape'codec",
                        "can'tdecodebytesinposition",
                        i,"-",i+4,
                        ":truncated\\uXXXXescape"
                    ].join(''));
                }
                code=parseInt(uni,16);
                out.push(String.fromCharCode(code));
                //escape+4hexdigits
                i+=5;
                continue;
            case'U':
                if(!unicode){break;}
                //TODO:String.fromCodePoint
                throwError("SyntaxError:\\Uescapenotimplemented");
            case'x':
                //get2hexdigits
                varhex=str.slice(i+2,i+4);
                if(!/[0-9a-f]{2}/i.test(hex)){
                    if(!unicode){
                        thrownewError('ValueError:invalid\\xescape');
                    }
                    thrownewError([
                        "SyntaxError:(unicodeerror)'unicodeescape'",
                        "codeccan'tdecodebytesinposition",
                        i,'-',i+2,
                        ":truncated\\xXXescape"
                    ].join(''))
                }
                code=parseInt(hex,16);
                out.push(String.fromCharCode(code));
                //skipescape+2hexdigits
                i+=3;
                continue;
            default:
                //Checkifoctal
                if(!/[0-8]/.test(escape)){break;}
                varr=/[0-8]{1,3}/g;
                r.lastIndex=i+1;
                varm=r.exec(str);
                varoct=m[0];
                code=parseInt(oct,8);
                out.push(String.fromCharCode(code));
                //skipmatchlength
                i+=oct.length;
                continue;
            }
            out.push('\\');
        }

        returnout.join('');
    };
    //Allbinaryoperatorswithfallbacks,sotheycanbeappliedgenerically
    varPY_operators={
        '==':['eq','eq',function(a,b){returna===b;}],
        '!=':['ne','ne',function(a,b){returna!==b;}],
        '<>':['ne','ne',function(a,b){returna!==b;}],
        '<':['lt','gt',function(a,b){returna.__class__.__name__<b.__class__.__name__;}],
        '<=':['le','ge',function(a,b){returna.__class__.__name__<=b.__class__.__name__;}],
        '>':['gt','lt',function(a,b){returna.__class__.__name__>b.__class__.__name__;}],
        '>=':['ge','le',function(a,b){returna.__class__.__name__>=b.__class__.__name__;}],

        '+':['add','radd'],
        '-':['sub','rsub'],
        '*':['mul','rmul'],
        '/':['div','rdiv'],
        '//':['floordiv','rfloordiv'],
        '%':['mod','rmod'],
        '**':['pow','rpow'],
        '<<':['lshift','rlshift'],
        '>>':['rshift','rrshift'],
        '&':['and','rand'],
        '^':['xor','rxor'],
        '|':['or','ror']
    };
    /**
      *Implementsoperatorfallback/reflection.
      *
      *Firsttwoargumentsaretheobjectstoapplytheoperatoron,
      *intheiractualorder(ltr).
      *
      *Thirdargumentistheactualoperator.
      *
      *Iftheoperatormethodsraiseexceptions,thoseexceptionsare
      *notintercepted.
      */
    varPY_op=function(o1,o2,op){
        varr;
        varmethods=PY_operators[op];
        varforward='__'+methods[0]+'__',reverse='__'+methods[1]+'__';
        varotherwise=methods[2];

        if(forwardino1&&(r=o1[forward](o2))!==py.NotImplemented){
            returnr;
        }
        if(reverseino2&&(r=o2[reverse](o1))!==py.NotImplemented){
            returnr;
        }
        if(otherwise){
            returnPY_ensurepy(otherwise(o1,o2));
        }
        thrownewError(
            "TypeError:unsupportedoperandtype(s)for"+op+":'"
                +typename(o1)+"'and'"+typename(o2)+"'");
    };

    varPY_builtins={
        type:py.type,

        None:py.None,
        True:py.True,
        False:py.False,
        NotImplemented:py.NotImplemented,

        object:py.object,
        bool:py.bool,
        float:py.float,
        str:py.str,
        unicode:py.unicode,
        tuple:py.tuple,
        list:py.list,
        dict:py.dict,

        abs:py.abs,
        len:py.len,
        isinstance:py.isinstance,
        issubclass:py.issubclass,
        classmethod:py.classmethod,
    };

    py.parse=function(toks){
        varindex=0;
        token=toks[0];
        next=function(){returntoks[++index];};
        returnexpression();
    };
    varevaluate_operator=function(operator,a,b){
        switch(operator){
        case'is':returna===b?py.True:py.False;
        case'isnot':returna!==b?py.True:py.False;
        case'in':
            returnb.__contains__(a);
        case'notin':
            returnpy.PY_isTrue(b.__contains__(a))?py.False:py.True;
        case'==':case'!=':case'<>':
        case'<':case'<=':
        case'>':case'>=':
            returnPY_op(a,b,operator);
        }
        thrownewError('SyntaxError:unknowncomparator[['+operator+']]');
    };
    py.evaluate=function(expr,context){
        context=context||{};
        switch(expr.id){
        case'(name)':
            varval=context[expr.value];
            if(val===undefined&&expr.valueinPY_builtins){
                returnPY_builtins[expr.value];
            }
            returnPY_ensurepy(val,expr.value);
        case'(string)':
            returnpy.str.fromJSON(expr.value);
        case'(number)':
            returnpy.float.fromJSON(expr.value);
        case'(constant)':
            switch(expr.value){
            case'None':returnpy.None;
            case'False':returnpy.False;
            case'True':returnpy.True;
            }
            thrownewError("SyntaxError:unknownconstant'"+expr.value+"'");
        case'(comparator)':
            varresult,left=py.evaluate(expr.expressions[0],context);
            for(vari=0;i<expr.operators.length;++i){
                result=evaluate_operator(
                    expr.operators[i],
                    left,
                    left=py.evaluate(expr.expressions[i+1],context));
                if(py.PY_not(result)){returnpy.False;}
            }
            returnpy.True;
        case'not':
            returnpy.PY_isTrue(py.evaluate(expr.first,context))?py.False:py.True;
        case'and':
            varand_first=py.evaluate(expr.first,context);
            if(py.PY_isTrue(and_first.__nonzero__())){
                returnpy.evaluate(expr.second,context);
            }
            returnand_first;
        case'or':
            varor_first=py.evaluate(expr.first,context);
            if(py.PY_isTrue(or_first.__nonzero__())){
                returnor_first
            }
            returnpy.evaluate(expr.second,context);
        case'if':
            varcond=py.evaluate(expr.condition,context);
            if(py.PY_isTrue(cond)){
                returnpy.evaluate(expr.ifTrue,context);
            }else{
                returnpy.evaluate(expr.ifFalse,context);
            }
        case'(':
            if(expr.second){
                varcallable=py.evaluate(expr.first,context);
                varargs=[],kwargs={};
                for(varjj=0;jj<expr.second.length;++jj){
                    vararg=expr.second[jj];
                    if(arg.id!=='='){
                        //arg
                        args.push(py.evaluate(arg,context));
                    }else{
                        //kwarg
                        kwargs[arg.first.value]=
                            py.evaluate(arg.second,context);
                    }
                }
                returnpy.PY_call(callable,args,kwargs);
            }
            vartuple_exprs=expr.first,
                tuple_values=[];
            for(varj=0,len=tuple_exprs.length;j<len;++j){
                tuple_values.push(py.evaluate(
                    tuple_exprs[j],context));
            }
            returnpy.tuple.fromJSON(tuple_values);
        case'[':
            if(expr.second){
                returnpy.PY_getItem(
                    py.evaluate(expr.first,context),
                    py.evaluate(expr.second,context));
            }
            varlist_exprs=expr.first,list_values=[];
            for(vark=0;k<list_exprs.length;++k){
                list_values.push(py.evaluate(
                    list_exprs[k],context));
            }
            returnpy.list.fromJSON(list_values);
        case'{':
            vardict_exprs=expr.first,dict=py.PY_call(py.dict);
            for(varl=0;l<dict_exprs.length;++l){
                py.PY_setItem(dict,
                    py.evaluate(dict_exprs[l][0],context),
                    py.evaluate(dict_exprs[l][1],context));
            }
            returndict;
        case'.':
            if(expr.second.id!=='(name)'){
                thrownewError('SyntaxError:'+expr);
            }
            returnpy.PY_getAttr(py.evaluate(expr.first,context),
                                 expr.second.value);
        //numericaloperators
        case'~':
            return(py.evaluate(expr.first,context)).__invert__();
        case'+':
            if(!expr.second){
                returnpy.PY_positive(py.evaluate(expr.first,context));
            }
        case'-':
            if(!expr.second){
                returnpy.PY_negative(py.evaluate(expr.first,context));
            }
        case'*':case'/':case'//':
        case'%':
        case'**':
        case'<<':case'>>':
        case'&':case'^':case'|':
            returnPY_op(
                py.evaluate(expr.first,context),
                py.evaluate(expr.second,context),
                expr.id);

        default:
            thrownewError('SyntaxError:Unknownnode[['+expr.id+']]');
        }
    };
    py.eval=function(str,context){
        returnpy.evaluate(
            py.parse(
                py.tokenize(
                    str)),
            context).toJSON();
    }
})(typeofexports==='undefined'?py:exports);
