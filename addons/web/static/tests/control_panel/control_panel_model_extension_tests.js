flectra.define("web/static/tests/control_panel/control_panel_model_extension_tests.js",function(require){
    "usestrict";

    constActionModel=require("web/static/src/js/views/action_model.js");
    constmakeTestEnvironment=require('web.test_env');

    functioncreateModel(params={}){
        constarchs=(params.arch&&{search:params.arch,})||{};
        const{ControlPanel:controlPanelInfo,}=ActionModel.extractArchInfo(archs);
        constextensions={
            ControlPanel:{
                context:params.context,
                archNodes:controlPanelInfo.children,
                dynamicFilters:params.dynamicFilters,
                favoriteFilters:params.favoriteFilters,
                env:makeTestEnvironment(),
                fields:params.fields,
            },
        };
        constmodel=newActionModel(extensions);
        returnmodel;
    }
    functionsanitizeFilters(model){
        constcpme=model.extensions[0].find(
            (ext)=>ext.constructor.name==="ControlPanelModelExtension"
        );
        constfilters=Object.values(cpme.state.filters);
        returnfilters.map(filter=>{
            constcopy=Object.assign({},filter);
            deletecopy.groupId;
            deletecopy.groupNumber;
            deletecopy.id;
            returncopy;
        });
    }

    QUnit.module('ControlPanelModelExtension',{
        beforeEach(){
            this.fields={
                display_name:{string:"Displayedname",type:'char'},
                foo:{string:"Foo",type:"char",default:"MylittleFooValue",store:true,sortable:true},
                date_field:{string:"Date",type:"date",store:true,sortable:true},
                float_field:{string:"Float",type:"float"},
                bar:{string:"Bar",type:"many2one",relation:'partner'},
            };
        }
    },function(){
        QUnit.module('Archparsing');

        QUnit.test('emptyarch',asyncfunction(assert){
            assert.expect(1);
            constmodel=createModel();
            assert.deepEqual(sanitizeFilters(model),[]);
        });

        QUnit.test('onefieldtag',asyncfunction(assert){
            assert.expect(1);
            constarch=`
                <search>
                    <fieldname="bar"/>
                </search>`;
            constfields=this.fields;
            constmodel=createModel({arch,fields,});
            assert.deepEqual(sanitizeFilters(model),[
                {
                    description:"Bar",
                    fieldName:"bar",
                    fieldType:"many2one",
                    type:"field"
                },
            ]);
        });

        QUnit.test('oneseparatortag',asyncfunction(assert){
            assert.expect(1);
            constarch=`
                <search>
                    <separator/>
                </search>`;
            constfields=this.fields;
            constmodel=createModel({arch,fields,});
            assert.deepEqual(sanitizeFilters(model),[]);
        });

        QUnit.test('oneseparatortagandonefieldtag',asyncfunction(assert){
            assert.expect(1);
            constarch=`
                <search>
                    <separator/>
                    <fieldname="bar"/>
                </search>`;
            constfields=this.fields;
            constmodel=createModel({arch,fields,});
            assert.deepEqual(sanitizeFilters(model),[
                {
                    description:"Bar",
                    fieldName:"bar",
                    fieldType:"many2one",
                    type:"field"
                },
            ]);
        });

        QUnit.test('onefiltertag',asyncfunction(assert){
            assert.expect(1);
            constarch=`
                <search>
                    <filtername="filter"string="Hello"domain="[]"/>
                </search>`;
            constfields=this.fields;
            constmodel=createModel({arch,fields,});
            assert.deepEqual(sanitizeFilters(model),[
                {
                    description:"Hello",
                    domain:"[]",
                    type:"filter",
                },
            ]);
        });

        QUnit.test('onefiltertagwithdateattribute',asyncfunction(assert){
            assert.expect(1);
            constarch=`
                <search>
                    <filtername="date_filter"string="Date"date="date_field"/>
                </search>`;
            constfields=this.fields;
            constmodel=createModel({arch,fields,});
            constdateFilterId=Object.values(model.get('filters'))[0].id;
            assert.deepEqual(sanitizeFilters(model),[
                {
                    defaultOptionId:"this_month",
                    description:"Date",
                    fieldName:"date_field",
                    fieldType:"date",
                    isDateFilter:true,
                    hasOptions:true,
                    type:"filter"
                  },
                  {
                    comparisonOptionId:"previous_period",
                    dateFilterId,
                    description:"Date:PreviousPeriod",
                    type:"comparison"
                  },
                  {
                    comparisonOptionId:"previous_year",
                    dateFilterId,
                    description:"Date:PreviousYear",
                    type:"comparison"
                  }
            ]);
        });

        QUnit.test('onegroupBytag',asyncfunction(assert){
            assert.expect(1);
            constarch=`
                <search>
                    <filtername="groupby"string="Hi"context="{'group_by':'date_field:day'}"/>
                </search>`;
            constfields=this.fields;
            constmodel=createModel({arch,fields,});
            assert.deepEqual(sanitizeFilters(model),[
                {
                    defaultOptionId:"day",
                    description:"Hi",
                    fieldName:"date_field",
                    fieldType:"date",
                    hasOptions:true,
                    type:"groupBy",
                },
            ]);
        });

        QUnit.test('twofiltertags',asyncfunction(assert){
            assert.expect(1);
            constarch=`
                <search>
                    <filtername="filter_1"string="HelloOne"domain="[]"/>
                    <filtername="filter_2"string="HelloTwo"domain="[('bar','=',3)]"/>
                </search>`;
            constfields=this.fields;
            constmodel=createModel({arch,fields,});
            assert.deepEqual(sanitizeFilters(model),[
                {
                    description:"HelloOne",
                    domain:"[]",
                    type:"filter",
                },
                {
                    description:"HelloTwo",
                    domain:"[('bar','=',3)]",
                    type:"filter",
                },
            ]);
        });

        QUnit.test('twofiltertagsseparatedbyaseparator',asyncfunction(assert){
            assert.expect(1);
            constarch=`
                <search>
                    <filtername="filter_1"string="HelloOne"domain="[]"/>
                    <separator/>
                    <filtername="filter_2"string="HelloTwo"domain="[('bar','=',3)]"/>
                </search>`;
            constfields=this.fields;
            constmodel=createModel({arch,fields,});
            assert.deepEqual(sanitizeFilters(model),[
                {
                    description:"HelloOne",
                    domain:"[]",
                    type:"filter",
                },
                {
                    description:"HelloTwo",
                    domain:"[('bar','=',3)]",
                    type:"filter",
                },
            ]);
        });

        QUnit.test('onefiltertagandonefield',asyncfunction(assert){
            assert.expect(1);
            constarch=`
                <search>
                    <filtername="filter"string="Hello"domain="[]"/>
                    <fieldname="bar"/>
                </search>`;
            constfields=this.fields;
            constmodel=createModel({arch,fields,});
            assert.deepEqual(sanitizeFilters(model),[
                {
                    description:"Hello",
                    domain:"[]",
                    type:"filter",
                },
                {
                    description:"Bar",
                    fieldName:"bar",
                    fieldType:"many2one",
                    type:"field",
                },
            ]);
        });

        QUnit.test('twofieldtags',asyncfunction(assert){
            assert.expect(1);
            constarch=`
                <search>
                    <fieldname="foo"/>
                    <fieldname="bar"/>
                </search>`;
            constfields=this.fields;
            constmodel=createModel({arch,fields,});
            assert.deepEqual(sanitizeFilters(model),[
                {
                    description:"Foo",
                    fieldName:"foo",
                    fieldType:"char",
                    type:"field"
                },
                {
                    description:"Bar",
                    fieldName:"bar",
                    fieldType:"many2one",
                    type:"field"
                },
            ]);
        });

        QUnit.module('Preparinginitialstate');

        QUnit.test('processfavoritefilters',asyncfunction(assert){
            assert.expect(1);
            constfavoriteFilters=[{
                user_id:[2,"MitchellAdmin"],
                name:'Sortedfilter',
                id:5,
                context:{
                    group_by:['foo','bar']
                },
                sort:'["foo","-bar"]',
                domain:"[('user_id','=',uid)]",
            }];

            constmodel=createModel({favoriteFilters});
            assert.deepEqual(sanitizeFilters(model),[
                {
                    context:{},
                    description:"Sortedfilter",
                    domain:"[('user_id','=',uid)]",
                    groupBys:['foo','bar'],
                    orderedBy:[
                        {
                            asc:true,
                            name:"foo"
                        },
                        {
                            asc:false,
                            name:"bar"
                        }
                    ],
                    removable:true,
                    serverSideId:5,
                    type:"favorite",
                    userId:2
                },
            ]);

        });

        QUnit.test('processdynamicfilters',asyncfunction(assert){
            assert.expect(1);
            constdynamicFilters=[{
                description:'Quicksearch',
                domain:[['id','in',[1,3,4]]]
            }];

            constmodel=createModel({dynamicFilters});
            assert.deepEqual(sanitizeFilters(model),[
                {
                    description:'Quicksearch',
                    domain:"[[\"id\",\"in\",[1,3,4]]]",
                    isDefault:true,
                    type:'filter'
                },
            ]);

        });

        QUnit.test('falsysearchdefaultsarenotactivated',asyncfunction(assert){
            assert.expect(1);

            constcontext={
                search_default_filter:false,
                search_default_bar:0,
                search_default_groupby:2,
            };
            constarch=`
                <search>
                    <filtername="filter"string="Hello"domain="[]"/>
                    <filtername="groupby"string="Goodbye"context="{'group_by':'foo'}"/>
                    <fieldname="bar"/>
                </search>`;
            constfields=this.fields;
            constmodel=createModel({arch,fields,context});
            //onlythetruthyfilter'groupby'hasisDefaulttrue
            assert.deepEqual(sanitizeFilters(model),[
                {
                    description:'Hello',
                    domain:"[]",
                    type:'filter',
                },
                {
                    description:'Bar',
                    fieldName:'bar',
                    fieldType:'many2one',
                    type:'field',
                },
                {
                    defaultRank:2,
                    description:'Goodbye',
                    fieldName:'foo',
                    fieldType:'char',
                    isDefault:true,
                    type:'groupBy',
                },
            ]);

        });

        QUnit.test('searchdefaultsonX2Mfields',asyncfunction(assert){
            assert.expect(1);

            constcontext={
                search_default_otom:[1,2],
                search_default_mtom:[1,2]
            };
            constfields=this.fields;
            fields.otom={string:"O2M",type:"one2many",relation:'partner'};
            fields.mtom={string:"M2M",type:"many2many",relation:'partner'};
            constarch=`
                <search>
                    <fieldname="otom"/>
                    <fieldname="mtom"/>
                </search>`;
            constmodel=createModel({arch,fields,context});
            assert.deepEqual(sanitizeFilters(model),[
                {
                    "defaultAutocompleteValue":{
                      "label":[1,2],
                      "operator":"ilike",
                      "value":[1,2]
                    },
                    "defaultRank":-10,
                    "description":"O2M",
                    "fieldName":"otom",
                    "fieldType":"one2many",
                    "isDefault":true,
                    "type":"field"
                },
                {
                    "defaultAutocompleteValue":{
                      "label":[1,2],
                      "operator":"ilike",
                      "value":[1,2]
                    },
                    "defaultRank":-10,
                    "description":"M2M",
                    "fieldName":"mtom",
                    "fieldType":"many2many",
                    "isDefault":true,
                    "type":"field"
                }
            ]);

        });

    });
});
