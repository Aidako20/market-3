flectra.define('web.search_utils_tests',function(require){
    "usestrict";

    const{constructDateDomain}=require('web.searchUtils');
    consttestUtils=require('web.test_utils');
    const{_t}=require('web.core');

    constpatchDate=testUtils.mock.patchDate;

    QUnit.module('SearchUtils',function(){

        QUnit.module('Constructdomain');

        QUnit.test('constructsimpledomainbasedondatefield(nocomparisonOptionId)',function(assert){
            assert.expect(4);
            constunpatchDate=patchDate(2020,5,1,13,0,0);
            constreferenceMoment=moment().utc();
            assert.deepEqual(
                constructDateDomain(referenceMoment,'date_field','date',[]),
                {
                    domain:"[]",
                    description:"",
                }
            );
            assert.deepEqual(
                constructDateDomain(referenceMoment,'date_field','date',['this_month','this_year']),
                {
                    domain:`["&",["date_field",">=","2020-06-01"],["date_field","<=","2020-06-30"]]`,
                    description:"June2020",
                }
            );
            assert.deepEqual(
                constructDateDomain(referenceMoment,'date_field','date',['second_quarter','this_year']),
                {
                    domain:`["&",["date_field",">=","2020-04-01"],["date_field","<=","2020-06-30"]]`,
                    description:"Q22020",
                }
            );
            assert.deepEqual(
                constructDateDomain(referenceMoment,'date_field','date',['this_year']),
                {
                    domain:`["&",["date_field",">=","2020-01-01"],["date_field","<=","2020-12-31"]]`,
                    description:"2020",
                }
            );
            unpatchDate();
        });

        QUnit.test('constructsimpledomainbasedondatetimefield(nocomparisonOptionId)',function(assert){
            assert.expect(3);
            constunpatchDate=patchDate(2020,5,1,13,0,0);
            constreferenceMoment=moment().utc();
            assert.deepEqual(
                constructDateDomain(referenceMoment,'date_field','datetime',['this_month','this_year']),
                {
                    domain:`["&",["date_field",">=","2020-06-0100:00:00"],["date_field","<=","2020-06-3023:59:59"]]`,
                    description:"June2020",
                }
            );
            assert.deepEqual(
                constructDateDomain(referenceMoment,'date_field','datetime',['second_quarter','this_year']),
                {
                    domain:`["&",["date_field",">=","2020-04-0100:00:00"],["date_field","<=","2020-06-3023:59:59"]]`,
                    description:"Q22020",
                }
            );
            assert.deepEqual(
                constructDateDomain(referenceMoment,'date_field','datetime',['this_year']),
                {
                    domain:`["&",["date_field",">=","2020-01-0100:00:00"],["date_field","<=","2020-12-3123:59:59"]]`,
                    description:"2020",
                }
            );
            unpatchDate();
        });

        QUnit.test('constructdomainbasedondatefield(nocomparisonOptionId)',function(assert){
            assert.expect(3);
            constunpatchDate=patchDate(2020,0,1,12,0,0);
            constreferenceMoment=moment().utc();
            assert.deepEqual(
                constructDateDomain(referenceMoment,'date_field','date',['this_month','first_quarter','this_year']),
                {
                    domain:"["+
                                `"|",`+
                                    `"&",["date_field",">=","2020-01-01"],["date_field","<=","2020-01-31"],`+
                                    `"&",["date_field",">=","2020-01-01"],["date_field","<=","2020-03-31"]`+
                            "]",
                    description:"January2020/Q12020",
                }
            );
            assert.deepEqual(
                constructDateDomain(referenceMoment,'date_field','date',['second_quarter','this_year','last_year']),
                {
                    domain:"["+
                                `"|",`+
                                    `"&",["date_field",">=","2019-04-01"],["date_field","<=","2019-06-30"],`+
                                    `"&",["date_field",">=","2020-04-01"],["date_field","<=","2020-06-30"]`+
                            "]",
                    description:"Q22019/Q22020",
                }
            );
            assert.deepEqual(
                constructDateDomain(referenceMoment,'date_field','date',['this_year','this_month','antepenultimate_month']),
                {
                    domain:"["+
                                `"|",`+
                                    `"&",["date_field",">=","2020-01-01"],["date_field","<=","2020-01-31"],`+
                                    `"&",["date_field",">=","2020-11-01"],["date_field","<=","2020-11-30"]`+
                            "]",
                    description:"January2020/November2020",
                }
            );
            unpatchDate();
        });

        QUnit.test('constructdomainbasedondatetimefield(nocomparisonOptionId)',function(assert){
            assert.expect(3);
            constunpatchDate=patchDate(2020,0,1,12,0,0);
            constreferenceMoment=moment().utc();
            assert.deepEqual(
                constructDateDomain(referenceMoment,'date_field','datetime',['this_month','first_quarter','this_year']),
                {
                    domain:"["+
                                `"|",`+
                                    `"&",["date_field",">=","2020-01-0100:00:00"],["date_field","<=","2020-01-3123:59:59"],`+
                                    `"&",["date_field",">=","2020-01-0100:00:00"],["date_field","<=","2020-03-3123:59:59"]`+
                            "]",
                    description:"January2020/Q12020",
                }
            );
            assert.deepEqual(
                constructDateDomain(referenceMoment,'date_field','datetime',['second_quarter','this_year','last_year']),
                {
                    domain:"["+
                                `"|",`+
                                    `"&",["date_field",">=","2019-04-0100:00:00"],["date_field","<=","2019-06-3023:59:59"],`+
                                    `"&",["date_field",">=","2020-04-0100:00:00"],["date_field","<=","2020-06-3023:59:59"]`+
                            "]",
                    description:"Q22019/Q22020",
                }
            );
            assert.deepEqual(
                constructDateDomain(referenceMoment,'date_field','datetime',['this_year','this_month','antepenultimate_month']),
                {
                    domain:"["+
                                `"|",`+
                                    `"&",["date_field",">=","2020-01-0100:00:00"],["date_field","<=","2020-01-3123:59:59"],`+
                                    `"&",["date_field",">=","2020-11-0100:00:00"],["date_field","<=","2020-11-3023:59:59"]`+
                            "]",
                    description:"January2020/November2020",
                }
            );
            unpatchDate();
        });

        QUnit.test('constructcomparisondomainbasedondatefieldandoption"previous_period"',function(assert){
            assert.expect(5);
            constunpatchDate=patchDate(2020,0,1,12,0,0);
            constreferenceMoment=moment().utc();
            assert.deepEqual(
                constructDateDomain(referenceMoment,'date_field','date',['this_month','first_quarter','this_year'],'previous_period'),
                {
                    domain:"["+
                                `"|","|",`+
                                `"&",["date_field",">=","2019-10-01"],["date_field","<=","2019-10-31"],`+
                                `"&",["date_field",">=","2019-11-01"],["date_field","<=","2019-11-30"],`+
                                `"&",["date_field",">=","2019-12-01"],["date_field","<=","2019-12-31"]`+
                            "]",
                    description:"October2019/November2019/December2019",
                }
            );
            assert.deepEqual(
                constructDateDomain(referenceMoment,'date_field','date',['second_quarter','this_year','last_year'],'previous_period'),
                {
                    domain:"["+
                                `"|",`+
                                `"&",["date_field",">=","2018-01-01"],["date_field","<=","2018-03-31"],`+
                                    `"&",["date_field",">=","2019-01-01"],["date_field","<=","2019-03-31"]`+
                            "]",
                    description:"Q12018/Q12019",
                }
            );
            assert.deepEqual(
                constructDateDomain(referenceMoment,'date_field','date',['this_year','antepenultimate_year','this_month','antepenultimate_month'],'previous_period'),
                {
                    domain:"["+
                                `"|","|","|",`+
                                    `"&",["date_field",">=","2015-02-01"],["date_field","<=","2015-02-28"],`+
                                    `"&",["date_field",">=","2015-12-01"],["date_field","<=","2015-12-31"],`+
                                    `"&",["date_field",">=","2017-02-01"],["date_field","<=","2017-02-28"],`+
                                    `"&",["date_field",">=","2017-12-01"],["date_field","<=","2017-12-31"]`+
                            "]",
                    description:"February2015/December2015/February2017/December2017",
                }
            );
            assert.deepEqual(
                constructDateDomain(referenceMoment,'date_field','date',['this_year','last_year'],'previous_period'),
                {
                    domain:"["+
                                `"|",`+
                                    `"&",["date_field",">=","2017-01-01"],["date_field","<=","2017-12-31"],`+
                                    `"&",["date_field",">=","2018-01-01"],["date_field","<=","2018-12-31"]`+
                            "]",
                    description:"2017/2018",
                }
            );
            assert.deepEqual(
                constructDateDomain(referenceMoment,'date_field','date',['second_quarter','third_quarter','last_year'],'previous_period'),
                {
                    domain:"["+
                                `"|",`+
                                `"&",["date_field",">=","2018-10-01"],["date_field","<=","2018-12-31"],`+
                                    `"&",["date_field",">=","2019-01-01"],["date_field","<=","2019-03-31"]`+
                            "]",
                    description:"Q42018/Q12019",
                }
            );
            unpatchDate();
        });

        QUnit.test('constructcomparisondomainbasedondatetimefieldandoption"previous_year"',function(assert){
            assert.expect(3);
            constunpatchDate=patchDate(2020,5,1,13,0,0);
            constreferenceMoment=moment().utc();
            assert.deepEqual(
                constructDateDomain(referenceMoment,'date_field','datetime',['this_month','first_quarter','this_year'],'previous_year'),
                {
                    domain:"["+
                                `"|",`+
                                    `"&",["date_field",">=","2019-06-0100:00:00"],["date_field","<=","2019-06-3023:59:59"],`+
                                    `"&",["date_field",">=","2019-01-0100:00:00"],["date_field","<=","2019-03-3123:59:59"]`+
                            "]",
                    description:"June2019/Q12019",
                }
            );
            assert.deepEqual(
                constructDateDomain(referenceMoment,'date_field','datetime',['second_quarter','this_year','last_year'],'previous_year'),
                {
                    domain:"["+
                                `"|",`+
                                    `"&",["date_field",">=","2018-04-0100:00:00"],["date_field","<=","2018-06-3023:59:59"],`+
                                    `"&",["date_field",">=","2019-04-0100:00:00"],["date_field","<=","2019-06-3023:59:59"]`+
                            "]",
                    description:"Q22018/Q22019",
                }
            );
            assert.deepEqual(
                constructDateDomain(referenceMoment,'date_field','datetime',['this_year','antepenultimate_year','this_month','antepenultimate_month'],'previous_year'),
                {
                    domain:"["+
                                `"|","|","|",`+
                                `"&",["date_field",">=","2017-04-0100:00:00"],["date_field","<=","2017-04-3023:59:59"],`+
                                `"&",["date_field",">=","2017-06-0100:00:00"],["date_field","<=","2017-06-3023:59:59"],`+
                                `"&",["date_field",">=","2019-04-0100:00:00"],["date_field","<=","2019-04-3023:59:59"],`+
                                `"&",["date_field",">=","2019-06-0100:00:00"],["date_field","<=","2019-06-3023:59:59"]`+
                            "]",
                    description:"April2017/June2017/April2019/June2019",
                }
            );
            unpatchDate();
        });

        QUnit.module('Optionstranslation');

        QUnit.test("Quarteroption:customtranslation",asyncfunction(assert){
            assert.expect(1);

            constunpatchDate=patchDate(2020,5,1,13,0,0);
            constreferenceMoment=moment().locale('en');
            testUtils.mock.patch(_t.database.db,{
                "Q2":"Deuxièmetrimestredel'andegrâce",
            });

            assert.deepEqual(
                constructDateDomain(referenceMoment,'date_field','date',['second_quarter','this_year']),
                {
                    domain:`["&",["date_field",">=","2020-04-01"],["date_field","<=","2020-06-30"]]`,
                    description:"Deuxièmetrimestredel'andegrâce2020",
                },
                "Quartertermshouldbetranslated"
            );

            unpatchDate();
            testUtils.mock.unpatch(_t.database.db);
        });

        QUnit.test("Quarteroption:righttoleft",asyncfunction(assert){
            assert.expect(1);

            constunpatchDate=patchDate(2020,5,1,13,0,0);
            constreferenceMoment=moment().locale('en');
            testUtils.mock.patch(_t.database.parameters,{
                direction:"rtl",
            });

            assert.deepEqual(
                constructDateDomain(referenceMoment,'date_field','date',['second_quarter','this_year']),
                {
                    domain:`["&",["date_field",">=","2020-04-01"],["date_field","<=","2020-06-30"]]`,
                    description:"2020Q2",
                },
                "Notationshouldberighttoleft"
            );

            unpatchDate();
            testUtils.mock.unpatch(_t.database.parameters);
        });

        QUnit.test("Quarteroption:customtranslationandrighttoleft",asyncfunction(assert){
            assert.expect(1);

            constunpatchDate=patchDate(2020,5,1,13,0,0);
            constreferenceMoment=moment().locale('en');
            testUtils.mock.patch(_t.database.db,{
                "Q2":"2eTrimestre",
            });
            testUtils.mock.patch(_t.database.parameters,{
                direction:"rtl",
            });

            assert.deepEqual(
                constructDateDomain(referenceMoment,'date_field','date',['second_quarter','this_year']),
                {
                    domain:`["&",["date_field",">=","2020-04-01"],["date_field","<=","2020-06-30"]]`,
                    description:"20202eTrimestre",
                },
                "Quartertermshouldbetranslatedandnotationshouldberighttoleft"
            );

            unpatchDate();
            testUtils.mock.unpatch(_t.database.db);
            testUtils.mock.unpatch(_t.database.parameters);
        });

        QUnit.test("Moment.jslocalizationdoesnotaffectformatteddomaindates",asyncfunction(assert){
            assert.expect(1);

            constunpatchDate=patchDate(2020,5,1,13,0,0);
            constinitialLocale=moment.locale();
            moment.defineLocale('addoneForTest',{
                postformat:function(string){
                    returnstring.replace(/\d/g,match=>(1+parseInt(match))%10);
                }
            });
            constreferenceMoment=moment().locale('addoneForTest');

            assert.deepEqual(
                constructDateDomain(referenceMoment,'date_field','date',['this_month','this_year']),
                {
                    domain:`["&",["date_field",">=","2020-06-01"],["date_field","<=","2020-06-30"]]`,
                    description:"June3131",
                },
                "NumbersindomainshouldnotuseaddoneForTestlocale"
            );

            moment.locale(initialLocale);
            moment.updateLocale("addoneForTest",null);
            unpatchDate();
        });
    });
});
