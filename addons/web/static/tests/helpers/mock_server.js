flectra.define('web.MockServer',function(require){
"usestrict";

varClass=require('web.Class');
varDomain=require('web.Domain');
varpyUtils=require('web.py_utils');

varMockServer=Class.extend({
    /**
     *@constructor
     *@param{Object}data
     *@param{Object}options
     *@param{Object[]}[options.actions=[]]
     *@param{Object}[options.archs={}]dictofarchswithkeysbeingstringslike
     *   'model,id,viewType'
     *@param{boolean}[options.debug=false]logsRPCsifsettotrue
     *@param{string}[options.currentDate]formattedstring,defaultto
     *  currentday
     */
    init:function(data,options){
        options=options||{};
        this.data=data;
        for(varmodelNameinthis.data){
            varmodel=this.data[modelName];
            if(!('id'inmodel.fields)){
                model.fields.id={string:"ID",type:"integer"};
            }
            if(!('display_name'inmodel.fields)){
                model.fields.display_name={string:"DisplayName",type:"char"};
            }
            if(!('__last_update'inmodel.fields)){
                model.fields.__last_update={string:"LastModifiedon",type:"datetime"};
            }
            if(!('name'inmodel.fields)){
                model.fields.name={string:"Name",type:"char",default:"name"};
            }
            model.records=model.records||[];

            for(vari=0;i<model.records.length;i++){
                constvalues=model.records[i];
                //addpotentiallymissingid
                constid=values.id===undefined
                    ?this._getUnusedID(modelName):
                    values.id;
                //createacleanobject,initialvaluesarepassedtowrite
                model.records[i]={id};
                //ensureinitialdatagoesthroughproperconversion(x2m,...)
                this._applyDefaults(model,values);
                this._writeRecord(modelName,values,id,{
                    ensureIntegrity:false,
                });
            }
        }

        this.debug=options.debug;

        this.currentDate=options.currentDate||moment().format("YYYY-MM-DD");

        this.actions=options.actions||[];
        this.archs=options.archs||{};
    },

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *Mocksafields_getRPCforagivenmodel.
     *
     *@param{string}model
     *@returns{Object}
     */
    fieldsGet:function(model){
        returnthis.data[model].fields;
    },
    /**
     *helper:readastringdescribinganarch,andreturnsasimulated
     *'field_view_get'calltotheserver.CallsprocessViews()ofdata_manager
     *tomimicktherealbehaviorofacalltoloadViews().
     *
     *@param{Object}params
     *@param{string|Object}params.archastringORaparsedxmldocument
     *@param{Number}[params.view_id]theidofthearch'sview
     *@param{string}params.modelamodelname(thatshouldbeinthis.data)
     *@param{Object}params.toolbartheactionspossibleinthetoolbar
     *@param{Object}[params.viewOptions]theviewoptionssetinthetest(optional)
     *@returns{Object}anobjectwith2keys:archandfields
     */
    fieldsViewGet:function(params){
        varmodel=params.model;
        vartoolbar=params.toolbar;
        varviewId=params.view_id;
        varviewOptions=params.viewOptions||{};
        if(!(modelinthis.data)){
            thrownewError('Model'+model+'wasnotdefinedinmockserverdata');
        }
        varfields=$.extend(true,{},this.data[model].fields);
        varfvg=this._fieldsViewGet(params.arch,model,fields,viewOptions.context||{});
        if(toolbar){
            fvg.toolbar=toolbar;
        }
        if(viewId){
            fvg.view_id=viewId;
        }
        returnfvg;
    },
    /**
     *Simulatesacompletefetchcall.
     *
     *@param{string}resource
     *@param{Object}init
     *@returns{any}
     */
    asyncperformFetch(resource,init){
        if(this.debug){
            console.log(
                '%c[fetch]request'+resource,'color:blue;font-weight:bold;',
                JSON.parse(JSON.stringify(init))
            );
        }
        constres=awaitthis._performFetch(resource,init);
        if(this.debug){
            console.log('%c[fetch]response'+resource,'color:blue;font-weight:bold;',res);
        }
        returnres;
    },
    /**
     *SimulateacompleteRPCcall.Thisisthemainmethodforthisclass.
     *
     *Thismethodalsologincomingandoutgoingdata,andstringify/parsedata
     *tosimulateabarrierbetweentheserverandtheclient.Italsosimulate
     *servererrors.
     *
     *@param{string}route
     *@param{Object}args
     *@returns{Promise<any>}
     *         ResolvedwiththeresultoftheRPC,stringifiedthenparsed.
     *         IftheRPCshouldfail,thepromisewillberejectedwiththe
     *         errorobject,stringifiedthenparsed.
     */
    performRpc:function(route,args){
        vardebug=this.debug;
        args=JSON.parse(JSON.stringify(args));
        if(debug){
            console.log('%c[rpc]request'+route,'color:blue;font-weight:bold;',args);
            args=JSON.parse(JSON.stringify(args));
        }
        vardef=this._performRpc(route,args);

        varabort=def.abort||def.reject;
        if(abort){
            abort=abort.bind(def);
        }else{
            abort=function(rejectError=true){
                if(rejectError){
                    thrownewConnectionAbortedError("XmlHttpRequestErrorabort");
                }
            };
        }

        def=def.then(function(result){
            varresultString=JSON.stringify(result||false);
            if(debug){
                console.log('%c[rpc]response'+route,'color:blue;font-weight:bold;',JSON.parse(resultString));
            }
            returnJSON.parse(resultString);
        },function(result){
            varmessage=result&&result.message;
            varevent=result&&result.event;
            varerrorString=JSON.stringify(message||false);
            console.warn('%c[rpc]response(error)'+route,'color:orange;font-weight:bold;',JSON.parse(errorString));
            returnPromise.reject({message:errorString,event:event||$.Event()});
        });

        def.abort=abort;
        returndef;
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *Applythedefaultvalueswhencreatinganobjectinthelocaldatabase.
     *
     *@private
     *@param{Object}modelamodelobjectfromthelocaldatabase
     *@param{Object}record
     */
    _applyDefaults:function(model,record){
        record.display_name=record.display_name||record.name;
        for(varfieldNameinmodel.fields){
            if(fieldName==='id'){
                continue;
            }
            if(!(fieldNameinrecord)){
                if('default'inmodel.fields[fieldName]){
                    constdef=model.fields[fieldName].default;
                    record[fieldName]=typeofdef==='function'?def.call(this):def;
                }elseif(_.contains(['one2many','many2many'],model.fields[fieldName].type)){
                    record[fieldName]=[];
                }else{
                    record[fieldName]=false;
                }
            }
        }
    },
    /**
     *ConvertsanObjectrepresentingarecordtoactualreturnObjectofthe
     *python`onchange`method.
     *Specifically,itapplies`name_get`onmany2one'sandtransformsrawid
     *listinormcommandlistsforx2many's.
     *Forx2mfieldsthataddorupdaterecords(ORMcommands0and1),itis
     *recursive.
     *
     *@private
     *@param{string}model:themodel'sname
     *@param{Object}values:anobjectrepresentingarecord
     *@returns{Object}
     */
    _convertToOnChange(model,values){
        Object.entries(values).forEach(([fname,val])=>{
            constfield=this.data[model].fields[fname];
            if(field.type==='many2one'&&typeofval==='number'){
                //implicitname_get
                constm2oRecord=this.data[field.relation].records.find(r=>r.id===val);
                values[fname]=[val,m2oRecord.display_name];
            }elseif(field.type==='one2many'||field.type==='many2many'){
                //TESTSONLY
                //one2many_ids=[1,2,3]isasimplerwaytoexpressitthanormcommands
                constisCommandList=val.length&&Array.isArray(val[0]);
                if(!isCommandList){
                    values[fname]=[[6,false,val]];
                }else{
                    val.forEach(cmd=>{
                        if(cmd[0]===0||cmd[0]===1){
                            cmd[2]=this._convertToOnChange(field.relation,cmd[2]);
                        }
                    });
                }
            }
        });
        returnvalues;
    },
    /**
     *helpertoevaluateadomainforgivenfieldvalues.
     *Currently,thisisonlyawrapperoftheDomain.computefunctionin
     *"web.Domain".
     *
     *@param{Array}domain
     *@param{Object}fieldValues
     *@returns{boolean}
     */
    _evaluateDomain:function(domain,fieldValues){
        returnnewDomain(domain).compute(fieldValues);
    },
    /**
     *helper:readastringdescribinganarch,andreturnsasimulated
     *'fields_view_get'calltotheserver.
     *
     *@private
     *@param{string}archastringORaparsedxmldocument
     *@param{string}modelamodelname(thatshouldbeinthis.data)
     *@param{Object}fields
     *@param{Object}context
     *@returns{Object}anobjectwith2keys:archandfields(thefields
     *  appearingintheviews)
     */
    _fieldsViewGet:function(arch,model,fields,context){
        varself=this;
        varmodifiersNames=['invisible','readonly','required'];
        varonchanges=this.data[model].onchanges||{};
        varfieldNodes={};
        vargroupbyNodes={};

        vardoc;
        if(typeofarch==='string'){
            doc=$.parseXML(arch).documentElement;
        }else{
            doc=arch;
        }

        varinTreeView=(doc.tagName==='tree');

        //mock_postprocess_access_rights
        constisBaseModel=!context.base_model_name||(model===context.base_model_name);
        varviews=['kanban','tree','form','gantt','activity'];
        if(isBaseModel&&views.indexOf(doc.tagName)!==-1){
            for(letactionof['create','delete','edit','write']){
                if(!doc.getAttribute(action)&&actionincontext&&!context[action]){
                    doc.setAttribute(action,'false');
                }
            }
        }

        this._traverse(doc,function(node){
            if(node.nodeType===Node.TEXT_NODE){
                returnfalse;
            }
            varmodifiers={};

            varisField=(node.tagName==='field');
            varisGroupby=(node.tagName==='groupby');

            if(isField){
                varfieldName=node.getAttribute('name');
                fieldNodes[fieldName]=node;

                //'transfer_field_to_modifiers'simulation
                varfield=fields[fieldName];

                if(!field){
                    thrownewError("Field"+fieldName+"doesnotexist");
                }
                vardefaultValues={};
                varstateExceptions={};
                _.each(modifiersNames,function(attr){
                    stateExceptions[attr]=[];
                    defaultValues[attr]=!!field[attr];
                });
                _.each(field.states||{},function(modifs,state){
                    _.each(modifs,function(modif){
                        if(defaultValues[modif[0]]!==modif[1]){
                            stateExceptions[modif[0]].append(state);
                        }
                    });
                });
                _.each(defaultValues,function(defaultValue,attr){
                    if(stateExceptions[attr].length){
                        modifiers[attr]=[("state",defaultValue?"notin":"in",stateExceptions[attr])];
                    }else{
                        modifiers[attr]=defaultValue;
                    }
                });
            }elseif(isGroupby&&!node._isProcessed){
                vargroupbyName=node.getAttribute('name');
                fieldNodes[groupbyName]=node;
                groupbyNodes[groupbyName]=node;
            }

            //'transfer_node_to_modifiers'simulation
            varattrs=node.getAttribute('attrs');
            if(attrs){
                attrs=pyUtils.py_eval(attrs);
                _.extend(modifiers,attrs);
            }

            varstates=node.getAttribute('states');
            if(states){
                if(!modifiers.invisible){
                    modifiers.invisible=[];
                }
                modifiers.invisible.push(["state","notin",states.split(",")]);
            }

            constinListHeader=inTreeView&&node.closest('header');
            _.each(modifiersNames,function(a){
                varmod=node.getAttribute(a);
                if(mod){
                    varpyevalContext=window.py.dict.fromJSON(context||{});
                    varv=pyUtils.py_eval(mod,{context:pyevalContext})?true:false;
                    if(inTreeView&&!inListHeader&&a==='invisible'){
                        modifiers.column_invisible=v;
                    }elseif(v||!(ainmodifiers)||!_.isArray(modifiers[a])){
                        modifiers[a]=v;
                    }
                }
            });

            _.each(modifiersNames,function(a){
                if(ainmodifiers&&(!!modifiers[a]===false||(_.isArray(modifiers[a])&&!modifiers[a].length))){
                    deletemodifiers[a];
                }
            });

            if(Object.keys(modifiers).length){
                node.setAttribute('modifiers',JSON.stringify(modifiers));
            }

            if(isGroupby&&!node._isProcessed){
                returnfalse;
            }

            return!isField;
        });

        varrelModel,relFields;
        _.each(fieldNodes,function(node,name){
            varfield=fields[name];
            if(field.type==="many2one"||field.type==="many2many"){
                varcanCreate=node.getAttribute('can_create');
                node.setAttribute('can_create',canCreate||"true");
                varcanWrite=node.getAttribute('can_write');
                node.setAttribute('can_write',canWrite||"true");
            }
            if(field.type==="one2many"||field.type==="many2many"){
                field.views={};
                _.each(node.childNodes,function(children){
                    if(children.tagName){//skiptextnodes
                        relModel=field.relation;
                        relFields=$.extend(true,{},self.data[relModel].fields);
                        field.views[children.tagName]=self._fieldsViewGet(children,relModel,
                            relFields,_.extend({},context,{base_model_name:model}));
                    }
                });
            }

            //addonchanges
            if(nameinonchanges){
                node.setAttribute('on_change',"1");
            }
        });
        _.each(groupbyNodes,function(node,name){
            varfield=fields[name];
            if(field.type!=='many2one'){
                thrownewError('groupbycanonlytargetmany2one');
            }
            field.views={};
            relModel=field.relation;
            relFields=$.extend(true,{},self.data[relModel].fields);
            node._isProcessed=true;
            //postprocesssimulation
            field.views.groupby=self._fieldsViewGet(node,relModel,relFields,context);
            while(node.firstChild){
                node.removeChild(node.firstChild);
            }
        });

        varxmlSerializer=newXMLSerializer();
        varprocessedArch=xmlSerializer.serializeToString(doc);
        return{
            arch:processedArch,
            fields:_.pick(fields,_.keys(fieldNodes)),
            model:model,
            type:doc.tagName==='tree'?'list':doc.tagName,
        };
    },
    /**
     *Getallrecordsfromamodelmatchingadomain. Theonlydifficultyis
     *thatifwehavean'active'field,weimplicitelyaddactive=truein
     *thedomain.
     *
     *@private
     *@param{string}modelamodelname
     *@param{any[]}domain
     *@param{Object}[params={}]
     *@param{boolean}[params.active_test=true]
     *@returns{Object[]}alistofrecords
     */
    _getRecords:function(model,domain,{active_test=true}={}){
        if(!_.isArray(domain)){
            thrownewError("MockServer._getRecords:givendomainhastobeanarray.");
        }

        varself=this;
        varrecords=this.data[model].records;

        if(active_test&&'active'inthis.data[model].fields){
            //add['active','=',true]tothedomainif'active'isnotyetpresentindomain
            varactiveInDomain=false;
            _.each(domain,function(subdomain){
                activeInDomain=activeInDomain||subdomain[0]==='active';
            });
            if(!activeInDomain){
                domain=[['active','=',true]].concat(domain);
            }
        }

        if(domain.length){
            //'child_of'operatorisn'tsupportedbydomain.js,sowereplace
            //inbythe'in'operator(withtheidsofchildren)
            domain=domain.map(function(criterion){
                if(criterion[1]==='child_of'){
                    varoldLength=0;
                    varchildIDs=[criterion[2]];
                    while(childIDs.length>oldLength){
                        oldLength=childIDs.length;
                        _.each(records,function(r){
                            if(childIDs.indexOf(r.parent_id)>=0){
                                childIDs.push(r.id);
                            }
                        });
                    }
                    criterion=[criterion[0],'in',childIDs];
                }
                returncriterion;
            });
            records=_.filter(records,function(record){
                returnself._evaluateDomain(domain,record);
            });
        }

        returnrecords;
    },
    /**
     *Helperfunction,tofindanavailableID.Thecurrentalgorithmisto
     *returnthecurrentlyhighestid+1.
     *
     *@private
     *@param{string}modelName
     *@returns{integer}avalidID(>0)
     */
    _getUnusedID:function(modelName){
        varmodel=this.data[modelName];
        returnmodel.records.reduce((max,record)=>{
            if(!Number.isInteger(record.id)){
                returnmax;
            }
            returnMath.max(record.id,max);
        },0)+1;
    },
    /**
     *Simulatea'call_button'operationfromaview.
     *
     *@private
     *@param{Object}param0
     *@param{Array<integer[]>}param0.args
     *@param{Object}[param0.kargs]
     *@param{string}param0.method
     *@param{string}param0.model
     *@returns{any}
     *@throws{Error}incasethecallbuttonofprovidedmodel/methodisnot
     *  implemented.
     */
    _mockCallButton({args,kwargs,method,model}){
        thrownewError(`Unimplementedmockedcallbuttonon"${model}"/"${method}"`);
    },
    /**
     *Simulatea'copy'operation,sowesimplytrytoduplicatearecordin
     *memory
     *
     *@private
     *@param{string}modelName
     *@param{integer}idtheIDofavalidrecord
     *@returns{integer}theIDoftheduplicatedrecord
     */
    _mockCopy:function(modelName,id){
        varmodel=this.data[modelName];
        varnewID=this._getUnusedID(modelName);
        varoriginalRecord=_.findWhere(model.records,{id:id});
        varduplicateRecord=_.extend({},originalRecord,{id:newID});
        duplicateRecord.display_name=originalRecord.display_name+'(copy)';
        model.records.push(duplicateRecord);
        returnnewID;
    },
    /**
     *Simulatea'create'operation. Thisisbasicallya'write'withthe
     *addedworkofgettingavalidIDandapplyingdefaultvalues.
     *
     *@private
     *@param{string}modelName
     *@param{Object}values
     *@returns{integer}
     */
    _mockCreate:function(modelName,values){
        if('id'invalues){
            thrownewError("Cannotcreatearecordwithapredefiniteid");
        }
        varmodel=this.data[modelName];
        varid=this._getUnusedID(modelName);
        varrecord={id:id};
        model.records.push(record);
        this._applyDefaults(model,values);
        this._writeRecord(modelName,values,id);
        returnid;
    },
    /**
     *Simulatea'default_get'operation
     *
     *@private
     *@param{string}modelName
     *@param{array[]}argsalistwithalistoffieldsinthefirstposition
     *@param{Object}[kwargs={}]
     *@param{Object}[kwargs.context]thecontexttoeventuallyreaddefault
     *  values
     *@returns{Object}
     */
    _mockDefaultGet:function(modelName,args,kwargs={}){
        constfields=args[0];
        constmodel=this.data[modelName];
        constresult={};
        for(constfieldNameoffields){
            constkey="default_"+fieldName;
            if(kwargs.context&&keyinkwargs.context){
                result[fieldName]=kwargs.context[key];
                continue;
            }
            constfield=model.fields[fieldName];
            if('default'infield){
                result[fieldName]=field.default;
                continue;
            }
        }
        for(constfieldNameinresult){
            constfield=model.fields[fieldName];
            if(field.type==="many2one"){
                constrecordExists=this.data[field.relation].records.some(
                    (r)=>r.id===result[fieldName]
                );
                if(!recordExists){
                    deleteresult[fieldName];
                }
            }
        }
        returnresult;
    },
    /**
     *Simulatea'fields_get'operation
     *
     *@private
     *@param{string}modelName
     *@param{any}args
     *@returns{Object}
     */
    _mockFieldsGet:function(modelName,args){
        varmodelFields=this.data[modelName].fields;
        //Getonlytheaskedfields(args[0]couldbethefieldnames)
        if(args[0]&&args[0].length){
            modelFields=_.pick.apply(_,[modelFields].concat(args[0]));
        }
        //Getonlytheaskedattributes(args[1]couldbetheattributenames)
        if(args[1]&&args[1].length){
            modelFields=_.mapObject(modelFields,function(field){
                return_.pick.apply(_,[field].concat(args[1]));
            });
        }
        returnmodelFields;
    },
    /**
     *Simulatesacalltotheserver'_search_panel_field_image'method.
     *
     *@private
     *@param{string}model
     *@param{string}fieldName
     *@param{Object}kwargs
     *@see_mockSearchPanelDomainImage()
     */
	_mockSearchPanelFieldImage(model,fieldName,kwargs){
        constenableCounters=kwargs.enable_counters;
        constonlyCounters=kwargs.only_counters;
        constextraDomain=kwargs.extra_domain||[];
        constnormalizedExtra=Domain.prototype.normalizeArray(extraDomain);
        constnoExtra=JSON.stringify(normalizedExtra)==="[]";
        constmodelDomain=kwargs.model_domain||[];
        constcountDomain=Domain.prototype.normalizeArray([
            ...modelDomain,
            ...extraDomain,
        ]);

        constlimit=kwargs.limit;
        constsetLimit=kwargs.set_limit;

        if(onlyCounters){
            returnthis._mockSearchPanelDomainImage(model,fieldName,countDomain,true);
        }

        constmodelDomainImage=this._mockSearchPanelDomainImage(
            model,
            fieldName,
            modelDomain,
            enableCounters&&noExtra,
            setLimit&&limit
        );
        if(enableCounters&&!noExtra){
            constcountDomainImage=this._mockSearchPanelDomainImage(
                model,
                fieldName,
                countDomain,
                true
            );
            for(const[id,values]ofmodelDomainImage.entries()){
                constelement=countDomainImage.get(id);
                values.__count=element?element.__count:0;
            }
        }

        returnmodelDomainImage;
    },

    /**
     *Simulatesacalltotheserver'_search_panel_domain_image'method.
     *
     *@private
     *@param{string}model
     *@param{Array[]}domain
     *@param{string}fieldName
     *@param{boolean}setCount
     *@returns{Map}
     */
    _mockSearchPanelDomainImage:function(model,fieldName,domain,setCount=false,limit=false){
        constfield=this.data[model].fields[fieldName];
        letgroupIdName;
        if(field.type==='many2one'){
            groupIdName=value=>value||[false,undefined];
            //mockReadGroupdoesnottakecareofthecondition[fieldName,'!=',false]
            //inthedomaindefinedbelow!!!
        }elseif(field.type==='selection'){
            constselection={};
            for(const[value,label]ofthis.data[model].fields[fieldName].selection){
                selection[value]=label;
            }
            groupIdName=value=>[value,selection[value]];
        }
        domain=Domain.prototype.normalizeArray([
            ...domain,
            [fieldName,'!=',false],
        ]);
        constgroups=this._mockReadGroup(model,{
            domain,
            fields:[fieldName],
            groupby:[fieldName],
            limit,
        });
        constdomainImage=newMap();
        for(constgroupofgroups){
            const[id,display_name]=groupIdName(group[fieldName]);
            constvalues={id,display_name};
            if(setCount){
                values.__count=group[fieldName+'_count'];
            }
            domainImage.set(id,values);
        }
        returndomainImage;
    },
    /**
     *Simulatesacalltotheserver'_search_panel_global_counters'method.
     *
     *@private
     *@param{Map}valuesRange
     *@param{(string|boolean)}parentName'parent_id'orfalse
     */
    _mockSearchPanelGlobalCounters:function(valuesRange,parentName){
        constlocalCounters=[...valuesRange.keys()].map(id=>valuesRange.get(id).__count);
        for(let[id,values]ofvaluesRange.entries()){
            constcount=localCounters[id];
            if(count){
                letparent_id=values[parentName];
                while(parent_id){
                    values=valuesRange.get(parent_id);
                    values.__count+=count;
                    parent_id=values[parentName];
                }
            }
        }
    },
    /**
     *Simulatesacalltotheserver'_search_panel_sanitized_parent_hierarchy'method.
     *
     *@private
     *@param{Object[]}records
     *@param{(string|boolean)}parentName'parent_id'orfalse
     *@param{number[]}ids
     *@returns{Object[]}
     */
    _mockSearchPanelSanitizedParentHierarchy:function(records,parentName,ids){
        constgetParentId=record=>record[parentName]&&record[parentName][0];
        constallowedRecords={};
        for(constrecordofrecords){
            allowedRecords[record.id]=record;
        }
        constrecordsToKeep={};
        for(constidofids){
            constancestorChain={};
            letrecordId=id;
            letchainIsFullyIncluded=true;
            while(chainIsFullyIncluded&&recordId){
                constknownStatus=recordsToKeep[recordId];
                if(knownStatus!==undefined){
                    chainIsFullyIncluded=knownStatus;
                    break;
                }
                constrecord=allowedRecords[recordId];
                if(record){
                    ancestorChain[recordId]=record;
                    recordId=getParentId(record);
                }else{
                    chainIsFullyIncluded=false;
                }
            }
            for(constidinancestorChain){
                recordsToKeep[id]=chainIsFullyIncluded;
            }
        }
        returnrecords.filter(rec=>recordsToKeep[rec.id]);
    },
    /**
     *Simulatesacalltotheserver'search_panel_selection_range'method.
     *
     *@private
     *@param{string}model
     *@param{string}fieldName
     *@param{Object}kwargs
     *@returns{Object[]}
     */
    _mockSearchPanelSelectionRange:function(model,fieldName,kwargs){
        constenableCounters=kwargs.enable_counters;
        constexpand=kwargs.expand;
        letdomainImage;
        if(enableCounters||!expand){
            constnewKwargs=Object.assign({},kwargs,{
                only_counters:expand,
            });
            domainImage=this._mockSearchPanelFieldImage(model,fieldName,newKwargs);
        }
        if(!expand){
            return[...domainImage.values()];
        }
        constselection=this.data[model].fields[fieldName].selection;
        constselectionRange=[];
        for(const[value,label]ofselection){
            constvalues={
                id:value,
                display_name:label,
            };
            if(enableCounters){
                values.__count=domainImage.get(value)?domainImage.get(value).__count:0;
            }
            selectionRange.push(values);
        }
        returnselectionRange;
    },
    /**
     *Simulatesacalltotheserver'search_panel_select_range'method.
     *
     *@private
     *@param{string}model
     *@param{string[]}args
     *@param{string}args[fieldName]
     *@param{Object}[kwargs={}]
     *@param{Array[]}[kwargs.category_domain]domaingeneratedbycategories
     *     (thisparameterisusedin_search_panel_range)
     *@param{Array[]}[kwargs.comodel_domain]domainoffieldvalues(ifrelational)
     *     (thisparameterisusedin_search_panel_range)
     *@param{boolean}[kwargs.enable_counters]whethertocountrecordsbyvalue
     *@param{Array[]}[kwargs.filter_domain]domaingeneratedbyfilters
     *@param{integer}[kwargs.limit]maximalnumberofvaluestofetch
     *@param{Array[]}[kwargs.search_domain]basedomainofsearch(thisparameter
     *     isusedin_search_panel_range)
     *@returns{Object}
     */
    _mockSearchPanelSelectRange:function(model,[fieldName],kwargs){
        constfield=this.data[model].fields[fieldName];
        constsupportedTypes=['many2one','selection'];
        if(!supportedTypes.includes(field.type)){
            thrownewError(`Onlytypes${supportedTypes}aresupportedforcategory(foundtype${field.type})`);
        }

        constmodelDomain=kwargs.search_domain||[];
        constextraDomain=Domain.prototype.normalizeArray([
            ...(kwargs.category_domain||[]),
            ...(kwargs.filter_domain||[]),
        ]);

        if(field.type==='selection'){
            constnewKwargs=Object.assign({},kwargs,{
                model_domain:modelDomain,
                extra_domain:extraDomain,
            });
            kwargs.model_domain=modelDomain;
            return{
                parent_field:false,
                values:this._mockSearchPanelSelectionRange(model,fieldName,newKwargs),
            };
        }

        constfieldNames=['display_name'];
        lethierarchize='hierarchize'inkwargs?kwargs.hierarchize:true;
        letgetParentId;
        letparentName=false;
        if(hierarchize&&this.data[field.relation].fields.parent_id){
            parentName='parent_id';//intests,parentfieldisalways'parent_id'
            fieldNames.push(parentName);
            getParentId=record=>record.parent_id&&record.parent_id[0];
        }else{
            hierarchize=false;
        }
        letcomodelDomain=kwargs.comodel_domain||[];
        constenableCounters=kwargs.enable_counters;
        constexpand=kwargs.expand;
        constlimit=kwargs.limit;
        letdomainImage;
        if(enableCounters||!expand){
            constnewKwargs=Object.assign({},kwargs,{
                model_domain:modelDomain,
                extra_domain:extraDomain,
                only_counters:expand,
                set_limit:limit&&!(expand||hierarchize||comodelDomain),
            });
            domainImage=this._mockSearchPanelFieldImage(model,fieldName,newKwargs);
        }
        if(!expand&&!hierarchize&&!comodelDomain.length){
            if(limit&&domainImage.size===limit){
                return{error_msg:"Toomanyitemstodisplay."};
            }
            return{
                parent_field:parentName,
                values:[...domainImage.values()],
            };
        }
        letimageElementIds;
        if(!expand){
            imageElementIds=[...domainImage.keys()].map(Number);
            letcondition;
            if(hierarchize){
                constrecords=this.data[field.relation].records;
                constancestorIds=newSet();
                for(constidofimageElementIds){
                    letrecordId=id;
                    letrecord;
                    while(recordId){
                        ancestorIds.add(recordId);
                        record=records.find(rec=>rec.id===recordId);
                        recordId=record[parentName];
                    }
                }
                condition=['id','in',[...newSet(ancestorIds)]];
            }else{
                condition=['id','in',imageElementIds];
            }
            comodelDomain=Domain.prototype.normalizeArray([
                ...comodelDomain,
                condition,
            ]);
        }
        letcomodelRecords=this._mockSearchRead(field.relation,[comodelDomain,fieldNames],{limit});

        if(hierarchize){
            constids=expand?comodelRecords.map(rec=>rec.id):imageElementIds;
            comodelRecords=this._mockSearchPanelSanitizedParentHierarchy(comodelRecords,parentName,ids);
        }

        if(limit&&comodelRecords.length===limit){
            return{error_msg:"Toomanyitemstodisplay."};
        }
        //Amapisusedtokeeptheinitialorder.
        constfieldRange=newMap();
        for(constrecordofcomodelRecords){
            constvalues={
                id:record.id,
                display_name:record.display_name,
            };
            if(hierarchize){
                values[parentName]=getParentId(record);
            }
            if(enableCounters){
                values.__count=domainImage.get(record.id)?domainImage.get(record.id).__count:0;
            }
            fieldRange.set(record.id,values);
        }

        if(hierarchize&&enableCounters){
            this._mockSearchPanelGlobalCounters(fieldRange,parentName);
        }

        return{
            parent_field:parentName,
            values:[...fieldRange.values()],
        };
    },
    /**
     *Simulatesacalltotheserver'search_panel_select_multi_range'method.
     *
     *@private
     *@param{string}model
     *@param{string[]}args
     *@param{string}args[fieldName]
     *@param{Object}[kwargs={}]
     *@param{Array[]}[kwargs.category_domain]domaingeneratedbycategories
     *@param{Array[]}[kwargs.comodel_domain]domainoffieldvalues(ifrelational)
     *     (thisparameterisusedin_search_panel_range)
     *@param{boolean}[kwargs.enable_counters]whethertocountrecordsbyvalue
     *@param{Array[]}[kwargs.filter_domain]domaingeneratedbyfilters
     *@param{string}[kwargs.group_by]extrafieldtoreadoncomodel,togroup
     *     comodelrecords
     *@param{Array[]}[kwargs.group_domain]dict,onedomainforeachactivated
     *     groupforthegroup_by(ifany).Thosedomainsareusedtofechaccurate
     *     countersforvaluesineachgroup
     *@param{integer}[kwargs.limit]maximalnumberofvaluestofetch
     *@param{Array[]}[kwargs.search_domain]basedomainofsearch
     *@returns{Object}
     */
    _mockSearchPanelSelectMultiRange:function(model,[fieldName],kwargs){
        constfield=this.data[model].fields[fieldName];
        constsupportedTypes=['many2one','many2many','selection'];
        if(!supportedTypes.includes(field.type)){
            thrownewError(`Onlytypes${supportedTypes}aresupportedforfilter(foundtype${field.type})`);
        }
        letmodelDomain=kwargs.search_domain||[];
        letextraDomain=Domain.prototype.normalizeArray([
            ...(kwargs.category_domain||[]),
            ...(kwargs.filter_domain||[]),
        ]);
        if(field.type==='selection'){
            constnewKwargs=Object.assign({},kwargs,{
                model_domain:modelDomain,
                extra_domain:extraDomain,
            });
            return{
                values:this._mockSearchPanelSelectionRange(model,fieldName,newKwargs),
            };
        }
        constfieldNames=['display_name'];
        constgroupBy=kwargs.group_by;
        letgroupIdName;
        if(groupBy){
            constgroupByField=this.data[field.relation].fields[groupBy];
            fieldNames.push(groupBy);
            if(groupByField.type==='many2one'){
                groupIdName=value=>value||[false,"Notset"];
            }elseif(groupByField.type==='selection'){
                constgroupBySelection=Object.assign({},this.data[field.relation].fields[groupBy].selection);
                groupBySelection[false]="NotSet";
                groupIdName=value=>[value,groupBySelection[value]];
            }else{
                groupIdName=value=>value?[value,value]:[false,"Notset"];
            }
        }
        letcomodelDomain=kwargs.comodel_domain||[];
        constenableCounters=kwargs.enable_counters;
        constexpand=kwargs.expand;
        constlimit=kwargs.limit;
        if(field.type==='many2many'){
            constcomodelRecords=this._mockSearchRead(field.relation,[comodelDomain,fieldNames],{limit});
            if(expand&&limit&&comodelRecords.length===limit){
                return{error_msg:"Toomanyitemstodisplay."};
            }

            constgroupDomain=kwargs.group_domain;
            constfieldRange=[];
            for(constrecordofcomodelRecords){
                constvalues={
                    id:record.id,
                    display_name:record.display_name,
                };
                letgroupId;
                if(groupBy){
                    const[gId,gName]=groupIdName(record[groupBy]);
                    values.group_id=groupId=gId;
                    values.group_name=gName;
                }
                letcount;
                letinImage;
                if(enableCounters||!expand){
                    constsearchDomain=Domain.prototype.normalizeArray([
                        ...modelDomain,
                        [fieldName,"in",record.id]
                    ]);
                    letlocalExtraDomain=extraDomain;
                    if(groupBy&&groupDomain){
                        localExtraDomain=Domain.prototype.normalizeArray([
                            ...localExtraDomain,
                            ...(groupDomain[JSON.stringify(groupId)]||[]),
                        ]);
                    }
                    constsearchCountDomain=Domain.prototype.normalizeArray([
                        ...searchDomain,
                        ...localExtraDomain,
                    ]);
                    if(enableCounters){
                        count=this._mockSearchCount(model,[searchCountDomain]);
                    }
                    if(!expand){
                        if(
                            enableCounters&&
                            JSON.stringify(localExtraDomain)==="[]"
                        ){
                            inImage=count;
                        }else{
                            inImage=(this._mockSearch(model,[searchDomain],{limit:1})).length;
                        }
                    }
                }
                if(expand||inImage){
                    if(enableCounters){
                        values.__count=count;
                    }
                    fieldRange.push(values);
                }
            }

            if(!expand&&limit&&fieldRange.length===limit){
                return{error_msg:"Toomanyitemstodisplay."};
            }

            return{values:fieldRange};
        }

        if(field.type==='many2one'){
            letdomainImage;
            if(enableCounters||!expand){
                extraDomain=Domain.prototype.normalizeArray([
                    ...extraDomain,
                    ...(kwargs.group_domain||[]),
                ]);
                modelDomain=Domain.prototype.normalizeArray([
                    ...modelDomain,
                    ...(kwargs.group_domain||[]),
                ]);
                constnewKwargs=Object.assign({},kwargs,{
                    model_domain:modelDomain,
                    extra_domain:extraDomain,
                    only_counters:expand,
                    set_limit:limit&&!(expand||groupBy||comodelDomain),
                });
                domainImage=this._mockSearchPanelFieldImage(model,fieldName,newKwargs);
            }
            if(!expand&&!groupBy&&!comodelDomain.length){
                if(limit&&domainImage.size===limit){
                    return{error_msg:"Toomanyitemstodisplay."};
                }
                return{values:[...domainImage.values()]};
            }
            if(!expand){
                constimageElementIds=[...domainImage.keys()].map(Number);
                comodelDomain=Domain.prototype.normalizeArray([
                    ...comodelDomain,
                    ['id','in',imageElementIds],
                ]);
            }
            constcomodelRecords=this._mockSearchRead(field.relation,[comodelDomain,fieldNames],{limit});
            if(limit&&comodelRecords.length===limit){
                return{error_msg:"Toomanyitemstodisplay."};
            }

            constfieldRange=[];
            for(constrecordofcomodelRecords){
                constvalues={
                    id:record.id,
                    display_name:record.display_name,
                };
                if(groupBy){
                    const[groupId,groupName]=groupIdName(record[groupBy]);
                    values.group_id=groupId;
                    values.group_name=groupName;
                }
                if(enableCounters){
                    values.__count=domainImage.get(record.id)?domainImage.get(record.id).__count:0;
                }
                fieldRange.push(values);
            }
            return{values:fieldRange};
        }
    },
    /**
     *Simulateacalltothe'/web/action/load'route
     *
     *@private
     *@param{Object}kwargs
     *@param{integer}kwargs.action_id
     *@returns{Object}
     */
    _mockLoadAction:function(kwargs){
        varaction=_.findWhere(this.actions,{id:parseInt(kwargs.action_id)});
        if(!action){
            //whentheactiondoesn'texist,therealserverdoesn'tcrash,it
            //simplyreturnsfalse
            console.warn("NoactionfoundforID"+kwargs.action_id);
        }
        returnaction||false;
    },
    /**
     *Simulatea'load_views'operation
     *
     *@param{string}model
     *@param{Array}args
     *@param{Object}kwargs
     *@param{Array}kwargs.views
     *@param{Object}kwargs.options
     *@param{Object}kwargs.context
     *@returns{Object}
     */
    _mockLoadViews:function(model,kwargs){
        varself=this;
        varviews={};
        _.each(kwargs.views,function(view_descr){
            varviewID=view_descr[0]||false;
            varviewType=view_descr[1];
            if(!viewID){
                varcontextKey=(viewType==='list'?'tree':viewType)+'_view_ref';
                if(contextKeyinkwargs.context){
                    viewID=kwargs.context[contextKey];
                }
            }
            varkey=[model,viewID,viewType].join(',');
            vararch=self.archs[key]||_.find(self.archs,function(_v,k){
                varka=k.split(',');
                viewID=parseInt(ka[1],10);
                returnka[0]===model&&ka[2]===viewType;
            });
            if(!arch){
                thrownewError('Noarchfoundforkey'+key);
            }
            views[viewType]={
                arch:arch,
                view_id:viewID,
                model:model,
                viewOptions:{
                    context:kwargs.context,
                },
            };
        });
        returnviews;
    },
    /**
     *Simulatea'name_get'operation
     *
     *@private
     *@param{string}model
     *@param{Array}args
     *@returns{Array[]}alistof[id,display_name]
     */
    _mockNameGet:function(model,args){
        varids=args[0];
        if(!args.length){
            thrownewError("name_get:expectedoneargument");
        }
        elseif(!ids){
            return[]
        }
        if(!_.isArray(ids)){
            ids=[ids];
        }
        varrecords=this.data[model].records;
        varnames=_.map(ids,function(id){
            returnid?[id,_.findWhere(records,{id:id}).display_name]:[null,"False"];
        });
        returnnames;
    },
    /**
     *Simulatea'name_create'operation
     *
     *@private
     *@param{string}model
     *@param{Array}args
     *@returns{Array}acouple[id,name]
     */
    _mockNameCreate:function(model,args){
        varname=args[0];
        varvalues={
            name:name,
            display_name:name,
        };
        varid=this._mockCreate(model,values);
        return[id,name];
    },
    /**
     *Simulatea'name_search'operation.
     *
     *notyetfullyimplemented(missing:limit,andevaluateoperators)
     *domainworksbutonlytofilteronids
     *
     *@private
     *@param{string}model
     *@param{Array}args
     *@param{string}args[0]
     *@param{Array}args[1],searchdomain
     *@param{Object}_kwargs
     *@param{number}[_kwargs.limit=100]server-sidedefaultlimit
     *@returns{Array[]}alistof[id,display_name]
     */
    _mockNameSearch:function(model,args,_kwargs){
        varstr=args&&typeofargs[0]==='string'?args[0]:_kwargs.name;
        constlimit=_kwargs.limit||100;
        vardomain=(args&&args[1])||_kwargs.args||[];
        varrecords=this._getRecords(model,domain);
        if(str.length){
            records=_.filter(records,function(record){
                returnrecord.display_name.indexOf(str)!==-1;
            });
        }
        varresult=_.map(records,function(record){
            return[record.id,record.display_name];
        });
        returnresult.slice(0,limit);
    },
    /**
     *Simulatean'onchange'rpc
     *
     *@private
     *@param{string}model
     *@param{Object}args
     *@param{Object}args[1]thecurrentrecorddata
     *@param{string|string[]}[args[2]]alistoffieldnames,orjustafieldname
     *@param{Object}args[3]theonchangespec
     *@param{Object}[kwargs]
     *@returns{Object}
     */
    _mockOnchange:function(model,args,kwargs){
        constcurrentData=args[1];
        letfields=args[2];
        constonChangeSpec=args[3];
        varonchanges=this.data[model].onchanges||{};

        if(fields&&!(fieldsinstanceofArray)){
            fields=[fields];
        }
        constfirstOnChange=!fields||!fields.length;
        constonchangeVals={};
        letdefaultVals;
        letnullValues;
        if(firstOnChange){
            constfieldsFromView=Object.keys(onChangeSpec).reduce((acc,fname)=>{
                fname=fname.split('.',1)[0];
                if(!acc.includes(fname)){
                    acc.push(fname);
                }
                returnacc;
            },[]);
            constdefaultingFields=fieldsFromView.filter(fname=>!(fnameincurrentData));
            defaultVals=this._mockDefaultGet(model,[defaultingFields],kwargs);
            //Itisthenewsemantics:nofieldinargumentsmeanswearein
            //adefault_get+onchangesituation
            fields=fieldsFromView;
            nullValues={};
            fields.filter(fName=>!Object.keys(defaultVals).includes(fName)).forEach(fName=>{
                nullValues[fName]=false;
            });
        }
        Object.assign(currentData,defaultVals);
        fields.forEach(field=>{
            if(fieldinonchanges){
                constchanges=Object.assign({},nullValues,currentData);
                onchanges[field](changes);
                Object.entries(changes).forEach(([key,value])=>{
                    if(currentData[key]!==value){
                        onchangeVals[key]=value;
                    }
                });
            }
        });

        return{
            value:this._convertToOnChange(model,Object.assign({},defaultVals,onchangeVals)),
        };
    },
    /**
     *Simulatea'read'operation.
     *
     *@private
     *@param{string}model
     *@param{Array}args
     *@param{Object}_kwargsignored...isthatcorrect?
     *@returns{Object}
     */
    _mockRead:function(model,args,_kwargs){
        varself=this;
        varids=args[0];
        if(!_.isArray(ids)){
            ids=[ids];
        }
        varfields=args[1]&&args[1].length?_.uniq(args[1].concat(['id'])):Object.keys(this.data[model].fields);
        varrecords=_.reduce(ids,function(records,id){
            if(!id){
                thrownewError("mockread:falsyvaluegivenasid,wouldresultinanaccesserrorinactualserver!");
            }
            varrecord= _.findWhere(self.data[model].records,{id:id});
            returnrecord?records.concat(record):records;
        },[]);
        varresults=_.map(records,function(record){
            varresult={};
            for(vari=0;i<fields.length;i++){
                varfield=self.data[model].fields[fields[i]];
                if(!field){
                    //thefielddoens'texistonthemodel,soskipit
                    continue;
                }
                if(field.type==='float'||
                    field.type==='integer'||
                    field.type==='monetary'){
                    //readshouldreturn0forunsetnumericfields
                    result[fields[i]]=record[fields[i]]||0;
                }elseif(field.type==='many2one'){
                    varrelatedRecord=_.findWhere(self.data[field.relation].records,{
                        id:record[fields[i]]
                    });
                    if(relatedRecord){
                        result[fields[i]]=
                            [record[fields[i]],relatedRecord.display_name];
                    }else{
                        result[fields[i]]=false;
                    }
                }elseif(field.type==='one2many'||field.type==='many2many'){
                    result[fields[i]]=record[fields[i]]||[];
                }else{
                    result[fields[i]]=record[fields[i]]||false;
                }
            }
            returnresult;
        });
        returnresults;
    },
    /**
     *Simulatea'read_group'calltotheserver.
     *
     *Note:mostofthekeysinkwargsarestillignored
     *
     *@private
     *@param{string}modelastringdescribinganexistingmodel
     *@param{Object}kwargsvariousoptionssupportedbyread_group
     *@param{string[]}kwargs.groupbyfieldsthatwearegrouping
     *@param{string[]}kwargs.fieldsfieldsthatweareaggregating
     *@param{Array}kwargs.domainthedomainusedfortheread_group
     *@param{boolean}kwargs.lazystillmostlyignored
     *@param{integer}[kwargs.limit]
     *@param{integer}[kwargs.offset]
     *@returns{Object[]}
     */
    _mockReadGroup:function(model,kwargs){
        if(!('lazy'inkwargs)){
            kwargs.lazy=true;
        }
        varself=this;
        varfields=this.data[model].fields;
        varaggregatedFields=[];
        _.each(kwargs.fields,function(field){
            varsplit=field.split(":");
            varfieldName=split[0];
            if(kwargs.groupby.indexOf(fieldName)>0){
                //groupedfieldsarenotaggregated
                return;
            }
            if(fields[fieldName]&&(fields[fieldName].type==='many2one')&&split[1]!=='count_distinct'){
                return;
            }
            aggregatedFields.push(fieldName);
        });
        vargroupBy=[];
        if(kwargs.groupby.length){
            groupBy=kwargs.lazy?[kwargs.groupby[0]]:kwargs.groupby;
        }
        varrecords=this._getRecords(model,kwargs.domain);

        //ifnofieldshavebeengiven,theserverpicksallstoredfields
        if(kwargs.fields.length===0){
            aggregatedFields=_.keys(this.data[model].fields);
        }

        vargroupByFieldNames=_.map(groupBy,function(groupByField){
            returngroupByField.split(":")[0];
        });

        //filteroutnonexistingfields
        aggregatedFields=_.filter(aggregatedFields,function(name){
            returnnameinself.data[model].fields&&!(_.contains(groupByFieldNames,name));
        });

        functionaggregateFields(group,records){
            vartype;
            for(vari=0;i<aggregatedFields.length;i++){
                type=fields[aggregatedFields[i]].type;
                if(type==='float'||type==='integer'){
                    group[aggregatedFields[i]]=null;
                    for(varj=0;j<records.length;j++){
                        varvalue=group[aggregatedFields[i]]||0;
                        group[aggregatedFields[i]]=value+records[j][aggregatedFields[i]];
                    }
                }
                if(type==='many2one'){
                    varids=_.pluck(records,aggregatedFields[i]);
                    group[aggregatedFields[i]]=_.uniq(ids).length||null;
                }
            }
        }
        functionformatValue(groupByField,val){
            varfieldName=groupByField.split(':')[0];
            varaggregateFunction=groupByField.split(':')[1]||'month';
            if(fields[fieldName].type==='date'){
                if(!val){
                    returnfalse;
                }elseif(aggregateFunction==='day'){
                    returnmoment(val).format('YYYY-MM-DD');
                }elseif(aggregateFunction==='week'){
                    returnmoment(val).format('wwYYYY');
                }elseif(aggregateFunction==='quarter'){
                    return'Q'+moment(val).format('QYYYY');
                }elseif(aggregateFunction==='year'){
                    returnmoment(val).format('Y');
                }else{
                    returnmoment(val).format('MMMMYYYY');
                }
            }else{
                returnvalinstanceofArray?val[0]:(val||false);
            }
        }
        functiongroupByFunction(record){
            varvalue='';
            _.each(groupBy,function(groupByField){
                value=(value?value+',':value)+groupByField+'#';
                varfieldName=groupByField.split(':')[0];
                if(fields[fieldName].type==='date'){
                    value+=formatValue(groupByField,record[fieldName]);
                }else{
                    value+=JSON.stringify(record[groupByField]);
                }
            });
            returnvalue;
        }

        if(!groupBy.length){
            vargroup={__count:records.length};
            aggregateFields(group,records);
            return[group];
        }

        vargroups=_.groupBy(records,groupByFunction);
        varresult=_.map(groups,function(group){
            varres={
                __domain:kwargs.domain||[],
            };
            _.each(groupBy,function(groupByField){
                varfieldName=groupByField.split(':')[0];
                varval=formatValue(groupByField,group[0][fieldName]);
                varfield=self.data[model].fields[fieldName];
                if(field.type==='many2one'&&!_.isArray(val)){
                    varrelated_record=_.findWhere(self.data[field.relation].records,{
                        id:val
                    });
                    if(related_record){
                        res[groupByField]=[val,related_record.display_name];
                    }else{
                        res[groupByField]=false;
                    }
                }else{
                    res[groupByField]=val;
                }

                if(field.type==='date'&&val){
                    varaggregateFunction=groupByField.split(':')[1];
                    varstartDate,endDate;
                    if(aggregateFunction==='day'){
                        startDate=moment(val,'YYYY-MM-DD');
                        endDate=startDate.clone().add(1,'days');
                    }elseif(aggregateFunction==='week'){
                        startDate=moment(val,'wwYYYY');
                        endDate=startDate.clone().add(1,'weeks');
                    }elseif(aggregateFunction==='year'){
                        startDate=moment(val,'Y');
                        endDate=startDate.clone().add(1,'years');
                    }else{
                        startDate=moment(val,'MMMMYYYY');
                        endDate=startDate.clone().add(1,'months');
                    }
                    res.__domain=[[fieldName,'>=',startDate.format('YYYY-MM-DD')],[fieldName,'<',endDate.format('YYYY-MM-DD')]].concat(res.__domain);
                }else{
                    res.__domain=[[fieldName,'=',val]].concat(res.__domain);
                }

            });

            //computecountkeytomatchdumbserverlogic...
            varcountKey;
            constgroupByNoLeaf=kwargs.context?'group_by_no_leaf'inkwargs.context:false;
            if(kwargs.lazy&&(groupBy.length>=2||!groupByNoLeaf)){
                countKey=groupBy[0].split(':')[0]+"_count";
            }else{
                countKey="__count";
            }
            res[countKey]=group.length;
            aggregateFields(res,group);

            returnres;
        });

        if(kwargs.orderby){
            //onlyconsiderfirstsortinglevel
            kwargs.orderby=kwargs.orderby.split(',')[0];
            varfieldName=kwargs.orderby.split('')[0];
            varorder=kwargs.orderby.split('')[1];
            result=this._sortByField(result,model,fieldName,order);
        }

        if(kwargs.limit){
            varoffset=kwargs.offset||0;
            result=result.slice(offset,kwargs.limit+offset);
        }

        returnresult;
    },
    /**
     *Simulatesa'read_progress_bar'operation
     *
     *@private
     *@param{string}model
     *@param{Object}kwargs
     *@returns{Object[][]}
     */
    _mockReadProgressBar:function(model,kwargs){
        vardomain=kwargs.domain;
        vargroupBy=kwargs.group_by;
        varprogress_bar=kwargs.progress_bar;

        varrecords=this._getRecords(model,domain||[]);

        vardata={};
        _.each(records,function(record){
            vargroupByValue=record[groupBy];//alwaystechnicalvaluehere

            //specialcaseforboolvalues:rpccallresponsewithcapitalizedstrings
            if(!(groupByValueindata)){
                if(groupByValue===true){
                    groupByValue="True";
                }elseif(groupByValue===false){
                    groupByValue="False";
                }
            }

            if(!(groupByValueindata)){
                data[groupByValue]={};
                _.each(progress_bar.colors,function(val,key){
                    data[groupByValue][key]=0;
                });
            }

            varfieldValue=record[progress_bar.field];
            if(fieldValueindata[groupByValue]){
                data[groupByValue][fieldValue]++;
            }
        });

        returndata;
    },
    /**
     *Simulatesa'resequence'operation
     *
     *@private
     *@param{string}model
     *@param{string}field
     *@param{Array}ids
     */
    _mockResequence:function(args){
        varoffset=args.offset?Number(args.offset):0;
        varfield=args.field?args.field:'sequence';
        varrecords=this.data[args.model].records;
        if(!(fieldinthis.data[args.model].fields)){
            returnfalse;
        }
        for(variinargs.ids){
            varrecord=_.findWhere(records,{id:args.ids[i]});
            record[field]=Number(i)+offset;
        }
        returntrue;
    },
    /**
     *Simulatea'search'operation
     *
     *@private
     *@param{string}model
     *@param{Array}args
     *@param{Object}kwargs
     *@param{integer}[kwargs.limit]
     *@returns{integer[]}
     */
    _mockSearch:function(model,args,kwargs){
        constlimit=kwargs.limit||Number.MAX_VALUE;
        const{context}=kwargs;
        constactive_test=
          context&&"active_test"incontext?context.active_test:true;
        returnthis._getRecords(model,args[0],{active_test}).map(r=>r.id).slice(0,limit);
    },
    /**
     *Simulatea'search_count'operation
     *
     *@private
     *@param{string}model
     *@param{Array}args
     *@returns{integer}
     */
    _mockSearchCount:function(model,args){
        returnthis._getRecords(model,args[0]).length;
    },
    /**
     *Simulatea'search_read'operationonamodel
     *
     *@private
     *@param{Object}args
     *@param{Array}args.domain
     *@param{string}args.model
     *@param{Array}[args.fields]defaultstothelistofallfields
     *@param{integer}[args.limit]
     *@param{integer}[args.offset=0]
     *@param{string[]}[args.sort]
     *@returns{Object}
     */
    _mockSearchRead:function(model,args,kwargs){
        varresult=this._mockSearchReadController({
            model:model,
            domain:kwargs.domain||args[0],
            fields:kwargs.fields||args[1],
            offset:kwargs.offset||args[2],
            limit:kwargs.limit||args[3],
            sort:kwargs.order||args[4],
            context:kwargs.context,
        });
        returnresult.records;
    },
    /**
     *Simulatea'search_read'operation,fromthecontrollerpointofview
     *
     *@private
     *@private
     *@param{Object}args
     *@param{Array}args.domain
     *@param{string}args.model
     *@param{Array}[args.fields]defaultstothelistofallfields
     *@param{integer}[args.limit]
     *@param{integer}[args.offset=0]
     *@param{string[]}[args.sort]
     *@returns{Object}
     */
    _mockSearchReadController:function(args){
        varself=this;
        const{context}=args;
        constactive_test=
          context&&"active_test"incontext?context.active_test:true;
        varrecords=this._getRecords(args.model,args.domain||[],{
          active_test,
        });
        varfields=args.fields&&args.fields.length?args.fields:_.keys(this.data[args.model].fields);
        varnbRecords=records.length;
        varoffset=args.offset||0;
        records=records.slice(offset,args.limit?(offset+args.limit):nbRecords);
        varprocessedRecords=_.map(records,function(r){
            varresult={};
            _.each(_.uniq(fields.concat(['id'])),function(fieldName){
                varfield=self.data[args.model].fields[fieldName];
                if(field.type==='many2one'){
                    varrelated_record=_.findWhere(self.data[field.relation].records,{
                        id:r[fieldName]
                    });
                    result[fieldName]=
                        related_record?[r[fieldName],related_record.display_name]:false;
                }else{
                    result[fieldName]=r[fieldName];
                }
            });
            returnresult;
        });
        if(args.sort){
            //warning:onlyconsiderfirstlevelofsort
            args.sort=args.sort.split(',')[0];
            varfieldName=args.sort.split('')[0];
            varorder=args.sort.split('')[1];
            processedRecords=this._sortByField(processedRecords,args.model,fieldName,order);
        }
        varresult={
            length:nbRecords,
            records:processedRecords,
        };
        return$.extend(true,{},result);
    },
    /**
     *Simulatea'unlink'operation
     *
     *@private
     *@param{string}model
     *@param{Array}args
     *@returns{boolean}currently,alwaysreturnstrue
     */
    _mockUnlink:function(model,args){
        varids=args[0];
        if(!_.isArray(ids)){
            ids=[ids];
        }
        this.data[model].records=_.reject(this.data[model].records,function(record){
            return_.contains(ids,record.id);
        });

        //updatevalueofone2manyfieldspointingtothedeletedrecords
        _.each(this.data,function(d){
            varrelatedFields=_.pick(d.fields,function(field){
                returnfield.type==='one2many'&&field.relation===model;
            });
            _.each(Object.keys(relatedFields),function(relatedField){
                _.each(d.records,function(record){
                    record[relatedField]=_.difference(record[relatedField],ids);
                });
            });
        });

        returntrue;
    },
    /**
     *Simulatea'web_read_group'calltotheserver.
     *
     *Note:somekeysinkwargsarestillignored
     *
     *@private
     *@param{string}modelastringdescribinganexistingmodel
     *@param{Object}kwargsvariousoptionssupportedbyread_group
     *@param{string[]}kwargs.groupbyfieldsthatwearegrouping
     *@param{string[]}kwargs.fieldsfieldsthatweareaggregating
     *@param{Array}kwargs.domainthedomainusedfortheread_group
     *@param{boolean}kwargs.lazystillmostlyignored
     *@param{integer}[kwargs.limit]
     *@param{integer}[kwargs.offset]
     *@param{boolean}[kwargs.expand=false]iftrue,readrecordsinsideeach
     *  group
     *@param{integer}[kwargs.expand_limit]
     *@param{integer}[kwargs.expand_orderby]
     *@returns{Object[]}
     */
    _mockWebReadGroup:function(model,kwargs){
        varself=this;
        vargroups=this._mockReadGroup(model,kwargs);
        if(kwargs.expand&&kwargs.groupby.length===1){
            groups.forEach(function(group){
                group.__data=self._mockSearchReadController({
                    domain:group.__domain,
                    model:model,
                    fields:kwargs.fields,
                    limit:kwargs.expand_limit,
                    order:kwargs.expand_orderby,
                });
            });
        }
        varallGroups=this._mockReadGroup(model,{
            domain:kwargs.domain,
            fields:['display_name'],
            groupby:kwargs.groupby,
            lazy:kwargs.lazy,
        });
        return{
            groups:groups,
            length:allGroups.length,
        };
    },
    /**
     *Simulatea'write'operation
     *
     *@private
     *@param{string}model
     *@param{Array}args
     *@returns{boolean}currently,alwaysreturn'true'
     */
    _mockWrite:function(model,args){
        _.each(args[0],this._writeRecord.bind(this,model,args[1]));
        returntrue;
    },
    /**
     *Dispatchesafetchcalltothecorrecthelperfunction.
     *
     *@param{string}resource
     *@param{Object}init
     *@returns{any}
     */
    _performFetch(resource,init){
        thrownewError("Unimplementedresource:"+resource);
    },
    /**
     *DispatchaRPCcalltothecorrecthelperfunction
     *
     *@seeperformRpc
     *
     *@private
     *@param{string}route
     *@param{Object}args
     *@returns{Promise<any>}
     *         ResolvedwiththeresultoftheRPC.IftheRPCshouldfail,the
     *         promiseshouldeitherberejectedorthecallshouldthrowan
     *         exception(@seeperformRpcforerrorhandling).
     */
    _performRpc:function(route,args){
        switch(route){
            case'/web/dataset/call_button':
                returnPromise.resolve(this._mockCallButton(args));
            case'/web/action/load':
                returnPromise.resolve(this._mockLoadAction(args));

            case'/web/dataset/search_read':
                returnPromise.resolve(this._mockSearchReadController(args));

            case'/web/dataset/resequence':
                returnPromise.resolve(this._mockResequence(args));
        }
        if(route.indexOf('/web/image')>=0||_.contains(['.png','.jpg'],route.substr(route.length-4))){
            returnPromise.resolve();
        }
        switch(args.method){
            case'copy':
                returnPromise.resolve(this._mockCopy(args.model,args.args[0]));

            case'create':
                returnPromise.resolve(this._mockCreate(args.model,args.args[0]));

            case'fields_get':
                returnPromise.resolve(this._mockFieldsGet(args.model,args.args));

            case'search_panel_select_range':
                returnPromise.resolve(this._mockSearchPanelSelectRange(args.model,args.args,args.kwargs));

            case'search_panel_select_multi_range':
                returnPromise.resolve(this._mockSearchPanelSelectMultiRange(args.model,args.args,args.kwargs));

            case'load_views':
                returnPromise.resolve(this._mockLoadViews(args.model,args.kwargs));

            case'name_get':
                returnPromise.resolve(this._mockNameGet(args.model,args.args));

            case'name_create':
                returnPromise.resolve(this._mockNameCreate(args.model,args.args));

            case'name_search':
                returnPromise.resolve(this._mockNameSearch(args.model,args.args,args.kwargs));

            case'onchange':
                returnPromise.resolve(this._mockOnchange(args.model,args.args,args.kwargs));

            case'read':
                returnPromise.resolve(this._mockRead(args.model,args.args,args.kwargs));

            case'read_group':
                returnPromise.resolve(this._mockReadGroup(args.model,args.kwargs));

            case'web_read_group':
                returnPromise.resolve(this._mockWebReadGroup(args.model,args.kwargs));

            case'read_progress_bar':
                returnPromise.resolve(this._mockReadProgressBar(args.model,args.kwargs));

            case'search':
                returnPromise.resolve(this._mockSearch(args.model,args.args,args.kwargs));

            case'search_count':
                returnPromise.resolve(this._mockSearchCount(args.model,args.args));

            case'search_read':
                returnPromise.resolve(this._mockSearchRead(args.model,args.args,args.kwargs));

            case'unlink':
                returnPromise.resolve(this._mockUnlink(args.model,args.args));

            case'write':
                returnPromise.resolve(this._mockWrite(args.model,args.args));
        }
        varmodel=this.data[args.model];
        if(model&&typeofmodel[args.method]==='function'){
            returnPromise.resolve(this.data[args.model][args.method](args.args,args.kwargs));
        }

        thrownewError("Unimplementedroute:"+route);
    },
    /**
     *@private
     *@param{Object[]}recordstherecordstosort
     *@param{string}modelthemodelofrecords
     *@param{string}fieldNamethefieldtosorton
     *@param{string}[order="DESC"]"ASC"or"DESC"
     *@returns{Object}
     */
    _sortByField:function(records,model,fieldName,order){
        constfield=this.data[model].fields[fieldName];
        records.sort((r1,r2)=>{
            letv1=r1[fieldName];
            letv2=r2[fieldName];
            if(field.type==='many2one'){
                constcoRecords=this.data[field.relation].records;
                if(this.data[field.relation].fields.sequence){
                    //usesequencefieldofcomodeltosortrecords
                    v1=coRecords.find(r=>r.id===v1[0]).sequence;
                    v2=coRecords.find(r=>r.id===v2[0]).sequence;
                }else{
                    //sortbyid
                    v1=v1[0];
                    v2=v2[0];
                }
            }
            if(v1<v2){
                returnorder==='ASC'?-1:1;
            }
            if(v1>v2){
                returnorder==='ASC'?1:-1;
            }
            return0;
        });
        returnrecords;
    },
    /**
     *helperfunction:traverseatreeandapplythefunctionftoeachofits
     *nodes.
     *
     *Note:thisshouldbeabstractedsomewhereinweb.utils,orin
     *web.tree_utils
     *
     *@param{Object}treeobjectwitha'children'key,whichcontainsan
     *  arrayoftrees.
     *@param{function}f
     */
    _traverse:function(tree,f){
        varself=this;
        if(f(tree)){
            _.each(tree.childNodes,function(c){self._traverse(c,f);});
        }
    },
    /**
     *Writearecord.Themaindifficultyisthatwehavetoapplyx2many
     *commands
     *
     *@private
     *@param{string}model
     *@param{Object}values
     *@param{integer}id
     *@param{Object}[params={}]
     *@param{boolean}[params.ensureIntegrity=true]writingnon-existingid
     * inmany2onefieldwillthrowifthisparamistrue
     */
    _writeRecord:function(model,values,id,{ensureIntegrity=true}={}){
        varself=this;
        varrecord=_.findWhere(this.data[model].records,{id:id});
        for(varfield_changedinvalues){
            varfield=this.data[model].fields[field_changed];
            varvalue=values[field_changed];
            if(!field){
                throwError(`Mock:Can'twritevalue"${JSON.stringify(value)}"onfield"${field_changed}"onrecord"${model},${id}"(fieldisundefined)`);
            }
            if(_.contains(['one2many','many2many'],field.type)){
                varids=_.clone(record[field_changed])||[];

                //fallbacktocommand6whengivenasimplelistofids
                if(
                    Array.isArray(value)&&
                    value.reduce((hasOnlyInt,val)=>hasOnlyInt&&Number.isInteger(val),true)
                ){
                    value=[[6,0,value]];
                }
                //convertcommands
                for(constcommandofvalue||[]){
                    if(command[0]===0){//CREATE
                        constnewId=self._mockCreate(field.relation,command[2]);
                        ids.push(newId);
                    }elseif(command[0]===1){//UPDATE
                        self._mockWrite(field.relation,[[command[1]],command[2]]);
                    }elseif(command[0]===2){//DELETE
                        ids=_.without(ids,command[1]);
                    }elseif(command[0]===3){//FORGET
                        ids=_.without(ids,command[1]);
                    }elseif(command[0]===4){//LINK_TO
                        if(!_.contains(ids,command[1])){
                            ids.push(command[1]);
                        }
                    }elseif(command[0]===5){//DELETEALL
                        ids=[];
                    }elseif(command[0]===6){//REPLACEWITH
                        //copyarraytoavoidleakbyreference(eg.ofdefaultdata)
                        ids=[...command[2]];
                    }else{
                        throwError(`Command"${JSON.stringify(value)}"notsupportedbytheMockServeronfield"${field_changed}"onrecord"${model},${id}"`);
                    }
                }
                record[field_changed]=ids;
            }elseif(field.type==='many2one'){
                if(value){
                    varrelatedRecord=_.findWhere(this.data[field.relation].records,{
                        id:value
                    });
                    if(!relatedRecord&&ensureIntegrity){
                        throwError(`Wrongid"${JSON.stringify(value)}"foramany2oneonfield"${field_changed}"onrecord"${model},${id}"`);
                    }
                    record[field_changed]=value;
                }else{
                    record[field_changed]=false;
                }
            }else{
                record[field_changed]=value;
            }
        }
    },
});

returnMockServer;

});
