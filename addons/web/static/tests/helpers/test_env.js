flectra.define('web.test_env',asyncfunction(require){
    "usestrict";

    constBus=require('web.Bus');
    const{buildQuery}=require('web.rpc');
    constsession=require('web.session');

    letqweb;

    /**
     *Createsatestenvironmentwiththegivenenvironmentobject.
     *Anyaccesstoakeythathasnotbeenexplicitlydefinedinthegivenenvironmentobject
     *willresultinanerror.
     *
     *@param{Object}[env={}]
     *@param{Function}[providedRPC=null]
     *@returns{Proxy}
     */
    functionmakeTestEnvironment(env={},providedRPC=null){
        if(!qweb){
            //avoidparsingtemplatesateverytestbecauseittakesalotof
            //timeandtheyneverchange
            qweb=newowl.QWeb({templates:session.owlTemplates});
        }
        constdatabase={
            parameters:{
                code:"en_US",
                date_format:'%m/%d/%Y',
                decimal_point:".",
                direction:'ltr',
                grouping:[],
                thousands_sep:",",
                time_format:'%H:%M:%S',
            },
        };
        constdefaultEnv={
            _t:env._t||Object.assign((s=>s),{database}),
            browser:Object.assign({
                setTimeout:window.setTimeout.bind(window),
                clearTimeout:window.clearTimeout.bind(window),
                setInterval:window.setInterval.bind(window),
                clearInterval:window.clearInterval.bind(window),
                requestAnimationFrame:window.requestAnimationFrame.bind(window),
                Date:window.Date,
                fetch:(window.fetch||(()=>{})).bind(window),
            },env.browser),
            bus:env.bus||newBus(),
            device:Object.assign({isMobile:false},env.device),
            isDebug:env.isDebug||(()=>false),
            qweb,
            services:Object.assign({
                ajax:{
                    rpc(){
                      returnenv.session.rpc(...arguments);//CompatibilityLegacyWidgets
                    }
                },
                getCookie(){},
                httpRequest(/*route,params={},readMethod='json'*/){
                    returnPromise.resolve('');
                },
                rpc(params,options){
                    constquery=buildQuery(params);
                    returnenv.session.rpc(query.route,query.params,options);
                },
                notification:{notify(){}},
            },env.services),
            session:Object.assign({
                rpc(route,params,options){
                    if(providedRPC){
                        returnprovidedRPC(route,params,options);
                    }
                    thrownewError(`NomethodtoperformRPC`);
                },
                url:session.url,
            },env.session),
        };
        returnObject.assign(env,defaultEnv);
    }

    /**
     *Beforeeachtest,wewantowl.Component.envtobeafreshtestenvironment.
     */
    QUnit.on('FlectraBeforeTestHook',function(){
        owl.Component.env=makeTestEnvironment();
    });

    returnmakeTestEnvironment;
});
