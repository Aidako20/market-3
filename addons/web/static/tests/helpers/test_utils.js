flectra.define('web.test_utils',asyncfunction(require){
    "usestrict";

    /**
     *TestUtils
     *
     *Inthismodule,wedefinevariousutilityfunctionstohelpsimulateamock
     *environmentascloseaspossibleasarealenvironment. Themainfunctionis
     *certainlycreateView,whichtakesabunchofparametersandgiveyoubackan
     *instanceofaview,appendedinthedom,readytobetested.
     */

    constajax=require('web.ajax');
    constcore=require('web.core');
    constrelationalFields=require('web.relational_fields');
    constsession=require('web.session');
    consttestUtilsCreate=require('web.test_utils_create');
    consttestUtilsControlPanel=require('web.test_utils_control_panel');
    consttestUtilsDom=require('web.test_utils_dom');
    consttestUtilsFields=require('web.test_utils_fields');
    consttestUtilsFile=require('web.test_utils_file');
    consttestUtilsForm=require('web.test_utils_form');
    consttestUtilsGraph=require('web.test_utils_graph');
    consttestUtilsKanban=require('web.test_utils_kanban');
    consttestUtilsMock=require('web.test_utils_mock');
    consttestUtilsModal=require('web.test_utils_modal');
    consttestUtilsPivot=require('web.test_utils_pivot');
    consttools=require('web.tools');

    QUnit.begin(()=>{
        //altattributecausesissueswithscrolltests.Indeed,altis
        //displayedbetweenthetimewescrolltothebottomofathread
        //andthetimeweassertforthescrollposition.Thesrc
        //attributeisremovedaswelltomakesureimageswon't
        //triggeraGETrequestontheserver.
        functionreplaceAttr(attrName,prefix,element){
            constattrKey=`${prefix}${attrName}`;
            constattrValue=element.getAttribute(attrKey);
            element.removeAttribute(attrKey);
            element.setAttribute(`${prefix}data-${attrName}`,attrValue);
        }
        constattrsToRemove=['alt','src'];
        constattrPrefixes=['','t-att-','t-attf-'];
        consttemplates=newDOMParser().parseFromString(session.owlTemplates,"text/xml");
        for(constattrNameofattrsToRemove){
            for(constprefixofattrPrefixes){
                for(constelementoftemplates.querySelectorAll(`*[${prefix}${attrName}]`)){
                    replaceAttr(attrName,prefix,element);
                }
            }
        }
        session.owlTemplates=templates.documentElement.outerHTML;
    });

    functiondeprecated(fn,type){
        constmsg=`Helper'testUtils.${fn.name}'isdeprecated.`+
            `Pleaseuse'testUtils.${type}.${fn.name}'instead.`;
        returntools.deprecated(fn,msg);
    }

    /**
     *Helperfunction,makeapromisewithapublicresolvefunction.Notethat
     *thisisnotstandardandshouldnotbeusedoutsideoftests...
     *
     *@returns{Promise+resolveandrejectfunction}
     */
    functionmakeTestPromise(){
        letresolve;
        letreject;
        constpromise=newPromise(function(_resolve,_reject){
            resolve=_resolve;
            reject=_reject;
        });
        promise.resolve=function(){
            resolve.apply(null,arguments);
            returnpromise;
        };
        promise.reject=function(){
            reject.apply(null,arguments);
            returnpromise;
        };
        returnpromise;
    }

    /**
     *Makeapromisewithpublicresolveandrejectfunctions(see
     *@makeTestPromise).Performanassert.stepwhenthepromiseis
     *resolved/rejected.
     *
     *@param{Object}assertinstanceobjectwiththeassertionmethods
     *@param{function}assert.step
     *@param{string}strmessagetopasstoassert.step
     *@returns{Promise+resolveandrejectfunction}
     */
    functionmakeTestPromiseWithAssert(assert,str){
        constprom=makeTestPromise();
        prom.then(()=>assert.step('ok'+str)).catch(function(){});
        prom.catch(()=>assert.step('ko'+str));
        returnprom;
    }

    /**
     *Createanewpromisethatcanbewaitedbythecallerinordertoexecute
     *codeafterthenextmicrotasktickandbeforethenextjobqueuetick.
     *
     *@return{Promise}analreadyfulfilledpromise
     */
    asyncfunctionnextMicrotaskTick(){
        returnPromise.resolve();
    }

    /**
     *Returnsapromisethatwillberesolvedafterthetickafterthe
     *nextAnimationFrame
     *
     *ThisisusefulltoguaranteethatOWLhashadthetimetorender
     *
     *@returns{Promise}
     */
    asyncfunctionnextTick(){
        returntestUtilsDom.returnAfterNextAnimationFrame();
    }

    /**
     *CallsnextTick.Whilewehaveahybridimplemetation(Owl+legacy),wemay
     *havesituationswherewaitingforasinglenextTickisn'tenough.Forinstance,
     *havingalayerofOwlcomponents,abovealayeroflegacywidgets,abovea
     *layerofOwlcomponentsrequirestwonextTickforthewholehierarchytobe
     *renderedintotheDOM.Inthosesituation,oneshouldusethishelper,which
     *willberemoved(alongsideallitscalls)inthefuture.
     *
     *@returns{Promise}
     */
    asyncfunctionowlCompatibilityNextTick(){
        returnnextTick();
    }

    //Loadingstaticfilescannotbeproperlysimulatedwhentheirrealcontentis
    //reallyneeded.ThisisthecaseforstaticXMLfilessoweloadthemhere,
    //beforestartingthequnittestsuite.
    //(session.jsisinchargeofloadingthestaticxmlbundleandwealsohave
    //toloadxmlfilesthatarenormallylazyloadedbyspecificwidgets).
    awaitPromise.all([
        session.is_bound,
        ajax.loadXML('/web/static/src/xml/crash_manager.xml',core.qweb),
        ajax.loadXML('/web/static/src/xml/debug.xml',core.qweb),
        ajax.loadXML('/web/static/src/xml/dialog.xml',core.qweb),
        ajax.loadXML('/web/static/src/xml/translation_dialog.xml',core.qweb),
    ]);
    setTimeout(function(){
        //jqueryautocompleterefinesthesearchinasetTimeout()parameterized
        //withadelay,soweforcethisdelayto0s.t.thedropdownisfiltered
        //directlyonthenexttick
        relationalFields.FieldMany2One.prototype.AUTOCOMPLETE_DELAY=0;

        //thisisdonewiththehopethattestsare
        //onlystartedalltogether...
        QUnit.start();
    },0);
    return{
        mock:{
            addMockEnvironment:testUtilsMock.addMockEnvironment,
            addMockEnvironmentOwl:testUtilsMock.addMockEnvironmentOwl,
            intercept:testUtilsMock.intercept,
            patch:testUtilsMock.patch,
            patchDate:testUtilsMock.patchDate,
            unpatch:testUtilsMock.unpatch,
            fieldsViewGet:testUtilsMock.fieldsViewGet,
            patchSetTimeout:testUtilsMock.patchSetTimeout,
        },
        controlPanel:{
            //Genericinteractions
            toggleMenu:testUtilsControlPanel.toggleMenu,
            toggleMenuItem:testUtilsControlPanel.toggleMenuItem,
            toggleMenuItemOption:testUtilsControlPanel.toggleMenuItemOption,
            isItemSelected:testUtilsControlPanel.isItemSelected,
            isOptionSelected:testUtilsControlPanel.isOptionSelected,
            getMenuItemTexts:testUtilsControlPanel.getMenuItemTexts,
            //Buttoninteractions
            getButtons:testUtilsControlPanel.getButtons,
            //FilterMenuinteractions
            toggleFilterMenu:testUtilsControlPanel.toggleFilterMenu,
            toggleAddCustomFilter:testUtilsControlPanel.toggleAddCustomFilter,
            applyFilter:testUtilsControlPanel.applyFilter,
            //GroupByMenuinteractions
            toggleGroupByMenu:testUtilsControlPanel.toggleGroupByMenu,
            toggleAddCustomGroup:testUtilsControlPanel.toggleAddCustomGroup,
            selectGroup:testUtilsControlPanel.selectGroup,
            applyGroup:testUtilsControlPanel.applyGroup,
            //FavoriteMenuinteractions
            toggleFavoriteMenu:testUtilsControlPanel.toggleFavoriteMenu,
            toggleSaveFavorite:testUtilsControlPanel.toggleSaveFavorite,
            editFavoriteName:testUtilsControlPanel.editFavoriteName,
            saveFavorite:testUtilsControlPanel.saveFavorite,
            deleteFavorite:testUtilsControlPanel.deleteFavorite,
            //ComparisonMenuinteractions
            toggleComparisonMenu:testUtilsControlPanel.toggleComparisonMenu,
            //SearchBarinteractions
            getFacetTexts:testUtilsControlPanel.getFacetTexts,
            removeFacet:testUtilsControlPanel.removeFacet,
            editSearch:testUtilsControlPanel.editSearch,
            validateSearch:testUtilsControlPanel.validateSearch,
            //Actionmenusinteractions
            toggleActionMenu:testUtilsControlPanel.toggleActionMenu,
            //Pagerinteractions
            pagerPrevious:testUtilsControlPanel.pagerPrevious,
            pagerNext:testUtilsControlPanel.pagerNext,
            getPagerValue:testUtilsControlPanel.getPagerValue,
            getPagerSize:testUtilsControlPanel.getPagerSize,
            setPagerValue:testUtilsControlPanel.setPagerValue,
            //Viewswitcher
            switchView:testUtilsControlPanel.switchView,
        },
        dom:{
            triggerKeypressEvent:testUtilsDom.triggerKeypressEvent,
            triggerMouseEvent:testUtilsDom.triggerMouseEvent,
            triggerPositionalMouseEvent:testUtilsDom.triggerPositionalMouseEvent,
            dragAndDrop:testUtilsDom.dragAndDrop,
            find:testUtilsDom.findItem,
            getNode:testUtilsDom.getNode,
            openDatepicker:testUtilsDom.openDatepicker,
            click:testUtilsDom.click,
            clickFirst:testUtilsDom.clickFirst,
            clickLast:testUtilsDom.clickLast,
            triggerEvents:testUtilsDom.triggerEvents,
            triggerEvent:testUtilsDom.triggerEvent,
        },
        form:{
            clickEdit:testUtilsForm.clickEdit,
            clickSave:testUtilsForm.clickSave,
            clickCreate:testUtilsForm.clickCreate,
            clickDiscard:testUtilsForm.clickDiscard,
            reload:testUtilsForm.reload,
        },
        graph:{
            reload:testUtilsGraph.reload,
        },
        kanban:{
            reload:testUtilsKanban.reload,
            clickCreate:testUtilsKanban.clickCreate,
            quickCreate:testUtilsKanban.quickCreate,
            toggleGroupSettings:testUtilsKanban.toggleGroupSettings,
            toggleRecordDropdown:testUtilsKanban.toggleRecordDropdown,
        },
        modal:{
            clickButton:testUtilsModal.clickButton,
        },
        pivot:{
            clickMeasure:testUtilsPivot.clickMeasure,
            toggleMeasuresDropdown:testUtilsPivot.toggleMeasuresDropdown,
            reload:testUtilsPivot.reload,
        },
        fields:{
            many2one:{
                createAndEdit:testUtilsFields.clickM2OCreateAndEdit,
                clickOpenDropdown:testUtilsFields.clickOpenM2ODropdown,
                clickHighlightedItem:testUtilsFields.clickM2OHighlightedItem,
                clickItem:testUtilsFields.clickM2OItem,
                searchAndClickItem:testUtilsFields.searchAndClickM2OItem,
            },
            editInput:testUtilsFields.editInput,
            editSelect:testUtilsFields.editSelect,
            editAndTrigger:testUtilsFields.editAndTrigger,
            triggerKey:testUtilsFields.triggerKey,
            triggerKeydown:testUtilsFields.triggerKeydown,
            triggerKeyup:testUtilsFields.triggerKeyup,
        },
        file:{
            createFile:testUtilsFile.createFile,
            dragoverFile:testUtilsFile.dragoverFile,
            dropFile:testUtilsFile.dropFile,
            dropFiles:testUtilsFile.dropFiles,
            inputFiles:testUtilsFile.inputFiles,
        },

        createActionManager:testUtilsCreate.createActionManager,
        createComponent:testUtilsCreate.createComponent,
        createControlPanel:testUtilsCreate.createControlPanel,
        createDebugManager:testUtilsCreate.createDebugManager,
        createAsyncView:testUtilsCreate.createView,
        createCalendarView:testUtilsCreate.createCalendarView,
        createView:testUtilsCreate.createView,
        createModel:testUtilsCreate.createModel,
        createParent:testUtilsCreate.createParent,
        makeTestPromise:makeTestPromise,
        makeTestPromiseWithAssert:makeTestPromiseWithAssert,
        nextMicrotaskTick:nextMicrotaskTick,
        nextTick:nextTick,
        owlCompatibilityNextTick:owlCompatibilityNextTick,
        prepareTarget:testUtilsCreate.prepareTarget,
        returnAfterNextAnimationFrame:testUtilsDom.returnAfterNextAnimationFrame,

        //backward-compatibility
        addMockEnvironment:deprecated(testUtilsMock.addMockEnvironment,'mock'),
        dragAndDrop:deprecated(testUtilsDom.dragAndDrop,'dom'),
        fieldsViewGet:deprecated(testUtilsMock.fieldsViewGet,'mock'),
        intercept:deprecated(testUtilsMock.intercept,'mock'),
        openDatepicker:deprecated(testUtilsDom.openDatepicker,'dom'),
        patch:deprecated(testUtilsMock.patch,'mock'),
        patchDate:deprecated(testUtilsMock.patchDate,'mock'),
        triggerKeypressEvent:deprecated(testUtilsDom.triggerKeypressEvent,'dom'),
        triggerMouseEvent:deprecated(testUtilsDom.triggerMouseEvent,'dom'),
        triggerPositionalMouseEvent:deprecated(testUtilsDom.triggerPositionalMouseEvent,'dom'),
        unpatch:deprecated(testUtilsMock.unpatch,'mock'),
    };
});
