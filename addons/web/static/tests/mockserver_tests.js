flectra.define('web.mockserver_tests',function(require){
"usestrict";

constMockServer=require("web.MockServer");

QUnit.module("MockServer",{
    beforeEach(){
        this.data={
            "res.partner":{
                fields:{
                    name:{
                        string:"Name",
                        type:"string",
                    },
                    email:{
                        string:"Email",
                        type:"string",
                    },
                    active:{
                        string:"Active",
                        type:"bool",
                        default:true,
                    },
                },
                records:[
                    {id:1,name:"Jean-Michel",email:"jean.michel@example.com"},
                    {id:2,name:"Raoul",email:"raoul@example.com",active:false},
                ],
            },
        };
    },
},function(){
    QUnit.test("performRpc:search_readwithanemptyarrayoffields",asyncfunction(assert){
        assert.expect(1);
        constserver=newMockServer(this.data,{});
        constresult=awaitserver.performRpc("",{
            model:"res.partner",
            method:"search_read",
            args:[],
            kwargs:{
                fields:[],
            },
        });
        constexpectedFields=["id","email","name","display_name"];
        assert.strictEqual(_.difference(expectedFields,Object.keys(result[0])).length,0,
            "shouldcontainsallthefields");
    });

    QUnit.test("performRpc:search_readwithoutfields",asyncfunction(assert){
        assert.expect(1);
        constserver=newMockServer(this.data,{});
        constresult=awaitserver.performRpc("",{
            model:"res.partner",
            method:"search_read",
            args:[],
            kwargs:{},
        });
        constexpectedFields=["id","email","name","display_name"];
        assert.strictEqual(_.difference(expectedFields,Object.keys(result[0])).length,0,
            "shouldcontainsallthefields");
    });

    QUnit.test("performRpc:name_getwithnoargs",asyncfunction(assert){
        assert.expect(2);
        constserver=newMockServer(this.data,{});
        try{
            awaitserver.performRpc("",{
                model:"res.partner",
                method:"name_get",
                args:[],
                kwargs:{},
            });
        }catch(error){
            assert.step("name_getfailed")
        }
        assert.verifySteps(["name_getfailed"])
    });

    QUnit.test("performRpc:name_getwithundefinedarg",asyncfunction(assert){
        assert.expect(1);
        constserver=newMockServer(this.data,{});
        constresult=awaitserver.performRpc("",{
            model:"res.partner",
            method:"name_get",
            args:[undefined],
            kwargs:{},
        });
        assert.deepEqual(result,[])
    });

    QUnit.test("performRpc:name_getwithasingleid",asyncfunction(assert){
        assert.expect(1);
        constserver=newMockServer(this.data,{});
        constresult=awaitserver.performRpc("",{
            model:"res.partner",
            method:"name_get",
            args:[1],
            kwargs:{},
        });
        assert.deepEqual(result,[[1,"Jean-Michel"]]);
    });

    QUnit.test("performRpc:name_getwitharrayofids",asyncfunction(assert){
        assert.expect(1);
        constserver=newMockServer(this.data,{});
        constresult=awaitserver.performRpc("",{
            model:"res.partner",
            method:"name_get",
            args:[[1]],
            kwargs:{},
        });
        assert.deepEqual(result,[[1,"Jean-Michel"]]);
    });

    QUnit.test("performRpc:name_getwithinvalidid",asyncfunction(assert){
        assert.expect(2);
        constserver=newMockServer(this.data,{});
        try{
            awaitserver.performRpc("",{
                model:"res.partner",
                method:"name_get",
                args:[11111],
                kwargs:{},
            });
        }catch(error){
            assert.step("name_getfailed")
        }
        assert.verifySteps(["name_getfailed"])
    });

    QUnit.test("performRpc:name_getwithidandundefinedid",asyncfunction(assert){
        assert.expect(1);
        constserver=newMockServer(this.data,{});
        constresult=awaitserver.performRpc("",{
            model:"res.partner",
            method:"name_get",
            args:[[undefined,1]],
            kwargs:{},
        });
        assert.deepEqual(result,[[null,"False"],[1,"Jean-Michel"]]);
    });

    QUnit.test("performRpc:searchwithactive_test=false",asyncfunction(assert){
        assert.expect(1);
        constserver=newMockServer(this.data,{});
        constresult=awaitserver.performRpc("",{
            model:"res.partner",
            method:"search",
            args:[[]],
            kwargs:{
                context:{active_test:false},
            },
        });
        assert.deepEqual(result,[1,2]);
    });

    QUnit.test("performRpc:searchwithactive_test=true",asyncfunction(assert){
        assert.expect(1);
        constserver=newMockServer(this.data,{});
        constresult=awaitserver.performRpc("",{
            model:"res.partner",
            method:"search",
            args:[[]],
            kwargs:{
                context:{active_test:true},
            },
        });
        assert.deepEqual(result,[1]);
    });

    QUnit.test("performRpc:search_readwithactive_test=false",asyncfunction(assert){
        assert.expect(1);
        constserver=newMockServer(this.data,{});
        constresult=awaitserver.performRpc("",{
            model:"res.partner",
            method:"search_read",
            args:[[]],
            kwargs:{
                fields:["name"],
                context:{active_test:false},
            },
        });
        assert.deepEqual(result,[{id:1,name:"Jean-Michel"},{id:2,name:"Raoul"}]);
    });

    QUnit.test("performRpc:search_readwithactive_test=true",asyncfunction(assert){
        assert.expect(1);
        constserver=newMockServer(this.data,{});
        constresult=awaitserver.performRpc("",{
            model:"res.partner",
            method:"search_read",
            args:[[]],
            kwargs:{
                fields:["name"],
                context:{active_test:true},
            },
        });
        assert.deepEqual(result,[{id:1,name:"Jean-Michel"}]);
    });
});
});
