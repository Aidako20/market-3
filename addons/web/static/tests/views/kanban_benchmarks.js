flectra.define('web.kanban_benchmarks',function(require){
    "usestrict";

    constKanbanView=require('web.KanbanView');
    const{createView}=require('web.test_utils');

    QUnit.module('KanbanView',{
        beforeEach:function(){
            this.data={
                foo:{
                    fields:{
                        foo:{string:"Foo",type:"char"},
                        bar:{string:"Bar",type:"boolean"},
                        int_field:{string:"int_field",type:"integer",sortable:true},
                        qux:{string:"myfloat",type:"float"},
                    },
                    records:[
                        {id:1,bar:true,foo:"yop",int_field:10,qux:0.4},
                        {id:2,bar:true,foo:"blip",int_field:9,qux:13},
                    ]
                },
            };
            this.arch=null;
            this.run=function(assert){
                constdata=this.data;
                constarch=this.arch;
                returnnewPromise(resolve=>{
                    newBenchmark.Suite({})
                        .add('kanban',{
                            defer:true,
                            fn:async(deferred)=>{
                                constkanban=awaitcreateView({
                                    View:KanbanView,
                                    model:'foo',
                                    data,
                                    arch,
                                });
                                kanban.destroy();
                                deferred.resolve();
                            },
                        })
                        .on('cycle',event=>{
                            assert.ok(true,String(event.target));
                        })
                        .on('complete',resolve)
                        .run({async:true});
                });
            };
        }
    },function(){
        QUnit.test('simplekanbanviewwith2records',function(assert){
            assert.expect(1);

            this.arch=`
                <kanban>
                    <templates>
                        <tt-name="kanban-box">
                            <div>
                                <tt-esc="record.foo.value"/>
                                <fieldname="foo"/>
                            </div>
                        </t>
                    </templates>
                </kanban>`;
            returnthis.run(assert);
        });

        QUnit.test('simplekanbanviewwith200records',function(assert){
            assert.expect(1);

            for(leti=2;i<200;i++){
                this.data.foo.records.push({
                    id:i,
                    foo:`automateddata${i}`,
                });
            }

            this.arch=`
                <kanban>
                    <templates>
                        <tt-name="kanban-box">
                            <div>
                                <tt-esc="record.foo.value"/>
                                <fieldname="foo"/>
                            </div>
                        </t>
                    </templates>
                </kanban>`;
            returnthis.run(assert);
        });
    });
});
