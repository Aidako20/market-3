flectra.define('web.form_benchmarks',function(require){
    "usestrict";

    constFormView=require('web.FormView');
    consttestUtils=require('web.test_utils');

    const{createView}=testUtils;

    QUnit.module('FormView',{
        beforeEach:function(){
            this.data={
                foo:{
                    fields:{
                        foo:{string:"Foo",type:"char"},
                        many2many:{string:"bar",type:"many2many",relation:'bar'},
                    },
                    records:[
                        {id:1,foo:"bar",many2many:[]},
                    ],
                    onchanges:{}
                },
                bar:{
                    fields:{
                        char:{string:"char",type:"char"},
                        many2many:{string:"pokemon",type:"many2many",relation:'pokemon'},
                    },
                    records:[],
                    onchanges:{}
                },
                pokemon:{
                    fields:{
                        name:{string:"Name",type:"char"},
                    },
                    records:[],
                    onchanges:{}
                },
            };
            this.arch=null;
            this.run=function(assert,viewParams,cb){
                constdata=this.data;
                constarch=this.arch;
                returnnewPromise(resolve=>{
                    newBenchmark.Suite({})
                        .add('form',{
                            defer:true,
                            fn:async(deferred)=>{
                                constform=awaitcreateView(Object.assign({
                                    View:FormView,
                                    model:'foo',
                                    data,
                                    arch,
                                },viewParams));
                                if(cb){
                                    awaitcb(form);
                                }
                                form.destroy();
                                deferred.resolve();
                            },
                        })
                        .on('cycle',event=>{
                            assert.ok(true,String(event.target));
                        })
                        .on('complete',resolve)
                        .run({async:true});
                });
            };
        }
    },function(){
        QUnit.test('x2manywith250rows,2fields(withmany2many_tags,andmodifiers),onchanges,andedition',function(assert){
            assert.expect(1);

            this.data.foo.onchanges.many2many=function(obj){
                obj.many2many=[5].concat(obj.many2many);
            };
            for(leti=2;i<500;i++){
                this.data.bar.records.push({
                    id:i,
                    char:"automateddata",
                });
                this.data.foo.records[0].many2many.push(i);
            }
            this.arch=`
                <form>
                    <fieldname="many2many">
                        <treeeditable="top"limit="250">
                            <fieldname="char"/>
                            <fieldname="many2many"widget="many2many_tags"attrs="{'readonly':[('char','==','toto')]}"/>
                        </tree>
                    </field>
                </form>`;
            returnthis.run(assert,{res_id:1},asyncform=>{
                awaittestUtils.form.clickEdit(form);
                awaittestUtils.dom.click(form.$('.o_data_cell:first'));
                awaittestUtils.fields.editInput(form.$('input:first'),"tralala");
            });
        });

        QUnit.test('formviewwith100fields,halfofthembeinginvisible',function(assert){
            assert.expect(1);

            this.arch=`
                <form>
                    ${[...Array(100)].map((_,i)=>'<fieldname="foo"'+(i%2?'invisible="1"':'')+'/>').join('')}
                </form>`;
            returnthis.run(assert);
        });
    });
});
