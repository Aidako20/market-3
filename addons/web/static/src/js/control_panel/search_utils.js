flectra.define('web.searchUtils',function(require){
    "usestrict";

    const{_lt,_t}=require('web.core');
    constDomain=require('web.Domain');
    constpyUtils=require('web.py_utils');

    //-------------------------------------------------------------------------
    //Constants
    //-------------------------------------------------------------------------

    //Filtermenuparameters
    constFIELD_OPERATORS={
        binary:[
            {symbol:"!=",description:_lt("isset"),value:false},
            {symbol:"=",description:_lt("isnotset"),value:false},
        ],
        boolean:[
            {symbol:"=",description:_lt("istrue"),value:true},
            {symbol:"!=",description:_lt("isfalse"),value:true},
        ],
        char:[
            {symbol:"ilike",description:_lt("contains")},
            {symbol:"notilike",description:_lt("doesn'tcontain")},
            {symbol:"=",description:_lt("isequalto")},
            {symbol:"!=",description:_lt("isnotequalto")},
            {symbol:"!=",description:_lt("isset"),value:false},
            {symbol:"=",description:_lt("isnotset"),value:false},
        ],
        date:[
            {symbol:"=",description:_lt("isequalto")},
            {symbol:"!=",description:_lt("isnotequalto")},
            {symbol:">",description:_lt("isafter")},
            {symbol:"<",description:_lt("isbefore")},
            {symbol:">=",description:_lt("isafterorequalto")},
            {symbol:"<=",description:_lt("isbeforeorequalto")},
            {symbol:"between",description:_lt("isbetween")},
            {symbol:"!=",description:_lt("isset"),value:false},
            {symbol:"=",description:_lt("isnotset"),value:false},
        ],
        datetime:[
            {symbol:"between",description:_lt("isbetween")},
            {symbol:"=",description:_lt("isequalto")},
            {symbol:"!=",description:_lt("isnotequalto")},
            {symbol:">",description:_lt("isafter")},
            {symbol:"<",description:_lt("isbefore")},
            {symbol:">=",description:_lt("isafterorequalto")},
            {symbol:"<=",description:_lt("isbeforeorequalto")},
            {symbol:"!=",description:_lt("isset"),value:false},
            {symbol:"=",description:_lt("isnotset"),value:false},
        ],
        id:[
            {symbol:"=",description:_lt("is")},
            {symbol:"<=",description:_lt("lessthanorequalto")},
            {symbol:">",description:_lt("greaterthan")},
        ],
        number:[
            {symbol:"=",description:_lt("isequalto")},
            {symbol:"!=",description:_lt("isnotequalto")},
            {symbol:">",description:_lt("greaterthan")},
            {symbol:"<",description:_lt("lessthan")},
            {symbol:">=",description:_lt("greaterthanorequalto")},
            {symbol:"<=",description:_lt("lessthanorequalto")},
            {symbol:"!=",description:_lt("isset"),value:false},
            {symbol:"=",description:_lt("isnotset"),value:false},
        ],
        selection:[
            {symbol:"=",description:_lt("is")},
            {symbol:"!=",description:_lt("isnot")},
            {symbol:"!=",description:_lt("isset"),value:false},
            {symbol:"=",description:_lt("isnotset"),value:false},
        ],
    };
    constFIELD_TYPES={
        binary:'binary',
        boolean:'boolean',
        char:'char',
        date:'date',
        datetime:'datetime',
        float:'number',
        id:'id',
        integer:'number',
        html:'char',
        many2many:'char',
        many2one:'char',
        monetary:'number',
        one2many:'char',
        text:'char',
        selection:'selection',
    };
    constDEFAULT_PERIOD='this_month';
    constQUARTERS={
        1:{description:_lt("Q1"),coveredMonths:[0,1,2]},
        2:{description:_lt("Q2"),coveredMonths:[3,4,5]},
        3:{description:_lt("Q3"),coveredMonths:[6,7,8]},
        4:{description:_lt("Q4"),coveredMonths:[9,10,11]},
    };
    constMONTH_OPTIONS={
        this_month:{
            id:'this_month',groupNumber:1,format:'MMMM',
            addParam:{},granularity:'month',
        },
        last_month:{
            id:'last_month',groupNumber:1,format:'MMMM',
            addParam:{months:-1},granularity:'month',
        },
        antepenultimate_month:{
            id:'antepenultimate_month',groupNumber:1,format:'MMMM',
            addParam:{months:-2},granularity:'month',
        },
    };
    constQUARTER_OPTIONS={
        fourth_quarter:{
            id:'fourth_quarter',groupNumber:1,description:QUARTERS[4].description,
            setParam:{quarter:4},granularity:'quarter',
        },
        third_quarter:{
            id:'third_quarter',groupNumber:1,description:QUARTERS[3].description,
            setParam:{quarter:3},granularity:'quarter',
        },
        second_quarter:{
            id:'second_quarter',groupNumber:1,description:QUARTERS[2].description,
            setParam:{quarter:2},granularity:'quarter',
        },
        first_quarter:{
            id:'first_quarter',groupNumber:1,description:QUARTERS[1].description,
            setParam:{quarter:1},granularity:'quarter',
        },
    };
    constYEAR_OPTIONS={
        this_year:{
            id:'this_year',groupNumber:2,format:'YYYY',
            addParam:{},granularity:'year',
        },
        last_year:{
            id:'last_year',groupNumber:2,format:'YYYY',
            addParam:{years:-1},granularity:'year',
        },
        antepenultimate_year:{
            id:'antepenultimate_year',groupNumber:2,format:'YYYY',
            addParam:{years:-2},granularity:'year',
        },
    };
    constPERIOD_OPTIONS=Object.assign({},MONTH_OPTIONS,QUARTER_OPTIONS,YEAR_OPTIONS);

    //GroupBymenuparameters
    constGROUPABLE_TYPES=[
        'boolean',
        'char',
        'date',
        'datetime',
        'integer',
        'many2one',
        'selection',
    ];
    constDEFAULT_INTERVAL='month';
    constINTERVAL_OPTIONS={
        year:{description:_lt("Year"),id:'year',groupNumber:1},
        quarter:{description:_lt("Quarter"),id:'quarter',groupNumber:1},
        month:{description:_lt("Month"),id:'month',groupNumber:1},
        week:{description:_lt("Week"),id:'week',groupNumber:1},
        day:{description:_lt("Day"),id:'day',groupNumber:1}
    };

    //Comparisonmenuparameters
    constCOMPARISON_OPTIONS={
        previous_period:{
            description:_lt("PreviousPeriod"),id:'previous_period',
        },
        previous_year:{
            description:_lt("PreviousYear"),id:'previous_year',addParam:{years:-1},
        },
    };
    constPER_YEAR={
        year:1,
        quarter:4,
        month:12,
    };
    //Searchbar
    constFACET_ICONS={
        filter:'fafa-filter',
        groupBy:'fafa-bars',
        favorite:'fafa-star',
        comparison:'fafa-adjust',
    };

    //-------------------------------------------------------------------------
    //Functions
    //-------------------------------------------------------------------------

    /**
     *Constructsthestringrepresentationofadomainanditsdescription.The
     *domainisoftheform:
     *     ['|',...,'|',d_1,...,d_n]
     *whered_iisatimerangeoftheform
     *     ['&',[fieldName,>=,leftBound_i],[fieldName,<=,rightBound_i]]
     *whereleftBound_iandrightBound_iaredateordatetimecomputedaccordingly
     *tothegivenoptionsandreferencemoment.
     *(@seeconstructDateRange).
     *@param{moment}referenceMoment
     *@param{string}fieldName
     *@param{string}fieldType
     *@param{string[]}selectedOptionIds
     *@param{string}[comparisonOptionId]
     *@returns{{domain:string,description:string}}
     */
    functionconstructDateDomain(
        referenceMoment,
        fieldName,
        fieldType,
        selectedOptionIds,
        comparisonOptionId
    ){
        letaddParam;
        letselectedOptions;
        if(comparisonOptionId){
            [addParam,selectedOptions]=getComparisonParams(
                referenceMoment,
                selectedOptionIds,
                comparisonOptionId);
        }else{
            selectedOptions=getSelectedOptions(referenceMoment,selectedOptionIds);
        }

        constyearOptions=selectedOptions.year;
        constotherOptions=[
            ...(selectedOptions.quarter||[]),
            ...(selectedOptions.month||[])
        ];

        sortPeriodOptions(yearOptions);
        sortPeriodOptions(otherOptions);

        constranges=[];
        for(constyearOptionofyearOptions){
            constconstructRangeParams={
                referenceMoment,
                fieldName,
                fieldType,
                addParam,
            };
            if(otherOptions.length){
                for(constoptionofotherOptions){
                    constsetParam=Object.assign({},
                        yearOption.setParam,
                        option?option.setParam:{}
                    );
                    const{granularity}=option;
                    constrange=constructDateRange(Object.assign(
                        {granularity,setParam},
                        constructRangeParams
                    ));
                    ranges.push(range);
                }
            }else{
                const{granularity,setParam}=yearOption;
                constrange=constructDateRange(Object.assign(
                    {granularity,setParam},
                    constructRangeParams
                ));
                ranges.push(range);
            }
        }

        constdomain=pyUtils.assembleDomains(ranges.map(range=>range.domain),'OR');
        constdescription=ranges.map(range=>range.description).join("/");

        return{domain,description};
    }

    /**
     *Constructsthestringrepresentationofadomainanditsdescription.The
     *domainisatimerangeoftheform:
     *     ['&',[fieldName,>=,leftBound],[fieldName,<=,rightBound]]
     *whereleftBoundandrightBoundaresomedateordatetimedeterminedbysetParam,
     *addParam,granularityandthereferencemoment.
     *@param{Object}params
     *@param{moment}params.referenceMoment
     *@param{string}params.fieldName
     *@param{string}params.fieldType
     *@param{string}params.granularity
     *@param{Object}params.setParam
     *@param{Object}[params.addParam]
     *@returns{{domain:string,description:string}}
     */
    functionconstructDateRange({
        referenceMoment,
        fieldName,
        fieldType,
        granularity,
        setParam,
        addParam,
    }){
        constdate=referenceMoment.clone().set(setParam).add(addParam||{});

        //computedomain
        letleftBound=date.clone().locale('en').startOf(granularity);
        letrightBound=date.clone().locale('en').endOf(granularity);
        if(fieldType==='date'){
            leftBound=leftBound.format('YYYY-MM-DD');
            rightBound=rightBound.format('YYYY-MM-DD');
        }else{
            leftBound=leftBound.utc().format('YYYY-MM-DDHH:mm:ss');
            rightBound=rightBound.utc().format('YYYY-MM-DDHH:mm:ss');
        }
        constdomain=Domain.prototype.arrayToString([
            '&',
            [fieldName,'>=',leftBound],
            [fieldName,'<=',rightBound]
        ]);

        //computedescription
        constdescriptions=[date.format("YYYY")];
        constmethod=_t.database.parameters.direction==="rtl"?"push":"unshift";
        if(granularity==="month"){
            descriptions[method](date.format("MMMM"));
        }elseif(granularity==="quarter"){
            descriptions[method](QUARTERS[date.quarter()].description);
        }
        constdescription=descriptions.join("");

        return{domain,description,};
    }

    /**
     *ReturnsaversionoftheoptionsinCOMPARISON_OPTIONSwithtranslateddescriptions.
     *@seegetOptionsWithDescriptions
     */
    functiongetComparisonOptions(){
        returngetOptionsWithDescriptions(COMPARISON_OPTIONS);
    }

    /**
     *ReturnstheparamsaddParamandselectedOptionsnecessaryforthecomputation
     *ofacomparisondomain.
     *@param{moment}referenceMoment
     *@param{string{}}selectedOptionIds
     *@param{string}comparisonOptionId
     *@returns{Object[]}
     */
    functiongetComparisonParams(referenceMoment,selectedOptionIds,comparisonOptionId){
        constcomparisonOption=COMPARISON_OPTIONS[comparisonOptionId];
        constselectedOptions=getSelectedOptions(referenceMoment,selectedOptionIds);
        letaddParam=comparisonOption.addParam;
        if(addParam){
            return[addParam,selectedOptions];
        }
        addParam={};

        letglobalGranularity='year';
        if(selectedOptions.month){
            globalGranularity='month';
        }elseif(selectedOptions.quarter){
            globalGranularity='quarter';
        }
        constgranularityFactor=PER_YEAR[globalGranularity];
        constyears=selectedOptions.year.map(o=>o.setParam.year);
        constyearMin=Math.min(...years);
        constyearMax=Math.max(...years);

        letoptionMin=0;
        letoptionMax=0;
        if(selectedOptions.quarter){
            constquarters=selectedOptions.quarter.map(o=>o.setParam.quarter);
            if(globalGranularity==='month'){
                deleteselectedOptions.quarter;
                for(constquarterofquarters){
                    for(constmonthofQUARTERS[quarter].coveredMonths){
                        constmonthOption=selectedOptions.month.find(
                            o=>o.setParam.month===month
                        );
                        if(!monthOption){
                            selectedOptions.month.push({
                                setParam:{month,},granularity:'month',
                            });
                        }
                    }
                }
            }else{
                optionMin=Math.min(...quarters);
                optionMax=Math.max(...quarters);
            }
        }
        if(selectedOptions.month){
            constmonths=selectedOptions.month.map(o=>o.setParam.month);
            optionMin=Math.min(...months);
            optionMax=Math.max(...months);
        }

        addParam[globalGranularity]=-1+
            granularityFactor*(yearMin-yearMax)+
            optionMin-optionMax;

        return[addParam,selectedOptions];
    }

    /**
     *ReturnsaversionoftheoptionsinINTERVAL_OPTIONSwithtranslateddescriptions.
     *@seegetOptionsWithDescriptions
     */
    functiongetIntervalOptions(){
        returngetOptionsWithDescriptions(INTERVAL_OPTIONS);
    }

    /**
     *ReturnsaversionoftheoptionsinPERIOD_OPTIONSwithtranslateddescriptions
     *andakeydefautlYearIdusedinthecontrolpanelmodelwhentogglingaperiodoption.
     *@param{moment}referenceMoment
     *@returns{Object[]}
     */
    functiongetPeriodOptions(referenceMoment){
        constoptions=[];
        for(constoptionofObject.values(PERIOD_OPTIONS)){
            const{id,groupNumber,description,}=option;
            constres={id,groupNumber,};
            constdate=referenceMoment.clone().set(option.setParam).add(option.addParam);
            if(description){
                res.description=description.toString();
            }else{
                res.description=date.format(option.format.toString());
            }
            res.setParam=getSetParam(option,referenceMoment);
            res.defaultYear=date.year();
            options.push(res);
        }
        for(constoptionofoptions){
            constyearOption=options.find(
                o=>o.setParam&&o.setParam.year===option.defaultYear
            );
            option.defaultYearId=yearOption.id;
            deleteoption.defaultYear;
            deleteoption.setParam;
        }
        returnoptions;
    }

    /**
     *ReturnsaversionoftheoptionsinOPTIONSwithtranslateddescriptions(ifany).
     *@param{Object{}}OPTIONS
     *@returns{Object[]}
     */
    functiongetOptionsWithDescriptions(OPTIONS){
        constoptions=[];
        for(constoptionofObject.values(OPTIONS)){
            const{id,groupNumber,description,}=option;
            constres={id,};
            if(description){
                res.description=description.toString();
            }
            if(groupNumber){
                res.groupNumber=groupNumber;
            }
            options.push(res);
        }
        returnoptions;
    }

    /**
     *ReturnsaversionoftheperiodoptionswhoseidsareinselectedOptionIds
     *partitionedbygranularity.
     *@param{moment}referenceMoment
     *@param{string[]}selectedOptionIds
     *@param{Object}
     */
    functiongetSelectedOptions(referenceMoment,selectedOptionIds){
        constselectedOptions={year:[]};
        for(constoptionIdofselectedOptionIds){
            constoption=PERIOD_OPTIONS[optionId];
            constsetParam=getSetParam(option,referenceMoment);
            constgranularity=option.granularity;
            if(!selectedOptions[granularity]){
                selectedOptions[granularity]=[];
            }
            selectedOptions[granularity].push({granularity,setParam});
        }
        returnselectedOptions;
    }

    /**
     *ReturnsthesetParamobjectassociatedwiththegivenperiodOptionand
     *referenceMoment.
     *@param{Object}periodOption
     *@param{moment}referenceMoment
     *@returns{Object}
     */
    functiongetSetParam(periodOption,referenceMoment){
        if(periodOption.setParam){
            returnperiodOption.setParam;
        }
        constdate=referenceMoment.clone().add(periodOption.addParam);
        constsetParam={};
        setParam[periodOption.granularity]=date[periodOption.granularity]();
        returnsetParam;
    }

    /**
     *@param{string}intervalOptionId
     *@returns{number}index
     */
    functionrankInterval(intervalOptionId){
        returnObject.keys(INTERVAL_OPTIONS).indexOf(intervalOptionId);
    }

    /**
     *Sortsinplaceanarrayof'period'options.
     *@param{Object[]}optionssupposedtobeoftheform:
     *                                     {granularity,setParam,}
     */
    functionsortPeriodOptions(options){
        options.sort((o1,o2)=>{
            constgranularity1=o1.granularity;
            constgranularity2=o2.granularity;
            if(granularity1===granularity2){
                returno1.setParam[granularity1]-o2.setParam[granularity1];
            }
            returngranularity1<granularity2?-1:1;
        });
    }

    /**
     *Checksifayearidisamongthegivenarrayofperiodoptionids.
     *@param{string[]}selectedOptionIds
     *@returns{boolean}
     */
    functionyearSelected(selectedOptionIds){
        returnselectedOptionIds.some(optionId=>!!YEAR_OPTIONS[optionId]);
    }

    return{
        COMPARISON_OPTIONS,
        DEFAULT_INTERVAL,
        DEFAULT_PERIOD,
        FACET_ICONS,
        FIELD_OPERATORS,
        FIELD_TYPES,
        GROUPABLE_TYPES,
        INTERVAL_OPTIONS,
        PERIOD_OPTIONS,

        constructDateDomain,
        getComparisonOptions,
        getIntervalOptions,
        getPeriodOptions,
        rankInterval,
        yearSelected,
    };
});
