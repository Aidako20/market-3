flectra.define('web.jquery.extensions',function(){
'usestrict';

/**
 *Thejquerylibraryextensionsandfixesshouldbedoneheretoavoidpatching
 *inplace.
 */

//jQueryselectorsextensions
$.extend($.expr[':'],{
    containsLike:function(element,index,matches){
        returnelement.innerHTML.toUpperCase().indexOf(matches[3].toUpperCase())>=0;
    },
    containsTextLike:function(element,index,matches){
        returnelement.innerText.toUpperCase().indexOf(matches[3].toUpperCase())>=0;
    },
    containsExact:function(element,index,matches){
        return$.trim(element.innerHTML)===matches[3];
    },
    containsExactText:function(element,index,matches){
        returnelement.innerText.trim()===matches[3].trim();
    },
    /**
     *Noteallescapedcharactersneedtobedoubleescapedinsideofthe
     *expression,so"\("needstobe"\\("
     */
    containsRegex:function(element,index,matches){
        varregreg= /^\/((?:\\\/|[^\/])+)\/([mig]{0,3})$/,
        reg=regreg.exec(matches[3]);
        returnreg?newRegExp(reg[1],reg[2]).test($.trim(element.innerHTML)):false;
    },
    propChecked:function(element,index,matches){
        return$(element).prop("checked")===true;
    },
    propSelected:function(element,index,matches){
        return$(element).prop("selected")===true;
    },
    propValue:function(element,index,matches){
        return$(element).prop("value")===matches[3];
    },
    propValueContains:function(element,index,matches){
        return$(element).prop("value")&&$(element).prop("value").indexOf(matches[3])!==-1;
    },
    hasData:function(element){
        return!!_.toArray(element.dataset).length;
    },
    data:function(element,index,matches){
        return$(element).data(matches[3]);
    },
    hasVisibility:function(element,index,matches){
        var$element=$(element);
        if($(element).css('visibility')==='hidden'){
            returnfalse;
        }
        var$parent=$element.parent();
        if(!$parent.length||$element.is('html')){
            returntrue;
        }
        return$parent.is(':hasVisibility');
    },
    hasOpacity:function(element,index,matches){
        var$element=$(element);
        if(parseFloat($(element).css('opacity'))<=0.01){
            returnfalse;
        }
        var$parent=$element.parent();
        if(!$parent.length||$element.is('html')){
            returntrue;
        }
        return$parent.is(':hasOpacity');
    },
});

//jQueryfunctionsextensions
$.fn.extend({
    /**
     *ReturnsalltheattributesofaDOMelement(firstoneinthejQuery
     *set).
     *
     *@returns{Object}attributename->attributevalue
     */
    getAttributes:function(){
        varo={};
        if(this.length){
            varattrs=this[0].attributes;
            for(vari=0,l=attrs.length;i<l;i++){
                varattr=attrs.item(i);
                o[attr.name]=attr.value;
            }
        }
        returno;
    },
    /**
     *MakesDOMelementsbouncethewayFlectradecidedit.
     *
     *@param{string}[extraClass]
     */
    flectraBounce:function(extraClass){
        for(constelofthis){
            el.classList.add('o_catch_attention',extraClass);
            setTimeout(()=>el.classList.remove('o_catch_attention',extraClass),400);
        }
        returnthis;
    },
    /**
     *Allowstobindeventstoahandlerjustasthestandard`$.on`function
     *butbindsthehandlersothatitisexecutedbeforeanyalready-attached
     *handlerforthesameevents.
     *
     *@seejQuery.on
     */
    prependEvent:function(events,selector,data,handler){
        this.on.apply(this,arguments);

        events=events.split('');
        returnthis.each(function(){
            varel=this;
            _.each(events,function(evNameNamespaced){
                varevName=evNameNamespaced.split('.')[0];
                varhandler=$._data(el,'events')[evName].pop();
                $._data(el,'events')[evName].unshift(handler);
            });
        });
    },
    /**
     *@todoShouldreallybeconvertedtonojQueryandprobablyevenremoved
     *fromjQueryutilitiesinmaster
     *@return{jQuery}
     */
    closestScrollable(){
        constdocument=this.length?this[0].ownerDocument:window.document;

        let$el=this;
        while($el[0]!==document.scrollingElement){
            if(!$el.length||$el[0]instanceofDocument){
                //Ensurethat$().closestScrollable()->$()andhandlethe
                //caseofelementsnotattachedtotheDOM.
                //Also,.parent()usedtoloopthroughancestorscan
                //theoreticallyreachthedocumentifnothinguptotheHTML
                //includedisnotscrollable.
                return$();
            }
            if($el.isScrollable()){
                return$el;
            }
            $el=$el.parent();
        }
        return$el;
    },
    /**
     *Adaptthegivencsspropertybyaddingthesizeofascrollbarifany.
     *Limitation:onlyworksifthegivencsspropertyisnotalreadyusedas
     *inlinestyleforanotherreason.
     *
     *@param{boolean}[add=true]
     *@param{boolean}[isScrollElement=true]
     *@param{string}[cssProperty='padding-right']
     */
    compensateScrollbar(add=true,isScrollElement=true,cssProperty='padding-right'){
        for(constelofthis){
            //Compensatescrollbar
            constscrollableEl=isScrollElement?el:$(el).parent().closestScrollable()[0];
            constisRTL=scrollableEl.matches(".o_rtl");
            if(isRTL){
                cssProperty=cssProperty.replace("right","left");
            }
            el.style.removeProperty(cssProperty);
            if(!add){
                return;
            }
            conststyle=window.getComputedStyle(el);
            constborderLeftWidth=parseInt(style.borderLeftWidth.replace('px',''));
            constborderRightWidth=parseInt(style.borderRightWidth.replace('px',''));
            constbordersWidth=borderLeftWidth+borderRightWidth;
            constnewValue=parseInt(style[cssProperty])+scrollableEl.offsetWidth-scrollableEl.clientWidth-bordersWidth;
            el.style.setProperty(cssProperty,`${newValue}px`,'important');
        }
    },
    /**
     *@returns{jQuery}
     */
    getScrollingElement(){
        const$baseScrollingElement=$(document.scrollingElement);
        if($baseScrollingElement.isScrollable()
                &&$baseScrollingElement.hasScrollableContent()){
            return$baseScrollingElement;
        }
        constbodyHeight=$(document.body).height();
        for(constelofdocument.body.children){
            //Searchforabodychildwhichisatleastastallasthebody
            //andwhichhastheabilitytoscrollifenoughcontentinit.If
            //found,supposethisisthetopscrollingelement.
            if(bodyHeight-el.scrollHeight>1.5){
                continue;
            }
            const$el=$(el);
            if($el.isScrollable()){
                return$el;
            }
        }
        return$baseScrollingElement;
    },
    /**
     *@return{boolean}
     */
    hasScrollableContent(){
        returnthis[0].scrollHeight>this[0].clientHeight;
    },
    /**
     *@returns{boolean}
     */
    isScrollable(){
        if(!this.length){
            returnfalse;
        }
        constoverflow=this.css('overflow-y');
        constel=this[0];
        returnoverflow==='auto'||overflow==='scroll'
            ||(overflow==='visible'&&el===el.ownerDocument.scrollingElement);
    },
});

//jQueryfunctionsmonkey-patching

//Somemagictoensurescrolltopandanimateonhtml/bodyanimatethetoplevel
//scrollableelementevenifnothtmlorbody.
constoriginalScrollTop=$.fn.scrollTop;
$.fn.scrollTop=function(value){
    if(value!==undefined&&this.filter('html,body').length){
        //Thecallerwantstoscrollasetofelementsincludinghtmland/or
        //bodytoaspecificpoint->dothatbutmakesuretoaddthereal
        //toplevelelementtothatsetofelementsifanydifferentisfound.
        originalScrollTop.apply(this.not('html,body').add($().getScrollingElement()),arguments);
        returnthis;
    }elseif(value===undefined&&this.eq(0).is('html,body')){
        //Thecallerwantstogetthescrollpointofasetofelements,jQuery
        //willreturnthescrollpointofthefirstone,ifitishtmlorbody
        //returnthescrollpointoftherealtoplevelelement.
        returnoriginalScrollTop.apply($().getScrollingElement(),arguments);
    }
    returnoriginalScrollTop.apply(this,arguments);
};
constoriginalAnimate=$.fn.animate;
$.fn.animate=function(properties,...rest){
    constprops=Object.assign({},properties);
    if('scrollTop'inprops&&this.filter('html,body').length){
        //Thecallerwantstoscrollasetofelementsincludinghtmland/or
        //bodytoaspecificpoint->dothatbutmakesuretoaddthereal
        //toplevelelementtothatsetofelementsifanydifferentisfound.
        originalAnimate.call(this.not('html,body').add($().getScrollingElement()),{'scrollTop':props['scrollTop']},...rest);
        deleteprops['scrollTop'];
    }
    if(!Object.keys(props).length){
        returnthis;
    }
    returnoriginalAnimate.call(this,props,...rest);
};
});
