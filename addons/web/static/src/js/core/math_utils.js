flectra.define('web.mathUtils',function(){
"usestrict";

/**
 *Samevaluesreturnedasthosereturnedbycartesianfunctionforcasen=0
 *andn>1.Forn=1,bracketsareputaroundtheuniqueparameterelements.
 *
 *@returns{Array}
 */
function_cartesian(){
    varargs=Array.prototype.slice.call(arguments);
    if(args.length===0){
        return[undefined];
    }
    varfirstArray=args[0].map(function(elem){
        return[elem];
    });
    if(args.length===1){
        returnfirstArray;
    }
    varproductOfOtherArrays=_cartesian.apply(null,args.slice(1));
    varresult=firstArray.reduce(
        function(acc,elem){
            returnacc.concat(productOfOtherArrays.map(function(tuple){
                returnelem.concat(tuple);
            }));
        },
        []
    );
    returnresult;
}

/**
 *Returnstheproductofanynumbernofarrays.
 *Theinternalstructuresoftheirelementsispreserved.
 *Forn=1,nobracketsareputaroundtheuniqueparameterelements
 *Forn=0,[undefined]isreturnedsinceitistheunit
 *ofthecartesianproduct(uptoisomorphism).
 *
 *@returns{Array}
 */
functioncartesian(){
    varargs=Array.prototype.slice.call(arguments);
    if(args.length===0){
        return[undefined];
    }elseif(args.length===1){
        returnargs[0];
    }else{
        return_cartesian.apply(null,args);
    }
}

/**
 *Returnsallinitialsectionsofagivenarray,e.g.for[1,2]thearray
 *[[],[1],[1,2]]isreturned.
 *
 *@param{Array}array
 *@returns{Array[]}
 */
functionsections(array){
    varsections=[];
    for(vari=0;i<array.length+1;i++){
        sections.push(array.slice(0,i));
    }
    returnsections;
}

return{
    cartesian:cartesian,
    sections:sections,
};

});
