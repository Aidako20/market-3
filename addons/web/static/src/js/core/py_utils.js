flectra.define('web.py_utils',function(require){
"usestrict";

varcore=require('web.core');

var_t=core._t;
varpy=window.py;//tosilencelinters

//recursivelywrapsJSobjectspassedintothecontexttoattributedicts
//whichjsonifybacktoJSobjects
functionwrap(value){
    if(value===null){returnpy.None;}

    switch(typeofvalue){
    case'undefined':thrownewError("Noconversionforundefined");
    case'boolean':returnpy.bool.fromJSON(value);
    case'number':returnpy.float.fromJSON(value);
    case'string':returnpy.str.fromJSON(value);
    }

    switch(value.constructor){
    caseObject:returnwrapping_dict.fromJSON(value);
    caseArray:returnwrapping_list.fromJSON(value);
    }

    thrownewError("ValueError:unabletowrap"+value);
}

varwrapping_dict=py.type('wrapping_dict',null,{
    __init__:function(){
        this._store={};
    },
    __getitem__:function(key){
        vark=key.toJSON();
        if(!(kinthis._store)){
            thrownewError("KeyError:'"+k+"'");
        }
        returnwrap(this._store[k]);
    },
    __getattr__:function(key){
        returnthis.__getitem__(py.str.fromJSON(key));
    },
    __len__:function(){
        returnObject.keys(this._store).length;
    },
    __nonzero__:function(){
        returnpy.PY_size(this)>0?py.True:py.False;
    },
    get:function(){
        varargs=py.PY_parseArgs(arguments,['k',['d',py.None]]);

        if(!(args.k.toJSON()inthis._store)){returnargs.d;}
        returnthis.__getitem__(args.k);
    },
    fromJSON:function(d){
        varinstance=py.PY_call(wrapping_dict);
        instance._store=d;
        returninstance;
    },
    toJSON:function(){
        returnthis._store;
    },
});

varwrapping_list=py.type('wrapping_list',null,{
    __init__:function(){
        this._store=[];
    },
    __getitem__:function(index){
        returnwrap(this._store[index.toJSON()]);
    },
    __len__:function(){
        returnthis._store.length;
    },
    __nonzero__:function(){
        returnpy.PY_size(this)>0?py.True:py.False;
    },
    fromJSON:function(ar){
        varinstance=py.PY_call(wrapping_list);
        instance._store=ar;
        returninstance;
    },
    toJSON:function(){
        returnthis._store;
    },
});

functionwrap_context(context){
    for(varkincontext){
        if(!context.hasOwnProperty(k)){continue;}
        varval=context[k];
        //Don'taddatestcaselike``val===undefined``
        //thisisintendedtopreventlettingcrappass
        //onthecontextwithoutevenknowingit.
        //Ifyoufaceanissuefromhere,trytosanitize
        //thecontextupstreaminstead
        if(val===null){continue;}
        if(val.constructor===Array){
            context[k]=wrapping_list.fromJSON(val);
        }elseif(val.constructor===Object
                   &&!py.PY_isInstance(val,py.object)){
            context[k]=wrapping_dict.fromJSON(val);
        }
    }
    returncontext;
}

functioneval_contexts(contexts,evaluation_context){
    evaluation_context=_.extend(pycontext(),evaluation_context||{});
    return_(contexts).reduce(function(result_context,ctx){
        //__eval_contextevaluationscanleadtosomeof`contexts`'s
        //valuesbeingnull,skipthemaswellasemptycontexts
        if(_.isEmpty(ctx)){returnresult_context;}
        if(_.isString(ctx)){
            //wraprawstringsincontext
            ctx={__ref:'context',__debug:ctx};
        }
        varevaluated=ctx;
        switch(ctx.__ref){
        case'context':
            evaluation_context.context=evaluation_context;
            evaluated=py.eval(ctx.__debug,wrap_context(evaluation_context));
            break;
        case'compound_context':
            vareval_context=eval_contexts([ctx.__eval_context]);
            evaluated=eval_contexts(
                ctx.__contexts,_.extend({},evaluation_context,eval_context));
            break;
        }
        //addnewlyevaluatedcontexttoevaluationcontextforfollowing
        //siblings
        _.extend(evaluation_context,evaluated);
        return_.extend(result_context,evaluated);
    },{});
}

functioneval_domains(domains,evaluation_context){
    evaluation_context=_.extend(pycontext(),evaluation_context||{});
    varresult_domain=[];
    //Normalizeonlyifthefirstdomainisthearray["|"]or["!"]
    varneed_normalization=(
        domains&&
        domains.length>0&&
        domains[0].length===1&&
        (domains[0][0]==="|"||domains[0][0]==="!")
    );
    _(domains).each(function(domain){
        if(_.isString(domain)){
            //wraprawstringsindomain
            domain={__ref:'domain',__debug:domain};
        }
        vardomain_array_to_combine;
        switch(domain.__ref){
        case'domain':
            evaluation_context.context=evaluation_context;
            domain_array_to_combine=py.eval(domain.__debug,wrap_context(evaluation_context));
            break;
        default:
            domain_array_to_combine=domain;
        }
        if(need_normalization){
            domain_array_to_combine=get_normalized_domain(domain_array_to_combine);
        }
        result_domain.push.apply(result_domain,domain_array_to_combine);
    });
    returnresult_domain;
}

/**
 *Returnsanormalizedcopyofthegivendomainarray.Normalizationis
 *ismakingtheimplicit"&"atthestartofthedomainexplicit,e.g.
 *[A,B,C]wouldbecome["&","&",A,B,C].
 *
 *@param{Array}domain_array
 *@returns{Array}normalizedcopyofthegivenarray
 */
functionget_normalized_domain(domain_array){
    varexpected=1;//Holdsthenumberofexpecteddomainexpressions
    _.each(domain_array,function(item){
        if(item==="&"||item==="|"){
            expected++;
        }elseif(item!=="!"){
            expected--;
        }
    });
    varnew_explicit_ands=_.times(-expected,_.constant("&"));
    returnnew_explicit_ands.concat(domain_array);
}

functioneval_groupbys(contexts,evaluation_context){
    evaluation_context=_.extend(pycontext(),evaluation_context||{});
    varresult_group=[];
    _(contexts).each(function(ctx){
        if(_.isString(ctx)){
            //wraprawstringsincontext
            ctx={__ref:'context',__debug:ctx};
        }
        vargroup;
        varevaluated=ctx;
        switch(ctx.__ref){
        case'context':
            evaluation_context.context=evaluation_context;
            evaluated=py.eval(ctx.__debug,wrap_context(evaluation_context));
            break;
        case'compound_context':
            vareval_context=eval_contexts([ctx.__eval_context]);
            evaluated=eval_contexts(
                ctx.__contexts,_.extend({},evaluation_context,eval_context));
            break;
        }
        group=evaluated.group_by;
        if(!group){return;}
        if(typeofgroup==='string'){
            result_group.push(group);
        }elseif(groupinstanceofArray){
            result_group.push.apply(result_group,group);
        }else{
            thrownewError('Gotinvalidgroupby{{'
                    +JSON.stringify(group)+'}}');
        }
        _.extend(evaluation_context,evaluated);
    });
    returnresult_group;
}

/**
 *Returnsthecurrentlocaldate,whichmeansthedateontheclient(whichcanbedifferent
 *comparedtothedateoftheserver).
 *
 *@return{datetime.date}
 */
functioncontext_today(){
    vard=newDate();
    returnpy.PY_call(
        py.extras.datetime.date,[d.getFullYear(),d.getMonth()+1,d.getDate()]);
}

/**
 *Returnsatimedeltaobjectwhichrepresentsthetimezoneoffsetbetweenthe
 *localtimezoneandtheUTCtime.
 *
 *Thisisveryusefultogeneratedatetimestringswhichare'timezone'
 *dependant. Forexample,wecannowwritethistogeneratethecorrect
 *datetimestringrepresenting"thismorningintheusertimezone":
 *
 *"datetime.datetime.now().replace(hour=0,minute=0,second=0)+tz_offset()).strftime('%Y-%m-%d%H:%M:%S')"
 *@returns{datetime.timedelta}
 */
functiontz_offset(){
    varoffset=newDate().getTimezoneOffset();
    varkwargs={minutes:py.float.fromJSON(offset)};
    returnpy.PY_call(py.extras.datetime.timedelta,[],kwargs);
}


functionpycontext(){
    constd=newDate();
    consttoday=`${
        String(d.getFullYear()).padStart(4,"0")}-${
        String(d.getMonth()+1).padStart(2,"0")}-${
        String(d.getDate()).padStart(2,"0")}`;
    constnow=`${
        String(d.getUTCFullYear()).padStart(4,"0")}-${
        String(d.getUTCMonth()+1).padStart(2,"0")}-${
        String(d.getUTCDate()).padStart(2,"0")}${
        String(d.getUTCHours()).padStart(2,"0")}:${
        String(d.getUTCMinutes()).padStart(2,"0")}:${
        String(d.getUTCSeconds()).padStart(2,"0")}`;

    const{datetime,relativedelta,time}=py.extras;
    return{
        current_date:today,
        datetime,
        time,
        now,
        today,
        relativedelta,
        context_today,
        tz_offset,
    };
}

/**
 *@param{String}type"domains","contexts"or"groupbys"
 *@param{Array}objectdomainsorcontextstoevaluate
 *@param{Object}[context]evaluationcontext
 */
functionpyeval(type,object,context){
    context=_.extend(pycontext(),context||{});

    //noinspectionFallthroughInSwitchStatementJS
    switch(type){
    case'context':
    case'contexts':
        if(type==='context'){
            object=[object];
        }
        returneval_contexts(object,context);
    case'domain':
    case'domains':
        if(type==='domain')
            object=[object];
        returneval_domains(object,context);
    case'groupbys':
        returneval_groupbys(object,context);
    }
    thrownewError("Unknowevaluationtype"+type);
}

functioneval_arg(arg){
    if(typeofarg!=='object'||!arg.__ref){returnarg;}
    switch(arg.__ref){
    case'domain':
        returnpyeval('domains',[arg]);
    case'context':case'compound_context':
        returnpyeval('contexts',[arg]);
    default:
        thrownewError(_t("Unknownnonliteraltype")+''+arg.__ref);
    }
}

/**
 *Ifargsorkwargsareunevaluatedcontextsordomains(compoundornot),
 *evaluatedthemin-place.
 *
 *Potentiallymutatesbothparameters.
 *
 *@paramargs
 *@paramkwargs
 */
functionensure_evaluated(args,kwargs){
    for(vari=0;i<args.length;++i){
        args[i]=eval_arg(args[i]);
    }
    for(varkinkwargs){
        if(!kwargs.hasOwnProperty(k)){continue;}
        kwargs[k]=eval_arg(kwargs[k]);
    }
}

functioneval_domains_and_contexts(source){
    //seeSession.eval_contextinPython
    return{
        context:pyeval('contexts',source.contexts||[],source.eval_context),
        domain:pyeval('domains',source.domains,source.eval_context),
        group_by:pyeval('groupbys',source.group_by_seq||[],source.eval_context),
    };
}

functionpy_eval(expr,context){
    returnpy.eval(expr,_.extend({},context||{},{"true":true,"false":false,"null":null}));
}

/**
 *Assembledomainsintoasingledomainsusingan'OR'oran'AND'operator.
 *
 *..note:
 *
 *     -thisfunctiondoesnotevaluateanythinginsidethedomain. This
 *       isactuallyquitecriticalbecausethisallowsthemanipulationof
 *       unevaluated(dynamic)domains.
 *     -thisfunctiongivesanormalizeddomainasresult,
 *     -appliedonalistoflength1,itreturnsthedomainnormalized.
 *
 *@param{string[]}domainslistofstringrepresentingdomains
 *@param{"AND"|"OR"}operatorusedtocombinedomains(default"AND")
 *@returns{string}normalizeddomain
 */
functionassembleDomains(domains,operator){
    varASTs=domains.map(_getPyJSAST);
    if(operator==="OR"){
        operator=py.tokenize("'|'")[0];
    }else{
        operator=py.tokenize("'&'")[0];
    }
    varresult=_getPyJSAST("[]");
    varnormalizedDomains=ASTs
                .filter(function(AST){
                    returnAST.first.length>0;
                })
                .map(_normalizeDomainAST);
    if(normalizedDomains.length>0){
        result.first=normalizedDomains.reduce(function(acc,ast){
            returnacc.concat(ast.first);
        },
        _.times(normalizedDomains.length-1,_.constant(operator))
        );
    }
    return_formatAST(result);
}
/**
 *Normalizeadomainviaitsstringrepresentation.
 *
 *Note:thisfunctiondoesnotevaluateanythinginsidethedomain. Thisis
 *actuallyquitecriticalbecausethisallowsthemanipulationofunevaluated
 *(dynamic)domains.
 *
 *@param{string}domainstringrepresentingadomain
 *@returns{string}normalizeddomain
 */
functionnormalizeDomain(domain){
    return_formatAST(_normalizeDomainAST(_getPyJSAST(domain)));
}

//--------------------------------------------------------------------------
//Private
//--------------------------------------------------------------------------

//BindingpowerforprefixoperatorisnotaccessibleintheASTgeneratedby
//py.js,sowehavetohardcodesomevalueshere
varBINDING_POWERS={
    or:30,
    and:40,
    not:50,
};

/**
 *@private
 *ConvertapythonAST(generatedbypy.js)toastringform,whichshould
 *representthesameAST.
 *
 *@param{Object}astavalidASTobtainedbypy.js,whichrepresentapython
 *  expression
 *@param{integer}[lbp=0]abindingpower.Thisisnecessarytobeableto
 *  formatsubexpressions:the+subexpressionin"3*(a+2)"shouldbe
 *  formattedwithparenthesis,becauseitsbindingpowerislowerthanthe
 *  bindingpowerof*.
 *@returns{string}
 */
function_formatAST(ast,lbp){
    lbp=lbp||0;
    switch(ast.id){
        //basicvalues
        case"(number)":
            returnString(ast.value);
        case"(string)":
            returnJSON.stringify(ast.value);
        case"(constant)":
            returnast.value;
        case"(name)":
            returnast.value;
        case"[":
            if(ast.second){
                //readavalueinadictionary:d['a']
                return_formatAST(ast.first)+'['+_formatAST(ast.second)+']';
            }else{
                //list:[1,2]
                varvalues=ast.first.map(_formatAST);
                return'['+values.join(',')+']';
            }
        case"{":
            varkeyValues=ast.first.map(function(kv){
                return_formatAST(kv[0])+':'+_formatAST(kv[1]);
            });
            return'{'+keyValues.join(',')+'}';

        //relations
        case"=":
            return_formatAST(ast.first)+''+ast.id+''+_formatAST(ast.second);
        //operators
        case"-":
        case"+":
        case"~":
        case"*":
        case"**":
        case"%":
        case"//":
        case"and":
        case"or":
            if(ast.second){
                //infix
                varr=_formatAST(ast.first,ast.lbp)+''+ast.id+''+_formatAST(ast.second,ast.lbp);
                if(ast.lbp<lbp){
                    r='('+r+')';
                }
                returnr;
            }
            //prefix
            //reallbpisnotaccessible,itisinsideaclosure
            varactualBP=BINDING_POWERS[ast.id]||130;
            returnast.id+_formatAST(ast.first,actualBP);
        case"if":
            vart=_formatAST(ast.ifTrue)
                +'if'+_formatAST(ast.condition)
                +'else'+_formatAST(ast.ifFalse);
            returnast.lbp<lbp?'('+t+')':t;
        case".":
            return_formatAST(ast.first,ast.lbp)+'.'+_formatAST(ast.second);
        case"not":
            return"not"+_formatAST(ast.first);
        case"(comparator)":
            varoperator=ast.operators[0];
            return_formatAST(ast.expressions[0])+''+operator+''+_formatAST(ast.expressions[1]);

        //functioncall
        case"(":
            if(ast.second){
                //thisisafunctioncall:f(a,b)
                return_formatAST(ast.first)+'('+ast.second.map(_formatAST).join(',')+')';
            }else{
                //thisisatuple
                return'('+ast.first.map(_formatAST).join(',')+')';
            }
    }
    thrownewError("Unimplementedpythonconstruct");
}

/**
 *@private
 *GetthePyJsASTrepresentingadomainstartingfromisstringrepresentation
 *
 *@param{string}domainstringrepresentingadomain
 *@returns{PyJSAST}PyJSASTrepresentationofdomain
 */
function_getPyJSAST(domain){
    returnpy.parse(py.tokenize(domain));
}

/**
 *@private
 *
 *Normalizeadomain,attheleveloftheAST.
 *
 *Note:thisfunctiondoesnotevaluateanythinginsidethedomain. Thisis
 *actuallyquitecriticalbecausethisallowsthemanipulationofunevaluated
 *(dynamic)domains.
 *
 *@param{PyJSAST}domainvalidASTrepresentingadomain
 *@returns{PyJSAST}normalizeddomainAST
 */
function_normalizeDomainAST(domain){
    varexpected=1;
    for(vari=0;i<domain.first.length;i++){
        varvalue=domain.first[i].value;
        if(value==='&'||value==='|'){
            expected++;
        }elseif(value!=='!'){
            expected--;
        }
    }
    varandOperator=py.tokenize("'&'")[0];

    if(expected<0){
        domain.first.unshift.apply(domain.first,_.times(Math.abs(expected),_.constant(andOperator)));
    }

    returndomain;
}

return{
    context:pycontext,
    ensure_evaluated:ensure_evaluated,
    eval:pyeval,
    eval_domains_and_contexts:eval_domains_and_contexts,
    py_eval:py_eval,
    normalizeDomain:normalizeDomain,
    assembleDomains:assembleDomains,
    _getPyJSAST:_getPyJSAST,
    _formatAST:_formatAST,
    _normalizeDomainAST:_normalizeDomainAST,
};
});
