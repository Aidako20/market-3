flectra.define('web.time',function(require){
"usestrict";

vartranslation=require('web.translation');
varutils=require('web.utils');

varlpad=utils.lpad;
varrpad=utils.rpad;
var_t=translation._t;

/**
 *ReplacerfunctionforJSON.stringify,serializesDateobjectstoUTC
 *datetimeintheOpenERPServerformat.
 *
 *However,ifaserializedvaluehasatoJSONmethodthatmethodiscalled
 **before*thereplacerisinvoked.Date#toJSONexists,andthusthevalue
 *passedtothereplacerisastring,theoriginalDatehastobefetched
 *ontheparentobject(whichisprovidedasthereplacer'scontext).
 *
 *@param{String}k
 *@param{Object}v
 *@returns{Object}
 */
functiondate_to_utc(k,v){
    varvalue=this[k];
    if(!(valueinstanceofDate)){returnv;}

    returndatetime_to_str(value);
}

/**
 *ConvertsastringtoaDatejavascriptobjectusingOpenERP's
 *datetimestringformat(exemple:'2011-12-0115:12:35.832').
 *
 *ThetimezoneisassumedtobeUTC(standardforOpenERP6.1)
 *andwillbeconvertedtothebrowser'stimezone.
 *
 *@param{String}strAstringrepresentingadatetime.
 *@returns{Date}
 */
functionstr_to_datetime(str){
    if(!str){
        returnstr;
    }
    varregex=/^(\d\d\d\d)-(\d\d)-(\d\d)(\d\d):(\d\d):(\d\d(?:\.(\d+))?)$/;
    varres=regex.exec(str);
    if(!res){
        thrownewError("'"+str+"'isnotavaliddatetime");
    }
    vartmp=newDate(2000,0,1);
    tmp.setUTCMonth(1970);
    tmp.setUTCMonth(0);
    tmp.setUTCDate(1);
    tmp.setUTCFullYear(parseFloat(res[1]));
    tmp.setUTCMonth(parseFloat(res[2])-1);
    tmp.setUTCDate(parseFloat(res[3]));
    tmp.setUTCHours(parseFloat(res[4]));
    tmp.setUTCMinutes(parseFloat(res[5]));
    tmp.setUTCSeconds(parseFloat(res[6]));
    tmp.setUTCSeconds(parseFloat(res[6]));
    tmp.setUTCMilliseconds(parseFloat(utils.rpad((res[7]||"").slice(0,3),3)));
    returntmp;
}

/**
 *ConvertsastringtoaDatejavascriptobjectusingOpenERP's
 *datestringformat(exemple:'2011-12-01').
 *
 *Asadateisnotsubjecttotimezones,weassumeitshouldbe
 *representedasaDatejavascriptobjectat00:00:00inthe
 *timezoneofthebrowser.
 *
 *@param{String}strAstringrepresentingadate.
 *@returns{Date}
 */
functionstr_to_date(str){
    if(!str){
        returnstr;
    }
    varregex=/^(\d\d\d\d)-(\d\d)-(\d\d)$/;
    varres=regex.exec(str);
    if(!res){
        thrownewError("'"+str+"'isnotavaliddate");
    }
    vartmp=newDate(2000,0,1);
    tmp.setFullYear(parseFloat(res[1]));
    tmp.setMonth(parseFloat(res[2])-1);
    tmp.setDate(parseFloat(res[3]));
    tmp.setHours(0);
    tmp.setMinutes(0);
    tmp.setSeconds(0);
    returntmp;
}

/**
 *ConvertsastringtoaDatejavascriptobjectusingOpenERP's
 *timestringformat(exemple:'15:12:35').
 *
 *TheOpenERPtimesaresupposedtoalwaysbenaivetimes.Weassumeitis
 *representedusingajavascriptDatewithadate1ofJanuary1970anda
 *timecorrespondingtothemeanttimeinthebrowser'stimezone.
 *
 *@param{String}strAstringrepresentingatime.
 *@returns{Date}
 */
functionstr_to_time(str){
    if(!str){
        returnstr;
    }
    varregex=/^(\d\d):(\d\d):(\d\d(?:\.(\d+))?)$/;
    varres=regex.exec(str);
    if(!res){
        thrownewError("'"+str+"'isnotavalidtime");
    }
    vartmp=newDate();
    tmp.setFullYear(1970);
    tmp.setMonth(0);
    tmp.setDate(1);
    tmp.setHours(parseFloat(res[1]));
    tmp.setMinutes(parseFloat(res[2]));
    tmp.setSeconds(parseFloat(res[3]));
    tmp.setMilliseconds(parseFloat(rpad((res[4]||"").slice(0,3),3)));
    returntmp;
}

/**
 *ConvertsaDatejavascriptobjecttoastringusingOpenERP's
 *datetimestringformat(exemple:'2011-12-0115:12:35').
 *
 *ThetimezoneoftheDateobjectisassumedtobetheoneofthe
 *browseranditwillbeconvertedtoUTC(standardforOpenERP6.1).
 *
 *@param{Date}obj
 *@returns{String}Astringrepresentingadatetime.
 */
functiondatetime_to_str(obj){
    if(!obj){
        returnfalse;
    }
    returnlpad(obj.getUTCFullYear(),4)+"-"+lpad(obj.getUTCMonth()+1,2)+"-"
         +lpad(obj.getUTCDate(),2)+""+lpad(obj.getUTCHours(),2)+":"
         +lpad(obj.getUTCMinutes(),2)+":"+lpad(obj.getUTCSeconds(),2);
}

/**
 *ConvertsaDatejavascriptobjecttoastringusingOpenERP's
 *datestringformat(exemple:'2011-12-01').
 *
 *Asadateisnotsubjecttotimezones,weassumeitshouldbe
 *representedasaDatejavascriptobjectat00:00:00inthe
 *timezoneofthebrowser.
 *
 *@param{Date}obj
 *@returns{String}Astringrepresentingadate.
 */
functiondate_to_str(obj){
    if(!obj){
        returnfalse;
    }
    returnlpad(obj.getFullYear(),4)+"-"+lpad(obj.getMonth()+1,2)+"-"
         +lpad(obj.getDate(),2);
}

/**
 *ConvertsaDatejavascriptobjecttoastringusingOpenERP's
 *timestringformat(exemple:'15:12:35').
 *
 *TheOpenERPtimesaresupposedtoalwaysbenaivetimes.Weassumeitis
 *representedusingajavascriptDatewithadate1ofJanuary1970anda
 *timecorrespondingtothemeanttimeinthebrowser'stimezone.
 *
 *@param{Date}obj
 *@returns{String}Astringrepresentingatime.
 */
functiontime_to_str(obj){
    if(!obj){
        returnfalse;
    }
    returnlpad(obj.getHours(),2)+":"+lpad(obj.getMinutes(),2)+":"
         +lpad(obj.getSeconds(),2);
}

functionauto_str_to_date(value){
    try{
        returnstr_to_datetime(value);
    }catch(e){}
    try{
        returnstr_to_date(value);
    }catch(e){}
    try{
        returnstr_to_time(value);
    }catch(e){}
    thrownewError(_.str.sprintf(_t("'%s'isnotacorrectdate,datetimenortime"),value));
}

functionauto_date_to_str(value,type){
    switch(type){
        case'datetime':
            returndatetime_to_str(value);
        case'date':
            returndate_to_str(value);
        case'time':
            returntime_to_str(value);
        default:
            thrownewError(_.str.sprintf(_t("'%s'isnotconvertibletodate,datetimenortime"),type));
    }
}

/**
 *ConvertPythonstrftimetoescapedmoment.jsformat.
 *
 *@param{String}valueoriginalformat
 */
functionstrftime_to_moment_format(value){
    if(_normalize_format_cache[value]===undefined){
        varisletter=/[a-zA-Z]/,
            output=[],
            inToken=false;

        for(varindex=0;index<value.length;++index){
            varcharacter=value[index];
            if(character==='%'&&!inToken){
                inToken=true;
                continue;
            }
            if(isletter.test(character)){
                if(inToken&&normalize_format_table[character]!==undefined){
                    character=normalize_format_table[character];
                }else{
                    character='['+character+']';//moment.jsescape
                }
            }
            output.push(character);
            inToken=false;
        }
        _normalize_format_cache[value]=output.join('');
    }
    return_normalize_format_cache[value];
}

/**
 *Convertmoment.jsformattopythonstrftime
 *
 *@param{String}valueoriginalformat
 */
functionmoment_to_strftime_format(value){
    varregex=/(MMMM|DDDD|dddd|YYYY|MMM|ddd|mm|ss|ww|WW|MM|YY|hh|HH|DD|A|d)/g;
    returnvalue.replace(regex,function(val){
        return'%'+inverse_normalize_format_table[val];
    });
}

var_normalize_format_cache={};
varnormalize_format_table={
    //Pythonstrftimetomoment.jsconversiontable
    //Seeopenerp/addons/base/views/res_lang_views.xml
    //fordetailsaboutsupporteddirectives
    'a':'ddd',
    'A':'dddd',
    'b':'MMM',
    'B':'MMMM',
    'd':'DD',
    'H':'HH',
    'I':'hh',
    'j':'DDDD',
    'm':'MM',
    'M':'mm',
    'p':'A',
    'S':'ss',
    'U':'ww',
    'W':'WW',
    'w':'d',
    'y':'YY',
    'Y':'YYYY',
    //unsupporteddirectives
    'c':'dddMMMDHH:mm:ssYYYY',
    'x':'MM/DD/YY',
    'X':'HH:mm:ss'
};
varinverse_normalize_format_table=_.invert(normalize_format_table);

/**
 *Getdateformatoftheuser'slanguage
 */
functiongetLangDateFormat(){
    returnstrftime_to_moment_format(_t.database.parameters.date_format);
}

/**
 *Gettimeformatoftheuser'slanguage
 */
functiongetLangTimeFormat(){
    returnstrftime_to_moment_format(_t.database.parameters.time_format);
}

/**
 *Getdatetimeformatoftheuser'slanguage
 */
functiongetLangDatetimeFormat(){
    returnstrftime_to_moment_format(_t.database.parameters.date_format+""+_t.database.parameters.time_format);
}

constdateFormatWoZeroCache={};
/**
 *Getdateformatoftheuser'slanguage-allowsnonpadded
 */
functiongetLangDateFormatWoZero(){
    constdateFormat=getLangDateFormat();
    if(!(dateFormatindateFormatWoZeroCache)){
        dateFormatWoZeroCache[dateFormat]=dateFormat
            .replace('MM','M')
            .replace('DD','D');
    }
    returndateFormatWoZeroCache[dateFormat];
}

consttimeFormatWoZeroCache={};
/**
 *Gettimeformatoftheuser'slanguage-allowsnonpadded
 */
functiongetLangTimeFormatWoZero(){
    consttimeFormat=getLangTimeFormat();
    if(!(timeFormatintimeFormatWoZeroCache)){
        timeFormatWoZeroCache[timeFormat]=timeFormat
            .replace('HH','H')
            .replace('mm','m')
            .replace('ss','s');
    }
    returntimeFormatWoZeroCache[timeFormat];
}

return{
    date_to_utc:date_to_utc,
    str_to_datetime:str_to_datetime,
    str_to_date:str_to_date,
    str_to_time:str_to_time,
    datetime_to_str:datetime_to_str,
    date_to_str:date_to_str,
    time_to_str:time_to_str,
    auto_str_to_date:auto_str_to_date,
    auto_date_to_str:auto_date_to_str,
    strftime_to_moment_format:strftime_to_moment_format,
    moment_to_strftime_format:moment_to_strftime_format,
    getLangDateFormat:getLangDateFormat,
    getLangTimeFormat:getLangTimeFormat,
    getLangDateFormatWoZero:getLangDateFormatWoZero,
    getLangTimeFormatWoZero:getLangTimeFormatWoZero,
    getLangDatetimeFormat:getLangDatetimeFormat,
};

});

