flectra.define('web.custom_hooks',function(){
    "usestrict";

    const{Component,hooks}=owl;
    const{onMounted,onPatched,onWillUnmount}=hooks;

    /**
     *FocusagivenselectorassoonasitappearsintheDOMandifitwasnot
     *displayedbefore.Iftheselectedtargetisaninput|textarea,settheselection
     *attheend.
     *@param{Object}[params]
     *@param{string}[params.selector='autofocus']default:selectthefirstelement
     *                withan`autofocus`attribute.
     *@returns{Function}functionthatforcesthefocusonthenextupdateifvisible.
     */
    functionuseAutofocus(params={}){
        constcomp=Component.current;
        //Preventautofocusinmobile
        if(comp.env.device.isMobileDevice){
            return()=>{};
        }
        constselector=params.selector||'[autofocus]';
        lettarget=null;
        functionautofocus(){
            constprevTarget=target;
            target=comp.el.querySelector(selector);
            if(target&&target!==prevTarget){
                target.focus();
                if(['INPUT','TEXTAREA'].includes(target.tagName)){
                    target.selectionStart=target.selectionEnd=target.value.length;
                }
            }
        }
        onMounted(autofocus);
        onPatched(autofocus);

        returnfunctionfocusOnUpdate(){
            target=null;
        };
    }

    /**
     *TheuseListenerhookoffersanalternativetoOwl'sclassicalevent
     *registrationmechanism(withattribute't-on-eventName'inxml).Itis
     *especiallyusefulforabstractcomponents,meanttobeextendedby
     *specificones.Ifthoseabstractcomponentsneedtodefineeventhandlers,
     *butdon'thaveanytemplate(becausethetemplatecompletelydependson
     *specificcases),thenusingthe't-on'mechanismisn'tadequate,asthe
     *handlerswouldbelostbythetemplateoverride.Inthiscase,usingthis
     *hookinsteadismoreconvenient.
     *
     *Example:navigationeventhandlinginAbstractField
     *
     *Usage:likeallOwlhooks,thisfunctionhastobecalledinthe
     *constructorofanOwlcomponent:
     *
     *  useListener('click',()=>{console.log('clicked');});
     *
     *Anoptionalnativequeryselectorcanbespecifiedassecondargumentfor
     *eventdelegation.Inthiscase,thehandlerisonlycallediftheevent
     *istriggeredonanelementmatchingthegivenselector.
     *
     *  useListener('click','button',()=>{console.log('clicked');});
     *
     *Note:componentsthataltertheevent'starget(e.g.Portal)arenot
     *expectedtobehaveasexpectedwitheventdelegation.
     *
     *@param{string}eventNamethenameoftheevent
     *@param{string}[querySelector]aJSnativeselectorforeventdelegation
     *@param{function}handlertheeventhandler(willbeboundtothecomponent)
     *@param{Object}[addEventListenerOptions]tobepassedtoaddEventListenerasoptions.
     *   Usefulforlisteninginthecapturephase
     */
    functionuseListener(eventName,querySelector,handler,addEventListenerOptions){
        if(typeofarguments[1]!=='string'){
            querySelector=null;
            handler=arguments[1];
            addEventListenerOptions=arguments[2];
        }
        if(typeofhandler!=='function'){
            thrownewError('Thehandlermustbeafunction');
        }

        constcomp=Component.current;
        letboundHandler;
        if(querySelector){
            boundHandler=function(ev){
                letel=ev.target;
                lettarget;
                while(el&&!target){
                    if(el.matches(querySelector)){
                        target=el;
                    }elseif(el===comp.el){
                        el=null;
                    }else{
                        el=el.parentElement;
                    }
                }
                if(el){
                    handler.call(comp,ev);
                }
            };
        }else{
            boundHandler=handler.bind(comp);
        }
        onMounted(function(){
            comp.el.addEventListener(eventName,boundHandler,addEventListenerOptions);
        });
        onWillUnmount(function(){
            comp.el.removeEventListener(eventName,boundHandler,addEventListenerOptions);
        });
    }

    return{
        useAutofocus,
        useListener,
    };
});
