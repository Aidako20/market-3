flectra.define('web.relational_fields',function(require){
"usestrict";

/**
 *RelationalFields
 *
 *Inthisfile,wehaveacollectionofvariousrelationalfieldwidgets.
 *Relationalfieldwidgetsaremoredifficulttouse/manipulate,becausethe
 *relationsaddalevelofcomplexity:avalueisnotabasictype,itcanbe
 *acollectionofotherrecords.
 *
 *Also,thewayrelationalfieldsareeditedismorecomplex. Wecanchange
 *thecorrespondingrecord(s),oraltersomeoftheirfields.
 */

varAbstractField=require('web.AbstractField');
varbasicFields=require('web.basic_fields');
varconcurrency=require('web.concurrency');
constControlPanelX2Many=require('web.ControlPanelX2Many');
varcore=require('web.core');
vardata=require('web.data');
varDialog=require('web.Dialog');
vardialogs=require('web.view_dialogs');
vardom=require('web.dom');
constDomain=require('web.Domain');
varKanbanRecord=require('web.KanbanRecord');
varKanbanRenderer=require('web.KanbanRenderer');
varListRenderer=require('web.ListRenderer');
const{ComponentWrapper,WidgetAdapterMixin}=require('web.OwlCompatibility');
const{sprintf}=require("web.utils");

const{escape}=owl.utils;
var_t=core._t;
var_lt=core._lt;
varqweb=core.qweb;

//------------------------------------------------------------------------------
//Many2onewidgets
//------------------------------------------------------------------------------

varM2ODialog=Dialog.extend({
    template:"M2ODialog",
    init:function(parent,name,value){
        this.name=name;
        this.value=value;
        this._super(parent,{
            title:_.str.sprintf(_t("New%s"),this.name),
            size:'medium',
            buttons:[{
                text:_t('Create'),
                classes:'btn-primary',
                close:true,
                click:function(){
                    this.trigger_up('quick_create',{value:this.value});
                },
            },{
                text:_t('Createandedit'),
                classes:'btn-primary',
                close:true,
                click:function(){
                    this.trigger_up('search_create_popup',{
                        view_type:'form',
                        value:this.value,
                    });
                },
            },{
                text:_t('Cancel'),
                close:true,
            }],
        });
    },
    /**
     *@override
     *@param{boolean}isSet
     */
    close:function(isSet){
        this.isSet=isSet;
        this._super.apply(this,arguments);
    },
    /**
     *@override
     */
    destroy:function(){
        if(!this.isSet){
            this.trigger_up('closed_unset');
        }
        this._super.apply(this,arguments);
    },
});

varFieldMany2One=AbstractField.extend({
    description:_lt("Many2one"),
    supportedFieldTypes:['many2one'],
    template:'FieldMany2One',
    custom_events:_.extend({},AbstractField.prototype.custom_events,{
        'closed_unset':'_onDialogClosedUnset',
        'field_changed':'_onFieldChanged',
        'quick_create':'_onQuickCreate',
        'search_create_popup':'_onSearchCreatePopup',
    }),
    events:_.extend({},AbstractField.prototype.events,{
        'clickinput':'_onInputClick',
        'focusoutinput':'_onInputFocusout',
        'keyupinput':'_onInputKeyup',
        'click.o_external_button':'_onExternalButtonClick',
        'click':'_onClick',
    }),
    AUTOCOMPLETE_DELAY:200,
    SEARCH_MORE_LIMIT:320,

    /**
     *@override
     *@param{boolean}[options.noOpen=false]iftrue,thereisnoexternal
     *  buttontoopentherelatedrecordinadialog
     *@param{boolean}[options.noCreate=false]iftrue,themany2onedoesnot
     *  allowtocreaterecords
     */
    init:function(parent,name,record,options){
        options=options||{};
        this._super.apply(this,arguments);
        this.limit=7;
        this.orderer=newconcurrency.DropMisordered();

        //shouldnormallybeset,exceptinstandaloneM20
        constcanCreate='can_create'inthis.attrs?JSON.parse(this.attrs.can_create):true;
        this.can_create=canCreate&&!this.nodeOptions.no_create&&!options.noCreate;
        this.can_write='can_write'inthis.attrs?JSON.parse(this.attrs.can_write):true;

        this.nodeOptions=_.defaults(this.nodeOptions,{
            quick_create:true,
        });
        this.noOpen='noOpen'inoptions?options.noOpen:this.nodeOptions.no_open;
        this.m2o_value=this._formatValue(this.value);
        //'recordParams'isadictofparamsusedwhencallingfunctions
        //'getDomain'and'getContext'onthis.record
        this.recordParams={fieldName:this.name,viewType:this.viewType};
        //Weneedtoknowifthewidgetisdirty(i.e.iftheuserhaschanged
        //thevalue,andthosechangeshaven'tbeenacknowledgedyetbythe
        //environment),topreventerasingthatnewvalueonareset(e.g.
        //comingbyanonchangeonanotherfield)
        this.isDirty=false;
        this.lastChangeEvent=undefined;

        //Listofautocompletesources
        this._autocompleteSources=[];
        //AdddefaultsearchmethodforM20(name_search)
        this._addAutocompleteSource(this._search,{placeholder:_t('Loading...'),order:1});

        //useaDropPrevioustoproperlyhandlerelatedrecordquickcreations,
        //andstoreacreateDeftobeabletonotifytheenvironmentthatthere
        //ispendingquickcreateoperation
        this.dp=newconcurrency.DropPrevious();
        this.createDef=undefined;
    },
    start:function(){
        //booleeanindicatingthatthecontentoftheinputisn'tsynchronized
        //withthecurrentm2ovalue(forinstance,theuseriscurrently
        //typingsomethingintheinput,andhasn'tselectedavalueyet).
        this.floating=false;

        this.$input=this.$('input');
        this.$external_button=this.$('.o_external_button');
        returnthis._super.apply(this,arguments);
    },
    /**
     *@override
     */
    destroy:function(){
        if(this._onScroll){
            window.removeEventListener('scroll',this._onScroll,true);
        }
        this._super.apply(this,arguments);
    },

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *Overridetomakethecallerwaitforpotentialongoingrecordcreation.
     *Thisensuresthatthecorrectmany2onevalueissetwhenthemainrecord
     *issaved.
     *
     *@override
     *@returns{Promise}resolvedassoonasthereisnolongerrecordbeing
     *  (quick)created
     */
    commitChanges:function(){
        returnPromise.resolve(this.createDef);
    },
    /**
     *@override
     *@returns{jQuery}
     */
    getFocusableElement:function(){
        returnthis.mode==='edit'&&this.$input||this.$el;
    },
    /**
     *TODO
     */
    reinitialize:function(value){
        this.isDirty=false;
        this.floating=false;
        returnthis._setValue(value);
    },
    /**
     *Re-rendersthewidgetifitisn'tdirty.Thewidgetisdirtyiftheuser
     *changedthevalue,andthatchangehasn'tbeenacknowledgedyetbythe
     *environment.Forexample,anotherfieldwithanonchangehasbeenupdated
     *andthisfieldisupdatedbeforetheonchangereturns.Two'_setValue'
     *aredone(thisissequential),thefirstonereturnsandthiswidgetis
     *reset.However,ithaspendingchanges,sowedon'tre-render.
     *
     *@override
     */
    reset:function(record,event){
        this._reset(record,event);
        if(!event||event===this.lastChangeEvent){
            this.isDirty=false;
        }
        if(this.isDirty){
            returnPromise.resolve();
        }else{
            returnthis._render();
        }
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *Addasourcetotheautocompleteresults
     *
     *@param{function}method:Afunctionthatreturnsalistofresults.Ifasyncsource,thefunctionshouldreturnapromise
     *@param{Object}params:Parameterscontainingplaceholder/validation/order
     *@private
     */
    _addAutocompleteSource:function(method,params){
        this._autocompleteSources.push({
            method:method,
            placeholder:(params.placeholder?_t(params.placeholder):_t('Loading...'))+'<iclass="fafa-spinnerfa-spinpull-right"></i>',
            validation:params.validation,
            loading:false,
            order:params.order||999
        });

        this._autocompleteSources=_.sortBy(this._autocompleteSources,'order');
    },
    /**
     *@private
     */
    _bindAutoComplete:function(){
        varself=this;
        //avoidignoringautocomplete="off"byobfuscatingplaceholder,see#30439
        if($.browser.chrome&&this.$input.attr('placeholder')){
            this.$input.attr('placeholder',function(index,val){
                returnval.split('').join('\ufeff');
            });
        }
        this.$input.autocomplete({
            source:function(req,resp){
                _.each(self._autocompleteSources,function(source){
                    //Resetstheresultsforthissource
                    source.results=[];

                    //Checkifthissourceshouldbeusedforthesearchedterm
                    constsearch=req.term.trim();
                    if(!source.validation||source.validation.call(self,search)){
                        source.loading=true;

                        //Wrapthereturnedvalueofthesource.methodwithapromise
                        //Soeventifthereturnedvalueisnotasync,itwillwork
                        Promise.resolve(source.method.call(self,search)).then(function(results){
                            source.results=results;
                            source.loading=false;
                            resp(self._concatenateAutocompleteResults());
                        });
                    }
                });
            },
            select:function(event,ui){
                //wedonotwanttheselecteventtotriggeranyadditional
                //effect,suchasnavigatingtoanotherfield.
                event.stopImmediatePropagation();
                event.preventDefault();

                varitem=ui.item;
                self.floating=false;
                if(item.id){
                    self.reinitialize({id:item.id,display_name:item.name});
                }elseif(item.action){
                    item.action();
                }
                returnfalse;
            },
            focus:function(event){
                event.preventDefault();//don'tautomaticallyselectvaluesonfocus
            },
            open:function(event){
                self._onScroll=function(ev){
                    if(ev.target!==self.$input.get(0)&&self.$input.hasClass('ui-autocomplete-input')){
                        self.$input.autocomplete('close');
                    }
                };
                window.addEventListener('scroll',self._onScroll,true);
            },
            close:function(event){
                //itisnecessarytopreventESCkeyfrompropagatingtofield
                //root,topreventunwanteddiscardoperations.
                if(event.which===$.ui.keyCode.ESCAPE){
                    event.stopPropagation();
                }
                if(self._onScroll){
                    window.removeEventListener('scroll',self._onScroll,true);
                }
            },
            autoFocus:true,
            html:true,
            minLength:0,
            delay:this.AUTOCOMPLETE_DELAY,
        });
        this.$input.autocomplete("option","position",{my:"lefttop",at:"leftbottom"});
        this.autocomplete_bound=true;
    },
    /**
     *Concatenateasyncresultsforautocomplete.
     *
     *@returns{Array}
     *@private
     */
    _concatenateAutocompleteResults:function(){
        varresults=[];
        _.each(this._autocompleteSources,function(source){
            if(source.results&&source.results.length){
                results=results.concat(source.results);
            }elseif(source.loading){
                results.push({
                    label:source.placeholder
                });
            }
        });
        returnresults;
    },
    /**
     *@private
     *@param{string}[name]
     *@returns{Object}
     */
    _createContext:function(name){
        vartmp={};
        varfield=this.nodeOptions.create_name_field;
        if(field===undefined){
            field="name";
        }
        if(field!==false&&name&&this.nodeOptions.quick_create!==false){
            tmp["default_"+field]=name;
        }
        returntmp;
    },
    /**
     *@private
     *@returns{Array}
     */
    _getSearchBlacklist:function(){
        return[];
    },
    /**
    *Returnsthedisplay_namefromastringwhichcontainsitbutwasaltered
    *asaresultoftheshow_addressoptionusingahorriblehack.
    *
    *@private
    *@param{string}value
    *@returns{string}display_namewithoutshow_addressmess
    */
    _getDisplayName:function(value){
        returnvalue.split('\n')[0];
    },
    /**
     *PreparesandreturnsoptionsforSelectCreateDialog
     *
     *@private
     */
    _getSearchCreatePopupOptions:function(view,ids,context,dynamicFilters){
        varself=this;
        return{
            res_model:this.field.relation,
            domain:this.record.getDomain({fieldName:this.name}),
            context:_.extend({},this.record.getContext(this.recordParams),context||{}),
            _createContext:this._createContext.bind(this),
            dynamicFilters:dynamicFilters||[],
            title:(view==='search'?_t("Search:"):_t("Create:"))+this.string,
            initial_ids:ids,
            initial_view:view,
            disable_multiple_selection:true,
            no_create:!self.can_create,
            kanban_view_ref:this.attrs.kanban_view_ref,
            on_selected:function(records){
                self.reinitialize(records[0]);
            },
            on_closed:function(){
                self.activate();
            },
        };
    },
    /**
     *@private
     *@param{Object}values
     *@param{string}search_val
     *@param{Object}domain
     *@param{Object}context
     *@returns{Object}
     */
    _manageSearchMore:function(values,search_val,domain,context){
        varself=this;
        values=values.slice(0,this.limit);
        values.push({
            label:_t("SearchMore..."),
            action:function(){
                varprom;
                if(search_val!==''){
                    prom=self._rpc({
                        model:self.field.relation,
                        method:'name_search',
                        kwargs:{
                            name:search_val,
                            args:domain,
                            operator:"ilike",
                            limit:self.SEARCH_MORE_LIMIT,
                            context:context,
                        },
                    });
                }
                Promise.resolve(prom).then(function(results){
                    vardynamicFilters;
                    if(results){
                        varids=_.map(results,function(x){
                            returnx[0];
                        });
                        dynamicFilters=[{
                            description:_.str.sprintf(_t('Quicksearch:%s'),search_val),
                            domain:[['id','in',ids]],
                        }];
                    }
                    self._searchCreatePopup("search",false,{},dynamicFilters);
                });
            },
            classname:'o_m2o_dropdown_option',
        });
        returnvalues;
    },
    /**
     *Listenstoevents'field_changed'tokeeptrackofthelasteventthat
     *hasbeentrigerred.Thisallowstodetectthatallchangeshavebeen
     *acknowledgedbytheenvironment.
     *
     *@param{FlectraEvent}event'field_changed'event
     */
    _onFieldChanged:function(event){
        this.lastChangeEvent=event;
    },
    /**
     *@private
     *@param{string}name
     *@returns{Promise}resolvedafterthename_createorwhentheslowcreate
     *                    modalisclosed.
     */
    _quickCreate:function(name){
        varself=this;
        varcreateDone;

        vardef=newPromise(function(resolve,reject){
            self.createDef=newPromise(function(innerResolve){
                //calledwhentherecordhasbeenquickcreated,orwhenthedialoghas
                //beenclosed(inthecaseofa'slow'create),meaningthatthejobis
                //done
                createDone=function(){
                    innerResolve();
                    resolve();
                    self.createDef=undefined;
                };
            });

            //calledifthequickcreateisdisabledonthismany2one,orifthe
            //quickcreationfailed(probablybecausetherearemandatoryfieldson
            //themodel)
            varslowCreate=function(){
                vardialog=self._searchCreatePopup("form",false,self._createContext(name));
                dialog.on('closed',self,createDone);
            };
            if(self.nodeOptions.quick_create){
                constprom=self.reinitialize({id:false,display_name:name});
                prom.guardedCatch(reason=>{
                    reason.event.preventDefault();
                    slowCreate();
                });
                self.dp.add(prom).then(createDone).guardedCatch(reject);
            }else{
                slowCreate();
            }
        });

        returndef;
    },
    /**
     *@private
     */
    _renderEdit:function(){
        varvalue=this.m2o_value;

        //thisisastupidhacknecessarytosupportthealways_reloadflag.
        //thefieldvaluehasbeenrereadbythebasicmodel. Weuseitto
        //displaythefulladdressofapartner,separatedby\n. Thisis
        //reallyabadwaytodoit. Now,weneedtoremovetheextralines
        //andhopeforthebestthatnoonetriestousesthismechanismtodo
        //somethingelse.
        if(this.nodeOptions.always_reload){
            value=this._getDisplayName(value);
        }
        this.$input.val(value);
        if(!this.autocomplete_bound){
            this._bindAutoComplete();
        }
        this._updateExternalButton();
    },
    /**
     *@private
     */
    _renderReadonly:function(){
        varescapedValue=_.escape((this.m2o_value||"").trim());
        varvalue=escapedValue.split('\n').map(function(line){
            return'<span>'+line+'</span>';
        }).join('<br/>');
        this.$el.html(value);
        if(!this.noOpen&&this.value){
            this.$el.attr('href',_.str.sprintf('#id=%s&model=%s',this.value.res_id,this.field.relation));
            this.$el.addClass('o_form_uri');
        }
    },
    /**
     *@private
     */
    _reset:function(){
        this._super.apply(this,arguments);
        this.floating=false;
        this.m2o_value=this._formatValue(this.value);
    },
    /**
     *Executesa'name_search'andreturnsalistofformattedobjectsmeantto
     *bedisplayedintheautocompletewidgetdropdown.Theseitemsareeither:
     *-aformattedversionofa'name_search'result
     *-anoptionmeanttodisplayadditionalinformationorperformanaction
     *
     *@private
     *@param{string}[searchValue=""]
     *@returns{Promise<{
     *     label:string,
     *     id?:number,
     *     name?:string,
     *     value?:string,
     *     classname?:string,
     *     action?:()=>Promise<any>,
     *}[]>}
     */
    _search:asyncfunction(searchValue=""){
        constvalue=searchValue.trim();
        constdomain=this.record.getDomain(this.recordParams);
        constcontext=Object.assign(
            this.record.getContext(this.recordParams),
            this.additionalContext
        );

        //Excludeblack-listedidsfromthedomain
        constblackListedIds=this._getSearchBlacklist();
        if(blackListedIds.length){
            domain.push(['id','notin',blackListedIds]);
        }

        if(this.lastNameSearch){
            this.lastNameSearch.catch((reason)=>{
                //thelastrpcname_searchwillbeaborted,sowewanttoignoreitsrejection
                reason.event.preventDefault();
            })
            this.lastNameSearch.abort(false)
        }
        this.lastNameSearch=this._rpc({
            model:this.field.relation,
            method:"name_search",
            kwargs:{
                name:value,
                args:domain,
                operator:"ilike",
                limit:this.limit+1,
                context,
            }
        });
        constresults=awaitthis.orderer.add(this.lastNameSearch);

        //Formatresultstofittheoptionsdropdown
        letvalues=results.map((result)=>{
            const[id,fullName]=result;
            constdisplayName=this._getDisplayName(fullName).trim();
            result[1]=displayName;
            return{
                id,
                label:escape(displayName)||data.noDisplayContent,
                value:displayName,
                name:displayName,
            };
        });

        //Add"Searchmore..."optionifresultscountishigherthanthelimit
        if(this.limit<values.length){
            values=this._manageSearchMore(values,value,domain,context);
        }
        if(!this.can_create){
            returnvalues;
        }

        //Additionaloptions...
        constcanQuickCreate=!this.nodeOptions.no_quick_create;
        constcanCreateEdit=!this.nodeOptions.no_create_edit;
        if(value.length){
            //"Quickcreate"option
            constnameExists=results.some((result)=>result[1]===value);
            if(canQuickCreate&&!nameExists){
                values.push({
                    label:sprintf(
                        _t(`Create"<strong>%s</strong>"`),
                        escape(value)
                    ),
                    action:()=>this._quickCreate(value),
                    classname:'o_m2o_dropdown_option'
                });
            }
            //"CreateandEdit"option
            if(canCreateEdit){
                constvalueContext=this._createContext(value);
                values.push({
                    label:_t("CreateandEdit..."),
                    action:()=>{
                        //Inputvalueisclearedandtheformpopupopens
                        this.el.querySelector(':scopeinput').value="";
                        returnthis._searchCreatePopup('form',false,valueContext);
                    },
                    classname:'o_m2o_dropdown_option',
                });
            }
            //"Noresults"option
            if(!values.length){
                values.push({
                    label:_t("Noresultstoshow..."),
                });
            }
        }elseif(!this.value&&(canQuickCreate||canCreateEdit)){
            //"Starttyping"option
            values.push({
                label:_t("Starttyping..."),
                classname:'o_m2o_start_typing',
            });
        }

        returnvalues;
    },
    /**
     *allsearch/createpopuphandling
     *
     *TODO:idsargumentisnolongerused,removeitinmaster(aswellas
     *initial_idsparamofthedialog)
     *
     *@private
     *@param{any}view
     *@param{any}ids
     *@param{any}context
     *@param{Object[]}[dynamicFilters=[]]filterstoaddtothesearchview
     *  inthedialog(eachfilterhaskeys'description'and'domain')
     */
    _searchCreatePopup:function(view,ids,context,dynamicFilters){
        varoptions=this._getSearchCreatePopupOptions(view,ids,context,dynamicFilters);
        returnnewdialogs.SelectCreateDialog(this,_.extend({},this.nodeOptions,options)).open();
    },
    /**
     *@private
     */
    _updateExternalButton:function(){
        varhas_external_button=!this.noOpen&&!this.floating&&this.isSet();
        this.$external_button.toggle(has_external_button);
        this.$el.toggleClass('o_with_button',has_external_button);//Shouldnotberequiredanymorebutkeptforcompatibility
    },


    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *@private
     *@param{MouseEvent}event
     */
    _onClick:function(event){
        varself=this;
        if(this.mode==='readonly'&&!this.noOpen){
            event.preventDefault();
            event.stopPropagation();
            this._rpc({
                    model:this.field.relation,
                    method:'get_formview_action',
                    args:[[this.value.res_id]],
                    context:this.record.getContext(this.recordParams),
                })
                .then(function(action){
                    self.trigger_up('do_action',{action:action});
                });
        }
    },

    /**
     *Resettheinputasdialoghasbeenclosedwithoutm2ocreation.
     *
     *@private
     */
    _onDialogClosedUnset:function(){
        this.isDirty=false;
        this.floating=false;
        this._render();
    },
    /**
     *@private
     */
    _onExternalButtonClick:function(){
        if(!this.value){
            this.activate();
            return;
        }
        varself=this;
        varcontext=this.record.getContext(this.recordParams);
        this._rpc({
                model:this.field.relation,
                method:'get_formview_id',
                args:[[this.value.res_id]],
                context:context,
            })
            .then(function(view_id){
                newdialogs.FormViewDialog(self,{
                    res_model:self.field.relation,
                    res_id:self.value.res_id,
                    context:context,
                    title:_t("Open:")+self.string,
                    view_id:view_id,
                    readonly:!self.can_write,
                    on_saved:function(record,changed){
                        if(changed){
                            const_setValue=self._setValue.bind(self,self.value.data,{
                                forceChange:true,
                            });
                            self.trigger_up('reload',{
                                db_id:self.value.id,
                                onSuccess:_setValue,
                                onFailure:_setValue,
                            });
                        }
                    },
                }).open();
            });
    },
    /**
     *@private
     */
    _onInputClick:function(){
        if(this.$input.autocomplete("widget").is(":visible")){
            this.$input.autocomplete("close");
        }elseif(this.floating){
            this.$input.autocomplete("search");//searchwiththeinput'scontent
        }else{
            this.$input.autocomplete("search",'');//searchwiththeemptystring
        }
    },
    /**
     *@private
     */
    _onInputFocusout:function(){
        if(this.can_create&&this.floating){
            newM2ODialog(this,this.string,this.$input.val()).open();
        }
    },
    /**
     *@private
     *
     *@param{FlectraEvent}ev
     */
    _onInputKeyup:function(ev){
        if(ev.which===$.ui.keyCode.ENTER||ev.which===$.ui.keyCode.TAB){
            //Ifwepressedenterortab,wewanttoprevent_onInputFocusoutfrom
            //executingsinceitwouldopenaM2Odialogtorequest
            //confirmationthatthemany2oneisnotproperlyset.
            //It'sacasethatisalreadyhandledbytheautocompletelib.
            return;
        }
        this.isDirty=true;
        if(this.$input.val()===""){
            this.reinitialize(false);
        }elseif(this._getDisplayName(this.m2o_value)!==this.$input.val()){
            this.floating=true;
            this._updateExternalButton();
        }
    },
    /**
     *@override
     *@private
     */
    _onKeydown:function(){
        this.floating=false;
        this._super.apply(this,arguments);
    },
    /**
     *Stopstheleft/rightnavigationmoveeventifthecursorisnotatthe
     *start/endoftheinputelement.Stopsanynavigationmoveeventifthe
     *userisselectingtext.
     *
     *@private
     *@param{FlectraEvent}ev
     */
    _onNavigationMove:function(ev){
        //TODOMaybethisshouldbedoneinamixinor,better,them2ofield
        //shouldbeanInputField(butthisrequiressomerefactoring).
        basicFields.InputField.prototype._onNavigationMove.apply(this,arguments);
        if(this.mode==='edit'&&$(this.$input.autocomplete('widget')).is(':visible')){
            ev.stopPropagation();
        }
    },
    /**
     *@private
     *@param{FlectraEvent}event
     */
    _onQuickCreate:function(event){
        this._quickCreate(event.data.value);
    },
    /**
     *@private
     *@param{FlectraEvent}event
     */
    _onSearchCreatePopup:function(event){
        vardata=event.data;
        this._searchCreatePopup(data.view_type,false,this._createContext(data.value));
    },
});

varMany2oneBarcode=FieldMany2One.extend({
    //Wedon'trequirethiswidgettobedisplayedinstudiosidebarin
    //non-debugmodehencejustextendeditfromitsoriginalwidget,sothat
    //descriptioncomesfromparentandhasOwnPropertybasedconditionfails
});

varListFieldMany2One=FieldMany2One.extend({
    events:_.extend({},FieldMany2One.prototype.events,{
        'focusininput':'_onInputFocusin',
    }),

    /**
     *Shouldneverbeallowedtobeopenedwhileinreadonlymodeinalist
     *
     *@override
     */
    init:function(){
        this._super.apply(this,arguments);
        //whenweemptytheinput,wedelaythesetValuetopreventfrom
        //triggeringthe'fieldChanged'eventtwicewhentheuserwantsset
        //anotherm2ovalue;thefollowingattributeisusedtodeterminewhen
        //weskippedthesetValue,s.t.wecanperformitlateroniftheuser
        //didn'tselectanothervalue
        this.mustSetValue=false;
        this.m2oDialogFocused=false;
    },

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *Ifinreadonly,willneverbeconsideredasanactivewidget.
     *
     *@override
     */
    activate:function(){
        if(this.mode==='readonly'){
            returnfalse;
        }
        returnthis._super.apply(this,arguments);
    },
    /**
     *@override
     */
    reinitialize:function(){
        this.mustSetValue=false;
        returnthis._super.apply(this,arguments);
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *@private
     */
    _renderReadonly:function(){
        this.$el.text(this.m2o_value);
    },
    /**
     *@override
     *@private
     */
    _searchCreatePopup:function(){
        this.m2oDialogFocused=true;
        returnthis._super.apply(this,arguments);
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *@private
     */
    _onInputFocusin:function(){
        this.m2oDialogFocused=false;
    },
    /**
     *Incasethefocusislostfromamousedown,wewanttopreventtheclickoccuringonthe
     *followingmouseupsinceitmighttriggersomeunwantedlistfunctions.
     *Ifit'snotthecase,wewanttoremovetheaddedhandleronthenextmousedown.
     *@seelist_editable_renderer._onWindowClicked()
     *
     *Also,inlistviews,wedon'twanttotrytotriggerafieldChangewhenthefield
     *isbeingemptied.Instead,itwillbetriggeredastheuserleavesthefield
     *whileitisempty.
     *
     *@override
     *@private
     */
    _onInputFocusout:function(){
        if(this.can_create&&this.floating){
            //Incasethefocusoutisduetoamousedown,wewanttopreventthenextclick
            varattachedEvents=['click','mousedown'];
            varstopNextClick=(function(ev){
                ev.stopPropagation();
                attachedEvents.forEach(function(eventName){
                    window.removeEventListener(eventName,stopNextClick,true);
                });
            }).bind(this);
            attachedEvents.forEach(function(eventName){
                window.addEventListener(eventName,stopNextClick,true);
            });
        }
        this._super.apply(this,arguments);
        if(!this.m2oDialogFocused&&this.$input.val()===""&&this.mustSetValue){
            this.reinitialize(false);
        }
    },
    /**
     *Preventsthetriggeringofanimmediate_onFieldChangedwhenemptyingthefield.
     *
     *@override
     *@private
     */
    _onInputKeyup:function(){
        if(this.$input.val()!==""){
            this._super.apply(this,arguments);
        }else{
            this.mustSetValue=true;
        }
    },
});

varKanbanFieldMany2One=AbstractField.extend({
    tagName:'span',
    init:function(){
        this._super.apply(this,arguments);
        this.m2o_value=this._formatValue(this.value);
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *@private
     */
    _render:function(){
        this.$el.text(this.m2o_value);
    },
});

/**
 *WidgetMany2OneAvatarisonlysupportedonmany2onefieldspointingtoa
 *modelwhichinheritsfrom'image.mixin'.Inreadonly,itdisplaysthe
 *record'simagenexttothedisplay_name.Inedit,itbehavesexactlylikea
 *regularmany2onewidget.
 */
constMany2OneAvatar=FieldMany2One.extend({
    _template:'web.Many2OneAvatar',

    init(){
        this._super.apply(this,arguments);
        if(this.mode==='readonly'){
            this.template=null;
            this.tagName='div';
            this.className='o_field_many2one_avatar';
            //disabletheredirectiontotherelatedrecordonclick,inreadonly
            this.noOpen=true;
        }
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *@override
     */
    _renderReadonly(){
        this.$el.empty();
        if(this.value){
            this.$el.html(qweb.render(this._template,{
                url:`/web/image/${this.field.relation}/${this.value.res_id}/image_128`,
                value:this.m2o_value,
            }));
        }
    },
});

//------------------------------------------------------------------------------
//X2Manywidgets
//------------------------------------------------------------------------------

varFieldX2Many=AbstractField.extend(WidgetAdapterMixin,{
    tagName:'div',
    custom_events:_.extend({},AbstractField.prototype.custom_events,{
        add_record:'_onAddRecord',
        discard_changes:'_onDiscardChanges',
        edit_line:'_onEditLine',
        field_changed:'_onFieldChanged',
        open_record:'_onOpenRecord',
        kanban_record_delete:'_onRemoveRecord',
        list_record_remove:'_onRemoveRecord',
        resequence_records:'_onResequenceRecords',
        save_line:'_onSaveLine',
        toggle_column_order:'_onToggleColumnOrder',
        activate_next_widget:'_onActiveNextWidget',
        navigation_move:'_onNavigationMove',
        save_optional_fields:'_onSaveOrLoadOptionalFields',
        load_optional_fields:'_onSaveOrLoadOptionalFields',
        pager_changed:'_onPagerChanged',
    }),

    //Weneedtotriggertheresetoneverychangestobeawareoftheparentchanges
    //andthenevaluatethe'column_invisible'modifierincaseaevaluatedvalue
    //changed.
    resetOnAnyFieldChange:true,

    /**
     *useSubviewisusedinformviewtoloadviewoftherelatedmodelofthex2manyfield
     */
    useSubview:true,

    /**
     *@override
     */
    init:function(parent,name,record,options){
        this._super.apply(this,arguments);
        this.nodeOptions=_.defaults(this.nodeOptions,{
            create_text:_t('Add'),
        });
        this.operations=[];
        this.isReadonly=this.mode==='readonly';
        this.view=this.attrs.views[this.attrs.mode];
        this.isMany2Many=this.field.type==='many2many'||this.attrs.widget==='many2many';
        this.activeActions={};
        this.recordParams={fieldName:this.name,viewType:this.viewType};
        //Thelimitisfixedsoitcannotbechangedbyadding/removinglinesin
        //thewidget.Itwillonlychangethroughahardreloadorwhenmanually
        //changingthepager(see_onPagerChanged).
        this.pagingState={
            currentMinimum:this.value.offset+1,
            limit:this.value.limit,
            size:this.value.count,
            validate:()=>{
                //TODO:weshouldhavesomecommonmethodinthebasicrenderer...
                returnthis.view.arch.tag==='tree'?
                    this.renderer.unselectRow():
                    Promise.resolve();
            },
            withAccessKey:false,
        };
        vararch=this.view&&this.view.arch;
        if(arch){
            this.activeActions.create=arch.attrs.create?
                                            !!JSON.parse(arch.attrs.create):
                                            true;
            this.activeActions.delete=arch.attrs.delete?
                                            !!JSON.parse(arch.attrs.delete):
                                            true;
            this.editable=arch.attrs.editable;
        }
        this._computeAvailableActions(record);
        if(this.attrs.columnInvisibleFields){
            this._processColumnInvisibleFields();
        }
    },
    /**
     *@override
     */
    start:asyncfunction(){
        const_super=this._super.bind(this);
        if(this.view){
            this._renderButtons();
            this._controlPanelWrapper=newComponentWrapper(this,ControlPanelX2Many,{
                cp_content:{$buttons:this.$buttons},
                pager:this.pagingState,
            });
            awaitthis._controlPanelWrapper.mount(this.el,{position:'first-child'});
        }
        return_super(...arguments);
    },
    destroy:function(){
        WidgetAdapterMixin.destroy.call(this);
        this._super();
    },
    /**
     *Forthelistrenderertoproperlywork,itmustknowifitisintheDOM,
     *andbenotifiedwhenitisattachedtotheDOM.
     */
    on_attach_callback:function(){
        this.isInDOM=true;
        WidgetAdapterMixin.on_attach_callback.call(this);
        if(this.renderer){
            this.renderer.on_attach_callback();
        }
    },
    /**
     *Forthelistrenderertoproperlywork,itmustknowifitisintheDOM.
     */
    on_detach_callback:function(){
        this.isInDOM=false;
        WidgetAdapterMixin.on_detach_callback.call(this);
        if(this.renderer){
            this.renderer.on_detach_callback();
        }
    },

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *Ax2mfieldcanonlybesavedifitfinishedtheeditionofallitsrows.
     *Onparentviewsaving,wehavetoaskthex2mfieldstocommittheir
     *changes,thatisconfirmingthesaveofthein-editionroworaskingthe
     *userifhewantstodiscarditifnecessary.
     *
     *@override
     *@returns{Promise}
     */
    commitChanges:function(){
        varself=this;
        varinEditionRecordID=
            this.renderer&&
            this.renderer.viewType==="list"&&
            this.renderer.getEditableRecordID();
        if(inEditionRecordID){
            returnthis.renderer.commitChanges(inEditionRecordID).then(function(){
                returnself._saveLine(inEditionRecordID);
            });
        }
        returnthis._super.apply(this,arguments);
    },
    /**
     *@override
     */
    isSet:function(){
        returntrue;
    },
    /**
     *@override
     *@param{Object}record
     *@param{FlectraEvent}[ev]aneventthattriggeredtheresetaction
     *@param{Boolean}[fieldChanged]iftrue,thewidgetfieldhaschanged
     *@returns{Promise}
     */
    reset:function(record,ev,fieldChanged){
        //re-evaluateavailableactions
        constoldCanCreate=this.canCreate;
        constoldCanDelete=this.canDelete;
        constoldCanLink=this.canLink;
        constoldCanUnlink=this.canUnlink;
        this._computeAvailableActions(record);
        constactionsChanged=
            this.canCreate!==oldCanCreate||
            this.canDelete!==oldCanDelete||
            this.canLink!==oldCanLink||
            this.canUnlink!==oldCanUnlink;

        //If'fieldChanged'isfalse,itmeansthattheresetwastriggeredby
        //the'resetOnAnyFieldChange'mechanism.Ifitisthecase,ifneither
        //themodifiers(sothevisiblecolumns)northeavailableactions
        //changed,theresetisskipped.
        if(!fieldChanged&&!actionsChanged){
            varnewEval=this._evalColumnInvisibleFields();
            if(_.isEqual(this.currentColInvisibleFields,newEval)){
                this._reset(record,ev);//updatetheinternalstate,butdonotre-render
                returnPromise.resolve();
            }
        }elseif(ev&&ev.target===this&&ev.data.changes&&this.view.arch.tag==='tree'){
            varcommand=ev.data.changes[this.name];
            //Here,weonlyconsider'UPDATE'commandswithdata,whichoccur
            //witheditablelistview.Inordertokeepthecurrentlinein
            //edition,wecallconfirmUpdatewhichwilltrytoresetthewidgets
            //ofthelinebeingedited,andrerendertherestofthelist.
            //'UPDATE'commandswithnodatacanbeignored:theyoccurin
            //one2manyswhentherecordisupdatedfromadialogandinthis
            //case,wecanre-renderthewholesubview.
            if(command&&command.operation==='UPDATE'&&command.data){
                varstate=record.data[this.name];
                varfieldNames=state.getFieldNames({viewType:'list'});
                this._reset(record,ev);
                returnthis.renderer.confirmUpdate(state,command.id,fieldNames,ev.initialEvent);
            }
        }
        returnthis._super.apply(this,arguments);
    },

    /**
     *@override
     *@returns{jQuery}
     */
    getFocusableElement:function(){
       return(this.mode==='edit'&&this.$input)||this.$el;
    },

    /**
     *@override
     *@param{Object|undefined}[options={}]
     *@param{boolean}[options.noAutomaticCreate=false]
     */
    activate:function(options){
        if(!this.activeActions.create||this.isReadonly||!this.$el.is(":visible")){
            returnfalse;
        }
        if(this.view.type==='kanban'){
            this.$buttons.find(".o-kanban-button-new").focus();
        }
        if(this.view.arch.tag==='tree'){
            if(options&&options.noAutomaticCreate){
                this.renderer.$('.o_field_x2many_list_row_adda:first').focus();
            }else{
                this.renderer.$('.o_field_x2many_list_row_adda:first').click();
            }
        }
        returntrue;
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *@private
     *@param{Object}record
     */
    _computeAvailableActions:function(record){
        constevalContext=record.evalContext;
        this.canCreate='create'inthis.nodeOptions?
            newDomain(this.nodeOptions.create,evalContext).compute(evalContext):
            true;
        this.canDelete='delete'inthis.nodeOptions?
            newDomain(this.nodeOptions.delete,evalContext).compute(evalContext):
            true;
        this.canLink='link'inthis.nodeOptions?
            newDomain(this.nodeOptions.link,evalContext).compute(evalContext):
            true;
        this.canUnlink='unlink'inthis.nodeOptions?
            newDomain(this.nodeOptions.unlink,evalContext).compute(evalContext):
            true;
    },
    /**
     *Evaluatesthe'column_invisible'modifierfortheparentrecord.
     *
     *@return{Object}ObjectcontainingfieldNameaskeyandtheevaluated
     *                        column_invisiblemodifier
     */
    _evalColumnInvisibleFields:function(){
        varself=this;
        return_.mapObject(this.columnInvisibleFields,function(domains){
            returnself.record.evalModifiers({
                column_invisible:domains,
             }).column_invisible;
        });
    },
    /**
     *Returnsqwebcontexttorenderbuttons.
     *
     *@private
     *@returns{Object}
     */
    _getButtonsRenderingContext(){
        return{
            btnClass:'btn-secondary',
            create_text:this.nodeOptions.create_text,
        };
    },
    /**
     *Computesthedefaultrenderertousedependingontheviewtype.
     *Wecreatethisasamethodsowecanoverrideitifwewanttouse
     *anotherrendererinstead(eg.section_and_note_one2many).
     *
     *@private
     *@returns{Object}Therenderertouse
     */
    _getRenderer:function(){
        if(this.view.arch.tag==='tree'){
            returnListRenderer;
        }
        if(this.view.arch.tag==='kanban'){
            returnKanbanRenderer;
        }
    },
    /**
     *@private
     *@returns{boolean}trueiffthelistshouldcontaina'create'line.
     */
    _hasCreateLine:function(){
        return!this.isReadonly&&(
            (!this.isMany2Many&&this.activeActions.create&&this.canCreate)||
            (this.isMany2Many&&this.canLink)
        );
    },
    /**
     *@private
     *@returns{boolean}trueiffthelistshouldaddatrashicononeachrow.
     */
    _hasTrashIcon:function(){
        return!this.isReadonly&&(
            (!this.isMany2Many&&this.activeActions.delete&&this.canDelete)||
            (this.isMany2Many&&this.canUnlink)
        );
    },
    /**
     *Instanciatesorupdatestheadequaterenderer.
     *
     *@override
     *@private
     *@returns{Promise|undefined}
     */
    _render:function(){
        varself=this;
        if(!this.view){
            returnthis._super();
        }

        if(this.renderer){
            this.currentColInvisibleFields=this._evalColumnInvisibleFields();
            returnthis.renderer.updateState(this.value,{
                addCreateLine:this._hasCreateLine(),
                addTrashIcon:this._hasTrashIcon(),
                columnInvisibleFields:this.currentColInvisibleFields,
                keepWidths:true,
            }).then(()=>{
                returnthis._updateControlPanel({size:this.value.count});
            });
        }
        vararch=this.view.arch;
        varviewType;
        varrendererParams={
            arch:arch,
        };

        if(arch.tag==='tree'){
            viewType='list';
            this.currentColInvisibleFields=this._evalColumnInvisibleFields();
            _.extend(rendererParams,{
                editable:this.mode==='edit'&&arch.attrs.editable,
                addCreateLine:this._hasCreateLine(),
                addTrashIcon:this._hasTrashIcon(),
                isMany2Many:this.isMany2Many,
                columnInvisibleFields:this.currentColInvisibleFields,
            });
        }

        if(arch.tag==='kanban'){
            viewType='kanban';
            varrecord_options={
                editable:false,
                deletable:false,
                read_only_mode:this.isReadonly,
            };
            _.extend(rendererParams,{
                record_options:record_options,
                readOnlyMode:this.isReadonly,
            });
        }

        _.extend(rendererParams,{
            viewType:viewType,
        });
        varRenderer=this._getRenderer();
        this.renderer=newRenderer(this,this.value,rendererParams);

        this.$el.addClass('o_field_x2manyo_field_x2many_'+viewType);
        if(this.renderer){
            returnthis.renderer.appendTo(document.createDocumentFragment()).then(function(){
                dom.append(self.$el,self.renderer.$el,{
                    in_DOM:self.isInDOM,
                    callbacks:[{widget:self.renderer}],
                });
            });
        }else{
            returnthis._super();
        }
    },
    /**
     *Rendersthebuttonsandsetsthis.$buttons.
     *
     *@private
     */
    _renderButtons:function(){
        if(!this.isReadonly&&this.view.arch.tag==='kanban'){
            constrenderingContext=this._getButtonsRenderingContext();
            this.$buttons=$(qweb.render('KanbanView.buttons',renderingContext));
            this.$buttons.on('click','button.o-kanban-button-new',this._onAddRecord.bind(this));
        }
    },
    /**
     *SavesthelineassociatedtothegivenrecordID.Ifthelineisvalid,
     *itonlyhastobeswitchedtoreadonlymodeasallthelinechangeshave
     *alreadybeennotifiedtothemodelsothattheycanbesavedindbifthe
     *parentviewisactuallysaved.Ifthelineisnotvalid,thelineisto
     *bediscardediftheuseragrees(thisbehaviorisnotalisteditable
     *onebutax2moneasitismadetoreplacethe"discard"buttonwhich
     *existsforlisteditableviews).
     *
     *@private
     *@param{string}recordID
     *@returns{Promise}resolvedifthelinewasproperlysavedordiscarded.
     *                    rejectedifthelinecouldnotbesavedandtheuser
     *                    didnotagreetodiscard.
     */
    _saveLine:function(recordID){
        varself=this;
        returnnewPromise(function(resolve,reject){
            varfieldNames=self.renderer.canBeSaved(recordID);
            if(fieldNames.length){
                self.trigger_up('discard_changes',{
                    recordID:recordID,
                    onSuccess:resolve,
                    onFailure:reject,
                });
            }else{
                self.renderer.setRowMode(recordID,'readonly').then(resolve);
            }
        }).then(asyncfunction(){
            self._updateControlPanel({size:self.value.count});
            varnewEval=self._evalColumnInvisibleFields();
            if(!_.isEqual(self.currentColInvisibleFields,newEval)){
                self.currentColInvisibleFields=newEval;
                self.renderer.updateState(self.value,{
                    columnInvisibleFields:self.currentColInvisibleFields,
                });
            }
        });
    },
    /**
     *Re-rendersbuttonsandupdatesthecontrolpanel.Thismethodiscalled
     *whenthewidgetisreset,astheavailablebuttonsmighthavechanged.
     *TheonlymutableelementinX2Manyfieldswillbethepager.
     *
     *@private
     */
    _updateControlPanel:function(pagingState){
        if(this._controlPanelWrapper){
            this._renderButtons();
            constpagerProps=Object.assign(this.pagingState,pagingState,{
                //sometimes,wetemporarilywanttoincreasethepagerlimit
                //(forinstance,whenweaddanewrecordonapagethatalready
                //containsthemaximumnumberofrecords)
                limit:Math.max(this.value.limit,this.value.data.length),
            });
            constnewProps={
                cp_content:{$buttons:this.$buttons},
                pager:pagerProps,
            };
            returnthis._controlPanelWrapper.update(newProps);
        }
    },
    /**
     *Parsesthe'columnInvisibleFields'attributetosearchforthedomains
     *containingthekey'parent'.Iftherearesuchdomains,thestring
     *'parent.field'isreplacedwith'field'inordertobeevaluated
     *withtherightfieldnameintheparentcontext.
     *
     *@private
     */
    _processColumnInvisibleFields:function(){
        varcolumnInvisibleFields={};
        _.each(this.attrs.columnInvisibleFields,function(domains,fieldName){
            if(_.isArray(domains)){
                columnInvisibleFields[fieldName]=_.map(domains,function(domain){
                    //Wecheckifthedomainisanarraytoavoidprocessing
                    //the'|'and'&'cases
                    if(_.isArray(domain)){
                        return[domain[0].split('.')[1]].concat(domain.slice(1));
                    }
                    returndomain;
                });
            }
        });
        this.columnInvisibleFields=columnInvisibleFields;
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *Calledwhentheuserclicksonthe'Addaline'link(listcase)orthe
     *'Add'button(kanbancase).
     *
     *@abstract
     *@private
     */
    _onAddRecord:function(){
        //toimplement
    },
    /**
     *Removesthegivenrecordfromtherelation.
     *Stopsthepropagationoftheeventtopreventitfrombeinghandledagain
     *bytheparentcontroller.
     *
     *@private
     *@param{FlectraEvent}ev
     */
    _onRemoveRecord:function(ev){
        ev.stopPropagation();
        varoperation=this.isMany2Many?'FORGET':'DELETE';
        this._setValue({
            operation:operation,
            ids:[ev.data.id],
        });
    },
    /**
     *Whenthediscard_changeeventgothroughthisfield,wecanjustdecorate
     *thedatawiththenameofthefield. Theoriginfieldignorethis
     *information(itisasubfieldinao2m),andthecontrollerwillneedto
     *knowwhichfieldneedstobehandled.
     *
     *@private
     *@param{FlectraEvent}ev
     */
    _onDiscardChanges:function(ev){
        if(ev.target!==this){
            ev.stopPropagation();
            this.trigger_up('discard_changes',_.extend({},ev.data,{fieldName:this.name}));
        }
    },
    /**
     *Calledwhentherendereraskstoeditaline,inthatcasesimplytells
     *himbacktotogglethemodeofthisrow.
     *
     *@private
     *@param{FlectraEvent}ev
     */
    _onEditLine:function(ev){
        ev.stopPropagation();
        this.trigger_up('edited_list',{id:this.value.id});
        this.renderer.setRowMode(ev.data.recordId,'edit')
            .then(ev.data.onSuccess);
    },
    /**
     *Updatesthegivenrecordwiththechanges.
     *
     *@private
     *@param{FlectraEvent}ev
     */
    _onFieldChanged:function(ev){
        if(ev.target===this){
            ev.initialEvent=this.lastInitialEvent;
            return;
        }
        ev.stopPropagation();
        //changesoccuredinaneditablelist
        varchanges=ev.data.changes;
        //savetheinitialeventtriggeringthefield_changed,asitwillbe
        //necessarywhenthefieldtriggeringthiseventwillbereset(to
        //preventitfromre-renderingitself,formattingitsvalue,loosing
        //thefocus...whilestillbeingedited)
        this.lastInitialEvent=undefined;
        if(Object.keys(changes).length){
            this.lastInitialEvent=ev;
            this._setValue({
                operation:'UPDATE',
                id:ev.data.dataPointID,
                data:changes,
            }).then(function(){
                if(ev.data.onSuccess){
                    ev.data.onSuccess();
                }
            }).guardedCatch(function(reason){
                if(ev.data.onFailure){
                    ev.data.onFailure(reason);
                }
            });
        }
    },
    /**
     *Overridetohandlethenavigationinsideeditablelistcontrols
     *
     *@override
     *@private
     */
    _onNavigationMove:function(ev){
        if(this.view.arch.tag==='tree'){
            var$curControl=this.renderer.$('.o_field_x2many_list_row_adda:focus');
            if($curControl.length){
                var$nextControl;
                if(ev.data.direction==='right'){
                    $nextControl=$curControl.next('a');
                }elseif(ev.data.direction==='left'){
                    $nextControl=$curControl.prev('a');
                }
                if($nextControl&&$nextControl.length){
                    ev.stopPropagation();
                    $nextControl.focus();
                    return;
                }
            }
        }
        this._super.apply(this,arguments);
    },
    /**
     *Calledwhentheuserclicksonarelationalrecord.
     *
     *@abstract
     *@private
     */
    _onOpenRecord:function(){
        //toimplement
    },
    /**
     *Were-renderthepagerimmediatelywiththeneweventvaluestoallow
     *ittorequestanotherpagerchangewhileanotheroneisstillongoing.
     *@seefield_manager_mixinforconcurrencyhandling.
     *
     *@private
     *@param{FlectraEvent}ev
     */
    _onPagerChanged:function(ev){
        ev.stopPropagation();
        const{currentMinimum,limit}=ev.data;
        this._updateControlPanel({currentMinimum,limit});
        this.trigger_up('load',{
            id:this.value.id,
            limit,
            offset:currentMinimum-1,
            on_success:value=>{
                this.value=value;
                this.pagingState.limit=value.limit;
                this.pagingState.size=value.count;
                this._render();
            },
        });
    },
    /**
     *Calledwhentherendererasktosavealine(theusertriestoleaveit)
     *->Nothingisto"save"here,themodelwasalreadynotifiedoftheline
     *changes;iftherowcouldbesaved,wemaketherowreadonly.Otherwise,
     *wetriggeraneweventfortheviewtotellittodiscardthechanges
     *madetothatrow.
     *Notethatwedothatinthecontrollermutextoensurethatthecheckon
     *therow(whetherornotitcanbesaved)isdoneonceallpotential
     *onchangeRPCsaredone(thoseRPCsbeingexecutedinthesamemutex).
     *Thisparticularhandlingisdoneinthishandler,insteadofinthe
     *_saveLinefunctiondirectly,because_saveLineisalsocalledfrom
     *thecontroller(viacommitChanges),andinthiscase,itisalready
     *executedinthemutex.
     *
     *@private
     *@param{FlectraEvent}ev
     *@param{string}ev.recordID
     *@param{function}ev.onSuccesssuccesscallback(see'_saveLine')
     *@param{function}ev.onFailurefailcallback(see'_saveLine')
     */
    _onSaveLine:function(ev){
        varself=this;
        ev.stopPropagation();
        this.renderer.commitChanges(ev.data.recordID).then(function(){
            self.trigger_up('mutexify',{
                action:function(){
                    returnself._saveLine(ev.data.recordID)
                        .then(ev.data.onSuccess)
                        .guardedCatch(ev.data.onFailure);
                },
            });
        });
    },
    /**
     *Addnecessarykeypartsforthebasiccontrollertocomputethelocal
     *storagekey.Theeventwillbeproperlyhandledbythebasiccontroller.
     *
     *@param{FlectraEvent}ev
     *@private
     */
    _onSaveOrLoadOptionalFields:function(ev){
        ev.data.keyParts.relationalField=this.name;
        ev.data.keyParts.subViewId=this.view.view_id;
        ev.data.keyParts.subViewType=this.view.type;
    },
    /**
     *Forcesaresequencingoftherecords.
     *
     *@private
     *@param{FlectraEvent}ev
     *@param{string[]}ev.data.recordIds
     *@param{integer}ev.data.offset
     *@param{string}ev.data.handleField
     */
    _onResequenceRecords:function(ev){
        ev.stopPropagation();
        varself=this;
        if(this.view.arch.tag==='tree'){
            this.trigger_up('edited_list',{id:this.value.id});
        }
        varhandleField=ev.data.handleField;
        varoffset=ev.data.offset;
        varrecordIds=ev.data.recordIds.slice();
        //triggeranupdateofallrecordsbutthelastonewithoption
        //'notifyChanges'settofalse,andonceallthosechangeshavebeen
        //validatedbythemodel,triggerthechangeonthelastrecord
        //(withouttheoption,s.t.thepotentialonchangeonparentrecord
        //istriggered)
        varrecordId=recordIds.pop();
        varproms=recordIds.map(function(recordId,index){
            vardata={};
            data[handleField]=offset+index;
            returnself._setValue({
                operation:'UPDATE',
                id:recordId,
                data:data,
            },{
                notifyChange:false,
            });
        });
        Promise.all(proms).then(function(){
            functionalways(){
                if(self.view.arch.tag==='tree'){
                    self.trigger_up('toggle_column_order',{
                        id:self.value.id,
                        name:handleField,
                    });
                }
            }
            vardata={};
            data[handleField]=offset+recordIds.length;
            self._setValue({
                operation:'UPDATE',
                id:recordId,
                data:data,
            }).then(always).guardedCatch(always);
        });
    },
    /**
     *Addsfieldnameinformationtotheevent,sothattheviewupstreamis
     *awareofwhichwidgetsithastoredraw.
     *
     *@private
     *@param{FlectraEvent}ev
     */
    _onToggleColumnOrder:function(ev){
        ev.data.field=this.name;
    },
    /*
    *Movetonextwidget.
    *
    *@private
    */
    _onActiveNextWidget:function(e){
        e.stopPropagation();
        this.renderer.unselectRow();
        this.trigger_up('navigation_move',{
            direction:e.data.direction||'next',
        });
    },
});

varOne2ManyKanbanRecord=KanbanRecord.extend({
    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *ApplysamelogicasintheListRenderer:buttonswithtype="object"
     *aredisabledfornosavedyetrecords,ascallingthepythonmethod
     *withnoidwouldmakenosense.
     *
     *ToavoidtoexposethislogicinsideallKanbanviews,wedefine
     *aspecificKanbanRecordClassfortheOne2manycase.
     *
     *Thiscouldberefactoredtopreventfromduplicatingthislogicin
     *listandkanbanviews.
     *
     *@private
     */
    _postProcessObjectButtons:function(){
        varself=this;
        //iftheres_idisdefined,it'salreadycorrectlyhandledbytheKanbanrecordglobaleventclick
        if(!this.state.res_id){
            this.$('.oe_kanban_action[data-type=object]').each(function(index,button){
                var$button=$(button);
                if($button.attr('warn')){
                    $button.on('click',function(e){
                        e.stopPropagation();
                        self.do_warn(false,_t('Pleaseclickonthe"save"buttonfirst'));
                    });
                }else{
                    $button.attr('disabled','disabled');
                }
            });
        }
    },
    /**
     *@override
     *@private
     */
    _render:function(){
        varself=this;
        returnthis._super.apply(this,arguments).then(function(){
            self._postProcessObjectButtons();
        });
    },
});

varOne2ManyKanbanRenderer=KanbanRenderer.extend({
    config:_.extend({},KanbanRenderer.prototype.config,{
        KanbanRecord:One2ManyKanbanRecord,
    }),
});

varFieldOne2Many=FieldX2Many.extend({
    description:_lt("One2many"),
    className:'o_field_one2many',
    supportedFieldTypes:['one2many'],

    /**
     *@override
     */
    init:function(){
        this._super.apply(this,arguments);

        //booleanusedtopreventconcurrentrecordcreation
        this.creatingRecord=false;
    },

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------
    /**
     *@override
     *@param{Object}record
     *@param{FlectraEvent}[ev]aneventthattriggeredtheresetaction
     *@returns{Promise}
     */
    reset:function(record,ev){
        varself=this;
        returnthis._super.apply(this,arguments).then(()=>{
            if(ev&&ev.target===self&&ev.data.changes&&self.view.arch.tag==='tree'){
                if(ev.data.changes[self.name]&&ev.data.changes[self.name].operation==='CREATE'){
                    varindex=0;
                    if(self.editable!=='top'){
                        index=self.value.data.length-1;
                    }
                    varnewID=self.value.data[index].id;
                    returnself.renderer.editRecord(newID);
                }
            }
        });
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *@override
     *@private
     */
    _getButtonsRenderingContext(){
        constrenderingContext=this._super(...arguments);
        renderingContext.noCreate=!this.canCreate;
        returnrenderingContext;
    },
    /**
      *@override
      *@private
      */
    _getRenderer:function(){
        if(this.view.arch.tag==='kanban'){
            returnOne2ManyKanbanRenderer;
        }
        returnthis._super.apply(this,arguments);
    },
    /**
     *Overridestoonlyrenderthebuttonsifthe'create'actionisavailable.
     *
     *@override
     *@private
     */
    _renderButtons:function(){
        if(this.activeActions.create){
            returnthis._super(...arguments);
        }
    },
    /**
     *TriggertheeventtoopenadialogcontainingthecorrespondingFormviewforthecurrentrecord.
     *Iftheoptions'no_open'isspecified,thedialogwillnotbeopened.
     *
     *@private
     *@param{Object}params
     *@param{Object}[params.context]Weallowadditionalcontext,thisis
     *  usedforexampletodefinedefaultvalueswhenaddingnewlinesto
     *  aone2manywithcontrol/createtags.
     */
    _openFormDialog:function(params){
        varcontext=this.record.getContext(_.extend({},
            this.recordParams,
            {additionalContext:params.context}
        ));

        if(this.nodeOptions.no_open){
            return;
        }

        this.trigger_up('open_one2many_record',_.extend(params,{
            domain:this.record.getDomain(this.recordParams),
            context:context,
            field:this.field,
            fields_view:this.attrs.views&&this.attrs.views.form,
            parentID:this.value.id,
            viewInfo:this.view,
            deletable:this.activeActions.delete&&params.deletable&&this.canDelete,
        }));
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *OpensaFormViewDialogtoallowcreatinganewrecordforaone2many.
     *
     *@override
     *@private
     *@param{FlectraEvent|MouseEvent}evthiseventcomeseitherfromthe'Add
     *  record'linkinthelisteditablerenderer,orfromthe'Create'button
     *  inthekanbanview
     *@param{Array}ev.data.contextadditionalcontextfortheaddedrecords,
     *  ifseveralcontextsareprovided,multiplerecordswillbeadded
     *  (formdialogwillonlyusethecontextatindex0ifprovided)
     *@param{boolean}ev.data.forceEditablethisisusedtobypassthedialogopening
     *  incaseyouwanttoaddrecord(s)toalist
     *@param{function}ev.data.onSuccesscalledwhentherecordsarecorrectlycreated
     *  (notsupportedbyformdialog)
     *@param{boolean}ev.data.allowWarningdefinesiftherecordscanbeadded
     *  tothelistevenifwarningsaretriggered(e.g:stockwarningforproductavailability)
     */
    _onAddRecord:function(ev){
        varself=this;
        vardata=ev.data||{};

        //wedon'twantinterferencewiththecomponentsupstream.
        ev.stopPropagation();

        if(this.editable||data.forceEditable){
            if(!this.activeActions.create){
                if(data.onFail){
                    data.onFail();
                }
            }elseif(!this.creatingRecord){
                this.creatingRecord=true;
                this.trigger_up('edited_list',{id:this.value.id});
                this._setValue({
                    operation:'CREATE',
                    position:this.editable||data.forceEditable,
                    context:data.context,
                },{
                    allowWarning:data.allowWarning
                }).then(function(){
                    self.creatingRecord=false;
                }).then(function(){
                    if(data.onSuccess){
                        data.onSuccess();
                    }
                }).guardedCatch(function(){
                    self.creatingRecord=false;
                })
                ;
            }
        }else{
            this._openFormDialog({
                context:data.context&&data.context[0],
                on_saved:function(record){
                    self._setValue({operation:'ADD',id:record.id});
                },
            });
        }
    },
    /**
     *Overridesthehandlertosetaspecific'on_save'callbackastheo2m
     *sub-recordsaren'tsaveddirectlywhentheuserclickson'Save'inthe
     *dialog.Instead,therelationalrecordischangedinthelocaldata,and
     *thischangeissavedinDBwhentheuserclickson'Save'inthemain
     *formview.
     *
     *@private
     *@param{FlectraEvent}ev
     */
    _onOpenRecord:function(ev){
        //wedon'twantinterferencewiththecomponentsupstream.
        varself=this;
        ev.stopPropagation();

        varid=ev.data.id;
        varonSaved=function(record){
            if(_.some(self.value.data,{id:record.id})){
                //therecordalreadyexistsintherelation,sotriggeran
                //empty'UPDATE'operationwhentheuserclickson'Save'in
                //thedialog,tonotifythemainrecordthatasubrecordof
                //thisrelationalfieldhaschanged(thosechangeswillbe
                //alreadystoredonthatsubrecord,thankstothe'Save').
                self._setValue({operation:'UPDATE',id:record.id});
            }else{
                //therecordisn'tintherelationyet,soaddit;thiscan
                //happeniftheuserclickson'Save&New'inthedialog(the
                //openedrecordwillbeupdated,andotherrecordswillbe
                //created)
                self._setValue({operation:'ADD',id:record.id});
            }
        };
        this._openFormDialog({
            id:id,
            on_saved:onSaved,
            on_remove:function(){
                self._setValue({operation:'DELETE',ids:[id]});
            },
            deletable:this.activeActions.delete&&this.view.arch.tag!=='tree'&&this.canDelete,
            readonly:this.mode==='readonly',
        });
    },
});

varFieldMany2Many=FieldX2Many.extend({
    description:_lt("Many2many"),
    className:'o_field_many2many',
    supportedFieldTypes:['many2many'],

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------
    /**
     *OpensaSelectCreateDialog
     */
    onAddRecordOpenDialog:function(){
        varself=this;
        vardomain=this.record.getDomain({fieldName:this.name});

        newdialogs.SelectCreateDialog(this,{
            res_model:this.field.relation,
            domain:domain.concat(["!",["id","in",this.value.res_ids]]),
            context:this.record.getContext(this.recordParams),
            title:_t("Add:")+this.string,
            no_create:this.nodeOptions.no_create||!this.activeActions.create||!this.canCreate,
            fields_view:this.attrs.views.form,
            kanban_view_ref:this.attrs.kanban_view_ref,
            on_selected:function(records){
                varresIDs=_.pluck(records,'id');
                varnewIDs=_.difference(resIDs,self.value.res_ids);
                if(newIDs.length){
                    varvalues=_.map(newIDs,function(id){
                        return{id:id};
                    });
                    self._setValue({
                        operation:'ADD_M2M',
                        ids:values,
                    });
                }
            }
        }).open();
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *@override
     *@private
     */
    _getButtonsRenderingContext(){
        constrenderingContext=this._super(...arguments);
        renderingContext.noCreate=!this.canLink;
        returnrenderingContext;
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *OpensaSelectCreateDialog.
     *
     *@override
     *@private
     *@param{FlectraEvent|MouseEvent}evthiseventcomeseitherfromthe'Add
     *  record'linkinthelisteditablerenderer,orfromthe'Create'button
     *  inthekanbanview
     */
    _onAddRecord:function(ev){
        ev.stopPropagation();
        this.onAddRecordOpenDialog();
    },

    /**
     *Interceptsthe'open_record'eventtoedititsdataandletsitbubbleup
     *totheformview.
     *
     *@private
     *@param{FlectraEvent}ev
     */
    _onOpenRecord:function(ev){
        varself=this;
        _.extend(ev.data,{
            context:this.record.getContext(this.recordParams),
            domain:this.record.getDomain(this.recordParams),
            fields_view:this.attrs.views&&this.attrs.views.form,
            on_saved:function(){
                self._setValue({operation:'TRIGGER_ONCHANGE'},{forceChange:true})
                    .then(function(){
                        self.trigger_up('reload',{db_id:ev.data.id});
                    });
            },
            on_remove:function(){
                self._setValue({operation:'FORGET',ids:[ev.data.id]});
            },
            readonly:this.mode==='readonly',
            deletable:this.activeActions.delete&&this.view.arch.tag!=='tree'&&this.canDelete,
            string:this.string,
        });
    },
});

/**
 *Widgettouploadordeleteoneormorefilesatthesametime.
 */
varFieldMany2ManyBinaryMultiFiles=AbstractField.extend({
    template:"FieldBinaryFileUploader",
    template_files:"FieldBinaryFileUploader.files",
    supportedFieldTypes:['many2many'],
    fieldsToFetch:{
        name:{type:'char'},
        mimetype:{type:'char'},
    },
    events:{
        'click.o_attach':'_onAttach',
        'click.o_attachment_delete':'_onDelete',
        'change.o_input_file':'_onFileChanged',
    },
    /**
     *@constructor
     */
    init:function(){
        this._super.apply(this,arguments);

        if(this.field.type!=='many2many'||this.field.relation!=='ir.attachment'){
            varmsg=_t("Thetypeofthefield'%s'mustbeamany2manyfieldwitharelationto'ir.attachment'model.");
            throw_.str.sprintf(msg,this.field.string);
        }

        this.uploadedFiles={};
        this.uploadingFiles=[];
        this.fileupload_id=_.uniqueId('oe_fileupload_temp');
        this.accepted_file_extensions=(this.nodeOptions&&this.nodeOptions.accepted_file_extensions)||this.accepted_file_extensions||'*';
        $(window).on(this.fileupload_id,this._onFileLoaded.bind(this));

        this.metadata={};
    },

    destroy:function(){
        this._super();
        $(window).off(this.fileupload_id);
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *ComputetheURLofanattachment.
     *
     *@private
     *@param{Object}attachment
     *@returns{string}URLoftheattachment
     */
    _getFileUrl:function(attachment){
        return'/web/content/'+attachment.id+'?download=true';
    },
    /**
     *Processthefielddatatoaddsomeinformation(url,etc.).
     *
     *@private
     */
    _generatedMetadata:function(){
        varself=this;
        _.each(this.value.data,function(record){
            //tagging`allowUnlink`ascertainsiftheattachmentwasuser
            //uploadedorwasanexistingorsystemgeneratedattachment
            self.metadata[record.id]={
                allowUnlink:self.uploadedFiles[record.data.id]||false,
                url:self._getFileUrl(record.data),
            };
        });
    },
    /**
     *@private
     *@override
     */
    _render:function(){
        //rendertheattachments;astheattachmentswillchangesaftereach
        //_setValue,weputtherenderingheretoensuretheywillbeupdated
        this._generatedMetadata();
        this.$('.oe_placeholder_files,.o_attachments')
            .replaceWith($(qweb.render(this.template_files,{
                widget:this,
            })));
        this.$('.oe_fileupload').show();

        //displayimagethumbnail
        this.$('.o_image[data-mimetype^="image"]').each(function(){
            var$img=$(this);
            if(/gif|jpe|jpg|png/.test($img.data('mimetype'))&&$img.data('src')){
                $img.css('background-image',"url('"+$img.data('src')+"')");
            }
        });
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *@private
     */
    _onAttach:function(){
        //Thiswidgetusesahiddenformtouploadfiles.Clickingon'Attach'
        //willsimulateaclickontherelatedinput.
        this.$('.o_input_file').click();
    },
    /**
     *@private
     *@param{MouseEvent}ev
     */
    _onDelete:function(ev){
        ev.preventDefault();
        ev.stopPropagation();

        varfileID=$(ev.currentTarget).data('id');
        varrecord=_.findWhere(this.value.data,{res_id:fileID});
        if(record){
            this._setValue({
                operation:'FORGET',
                ids:[record.id],
            });
            varmetadata=this.metadata[record.id];
            if(!metadata||metadata.allowUnlink){
                this._rpc({
                    model:'ir.attachment',
                    method:'unlink',
                    args:[record.res_id],
                });
            }
        }
    },
    /**
     *@private
     *@param{Event}ev
     */
    _onFileChanged:function(ev){
        varself=this;
        ev.stopPropagation();

        varfiles=ev.target.files;
        varattachment_ids=this.value.res_ids;

        //Don'tcreateanattachmentiftheuploadwindowiscancelled.
        if(files.length===0)
            return;

        _.each(files,function(file){
            varrecord=_.find(self.value.data,function(attachment){
                returnattachment.data.name===file.name;
            });
            if(record){
                varmetadata=self.metadata[record.id];
                if(!metadata||metadata.allowUnlink){
                    //thereisaexistingattachmentwiththesamenamesowe
                    //replaceit
                    attachment_ids=_.without(attachment_ids,record.res_id);
                    self._rpc({
                        model:'ir.attachment',
                        method:'unlink',
                        args:[record.res_id],
                    });
                }
            }
            self.uploadingFiles.push(file);
        });

        this._setValue({
            operation:'REPLACE_WITH',
            ids:attachment_ids,
        });

        this.$('form.o_form_binary_form').submit();
        this.$('.oe_fileupload').hide();
        ev.target.value="";
    },
    /**
     *@private
     */
    _onFileLoaded:function(){
        varself=this;
        //thefirstargumentisn'tafilebutthejQuery.Event
        varfiles=Array.prototype.slice.call(arguments,1);
        //fileshasbeenuploaded,clearuploading
        this.uploadingFiles=[];

        varattachment_ids=this.value.res_ids;
        _.each(files,function(file){
            if(file.error){
                self.do_warn(_t('UploadingError'),file.error);
            }else{
                attachment_ids.push(file.id);
                self.uploadedFiles[file.id]=true;
            }
        });

        this._setValue({
            operation:'REPLACE_WITH',
            ids:attachment_ids,
        });
    },
});

varFieldMany2ManyTags=AbstractField.extend({
    description:_lt("Tags"),
    tag_template:"FieldMany2ManyTag",
    className:"o_field_many2manytags",
    supportedFieldTypes:['many2many'],
    custom_events:_.extend({},AbstractField.prototype.custom_events,{
        field_changed:'_onFieldChanged',
    }),
    events:_.extend({},AbstractField.prototype.events,{
        'click.o_delete':'_onDeleteTag',
    }),
    fieldsToFetch:{
        display_name:{type:'char'},
    },
    limit:1000,

    /**
     *@constructor
     */
    init:function(){
        this._super.apply(this,arguments);

        if(this.mode==='edit'){
            this.className+='o_input';
        }

        this.colorField=this.nodeOptions.color_field;
        this.hasDropdown=false;

        this._computeAvailableActions(this.record);
        //havelistentoreacttootherfieldschangestore-evaluate'create'option
        this.resetOnAnyFieldChange=this.resetOnAnyFieldChange||'create'inthis.nodeOptions;
    },

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *@override
     */
    activate:function(){
        returnthis.many2one?this.many2one.activate():false;
    },
    /**
     *@override
     *@returns{jQuery}
     */
    getFocusableElement:function(){
        returnthis.many2one?this.many2one.getFocusableElement():$();
    },
    /**
     *@override
     *@returns{boolean}
     */
    isSet:function(){
        return!!this.value&&this.value.count;
    },
    /**
     *Resetthefocusonthisfieldifitwastheoriginoftheonchangecall.
     *
     *@override
     */
    reset:function(record,event){
        varself=this;
        this._computeAvailableActions(record);
        returnthis._super.apply(this,arguments).then(function(){
            if(event&&event.target===self){
                self.activate();
            }
        });
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *@private
     *@param{any}data
     *@returns{Promise}
     */
    _addTag:function(data){
        if(!_.contains(this.value.res_ids,data.id)){
            returnthis._setValue({
                operation:'ADD_M2M',
                ids:data
            });
        }
        returnPromise.resolve();
    },
    /**
     *@private
     *@param{Object}record
     */
    _computeAvailableActions:function(record){
        constevalContext=record.evalContext;
        this.canCreate='create'inthis.nodeOptions?
            newDomain(this.nodeOptions.create,evalContext).compute(evalContext):
            true;
    },
    /**
     *GettheQWebrenderingcontextusedbythetagtemplate;thiscomputation
     *isplacedinaseparatefunctionforothertagstooverrideit.
     *
     *@private
     *@returns{Object}
     */
    _getRenderTagsContext:function(){
        varelements=this.value?_.pluck(this.value.data,'data'):[];
        return{
            colorField:this.colorField,
            elements:elements,
            hasDropdown:this.hasDropdown,
            readonly:this.mode==="readonly",
        };
    },
    /**
     *@private
     *@param{any}id
     */
    _removeTag:function(id){
        varrecord=_.findWhere(this.value.data,{res_id:id});
        this._setValue({
            operation:'FORGET',
            ids:[record.id],
        });
    },
    /**
     *@private
     */
    _renderEdit:function(){
        varself=this;
        this._renderTags();
        if(this.many2one){
            this.many2one.destroy();
        }
        this.many2one=newFieldMany2One(this,this.name,this.record,{
            mode:'edit',
            noOpen:true,
            noCreate:!this.canCreate,
            viewType:this.viewType,
            attrs:this.attrs,
        });
        //topreventtheM2OtotakethevalueoftheM2M
        this.many2one.value=false;
        //topreventtheM2OtotaketherelationalvaluesoftheM2M
        this.many2one.m2o_value='';

        this.many2one._getSearchBlacklist=function(){
            returnself.value.res_ids;
        };
        var_getSearchCreatePopupOptions=this.many2one._getSearchCreatePopupOptions;
        this.many2one._getSearchCreatePopupOptions=function(view,ids,context,dynamicFilters){
            varoptions=_getSearchCreatePopupOptions.apply(this,arguments);
            vardomain=this.record.getDomain({fieldName:this.name});
            varm2mRecords=[];
            return_.extend({},options,{
                domain:domain.concat(["!",["id","in",self.value.res_ids]]),
                disable_multiple_selection:false,
                on_selected:function(records){
                    m2mRecords.push(...records);
                },
                on_closed:function(){
                    self.many2one.reinitialize(m2mRecords);
                },
            });
        };
        returnthis.many2one.appendTo(this.$el);
    },
    /**
     *@private
     */
    _renderReadonly:function(){
        this._renderTags();
    },
    /**
     *@private
     */
    _renderTags:function(){
        this.$el.html(qweb.render(this.tag_template,this._getRenderTagsContext()));
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *@private
     *@param{MouseEvent}event
     */
    _onDeleteTag:function(event){
        event.preventDefault();
        event.stopPropagation();
        this._removeTag($(event.target).parent().data('id'));
    },
    /**
     *Controlsthechangesmadeintheinternalm2ofield.
     *
     *@private
     *@param{FlectraEvent}ev
     */
    _onFieldChanged:function(ev){
        if(ev.target!==this.many2one){
            return;
        }
        ev.stopPropagation();
        varnewValue=ev.data.changes[this.name];
        if(newValue){
            this._addTag(newValue)
                .then(ev.data.onSuccess||function(){})
                .guardedCatch(ev.data.onFailure||function(){});
            this.many2one.reinitialize(false);
        }
    },
    /**
     *@private
     *@param{KeyboardEvent}ev
     */
    _onKeydown:function(ev){
        if(ev.which===$.ui.keyCode.BACKSPACE&&this.$('input').val()===""){
            var$badges=this.$('.badge');
            if($badges.length){
                this._removeTag($badges.last().data('id'));
                return;
            }
        }
        this._super.apply(this,arguments);
    },
    /**
     *@private
     *@param{FlectraEvent}event
     */
    _onQuickCreate:function(event){
        this._quickCreate(event.data.value);
    },
});

varFieldMany2ManyTagsAvatar=FieldMany2ManyTags.extend({
    tag_template:'FieldMany2ManyTagAvatar',
    className:'o_field_many2manytagsavatar',

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *@override
     *@private
     */
    _getRenderTagsContext:function(){
        varresult=this._super.apply(this,arguments);
        result.avatarModel=this.nodeOptions.avatarModel||this.field.relation;
        result.avatarField=this.nodeOptions.avatarField||'image_128';
        returnresult;
    },
});

varFormFieldMany2ManyTags=FieldMany2ManyTags.extend({
    events:_.extend({},FieldMany2ManyTags.prototype.events,{
        'click.dropdown-toggle':'_onOpenColorPicker',
        'mousedown.o_colorpickera':'_onUpdateColor',
        'mousedown.o_colorpicker.o_hide_in_kanban':'_onUpdateColor',
    }),
    /**
     *@override
     */
    init:function(){
        this._super.apply(this,arguments);

        this.hasDropdown=!!this.colorField;
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *@private
     *@param{MouseEvent}ev
     */
    _onOpenColorPicker:function(ev){
        ev.preventDefault();
        if(this.nodeOptions.no_edit_color){
            ev.stopPropagation();
            return;
        }
        vartagID=$(ev.currentTarget).parent().data('id');
        vartagColor=$(ev.currentTarget).parent().data('color');
        vartag=_.findWhere(this.value.data,{res_id:tagID});
        if(tag&&this.colorFieldintag.data){//ifthereisacolorfieldontherelatedmodel
            this.$color_picker=$(qweb.render('FieldMany2ManyTag.colorpicker',{
                'widget':this,
                'tag_id':tagID,
            }));

            $(ev.currentTarget).after(this.$color_picker);
            this.$color_picker.dropdown();
            this.$color_picker.attr("tabindex",1).focus();
            if(!tagColor){
                this.$('.custom-checkboxinput').prop('checked',true);
            }
        }
    },
    /**
     *Updatecolorbasedontargetofev
     *eitherbyclickingonacoloritemor
     *bytogglingthe'HideinKanban'checkbox.
     *
     *@private
     *@param{MouseEvent}ev
     */
    _onUpdateColor:function(ev){
        ev.preventDefault();
        var$target=$(ev.currentTarget);
        varcolor=$target.data('color');
        varid=$target.data('id');
        var$tag=this.$(".badge[data-id='"+id+"']");
        varcurrentColor=$tag.data('color');
        varchanges={};

        if($target.is('.o_hide_in_kanban')){
            var$checkbox=$('.o_hide_in_kanban.custom-checkboxinput');
            $checkbox.prop('checked',!$checkbox.prop('checked'));//togglecheckbox
            this.prevColors=this.prevColors?this.prevColors:{};
            if($checkbox.is(':checked')){
                this.prevColors[id]=currentColor;
            }else{
                color=this.prevColors[id]?this.prevColors[id]:1;
            }
        }elseif($target.is('[class^="o_tag_color"]')){//$target.is('o_tag_color_')
            if(color===currentColor){return;}
        }

        changes[this.colorField]=color;

        this.trigger_up('field_changed',{
            dataPointID:_.findWhere(this.value.data,{res_id:id}).id,
            changes:changes,
            force_save:true,
        });
    },
});

varKanbanFieldMany2ManyTags=FieldMany2ManyTags.extend({
    //Removeeventhandlersonthiswidgettoensurethatthekanban'global
    //click'openstheclickedrecord,eveniftheclickisdoneonatag
    //Thisisnecessarybecauseoftheweird'globalclick'logicin
    //KanbanRecord,whichshoulddefinitelybecleaned.
    //Anyway,thosehandlersareonlynecessaryinFormandListviews,sowe
    //canremovedthemhere.
    events:AbstractField.prototype.events,

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *@override
     *@private
     */
    _render:function(){
        varself=this;

        if(this.$el){
            this.$el.empty().addClass('o_field_many2manytagso_kanban_tags');
        }

        _.each(this.value.data,function(m2m){
            if(self.colorFieldinm2m.data&&!m2m.data[self.colorField]){
                //Whenacolorfieldisspecifiedandthatcoloristhedefault
                //one,thekanbantagisnotrendered.
                return;
            }

            $('<span>',{
                class:'o_tago_tag_color_'+(m2m.data[self.colorField]||0),
                text:m2m.data.display_name,
            })
            .prepend('<span>')
            .appendTo(self.$el);
        });
    },
});

varFieldMany2ManyCheckBoxes=AbstractField.extend({
    description:_lt("Checkboxes"),
    template:'FieldMany2ManyCheckBoxes',
    events:_.extend({},AbstractField.prototype.events,{
        change:'_onChange',
    }),
    specialData:"_fetchSpecialRelation",
    supportedFieldTypes:['many2many'],
    //setanarbitraryhighlimittoensurethatalldatareturnedbytheserver
    //areprocessedbytheBasicModel(otherwiseitwouldbe40)
    limit:100000,
    init:function(){
        this._super.apply(this,arguments);
        this.m2mValues=this.record.specialData[this.name];
    },

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    isSet:function(){
        returntrue;
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *@private
     */
    _renderCheckboxes:function(){
        varself=this;
        this.m2mValues=this.record.specialData[this.name];
        this.$el.html(qweb.render(this.template,{widget:this}));
        _.each(this.value.res_ids,function(id){
            self.$('input[data-record-id="'+id+'"]').prop('checked',true);
        });
    },
    /**
     *@override
     *@private
     */
    _renderEdit:function(){
        this._renderCheckboxes();
    },
    /**
     *@override
     *@private
     */
    _renderReadonly:function(){
        this._renderCheckboxes();
        this.$("input").prop("disabled",true);
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *@private
     */
    _onChange:function(){
        //Getthelistofselectedids
        varids=_.map(this.$('input:checked'),function(input){
            return$(input).data("record-id");
        });
        //Thenumberofdisplayedcheckboxesislimitedto100(name_search
        //limit,server-side),topreventextremecaseswherethousandsof
        //recordsarefetched/displayed.Ifnotallvaluesaredisplayed,itmay
        //happenthatsomevaluesthatareintherelationaren'tavailableinthe
        //widget.Inthiscase,whentheuser(un)selectsavalue,wedon't
        //wanttoremovethosenondisplayedvaluesfromtherelation.Forthat
        //reason,wemanuallyaddthosevaluestothelistofids.
        constdisplayedIds=this.m2mValues.map(v=>v[0]);
        constidsInRelation=this.value.res_ids;
        ids=ids.concat(idsInRelation.filter(a=>!displayedIds.includes(a)));
        this._setValue({
            operation:'REPLACE_WITH',
            ids:ids,
        });
    },
});

//------------------------------------------------------------------------------
//Widgetshandlingbothbasicandrelationalfields(selectionandMany2one)
//------------------------------------------------------------------------------

varFieldStatus=AbstractField.extend({
    className:'o_statusbar_status',
    events:{
        'clickbutton:not(.dropdown-toggle)':'_onClickStage',
    },
    specialData:"_fetchSpecialStatus",
    supportedFieldTypes:['selection','many2one'],
    /**
     *@overrideinitfromAbstractField
     */
    init:function(){
        this._super.apply(this,arguments);
        this._setState();
        this._onClickStage=_.debounce(this._onClickStage,300,true);//TODOmaybenotusefulanymore?

        //Retro-compatibility:clickableusedtobedefinedinthefieldattrs
        //insteadofoptions.
        //Ifnotset,thestatusbarisnotclickable.
        try{
            this.isClickable=!!JSON.parse(this.attrs.clickable);
        }catch(_){
            this.isClickable=!!this.nodeOptions.clickable;
        }
    },

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *Returnsfalsetoforcethestatusbartobealwaysvisible(eventhefield
     *itnotset).
     *
     *@override
     *@returns{boolean}alwaysfalse
     */
    isEmpty:function(){
        returnfalse;
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *@override_resetfromAbstractField
     *@private
     */
    _reset:function(){
        this._super.apply(this,arguments);
        this._setState();
    },
    /**
     *Preparestherenderingdatafromthefieldandrecorddata.
     *@private
     */
    _setState:function(){
        varself=this;
        if(this.field.type==='many2one'){
            this.status_information=_.map(this.record.specialData[this.name],function(info){
                return_.extend({
                    selected:info.id===self.value.res_id,
                },info);
            });
        }else{
            varselection=this.field.selection;
            if(this.attrs.statusbar_visible){
                varrestriction=this.attrs.statusbar_visible.split(",");
                selection=_.filter(selection,function(val){
                    return_.contains(restriction,val[0])||val[0]===self.value;
                });
            }
            this.status_information=_.map(selection,function(val){
                return{id:val[0],display_name:val[1],selected:val[0]===self.value,fold:false};
            });
        }
    },
    /**
     *@override_renderfromAbstractField
     *@private
     */
    _render:function(){
        varselections=_.partition(this.status_information,function(info){
            return(info.selected||!info.fold);
        });
        this.$el.html(qweb.render("FieldStatus.content",{
            selection_unfolded:selections[0],
            selection_folded:selections[1],
            clickable:this.isClickable,
        }));
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *Calledwhenonstatusstageisclicked->setsthefieldvalue.
     *
     *@private
     *@param{MouseEvent}e
     */
    _onClickStage:function(e){
        this._setValue($(e.currentTarget).data("value"));
    },
});

/**
 *TheFieldSelectionwidgetisasimpleselecttagwithadropdownmenuto
 *allowtheselectionofarangeofvalues. Itisdesignedtoworkwithfields
 *oftype'selection'and'many2one'.
 */
varFieldSelection=AbstractField.extend({
    description:_lt("Selection"),
    template:'FieldSelection',
    specialData:"_fetchSpecialRelation",
    supportedFieldTypes:['selection'],
    events:_.extend({},AbstractField.prototype.events,{
        'change':'_onChange',
    }),
    /**
     *@override
     */
    init:function(){
        this._super.apply(this,arguments);
        this._setValues();
    },

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *@override
     *@returns{jQuery}
     */
    getFocusableElement:function(){
        returnthis.$el&&this.$el.is('select')?this.$el:$();
    },
    /**
     *@override
     */
    isSet:function(){
        returnthis.value!==false;
    },
    /**
     *Listentomodifiersupdatestohide/showthefalsyvalueinthedropdown
     *accordingtotherequiredmodifier.
     *
     *@override
     */
    updateModifiersValue:function(){
        this._super.apply(this,arguments);
        if(!this.attrs.modifiersValue.invisible&&this.mode!=='readonly'){
            this._setValues();
            this._renderEdit();
        }
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *@override
     *@private
     */
    _renderEdit:function(){
        this.$el.empty();
        varrequired=this.attrs.modifiersValue&&this.attrs.modifiersValue.required;
        for(vari=0;i<this.values.length;i++){
            vardisabled=required&&this.values[i][0]===false;

            this.$el.append($('<option/>',{
                value:JSON.stringify(this.values[i][0]),
                text:this.values[i][1],
                style:disabled?"display:none":"",
            }));
        }
        this.$el.val(JSON.stringify(this._getRawValue()));
    },
    /**
     *@override
     *@private
     */
    _renderReadonly:function(){
        this.$el.empty().text(this._formatValue(this.value));
        this.$el.attr('raw-value',this._getRawValue());
    },
    _getRawValue:function(){
        varraw_value=this.value;
        if(this.field.type==='many2one'&&raw_value){
            raw_value=raw_value.data.id;
        }
        returnraw_value;
    },
    /**
     *@override
     */
    _reset:function(){
        this._super.apply(this,arguments);
        this._setValues();
    },
    /**
     *Setsthepossiblefieldvalues.Ifthefieldisamany2one,thosevalues
     *maychangeduringthelifecycleofthewidgetifthedomainchange(an
     *onchangemaychangethedomain).
     *
     *@private
     */
    _setValues:function(){
        if(this.field.type==='many2one'){
            this.values=this.record.specialData[this.name];
            this.formatType='many2one';
        }else{
            this.values=_.reject(this.field.selection,function(v){
                returnv[0]===false&&v[1]==='';
            });
        }
        this.values=[[false,this.attrs.placeholder||'']].concat(this.values);
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *Thesmallslightdifficultyisthatwehavetosetthevaluedifferently
     *dependingonthefieldtype.
     *
     *@private
     */
    _onChange:function(){
        varres_id=JSON.parse(this.$el.val());
        if(this.field.type==='many2one'){
            varvalue=_.find(this.values,function(val){
                returnval[0]===res_id;
            });
            this._setValue({id:res_id,display_name:value[1]});
        }else{
            this._setValue(res_id);
        }
    },
});

varFieldRadio=FieldSelection.extend({
    description:_lt("Radio"),
    template:null,
    className:'o_field_radio',
    tagName:'span',
    specialData:"_fetchSpecialMany2ones",
    supportedFieldTypes:['selection','many2one'],
    events:_.extend({},AbstractField.prototype.events,{
        'clickinput':'_onInputClick',
    }),
    /**
     *@constructsFieldRadio
     */
    init:function(){
        this._super.apply(this,arguments);
        if(this.mode==='edit'){
            this.tagName='div';
            this.className+=this.nodeOptions.horizontal?'o_horizontal':'o_vertical';
        }
        this.unique_id=_.uniqueId("radio");
        this._setValues();
    },

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *@override
     *@returns{boolean}alwaystrue
     */
    isSet:function(){
        returntrue;
    },

    /**
     *Returnsthecurrently-checkedradiobutton,orthefirstoneifnoradio
     *buttonischecked.
     *
     *@override
     */
    getFocusableElement:function(){
        varchecked=this.$("[checked='true']");
        returnchecked.length?checked:this.$("[data-index='0']");
    },

    /**
     *Associatesthe'for'attributetotheradiogroup,insteadoftheselected
     *radiobutton.
     *
     *@param{string}id
     */
    setIDForLabel:function(id){
        this.$el.attr('id',id);
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *@private
     *@override
     */
    _renderEdit:function(){
        varself=this;
        varcurrentValue;
        if(this.field.type==='many2one'){
            currentValue=this.value&&this.value.data.id;
        }else{
            currentValue=this.value;
        }
        this.$el.empty();
        this.$el.attr('role','radiogroup')
            .attr('aria-label',this.string);
        _.each(this.values,function(value,index){
            self.$el.append(qweb.render('FieldRadio.button',{
                checked:value[0]===currentValue,
                id:self.unique_id+'_'+value[0],
                index:index,
                name:self.unique_id,
                value:value,
            }));
        });
    },
    /**
     *@override
     */
    _reset:function(){
        this._super.apply(this,arguments);
        this._setValues();
    },
    /**
     *Setsthepossiblefieldvalues.Ifthefieldisamany2one,thosevalues
     *maychangeduringthelifecycleofthewidgetifthedomainchange(an
     *onchangemaychangethedomain).
     *
     *@private
     */
    _setValues:function(){
        if(this.field.type==='selection'){
            this.values=this.field.selection||[];
        }elseif(this.field.type==='many2one'){
            this.values=_.map(this.record.specialData[this.name],function(val){
                return[val.id,val.display_name];
            });
        }
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *@private
     *@param{MouseEvent}event
     */
    _onInputClick:function(event){
        varindex=$(event.target).data('index');
        varvalue=this.values[index];
        if(this.field.type==='many2one'){
            this._setValue({id:value[0],display_name:value[1]});
        }else{
            this._setValue(value[0]);
        }
    },
});


varFieldSelectionBadge=FieldSelection.extend({
    description:_lt("Badges"),
    template:null,
    className:'o_field_selection_badge',
    tagName:'span',
    specialData:"_fetchSpecialMany2ones",
    events:_.extend({},AbstractField.prototype.events,{
        'clickspan.o_selection_badge':'_onBadgeClicked',
    }),

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *@private
     *@override
     */
    _renderEdit:function(){
        this.currentValue=this.value;

        if(this.field.type==='many2one'){
            this.currentValue=this.value&&this.value.data.id;
        }
        this.$el.empty();
        this.$el.html(qweb.render('FieldSelectionBadge',{'values':this.values,'current_value':this.currentValue}));
    },
    /**
     *Setsthepossiblefieldvalues.Ifthefieldisamany2one,thosevalues
     *maychangeduringthelifecycleofthewidgetifthedomainchange(an
     *onchangemaychangethedomain).
     *
     *@private
     *@override
     */
    _setValues:function(){
        //Note:Wecanmakeabstractwidgetforcommoncodeinradioandselectionbadge
        if(this.field.type==='selection'){
            this.values=this.field.selection||[];
        }elseif(this.field.type==='many2one'){
            this.values=_.map(this.record.specialData[this.name],function(val){
                return[val.id,val.display_name];
            });
        }
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *@private
     *@param{MouseEvent}event
     */
    _onBadgeClicked:function(event){
        varindex=$(event.target).data('index');
        varvalue=this.values[index];
        if(value[0]!==this.currentValue){
            if(this.field.type==='many2one'){
                this._setValue({id:value[0],display_name:value[1]});
            }else{
                this._setValue(value[0]);
            }
        }else{
            this._setValue(false);
        }
    },
});

varFieldSelectionFont=FieldSelection.extend({

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *ChangesCSSforalloptionsaccordingtotheirvalue.
     *Alsoremovesemptylabels.
     *
     *@private
     *@override
     */
    _renderEdit:function(){
        this._super.apply(this,arguments);

        this.$('option').each(function(i,option){
            if(!option.label){
                $(option).remove();
            }
            $(option).css('font-family',option.value);
        });
        this.$el.css('font-family',this.value);
    },
});

/**
 *TheFieldReferenceisacombinationofaselect(forthemodel)and
 *aFieldMany2oneforitsvalue.
 *Itsinternrepresentationissimilartothemany2one(adatapointwitha
 *`name_get`asdata).
 *Notethatthereissomelogictosupportcharfieldbecauseofoneuseinour
 *codebase,butthisuseshouldberemovedalongwiththisnote.
 */
varFieldReference=FieldMany2One.extend({
    specialData:"_fetchSpecialReference",
    supportedFieldTypes:['reference'],
    template:'FieldReference',
    events:_.extend({},FieldMany2One.prototype.events,{
        'changeselect':'_onSelectionChange',
    }),
    /**
     *@override
     */
    init:function(){
        this._super.apply(this,arguments);

        //needstobecopiedasitisanunmutableobject
        this.field=_.extend({},this.field);

        this._setState();
    },
    /**
     *@override
     */
    start:function(){
        this.$('select').val(this.field.relation);
        returnthis._super.apply(this,arguments);
    },

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *@override
     *@returns{jQuery}
     */
    getFocusableElement:function(){
        if(this.mode==='edit'&&!this.field.relation){
            returnthis.$('select');
        }
        returnthis._super.apply(this,arguments);
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *Gettheencompassingrecord'sdisplay_name
     *
     *@override
     */
    _formatValue:function(){
        varvalue;
        if(this.field.type==='char'){
            value=this.record.specialData[this.name];
        }else{
            value=this.value;
        }
        returnvalue&&value.data&&value.data.display_name||'';
    },

    /**
     *Addaselectineditmode(forthemodel).
     *
     *@override
     */
    _renderEdit:function(){
        this._super.apply(this,arguments);

        if(this.$('select').val()){
            this.$('.o_input_dropdown').show();
            this.$el.addClass('o_row');//thisclassisusedtodisplaythetwo
                                        //components(select&input)onthesameline
        }else{
            //hidethemany2oneiftheselectionisempty
            this.$('.o_input_dropdown').hide();
        }

    },
    /**
     *@override
     *@private
     */
    _reset:function(){
        this._super.apply(this,arguments);
        varvalue=this.$('select').val();
        this._setState();
        this.$('select').val(this.value&&this.value.model||value);
    },
    /**
     *Set`relation`keyinfieldproperties.
     *
     *@private
     *@param{string}model
     */
    _setRelation:function(model){
        //usedtogeneratethesearchinmany2one
        this.field.relation=model;
    },
    /**
     *@private
     */
    _setState:function(){
        if(this.field.type==='char'){
            //inthiscase,thevalueisstoredinspecialDatainstead
            this.value=this.record.specialData[this.name];
        }

        if(this.value){
            this._setRelation(this.value.model);
        }
    },
    /**
     *@override
     *@private
     */
    _setValue:function(value,options){
        value=value||{};
        //weneedtospecifythemodelforthechangeinbasic_model
        //thevalueisthennowadictwithid,display_nameandmodel
        value.model=this.$('select').val();
        returnthis._super(value,options);
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *Whentheselection(model)changes,themany2oneisreset.
     *
     *@private
     */
    _onSelectionChange:function(){
        varvalue=this.$('select').val();
        this.reinitialize(false);
        this._setRelation(value);
    },
});

return{
    FieldMany2One:FieldMany2One,
    Many2oneBarcode:Many2oneBarcode,
    KanbanFieldMany2One:KanbanFieldMany2One,
    ListFieldMany2One:ListFieldMany2One,
    Many2OneAvatar:Many2OneAvatar,

    FieldX2Many:FieldX2Many,
    FieldOne2Many:FieldOne2Many,

    FieldMany2Many:FieldMany2Many,
    FieldMany2ManyBinaryMultiFiles:FieldMany2ManyBinaryMultiFiles,
    FieldMany2ManyCheckBoxes:FieldMany2ManyCheckBoxes,
    FieldMany2ManyTags:FieldMany2ManyTags,
    FieldMany2ManyTagsAvatar:FieldMany2ManyTagsAvatar,
    FormFieldMany2ManyTags:FormFieldMany2ManyTags,
    KanbanFieldMany2ManyTags:KanbanFieldMany2ManyTags,

    FieldRadio:FieldRadio,
    FieldSelectionBadge:FieldSelectionBadge,
    FieldSelection:FieldSelection,
    FieldStatus:FieldStatus,
    FieldSelectionFont:FieldSelectionFont,

    FieldReference:FieldReference,
};

});
