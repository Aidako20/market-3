flectra.define('web.FieldWrapper',function(require){
    "usestrict";

    const{ComponentWrapper}=require('web.OwlCompatibility');
    constfield_utils=require('web.field_utils');

    /**
     *ThisfiledefinestheFieldWrappercomponent,anextensionofComponentWrapper,
     *neededtoinstanciateOwlfieldsinsidelegacywidgets.Thiscomponent
     *willbenolongernecessaryassoonasalllegacywidgetsusingfieldswill
     *berewritteninOwl.
     */
    classFieldWrapperextendsComponentWrapper{
        constructor(){
            super(...arguments);

            this._data={};

            constoptions=this.props.options||{};
            constrecord=this.props.record;
            this._data.name=this.props.fieldName;
            this._data.record=record;
            this._data.field=record.fields[this._data.name];
            this._data.viewType=options.viewType||'default';
            constfieldsInfo=record.fieldsInfo[this._data.viewType];
            this._data.attrs=options.attrs||(fieldsInfo&&fieldsInfo[this._data.name])||{};
            this._data.additionalContext=options.additionalContext||{};
            this._data.value=record.data[this._data.name];
            this._data.recordData=record.data;
            this._data.string=this._data.attrs.string||this._data.field.string||this._data.name;
            this._data.nodeOptions=this._data.attrs.options||{};
            this._data.dataPointID=record.id;
            this._data.res_id=record.res_id;
            this._data.model=record.model;
            this._data.mode=options.mode||"readonly";
            this._data.formatType=this._data.attrs.widgetinfield_utils.format?
                                this._data.attrs.widget:
                                this._data.field.type;
            this._data.formatOptions={};
            this._data.parseOptions={};
            if(this._data.attrs.decorations){
                this._data.resetOnAnyFieldChange=true;
            }

            for(letkeyinthis._data){
                Object.defineProperty(this,key,{
                    get:()=>{
                        if(this.el){
                            if(key==='dataPointID'){
                                returnthis.componentRef.comp.dataPointId;
                            }elseif(key==='res_id'){
                                returnthis.componentRef.comp.resId;
                            }
                        }
                        return(this.el?this.componentRef.comp:this._data)[key];
                    },
                });
            }
        }

        /**
         *Rendererssetthe'__node'attributeonfieldstheyinstantiate.It
         *isusedforinstancetoevaluatemodifiersonmulti-edition.Inthis
         *case,thecontrollerreadsthispropertyonthetargetoftheevent.
         *However,withOwlfieldComponents,itissetontheFieldWrapper,
         *nottherealfieldComponent,whichtriggersthe'field-changed'
         *event.ThisfunctionwritestheattributeonthatfieldComponent.
         */
        mounted(){
            super.mounted(...arguments);
            this.componentRef.comp.__node=this.__node;
        }

        //----------------------------------------------------------------------
        //Getters
        //----------------------------------------------------------------------

        get$el(){
            return$(this.el);
        }
        getfieldDependencies(){
            returnthis.Component.fieldDependencies;
        }
        getspecialData(){
            returnthis.Component.specialData;
        }
        getsupportedFieldTypes(){
            returnthis.Component.supportedFieldTypes;
        }
        getdescription(){
            returnthis.Component.description;
        }
        getnoLabel(){
            returnthis.Component.noLabel;
        }

        //----------------------------------------------------------------------
        //Public
        //----------------------------------------------------------------------

        activate(){
            returnthis.componentRef.comp.activate(...arguments);
        }
        commitChanges(){
            returnthis.componentRef.comp.commitChanges(...arguments);
        }
        getFocusableElement(){
            return$(this.componentRef.comp.focusableElement);
        }
        isEmpty(){
            returnthis.componentRef.comp.isEmpty;
        }
        isFocusable(){
            returnthis.componentRef.comp.isFocusable;
        }
        isSet(){
            if(this.componentRef.comp){
                returnthis.componentRef.comp.isSet;
            }
            //becauseofthewillStart,therealfieldcomponentmaynotbe
            //instantiatedyetwhentherendererfirstasksifitisset
            //(onlythewrapperisinstantiated),soweinstantiateone
            //withthesameprops,getits'isSet'status,anddestroyit.
            constc=newthis.Component(null,this.props);
            constisSet=c.isSet;
            c.destroy();
            returnisSet;
        }
        isValid(){
            returnthis.componentRef.comp.isValid;
        }
        removeInvalidClass(){
            returnthis.componentRef.comp.removeInvalidClass(...arguments);
        }
        reset(record,event){
            returnthis.update({record,event});
        }
        setIDForLabel(){
            returnthis.componentRef.comp.setIdForLabel(...arguments);
        }
        setInvalidClass(){
            returnthis.componentRef.comp.setInvalidClass(...arguments);
        }
        updateModifiersValue(modifiers){
            if(this.props.options.attrs){
                this.props.options.attrs.modifiersValue=modifiers||{};
            }else{
                constviewType=this.props.options.viewType||'default';
                constfieldsInfo=this.props.record.fieldsInfo[viewType];
                fieldsInfo[this.props.fieldName].modifiersValue=modifiers||{};
            }
            this.componentRef.comp.props=this.props;
        }
    }

    returnFieldWrapper;
});
