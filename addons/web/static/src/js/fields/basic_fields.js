flectra.define('web.basic_fields',function(require){
"usestrict";

/**
 *Thismodulecontainsmostofthebasic(meaning:nonrelational)field
 *widgets.Fieldwidgetsaresupposedtobeusedinviewsinheritingfrom
 *BasicView,so,theycanworkwiththerecordsobtainedfromaBasicModel.
 */

varAbstractField=require('web.AbstractField');
varconfig=require('web.config');
varcore=require('web.core');
vardatepicker=require('web.datepicker');
vardeprecatedFields=require('web.basic_fields.deprecated');
vardom=require('web.dom');
varDomain=require('web.Domain');
varDomainSelector=require('web.DomainSelector');
varDomainSelectorDialog=require('web.DomainSelectorDialog');
varframework=require('web.framework');
varpy_utils=require('web.py_utils');
varsession=require('web.session');
varutils=require('web.utils');
varview_dialogs=require('web.view_dialogs');
varfield_utils=require('web.field_utils');
vartime=require('web.time');
const{ColorpickerDialog}=require('web.Colorpicker');

letFieldBoolean=deprecatedFields.FieldBoolean;

require("web.zoomflectra");

varqweb=core.qweb;
var_t=core._t;
var_lt=core._lt;

varTranslatableFieldMixin={
    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *@private
     *@returns{jQuery}
     */
    _renderTranslateButton:function(){
        if(_t.database.multi_lang&&this.field.translate){
            varlang=_t.database.parameters.code.split('_')[0].toUpperCase();
            return$(`<spanclass="o_field_translatebtnbtn-link">${lang}</span>`)
                .on('click',this._onTranslate.bind(this));
        }
        return$();
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *openthetranslationviewforthecurrentfield
     *
     *@param{MouseEvent}ev
     *@private
     */
    _onTranslate:function(ev){
        ev.preventDefault();
        this.trigger_up('translate',{
            fieldName:this.name,
            id:this.dataPointID,
            isComingFromTranslationAlert:false,
        });
    },
};

varDebouncedField=AbstractField.extend({
    /**
     *Forfieldwidgetsthatmayhavealargenumberoffieldchangesquickly,
     *itcouldbeagoodideatodebouncethechanges.Inthatcase,thisis
     *thesuggestedvalue.
     */
    DEBOUNCE:1000000000,

    /**
     *Overrideinittodebouncethefield"_doAction"method(bycreatinganew
     *onecalled"_doDebouncedAction").Bydefault,thismethodnotifiesthe
     *currentvalueofthefieldandwedonotwantthattohappenforeach
     *keystroke.Notethatthisisdonehereandnotontheprototype,sothat
     *eachDebouncedFieldhasitsowndebouncedfunctiontoworkwith.Also,if
     *thedebouncevalueissetto0,nodebouncingisdone,whichisreally
     *usefulfortheunittests.
     *
     *@constructor
     *@override
     */
    init:function(){
        this._super.apply(this,arguments);

        //_isDirtyisusedtodetectthattheuserinteractedatleast
        //oncewiththewidget,sothatwecanpreventitfromtriggeringa
        //field_changedincommitChangesiftheuserdidn'tchangeanything
        this._isDirty=false;
        if(this.mode==='edit'){
            if(this.DEBOUNCE){
                this._doDebouncedAction=_.debounce(this._doAction,this.DEBOUNCE);
            }else{
                this._doDebouncedAction=this._doAction;
            }

            varself=this;
            vardebouncedFunction=this._doDebouncedAction;
            this._doDebouncedAction=function(){
                self._isDirty=true;
                debouncedFunction.apply(self,arguments);
            };
        }
    },

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *Thisfieldmainactionisdebouncedandmightsetsthefield'svalue.
     *Whenthechangesareaskedtobecommited,thedebouncedactionhasto
     *bedoneimmediately.
     *
     *@override
     */
    commitChanges:function(){
        if(this._isDirty&&this.mode==='edit'){
            returnthis._doAction();
        }
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *Bydefault,notifiestheoutsideworldofthenewvalue(checkedfromthe
     *DOM).Thismethodhasanautomatically-created(@seeinit)associated
     *debouncedversioncalled_doDebouncedAction.
     *
     *@private
     */
    _doAction:function(){
        //as_doActionmaybedebounced,itmayhappenthatitiscalledafter
        //thewidgethasbeendestroyed,andinthiscase,wedon'twantitto
        //doanything(commitChangesensuresthatifithaslocalchanges,they
        //aretriggeredupbeforethewidgetisdestroyed,ifnecessary).
        if(!this.isDestroyed()){
            returnthis._setValue(this._getValue());
        }
    },
    /**
     *Shouldreturnthecurrentvalueofthefield,intheDOM(forexample,
     *thecontentoftheinput)
     *
     *@abstract
     *@private
     *@returns{*}
     */
    _getValue:function(){},
    /**
     *Shouldmakeanactiononlostfocus.
     *
     *@abstract
     *@private
     *@returns{*}
     */
    _onBlur:function(){},
});

varInputField=DebouncedField.extend({
    custom_events:_.extend({},DebouncedField.prototype.custom_events,{
        field_changed:'_onFieldChanged',
    }),
    events:_.extend({},DebouncedField.prototype.events,{
        'input':'_onInput',
        'change':'_onChange',
        'blur':'_onBlur',
    }),

    /**
     *Preparestherenderingsothatitcreatesanelementtheusercantype
     *textintoineditmode.
     *
     *@override
     */
    init:function(){
        this._super.apply(this,arguments);
        this.nodeOptions.isPassword='password'inthis.attrs;
        if(this.mode==='edit'){
            this.tagName='input';
        }
        //Weneedtoknowifthewidgetisdirty(i.e.iftheuserhaschanged
        //thevalue,andthosechangeshaven'tbeenacknowledgedyetbythe
        //environment),topreventerasingthatnewvalueonareset(e.g.
        //comingbyanonchangeonanotherfield)
        this.isDirty=false;
        this.lastChangeEvent=undefined;
    },

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *Returnstheassociated<input/>element.
     *
     *@override
     */
    getFocusableElement:function(){
        returnthis.$input||$();
    },
    /**
     *Re-rendersthewidgetifitisn'tdirty.Thewidgetisdirtyiftheuser
     *changedthevalue,andthatchangehasn'tbeenacknowledgedyetbythe
     *environment.Forexample,anotherfieldwithanonchangehasbeenupdated
     *andthisfieldisupdatedbeforetheonchangereturns.Two'_setValue'
     *aredone(thisissequential),thefirstonereturnsandthiswidgetis
     *reset.However,ithaspendingchanges,sowedon'tre-render.
     *
     *@override
     */
    reset:function(record,event){
        this._reset(record,event);
        if(!event||event===this.lastChangeEvent){
            this.isDirty=false;
        }
        if(this.isDirty||(event&&event.target===this&&
            event.data.changes&&
            event.data.changes[this.name]===this.value)){
            if(this.attrs.decorations){
                //ifafieldismodified,thenitcouldhavetriggeredanonchange
                //whichchangedsomeofitsdecorations.Sincewebypassthe
                //renderfunction,weneedtoapplydecorationsheretomake
                //suretheyarerecomputed.
                this._applyDecorations();
            }
            returnPromise.resolve();
        }else{
            returnthis._render();
        }
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *@override
     *@returns{string}thecontentoftheinput
     */
    _getValue:function(){
        returnthis.$input.val();
    },
    /**
     *Formatsaninputelementforeditmode.Thisisinaseparatefunctionso
     *extendingwidgetscanuseitontheirinputwithouthavinginputastagName.
     *
     *@private
     *@param{jQuery|undefined}$input
     *       The<input/>elementtoprepareandsaveasthe$inputattribute.
     *       Ifnoelementisgiven,the<input/>iscreated.
     *@returns{jQuery}thepreparedthis.$inputelement
     */
    _prepareInput:function($input){
        this.$input=$input||$("<input/>");
        this.$input.addClass('o_input');

        varinputAttrs={placeholder:this.attrs.placeholder||""};
        varinputVal;
        if(this.nodeOptions.isPassword){
            inputAttrs=_.extend(inputAttrs,{type:'password',autocomplete:this.attrs.autocomplete||'new-password'});
            inputVal=this.value||'';
        }else{
            inputAttrs=_.extend(inputAttrs,{type:'text',autocomplete:this.attrs.autocomplete||'off'});
            inputVal=this._formatValue(this.value);
        }

        this.$input.attr(inputAttrs);
        this.$input.val(inputVal);

        returnthis.$input;
    },
    /**
     *FormatstheHTMLinputtagforeditmodeandstoresselectionstatus.
     *
     *@override
     *@private
     */
    _renderEdit:function(){
        //Keepareferencetotheinputso$elcanbecomesomethingelse
        //withoutlosingtrackoftheactualinput.
        this._prepareInput(this.$el);
    },
    /**
     *Resetsthecontenttotheformatedvalueinreadonlymode.
     *
     *@override
     *@private
     */
    _renderReadonly:function(){
        this.$el.text(this._formatValue(this.value));
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *Weimmediatelynotifytheoutsideworldwhenthisfieldconfirmsits
     *changes.
     *
     *@private
     */
    _onChange:function(){
        this._doAction();
    },
    /**
     *Listenstoevents'field_changed'tokeeptrackofthelasteventthat
     *hasbeentrigerred.Thisallowstodetectthatallchangeshavebeen
     *acknowledgedbytheenvironment.
     *
     *@param{FlectraEvent}event'field_changed'event
     */
    _onFieldChanged:function(event){
        this.lastChangeEvent=event;
    },
    /**
     *Calledwhentheuseristypingtext->Bydefaultthisonlycallsa
     *debouncedmethodtonotifytheoutsideworldofthechanges.
     *@see_doDebouncedAction
     *
     *@private
     */
    _onInput:function(){
        this.isDirty=!this._isLastSetValue(this.$input.val());
        this._doDebouncedAction();
    },
    /**
     *Stopstheleft/rightnavigationmoveeventifthecursorisnotatthe
     *start/endoftheinputelement.
     *
     *@private
     *@param{FlectraEvent}ev
     */
    _onNavigationMove:function(ev){
        this._super.apply(this,arguments);

        //thefollowingcodeonlymakessenseineditmode,withaninput
        if(this.mode==='edit'&&ev.data.direction!=='cancel'){
            varinput=this.$input[0];
            varselecting=(input.selectionEnd!==input.selectionStart);
            if((ev.data.direction==="left"&&(selecting||input.selectionStart!==0))
                ||(ev.data.direction==="right"&&(selecting||input.selectionStart!==input.value.length))){
                ev.stopPropagation();
            }
            if(ev.data.direction==='next'&&
                this.attrs.modifiersValue&&
                this.attrs.modifiersValue.required&&
                this.viewType!=='list'){
                if(!this.$input.val()){
                    this.setInvalidClass();
                    ev.stopPropagation();
                }else{
                    this.removeInvalidClass();
                }
            }
        }
    },
});

varNumericField=InputField.extend({
    tagName:'span',

    /**
     *@override
     */
    init(){
        this._super.apply(this,arguments);
        this.shouldFormat=Boolean(
            JSON.parse('format'inthis.nodeOptions?this.nodeOptions.format:true)
        );
    },

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *Fornumericfields,0isavalidvalue.
     *
     *@override
     */
    isSet:function(){
        returnthis.value===0||this._super.apply(this,arguments);
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *Evaluateastringrepresentingasimpleformula,
     *aformulaiscomposedofnumbersandarithmeticoperations
     *(ex:4+3*2)
     *
     *Supportedarithmeticoperations:+-*/^()
     *Sinceeachnumberintheformulacanbeexpressedinuserlocale,
     *weparseeachfloatvalueinsidetheformulausingtheusercontext
     *Thisfunctionusespy_evaltosafeevaltheformula.
     *Weassumethatthisfunctionisusedasacalculatorsooperand^(xor)
     *isreplacedbyoperand**(power)sothatusersthatareusedto
     *excelorlibreofficearenotconfused
     *
     *@private
     *@paramexpr
     *@returnafloatrepresentingtheresultoftheevaluatedformula
     *@throwserrorifformulacan'tbeevaluated
     */
    _evalFormula:function(expr,context){
        //removeextraspace
        varval=expr.replace(newRegExp(/()/g),'');
        varsafeEvalString='';
        for(letvofval.split(newRegExp(/([-+*/()^])/g))){
            if(!['+','-','*','/','(',')','^'].includes(v)&&v.length){
                //checkifthisisafloatandtakeintoaccountuserdelimiterpreference
                v=field_utils.parse.float(v);
            }
            if(v==='^'){
                v='**';
            }
            safeEvalString+=v;
        };
        returnpy_utils.py_eval(safeEvalString,context);
    },

    /**
     *Formatnumericalvalue(integerorfloat)
     *
     *Note:Wehavetooverwritethismethodtoskiptheformatifweareinto
     *editmodeonainputtypenumber.
     *
     *@override
     *@private
     */
    _formatValue:function(value){
        if(!this.shouldFormat||(this.mode==='edit'&&this.nodeOptions.type==='number')){
            returnvalue;
        }
        returnthis._super.apply(this,arguments);
    },

    /**
     *Parsenumericalvalue(integerorfloat)
     *
     *Note:Wehavetooverwritethismethodtoskiptheformatifweareinto
     *editmodeonainputtypenumber.
     *
     *@override
     *@private
     */
    _parseValue:function(value){
        if(this.mode==='edit'&&this.nodeOptions.type==='number'){
            returnNumber(value);
        }
        returnthis._super.apply(this,arguments);
    },

    /**
     *Formatsaninputelementforeditmode.Thisisinaseparatefunctionso
     *extendingwidgetscanuseitontheirinputwithouthavinginputastagName.
     *
     *Note:Wehavetooverwritethismethodtosettheinput'stypetonumberif
     *optionsettedintothefield.
     *
     *@override
     *@private
     */
    _prepareInput:function($input){
        varresult=this._super.apply(this,arguments);
        if(this.nodeOptions.type==='number'){
            this.$input.attr({type:'number'});
        }
        if(this.nodeOptions.step){
            this.$input.attr({step:this.nodeOptions.step});
        }
        returnresult;
    },

    /**
     *Evaluatevaluesetbyuserifstartswith=
     *
     *@override
     *@private
     *@param{any}value
     *@param{Object}[options]
     */
    _setValue:function(value,options){
        varoriginalValue=value;
        value=value.trim();
        if(value.startsWith('=')){
            try{
                //Evaluatetheformula
                value=this._evalFormula(value.substr(1));
                //Formatbackthevalueinuserlocale
                value=this._formatValue(value);
                //Setthecomputedvalueintheinput
                this.$input.val(value);
            }catch(err){
                //incaseofexception,setvalueastheoriginalvalue
                //thatwaytheWebclientwillshowanerroras
                //itisexpectinganumericvalue.
                value=originalValue;
            }
        }
        returnthis._super(value,options);
    },
});

varFieldChar=InputField.extend(TranslatableFieldMixin,{
    description:_lt("Text"),
    className:'o_field_char',
    tagName:'span',
    supportedFieldTypes:['char'],

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *Addtranslationbutton
     *
     *@override
     *@private
     */
    _renderEdit:function(){
        vardef=this._super.apply(this,arguments);
        if(this.field.size&&this.field.size>0){
            this.$el.attr('maxlength',this.field.size);
        }
        if(this.field.translate){
            this.$el=this.$el.add(this._renderTranslateButton());
            this.$el.addClass('o_field_translate');
        }
        returndef;
    },
    /**
     *Trimthevalueinputbytheuser.
     *
     *@override
     *@private
     *@param{any}value
     *@param{Object}[options]
     */
    _setValue:function(value,options){
        if(this.field.trim){
            value=value.trim();
        }
        returnthis._super(value,options);
    },
});

varLinkButton=AbstractField.extend({
    events:_.extend({},AbstractField.prototype.events,{
        'click':'_onClick'
    }),
    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *Displaybutton
     *@override
     *@private
     */
    _render:function(){
        if(this.value){
            varclassName=this.attrs.icon||'fa-globe';

            this.$el.html("<spanrole='img'/>");
            this.$el.addClass("fa"+className);
            this.$el.attr('title',this.value);
            this.$el.attr('aria-label',this.value);
        }
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *Openlinkbutton
     *
     *@private
     *@param{MouseEvent}event
     */
    _onClick:function(event){
        event.stopPropagation();
        window.open(this.value,'_blank');
    },
});

varFieldDateRange=InputField.extend({
    className:'o_field_date_range',
    tagName:'span',
    jsLibs:[
        '/web/static/lib/daterangepicker/daterangepicker.js',
        '/web/static/src/js/libs/daterangepicker.js',
    ],
    cssLibs:[
        '/web/static/lib/daterangepicker/daterangepicker.css',
    ],
    supportedFieldTypes:['date','datetime'],
    /**
     *@override
     */
    init:function(){
        this._super.apply(this,arguments);
        this.isDateField=this.formatType==='date';
        this.dateRangePickerOptions=_.defaults(
            {},
            this.nodeOptions.picker_options||{},
            {
                timePicker:!this.isDateField,
                timePicker24Hour:_t.database.parameters.time_format.search('%H')!==-1,
                autoUpdateInput:false,
                timePickerIncrement:5,
                locale:{
                    applyLabel:_t('Apply'),
                    cancelLabel:_t('Cancel'),
                    format:this.isDateField?time.getLangDateFormat():time.getLangDatetimeFormat(),
                },
            }
        );
        this.relatedEndDate=this.nodeOptions.related_end_date;
        this.relatedStartDate=this.nodeOptions.related_start_date;
    },
    /**
     *@override
     */
    destroy:function(){
        if(this.$pickerContainer){
            this.$pickerContainer.remove();
        }
        if(this._onScroll){
            window.removeEventListener('scroll',this._onScroll,true);
        }
        this._super.apply(this,arguments);
    },

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *Fieldwidgetisvalidifvalueenteredcanconveredtodate/dateimevalue
     *whileparsinginputvaluetodate/datetimethrowserrorthenwidgetconsidered
     *invalid
     *
     *@override
     */
    isValid:function(){
        constvalue=this.mode==="readonly"?this.value:this.$input.val();
        try{
            returnfield_utils.parse[this.formatType](value,this.field,{timezone:true})||true;
        }catch(error){
            returnfalse;
        }
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *Returnthedatewrittenintheinput,inUTC.
     *
     *@private
     *@returns{Moment|false}
     */
    _getValue:function(){
        try{
            //usermayentermanualvalueininputanditmaynotbeparsedasdate/datetimevalue
            this.removeInvalidClass();
            returnfield_utils.parse[this.formatType](this.$input.val(),this.field,{timezone:true});
        }catch(error){
            this.setInvalidClass();
            returnfalse;
        }
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *@private
     *@param{Event}ev
     *@param{Object}picker
     */
    _applyChanges:function(ev,picker){
        varchanges={};
        vardisplayStartDate=field_utils.format[this.formatType](picker.startDate,{},{timezone:false});
        vardisplayEndDate=field_utils.format[this.formatType](picker.endDate,{},{timezone:false});
        varchangedStartDate=picker.startDate;
        varchangedEndDate=picker.endDate;
        if(this.isDateField){
            //Indatemode,thelibrarywillgivemomentobjectofstartandenddatehaving
            //timeat00:00:00.So,FlectrawillconsideritasUTC.Tofixthisaddedbrowser
            //timezoneoffsetindatestogetacorrectselecteddate.
            changedStartDate=picker.startDate.add(session.getTZOffset(picker.startDate),'minutes');
            changedEndDate=picker.endDate.startOf('day').add(session.getTZOffset(picker.endDate),'minutes');
        }
        if(this.relatedEndDate){
            this.$el.val(displayStartDate);
            changes[this.name]=this._parseValue(changedStartDate);
            changes[this.relatedEndDate]=this._parseValue(changedEndDate);
        }
        if(this.relatedStartDate){
            this.$el.val(displayEndDate);
            changes[this.name]=this._parseValue(changedEndDate);
            changes[this.relatedStartDate]=this._parseValue(changedStartDate);
        }
        this.trigger_up('field_changed',{
            dataPointID:this.dataPointID,
            viewType:this.viewType,
            changes:changes,
        });
    },
    /**
     *@override
     */
    _renderEdit:function(){
        this._super.apply(this,arguments);
        varself=this;
        const[startDate,endDate]=this._getDateRangeFromInputField();
        this.dateRangePickerOptions.startDate=startDate||moment();
        this.dateRangePickerOptions.endDate=endDate||moment();

        this.$el.daterangepicker(this.dateRangePickerOptions);
        this.$el.on('apply.daterangepicker',this._applyChanges.bind(this));
        this.$el.on('show.daterangepicker',this._onDateRangePickerShow.bind(this));
        this.$el.on('hide.daterangepicker',this._onDateRangePickerHide.bind(this));
        this.$el.off('keyup.daterangepicker');
        this.$pickerContainer=this.$el.data('daterangepicker').container;

        //Preventfromleavingtheeditionofarowineditablelistview
        this.$pickerContainer.on('click',function(ev){
            ev.stopPropagation();
            if($(ev.target).hasClass('applyBtn')){
                self.$el.data('daterangepicker').hide();
            }
        });

        //Preventbootstrapfromfocusingonmodal(whichbreakshoursdrop-downinfirefox)
        this.$pickerContainer.on('focusin.bs.modal','select',function(ev){
            ev.stopPropagation();
        });
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *Unbindthescrolleventhandlerwhenthedaterangepickerisclosed.
     *
     *@private
     */
    _onDateRangePickerHide(){
        if(this._onScroll){
            window.removeEventListener('scroll',this._onScroll,true);
        }
    },
    /**
     *Bindthescrolleventhandlewhenthedaterangepickerisopen.
     *Updatethebeginandenddatewiththedatesfromtheinputvalues
     *
     *@private
     */
    _onDateRangePickerShow(){
        constdaterangepicker=this.$el.data('daterangepicker');
        this._onScroll=ev=>{
            if(!config.device.isMobile&&!this.$pickerContainer.get(0).contains(ev.target)){
                daterangepicker.hide();
            }
        };
        window.addEventListener('scroll',this._onScroll,true);
        const[startDate,endDate]=this._getDateRangeFromInputField();
        daterangepicker.setStartDate(startDate?startDate.utcOffset(session.getTZOffset(startDate)):moment());
        daterangepicker.setEndDate(endDate?endDate.utcOffset(session.getTZOffset(endDate)):moment());
        daterangepicker.updateView();
    },
    /**
     *GetthestartDateandendDateofthedaterangepickerfromtheinputfields
     *@returns[Date(momentobject),Date(momentobject)]
     *@private
     */
    _getDateRangeFromInputField(){
        letstartDate,endDate;
        if(this.relatedEndDate){
            startDate=this._getValue();
            endDate=field_utils.parse[this.formatType](this.recordData[this.relatedEndDate]);
        }
        if(this.relatedStartDate){
            startDate=field_utils.parse[this.formatType](this.recordData[this.relatedStartDate]);
            endDate=this._getValue();
        }
        return[startDate,endDate];
    },
});

varFieldDate=InputField.extend({
    description:_lt("Date"),
    className:"o_field_date",
    tagName:"span",
    supportedFieldTypes:['date','datetime'],
    //wedon'tneedtolistenon'input'nor'change'eventsbecausethe
    //datepickerwidgetisalreadylistening,andwillcorrectlynotifychanges
    events:AbstractField.prototype.events,

    /**
     *@override
     */
    init:function(){
        this._super.apply(this,arguments);
        //usethesessiontimezonewhenformattingdates
        this.formatOptions.timezone=true;
        this.datepickerOptions=_.defaults(
            {},
            this.nodeOptions.datepicker||{},
            {defaultDate:this.value}
        );
    },
    /**
     *Ineditmode,instantiatesaDateWidgetdatepickerandlistentochanges.
     *
     *@override
     */
    start:function(){
        varself=this;
        varprom;
        if(this.mode==='edit'){
            this.datewidget=this._makeDatePicker();
            this.datewidget.on('datetime_changed',this,function(){
                varvalue=this._getValue();
                if((!value&&this.value)||(value&&!this._isSameValue(value))){
                    this._setValue(value);
                }
            });
            prom=this.datewidget.appendTo('<div>').then(function(){
                self.datewidget.$el.addClass(self.$el.attr('class'));
                self._prepareInput(self.datewidget.$input);
                self._replaceElement(self.datewidget.$el);
            });
        }
        returnPromise.resolve(prom).then(this._super.bind(this));
    },

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *Asksthedatepickerwidgettoactivatetheinput,insteadofdoingit
     *ourself,suchthat'input'eventstriggeredbythelibarecorrectly
     *intercepted,anddon'tproduceunwanted'field_changed'events.
     *
     *@override
     */
    activate:function(){
        if(this.isFocusable()&&this.datewidget){
            this.datewidget.$input.select();
            returntrue;
        }
        returnfalse;
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *@override
     *@private
     */
    _doDebouncedAction:function(){
        this.datewidget.changeDatetime();
    },

    /**
     *returnthedatepickervalue
     *
     *@private
     */
    _getValue:function(){
        returnthis.datewidget.getValue();
    },
    /**
     *@override
     *@private
     *@param{Moment|false}value
     *@returns{boolean}
     */
    _isSameValue:function(value){
        if(value===false){
            returnthis.value===false;
        }
        returnvalue.isSame(this.value,'day');
    },
    /**
     *InstantiatesanewDateWidgetdatepicker.
     *
     *@private
     */
    _makeDatePicker:function(){
        returnnewdatepicker.DateWidget(this,this.datepickerOptions);
    },

    /**
     *Setthedatepickertotherightvalueratherthanthedefaultone.
     *
     *@override
     *@private
     */
    _renderEdit:function(){
        this.datewidget.setValue(this.value);
        this.$input=this.datewidget.$input;
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *Confirmthevalueonhitenterandre-render
     *ItwillalsoremovetheoffsettogettheUTCvalue
     *
     *@private
     *@override
     *@param{KeyboardEvent}ev
     */
    async_onKeydown(ev){
        this._super(...arguments);
        if(ev.which===$.ui.keyCode.ENTER){
            letvalue=this.$input.val();
            try{
                value=this._parseValue(value);
                if(this.datewidget.type_of_date==="datetime"){
                    value.add(-this.getSession().getTZOffset(value),"minutes");
                }
            }catch(err){}
            awaitthis._setValue(value);
            this._render();
        }
    },
});

varFieldDateTime=FieldDate.extend({
    description:_lt("Date&Time"),
    supportedFieldTypes:['datetime'],

    /**
     *@override
     */
    init:function(){
        this._super.apply(this,arguments);
        if(this.value){
            varoffset=this.getSession().getTZOffset(this.value);
            vardisplayedValue=this.value.clone().add(offset,'minutes');
            this.datepickerOptions.defaultDate=displayedValue;
        }
    },
    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *returnthedatepickervalue
     *
     *@private
     */
    _getValue:function(){
        varvalue=this.datewidget.getValue();
        returnvalue&&value.add(-this.getSession().getTZOffset(value),'minutes');
    },
    /**
     *@override
     *@private
     */
    _isSameValue:function(value){
        if(value===false){
            returnthis.value===false;
        }
        returnvalue.isSame(this.value);
    },
    /**
     *InstantiatesanewDateTimeWidgetdatepickerratherthanDateWidget.
     *
     *@override
     *@private
     */
    _makeDatePicker:function(){
        returnnewdatepicker.DateTimeWidget(this,this.datepickerOptions);
    },
    /**
     *Setthedatepickertotherightvalueratherthanthedefaultone.
     *
     *@override
     *@private
     */
    _renderEdit:function(){
        varvalue=this.value&&this.value.clone().add(this.getSession().getTZOffset(this.value),'minutes');
        this.datewidget.setValue(value);
        this.$input=this.datewidget.$input;
    },
});

constRemainingDays=AbstractField.extend({
    description:_lt("RemainingDays"),
    supportedFieldTypes:['date','datetime'],

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *Displaysthedelta(indays)betweenthevalueofthefieldandtoday.If
     *thedeltaislargerthan99days,displaysthedateasusual(without
     *time).
     *
     *@override
     */
    _render(){
        if(this.value===false){
            this.$el.removeClass('text-bftext-dangertext-warning');
            return;
        }
        //comparethevalue(intheusertimezone)withnow(alsointheuser
        //timezone),togetameaningfuldeltafortheuser
        constnowUTC=moment().utc();
        constnowUserTZ=nowUTC.clone().add(session.getTZOffset(nowUTC),'minutes');
        constfieldValue=this.field.type=="datetime"?this.value.clone().add(session.getTZOffset(this.value),'minutes'):this.value;
        constdiffDays=fieldValue.startOf('day').diff(nowUserTZ.startOf('day'),'days');
        lettext;
        if(Math.abs(diffDays)>99){
            text=this._formatValue(this.value,'date');
        }elseif(diffDays===0){
            text=_t("Today");
        }elseif(diffDays<0){
            text=diffDays===-1?_t("Yesterday"):_.str.sprintf(_t('%sdaysago'),-diffDays);
        }else{
            text=diffDays===1?_t("Tomorrow"):_.str.sprintf(_t('In%sdays'),diffDays);
        }
        this.$el.text(text).attr('title',this._formatValue(this.value,'date'));
        this.$el.toggleClass('text-bf',diffDays<=0);
        this.$el.toggleClass('text-danger',diffDays<0);
        this.$el.toggleClass('text-warning',diffDays===0);
    },
});

varFieldMonetary=NumericField.extend({
    description:_lt("Monetary"),
    className:'o_field_monetaryo_field_number',
    tagName:'span',
    supportedFieldTypes:['float','monetary'],
    resetOnAnyFieldChange:true,//Havetolistentocurrencychanges

    /**
     *Floatfieldsusingamonetarywidgethaveanadditionalcurrency_field
     *parameterwhichdefinesthenameofthefieldfromwhichthecurrency
     *shouldberead.
     *
     *Theyarealsodisplayeddifferentlythanotherinputsin
     *editmode.Theyareadivcontainingaspanwiththecurrencysymboland
     *theactualinput.
     *
     *Ifnocurrencyfieldisgivenorthefielddoesnotexist,wefallback
     *tothedefaultinputbehaviorinstead.
     *
     *@override
     */
    init:function(){
        this._super.apply(this,arguments);

        this._setCurrency();

        if(this.mode==='edit'){
            this.tagName='div';
            this.className+='o_input';

            //donotdisplaycurrencysymbolinedit
            this.formatOptions.noSymbol=true;
        }

        this.formatOptions.currency=this.currency;
        this.formatOptions.digits=[16,2];
        this.formatOptions.field_digits=this.nodeOptions.field_digits;
    },

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *Formonetaryfields,0isavalidvalue.
     *
     *@override
     */
    isSet:function(){
        returnthis.value===0||this._super.apply(this,arguments);
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *Formonetaryfields,theinputisinsideadiv,alongsideaspan
     *containingthecurrencysymbol.
     *
     *@override
     *@private
     */
    _renderEdit:function(){
        this.$el.empty();

        //Prepareandaddtheinput
        vardef=this._prepareInput(this.$input).appendTo(this.$el);

        if(this.currency){
            //Prepareandaddthecurrencysymbol
            var$currencySymbol=$('<span>',{text:this.currency.symbol});
            if(this.currency.position==="after"){
                this.$el.append($currencySymbol);
            }else{
                this.$el.prepend($currencySymbol);
            }
        }
        returndef;
    },
    /**
     *@override
     *@private
     */
    _renderReadonly:function(){
        this.$el.html(this._formatValue(this.value));
    },
    /**
     *Re-getsthecurrencyasitsvaluemayhavechanged.
     *@seeFieldMonetary.resetOnAnyFieldChange
     *
     *@override
     *@private
     */
    _reset:function(){
        this._super.apply(this,arguments);
        this._setCurrency();
    },
    /**
     *Deducesthecurrencydescriptionfromthefieldoptionsandviewstate.
     *Thedescriptionisthenavailableatthis.currency.
     *
     *@private
     */
    _setCurrency:function(){
        varcurrencyField=this.nodeOptions.currency_field||this.field.currency_field||'currency_id';
        varcurrencyID=this.record.data[currencyField]&&this.record.data[currencyField].res_id;
        this.currency=session.get_currency(currencyID);
        this.formatOptions.currency=this.currency;//_formatValue()usesformatOptions
    },
});

varFieldInteger=NumericField.extend({
    description:_lt("Integer"),
    className:'o_field_integero_field_number',
    supportedFieldTypes:['integer'],

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *Formatintegervalue
     *
     *Note:Wehavetooverwritethismethodtoallowvirtualids.Avirtualid
     *isacharacterstringcomposedofanintegerandhasadashandother
     *information.
     *E.g:incalendar,therecursiveeventhavevirtualidlinkedtoarealid
     *virtualeventid"23-20170418020000"islinkedtotheeventid23
     *
     *@override
     *@private
     *@param{integer|string}value
     *@returns{string}
     */
    _formatValue:function(value){
        if(typeofvalue==='string'){
            if(!/^[0-9]+-/.test(value)){
                thrownewError('"'+value+'"isnotanintegeroravirtualid');
            }
            returnvalue;
        }
        returnthis._super.apply(this,arguments);
    },
});

varFieldFloat=NumericField.extend({
    description:_lt("Decimal"),
    className:'o_field_floato_field_number',
    supportedFieldTypes:['float'],

    /**
     *Floatfieldshaveanadditionalprecisionparameterthatisreadfrom
     *eitherthefieldnodeinthevieworthefieldpythondefinitionitself.
     *
     *@override
     */
    init:function(){
        this._super.apply(this,arguments);
        if(this.attrs.digits){
            this.nodeOptions.digits=JSON.parse(this.attrs.digits);
        }
    },
});

varFieldFloatTime=FieldFloat.extend({
    description:_lt("Time"),
    //thisisnotstrictlynecessary,asforthiswidgettobeused,the'widget'
    //attrsmustbesetto'float_time',sotheformatTypeisautomatically
    //'float_time',butforthesakeofclarity,weexplicitelydefinea
    //FieldFloatTimewidgetwithformatType='float_time'.
    formatType:'float_time',

    init:function(){
        this._super.apply(this,arguments);
        this.formatType='float_time';
    }
});

varFieldFloatFactor=FieldFloat.extend({
    supportedFieldTypes:['float'],
    className:'o_field_float_factor',
    formatType:'float_factor',

    /**
     *@constructor
     */
    init:function(){
        this._super.apply(this,arguments);
        //defaultvalues
        if(!this.nodeOptions.factor){
            this.nodeOptions.factor=1;
        }
        //useasformatandparseoptions
        this.parseOptions=this.nodeOptions;
    }
});

/**
 *Thegoalofthiswidgetistoreplacetheinputfieldbyabuttoncontaininga
 *rangeofpossiblevalues(givenintheoptions).Eachclickallowstheusertoloop
 *intherange.Thepurposehereistorestrictthefieldvaluetoapredefinedselection.
 *Also,thewidgetsupportthefactorconversionasthe*float_factor*widget(Rangevalues
 *shouldbetheresultoftheconversion).
 **/
varFieldFloatToggle=AbstractField.extend({
    supportedFieldTypes:['float'],
    formatType:'float_factor',
    className:'o_field_float_toggle',
    tagName:'span',
    events:{
        click:'_onClick'
    },

    /**
     *@constructor
     */
    init:function(){
        this._super.apply(this,arguments);

        this.formatType='float_factor';

        if(this.mode==='edit'){
            this.tagName='button';
        }

        //wedon'tinheritFloatField
        if(this.attrs.digits){
            this.nodeOptions.digits=JSON.parse(this.attrs.digits);
        }
        //defaultvalues
        if(!this.nodeOptions.factor){
            this.nodeOptions.factor=1;
        }
        if(!this.nodeOptions.range){
            this.nodeOptions.range=[0.0,0.5,1.0];
        }

        //useasformatandparseoptions
        this.parseOptions=this.nodeOptions;
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *Getthedisplayvaluebutinrealtypetouseitincalculations
     *
     *@private
     *@returns{float}Thecurrentformattedvalue
     */
    _getDisplayedValue:function(){
        //this.valueisaplainfloat
        //MatcheswhatisinDatabase
        varusrFormatValue=this._formatValue(this.value);
        //usrFormatValueisstring
        //containsafloatrepresentedinauserspecificformat
        //thefloatisthefractionby[this.factor]ofthis.value
        returnfield_utils.parse['float'](usrFormatValue);
    },
    /**
     *FormatstheHTMLinputtagforeditmodeandstoresselectionstatus.
     *
     *@override
     *@private
     */
    _renderEdit:function(){
        //Keepareferencetotheinputso$elcanbecomesomethingelse
        //withoutlosingtrackoftheactualinput.
        this.$el.text(this._formatValue(this.value));
    },
    /**
     *Resetsthecontenttotheformatedvalueinreadonlymode.
     *
     *@override
     *@private
     */
    _renderReadonly:function(){
        this.$el.text(this._formatValue(this.value));
    },
    /**
     *Getthenextvalueintherange,fromthecurrentone.Ifthecurrent
     *oneisnotintherange,thenextvalueoftheclosestonewillbechosen.
     *
     *@private
     *@returns{number}Thenextvalueintherange
     */
    _nextValue:function(){
        varrange=this.nodeOptions.range;
        varval= utils.closestNumber(this._getDisplayedValue(),range);
        varindex=_.indexOf(range,val);
        if(index!==-1){
            if(index+1<range.length){
                returnrange[index+1];
            }
        }
        returnrange[0];
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *Clickingonthebuttontriggersthechangeofvalue;thenextoneof
     *therangewillbedisplayed.
     *
     *@private
     *@param{FlectraEvent}ev
     */
    _onClick:function(ev){
        if(this.mode==='edit'){
            ev.stopPropagation();//onlystoppropagationineditmode
            varnext_val=this._nextValue();
            next_val=field_utils.format['float'](next_val);
            this._setValue(next_val);//willbeparsedin_setValue
        }
    },
    /**
     *Forfloattogglefields,0isavalidvalue.
     *
     *@override
     */
    isSet:function(){
        returnthis.value===0||this._super(...arguments);
    },
});

varFieldPercentage=FieldFloat.extend({
    className:'o_field_float_percentageo_field_number',
    description:_lt("Percentage"),

    /**
     *@constructor
     */
    init(){
        this._super(...arguments);
        if(this.mode==='edit'){
            this.tagName='div';
            this.className+='o_input';

            //donotdisplay%intheinputinedit
            this.formatOptions.noSymbol=true;
        }
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *Forpercentagewidget,theinputisinsideadiv,alongsideaspan
     *containingthepercentage(%)symbol.
     *
     *@override
     *@private
     */
    _renderEdit(){
        this.$el.empty();
        //Prepareandaddtheinput
        this._prepareInput(this.$input).appendTo(this.$el);
        const$percentageSymbol=$('<span>',{text:'%'});
        this.$el.append($percentageSymbol);
    },
});

varFieldText=InputField.extend(TranslatableFieldMixin,{
    description:_lt("MultilineText"),
    className:'o_field_text',
    supportedFieldTypes:['text','html'],
    tagName:'span',

    /**
     *@constructor
     */
    init:function(){
        this._super.apply(this,arguments);

        if(this.mode==='edit'){
            this.tagName='textarea';
        }
        this.autoResizeOptions={parent:this};
    },
    /**
     *Asititdoneinthestartfunction,theautoresizeisdoneonlyonce.
     *
     *@override
     */
    start:function(){
        if(this.mode==='edit'){
            dom.autoresize(this.$el,this.autoResizeOptions);
            if(this.field.translate){
                this.$el=this.$el.add(this._renderTranslateButton());
                this.$el.addClass('o_field_translate');
            }
        }
        returnthis._super();
    },
    /**
     *Overridetoforcearesizeofthetextareawhenitsvaluehaschanged
     *
     *@override
     */
    reset:function(){
        varself=this;
        returnPromise.resolve(this._super.apply(this,arguments)).then(function(){
            if(self.mode==='edit'){
                self.$input.trigger('change');
            }
        });
    },
    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *Stopstheenternavigationinatextarea.
     *
     *@private
     *@param{FlectraEvent}ev
     */
    _onKeydown:function(ev){
        if(ev.which===$.ui.keyCode.ENTER){
            ev.stopPropagation();
            return;
        }
        this._super.apply(this,arguments);
    },
});

varListFieldText=FieldText.extend({
    /**
     *@override
     */
    init:function(){
        this._super.apply(this,arguments);
        this.autoResizeOptions.min_height=0;
    },
});

/**
 *Displaysahandletomodifythesequence.
 */
varHandleWidget=AbstractField.extend({
    description:_lt("Handle"),
    noLabel:true,
    className:'o_row_handlefafa-arrowsui-sortable-handle',
    widthInList:'33px',
    tagName:'span',
    supportedFieldTypes:['integer'],

    /*
     *@override
     */
    isSet:function(){
        returntrue;
    },
});

varFieldEmail=InputField.extend({
    description:_lt("Email"),
    className:'o_field_email',
    events:_.extend({},InputField.prototype.events,{
        'click':'_onClick',
    }),
    prefix:'mailto',
    supportedFieldTypes:['char'],

    /**
     *Inreadonly,emailsshouldbealink,notaspan.
     *
     *@override
     */
    init:function(){
        this._super.apply(this,arguments);
        this.tagName=this.mode==='readonly'?'a':'input';
    },

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *Returnstheassociatedlink.
     *
     *@override
     */
    getFocusableElement:function(){
        returnthis.mode==='readonly'?this.$el:this._super.apply(this,arguments);
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *Inreadonly,emailsshouldbeamailto:linkwithproperformatting.
     *
     *@override
     *@private
     */
    _renderReadonly:function(){
        if(this.value){
            //Flectralegacywidgetscanhavemultiplenodesinsidetheir$elJQueryobject
            //so,selecttheproperone(othernodesareassumednottocontainproperdata)
            this.$el.closest("."+this.className).text(this.value)
                .addClass('o_form_urio_text_overflow')
                .attr('href',this.prefix+':'+this.value);
        }else{
            this.$el.text('');
        }
    },
    /**
     *Trimthevalueinputbytheuser.
     *
     *@override
     *@private
     *@param{any}value
     *@param{Object}[options]
     */
    _setValue:function(value,options){
        if(this.field.trim){
            value=value.trim();
        }
        returnthis._super(value,options);
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *PreventtheURLclickfromopeningtherecord(whenusedonalist).
     *
     *@private
     *@param{MouseEvent}ev
     */
    _onClick:function(ev){
        ev.stopPropagation();
    },
});

varFieldPhone=FieldEmail.extend({
    description:_lt("Phone"),
    className:'o_field_phone',
    prefix:'tel',

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *@override
     *@private
     */
    _renderReadonly:function(){
        this._super();

        //Thisclassshouldtechnicallybethereincaseofaveryverylong
        //phonenumber,butitbreakstheo_rowmechanism,whichismore
        //importantrightnow.
        this.$el.removeClass('o_text_overflow');
    },
});

varUrlWidget=InputField.extend({
    description:_lt("URL"),
    className:'o_field_url',
    events:_.extend({},InputField.prototype.events,{
        'click':'_onClick',
    }),
    supportedFieldTypes:['char'],

    /**
     *Urlsarelinksinreadonlymode.
     *
     *@override
     */
    init:function(){
        this._super.apply(this,arguments);
        this.tagName=this.mode==='readonly'?'a':'input';
        this.websitePath=this.nodeOptions.website_path||false;
    },

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *Returnstheassociatedlink.
     *
     *@override
     */
    getFocusableElement:function(){
        returnthis.mode==='readonly'?this.$el:this._super.apply(this,arguments);
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *Inreadonly,thewidgetneedstobealinkwithproperhrefandproper
     *supportforthedesign,whichisachievedbytheaddedclasses.
     *
     *@override
     *@private
     */
    _renderReadonly:function(){
        lethref=this.value;
        if(this.value&&!this.websitePath){
            constregex=/^(?:[fF]|[hH][tT])[tT][pP][sS]?:\/\//;
            href=!regex.test(this.value)?`http://${href}`:href;
        }
        this.$el.text(this.attrs.text||this.value)
            .addClass('o_form_urio_text_overflow')
            .attr('target','_blank')
            .attr('href',href);
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *PreventtheURLclickfromopeningtherecord(whenusedonalist).
     *
     *@private
     *@param{MouseEvent}ev
     */
    _onClick:function(ev){
        ev.stopPropagation();
    },
});

varCopyClipboard={

    /**
     *@override
     */
    destroy:function(){
        this._super.apply(this,arguments);
        if(this.clipboard){
            this.clipboard.destroy();
        }
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *InstatiatestheClipboadlib.
     */
    _initClipboard:function(){
        varself=this;
        var$clipboardBtn=this.$('.o_clipboard_button');
        $clipboardBtn.tooltip({title:_t('Copied!'),trigger:'manual',placement:'right'});
        this.clipboard=newClipboardJS($clipboardBtn[0],{
            text:function(){
                returnself.value.trim();
            },
            //ContaineraddedbecauseofBootstrapmodalthatgivethefocustoanotherelement.
            //WeneedtogivetocorrectfocustoClipboardJS(seeinClipboardJSdoc)
            //https://github.com/zenorocha/clipboard.js/issues/155
            container:self.$el[0]
        });
        this.clipboard.on('success',function(){
            _.defer(function(){
                $clipboardBtn.tooltip('show');
                _.delay(function(){
                    $clipboardBtn.tooltip('hide');
                },800);
            });
        });
    },
    /**
     *@override
     */
    _renderReadonly:function(){
        this._super.apply(this,arguments);
        if(this.value){
            this.$el.append($(qweb.render(this.clipboardTemplate)));
            this._initClipboard();
        }
    }
};

varTextCopyClipboard=FieldText.extend(CopyClipboard,{
    description:_lt("CopytoClipboard"),
    clipboardTemplate:'CopyClipboardText',
    className:"o_field_copy",
});

varCharCopyClipboard=FieldChar.extend(CopyClipboard,{
    description:_lt("CopytoClipboard"),
    clipboardTemplate:'CopyClipboardChar',
    className:'o_field_copyo_text_overflow',
});

varAbstractFieldBinary=AbstractField.extend({
    events:_.extend({},AbstractField.prototype.events,{
        'change.o_input_file':'on_file_change',
        'click.o_select_file_button':function(){
            this.$('.o_input_file').click();
        },
        'click.o_clear_file_button':'_onClearClick',
    }),
    init:function(parent,name,record){
        this._super.apply(this,arguments);
        this.fields=record.fields;
        this.useFileAPI=!!window.FileReader;
        this.max_upload_size=session.max_file_upload_size||128*1024*1024;
        this.accepted_file_extensions=(this.nodeOptions&&this.nodeOptions.accepted_file_extensions)||this.accepted_file_extensions||'*';
        if(!this.useFileAPI){
            varself=this;
            this.fileupload_id=_.uniqueId('o_fileupload');
            $(window).on(this.fileupload_id,function(){
                varargs=[].slice.call(arguments).slice(1);
                self.on_file_uploaded.apply(self,args);
            });
        }
    },
    destroy:function(){
        if(this.fileupload_id){
            $(window).off(this.fileupload_id);
        }
        this._super.apply(this,arguments);
    },
    on_file_change:function(e){
        varself=this;
        varfile_node=e.target;
        if((this.useFileAPI&&file_node.files.length)||(!this.useFileAPI&&$(file_node).val()!=='')){
            if(this.useFileAPI){
                varfile=file_node.files[0];
                if(file.size>this.max_upload_size){
                    varmsg=_t("Theselectedfileexceedthemaximumfilesizeof%s.");
                    this.do_warn(_t("Fileupload"),_.str.sprintf(msg,utils.human_size(this.max_upload_size)));
                    returnfalse;
                }
                utils.getDataURLFromFile(file).then(function(data){
                    data=data.split(',')[1];
                    self.on_file_uploaded(file.size,file.name,file.type,data);
                });
            }else{
                this.$('form.o_form_binary_form').submit();
            }
            this.$('.o_form_binary_progress').show();
            this.$('button').hide();
        }
    },
    on_file_uploaded:function(size,name){
        if(size===false){
            this.do_warn(false,_t("Therewasaproblemwhileuploadingyourfile"));
            //TODO:usecrashmanager
            console.warn("Errorwhileuploadingfile:",name);
        }else{
            this.on_file_uploaded_and_valid.apply(this,arguments);
        }
        this.$('.o_form_binary_progress').hide();
        this.$('button').show();
    },
    on_file_uploaded_and_valid:function(size,name,content_type,file_base64){
        this.set_filename(name);
        this._setValue(file_base64);
        this._render();
    },
    /**
     *Weneedtoupdateanotherfield. Thismethodissodeprecateditisnot
     *evenfunny. Weneedtoreplacethiswiththemechanismoffieldwidgets
     *declaringstaticallythattheyneedtolistentoeverychangesinother
     *fields
     *
     *@deprecated
     *
     *@param{any}value
     */
    set_filename:function(value){
        varfilename=this.attrs.filename;
        if(filename&&filenameinthis.fields){
            varchanges={};
            changes[filename]=value;
            this.trigger_up('field_changed',{
                dataPointID:this.dataPointID,
                changes:changes,
                viewType:this.viewType,
            });
        }
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------
    /**
     *Clearthefileinput
     *
     *@private
     */
    _clearFile:function(){
        varself=this;
        this.$('.o_input_file').val('');
        this.set_filename('');
        if(!this.isDestroyed()){
            this._setValue(false).then(function(){
                self._render();
            });
        }
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------
    /**
     *On"clearfile"buttonclick
     *
     *@param{MouseEvent}ev
     *@private
     */
    _onClearClick:function(ev){
        this._clearFile();
    },
});

varFieldBinaryImage=AbstractFieldBinary.extend({
    description:_lt("Image"),
    fieldDependencies:_.extend({},AbstractFieldBinary.prototype.fieldDependencies,{
        __last_update:{type:'datetime'},
    }),

    template:'FieldBinaryImage',
    placeholder:"/web/static/src/img/placeholder.png",
    events:_.extend({},AbstractFieldBinary.prototype.events,{
        'clickimg':function(){
            if(this.mode==="readonly"){
                this.trigger_up('bounce_edit');
            }
        },
    }),
    supportedFieldTypes:['binary'],
    file_type_magic_word:{
        '/':'jpg',
        'R':'gif',
        'i':'png',
        'P':'svg+xml',
    },
    accepted_file_extensions:'image/*',
    /**
     *ReturnstheimageURLfromamodel.
     *
     *@private
     *@param{string}model   modelfromwhichtoretrievetheimage
     *@param{string}res_id  idoftherecord
     *@param{string}field   nameoftheimagefield
     *@param{string}unique  anuniqueintegerfortherecord,usually__last_update
     *@returns{string}URLoftheimage
     */
    _getImageUrl:function(model,res_id,field,unique){
        returnsession.url('/web/image',{
            model:model,
            id:JSON.stringify(res_id),
            field:field,
            //uniqueforcesareloadoftheimagewhentherecordhasbeenupdated
            unique:field_utils.format.datetime(unique).replace(/[^0-9]/g,''),
        });
    },
    _render:function(){
        varself=this;
        varurl=this.placeholder;
        if(this.value){
            if(!utils.is_bin_size(this.value)){
                //Usemagic-wordtechniquefordetectingimagetype
                url='data:image/'+(this.file_type_magic_word[this.value[0]]||'png')+';base64,'+this.value;
            }else{
                varfield=this.nodeOptions.preview_image||this.name;
                varunique=this.recordData.__last_update;
                url=this._getImageUrl(this.model,this.res_id,field,unique);
            }
        }
        var$img=$(qweb.render("FieldBinaryImage-img",{widget:this,url:url}));
        //overridecsssizeattributes(couldhavebeendefinedincssfiles)
        //ifspecifiedonthewidget
        varwidth=this.nodeOptions.size?this.nodeOptions.size[0]:this.attrs.width;
        varheight=this.nodeOptions.size?this.nodeOptions.size[1]:this.attrs.height;
        if(width){
            $img.attr('width',width);
            $img.css('max-width',width+'px');
            if(!height){
                $img.css('height','auto');
                $img.css('max-height','100%');
            }
        }
        if(height){
            $img.attr('height',height);
            $img.css('max-height',height+'px');
            if(!width){
                $img.css('width','auto');
                $img.css('max-width','100%');
            }
        }
        this.$('>img').remove();
        this.$el.prepend($img);

        $img.one('error',function(){
            $img.attr('src',self.placeholder);
            self.do_warn(false,_t("Couldnotdisplaytheselectedimage"));
        });

        returnthis._super.apply(this,arguments);
    },
    /**
     *Onlyenablethezoomonimageinread-onlymode,andiftheoptionisenabled.
     *
     *@override
     *@private
     */
    _renderReadonly:function(){
        this._super.apply(this,arguments);

        if(this.nodeOptions.zoom){
            varunique=this.recordData.__last_update;
            varurl=this._getImageUrl(this.model,this.res_id,'image_1920',unique);
            var$img;
            varimageField=_.find(Object.keys(this.recordData),function(o){
                returno.startsWith('image_');
            });

            if(this.nodeOptions.background)
            {
                if('tag'inthis.nodeOptions){
                    this.tagName=this.nodeOptions.tag;
                }

                if('class'inthis.attrs){
                    this.$el.addClass(this.attrs.class);
                }

                constimage_field=this.field.manual?this.name:'image_128';
                varurlThumb=this._getImageUrl(this.model,this.res_id,image_field,unique);

                this.$el.empty();
                $img=this.$el;
                $img.css('backgroundImage','url('+urlThumb+')');
            }else{
                $img=this.$('img');
            }
            varzoomDelay=0;
            if(this.nodeOptions.zoom_delay){
                zoomDelay=this.nodeOptions.zoom_delay;
            }

            if(this.recordData[imageField]){
                $img.attr('data-zoom',1);
                $img.attr('data-zoom-image',url);

                $img.zoomFlectra({
                    event:'mouseenter',
                    timer:zoomDelay,
                    attach:'.o_content',
                    attachToTarget:true,
                    onShow:function(){
                        varzoomHeight=Math.ceil(this.$zoom.height());
                        varzoomWidth=Math.ceil(this.$zoom.width());
                        if(zoomHeight<128&&zoomWidth<128){
                            this.hide();
                        }
                        core.bus.on('keydown',this,this.hide);
                        core.bus.on('click',this,this.hide);
                    },
                    beforeAttach:function(){
                        this.$flyout.css({width:'512px',height:'512px'});
                    },
                    preventClicks:this.nodeOptions.preventClicks,
                });
            }
        }
    },
});

varCharImageUrl=AbstractField.extend({
    className:'o_field_image',
    description:_lt("Image"),
    supportedFieldTypes:['char'],
    placeholder:"/web/static/src/img/placeholder.png",

    _renderReadonly:function(){
        varself=this;
        consturl=this.value;
        if(url){
            var$img=$(qweb.render("FieldBinaryImage-img",{widget:this,url:url}));
            //overridecsssizeattributes(couldhavebeendefinedincssfiles)
            //ifspecifiedonthewidget
            constwidth=this.nodeOptions.size?this.nodeOptions.size[0]:this.attrs.width;
            constheight=this.nodeOptions.size?this.nodeOptions.size[1]:this.attrs.height;
            if(width){
                $img.attr('width',width);
                $img.css('max-width',width+'px');
                if(!height){
                    $img.css('height','auto');
                    $img.css('max-height','100%');
                }
            }
            if(height){
                $img.attr('height',height);
                $img.css('max-height',height+'px');
                if(!width){
                    $img.css('width','auto');
                    $img.css('max-width','100%');
                }
            }
            this.$('>img').remove();
            this.$el.prepend($img);

            $img.one('error',function(){
                $img.attr('src',self.placeholder);
                self.displayNotification({
                    type:'info',
                    message:_t("Couldnotdisplaythespecifiedimageurl."),
                });
            });
        }

        returnthis._super.apply(this,arguments);
    },
});

varKanbanFieldBinaryImage=FieldBinaryImage.extend({
    //Inkanbanviews,thereisaweirdlogictodeterminewhetherornota
    //clickonacardshouldopentherecordinaformview. Thislogicchecks
    //iftheclickedelementhasclickhandlersboundonit,andifso,does
    //notopentherecord(assumingthattheclickwillbehandlebysomeone
    //else). Inthecaseofthiswidget,thereareclickshandlerbutthey
    //onlyapplyineditmode,whichisneverthecaseinkanbanviews,sowe
    //simplyremovethem.
    events:{},
});

varKanbanCharImageUrl=CharImageUrl.extend({
    //Inkanbanviews,thereisaweirdlogictodeterminewhetherornota
    //clickonacardshouldopentherecordinaformview. Thislogicchecks
    //iftheclickedelementhasclickhandlersboundonit,andifso,does
    //notopentherecord(assumingthattheclickwillbehandledbysomeone
    //else). Inthecaseofthiswidget,thereareclickshandlerbutthey
    //onlyapplyineditmode,whichisneverthecaseinkanbanviews,sowe
    //simplyremovethem.
    events:{},
});

varFieldBinaryFile=AbstractFieldBinary.extend({
    description:_lt("File"),
    template:'FieldBinaryFile',
    events:_.extend({},AbstractFieldBinary.prototype.events,{
        'click':function(event){
            if(this.mode==='readonly'&&this.value&&this.recordData.id){
                this.on_save_as(event);
            }
        },
        'click.o_input':function(){//eq[0]
            this.$('.o_input_file').click();
        },
    }),
    supportedFieldTypes:['binary'],
    init:function(){
        this._super.apply(this,arguments);
        this.filename_value=this.recordData[this.attrs.filename];
    },
    _renderReadonly:function(){
        varvisible=!!(this.value&&this.res_id);
        this.$el.empty().css('cursor','not-allowed');
        this.do_toggle(visible);
        if(visible){
            this.$el.css('cursor','pointer')
                    .text(this.filename_value||'')
                    .prepend($('<spanclass="fafa-download"/>'),'');
        }
    },
    _renderEdit:function(){
        if(this.value){
            this.$el.children().removeClass('o_hidden');
            this.$('.o_select_file_button').first().addClass('o_hidden');
            this.$('.o_input').eq(0).val(this.filename_value||this.value);
        }else{
            this.$el.children().addClass('o_hidden');
            this.$('.o_select_file_button').first().removeClass('o_hidden');
        }
    },
    set_filename:function(value){
        this._super.apply(this,arguments);
        this.filename_value=value;//willbeusedinthere-render
        //thefilenamebeingeditedbutnotyetsaved,iftheuserclickson
        //download,he'llgetthefilecorrespondingtothecurrentvalue
        //storedindb,whichisn'ttheonewhosefilenameisdisplayedinthe
        //input,sowedisablethedownloadbutton
        this.$('.o_save_file_button').prop('disabled',true);
    },
    on_save_as:function(ev){
        if(!this.value){
            this.do_warn(false,_t("Thefieldisempty,there'snothingtosave."));
            ev.stopPropagation();
        }elseif(this.res_id){
            framework.blockUI();
            varfilename_fieldname=this.attrs.filename;
            this.getSession().get_file({
                complete:framework.unblockUI,
                data:{
                    'model':this.model,
                    'id':this.res_id,
                    'field':this.name,
                    'filename_field':filename_fieldname,
                    'filename':this.recordData[filename_fieldname]||"",
                    'download':true,
                    'data':utils.is_bin_size(this.value)?null:this.value,
                },
                error:(error)=>this.call('crash_manager','rpc_error',error),
                url:'/web/content',
            });
            ev.stopPropagation();
        }
    },
});

varFieldPdfViewer=FieldBinaryFile.extend({
    description:_lt("PDFViewer"),
    supportedFieldTypes:['binary'],
    template:'FieldPdfViewer',
    accepted_file_extensions:'application/pdf',
    /**
     *@override
     */
    init:function(){
        this._super.apply(this,arguments);
        this.PDFViewerApplication=false;
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *@private
     *@param{DOMElement}iframe
     */
    _disableButtons:function(iframe){
        $(iframe).contents().find('button#openFile').hide();
    },
    /**
     *@private
     *@param{string}[fileURI]fileURIifspecified
     *@returns{string}thepdfviewerURI
     */
    _getURI:function(fileURI){
        varpage=this.recordData[this.name+'_page']||1;
        if(!fileURI){
            varqueryObj={
                model:this.model,
                field:this.name,
                id:this.res_id,
            };
            varqueryString=$.param(queryObj);
            fileURI='/web/content?'+queryString;
        }
        fileURI=encodeURIComponent(fileURI);
        varviewerURL='/web/static/lib/pdfjs/web/viewer.html?file=';
        returnviewerURL+fileURI+'#page='+page;
    },
    /**
     *@private
     *@override
     */
    _render:function(){
        varself=this;
        var$pdfViewer=this.$('.o_form_pdf_controls').children().add(this.$('.o_pdfview_iframe'));
        var$selectUpload=this.$('.o_select_file_button').first();
        var$iFrame=this.$('.o_pdfview_iframe');

        $iFrame.on('load',function(){
            self.PDFViewerApplication=this.contentWindow.window.PDFViewerApplication;
            self._disableButtons(this);
        });
        if(this.mode==="readonly"&&this.value){
            $iFrame.attr('src',this._getURI());
        }else{
            if(this.value){
                varbinSize=utils.is_bin_size(this.value);
                $pdfViewer.removeClass('o_hidden');
                $selectUpload.addClass('o_hidden');
                if(binSize){
                    $iFrame.attr('src',this._getURI());
                }
            }else{
                $pdfViewer.addClass('o_hidden');
                $selectUpload.removeClass('o_hidden');
            }
        }
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *@override
     *@private
     *@param{Event}ev
     */
    on_file_change:function(ev){
        this._super.apply(this,arguments);
        varfiles=ev.target.files;
        if(!files||files.length===0){
            return;
        }
        //TOCheck:isthererequirementtofallbackonFileReaderifbrowserdon'tsupportURL
        varfileURI=URL.createObjectURL(files[0]);
        if(this.PDFViewerApplication){
            this.PDFViewerApplication.open(fileURI,0);
        }else{
            this.$('.o_pdfview_iframe').attr('src',this._getURI(fileURI));
        }
    },
    /**
     *Removethebehaviourofon_save_asinFieldBinaryFile.
     *
     *@override
     *@private
     *@param{MouseEvent}ev
     */
    on_save_as:function(ev){
        ev.stopPropagation();
    },

});

varPriorityWidget=AbstractField.extend({
    description:_lt("Priority"),
    //thecurrentimplementationofthiswidgetmakesit
    //onlyusableforfieldsoftypeselection
    className:"o_priority",
    attributes:{
        'role':'radiogroup',
    },
    events:{
        'mouseover>a':'_onMouseOver',
        'mouseout>a':'_onMouseOut',
        'click>a':'_onClick',
        'keydown>a':'_onKeydown',
    },
    supportedFieldTypes:['selection'],

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *Likebooleanfields,thiswidgetalwayshasavalue,sincethedefault
     *valueisalreadyavalidvalue.
     *
     *@override
     */
    isSet:function(){
        returntrue;
    },

    /**
     *Returnsthecurrently-checkedstar,orthefirstoneifnostaris
     *checked.
     *
     *@override
     */
    getFocusableElement:function(){
        varchecked=this.$("[aria-checked='true']");
        returnchecked.length?checked:this.$("[data-index='1']");
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *Rendersastarforeachpossiblevalue,readonlyoreditmodedoesn'tmatter.
     *
     *@override
     *@private
     */
    _render:function(){
        varself=this;
        varindex_value=this.value?_.findIndex(this.field.selection,function(v){
            returnv[0]===self.value;
        }):0;
        this.$el.empty();
        this.empty_value=this.field.selection[0][0];
        this.$el.attr('aria-label',this.string);
        constisReadonly=this.record.evalModifiers(this.attrs.modifiers).readonly;
        _.each(this.field.selection.slice(1),function(choice,index){
            consttag=isReadonly?'<span>':'<ahref="#">';
            self.$el.append(self._renderStar(tag,index_value>=index+1,index+1,choice[1],index_value));
        });
    },

    /**
     *Rendersastarrepresentingaparticularvalueforthisfield.
     *
     *@param{string}taghtmltagtobepassedtojquerytoholdthestar
     *@param{boolean}isFullwhetherthestarisafullstarornot
     *@param{integer}indextheindexofthestarintheseries
     *@param{string}tiptooltipforthisstar'smeaning
     *@param{integer}indexValuetheindexofthelastfullstaror0
     *@private
     */
    _renderStar:function(tag,isFull,index,tip,indexValue){
        varisChecked=indexValue===index;
        vardefaultFocus=indexValue===0&&index===1;
        return$(tag)
            .attr('role','radio')
            .attr('aria-checked',isChecked)
            .attr('title',tip)
            .attr('aria-label',tip)
            .attr('tabindex',isChecked||defaultFocus?0:-1)
            .attr('data-index',index)
            .addClass('o_priority_starfa')
            .toggleClass('fa-star',isFull)
            .toggleClass('fa-star-o',!isFull);
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *Updatethevalueofthefieldbasedonwhichstartheuserclickedon.
     *
     *@param{MouseEvent}event
     *@private
     */
    _onClick:function(event){
        event.preventDefault();
        event.stopPropagation();
        varindex=$(event.currentTarget).data('index');
        varnewValue=this.field.selection[index][0];
        if(newValue===this.value){
            newValue=this.empty_value;
        }
        this._setValue(newValue);
    },

    /**
     *Resetthestardisplaystatus.
     *
     *@private
     */
    _onMouseOut:function(){
        clearTimeout(this.hoverTimer);
        varself=this;
        this.hoverTimer=setTimeout(function(){
            self._render();
        },200);
    },

    /**
     *Colorsthestarstoshowtheusertheresultwhenclickingonit.
     *
     *@param{MouseEvent}event
     *@private
     */
    _onMouseOver:function(event){
        clearTimeout(this.hoverTimer);
        this.$('.o_priority_star').removeClass('fa-star-o').addClass('fa-star');
        $(event.currentTarget).nextAll().removeClass('fa-star').addClass('fa-star-o');
    },

    /**
     *Runsthedefaultbehaviorwhen<enter>ispressedoverastar
     *(thesameasifitwasclicked);otherwiseforwardseventtothewidget.
     *
     *@param{KeydownEvent}event
     *@private
     */
    _onKeydown:function(event){
        if(event.which===$.ui.keyCode.ENTER){
            return;
        }
        this._super.apply(this,arguments);
    },

    _onNavigationMove:function(ev){
        var$curControl=this.$('a:focus');
        var$nextControl;
        if(ev.data.direction==='right'||ev.data.direction==='down'){
            $nextControl=$curControl.next('a');
        }elseif(ev.data.direction==='left'||ev.data.direction==='up'){
            $nextControl=$curControl.prev('a');
        }
        if($nextControl&&$nextControl.length){
            ev.stopPropagation();
            $nextControl.focus();
            return;
        }
        this._super.apply(this,arguments);
    },
});

varAttachmentImage=AbstractField.extend({
    className:'o_attachment_image',

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *Resetcoverimagewhenwidgetvaluechange
     *
     *@private
     */
    _render:function(){
        if(this.value){
            this.$el.empty().append($('<img>/',{
                src:"/web/image/"+this.value.data.id+"?unique=1",
                title:this.value.data.display_name,
                alt:_t("Image")
            }));
        }
    }
});

varStateSelectionWidget=AbstractField.extend({
    template:'FormSelection',
    events:{
        'click.dropdown-item':'_setSelection',
    },
    supportedFieldTypes:['selection'],

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *Returnsthedropdownbutton.
     *
     *@override
     */
    getFocusableElement:function(){
        returnthis.$("a[data-toggle='dropdown']");
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *PreparesthestatevaluestoberenderedusingtheFormSelection.Itemstemplate.
     *
     *@private
     */
    _prepareDropdownValues:function(){
        varself=this;
        var_data=[];
        varcurrent_stage_id=self.recordData.stage_id&&self.recordData.stage_id[0];
        varstage_data={
            id:current_stage_id,
            legend_normal:this.recordData.legend_normal||undefined,
            legend_blocked:this.recordData.legend_blocked||undefined,
            legend_done:this.recordData.legend_done||undefined,
        };
        _.map(this.field.selection||[],function(selection_item){
            varvalue={
                'name':selection_item[0],
                'tooltip':selection_item[1],
            };
            if(selection_item[0]==='normal'){
                value.state_name=stage_data.legend_normal?stage_data.legend_normal:selection_item[1];
            }elseif(selection_item[0]==='done'){
                value.state_class='o_status_green';
                value.state_name=stage_data.legend_done?stage_data.legend_done:selection_item[1];
            }else{
                value.state_class='o_status_red';
                value.state_name=stage_data.legend_blocked?stage_data.legend_blocked:selection_item[1];
            }
            _data.push(value);
        });
        return_data;
    },

    /**
     *ThiswidgetusestheFormSelectiontemplatebutneedstocustomizeitabit.
     *
     *@private
     *@override
     */
    _render:function(){
        varstates=this._prepareDropdownValues();
        //Adapt"FormSelection"
        //Likepriority,defaultonthefirstpossiblevalueifnovalueisgiven.
        varcurrentState=_.findWhere(states,{name:this.value})||states[0];
        this.$('.o_status')
            .removeClass('o_status_redo_status_green')
            .addClass(currentState.state_class)
            .prop('special_click',true)
            .parent().attr('title',currentState.state_name)
            .attr('aria-label',this.string+":"+currentState.state_name);

        //Render"FormSelection.Items"andmoveitinto"FormSelection"
        var$items=$(qweb.render('FormSelection.items',{
            states:_.without(states,currentState)
        }));
        var$dropdown=this.$('.dropdown-menu');
        $dropdown.children().remove();//removeolditems
        $items.appendTo($dropdown);

        //Disableeditionifthefieldisreadonly
        varisReadonly=this.record.evalModifiers(this.attrs.modifiers).readonly;
        this.$('a[data-toggle=dropdown]').toggleClass('disabled',isReadonly||false);
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *InterceptstheclickontheFormSelection.Itemtosetthewidgetvalue.
     *
     *@private
     *@param{MouseEvent}ev
     */
    _setSelection:function(ev){
        ev.preventDefault();
        var$item=$(ev.currentTarget);
        varvalue=String($item.data('value'));
        this._setValue(value);
        if(this.mode==='edit'){
            this._render();
        }
    },
});

varFavoriteWidget=AbstractField.extend({
    className:'o_favorite',
    events:{
        'click':'_setFavorite'
    },
    supportedFieldTypes:['boolean'],

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *Abooleanfieldisalwayssetsincefalseisavalidvalue.
     *
     *@override
     */
    isSet:function(){
        returntrue;
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *Renderfavoriteiconbasedonstate
     *
     *@override
     *@private
     */
    _render:function(){
        vartip=this.value?_t('RemovefromFavorites'):_t('AddtoFavorites');
        vartemplate=this.attrs.nolabel?'<ahref="#"><iclass="fa%s"title="%s"aria-label="%s"role="img"></i></a>':'<ahref="#"><iclass="fa%s"role="img"aria-label="%s"></i>%s</a>';
        this.$el.empty().append(_.str.sprintf(template,this.value?'fa-star':'fa-star-o',tip,tip));
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *Togglefavoritestate
     *
     *@private
     *@param{MouseEvent}event
     */
    _setFavorite:function(event){
        event.preventDefault();
        event.stopPropagation();
        this._setValue(!this.value);
    },
});

varLabelSelection=AbstractField.extend({
    supportedFieldTypes:['selection'],

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *Thiswidgetrendersasimplenon-editablelabel.Colorclassescanbeset
     *usingthe'classes'keyfromtheoptionstag,suchas:
     *<field[...]options="{'classes':{'value':'className',...}}"/>
     *
     *@private
     *@override
     */
    _render:function(){
        this.classes=this.nodeOptions&&this.nodeOptions.classes||{};
        varlabelClass=this.classes[this.value]||'primary';
        this.$el.addClass('badgebadge-'+labelClass).text(this._formatValue(this.value));
    },
});

varBooleanToggle=FieldBoolean.extend({
    description:_lt("Toggle"),
    className:FieldBoolean.prototype.className+'o_boolean_toggle',
    events:{
        'click':'_onClick'
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *Toggleactivevalue
     *
     *@private
     *@param{MouseEvent}event
     */
    _onClick:function(event){
        event.stopPropagation();
        if(!this.$input.prop('disabled')){
            this._setValue(!this.value);
        }
    },

    /**
     *Theboolean_toggleshouldonlybedisabledwhenthereisareadonlymodifier
     *notwhentheviewisinreadonlymode
     */
    _render:function(){
        this._super.apply(this,arguments);
        constisReadonly=this.record.evalModifiers(this.attrs.modifiers).readonly||false;
        this.$input.prop('disabled',isReadonly);
    }
});

varStatInfo=AbstractField.extend({
    supportedFieldTypes:['integer','float'],

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *StatInfowidgetsarealwayssetsincetheybasicallyonlydisplayinfo.
     *
     *@override
     */
    isSet:function(){
        returntrue;
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *RendersthefieldvalueusingtheStatInfotemplate.Thetextpartofthe
     *widgetiseitherthestringattributeofthisnodeinthevieworthe
     *labelofthefielditselfifnostringattributeisgiven.
     *
     *@override
     *@private
     */
    _render:function(){
        varoptions={
            value:this._formatValue(this.value||0),
        };
        if(!this.attrs.nolabel){
            if(this.nodeOptions.label_field&&this.recordData[this.nodeOptions.label_field]){
                options.text=this.recordData[this.nodeOptions.label_field];
            }else{
                options.text=this.string;
            }
        }
        this.$el.html(qweb.render("StatInfo",options));
        this.$el.addClass('o_stat_info');
    },
});

varFieldPercentPie=AbstractField.extend({
    description:_lt("PercentagePie"),
    template:'FieldPercentPie',
    supportedFieldTypes:['integer','float'],

    /**
     *Registersomeusefulreferencesforlaterusethroughoutthewidget.
     *
     *@override
     */
    start:function(){
        this.$leftMask=this.$('.o_mask').first();
        this.$rightMask=this.$('.o_mask').last();
        this.$pieValue=this.$('.o_pie_value');
        returnthis._super();
    },

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *PercentPiewidgetsarealwayssetsincetheybasicallyonlydisplayinfo.
     *
     *@override
     */
    isSet:function(){
        returntrue;
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *Thiswidgettemplateneedsjavascripttoapplythetransformation
     *associatedwiththerotationofthepiechart.
     *
     *@override
     *@private
     */
    _render:function(){
        varvalue=this.value||0;
        vardegValue=360*value/100;

        this.$rightMask.toggleClass('o_full',degValue>=180);

        varleftDeg='rotate('+((degValue<180)?180:degValue)+'deg)';
        varrightDeg='rotate('+((degValue<180)?degValue:0)+'deg)';
        this.$leftMask.css({transform:leftDeg,msTransform:leftDeg,mozTransform:leftDeg,webkitTransform:leftDeg});
        this.$rightMask.css({transform:rightDeg,msTransform:rightDeg,mozTransform:rightDeg,webkitTransform:rightDeg});

        this.$pieValue.text(Math.round(value)+'%');
    },
});

/**
 *Nodeoptions:
 *
 *-title:titleofthebar,displayedontopofthebaroptions
 *-editable:booleanifvalueiseditable
 *-current_value:getthecurrent_valuefromthefieldthatmustbepresentintheview
 *-max_value:getthemax_valuefromthefieldthatmustbepresentintheview
 *-edit_max_value:booleanifthemax_valueiseditable
 *-title:titleofthebar,displayedontopofthebar-->nottranslated, useparameter"title"instead
 */
varFieldProgressBar=AbstractField.extend({
    description:_lt("ProgressBar"),
    template:"ProgressBar",
    events:{
        'changeinput':'on_change_input',
        'inputinput':'on_change_input',
        'keyupinput':function(e){
            if(e.which===$.ui.keyCode.ENTER){
                this.on_change_input(e);
            }
        },
    },
    supportedFieldTypes:['integer','float'],
    init:function(){
        this._super.apply(this,arguments);

        //theprogressbarneedsthevaluesandnotthefieldname,passedinoptions
        if(this.recordData[this.nodeOptions.current_value]){
            this.value=this.recordData[this.nodeOptions.current_value];
        }

        //Thefewnextlinesdetermineifthewidgetcanwriteontherecordornot
        this.editable_readonly=!!this.nodeOptions.editable_readonly;
        //"hard"readonly
        this.readonly=this.nodeOptions.readonly||!this.nodeOptions.editable;

        this.canWrite=!this.readonly&&(
            this.mode==='edit'||
            (this.editable_readonly&&this.mode==='readonly')||
            (this.viewType==='kanban')//Keepbehaviorbeforecommit
        );

        //Booleantotoggleifweeditthenumerator(value)orthedenominator(max_value)
        this.edit_max_value=!!this.nodeOptions.edit_max_value;
        this.max_value=this.recordData[this.nodeOptions.max_value]||100;

        this.title=_t(this.attrs.title||this.nodeOptions.title)||'';

        //Abilitytoeditthefieldthroughthebar
        ///!\thisfeatureisdisabled
        this.enableBarAsInput=false;
        this.edit_on_click=this.enableBarAsInput&&this.mode==='readonly'&&!this.edit_max_value;

        this.write_mode=false;
    },
    _render:function(){
        varself=this;
        this._render_value();

        if(this.canWrite){
            if(this.edit_on_click){
                this.$el.on('click','.o_progress',function(e){
                    var$target=$(e.currentTarget);
                    varnumValue=Math.floor((e.pageX-$target.offset().left)/$target.outerWidth()*self.max_value);
                    self.on_update(numValue);
                    self._render_value();
                });
            }else{
                this.$el.on('click',function(){
                    if(!self.write_mode){
                        var$input=$('<input>',{type:'text',class:'o_progressbar_valueo_input'});
                        $input.on('blur',self.on_change_input.bind(self));
                        self.$('.o_progressbar_value').replaceWith($input);
                        self.write_mode=true;
                        self._render_value();
                    }
                });
            }
        }
        returnthis._super();
    },
    /**
     *Updatesthewidgetwithvalue
     *
     *@param{Number}value
     */
    on_update:function(value){
        if(this.edit_max_value){
            this.max_value=value;
            this._isValid=true;
            varchanges={};
            changes[this.nodeOptions.max_value]=this.max_value;
            this.trigger_up('field_changed',{
                dataPointID:this.dataPointID,
                changes:changes,
            });
        }else{
            //_setValuesacceptsstringandwillparseit
            varformattedValue=this._formatValue(value);
            this._setValue(formattedValue);
        }
    },
    on_change_input:function(e){
        var$input=$(e.target);
        if(e.type==='change'&&!$input.is(':focus')){
            return;
        }

        varparsedValue;
        try{
            //CoverallnumberswithparseFloat
            parsedValue=field_utils.parse.float($input.val());
        }catch(error){
            this.do_warn(false,_t("Pleaseenteranumericalvalue"));
        }

        if(parsedValue!==undefined){
            if(e.type==='input'){//ensurewhathasjustbeentypedintheinputisanumber
                //returnsNaNifnotanumber
                this._render_value(parsedValue);
                if(parsedValue===0){
                    $input.select();
                }
            }else{//Implicittype==='blur':wecommitthevalue
                if(this.edit_max_value){
                    parsedValue=parsedValue||100;
                }

                var$div=$('<div>',{class:'o_progressbar_value'});
                this.$('.o_progressbar_value').replaceWith($div);
                this.write_mode=false;

                this.on_update(parsedValue);
                this._render_value();
            }
        }
    },
    /**
     *Rendersthevalue
     *
     *@private
     *@param{Number}v
     */
    _render_value:function(v){
        varvalue=this.value;
        varmax_value=this.max_value;
        if(!isNaN(v)){
            if(this.edit_max_value){
                max_value=v;
            }else{
                value=v;
            }
        }
        value=value||0;
        max_value=max_value||0;

        varwidthComplete;
        if(value<=max_value){
            widthComplete=value/max_value*100;
        }else{
            widthComplete=100;
        }

        this.$('.o_progress').toggleClass('o_progress_overflow',value>max_value)
            .attr('aria-valuemin','0')
            .attr('aria-valuemax',max_value)
            .attr('aria-valuenow',value);
        this.$('.o_progressbar_complete').css('width',widthComplete+'%');

        if(!this.write_mode){
            if(max_value!==100){
                this.$('.o_progressbar_value').text(utils.human_number(value)+"/"+utils.human_number(max_value));
            }else{
                this.$('.o_progressbar_value').text(utils.human_number(value)+"%");
            }
        }elseif(isNaN(v)){
            this.$('.o_progressbar_value').val(this.edit_max_value?max_value:value);
            this.$('.o_progressbar_value').focus().select();
        }
    },
    /**
     *Theprogressbarhasmorethanonefield/valuetodealwith
     *i.e.max_value
     *
     *@override
     *@private
     */
    _reset:function(){
        this._super.apply(this,arguments);
        varnew_max_value=this.recordData[this.nodeOptions.max_value];
        this.max_value= new_max_value!==undefined?new_max_value:this.max_value;
    },
    isSet:function(){
        returntrue;
    },
});

/**
 *Thiswidgetisintendedtobeusedonbooleanfields.Ittogglesabutton
 *switchingbetweenagreenbullet/graybullet.
*/
varFieldToggleBoolean=AbstractField.extend({
    description:_lt("Button"),
    template:"toggle_button",
    events:{
        'click':'_onToggleButton'
    },
    supportedFieldTypes:['boolean'],

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *Abooleanfieldisalwayssetsincefalseisavalidvalue.
     *
     *@override
     */
    isSet:function(){
        returntrue;
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *@override
     *@private
     */
    _render:function(){
        this.$('i')
            .toggleClass('o_toggle_button_success',!!this.value)
            .toggleClass('text-muted',!this.value);
        varisReadonly=this.record.evalModifiers(this.attrs.modifiers).readonly;
        this.$el.prop('disabled',isReadonly);
        vartitle=this.value?this.attrs.options.active:this.attrs.options.inactive;
        this.$el.attr('title',title);
        this.$el.attr('aria-pressed',this.value);
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *Togglethebutton
     *
     *@private
     *@param{MouseEvent}event
     */
    _onToggleButton:function(event){
        event.stopPropagation();
        this._setValue(!this.value);
    },
});

varJournalDashboardGraph=AbstractField.extend({
    className:"o_dashboard_graph",
    jsLibs:[
        '/web/static/lib/Chart/Chart.js',
    ],
    init:function(){
        this._super.apply(this,arguments);
        this.graph_type=this.attrs.graph_type;
        this.data=JSON.parse(this.value);
    },
    /**
     *ThewidgetviewusestheChartJSlibtorenderthegraph.Thislib
     *requiresthattherenderingisdonedirectlyintotheDOM(sothatitcan
     *correctlycomputepositions).However,theviewsarealwaysrenderedin
     *fragments,andappendedtotheDOMonceready(topreventthemfrom
     *flickering).Wehereusetheon_attach_callbackhook,calledwhenthe
     *widgetisattachedtotheDOM,toperformtherendering.Thisensures
     *thattherenderingisalwaysdoneintheDOM.
     */
    on_attach_callback:function(){
        this._isInDOM=true;
        this._renderInDOM();
    },
    /**
     *CalledwhenthefieldisdetachedfromtheDOM.
     */
    on_detach_callback:function(){
        this._isInDOM=false;
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *RenderthewidgetonlywhenitisintheDOM.
     *
     *@override
     *@private
     */
    _render:function(){
        if(this._isInDOM){
            returnthis._renderInDOM();
        }
        returnPromise.resolve();
    },
    /**
     *Renderthewidget.ThisfunctionassumesthatitisattachedtotheDOM.
     *
     *@private
     */
    _renderInDOM:function(){
        this.$el.empty();
        varconfig,cssClass;
        if(this.graph_type==='line'){
            config=this._getLineChartConfig();
            cssClass='o_graph_linechart';
        }elseif(this.graph_type==='bar'){
            config=this._getBarChartConfig();
            cssClass='o_graph_barchart';
        }
        this.$canvas=$('<canvas/>');
        this.$el.addClass(cssClass);
        this.$el.empty();
        this.$el.append(this.$canvas);
        varcontext=this.$canvas[0].getContext('2d');
        this.chart=newChart(context,config);
    },
    _getLineChartConfig:function(){
        varlabels=this.data[0].values.map(function(pt){
            returnpt.x;
        });
        varborderColor=this.data[0].is_sample_data?'#dddddd':'#009EFB';
        varbackgroundColor=this.data[0].is_sample_data?'#ebebeb':'#dcd0d9';
        return{
            type:'line',
            data:{
                labels:labels,
                datasets:[{
                    data:this.data[0].values,
                    fill:'start',
                    label:this.data[0].key,
                    backgroundColor:backgroundColor,
                    borderColor:borderColor,
                    borderWidth:2,
                }]
            },
            options:{
                legend:{display:false},
                scales:{
                    yAxes:[{display:false}],
                    xAxes:[{display:false}]
                },
                maintainAspectRatio:false,
                elements:{
                    line:{
                        tension:0.000001
                    }
                },
                tooltips:{
                    intersect:false,
                    position:'nearest',
                    caretSize:0,
                },
            },
        };
    },
    _getBarChartConfig:function(){
        vardata=[];
        varlabels=[];
        varbackgroundColor=[];

        this.data[0].values.forEach(function(pt){
            data.push(pt.value);
            labels.push(pt.label);
            varcolor=pt.type==='past'?'#ccbdc8':(pt.type==='future'?'#a5d8d7':'#ebebeb');
            backgroundColor.push(color);
        });
        return{
            type:'bar',
            data:{
                labels:labels,
                datasets:[{
                    data:data,
                    fill:'start',
                    label:this.data[0].key,
                    backgroundColor:backgroundColor,
                }]
            },
            options:{
                legend:{display:false},
                scales:{
                    yAxes:[{display:false}],
                },
                maintainAspectRatio:false,
                tooltips:{
                    intersect:false,
                    position:'nearest',
                    caretSize:0,
                },
                elements:{
                    line:{
                        tension:0.000001
                    }
                },
            },
        };
    },
});

/**
 *The"Domain"fieldallowstheusertoconstructatechnical-prefixdomain
 *thankstoatree-likeinterfaceandseetheselectedrecordsinrealtime.
 *Indebugmode,aninputisalsotheretobeabletoentertheprefixchar
 *domaindirectly(ortobuildadvanceddomainsthetree-likeinterfacedoes
 *notallowto).
 */
varFieldDomain=AbstractField.extend({
    /**
     *Fetchesthenumberofrecordswhicharematchedbythedomain(ifthe
     *domainisnotserver-valid,thevalueisfalse)andthemodelthe
     *fieldmustworkwith.
     */
    specialData:"_fetchSpecialDomain",

    events:_.extend({},AbstractField.prototype.events,{
        "click.o_domain_show_selection_button":"_onShowSelectionButtonClick",
        "click.o_field_domain_dialog_button":"_onDialogEditButtonClick",
    }),
    custom_events:_.extend({},AbstractField.prototype.custom_events,{
        domain_changed:"_onDomainSelectorValueChange",
        domain_selected:"_onDomainSelectorDialogValueChange",
        open_record:"_onOpenRecord",
    }),
    /**
     *@constructor
     *@overrideinitfromAbstractField
     */
    init:function(){
        this._super.apply(this,arguments);

        this.inDialog=!!this.nodeOptions.in_dialog;
        this.fsFilters=this.nodeOptions.fs_filters||{};

        this.className="o_field_domain";
        if(this.mode==="edit"){
            this.className+="o_edit_mode";
        }
        if(!this.inDialog){
            this.className+="o_inline_mode";
        }

        this._setState();
    },

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *Adomainfieldisalwayssetsincethefalsevalueisconsideredtobe
     *equalto"[]"(matchallrecords).
     *
     *@override
     */
    isSet:function(){
        returntrue;
    },
    /**
     *@overrideisValidfromAbstractField.isValid
     *Parsingthecharvalueisnotenoughforthisfield.Itisconsidered
     *validiftheinternaldomainselectorwasbuiltcorrectlyandthatthe
     *querytothemodeltotestthedomaindidnotfail.
     *
     *@returns{boolean}
     */
    isValid:function(){
        return(
            this._super.apply(this,arguments)
            &&(!this.domainSelector||this.domainSelector.isValid())
            &&this._isValidForModel
        );
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *@private
     *@override_renderfromAbstractField
     *@returns{Promise}
     */
    _render:function(){
        //Ifthereisnomodel,onlychangethenon-domain-selectorcontent
        if(!this._domainModel){
            this._replaceContent();
            returnPromise.resolve();
        }

        //Convertcharvaluetoarrayvalue
        varvalue=this.value||"[]";

        //Createthedomainselectororchangethevalueofthecurrentone...
        vardef;
        if(!this.domainSelector){
            this.domainSelector=newDomainSelector(this,this._domainModel,value,{
                readonly:this.mode==="readonly"||this.inDialog,
                filters:this.fsFilters,
                debugMode:config.isDebug(),
            });
            def=this.domainSelector.prependTo(this.$el);
        }else{
            def=this.domainSelector.setDomain(value);
        }
        //...thenreplacetheothercontent(matchedrecords,etc)
        returndef.then(this._replaceContent.bind(this));
    },
    /**
     *RenderthefieldDOMexceptforthedomainselectorpart.Thefullfield
     *DOMiscomposedofaDIVwhichcontainsthedomainselectorwidget,
     *followedbyothercontent.Thisothercontentishandledbythismethod.
     *
     *@private
     */
    _replaceContent:function(){
        if(this._$content){
            this._$content.remove();
        }
        this._$content=$(qweb.render("FieldDomain.content",{
            hasModel:!!this._domainModel,
            isValid:!!this._isValidForModel,
            nbRecords:this.record.specialData[this.name].nbRecords||0,
            inDialogEdit:this.inDialog&&this.mode==="edit",
        }));
        this._$content.appendTo(this.$el);
    },
    /**
     *@override_resetfromAbstractField
     *Checkifthemodelthefieldworkswithhas(tobe)changed.
     *
     *@private
     */
    _reset:function(){
        this._super.apply(this,arguments);
        varoldDomainModel=this._domainModel;
        this._setState();
        if(this.domainSelector&&this._domainModel!==oldDomainModel){
            //Ifthemodelhaschanged,destroythecurrentdomainselector
            this.domainSelector.destroy();
            this.domainSelector=null;
        }
    },
    /**
     *Setsthemodelthefieldmustworkwithandwhetherornotthecurrent
     *domainvalueisvalidforthisparticularmodel.Thisisinferredfrom
     *thereceivedspecialdata.
     *
     *@private
     */
    _setState:function(){
        varspecialData=this.record.specialData[this.name];
        this._domainModel=specialData.model;
        this._isValidForModel=(specialData.nbRecords!==false);
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *Calledwhenthe"Showselection"buttonisclicked
     *->Openamodaltoseethematchedrecords
     *
     *@param{Event}e
     */
    _onShowSelectionButtonClick:function(e){
        e.preventDefault();
        newview_dialogs.SelectCreateDialog(this,{
            title:_t("Selectedrecords"),
            res_model:this._domainModel,
            context:this.record.getContext({fieldName:this.name,viewType:this.viewType}),
            domain:this.value||"[]",
            no_create:true,
            readonly:true,
            disable_multiple_selection:true,
        }).open();
    },
    /**
     *Calledwhenthe"Editdomain"buttonisclicked(whenusingthein_dialog
     *option)->OpenaDomainSelectorDialogtoeditthevalue
     *
     *@param{Event}e
     */
    _onDialogEditButtonClick:function(e){
        e.preventDefault();
        newDomainSelectorDialog(this,this._domainModel,this.value||"[]",{
            readonly:this.mode==="readonly",
            filters:this.fsFilters,
            debugMode:config.isDebug(),
        }).open();
    },
    /**
     *Calledwhenthedomainselectorvalueischanged(donothingifitisthe
     *onewhichisinadialog(@see_onDomainSelectorDialogValueChange))
     *->Adapttheinternalvaluestate
     *
     *@param{FlectraEvent}e
     */
    _onDomainSelectorValueChange:function(e){
        if(this.inDialog)return;
        this._setValue(Domain.prototype.arrayToString(this.domainSelector.getDomain()));
    },
    /**
     *Calledwhenthein-dialogdomainselectorvalueisconfirmed
     *->Adapttheinternalvaluestate
     *
     *@param{FlectraEvent}e
     */
    _onDomainSelectorDialogValueChange:function(e){
        this._setValue(Domain.prototype.arrayToString(e.data.domain));
    },
    /**
     *Stopsthepropagationofthe'open_record'event,aswedon'twantthe
     *usertobeabletoopenrecordsfromthelistopenedinadialog.
     *
     *@param{FlectraEvent}event
     */
    _onOpenRecord:function(event){
        event.stopPropagation();
    },
});

/**
 *ThiswidgetisintendedtobeusedonTextfields.ItwillprovideAceEditor
 *foreditingXMLandPython.
 */
varAceEditor=DebouncedField.extend({
    template:"AceEditor",
    jsLibs:[
        '/web/static/lib/ace/ace.js',
        [
            '/web/static/lib/ace/mode-python.js',
            '/web/static/lib/ace/mode-xml.js'
        ]
    ],
    events:{},//eventsaretriggeredmanuallyforthisdebouncedwidget
    /**
     *@overridestartfromAbstractField(Widget)
     *
     *@returns{Promise}
     */
    start:function(){
        this._startAce(this.$('.ace-view-editor')[0]);
        returnthis._super.apply(this,arguments);
    },
    /**
     *@overridedestroyfromAbstractField(Widget)
     */
    destroy:function(){
        if(this.aceEditor){
            this.aceEditor.destroy();
        }
        this._super.apply(this,arguments);
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *Formatvalue
     *
     *Note:Wehavetooverwritethismethodtoalwaysreturnastring.
     *AceEditorworkswithstringandnotbooleanvalue.
     *
     *@override
     *@private
     *@param{boolean|string}value
     *@returns{string}
     */
    _formatValue:function(value){
        returnthis._super.apply(this,arguments)||'';
    },

    /**
     *@override
     *@private
     */
    _getValue:function(){
        returnthis.aceSession.getValue();
    },
    /**
     *@override_renderfromAbstractField
     *Therenderingisthesameforeditandreadonlymode:changingtheace
     *sessionvalue.Thisisonlydoneifthevalueintheaceeditorisnot
     *alreadythenewone(preventlosingfocus/retriggeringchanges/empty
     *theundostack/...).
     *
     *@private
     */
    _render:function(){
        varnewValue=this._formatValue(this.value);
        if(this.aceSession.getValue()!==newValue){
            this.aceSession.setValue(newValue);
        }
    },

    /**
     *StartstheacelibraryonthegivenDOMelement.Thisinitializesthe
     *aceeditoroptionaccordingtotheedit/readonlymodeandbindsace
     *editorevents.
     *
     *@private
     *@param{Node}node-theDOMelementtheacelibrarymustinitializeon
     */
    _startAce:function(node){
        this.aceEditor=ace.edit(node);
        this.aceEditor.setOptions({
            maxLines:Infinity,
            showPrintMargin:false,
        });
        if(this.mode==='readonly'){
            this.aceEditor.renderer.setOptions({
                displayIndentGuides:false,
                showGutter:false,
            });
            this.aceEditor.setOptions({
                highlightActiveLine:false,
                highlightGutterLine:false,
                readOnly:true,
            });
            this.aceEditor.renderer.$cursorLayer.element.style.display="none";
        }
        this.aceEditor.$blockScrolling=true;
        this.aceSession=this.aceEditor.getSession();
        this.aceSession.setOptions({
            useWorker:false,
            mode:"ace/mode/"+(this.nodeOptions.mode||'xml'),
            tabSize:2,
            useSoftTabs:true,
        });
        if(this.mode==="edit"){
            this.aceEditor.on("change",this._doDebouncedAction.bind(this));
            this.aceEditor.on("blur",this._doAction.bind(this));
        }
    },
});


/**
 *TheFieldColorwidgetgiveavisualrepresentationofacolor
 *ClickingonitbringupaninstanceofColorpickerDialog
 */
varFieldColor=AbstractField.extend({
    template:'FieldColor',
    events:_.extend({},AbstractField.prototype.events,{
        'click.o_field_color':'_onColorClick',
    }),
    custom_events:_.extend({},AbstractField.prototype.custom_events,{
        'colorpicker:saved':'_onColorpickerSaved',
    }),

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *@override
     */
    getFocusableElement:function(){
        returnthis.$('.o_field_color');
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
    *@override
    *@private
    */
    _render:function(){
        this.$('.o_field_color').data('value',this.value)
            .css('background-color',this.value)
            .attr('title',this.value);
        returnthis._super.apply(this,arguments);
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
    *@private
    */
    _onColorClick:function(){
        if(this.mode==='edit'){
            constdialog=newColorpickerDialog(this,{
                defaultColor:this.value,
                noTransparency:true,
            }).open();
            dialog.on('closed',this,()=>{
                //weneedtowaitforthemodaltoexecuteitswholeclosefunction.
                Promise.resolve().then(()=>{
                    this.getFocusableElement().focus();
                });
            });
        }
    },

    /**
    *@private
    *@param{FlectraEvent}ev
    */
    _onColorpickerSaved:function(ev){
        this._setValue(ev.data.hex);
    },

    /**
     *@override
     *@private
     */
    _onKeydown:function(ev){
        if(ev.which===$.ui.keyCode.ENTER){
            ev.preventDefault();
            ev.stopPropagation();
            this._onColorClick(ev);
        }else{
            this._super.apply(this,arguments);
        }
    },
});

varFieldColorPicker=FieldInteger.extend({
    RECORD_COLORS:[
        _t('Nocolor'),
        _t('Red'),
        _t('Orange'),
        _t('Yellow'),
        _t('Lightblue'),
        _t('Darkpurple'),
        _t('Salmonpink'),
        _t('Mediumblue'),
        _t('Darkblue'),
        _t('Fushia'),
        _t('Green'),
        _t('Purple'),
    ],

    /**
     *Preparestherendering,sincewearebasedonaninputbutnotusingit
     *settingtagNameafterparentinitforcethewidgettonotrenderaninput
     *
     *@override
     */
    init:function(){
        this._super.apply(this,arguments);
        this.tagName='div';
    },
    /**
     *Renderthewidgetwhenitisedited.
     *
     *@override
     */
    _renderEdit:function(){
        this.$el.html(qweb.render('ColorPicker'));
        this._setupColorPicker();
        this._highlightSelectedColor();
    },
    /**
     *RenderthewidgetwhenitisNOTedited.
     *
     *@override
     */
    _renderReadonly:function(){
        varselectedColorName=this.RECORD_COLORS[this.value];
        this.$el.html(qweb.render('ColorPickerReadonly',{active_color:this.value,name_color:selectedColorName}));
        this.$el.on('click','a',function(ev){ev.preventDefault();});
    },
    /**
     *Renderthekanbancolorsinsidefirstulelement.
     *ThisisthesametemplateasinKanbanRecord.
     *
     *<a>elementsclickareboundto_onColorChanged
     *
     */
    _setupColorPicker:function(){
        var$colorpicker=this.$('ul');
        if(!$colorpicker.length){
            return;
        }
        $colorpicker.html(qweb.render('KanbanColorPicker',{colors:this.RECORD_COLORS}));
        $colorpicker.on('click','a',this._onColorChanged.bind(this));
    },
    /**
     *Returnsthewidgetvalue.
     *SinceNumericFieldisbasedonaninput,butwedon'tuseit,
     *weoverridethisfunctiontousetheinternalvalueofthewidget.
     *
     *
     *@override
     *@returns{string}
     */
    _getValue:function(){
        returnthis.value;
    },
    /**
     *Listenerineditmodeforclickonacolor.
     *Theactualcolorcanbefoundinthedata-color
     *attributeofthetargetelement.
     *
     *Were-renderthewidgetaftertheupdatebecause
     *theselectedcolorhaschangedanditshould
     *bereflectedintheui.
     *
     *@paramev
     */
    _onColorChanged:function(ev){
        ev.preventDefault();
        varcolor=null;
        if(ev.currentTarget&&ev.currentTarget.dataset&&ev.currentTarget.dataset.color){
            color=ev.currentTarget.dataset.color;
        }
        if(color){
            this.value=color;
            this._onChange();
            this._renderEdit();
        }
    },
    /**
     *Helpertomodifytheactivecolor'sstyle
     *whileineditmode.
     *
     */
    _highlightSelectedColor:function(){
        try{
            $(this.$('li')[parseInt(this.value)]).css('border','2pxsolidteal');
        }catch(err){

        }
    },
    _onNavigationMove(){
        //disablenavigationfromFieldInput,topreventacrash
    }
});

return{
    TranslatableFieldMixin:TranslatableFieldMixin,
    DebouncedField:DebouncedField,
    FieldEmail:FieldEmail,
    FieldBinaryFile:FieldBinaryFile,
    FieldPdfViewer:FieldPdfViewer,
    AbstractFieldBinary:AbstractFieldBinary,
    FieldBinaryImage:FieldBinaryImage,
    KanbanFieldBinaryImage:KanbanFieldBinaryImage,
    CharImageUrl:CharImageUrl,
    KanbanCharImageUrl:KanbanCharImageUrl,
    FieldBoolean:FieldBoolean,
    BooleanToggle:BooleanToggle,
    FieldChar:FieldChar,
    LinkButton:LinkButton,
    FieldDate:FieldDate,
    FieldDateTime:FieldDateTime,
    FieldDateRange:FieldDateRange,
    RemainingDays:RemainingDays,
    FieldDomain:FieldDomain,
    FieldFloat:FieldFloat,
    FieldFloatTime:FieldFloatTime,
    FieldFloatFactor:FieldFloatFactor,
    FieldFloatToggle:FieldFloatToggle,
    FieldPercentage:FieldPercentage,
    FieldInteger:FieldInteger,
    FieldMonetary:FieldMonetary,
    FieldPercentPie:FieldPercentPie,
    FieldPhone:FieldPhone,
    FieldProgressBar:FieldProgressBar,
    FieldText:FieldText,
    ListFieldText:ListFieldText,
    FieldToggleBoolean:FieldToggleBoolean,
    HandleWidget:HandleWidget,
    InputField:InputField,
    NumericField:NumericField,
    AttachmentImage:AttachmentImage,
    LabelSelection:LabelSelection,
    StateSelectionWidget:StateSelectionWidget,
    FavoriteWidget:FavoriteWidget,
    PriorityWidget:PriorityWidget,
    StatInfo:StatInfo,
    UrlWidget:UrlWidget,
    TextCopyClipboard:TextCopyClipboard,
    CharCopyClipboard:CharCopyClipboard,
    JournalDashboardGraph:JournalDashboardGraph,
    AceEditor:AceEditor,
    FieldColor:FieldColor,
    FieldColorPicker:FieldColorPicker,
};

});
