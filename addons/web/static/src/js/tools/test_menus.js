(function(exports){
    /**
     *ThepurposeofthistestistoclickoneveryinstalledAppandthen
     *openeachview.Oneachview,clickoneachfilter.
     */
    "usestrict";
    varclientActionCount=0;
    varviewUpdateCount=0;
    vartestedApps;
    vartestedMenus;
    varblackListedMenus=['base.menu_theme_store','base.menu_third_party','account.menu_action_account_bank_journal_form','pos_adyen.menu_pos_adyen_account'];
    varappsMenusOnly=false;
    letisEnterprise=flectra.session_info.server_version_info[5]==='e';

    functioncreateWebClientHooks(){
        varAbstractController=flectra.__DEBUG__.services['web.AbstractController'];
        varDiscussWidget=flectra.__DEBUG__.services['mail/static/src/widgets/discuss/discuss.js'];
        varWebClient=flectra.__DEBUG__.services["web.WebClient"];

        WebClient.include({
            current_action_updated:function(action,controller){
                this._super(action,controller);
                clientActionCount++;
            },
        });

        AbstractController.include({
            start:function(){
                this.$el.attr('data-view-type',this.viewType);
                returnthis._super.apply(this,arguments);
            },
            update:function(params,options){
                returnthis._super(params,options).then(function(){
                    viewUpdateCount++;
                });
            },
        });

        if(DiscussWidget){
            DiscussWidget.include({
                /**
                 *Overridingamethodthatiscalledeverytimethediscuss
                 *componentisupdated.
                 */
                _updateControlPanel:asyncfunction(){
                    awaitthis._super(...arguments);
                    viewUpdateCount++;
                },
            });
        }
    }

    functionclickEverywhere(xmlId,light){
        appsMenusOnly=light;
        setTimeout(_clickEverywhere,1000,xmlId);
    }

    //Mainfunctionthatstartsorchestrationoftests
    asyncfunction_clickEverywhere(xmlId){
        console.log("StartingClickEverywheretest");
        varstartTime=performance.now();
        createWebClientHooks();
        testedApps=[];
        testedMenus=[];
        //findingapplicationsmenus
        letappMenuItems;
        if(isEnterprise){
            console.log("Flectraflavor:Enterprise");
            appMenuItems=document.querySelectorAll(xmlId?
                `a.o_app.o_menuitem[data-menu-xmlid="${xmlId}"]`:
                'a.o_app.o_menuitem'
            );
        }else{
            console.log("Flectraflavor:Community");
            appMenuItems=document.querySelectorAll(xmlId?
                `a.o_app[data-menu-xmlid="${xmlId}"]`:
                'a.o_app'
            );
        }
        console.log("Found",appMenuItems.length,"appstotest");
        try{
            for(constappofappMenuItems){
                awaittestApp(app);
            }
            console.log("Testtook",(performance.now()-startTime)/1000,"seconds");
            console.log("Successfullytested",testedApps.length,"apps");
            console.log("Successfullytested",testedMenus.length-testedApps.length,"menus");
            console.log("testsuccessful");
        }catch(err){
            console.log("Testtook",(performance.now()-startTime)/1000,"seconds");
            console.error(err||"testfailed");
        }
    }


    /**
     *Testan"App"menuitembyorchestratingthefollowingactions:
     * 1-clickingonitsmenuItem
     * 2-clickingoneachview
     * 3-clickingoneachmenu
     * 3.1 -clickingoneachview
     *@param{DomElement}element:theAppmenuitem
     *@returns{Promise}
     */
    asyncfunctiontestApp(element){
        console.log("Testingappmenu:",element.dataset.menuXmlid);
        if(testedApps.indexOf(element.dataset.menuXmlid)>=0)return;//Anotherinfiniteloopprotection
        testedApps.push(element.dataset.menuXmlid);
        if(isEnterprise){
            awaitensureHomeMenu();
        }
        awaittestMenuItem(element);
        if(appsMenusOnly===true)return;
        constsubMenuItems=document.querySelectorAll('.o_menu_entry_lvl_1,.o_menu_entry_lvl_2,.o_menu_entry_lvl_3,.o_menu_entry_lvl_4');
        for(constsubMenuItemofsubMenuItems){
            awaittestMenuItem(subMenuItem);
        }
        if(isEnterprise){
            awaitensureHomeMenu();
        }
    }


    /**
     *Testamenuitemby:
     * 1-clikcingonthemenuItem
     * 2-Orchestratetheviewswitch
     *
     * @param{DomElement}element:themenuitem
     * @returns{Promise}
     */
    asyncfunctiontestMenuItem(element){
        if(testedMenus.indexOf(element.dataset.menuXmlid)>=0)returnPromise.resolve();//Avoidinfiniteloop
        varmenuDescription=element.innerText.trim()+""+element.dataset.menuXmlid;
        varmenuTimeLimit=10000;
        console.log("Testingmenu",menuDescription);
        testedMenus.push(element.dataset.menuXmlid);
        if(blackListedMenus.includes(element.dataset.menuXmlid))returnPromise.resolve();//Skipblacklistedmenus
        if(element.innerText.trim()=='Settings')menuTimeLimit=20000;
        varstartActionCount=clientActionCount;
        awaittriggerClick(element,`menuitem"${element.innerText.trim()}"`);
        varisModal=false;
        returnwaitForCondition(function(){
            //sometimes,theappisjustamodalthatneedstobeclosed
            var$modal=$('.modal[role="dialog"][open="open"]');
            if($modal.length>0){
                constcloseButton=document.querySelector('header>button.close');
                if(closeButton){
                    closeButton.focus();
                    triggerClick(closeButton,"modalclosebutton");
                }else{$modal.modal('hide');}
                isModal=true;
                returntrue;
            }
            returnstartActionCount!==clientActionCount;
        },menuTimeLimit).then(function(){
            if(!isModal){
                returntestFilters();
            }
        }).then(function(){
            if(!isModal){
                returntestViews();
            }
        }).catch(function(err){
            console.error("Errorwhiletesting",menuDescription);
            returnPromise.reject(err);
        });
    };


    /**
     *Orchestratethetestofviews
     *Thisfunctionfindsthebuttonsthatpermittoswitchviewsandorchestrate
     *theclickoneachofthem
     *@returns{Promise}
     */
    asyncfunctiontestViews(){
        if(appsMenusOnly===true){
            return;
        }
        constswitchButtons=document.querySelectorAll('nav.o_cp_switch_buttons>button.o_switch_view:not(.active):not(.o_map)');
        for(constswitchButtonofswitchButtons){
            //OnlywaytogettheviewTypefromtheswitchButton
            constviewType=[...switchButton.classList]
                .find(cls=>cls!=='o_switch_view'&&cls.startsWith('o_'))
                .slice(2);
            console.log("Testingviewswitch:",viewType);
            //timeouttoavoidclickdebounce
            setTimeout(function(){
                consttarget=document.querySelector(`nav.o_cp_switch_buttons>button.o_switch_view.o_${viewType}`);
                if(target){
                    triggerClick(target,`${viewType}viewswitcher`);
                }
            },250);
            awaitwaitForCondition(()=>document.querySelector('.o_action_manager>.o_action.o_view_controller').dataset.viewType===viewType);
            awaittestFilters();
        }
    }

    /**
     *Testfilters
     *Clickoneachfilterinthecontrolpannel
     */
    asyncfunctiontestFilters(){
        if(appsMenusOnly===true){
            return;
        }
        constfilterMenuButton=document.querySelector('.o_control_panel.o_filter_menu>button');
        if(!filterMenuButton){
            return;
        }
        //Openthefiltermenudropdown
        awaittriggerClick(filterMenuButton,`togglingmenu"${filterMenuButton.innerText.trim()}"`);

        constfilterMenuItems=document.querySelectorAll('.o_control_panel.o_filter_menu>ul>li.o_menu_item');
        console.log("Testing",filterMenuItems.length,"filters");

        for(constfilteroffilterMenuItems){
            constcurrentViewCount=viewUpdateCount;
            constfilterLink=filter.querySelector('a');
            awaittriggerClick(filterLink,`filter"${filter.innerText.trim()}"`);
            if(filterLink.classList.contains('o_menu_item_parent')){
                //Ifafitlerhasoptions,itwillsimplyunfoldandshowalloptions.
                //Wethenclickonthefirstone.
                constfirstOption=filter.querySelector('.o_menu_item_options>li.o_item_option>a');
                console.log();
                awaittriggerClick(firstOption,`filteroption"${firstOption.innerText.trim()}"`);
            }
            awaitwaitForCondition(()=>currentViewCount!==viewUpdateCount);
        }
    }

    //utilityfunctions
    /**
     *Waitacertainamountoftimeforaconditiontooccur
     *@param{function}stopConditionafunctionthatreturnsaboolean
     *@returns{Promise}thatisrejectedifthetimeoutisexceeded
     */
    functionwaitForCondition(stopCondition,tl=10000){
        varprom=newPromise(function(resolve,reject){
            varinterval=250;
            vartimeLimit=tl;

            functioncheckCondition(){
                if(stopCondition()){
                    resolve();
                }else{
                    timeLimit-=interval;
                    if(timeLimit>0){
                        //recursivecalluntiltheresolveorthetimeout
                        setTimeout(checkCondition,interval);
                    }else{
                        console.error('Timeout,theclickedelementtookmorethan',tl/1000,'secondstoload');
                        reject();
                    }
                }
            }
            setTimeout(checkCondition,interval);
        });
        returnprom;
    }


    /**
     *Chaindeferredactions.
     *
     *@param{jQueryElement}$elementsalistofjqueryelementstobepassedasargtothefunction
     *@param{Promise}promisethepromiseonwhichotherpromiseswillbechained
     *@param{function}fthefunctiontobedeferred
     *@returns{Promise}thechainedpromise
     */
    functionchainDeferred($elements,promise,f){
        _.each($elements,function(el){
            promise=promise.then(function(){
                returnf(el);
            });
        });
        returnpromise;
    }

    /**
     *Makesurethehomemenuisopen
     */
    asyncfunctionensureHomeMenu(){
        constmenuToggle=document.querySelector('nav.o_main_navbar>a.o_menu_toggle.fa-th');
        if(menuToggle){
            awaittriggerClick(menuToggle,'homemenutogglebutton');
            awaitwaitForCondition(()=>document.querySelector('.o_home_menu'));
        }
    }

    constMOUSE_EVENTS=[
        'mouseover',
        'mouseenter',
        'mousedown',
        'mouseup',
        'click',
    ];

    /**
     *Simulateallofthemouseeventstriggeredduringaclickaction.
     *@param{EventTarget}targettheelementonwhichtoperformtheclick
     *@param{string}elDescriptiondescriptionoftheitem
     *@returns{Promise}resolvedafternextanimationframe
     */
    asyncfunctiontriggerClick(target,elDescription){
        if(target){
            console.log("Clickingon",elDescription);
        }else{
            thrownewError(`Noelement"${elDescription}"found.`);
        }
        MOUSE_EVENTS.forEach(type=>{
            constevent=newMouseEvent(type,{bubbles:true,cancelable:true,view:window});
            target.dispatchEvent(event);
        });
        awaitnewPromise(setTimeout);
        awaitnewPromise(r=>requestAnimationFrame(r));
    }

    exports.clickEverywhere=clickEverywhere;
})(window);
