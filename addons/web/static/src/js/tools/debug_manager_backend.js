flectra.define('web.DebugManager.Backend',function(require){
"usestrict";

varActionManager=require('web.ActionManager');
varDebugManager=require('web.DebugManager');
vardialogs=require('web.view_dialogs');
varstartClickEverywhere=require('web.clickEverywhere');
varconfig=require('web.config');
varcore=require('web.core');
varDialog=require('web.Dialog');
varfield_utils=require('web.field_utils');
varSystrayMenu=require('web.SystrayMenu');
varutils=require('web.utils');
varWebClient=require('web.WebClient');
varWidget=require('web.Widget');

varQWeb=core.qweb;
var_t=core._t;

/**
 *DebugManagerfeaturesdependingonbackend
 */
DebugManager.include({
    requests_clear:function(){
        if(!this._events){
            return;
        }
        this._events=[];
        this.trigger('update-stats',this._events);
    },
    show_timelines:function(){
        if(this._overlay){
            this._overlay.destroy();
            this._overlay=null;
            return;
        }
        this._overlay=newRequestsOverlay(this);
        this._overlay.appendTo(document.body);
    },

    /**
     *Updatescurrentaction(actiondescriptor)ontag=action,
     */
    update:function(tag,descriptor){
        returnthis._super().then(function(){
            this.$dropdown.find(".o_debug_split_assets").before(QWeb.render('WebClient.DebugManager.Backend',{
                manager:this,
            }));
        }.bind(this));
    },
    select_view:function(){
        varself=this;
        newdialogs.SelectCreateDialog(this,{
            res_model:'ir.ui.view',
            title:_t('Selectaview'),
            disable_multiple_selection:true,
            domain:[['type','!=','qweb'],['type','!=','search']],
            on_selected:function(records){
                self._rpc({
                        model:'ir.ui.view',
                        method:'search_read',
                        domain:[['id','=',records[0].id]],
                        fields:['name','model','type'],
                        limit:1,
                    })
                    .then(function(views){
                        varview=views[0];
                        view.type=view.type==='tree'?'list':view.type;//ignoretreeview
                        self.do_action({
                            type:'ir.actions.act_window',
                            name:view.name,
                            res_model:view.model,
                            views:[[view.id,view.type]]
                        });
                    });
            }
        }).open();
    },
    /**
     *RunstheJS(desktop)tests
     */
    perform_js_tests:function(){
        this.do_action({
            name:_t("JSTests"),
            target:'new',
            type:'ir.actions.act_url',
            url:'/web/tests?mod=*'
        });
    },
    /**
     *RunstheJSmobiletests
     */
    perform_js_mobile_tests:function(){
        this.do_action({
            name:_t("JSMobileTests"),
            target:'new',
            type:'ir.actions.act_url',
            url:'/web/tests/mobile?mod=*'
        });
    },
    perform_click_everywhere_test:function(){
        var$homeMenu=$("nav.o_main_navbar>a.o_menu_toggle.fa-th");
        $homeMenu.click();
        startClickEverywhere();
    },
});

/**
 *DebugManagerfeaturesdependingonhavinganaction,andpossiblyamodel
 *(windowaction)
 */
DebugManager.include({
    asyncstart(){
        const[_,canSeeRecordRules,canSeeModelAccess]=awaitPromise.all([
            this._super(...arguments),
            this._checkAccessRight('ir.rule','read'),
            this._checkAccessRight('ir.model.access','read'),
        ])
        this.canSeeRecordRules=canSeeRecordRules;
        this.canSeeModelAccess=canSeeModelAccess;
    },
    /**
     *Returntheir.modelidfromthemodelname
     *@param{string}modelName
     */
    asyncgetModelId(modelName){
        const[modelId]=awaitthis._rpc({
            model:'ir.model',
            method:'search',
            args:[[['model','=',modelName]]],
            kwargs:{limit:1},
        });
        returnmodelId
    },
    /**
     *Updatescurrentaction(actiondescriptor)ontag=action,
     */
    update:function(tag,descriptor){
        if(tag==='action'){
            this._action=descriptor;
        }
        returnthis._super().then(function(){
            this.$dropdown.find(".o_debug_leave_section").before(QWeb.render('WebClient.DebugManager.Action',{
                manager:this,
                action:this._action
            }));
        }.bind(this));
    },
    edit:function(params,evt){
        this.do_action({
            res_model:params.model,
            res_id:params.id,
            name:evt.target.text,
            type:'ir.actions.act_window',
            views:[[false,'form']],
            view_mode:'form',
            target:'new',
            flags:{action_buttons:true,headless:true}
        });
    },
    asyncget_view_fields(){
        constmodelId=awaitthis.getModelId(this._action.res_model);
        this.do_action({
            res_model:'ir.model.fields',
            name:_t('ViewFields'),
            views:[[false,'list'],[false,'form']],
            domain:[['model_id','=',modelId]],
            type:'ir.actions.act_window',
            context:{
                'default_model_id':modelId
            }
        });
    },
    manage_filters:function(){
        this.do_action({
            res_model:'ir.filters',
            name:_t('ManageFilters'),
            views:[[false,'list'],[false,'form']],
            type:'ir.actions.act_window',
            context:{
                search_default_my_filters:true,
                search_default_model_id:this._action.res_model
            }
        });
    },
    translate:function(){
        this._rpc({
                model:'ir.translation',
                method:'get_technical_translations',
                args:[this._action.res_model],
            })
            .then(this.do_action);
    },
    asyncactionRecordRules(){
        constmodelId=awaitthis.getModelId(this._action.res_model);
        this.do_action({
            res_model:'ir.rule',
            name:_t('ModelRecordRules'),
            views:[[false,'list'],[false,'form']],
            domain:[['model_id','=',modelId]],
            type:'ir.actions.act_window',
            context:{
                'default_model_id':modelId,
            },
        });
    },
    asyncactionModelAccess(){
        constmodelId=awaitthis.getModelId(this._action.res_model);
        this.do_action({
            res_model:'ir.model.access',
            name:_t('ModelAccess'),
            views:[[false,'list'],[false,'form']],
            domain:[['model_id','=',modelId]],
            type:'ir.actions.act_window',
            context:{
                'default_model_id':modelId,
            },
        });
    },
});

/**
 *DebugManagerfeaturesdependingonhavingaformvieworsinglerecord.
 *Thesecouldtheoreticallybesplit,butfornowthey'llbeconsideredone
 *andthesame.
 */
DebugManager.include({
    start:function(){
        this._can_edit_views=false;
        returnPromise.all([
            this._super(),
            this._checkAccessRight('ir.ui.view','write')
                .then(function(ar){
                    this._can_edit_views=ar;
                }.bind(this))
            ]
        );
    },
    update:function(tag,descriptor,widget){
        if(tag==='action'||tag==='view'){
            this._controller=widget;
        }
        returnthis._super(tag,descriptor).then(function(){
            this.$dropdown.find(".o_debug_leave_section").before(QWeb.render('WebClient.DebugManager.View',{
                action:this._action,
                can_edit:this._can_edit_views,
                controller:this._controller,
                withControlPanel:this._controller&&this._controller.withControlPanel,
                manager:this,
                view:this._controller&&_.findWhere(this._action.views,{
                    type:this._controller.viewType,
                }),
            }));
        }.bind(this));
    },
    get_attachments:function(){
        varselectedIDs=this._controller.getSelectedIds();
        if(!selectedIDs.length){
            console.warn(_t("Noattachmentavailable"));
            return;
        }
        this.do_action({
            res_model:'ir.attachment',
            name:_t('ManageAttachments'),
            views:[[false,'list'],[false,'form']],
            type:'ir.actions.act_window',
            domain:[['res_model','=',this._action.res_model],['res_id','=',selectedIDs[0]]],
            context:{
                default_res_model:this._action.res_model,
                default_res_id:selectedIDs[0],
            },
        });
    },
    get_metadata:function(){
        varself=this;
        varselectedIDs=this._controller.getSelectedIds();
        if(!selectedIDs.length){
            console.warn(_t("Nometadataavailable"));
            return;
        }
        this._rpc({
            model:this._action.res_model,
            method:'get_metadata',
            args:[selectedIDs],
        }).then(function(result){
            varmetadata=result[0];
            metadata.creator=field_utils.format.many2one(metadata.create_uid);
            metadata.lastModifiedBy=field_utils.format.many2one(metadata.write_uid);
            varcreateDate=field_utils.parse.datetime(metadata.create_date);
            metadata.create_date=field_utils.format.datetime(createDate);
            varmodificationDate=field_utils.parse.datetime(metadata.write_date);
            metadata.write_date=field_utils.format.datetime(modificationDate);
            vardialog=newDialog(this,{
                title:_.str.sprintf(_t("Metadata(%s)"),self._action.res_model),
                size:'medium',
                $content:QWeb.render('WebClient.DebugViewLog',{
                    perm:metadata,
                })
            });
            dialog.open().opened(function(){
                dialog.$el.on('click','a[data-action="toggle_noupdate"]',function(ev){
                    ev.preventDefault();
                    self._rpc({
                        model:'ir.model.data',
                        method:'toggle_noupdate',
                        args:[self._action.res_model,metadata.id]
                    }).then(function(res){
                        dialog.close();
                        self.get_metadata();
                    })
                });
            })
        });
    },
    set_defaults:function(){
        varself=this;

        vardisplay=function(fieldInfo,value){
            vardisplayed=value;
            if(value&&fieldInfo.type==='many2one'){
                displayed=value.data.display_name;
                value=value.data.id;
            }elseif(value&&fieldInfo.type==='selection'){
                displayed=_.find(fieldInfo.selection,function(option){
                    returnoption[0]===value;
                })[1];
            }
            return[value,displayed];
        };

        varrenderer=this._controller.renderer;
        varstate=renderer.state;
        varfields=state.fields;
        varfieldsInfo=state.fieldsInfo.form;
        varfieldNamesInView=state.getFieldNames();
        varfieldNamesOnlyOnView=['message_attachment_count'];
        varfieldsValues=state.data;
        varmodifierDatas={};
        _.each(fieldNamesInView,function(fieldName){
            modifierDatas[fieldName]=_.find(renderer.allModifiersData,function(modifierdata){
                returnmodifierdata.node.attrs.name===fieldName;
            });
        });
        this.fields=_.chain(fieldNamesInView)
            .difference(fieldNamesOnlyOnView)
            .map(function(fieldName){
                varmodifierData=modifierDatas[fieldName];
                varinvisibleOrReadOnly;
                if(modifierData){
                    varevaluatedModifiers=modifierData.evaluatedModifiers[state.id];
                    invisibleOrReadOnly=evaluatedModifiers.invisible||evaluatedModifiers.readonly;
                }
                varfieldInfo=fields[fieldName];
                varvalueDisplayed=display(fieldInfo,fieldsValues[fieldName]);
                varvalue=valueDisplayed[0];
                vardisplayed=valueDisplayed[1];
                //ignorefieldswhichareempty,invisible,readonly,o2m
                //orm2m
                if(!value||invisibleOrReadOnly||fieldInfo.type==='one2many'||
                    fieldInfo.type==='many2many'||fieldInfo.type==='binary'||
                    fieldsInfo[fieldName].options.isPassword||!_.isEmpty(fieldInfo.depends)){
                    returnfalse;
                }
                return{
                    name:fieldName,
                    string:fieldInfo.string,
                    value:value,
                    displayed:displayed,
                };
            })
            .compact()
            .sortBy(function(field){returnfield.string;})
            .value();

        varconditions=_.chain(fieldNamesInView)
            .filter(function(fieldName){
                varfieldInfo=fields[fieldName];
                returnfieldInfo.change_default;
            })
            .map(function(fieldName){
                varfieldInfo=fields[fieldName];
                varvalueDisplayed=display(fieldInfo,fieldsValues[fieldName]);
                varvalue=valueDisplayed[0];
                vardisplayed=valueDisplayed[1];
                return{
                    name:fieldName,
                    string:fieldInfo.string,
                    value:value,
                    displayed:displayed,
                };
            })
            .value();
        vard=newDialog(this,{
            title:_t("SetDefault"),
            buttons:[
                {text:_t("Close"),close:true},
                {text:_t("Savedefault"),click:function(){
                    var$defaults=d.$el.find('#formview_default_fields');
                    varfieldToSet=$defaults.val();
                    if(!fieldToSet){
                        $defaults.parent().addClass('o_form_invalid');
                        return;
                    }
                    varselfUser=d.$el.find('#formview_default_self').is(':checked');
                    varcondition=d.$el.find('#formview_default_conditions').val();
                    varvalue=_.find(self.fields,function(field){
                        returnfield.name===fieldToSet;
                    }).value;
                    self._rpc({
                        model:'ir.default',
                        method:'set',
                        args:[
                            self._action.res_model,
                            fieldToSet,
                            value,
                            selfUser,
                            true,
                            condition||false,
                        ],
                    }).then(function(){d.close();});
                }}
            ]
        });
        d.args={
            fields:this.fields,
            conditions:conditions,
        };
        d.template='FormView.set_default';
        d.open();
    },
    fvg:function(){
        varself=this;
        vardialog=newDialog(this,{title:_t("FieldsViewGet")});
        dialog.opened().then(function(){
            constarch=self._controller.renderer.arch||self._controller.renderer.props.arch;
            $('<pre>').text(utils.json_node_to_xml(
                arch,true)
            ).appendTo(dialog.$el);
        });
        dialog.open();
    },
});
functionmake_context(width,height,fn){
    varcanvas=document.createElement('canvas');
    canvas.width=width;
    canvas.height=height;
    //makee.layerX/e.layerYimitatee.offsetX/e.offsetY.
    canvas.style.position='relative';
    varctx=canvas.getContext('2d');
    ctx.imageSmoothingEnabled=false;
    ctx.mozImageSmoothingEnabled=false;
    ctx.oImageSmoothingEnabled=false;
    ctx.webkitImageSmoothingEnabled=false;
    fn&&fn(ctx);
    returnctx;
}
varRequestsOverlay=Widget.extend({
    template:'WebClient.DebugManager.RequestsOverlay',
    TRACKS:8,
    TRACK_WIDTH:9,
    events:{
        mousemove:function(e){
            this.$tooltip.hide();
        }
    },
    init:function(){
        this._super.apply(this,arguments);
        this._render=_.throttle(
            this._render.bind(this),
            1000/15,{leading:false}
        );
    },
    start:function(){
        var_super=this._super();
        this.$tooltip=this.$('div.o_debug_tooltip');
        this.getParent().on('update-stats',this,this._render);
        this._render();
        return_super;
    },
    tooltip:function(text,start,end,x,y){
        //xandyarehitpointwithrespecttotheviewport.Toknowwhere
        //thishitpointiswithrespecttotheoverlay,subtracttheoffset
        //betweenviewportandoverlay,thenaddscrollfactorofoverlay
        //(whichisn'ttakeninaccountbytheviewport).
        //
        //Normallytheviewportoverlayshouldsumoffsetsofall
        //offsetParentsuntilwereach`null`butinthiscasetheoverlay
        //shouldhavebeenaddeddirectlytothebody,whichshouldhavean
        //offsetof0.

        vartop=y-this.el.offsetTop+this.el.scrollTop+1;
        varleft=x-this.el.offsetLeft+this.el.scrollLeft+1;
        this.$tooltip.css({top:top,left:left}).show()[0].innerHTML=['<p>',text,'(',(end-start),'ms)','</p>'].join('');
    },

    _render:function(){
        var$summary=this.$('header'),
            w=$summary[0].clientWidth,
            $requests=this.$('.o_debug_requests');
        $summary.find('canvas').attr('width',w);
        vartracks=document.getElementById('o_debug_requests_summary');

        _.invoke(this.getChildren(),'destroy');

        varrequests=this.getParent()._events;
        varbounds=this._get_bounds(requests);
        //horizontalscalingfactorforsummary
        varscale=w/(bounds.high-bounds.low);

        //storeend-timeof"current"requests,tofindoutwhichtracka
        //requestshouldgoin,justlookforthefirsttrackwhoseend-time
        //issmallerthanthenewrequest'sstarttime.
        vartrack_ends=_(this.TRACKS).times(_.constant(-Infinity));

        varctx=tracks.getContext('2d');
        ctx.lineWidth=this.TRACK_WIDTH;
        for(vari=0;i<requests.length;i++){
            varrequest=requests[i];
            //FIXME:isitcertainthateventsintherequestaresortedbytimestamp?
            varrstart=Math.floor(request[0][3]*1e3);
            varrend=Math.ceil(request[request.length-1][3]*1e3);
            //findfreetrackforcurrentrequest
            for(vartrack=0;track<track_ends.length;++track){
                if(track_ends[track]<rstart){break;}
            }
            //FIXME:displayerrormessageofsomesort?Re-renderwithlargerarea?Something?
            if(track>=track_ends.length){
                console.warn("couldnotfindanemptysummarytrack");
                continue;
            }
            //setnewtrackend
            track_ends[track]=rend;
            ctx.save();
            ctx.translate(Math.floor((rstart-bounds.low)*scale),track*(this.TRACK_WIDTH+1));
            this._draw_request(request,ctx,0,scale);
            ctx.restore();
            newRequestDetails(this,request,scale).appendTo($requests);
        }
    },
    _draw_request:function(request,to_context,step,hscale,handle_event){
        //haveonedrawsurfaceforeacheventtype:
        //*noneedtoaltercontextfromoneeventtothenext,eachsurface
        //  getsitsowncolorforallitslifetime
        //*surfacescanbeblendedinaspecifiedorder,whichmeansevents
        //  canbedrawninanyorder,noneedtocareaboutz-indexwhile
        //  serializingeventstothesurfaces
        varsurfaces={
            request:make_context(to_context.canvas.width,to_context.canvas.height,function(ctx){
                ctx.strokeStyle='blue';
                ctx.fillStyle='#88f';
                ctx.lineJoin='round';
                ctx.lineWidth=1;
            }),
            //func:make_context(to_context.canvas.width,to_context.canvas.height,function(ctx){
            //   ctx.strokeStyle='gray';
            //   ctx.lineWidth=to_context.lineWidth;
            //   ctx.translate(0,initial_offset);
            //}),
            sql:make_context(to_context.canvas.width,to_context.canvas.height,function(ctx){
                ctx.strokeStyle='red';
                ctx.fillStyle='#f88';
                ctx.lineJoin='round';
                ctx.lineWidth=1;
            }),
            template:make_context(to_context.canvas.width,to_context.canvas.height,function(ctx){
                ctx.strokeStyle='green';
                ctx.fillStyle='#8f8';
                ctx.lineJoin='round';
                ctx.lineWidth=1;
            })
        };
        //applyscalingmanuallysozoominginimprovesdisplayprecision
        varstacks={},start=Math.floor(request[0][3]*1e3*hscale);
        varevent_idx=0;

        varrect_width=to_context.lineWidth;
        for(vari=0;i<request.length;i++){
            vartype,m,event=request[i];
            vartag=event[0],timestamp=Math.floor(event[3]*1e3*hscale)-start;

            if(m=/(\w+)-start/.exec(tag)){
                type=m[1];
                if(!(typeinstacks)){stacks[type]=[];}
                handle_event&&handle_event(event_idx,timestamp,event);
                stacks[type].push({
                    timestamp:timestamp,
                    idx:event_idx++
                });
            }elseif(m=/(\w+)-end/.exec(tag)){
                type=m[1];
                varstack=stacks[type];
                varestart=stack.pop(),duration=Math.ceil(timestamp-estart.timestamp);
                handle_event&&handle_event(estart.idx,timestamp,event);

                varsurface=surfaces[type];
                if(!surface){continue;}//FIXME:supportforunknowneventtypes

                vary=step*estart.idx;
                //pathrectangleforthecurrenteventontherelevantsurface
                surface.rect(estart.timestamp+0.5,y+0.5,duration||1,rect_width);
            }
        }
        //addeachlayertothemaincanvas
        varkeys=['request',/*'func',*/'template','sql'];
        for(varj=0;j<keys.length;++j){
            //strokeandfillallrectanglesfortherelevantsurface/context
            varctx=surfaces[keys[j]];
            ctx.fill();
            ctx.stroke();
            to_context.drawImage(ctx.canvas,0,0);
        }
    },
    /**
     *Returnsfirstandlasteventsinmilliseconds
     *
     *@paramrequests
     *@returns{{low:number,high:number}}
     *@private
     */
    _get_bounds:function(requests){
        varlow=+Infinity;
        varhigh=-+Infinity;

        for(vari=0;i<requests.length;i++){
            varrequest=requests[i];
            for(varj=0;j<request.length;j++){
                varevent=request[j];
                vartimestamp=event[3];
                low=Math.min(low,timestamp);
                high=Math.max(high,timestamp);
            }
        }
        return{low:Math.floor(low*1e3),high:Math.ceil(high*1e3)};
    }
});
varRequestDetails=Widget.extend({
    events:{
        click:function(){
            this._open=!this._open;
            this.render();
        },
        'mousemovecanvas':function(e){
            e.stopPropagation();
            vary=e.y||e.offsetY||e.layerY;
            if(!y){return;}
            varevent=this._payloads[Math.floor(y/this._REQ_HEIGHT)];
            if(!event){return;}

            this.getParent().tooltip(event.payload,event.start,event.stop,e.clientX,e.clientY);
        }
    },
    init:function(parent,request,scale){
        this._super.apply(this,arguments);
        this._request=request;
        this._open=false;
        this._scale=scale;
        this._REQ_HEIGHT=20;
    },
    start:function(){
        this.el.style.borderBottom='1pxsolidblack';
        this.render();
        returnthis._super();
    },
    render:function(){
        varrequest_cell_height=this._REQ_HEIGHT,TITLE_WIDTH=200;
        varrequest=this._request;
        varreq_start=request[0][3]*1e3;
        varreq_duration=request[request.length-1][3]*1e3-req_start;
        varheight=request_cell_height*(this._open?request.length/2:1);
        varcell_center=request_cell_height/2;
        varctx=make_context(210+Math.ceil(req_duration*this._scale),height,function(ctx){
            ctx.lineWidth=cell_center;
        });
        this.$el.empty().append(ctx.canvas);
        varpayloads=this._payloads=[];

        //lazyversion:iftherenderissingle-line(!this._open),theextra
        //contentwillbediscardedwhenthetextcanvasgetspastedontothe
        //maincanvas.Animprovementwouldbetonotdotextrendering
        //beyondthefirsteventfor"closed"requestsevents…thenagain
        //thatmakesformoreregularrenderingprofile?
        vartext_ctx=make_context(TITLE_WIDTH,height,function(ctx){
            ctx.font='12pxsans-serif';
            ctx.textAlign='right';
            ctx.textBaseline='middle';
            ctx.translate(0,cell_center);
        });

        ctx.save();
        ctx.translate(TITLE_WIDTH+10,((request_cell_height/4)|0));

        this.getParent()._draw_request(request,ctx,this._open?request_cell_height:0,this._scale,function(idx,timestamp,event){
            if(/-start$/g.test(event[0])){
                payloads.push({
                    payload:event[2],
                    start:timestamp,
                    stop:null
                });

                //wewant~200pxwide,assumetheaveragecharacterisat
                //least4pxwide=>therecanbe*atmost*49characters
                vartitle=event[2];
                title=title.replace(/\s+$/,'');
                title=title.length<=50?title:('…'+title.slice(-49));
                while(text_ctx.measureText(title).width>200){
                    title='…'+title.slice(2);
                }
                text_ctx.fillText(title,TITLE_WIDTH,request_cell_height*idx);
            }elseif(/-end$/g.test(event[0])){
                payloads[idx].stop=timestamp;
            }
        });
        ctx.restore();
        //addthetextlayertothemaincanvas
        ctx.drawImage(text_ctx.canvas,0,0);
    }
});

if(config.isDebug()){
    SystrayMenu.Items.push(DebugManager);

    WebClient.include({
        //----------------------------------------------------------------------
        //Public
        //----------------------------------------------------------------------

        /**
         *@override
         */
        current_action_updated:function(action,controller){
            this._super.apply(this,arguments);
            this.update_debug_manager(action,controller);
        },
        update_debug_manager:function(action,controller){
            vardebugManager=_.find(this.menu.systray_menu.widgets,function(item){
                returniteminstanceofDebugManager;
            });
            debugManager.update('action',action,controller&&controller.widget);
        }
    });

    ActionManager.include({
        //----------------------------------------------------------------------
        //Public
        //----------------------------------------------------------------------

        /**
         *Returnstheactionofthecontrollercurrentlyopenedinadialog,
         *i.e.atarget='new'action,ifany.
         *
         *@returns{Object|null}
         */
        getCurrentActionInDialog:function(){
            if(this.currentDialogController){
                returnthis.actions[this.currentDialogController.actionID];
            }
            returnnull;
        },
        /**
         *Returnsthecontrollercurrentlyopenedinadialog,ifany.
         *
         *@returns{Object|null}
         */
        getCurrentControllerInDialog:function(){
            returnthis.currentDialogController;
        },
    });

    Dialog.include({
        //--------------------------------------------------------------------------
        //Public
        //--------------------------------------------------------------------------

        /**
         *@override
         */
        open:function(){
            varself=this;
            //ifthedialogisopenedbytheActionManager,instantiatea
            //DebugManagerandinsertitintotheDOMoncethedialogisopened
            //(delaythiswithasetTimeout(0)toensurethattheinternal
            //state,i.e.thecurrentactionandcontroller,ofthe
            //ActionManagerissettoproperlyupdatetheDebugManager)
            this.opened(function(){
                setTimeout(function(){
                    varparent=self.getParent();
                    if(parentinstanceofActionManager){
                        varaction=parent.getCurrentActionInDialog();
                        if(action){
                            varcontroller=parent.getCurrentControllerInDialog();
                            self.debugManager=newDebugManager(self);
                            var$header=self.$modal.find('.modal-header:first');
                            returnself.debugManager.prependTo($header).then(function(){
                                self.debugManager.update('action',action,controller.widget);
                            });
                        }
                    }
                },0);
            });

            returnthis._super.apply(this,arguments);
        },
    });
}

returnDebugManager;

});
