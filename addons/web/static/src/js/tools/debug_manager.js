flectra.define('web.DebugManager',function(require){
"usestrict";

varcore=require('web.core');
varsession=require('web.session');
varutils=require('web.utils');
varWidget=require('web.Widget');

varQWeb=core.qweb;

/**
 *DebugManagerbase+generalfeatures(applicabletoanycontext)
 */
varDebugManager=Widget.extend({
    template:"WebClient.DebugManager",
    xmlDependencies:['/web/static/src/xml/debug.xml'],
    events:{
        "clicka[data-action]":"perform_callback",
    },
    init:function(){
        this._super.apply(this,arguments);
        this._events=null;
        vardebug=flectra.debug;
        this.debug_mode=debug;
        this.debug_mode_help=debug&&debug!=='1'?'('+debug+')':'';
    },
    start:function(){
        core.bus.on('rpc:result',this,function(req,resp){
            this._debug_events(resp.debug);
        });

        this.$dropdown=this.$(".o_debug_dropdown");
        //whetherthecurrentuserisanadministrator
        this._is_admin=session.is_system;
        returnPromise.resolve(
            this._super()
        ).then(function(){
            returnthis.update();
        }.bind(this));
    },
    /**
     *CallstheappropriatecallbackwhenclickingonaDebugoption
     */
    perform_callback:function(evt){
        evt.preventDefault();
        varparams=$(evt.target).data();
        varcallback=params.action;

        if(callback&&this[callback]){
            //Performthecallbackcorrespondingtotheoption
            this[callback](params,evt);
        }else{
            console.warn("Nohandlerfor",callback);
        }
    },

    _debug_events:function(events){
        if(!this._events){
            return;
        }
        if(events&&events.length){
            this._events.push(events);
        }
        this.trigger('update-stats',this._events);
    },

    /**
     *Updatethedebugmanager:reinsertsall"universal"controls
     */
    update:function(){
        this.$dropdown
            .empty()
            .append(QWeb.render('WebClient.DebugManager.Global',{
                manager:this,
            }));
        returnPromise.resolve();
    },
    split_assets:function(){
        window.location=$.param.querystring(window.location.href,'debug=assets');
    },
    tests_assets:function(){
        //Enablealso'assets'toseenonminimizedassets
        window.location=$.param.querystring(window.location.href,'debug=assets,tests');
    },
    /**
     *Deleteassetsbundlestoforcetheirregeneration
     *
     *@returns{void}
     */
    regenerateAssets:function(){
        varself=this;
        vardomain=utils.assetsDomain();
        this._rpc({
            model:'ir.attachment',
            method:'search',
            args:[domain],
        }).then(function(ids){
            self._rpc({
                model:'ir.attachment',
                method:'unlink',
                args:[ids],
            }).then(window.location.reload());
        });
    },
    leave_debug_mode:function(){
        varqs=$.deparam.querystring();
        qs.debug='';
        window.location.search='?'+$.param(qs);
    },
    /**
     *@private
     *@param{string}model
     *@param{string}operation
     *@returns{Promise<boolean>}
     */
    _checkAccessRight(model,operation){
        returnthis._rpc({
            model:model,
            method:'check_access_rights',
            kwargs:{operation,raise_exception:false},
        })
    },
});

returnDebugManager;

});
