flectra.define("web.commonEnv",function(require){
    "usestrict";

    /**
     *Thisfiledefinesthecommonenvironment,whichcontainseverythingthat
     *isneededintheenvforboththebackendandthefrontend(Flectra
     *terminology).Thismoduleshouldn'tbeusedasis.Itshouldonlybe
     *importedbythemoduledefiningthefinalenvtouse(inthefrontendor
     *inthebackend).Forinstance,module'web.env'importsit,addsstuffto
     *it,andexportsthefinalenvthatisusedbythewholewebclient
     *application.
     *
     *Thereshouldbeasmuchdependenciesaspossibleintheenvobject.This
     *willallowaneasiertestingofcomponents.See[1]formoreinformation
     *onenvironments.
     *
     *[1]https://github.com/flectra/owl/blob/master/doc/reference/environment.md#content-of-an-environment
     */

    const{jsonRpc}=require("web.ajax");
    const{device,isDebug}=require("web.config");
    const{bus}=require("web.core");
    constrpc=require("web.rpc");
    constsession=require("web.session");
    const{_t}=require("web.translation");
    constutils=require("web.utils");

    constbrowser={
        clearInterval:window.clearInterval.bind(window),
        clearTimeout:window.clearTimeout.bind(window),
        Date:window.Date,
        fetch:(window.fetch||(()=>{})).bind(window),
        Notification:window.Notification,
        requestAnimationFrame:window.requestAnimationFrame.bind(window),
        setInterval:window.setInterval.bind(window),
        setTimeout:window.setTimeout.bind(window),
    };
    Object.defineProperty(browser,'innerHeight',{
        get:()=>window.innerHeight,
    });
    Object.defineProperty(browser,'innerWidth',{
        get:()=>window.innerWidth,
    });

    //Buildthebasicenv
    constenv={
        _t,
        browser,
        bus,
        device,
        isDebug,
        qweb:newowl.QWeb({translateFn:_t}),
        services:{
            ajaxJsonRPC(){
                returnjsonRpc(...arguments);
            },
            getCookie(){
                returnutils.get_cookie(...arguments);
            },
            httpRequest(route,params={},readMethod='json'){
                constinfo={
                    method:params.method||'POST',
                };
                if(params.method!=='GET'){
                    constformData=newFormData();
                    for(constkeyinparams){
                        if(key==='method'){
                            continue;
                        }
                        constvalue=params[key];
                        if(Array.isArray(value)&&value.length){
                            for(constvalofvalue){
                                formData.append(key,val);
                            }
                        }else{
                            formData.append(key,value);
                        }
                    }
                    info.body=formData;
                }
                returnfetch(route,info).then(response=>response[readMethod]());
            },
            navigate(url,params){
                window.location=$.param.querystring(url,params);
            },
            reloadPage(){
                window.location.reload();
            },
            rpc(params,options){
                constquery=rpc.buildQuery(params);
                returnsession.rpc(query.route,query.params,options);
            },
            setCookie(){
                utils.set_cookie(...arguments);
            },
        },
        session,
    };

    returnenv;
});
