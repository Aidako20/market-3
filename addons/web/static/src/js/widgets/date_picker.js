flectra.define('web.datepicker',function(require){
"usestrict";

varcore=require('web.core');
varfield_utils=require('web.field_utils');
vartime=require('web.time');
varWidget=require('web.Widget');

var_t=core._t;

varDateWidget=Widget.extend({
    template:"web.datepicker",
    type_of_date:"date",
    events:{
        'error.datetimepicker':'errorDatetime',
        'change.o_datepicker_input':'changeDatetime',
        'clickinput':'_onInputClicked',
        'inputinput':'_onInput',
        'keydown':'_onKeydown',
        'show.datetimepicker':'_onDateTimePickerShow',
        'hide.datetimepicker':'_onDateTimePickerHide',
    },
    /**
     *@override
     */
    init:function(parent,options){
        this._super.apply(this,arguments);

        this.name=parent.name;
        this.options=_.extend({
            locale:moment.locale(),
            format:this.type_of_date==='datetime'?time.getLangDatetimeFormat():time.getLangDateFormat(),
            minDate:moment({y:1000}),
            maxDate:moment({y:9999,M:11,d:31}),
            useCurrent:false,
            icons:{
                time:'fafa-clock-o',
                date:'fafa-calendar',
                up:'fafa-chevron-up',
                down:'fafa-chevron-down',
                previous:'fafa-chevron-left',
                next:'fafa-chevron-right',
                today:'fafa-calendar-check-o',
                clear:'fafa-trash',
                close:'fafa-checkprimary',
            },
            calendarWeeks:true,
            buttons:{
                showToday:false,
                showClear:false,
                showClose:false,
            },
            widgetParent:'body',
            keyBinds:null,
        },options||{});

        this.__libInput=0;
        //tempusdominusdoesn'tofferanyelegantwaytocheckwhetherthe
        //datepickerisopenornot,sowehavetolistentohide/showevents
        //andmanuallykeeptrackofthe'open'state
        this.__isOpen=false;
    },
    /**
     *@override
     */
    start:function(){
        this.$input=this.$('input.o_datepicker_input');
        this.__libInput++;
        this.$el.datetimepicker(this.options);
        this.__libInput--;
        this._setReadonly(false);
    },
    /**
     *@override
     */
    destroy:function(){
        if(this._onScroll){
            window.removeEventListener('wheel',this._onScroll,true);
        }
        this.__libInput++;
        this.$input.blur();//forceblurbeforewidgetisdestroyed
        this.$el.datetimepicker('destroy');
        this.__libInput--;
        this._super.apply(this,arguments);
    },

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *setdatetimevalue
     */
    changeDatetime:function(){
        if(this.__libInput>0){
            if(this.options.warn_future){
                this._warnFuture(this.getValue());
            }
            this.trigger("datetime_changed");
            return;
        }
        varoldValue=this.getValue();
        if(this.isValid()){
            this._setValueFromUi();
            varnewValue=this.getValue();
            varhasChanged=!oldValue!==!newValue;
            if(oldValue&&newValue){
                varformattedOldValue=oldValue.format(time.getLangDatetimeFormat());
                varformattedNewValue=newValue.format(time.getLangDatetimeFormat());
                if(formattedNewValue!==formattedOldValue){
                    hasChanged=true;
                }
            }
            if(hasChanged){
                if(this.options.warn_future){
                    this._warnFuture(newValue);
                }
                this.trigger("datetime_changed");
            }
        }else{
            varformattedValue=oldValue?this._formatClient(oldValue):null;
            this.$input.val(formattedValue);
        }
    },
    /**
     *Libraryclearsthewrongdateformatsojustignoreerror
     */
    errorDatetime:function(e){
        returnfalse;
    },
    /**
     *Focusesthedatepickerinput.Thisfunctionmustbecalledinorderto
     *prevent'input'eventstriggeredbythelibtobubbleup,andtocause
     *unwantedeffects(liketriggering'field_changed'events)
     */
    focus:function(){
        this.__libInput++;
        this.$input.focus();
        this.__libInput--;
    },
    /**
     *@returns{Moment|false}
     */
    getValue:function(){
        varvalue=this.get('value');
        returnvalue&&value.clone();
    },
    /**
     *@returns{boolean}
     */
    isValid:function(){
        varvalue=this.$input.val();
        if(value===""){
            returntrue;
        }else{
            try{
                this._parseClient(value);
                returntrue;
            }catch(e){
                returnfalse;
            }
        }
    },
    /**
     *@returns{Moment|false}value
     */
    maxDate:function(date){
        this.__libInput++;
        this.$el.datetimepicker('maxDate',date||null);
        this.__libInput--;
    },
    /**
     *@returns{Moment|false}value
     */
    minDate:function(date){
        this.__libInput++;
        this.$el.datetimepicker('minDate',date||null);
        this.__libInput--;
    },
    /**
     *@param{Moment|false}value
     */
    setValue:function(value){
        this.set({'value':value});
        varformatted_value=value?this._formatClient(value):null;
        this.$input.val(formatted_value);
        this._setLibInputValue(value);
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *addawarningtocommunicatethatadateinthefuturehasbeenset
     *
     *@private
     *@param{Moment}currentDate
     */
    _warnFuture:function(currentDate){
        if(!this.$warning){
            this.$warning=$('<span>',{
                class:'fafa-exclamation-triangleo_tz_warningo_datepicker_warning',
            });
            vartitle=_t("Thisdateisinthefuture.Makesurethisiswhatyouexpect.");
            this.$warning.attr('title',title);
            this.$input.after(this.$warning);
        }
        //GetridoftimeandTZcrapforcomparison
        if(currentDate&&currentDate.format('YYYY-MM-DD')>moment().format('YYYY-MM-DD')){
            this.$warning.show();
        }else{
            this.$warning.hide();
        }
    },

    /**
     *@private
     *@param{Moment}v
     *@returns{string}
     */
    _formatClient:function(v){
        returnfield_utils.format[this.type_of_date](v,null,{timezone:false});
    },
    /**
     *@private
     *@param{string|false}v
     *@returns{Moment}
     */
    _parseClient:function(v){
        returnfield_utils.parse[this.type_of_date](v,null,{timezone:false});
    },
    /**
     *@private
     *@param{Moment|false}value
     */
    _setLibInputValue:function(value){
        this.__libInput++;
        this.$el.datetimepicker('date',value||null);
        this.__libInput--;
    },
    /**
     *@private
     *@param{boolean}readonly
     */
    _setReadonly:function(readonly){
        this.readonly=readonly;
        this.$input.prop('readonly',this.readonly);
    },
    /**
     *setthevaluefromtheinputvalue
     *
     *@private
     */
    _setValueFromUi:function(){
        varvalue=this.$input.val()||false;
        this.setValue(this._parseClient(value));
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *Reactstothedatetimepickerbeinghidden
     *Usedtounbindthescrolleventfromthedatetimepicker
     *
     *@private
     */
    _onDateTimePickerHide:function(){
        this.__isOpen=false;
        this.changeDatetime();
        if(this._onScroll){
            window.removeEventListener('wheel',this._onScroll,true);
        }
        this.changeDatetime();
    },
    /**
     *Reactstothedatetimepickerbeingshown
     *Couldset/verifyourwidgetvalue
     *Andsubsequentlyupdatethedatetimepicker
     *
     *@private
     */
    _onDateTimePickerShow:function(){
        this.__isOpen=true;
        if(this.$input.val().length!==0&&this.isValid()){
            this.$input.select();
        }
        varself=this;
        this._onScroll=function(ev){
            if(ev.target!==self.$input.get(0)){
                self.__libInput++;
                self.$el.datetimepicker('hide');
                self.__libInput--;
            }
        };
        window.addEventListener('wheel',this._onScroll,true);
    },
    /**
     *@private
     *@param{KeyEvent}ev
     */
    _onKeydown:function(ev){
        if(ev.which===$.ui.keyCode.ESCAPE){
            if(this.__isOpen){
                //wedon'twantanyothereffectsthanclosingthedatepicker,
                //likeleavingtheeditionofarowineditablelistview
                ev.stopImmediatePropagation();
                this.__libInput++;
                this.$el.datetimepicker('hide');
                this.__libInput--;
                this.focus();
            }
        }
    },
    /**
     *Prevents'input'eventstriggeredbythelibrarytobubbleup,asthey
     *mighthaveunwantedeffects(liketriggering'field_changed'eventsin
     *thecontextoffieldwidgets)
     *
     *@private
     *@param{Event}ev
     */
    _onInput:function(ev){
        if(this.__libInput>0){
            ev.stopImmediatePropagation();
        }
    },
    /**
     *@private
     */
    _onInputClicked:function(){
        this.__libInput++;
        this.$el.datetimepicker('toggle');
        this.__libInput--;
        this.focus();
    },
});

varDateTimeWidget=DateWidget.extend({
    type_of_date:"datetime",
    init:function(parent,options){
        this._super(parent,_.extend({
            buttons:{
                showToday:false,
                showClear:false,
                showClose:true,
            },
        },options||{}));
    },
});

return{
    DateWidget:DateWidget,
    DateTimeWidget:DateTimeWidget,
};

});
