flectra.define('web.Colorpicker',function(require){
'usestrict';

varcore=require('web.core');
varutils=require('web.utils');
varDialog=require('web.Dialog');
varWidget=require('web.Widget');

var_t=core._t;

varColorpickerWidget=Widget.extend({
    xmlDependencies:['/web/static/src/xml/colorpicker.xml'],
    template:'Colorpicker',
    events:{
        'click':'_onClick',
        'keypress':'_onKeypress',
        'mousedown.o_color_pick_area':'_onMouseDownPicker',
        'mousedown.o_color_slider':'_onMouseDownSlider',
        'mousedown.o_opacity_slider':'_onMouseDownOpacitySlider',
        'change.o_color_picker_inputs':'_onChangeInputs',
    },

    /**
     *@constructor
     *@param{Widget}parent
     *@param{Object}[options]
     *@param{string}[options.defaultColor='#FF0000']
     *@param{string}[options.noTransparency=false]
     */
    init:function(parent,options){
        this._super(...arguments);
        options=options||{};
        this.trigger_up('getRecordInfo',{
            recordInfo:options,
            callback:function(recordInfo){
                _.defaults(options,recordInfo);
            },
        });

        this.pickerFlag=false;
        this.sliderFlag=false;
        this.opacitySliderFlag=false;
        this.colorComponents={};
        this.uniqueId=_.uniqueId('colorpicker');

        //Needstobeboundondocumenttoworkinallpossiblecases.
        const$document=$(document);
        $document.on(`mousemove.${this.uniqueId}`,_.throttle((ev)=>{
            this._onMouseMovePicker(ev);
            this._onMouseMoveSlider(ev);
            this._onMouseMoveOpacitySlider(ev);
        },50));
        $document.on(`mouseup.${this.uniqueId}`,_.throttle((ev)=>{
            if(this.pickerFlag||this.sliderFlag||this.opacitySliderFlag){
                this._colorSelected();
            }
            this.pickerFlag=false;
            this.sliderFlag=false;
            this.opacitySliderFlag=false;
        },10));

        this.options=_.clone(options);
    },
    /**
     *@override
     */
    start:function(){
        this.$colorpickerArea=this.$('.o_color_pick_area');
        this.$colorpickerPointer=this.$('.o_picker_pointer');
        this.$colorSlider=this.$('.o_color_slider');
        this.$colorSliderPointer=this.$('.o_slider_pointer');
        this.$opacitySlider=this.$('.o_opacity_slider');
        this.$opacitySliderPointer=this.$('.o_opacity_pointer');

        vardefaultColor=this.options.defaultColor||'#FF0000';
        varrgba=ColorpickerWidget.convertCSSColorToRgba(defaultColor);
        if(rgba){
            this._updateRgba(rgba.red,rgba.green,rgba.blue,rgba.opacity);
        }

        //Pre-filltheinputs.Thisisbecauseonsafari,thebaselineforempty
        //inputisnotthebaselineofwherethetextwouldbe,butthebottom
        //oftheinputitself.(seehttps://bugs.webkit.org/show_bug.cgi?id=142968)
        //Thiswillcausethefirst_updateUItoalterthelayoutofthecolorpicker
        //whichwillchangeitsheight.Changingtheheightofanelementinsideof
        //thecallbacktoaResizeObserverobservingitwillcauseanerror
        //(ResizeObserverloopcompletedwithundeliverednotifications)thatcannot
        //becaught,whichwillopenthecrashmanager.Prefillingtheinputssets
        //thebaselinecorrectlyfromthestartsothelayoutdoesn'tchange.
        Object.entries(this.colorComponents).forEach(([component,value])=>{
            constinput=this.el.querySelector(`.o_${component}_input`);
            if(input){
                input.value=value;
            }
        });
        constresizeObserver=newwindow.ResizeObserver(()=>{
            this._updateUI();
        });
        resizeObserver.observe(this.el);

        this.previewActive=true;
        returnthis._super.apply(this,arguments);
    },
    /**
     *@override
     */
    destroy:function(){
        this._super.apply(this,arguments);
        $(document).off(`.${this.uniqueId}`);
    },
    /**
     *Setsthecurrentlyselectedcolor
     *
     *@param{string}colorrgb[a]
     */
    setSelectedColor:function(color){
        varrgba=ColorpickerWidget.convertCSSColorToRgba(color);
        if(rgba){
            this._updateRgba(rgba.red,rgba.green,rgba.blue,rgba.opacity);
        }
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *Updatesinputvalues,colorpreview,pickerandsliderpointerpositions.
     *
     *@private
     */
    _updateUI:function(){
        varself=this;

        //Updateinputs
        _.each(this.colorComponents,function(value,color){
            self.$(_.str.sprintf('.o_%s_input',color)).val(value);
        });

        //Updatepreview
        this.$('.o_color_preview').css('background-color',this.colorComponents.cssColor);

        //Updatepickerareaandpickerpointerposition
        this.$colorpickerArea.css('background-color',_.str.sprintf('hsl(%s,100%%,50%%)',this.colorComponents.hue));
        vartop=(100-this.colorComponents.lightness)*this.$colorpickerArea.height()/100;
        varleft=this.colorComponents.saturation*this.$colorpickerArea.width()/100;
        this.$colorpickerPointer.css({
            top:(top-5)+'px',
            left:(left-5)+'px',
        });

        //Updatecolorsliderposition
        varheight=this.$colorSlider.height();
        vary=this.colorComponents.hue*height/360;
        this.$colorSliderPointer.css('top',Math.round(y-2));

        if(!this.options.noTransparency){
            //Updateopacitysliderposition
            varheightOpacity=this.$opacitySlider.height();
            varz=heightOpacity*(1-this.colorComponents.opacity/100.0);
            this.$opacitySliderPointer.css('top',Math.round(z-2));

            //Addgradientcoloronopacityslider
            this.$opacitySlider.css('background','linear-gradient('+this.colorComponents.hex+'0%,transparent100%)');
        }
    },
    /**
     *Updatescolorsaccordingtogivenhexvalue.Opacityisleftunchanged.
     *
     *@private
     *@param{string}hex-hexadecimalcode
     */
    _updateHex:function(hex){
        varrgb=ColorpickerWidget.convertCSSColorToRgba(hex);
        if(!rgb){
            return;
        }
        _.extend(this.colorComponents,
            {hex:hex},
            rgb,
            ColorpickerWidget.convertRgbToHsl(rgb.red,rgb.green,rgb.blue)
        );
        this._updateCssColor();
    },
    /**
     *UpdatescolorsaccordingtogivenRGBvalues.
     *
     *@private
     *@param{integer}r
     *@param{integer}g
     *@param{integer}b
     *@param{integer}[a]
     */
    _updateRgba:function(r,g,b,a){
        //Weupdatethehexadecimalcodebytransformingintoacsscolorand
        //ignoringtheopacity(wedon'tdisplayopacitycomponentinhexaas
        //notsupportedonallbrowsers)
        varhex=ColorpickerWidget.convertRgbaToCSSColor(r,g,b);
        if(!hex){
            return;
        }
        _.extend(this.colorComponents,
            {red:r,green:g,blue:b},
            a===undefined?{}:{opacity:a},
            {hex:hex},
            ColorpickerWidget.convertRgbToHsl(r,g,b)
        );
        this._updateCssColor();
    },
    /**
     *UpdatescolorsaccordingtogivenHSLvalues.
     *
     *@private
     *@param{integer}h
     *@param{integer}s
     *@param{integer}l
     */
    _updateHsl:function(h,s,l){
        varrgb=ColorpickerWidget.convertHslToRgb(h,s,l);
        if(!rgb){
            return;
        }
        //Wereceiveanhexaasweignoretheopacity
        consthex=ColorpickerWidget.convertRgbaToCSSColor(rgb.red,rgb.green,rgb.blue);
        _.extend(this.colorComponents,
            {hue:h,saturation:s,lightness:l},
            rgb,
            {hex:hex}
        );
        this._updateCssColor();
    },
    /**
     *Updatescoloropacity.
     *
     *@private
     *@param{integer}a
     */
    _updateOpacity:function(a){
        if(a<0||a>100){
            return;
        }
        _.extend(this.colorComponents,
            {opacity:a}
        );
        this._updateCssColor();
    },
    /**
     *Triggeraneventtoannoncethatthewidgetvaluehaschanged
     *
     *@private
     */
    _colorSelected:function(){
        this.trigger_up('colorpicker_select',this.colorComponents);
    },
    /**
     *Updatescsscolorrepresentation.
     *
     *@private
     */
    _updateCssColor:function(){
        constr=this.colorComponents.red;
        constg=this.colorComponents.green;
        constb=this.colorComponents.blue;
        consta=this.colorComponents.opacity;
        _.extend(this.colorComponents,
            {cssColor:ColorpickerWidget.convertRgbaToCSSColor(r,g,b,a)}
        );
        if(this.previewActive){
            this.trigger_up('colorpicker_preview',this.colorComponents);
        }
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *@private
     *@param{Event}ev
     */
    _onKeypress:function(ev){
        if(ev.charCode===$.ui.keyCode.ENTER){
            if(ev.target.tagName==='INPUT'){
                this._onChangeInputs(ev);
            }
            ev.preventDefault();
            this.trigger_up('enter_key_color_colorpicker');
        }
    },
    /**
     *@param{Event}ev
     */
    _onClick:function(ev){
        ev.originalEvent.__isColorpickerClick=true;
        $(ev.target).find('>.o_opacity_pointer,>.o_slider_pointer,>.o_picker_pointer').addBack('.o_opacity_pointer,.o_slider_pointer,.o_picker_pointer').focus();
    },
    /**
     *Updatescolorwhentheuserstartsclickingonthepicker.
     *
     *@private
     *@param{Event}ev
     */
    _onMouseDownPicker:function(ev){
        this.pickerFlag=true;
        ev.preventDefault();
        this._onMouseMovePicker(ev);
    },
    /**
     *Updatessaturationandlightnessvaluesonmousedragoverpicker.
     *
     *@private
     *@param{Event}ev
     */
    _onMouseMovePicker:function(ev){
        if(!this.pickerFlag){
            return;
        }

        varoffset=this.$colorpickerArea.offset();
        vartop=ev.pageY-offset.top;
        varleft=ev.pageX-offset.left;
        varsaturation=Math.round(100*left/this.$colorpickerArea.width());
        varlightness=Math.round(100*(this.$colorpickerArea.height()-top)/this.$colorpickerArea.height());
        saturation=utils.confine(saturation,0,100);
        lightness=utils.confine(lightness,0,100);

        this._updateHsl(this.colorComponents.hue,saturation,lightness);
        this._updateUI();
    },
    /**
     *Updatescolorwhenuserstartsclickingonslider.
     *
     *@private
     *@param{Event}ev
     */
    _onMouseDownSlider:function(ev){
        this.sliderFlag=true;
        ev.preventDefault();
        this._onMouseMoveSlider(ev);
    },
    /**
     *Updateshuevalueonmousedragoverslider.
     *
     *@private
     *@param{Event}ev
     */
    _onMouseMoveSlider:function(ev){
        if(!this.sliderFlag){
            return;
        }

        vary=ev.pageY-this.$colorSlider.offset().top;
        varhue=Math.round(360*y/this.$colorSlider.height());
        hue=utils.confine(hue,0,360);

        this._updateHsl(hue,this.colorComponents.saturation,this.colorComponents.lightness);
        this._updateUI();
    },
    /**
     *Updatesopacitywhenuserstartsclickingonopacityslider.
     *
     *@private
     *@param{Event}ev
     */
    _onMouseDownOpacitySlider:function(ev){
        this.opacitySliderFlag=true;
        ev.preventDefault();
        this._onMouseMoveOpacitySlider(ev);
    },
    /**
     *Updatesopacityvalueonmousedragoveropacityslider.
     *
     *@private
     *@param{Event}ev
     */
    _onMouseMoveOpacitySlider:function(ev){
        if(!this.opacitySliderFlag||this.options.noTransparency){
            return;
        }

        vary=ev.pageY-this.$opacitySlider.offset().top;
        varopacity=Math.round(100*(1-y/this.$opacitySlider.height()));
        opacity=utils.confine(opacity,0,100);

        this._updateOpacity(opacity);
        this._updateUI();
    },
    /**
     *Calledwheninputvalueischanged->UpdatesUI:Setpickerandslider
     *positionandsetcolors.
     *
     *@private
     *@param{Event}ev
     */
    _onChangeInputs:function(ev){
        switch($(ev.target).data('colorMethod')){
            case'hex':
                this._updateHex(this.$('.o_hex_input').val());
                break;
            case'rgb':
                this._updateRgba(
                    parseInt(this.$('.o_red_input').val()),
                    parseInt(this.$('.o_green_input').val()),
                    parseInt(this.$('.o_blue_input').val())
                );
                break;
            case'hsl':
                this._updateHsl(
                    parseInt(this.$('.o_hue_input').val()),
                    parseInt(this.$('.o_saturation_input').val()),
                    parseInt(this.$('.o_lightness_input').val())
                );
                break;
            case'opacity':
                this._updateOpacity(parseInt(this.$('.o_opacity_input').val()));
                break;
        }
        this._updateUI();
        this._colorSelected();
    },
});

//--------------------------------------------------------------------------
//Static
//--------------------------------------------------------------------------

/**
 *ConvertsRGBcolorcomponentstoHSLcomponents.
 *
 *@static
 *@param{integer}r-[0,255]
 *@param{integer}g-[0,255]
 *@param{integer}b-[0,255]
 *@returns{Object|false}
 *         -hue[0,360[
 *         -saturation[0,100]
 *         -lightness[0,100]
 */
ColorpickerWidget.convertRgbToHsl=function(r,g,b){
    if(typeof(r)!=='number'||isNaN(r)||r<0||r>255
            ||typeof(g)!=='number'||isNaN(g)||g<0||g>255
            ||typeof(b)!=='number'||isNaN(b)||b<0||b>255){
        returnfalse;
    }

    varred=r/255;
    vargreen=g/255;
    varblue=b/255;
    varmaxColor=Math.max(red,green,blue);
    varminColor=Math.min(red,green,blue);
    vardelta=maxColor-minColor;
    varhue=0;
    varsaturation=0;
    varlightness=(maxColor+minColor)/2;
    if(delta){
        if(maxColor===red){
            hue=(green-blue)/delta;
        }
        if(maxColor===green){
            hue=2+(blue-red)/delta;
        }
        if(maxColor===blue){
            hue=4+(red-green)/delta;
        }
        if(maxColor){
            saturation=delta/(1-Math.abs(2*lightness-1));
        }
    }
    hue=60*hue|0;
    return{
        hue:hue<0?hue+=360:hue,
        saturation:(saturation*100)|0,
        lightness:(lightness*100)|0,
    };
};
/**
 *ConvertsHSLcolorcomponentstoRGBcomponents.
 *
 *@static
 *@param{integer}h-[0,360[
 *@param{integer}s-[0,100]
 *@param{integer}l-[0,100]
 *@returns{Object|false}
 *         -red[0,255]
 *         -green[0,255]
 *         -blue[0,255]
 */
ColorpickerWidget.convertHslToRgb=function(h,s,l){
    if(typeof(h)!=='number'||isNaN(h)||h<0||h>360
            ||typeof(s)!=='number'||isNaN(s)||s<0||s>100
            ||typeof(l)!=='number'||isNaN(l)||l<0||l>100){
        returnfalse;
    }

    varhuePrime=h/60;
    varsaturation=s/100;
    varlightness=l/100;
    varchroma=saturation*(1-Math.abs(2*lightness-1));
    varsecondComponent=chroma*(1-Math.abs(huePrime%2-1));
    varlightnessAdjustment=lightness-chroma/2;
    varprecision=255;
    chroma=(chroma+lightnessAdjustment)*precision|0;
    secondComponent=(secondComponent+lightnessAdjustment)*precision|0;
    lightnessAdjustment=lightnessAdjustment*precision|0;
    if(huePrime>=0&&huePrime<1){
        return{
            red:chroma,
            green:secondComponent,
            blue:lightnessAdjustment,
        };
    }
    if(huePrime>=1&&huePrime<2){
        return{
            red:secondComponent,
            green:chroma,
            blue:lightnessAdjustment,
        };
    }
    if(huePrime>=2&&huePrime<3){
        return{
            red:lightnessAdjustment,
            green:chroma,
            blue:secondComponent,
        };
    }
    if(huePrime>=3&&huePrime<4){
        return{
            red:lightnessAdjustment,
            green:secondComponent,
            blue:chroma,
        };
    }
    if(huePrime>=4&&huePrime<5){
        return{
            red:secondComponent,
            green:lightnessAdjustment,
            blue:chroma,
        };
    }
    if(huePrime>=5&&huePrime<=6){
        return{
            red:chroma,
            green:lightnessAdjustment,
            blue:secondComponent,
        };
    }
    returnfalse;
};
/**
 *ConvertsRGBAcolorcomponentstoanormalizedCSScolor:iftheopacity
 *isinvalidorequalto100,ahexisreturned;otherwiseargba()csscolor
 *isreturned.
 *
 *Thosechoicehavemultiplereason:
 *-Ahexcolorismorecommontoc/cfromotherutilitiesonthewebandis
 *  alsoshorterthanrgb()csscolors
 *-Opacityinhexadecimalnotationsisnotsupportedonallbrowsersandis
 *  alsolesscommontouse.
 *
 *@static
 *@param{integer}r-[0,255]
 *@param{integer}g-[0,255]
 *@param{integer}b-[0,255]
 *@param{float}a-[0,100]
 *@returns{string}
 */
ColorpickerWidget.convertRgbaToCSSColor=function(r,g,b,a){
    if(typeof(r)!=='number'||isNaN(r)||r<0||r>255
            ||typeof(g)!=='number'||isNaN(g)||g<0||g>255
            ||typeof(b)!=='number'||isNaN(b)||b<0||b>255){
        returnfalse;
    }
    if(typeof(a)!=='number'||isNaN(a)||a<0||Math.abs(a-100)<Number.EPSILON){
        constrr=r<16?'0'+r.toString(16):r.toString(16);
        constgg=g<16?'0'+g.toString(16):g.toString(16);
        constbb=b<16?'0'+b.toString(16):b.toString(16);
        return(`#${rr}${gg}${bb}`).toUpperCase();
    }
    return`rgba(${r},${g},${b},${parseFloat((a/100.0).toFixed(3))})`;
};
/**
 *ConvertsaCSScolor(rgb(),rgba(),hexadecimal)toRGBAcolorcomponents.
 *
 *Note:wedon'tsupportusinganddisplayinghexadecimalcolorwithopacity
 *butthismethodallowstoreceiveoneandreturnsthecorrectopacityvalue.
 *
 *@static
 *@param{string}cssColor-hexadecimalcodeorrgb()orrgba()
 *@returns{Object|false}
 *         -red[0,255]
 *         -green[0,255]
 *         -blue[0,255]
 *         -opacity[0,100.0]
 */
ColorpickerWidget.convertCSSColorToRgba=function(cssColor){
    //CheckifcssColorisargba()orrgb()color
    constrgba=cssColor.match(/^rgba?\((\d+),\s*(\d+),\s*(\d+)(?:,\s*(\d+(?:\.\d+)?))?\)$/);
    if(rgba){
        if(rgba[4]===undefined){
            rgba[4]=1;
        }
        return{
            red:parseInt(rgba[1]),
            green:parseInt(rgba[2]),
            blue:parseInt(rgba[3]),
            opacity:Math.round(parseFloat(rgba[4])*100),
        };
    }

    //Otherwise,checkifcssColorisanhexadecimalcodecolor
    if(/^#([0-9A-F]{6}|[0-9A-F]{8})$/i.test(cssColor)){
        return{
            red:parseInt(cssColor.substr(1,2),16),
            green:parseInt(cssColor.substr(3,2),16),
            blue:parseInt(cssColor.substr(5,2),16),
            opacity:(cssColor.length===9?(parseInt(cssColor.substr(7,2),16)/255):1)*100,
        };
    }

    //TODOmaybeimplementasupportforreceivingcsscolorlike'red'or
    //'transparent'(whicharenowconsiderednon-csscolorbyisCSSColor...)
    //Note:however,ifeverimplementedbecarefulof'white'/'black'which
    //actuallyarecolornamesforourcolorsystem...

    returnfalse;
};
/**
 *ConvertsaCSScolor(rgb(),rgba(),hexadecimal)toanormalizedversion
 *ofthesamecolor(@seeconvertRgbaToCSSColor).
 *
 *Normalizedcolorcanbesafelycomparedusingstringcomparison.
 *
 *@static
 *@param{string}cssColor-hexadecimalcodeorrgb()orrgba()
 *@returns{string}-thenormalizedcsscolororthegivencsscolorifit
 *                    failedtobenormalized
 */
ColorpickerWidget.normalizeCSSColor=function(cssColor){
    constrgba=ColorpickerWidget.convertCSSColorToRgba(cssColor);
    if(!rgba){
        returncssColor;
    }
    returnColorpickerWidget.convertRgbaToCSSColor(rgba.red,rgba.green,rgba.blue,rgba.opacity);
};
/**
 *Checksifagivenstringisacsscolor.
 *
 *@static
 *@param{string}cssColor
 *@returns{boolean}
 */
ColorpickerWidget.isCSSColor=function(cssColor){
    returnColorpickerWidget.convertCSSColorToRgba(cssColor)!==false;
};

constColorpickerDialog=Dialog.extend({
    /**
     *@override
     */
    init:function(parent,options){
        this.options=options||{};
        this._super(parent,_.extend({
            size:'small',
            title:_t('Pickacolor'),
            buttons:[
                {text:_t('Choose'),classes:'btn-primary',close:true,click:this._onFinalPick.bind(this)},
                {text:_t('Discard'),close:true},
            ],
        },this.options));
    },
    /**
     *@override
     */
    start:function(){
        constproms=[this._super(...arguments)];
        this.colorPicker=newColorpickerWidget(this,_.extend({
            colorPreview:true,
        },this.options));
        proms.push(this.colorPicker.appendTo(this.$el));
        returnPromise.all(proms);
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *@private
     */
    _onFinalPick:function(){
        this.trigger_up('colorpicker:saved',this.colorPicker.colorComponents);
    },
});

return{
    ColorpickerDialog:ColorpickerDialog,
    ColorpickerWidget:ColorpickerWidget,
};
});
