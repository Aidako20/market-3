flectra.define('web.TranslationDialog',function(require){
    'usestrict';

    varcore=require('web.core');
    varDialog=require('web.Dialog');
    varsession=require('web.session');

    var_t=core._t;

    varTranslationDialog=Dialog.extend({
        xmlDependencies:(Dialog.prototype.xmlDependencies||[])
            .concat(['/web/static/src/xml/translation_dialog.xml']),
        template:'TranslationDialog',

        /**
         *@constructor
         *@param{Widget}parent
         *@param{Object}[options]
         *@param{string}[options.domain]thedomainneededtogetthetranslationterms
         *@param{string}[options.fieldName]thenameofthefieldcurrentlytranslated(fromthemodeloftheformview)
         *@param{string}[options.searchName]thenameoftheactualfieldthatisthereferencefortranslation(intheformofmodel,field)
         *@param{string}[options.userLanguageValue]thevalueofthetranslationinthelanguageoftheuser,asseeninthefromview(mightbeempty)
         *@param{string}[options.dataPointID]thedatapointidoftherecordforwhichwedothetranslations
         *@param{boolean}[options.isComingFromTranslationAlert]theinitiatorofthedialog,mightbealinkonafieldorthetranslationalertontopoftheform
         *@param{boolean}[options.isText]isthefieldatextfield(multiline)orchar(singleline)
         *@param{boolean}[options.showSrc]isthesourceofthetranslationshouldberendered(forpartialtranslations,i.e.XMLcontent)
         *
         */
        init:function(parent,options){
            options=options||{};

            this.fieldName=options.fieldName;
            this.domain=options.domain;
            this.searchName=options.searchName;
            this.userLanguageValue=options.userLanguageValue;
            this.domain.push(['name',"=",`${this.searchName}`]);
            this.dataPointID=options.dataPointID;
            this.isComingFromTranslationAlert=options.isComingFromTranslationAlert;
            this.currentInterfaceLanguage=session.user_context.lang;
            this.isText=options.isText;
            this.showSrc=options.showSrc;
            this.node=options.node;

            this._super(parent,_.extend({
                size:'large',
                title:_t('Translate:')+`${this.fieldName}`,
                buttons:[
                    {text:_t('Save'),classes:'btn-primary',close:true,click:this._onSave.bind(this)},
                    {text:_t('Discard'),close:true},
                ],
            },options));
        },
        /**
         *@override
         */
        willStart:function(){
            returnPromise.all([
                this._super(),
                this._loadLanguages().then((l)=>{
                    this.languages=l;
                    returnthis._loadTranslations().then((t)=>{
                        this.translations=t;
                    });
                }),
            ]).then(()=>{
                this.data=this.translations.map((term)=>{
                    letrelatedLanguage=this.languages.find((language)=>language[0]===term.lang);
                    if(!term.value&&!this.showSrc){
                        term.value=term.src;
                    }
                    return{
                        id:term.id,
                        lang:term.lang,
                        langName:relatedLanguage[1],
                        source:term.src,
                        //wesetthetranslationvaluecomingfromthedatabase,exceptforthelanguage
                        //theuseriscurrentlyutilizing.Thenwesetthetranslationvaluecoming
                        //fromthevalueofthefieldintheform
                        value:(term.lang===this.currentInterfaceLanguage&&
                            !this.showSrc&&
                            !this.isComingFromTranslationAlert)?
                            this.userLanguageValue:term.value||''
                    };
                });
                this.data.sort((left,right)=>
                    (left.langName<right.langName||(left.langName===right.langName&&left.source<right.source))?-1:1);
            });
        },

        //--------------------------------------------------------------------------
        //Private
        //--------------------------------------------------------------------------
        /**
         *Loadthetranslationtermsfortheinstalledlanguage,forthecurrentmodelandres_id
         *@private
         */
        _loadTranslations:function(){
            constdomain=[...this.domain,['lang','in',this.languages.map(l=>l[0])]];
            returnthis._rpc({
                model:'ir.translation',
                method:'search_read',
                fields:['lang','src','value'],
                domain:domain,
            });
        },
        /**
         *Loadtheinstalledlanguageslongnamesandcode
         *
         *Theresultofthecallisputincacheontheprototypeofthisdialog.
         *Ifanynewlanguageisinstalled,afullpagerefreshwillhappen,
         *sothereisnoneedinvalidateit.
         *@private
         */
        _loadLanguages:function(){
            if(TranslationDialog.prototype.installedLanguagesCache)
                returnPromise.resolve(TranslationDialog.prototype.installedLanguagesCache);

            returnthis._rpc({
                model:'res.lang',
                method:'get_installed',
                fields:['code','name','iso_code'],
            }).then((installedLanguages)=>{
                TranslationDialog.prototype.installedLanguagesCache=installedLanguages;
                returnTranslationDialog.prototype.installedLanguagesCache
            });
        },

        //--------------------------------------------------------------------------
        //Handlers
        //--------------------------------------------------------------------------
        /**
         *Saveallthetermsthathavebeenupdated
         *@private
         *@returnsapromisethatisresolvedwhenallthesavehaveoccured
         */
        _onSave:function(){
            varupdatedTerm={};
            varupdateFormViewField;

            this.el.querySelectorAll('input[type=text],textarea').forEach((t)=>{
                varinitialValue=this.data.find((d)=>d.id==t.dataset.id);
                if(initialValue.value!==t.value){
                    updatedTerm[t.dataset.id]=t.value;

                    if(initialValue.lang===this.currentInterfaceLanguage&&!this.showSrc){
                        //whentheuserhaschangedthetermforthelanguageheis
                        //usingintheinterface,thischangeshouldbereflected
                        //intheformview
                        //partialtranslationsbeinghandledserversideare
                        //alsoignored
                        varchanges={};
                        changes[this.fieldName]=updatedTerm[initialValue.id];
                        updateFormViewField={
                            dataPointID:this.dataPointID,
                            changes:changes,
                            doNotSetDirty:false,
                            node:this.node,
                        };
                    }
                }
            });

            //updatedTermonlycontainstheidandvaluesofthetermsthat
            //havebeenupdatedbytheuser
            varsaveUpdatedTermsProms=Object.keys(updatedTerm).map((id)=>{
                varwriteTranslation={
                    model:'ir.translation',
                    method:'write',
                    context:this.context,
                    args:[[parseInt(id,10)],{value:updatedTerm[id]}]
                };
                returnthis._rpc(writeTranslation);
            });
            returnPromise.all(saveUpdatedTermsProms).then(()=>{
                //wemighthavetoupdatethevalueofthefieldontheform
                //viewthatopenedthetranslationdialog
                if(updateFormViewField){
                    this.trigger_up('field_changed',updateFormViewField);
                }
            });
        }
    });

    returnTranslationDialog;
});
