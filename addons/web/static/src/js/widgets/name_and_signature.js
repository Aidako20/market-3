flectra.define('web.name_and_signature',function(require){
'usestrict';

varcore=require('web.core');
varconfig=require('web.config');
varutils=require('web.utils');
varWidget=require('web.Widget');

var_t=core._t;

/**
 *Thiswidgetallowstheusertoinputhisnameandtodrawhissignature.
 *Alternativelythesignaturecanalsobegeneratedautomaticallybasedon
 *thegivennameandaselectedfont,orloadedfromanimagefile.
 */
varNameAndSignature=Widget.extend({
    template:'web.sign_name_and_signature',
    xmlDependencies:['/web/static/src/xml/name_and_signature.xml'],
    events:{
        //name
        'input.o_web_sign_name_input':'_onInputSignName',
        //signature
        'click.o_web_sign_signature':'_onClickSignature',
        'change.o_web_sign_signature':'_onChangeSignature',
        //draw
        'click.o_web_sign_draw_button':'_onClickSignDrawButton',
        'click.o_web_sign_draw_cleara':'_onClickSignDrawClear',
        //auto
        'click.o_web_sign_auto_button':'_onClickSignAutoButton',
        'click.o_web_sign_auto_select_stylea':'_onClickSignAutoSelectStyle',
        'click.o_web_sign_auto_font_selectiona':'_onClickSignAutoFontSelection',
        'mouseover.o_web_sign_auto_font_selectiona':'_onMouseOverSignAutoFontSelection',
        'touchmove.o_web_sign_auto_font_selectiona':'_onTouchStartSignAutoFontSelection',
        //load
        'click.o_web_sign_load_button':'_onClickSignLoadButton',
        'change.o_web_sign_load_fileinput':'_onChangeSignLoadInput',
    },

    /**
     *Allowsoptions.
     *
     *@constructor
     *@param{Widget}parent
     *@param{Object}[options={}]
     *@param{number}[options.displaySignatureRatio=3.0]-Theratiousedwhen
     * (re)computingthesizeofthesignature(width=height*ratio)
     *@param{string}[options.defaultName='']-Thedefaultnameof
     * thesigner.
     *@param{string}[options.defaultFont='']-Theuniqueanddefault
     * fontforautomode.Ifempty,allfontsarevisible.
     **@param{string}[options.fontColor='DarkBlue']-Colorofsignature
     *(mustbeastringcolor)
     *@param{string}[options.noInputName=false]-Ifsettotrue,
     * theusercannotenterhisname.Iftherearen'tdefaultName,
     * automodeishidden.
     *@param{string}[options.mode='draw']-@seethis.setMode
     *@param{string}[options.signatureType='signature']-Thetypeof
     * signatureusedin'auto'mode.Canbeoneofthefollowingvalues:
     *
     * -'signature':itwilladaptthecharacterswidthtofitthewhole
     *   textintheimage.
     * -'initial':itwilladaptthespacebetweencharacterstofill
     *     theimagewiththetext.Thetextwillbethefirstletterof
     *     everywordinthename,separatedbydots.
     */
    init:function(parent,options){
        this._super.apply(this,arguments);
        options=options||{};
        this.htmlId=_.uniqueId();
        this.defaultName=options.defaultName||'';
        this.defaultFont=options.defaultFont||'';
        this.fontColor=options.fontColor||'DarkBlue';
        this.displaySignatureRatio=options.displaySignatureRatio||3.0;
        this.signatureType=options.signatureType||'signature';
        this.signMode=options.mode||'draw';
        this.noInputName=options.noInputName||false;
        this.currentFont=0;
        this.drawTimeout=null;
        this.drawPreviewTimeout=null;
    },
    /**
     *Loadsthefonts.
     *
     *@override
     */
    willStart:function(){
        varself=this;
        returnPromise.all([
            this._super.apply(this,arguments),
            this._rpc({route:'/web/sign/get_fonts/'+self.defaultFont}).then(function(data){
                self.fonts=data;
            })
        ]);
    },
    /**
     *FindstheDOMelements,initializesthesignaturearea,
     *andfocusthenamefield.
     *
     *@override
     */
    start:function(){
        varself=this;
        //signatureandnameinput
        this.$signatureGroup=this.$('.o_web_sign_signature_group');
        this.$signatureField=this.$('.o_web_sign_signature');
        this.$nameInput=this.$('.o_web_sign_name_input');
        this.$nameInputGroup=this.$('.o_web_sign_name_group');

        //modeselectionbuttons
        this.$drawButton=this.$('a.o_web_sign_draw_button');
        this.$autoButton=this.$('a.o_web_sign_auto_button');
        this.$loadButton=this.$('a.o_web_sign_load_button');

        //mode:draw
        this.$drawClear=this.$('.o_web_sign_draw_clear');

        //mode:auto
        this.$autoSelectStyle=this.$('.o_web_sign_auto_select_style');
        this.$autoFontSelection=this.$('.o_web_sign_auto_font_selection');
        this.$autoFontList=this.$('.o_web_sign_auto_font_list');
        for(variinthis.fonts){
            var$img=$('<img/>').addClass('img-fluid');
            var$a=$('<a/>').addClass('btnp-0').append($img).data('fontNb',i);
            this.$autoFontList.append($a);
        }

        //mode:load
        this.$loadFile=this.$('.o_web_sign_load_file');
        this.$loadInvalid=this.$('.o_web_sign_load_invalid');

        if(this.fonts&&this.fonts.length<2){
            this.$autoSelectStyle.hide();
        }

        if(this.noInputName){
            if(this.defaultName===""){
                this.$autoButton.hide();
            }
            this.$nameInputGroup.hide();
        }

        //Resizethesignatureareaifitisresized
        $(window).on('resize.o_web_sign_name_and_signature',_.debounce(function(){
            if(self.isDestroyed()){
                //Mayhappensincethisisdebounced
                return;
            }
            self.resizeSignature();
        },250));

        returnthis._super.apply(this,arguments);
    },
    /**
     *@override
     */
    destroy:function(){
        this._super.apply(this,arguments);
        $(window).off('resize.o_web_sign_name_and_signature');
    },

    //----------------------------------------------------------------------
    //Public
    //----------------------------------------------------------------------

    /**
     *Focusesthename.
     */
    focusName:function(){
        //Don'tfocusonmobile
        if(!config.device.isMobile){
            this.$nameInput.focus();
        }
    },
    /**
     *Getsthenamecurrentlygivenbytheuser.
     *
     *@returns{string}name
     */
    getName:function(){
        returnthis.$nameInput.val();
    },
    /**
     *Getsthesignaturecurrentlydrawn.Thedataformatisthatproduced
     *nativelybyCanvas-base64encoded(likelyPNG)bitmapdata.
     *
     *@returns{string[]}Arraythatcontainsthesignatureasabitmap.
     * Thefirstelementisthemimetype,thesecondelementisthedata.
     */
    getSignatureImage:function(){
        returnthis.$signatureField.jSignature('getData','image');
    },
    /**
     *Getsthesignaturecurrentlydrawn,inaformatreadytobeusedin
     *an<img/>srcattribute.
     *
     *@returns{string}thesignaturecurrentlydrawn,srcready
     */
    getSignatureImageSrc:function(){
        returnthis.$signatureField.jSignature('getData');
    },
    /**
     *Returnswhetherthedrawingareaiscurrentlyempty.
     *
     *@returns{boolean}Whetherthedrawingareaiscurrentlyempty.
     */
    isSignatureEmpty:function(){
        varsignature=this.$signatureField.jSignature('getData');
        returnsignature&&this.emptySignature?this.emptySignature===signature:true;
    },
    resizeSignature:function(){
        if(!this.$signatureField){
            return;
        }
        //recomputesizebasedonthecurrentwidth
        this.$signatureField.css({width:'unset'});
        constwidth=this.$signatureField.width();
        constheight=parseInt(width/this.displaySignatureRatio);

        //necessarybecausethelibisaddinginvisibledivwithmargin
        //signaturefieldtootallwithoutthiscode
        this.$signatureField.css({
            width:width,
            height:height,
        });
        this.$signatureField.find('canvas').css({
            width:width,
            height:height,
        });
        return{width,height};
    },
    /**
     *(Re)initializesthesignaturearea:
     * -setthecorrectwidthandheightofthedrawingbasedonthewidth
     *     ofthecontainerandtheratiooption
     * -emptyanypreviouscontent
     * -correctlyresettheemptystate
     * -call@seesetModewithreset
     *
     *@returns{Deferred}
     */
    resetSignature:function(){
        if(!this.$signatureField){
            //noactionifcalledbeforestart
            returnPromise.reject();
        }

        const{width,height}=this.resizeSignature();

        this.$signatureField
            .empty()
            .jSignature({
                'decor-color':'#D1D0CE',
                'background-color':'rgba(255,255,255,0)',
                'show-stroke':false,
                'color':this.fontColor,
                'lineWidth':2,
                'width':width,
                'height':height,
            });
        this.emptySignature=this.$signatureField.jSignature('getData');

        this.setMode(this.signMode,true);

        this.focusName();

        returnPromise.resolve();
    },
    /**
     *Changesthesignaturemode.Togglesthedisplayoftherelevant
     *controlsandresetsthedrawing.
     *
     *@param{string}mode-themodetouse.Canbeoneofthefollowing:
     * -'draw':theuserdrawsthesignaturemanuallywiththemouse
     * -'auto':thesignatureisdrawnautomaticallyusingaselectedfont
     * -'load':thesignatureisloadedfromanimagefile
     *@param{boolean}[reset=false]-Settotruetoresettheelements
     * evenifthe@seemodehasnotchanged.Bydefaultnothinghappens
     * ifthe@seemodeisalreadyselected.
     */
    setMode:function(mode,reset){
        if(reset!==true&&mode===this.signMode){
            //preventflickeringandunnecessarycompute
            return;
        }

        this.signMode=mode;

        this.$drawClear.toggleClass('d-none',this.signMode!=='draw');
        this.$autoSelectStyle.toggleClass('d-none',this.signMode!=='auto');
        this.$loadFile.toggleClass('d-none',this.signMode!=='load');

        this.$drawButton.toggleClass('active',this.signMode==='draw');
        this.$autoButton.toggleClass('active',this.signMode==='auto');
        this.$loadButton.toggleClass('active',this.signMode==='load');

        this.$signatureField.jSignature(this.signMode==='draw'?'enable':'disable');
        this.$signatureField.jSignature('reset');

        if(this.signMode==='auto'){
            //drawbasedonname
            this._drawCurrentName();
        }else{
            //closestyledialog
            this.$autoFontSelection.addClass('d-none');
        }

        if(this.signMode!=='load'){
            //closeinvalidfilealert
            this.$loadInvalid.addClass('d-none');
        }
    },
    /**
     *Getsthecurrentnameandsignature,validatesthem,andreturns
     *theresult.Iftheyareinvalid,displaystheerrorstotheuser.
     *
     *@returns{boolean}whetherthecurrentnameandsignaturearevalid
     */
    validateSignature:function(){
        varname=this.getName();
        varisSignatureEmpty=this.isSignatureEmpty();
        this.$nameInput.parent().toggleClass('o_has_error',!name)
            .find('.form-control,.custom-select').toggleClass('is-invalid',!name);
        this.$signatureGroup.toggleClass('border-danger',isSignatureEmpty);
        returnname&&!isSignatureEmpty;
    },

    //----------------------------------------------------------------------
    //Private
    //----------------------------------------------------------------------

    /**
     *Drawsthecurrentnamewiththecurrentfontinthesignaturefield.
     *
     *@private
     */
    _drawCurrentName:function(){
        varfont=this.fonts[this.currentFont];
        vartext=this._getCleanedName();
        varcanvas=this.$signatureField.find('canvas')[0];
        varimg=this._getSVGText(font,text,canvas.width,canvas.height);
        returnthis._printImage(img);
    },
    /**
     *Returnsthegivennameaftercleaningitbyremovingcharactersthat
     *arenotsupposedtobeusedinasignature.If@seesignatureTypeisset
     *to'initial',returnsthefirstletterofeachword,separatedbydots.
     *
     *@private
     *@returns{string}cleanedname
     */
    _getCleanedName:function(){
        vartext=this.getName();
        if(this.signatureType==='initial'){
            return(text.split('').map(function(w){
                returnw[0];
            }).join('.')+'.');
        }
        returntext;
    },
    /**
     *GetsanSVGmatchingthegivenparameters,outputcompatiblewiththe
     *srcattributeof<img/>.
     *
     *@private
     *@param{string}font:base64encodedfonttouse
     *@param{string}text:thenametodraw
     *@param{number}width:thewidthoftheresultingimageinpx
     *@param{number}height:theheightoftheresultingimageinpx
     *@returns{string}image=mimetype+imagedata
     */
    _getSVGText:function(font,text,width,height){
        var$svg=$(core.qweb.render('web.sign_svg_text',{
            width:width,
            height:height,
            font:font,
            text:text,
            type:this.signatureType,
            color:this.fontColor,
        }));
        $svg.attr({
            'xmlns':"http://www.w3.org/2000/svg",
            'xmlns:xlink':"http://www.w3.org/1999/xlink",
        });

        return"data:image/svg+xml,"+encodeURI($svg[0].outerHTML);
    },
    /**
     *Displaysthegivenimageinthesignaturefield.
     *Ifneeded,resizestheimagetofittheexistingarea.
     *
     *@private
     *@param{string}imgSrc-dataoftheimagetodisplay
     */
    _printImage:function(imgSrc){
        varself=this;

        varimage=newImage;
        image.onload=function(){
            //don'tslowdowntheUIifthedrawingisslow,andprevent
            //drawingtwicewhencallingthismethodinrapidsuccession
            clearTimeout(self.drawTimeout);
            self.drawTimeout=setTimeout(function(){
                varwidth=0;
                varheight=0;
                varratio=image.width/image.height;

                var$canvas=self.$signatureField.find('canvas');
                varcontext=$canvas[0].getContext('2d');

                if(image.width/$canvas[0].width>image.height/$canvas[0].height){
                    width=$canvas[0].width;
                    height=parseInt(width/ratio);
                }else{
                    height=$canvas[0].height;
                    width=parseInt(height*ratio);
                }
                self.$signatureField.jSignature('reset');
                varignoredContext=_.pick(context,['shadowOffsetX','shadowOffsetY']);
                _.extend(context,{shadowOffsetX:0,shadowOffsetY:0});
                context.drawImage(image,
                    0,
                    0,
                    image.width,
                    image.height,
                    ($canvas[0].width-width)/2,
                    ($canvas[0].height-height)/2,
                    width,
                    height
                );
                _.extend(context,ignoredContext);
                self.trigger_up('signature_changed');
            },0);
        };
        image.src=imgSrc;
    },
    /**
     *Setsthefonttousein@seemode'auto'.Redrawsthesignatureif
     *thefonthasbeenchanged.
     *
     *@private
     *@param{number}index-indexofthefontin@seethis.fonts
     */
    _setFont:function(index){
        if(index!==this.currentFont){
            this.currentFont=index;
            this._drawCurrentName();
        }
    },
    /**
     *Updatesthepreviewbuttonsbyrenderingthesignatureforeachfont.
     *
     *@private
     */
    _updatePreviewButtons:function(){
        varself=this;
        //don'tslowdowntheUIifthedrawingisslow,andprevent
        //drawingtwicewhencallingthismethodinrapidsuccession
        clearTimeout(this.drawPreviewTimeout);
        this.drawPreviewTimeout=setTimeout(function(){
            varheight=100;
            varwidth=parseInt(height*self.displaySignatureRatio);
            var$existingButtons=self.$autoFontList.find('a');
            for(vari=0;i<self.fonts.length;i++){
                varimgSrc=self._getSVGText(
                    self.fonts[i],
                    self._getCleanedName()||_t("Yourname"),
                    width,
                    height
                );
                $existingButtons.eq(i).find('img').attr('src',imgSrc);
            }
        },0);
    },
    /**
     *Waitsforthesignaturetobenotemptyandtriggersuptheevent
     *`signature_changed`.
     *ThisisnecessarybecausesomemethodsofjSignatureareasyncbut
     *theydon'treturnapromiseanddon'ttriggeranyevent.
     *
     *@private
     *@param{Deferred}[def=Deferred]-Deferredthatwillbereturnedby
     * themethodandresolvedwhenthesignatureisnotemptyanymore.
     *@returns{Deferred}
     */
    _waitForSignatureNotEmpty:function(def){
        def=def||$.Deferred();
        if(!this.isSignatureEmpty()){
            this.trigger_up('signature_changed');
            def.resolve();
        }else{
            //Usetheexistingdeftopreventthemethodfromcreatinganew
            //oneateveryloop.
            setTimeout(this._waitForSignatureNotEmpty.bind(this,def),10);
        }
        returndef;
    },

    //----------------------------------------------------------------------
    //Handlers
    //----------------------------------------------------------------------

    /**
     *Handlesclickonthesignature:closesthefontselection.
     *
     *@seemode'auto'
     *@private
     *@param{Event}ev
     */
    _onClickSignature:function(ev){
        this.$autoFontSelection.addClass('d-none');
    },
    /**
     *HandlesclickontheAutobutton:activates@seemode'auto'.
     *
     *@private
     *@param{Event}ev
     */
    _onClickSignAutoButton:function(ev){
        ev.preventDefault();
        this.setMode('auto');
    },
    /**
     *Handlesclickonafont:usesitandclosesthefontselection.
     *
     *@seemode'auto'
     *@private
     *@param{Event}ev
     */
    _onClickSignAutoFontSelection:function(ev){
        this.$autoFontSelection.addClass('d-none').removeClass('d-flex').css('width',0);
        this._setFont(parseInt($(ev.currentTarget).data('font-nb')));
    },
    /**
     *HandlesclickonSelectStyle:opensandupdatesthefontselection.
     *
     *@seemode'auto'
     *@private
     *@param{Event}ev
     */
    _onClickSignAutoSelectStyle:function(ev){
        varself=this;
        varwidth=Math.min(
            self.$autoFontSelection.find('a').first().height()*self.displaySignatureRatio*1.25,
            this.$signatureField.width()
        );

        ev.preventDefault();
        self._updatePreviewButtons();

        this.$autoFontSelection.removeClass('d-none').addClass('d-flex');
        this.$autoFontSelection.show().animate({'width':width},500,function(){});
    },
    /**
     *HandlesclickontheDrawbutton:activates@seemode'draw'.
     *
     *@private
     *@param{Event}ev
     */
    _onClickSignDrawButton:function(ev){
        ev.preventDefault();
        this.setMode('draw');
    },
    /**
     *Handlesclickonclear:emptiesthesignaturefield.
     *
     *@seemode'draw'
     *@private
     *@param{Event}ev
     */
    _onClickSignDrawClear:function(ev){
        ev.preventDefault();
        this.$signatureField.jSignature('reset');
    },
    /**
     *HandlesclickontheLoadbutton:activates@seemode'load'.
     *
     *@private
     *@param{Event}ev
     */
    _onClickSignLoadButton:function(ev){
        ev.preventDefault();
        //openfileuploadautomatically(saves1click)
        this.$loadFile.find('input').click();
        this.setMode('load');
    },
    /**
     *Triggersupthesignaturechangeevent.
     *
     *@private
     *@param{Event}ev
     */
    _onChangeSignature:function(ev){
        this.trigger_up('signature_changed');
    },
    /**
     *Handleschangeonloadfileinput:displaystheloadedimageifthe
     *formatiscorrect,ordiplaysanerrorotherwise.
     *
     *@seemode'load'
     *@private
     *@param{Event}ev
     *@returnbool|undefined
     */
    _onChangeSignLoadInput:function(ev){
        varself=this;
        varf=ev.target.files[0];
        if(f===undefined){
            returnfalse;
        }
        if(f.type.substr(0,5)!=='image'){
            this.$signatureField.jSignature('reset');
            this.$loadInvalid.removeClass('d-none');
            returnfalse;
        }
        this.$loadInvalid.addClass('d-none');

        utils.getDataURLFromFile(f).then(function(result){
            self._printImage(result);
        });
    },
    /**
     *Handlesinputonnamefield:ifthe@seemodeis'auto',redrawsthe
     *signaturewiththenewname.Alsoupdatesthefontselectionifopen.
     *
     *@private
     *@param{Event}ev
     */
    _onInputSignName:function(ev){
        if(this.signMode!=='auto'){
            return;
        }
        this._drawCurrentName();
        if(!this.$autoFontSelection.hasClass('d-none')){
            this._updatePreviewButtons();
        }
    },
    /**
     *Handlesmouseoveronfontselection:usesthisfont.
     *
     *@seemode'auto'
     *@private
     *@param{Event}ev
     */
    _onMouseOverSignAutoFontSelection:function(ev){
        this._setFont(parseInt($(ev.currentTarget).data('font-nb')));
    },
    /**
     *Handlestouchstartonfontselection:usesthisfont.
     *
     *@seemode'auto'
     *@private
     *@param{Event}ev
     */
    _onTouchStartSignAutoFontSelection:function(ev){
        this._setFont(parseInt($(ev.currentTarget).data('font-nb')));
    },
});

return{
    NameAndSignature:NameAndSignature,
};
});
