flectra.define('web.AttachDocument',function(require){
"usestatic";

varcore=require('web.core');
varframework=require('web.framework');
varwidgetRegistry=require('web.widget_registry');
varWidget=require('web.Widget');

var_t=core._t;

varAttachDocument=Widget.extend({
    template:'AttachDocument',
    events:{
        'click':'_onClickAttachDocument',
        'changeinput.o_input_file':'_onFileChanged',
    },
    /**
     *@constructor
     *@param{Widget}parent
     *@param{Object}record
     *@param{Object}nodeInfo
     */
    init:function(parent,record,nodeInfo){
        this._super.apply(this,arguments);
        this.res_id=record.res_id;
        this.res_model=record.model;
        this.state=record;
        this.node=nodeInfo;
        this.fileuploadID=_.uniqueId('o_fileupload');
    },
    /**
     *@override
     */
    start:function(){
        $(window).on(this.fileuploadID,this._onFileLoaded.bind(this));
        returnthis._super.apply(this,arguments);
    },
    /**
     *@override
     */
    destroy:function(){
        $(window).off(this.fileuploadID);
        this._super.apply(this,arguments);
    },

    //--------------------------------------------------------------------------
    //private
    //--------------------------------------------------------------------------

    /**
     *Helperfunctiontodisplayawarningthatsomefieldshaveaninvalid
     *value.Thisisusedwhenasaveoperationcannotbecompleted.
     *
     *@private
     *@param{string[]}invalidFields-listoffieldnames
     */
    _notifyInvalidFields:function(invalidFields){
        varfields=this.state.fields;
        varwarnings=invalidFields.map(function(fieldName){
            varfieldStr=fields[fieldName].string;
            return_.str.sprintf('<li>%s</li>',_.escape(fieldStr));
        });
        warnings.unshift('<ul>');
        warnings.push('</ul>');
        this.do_warn(_t("Invalidfields:"),warnings.join(''));
     },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *OpensFileExplorerdialogifallfieldsarevalidandrecordissaved
     *
     *@private
     *@param{Event}ev
     */
    _onClickAttachDocument:function(ev){
        if($(ev.target).is('input.o_input_file')){
            return;
        }
        varfieldNames=this.getParent().canBeSaved(this.state.id);
        if(fieldNames.length){
            returnthis._notifyInvalidFields(fieldNames);
        }
        //WewanttosaverecordonwidgetclickandthenopenFileSelectionExplorer
        //butduetothissecurityrestrictiongivewarningtosaverecordfirst.
        //https://stackoverflow.com/questions/29728705/trigger-click-on-input-file-on-asynchronous-ajax-done/29873845#29873845
        if(!this.res_id){
            returnthis.do_warn(false,_t('Pleasesavebeforeattachingafile'));
        }
        this.$('input.o_input_file').trigger('click');
    },
    /**
     *Submitsfile
     *
     *@private
     *@param{Event}ev
     */
    _onFileChanged:function(ev){
        ev.stopPropagation();
        this.$('form.o_form_binary_form').trigger('submit');
        framework.blockUI();
    },
    /**
     *Callactiongivenasnodeattributeafterfilesubmission
     *
     *@private
     */
    _onFileLoaded:function(){
        varself=this;
        //thefirstargumentisn'tafilebutthejQuery.Event
        varfiles=Array.prototype.slice.call(arguments,1);
        returnnewPromise(function(resolve){
            if(self.node.attrs.action){
                self._rpc({
                    model:self.res_model,
                    method:self.node.attrs.action,
                    args:[self.res_id],
                    kwargs:{
                        attachment_ids:_.map(files,function(file){
                            returnfile.id;
                        }),
                    }
                }).then(function(){
                    resolve();
                });
            }else{
                resolve();
            }
        }).then(function(){
            self.trigger_up('reload');
            framework.unblockUI();
        });
    },

});
widgetRegistry.add('attach_document',AttachDocument);
});
