flectra.define('web.BasicView',function(require){
"usestrict";

/**
 *TheBasicViewisanabstractclassdesignedtosharecodebetweenviewsthat
 *wanttouseabasicModel. Asofnow,itistheformview,thelistviewand
 *thekanbanview.
 *
 *Themainfocusofthisclassistoprocessthearchandextractfield
 *attributes,aswellassomeotherusefulinformations.
 */

varAbstractView=require('web.AbstractView');
varBasicController=require('web.BasicController');
varBasicModel=require('web.BasicModel');
varconfig=require('web.config');
varfieldRegistry=require('web.field_registry');
varfieldRegistryOwl=require('web.field_registry_owl');
varpyUtils=require('web.py_utils');
varutils=require('web.utils');

varBasicView=AbstractView.extend({
    config:_.extend({},AbstractView.prototype.config,{
        Model:BasicModel,
        Controller:BasicController,
    }),
    viewType:undefined,
    /**
     *processthefields_viewtofindallfieldsappearingintheviews.
     *listthosefields'nameinthis.fields_name,whichwillbethelist
     *offieldsreadwhendataisfetched.
     *this.fieldsisthelistofallfield'sdescription(theresultof
     *thefields_get),wherethefieldsappearinginthefields_vieware
     *augmentedwiththeirattrsandsomeflagsiftheyrequirea
     *particularhandling.
     *
     *@param{Object}viewInfo
     *@param{Object}params
     */
    init:function(viewInfo,params){
        this._super.apply(this,arguments);

        this.fieldsInfo={};
        this.fieldsInfo[this.viewType]=this.fieldsView.fieldsInfo[this.viewType];

        this.rendererParams.viewType=this.viewType;

        this.controllerParams.confirmOnDelete=true;
        this.controllerParams.archiveEnabled='active'inthis.fields||'x_active'inthis.fields;
        this.controllerParams.hasButtons=
                'action_buttons'inparams?params.action_buttons:true;
        this.controllerParams.viewId=viewInfo.view_id;

        this.loadParams.fieldsInfo=this.fieldsInfo;
        this.loadParams.fields=this.fields;
        this.loadParams.limit=parseInt(this.arch.attrs.limit,10)||params.limit;
        this.loadParams.parentID=params.parentID;
        this.loadParams.viewType=this.viewType;
        this.recordID=params.recordID;

        this.model=params.model;
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *ReturnstheAbstractFieldspecializationthatshouldbeusedforthe
     *givenfieldinformations.Ifthereisnomentionedspecificwidgetto
     *use,determinesoneaccordingthefieldtype.
     *
     *@private
     *@param{string}viewType
     *@param{Object}field
     *@param{Object}attrs
     *@returns{function|null}AbstractFieldspecializationClass
     */
    _getFieldWidgetClass:function(viewType,field,attrs){
        varFieldWidget;
        if(attrs.widget){
            FieldWidget=fieldRegistryOwl.getAny([viewType+"."+attrs.widget,attrs.widget])||
                fieldRegistry.getAny([viewType+"."+attrs.widget,attrs.widget]);
            if(!FieldWidget){
                console.warn("Missingwidget:",attrs.widget,"forfield",attrs.name,"oftype",field.type);
            }
        }elseif(viewType==='kanban'&&field.type==='many2many'){
            //wewanttodisplaythewidgetmany2manytagsinkanbanevenifit
            //isnotspecifiedintheview
            FieldWidget=fieldRegistry.get('kanban.many2many_tags');
        }
        returnFieldWidget||
            fieldRegistryOwl.getAny([viewType+"."+field.type,field.type,"abstract"])||
            fieldRegistry.getAny([viewType+"."+field.type,field.type,"abstract"]);
    },
    /**
     *Insomecases,wealreadyhaveapreloadedrecord
     *
     *@override
     *@private
     *@returns{Promise}
     */
    _loadData:asyncfunction(model){
        if(this.recordID){
            //AddthefieldsInfoofthecurrentviewtothegivenrecordID,
            //asitwillbesharedbetweentwoviews,anditmustbeableto
            //handlechangesonfieldsthatareonlyonthisview.
            awaitmodel.addFieldsInfo(this.recordID,{
                fields:this.fields,
                fieldInfo:this.fieldsInfo[this.viewType],
                viewType:this.viewType,
            });

            varrecord=model.get(this.recordID);
            varviewType=this.viewType;
            varviewFields=Object.keys(record.fieldsInfo[viewType]);
            varfieldNames=_.difference(viewFields,Object.keys(record.data));
            varfieldsInfo=record.fieldsInfo[viewType];

            //Supposethatinaformview,thereisanx2manylistviewwith
            //afieldF,andthatFisalsodisplayedinthex2manyformview.
            //Inthiscase,Fisrepresentedinrecord.data(asitisknownby
            //thex2manylistview),buttheloadedinformationmaynotsuffice
            //intheformview(e.g.iffieldisamany2manylistintheform
            //view,orifitisdisplayedbyawidgetrequiringspecialData).
            //Sowhenthishappens,FisaddedtothelistoffieldNamestofetch.
            _.each(viewFields,(name)=>{
                if(!_.contains(fieldNames,name)){
                    varfieldType=record.fields[name].type;
                    varfieldInfo=fieldsInfo[name];

                    //SpecialDatacase:fieldrequiresspecialDatathathaven't
                    //beenfetchedyet.
                    if(fieldInfo.Widget){
                        varrequiresSpecialData=fieldInfo.Widget.prototype.specialData;
                        if(requiresSpecialData&&!(nameinrecord.specialData)){
                            fieldNames.push(name);
                            return;
                        }
                    }

                    //X2Manycase:fieldisanx2manydisplayedasalistor
                    //kanbanview,buttherelatedfieldshaven'tbeenloadedyet.
                    if((fieldType==='one2many'||fieldType==='many2many')){
                        if(!('fieldsInfo'inrecord.data[name])){
                            fieldNames.push(name);
                        }else{
                            varx2mFieldInfo=record.fieldsInfo[this.viewType][name];
                            varviewType=x2mFieldInfo.viewType||x2mFieldInfo.mode;
                            varknownFields=Object.keys(record.data[name].fieldsInfo[record.data[name].viewType]||{});
                            varnewFields=Object.keys(record.data[name].fieldsInfo[viewType]||{});
                            if(_.difference(newFields,knownFields).length){
                                fieldNames.push(name);
                            }

                            if(record.data[name].viewType==='default'){
                                //Usecase:x2many(tags)inx2manylistviews
                                //Whenopeningthex2manyrecordformview,the
                                //x2manywillbereloadedbutitmaynothave
                                //thesamefields(ex:tagsinlistandlistin
                                //form)soweneedtomergethefieldsInfoto
                                //avoidlosingtheinitialfields(display_name)
                                varfieldViews=fieldInfo.views||fieldInfo.fieldsInfo||{};
                                vardefaultFieldInfo=record.data[name].fieldsInfo.default;
                                _.each(fieldViews,function(fieldView){
                                    _.each(fieldView.fieldsInfo,function(x2mFieldInfo){
                                        _.defaults(x2mFieldInfo,defaultFieldInfo);
                                    });
                                });
                            }
                        }
                    }
                    //Many2one:contextisnotthesamebetweenthedifferentviews
                    //thismeanstheresultofaname_getcoulddiffer
                    if(fieldType==='many2one'){
                        if(JSON.stringify(record.data[name].context)!==
                                JSON.stringify(fieldInfo.context)){
                            fieldNames.push(name);
                        }
                    }
                }
            });

            vardef;
            if(fieldNames.length){
                if(model.isNew(record.id)){
                    def=model.generateDefaultValues(record.id,{
                        fieldNames:fieldNames,
                        viewType:viewType,
                    });
                }else{
                    def=model.reload(record.id,{
                        fieldNames:fieldNames,
                        keepChanges:true,
                        viewType:viewType,
                    });
                }
            }
            returnPromise.resolve(def).then(function(){
                consthandle=record.id;
                return{state:model.get(handle),handle};
            });
        }
        returnthis._super.apply(this,arguments);
    },
    /**
     *Traversesthearchandcalls'_processNode'oneachofitsnodes.
     *
     *@private
     *@param{Object}archaparsedarch
     *@param{Object}fvthefieldsViewObject,inwhich_processNodecan
     *  accessandaddinformation(likethefields'attributesinthearch)
     */
    _processArch:function(arch,fv){
        varself=this;
        utils.traverse(arch,function(node){
            returnself._processNode(node,fv);
        });
    },
    /**
     *Processesafieldnode,inparticular,putaflagonthefieldtogive
     *specialdirectivestotheBasicModel.
     *
     *@private
     *@param{string}viewType
     *@param{Object}field-thefieldproperties
     *@param{Object}attrs-thefieldattributes(fromthexml)
     *@returns{Object}attrs
     */
    _processField:function(viewType,field,attrs){
        varself=this;
        attrs.Widget=this._getFieldWidgetClass(viewType,field,attrs);

        //processdecorationattributes
        _.each(attrs,function(value,key){
            if(key.startsWith('decoration-')){
                attrs.decorations=attrs.decorations||[];
                attrs.decorations.push({
                    name:key,
                    expression:pyUtils._getPyJSAST(value),
                });
            }
        });

        if(!_.isObject(attrs.options)){//parentarchcouldhavealreadybeenprocessed(TODOthisshouldnothappen)
            attrs.options=attrs.options?pyUtils.py_eval(attrs.options):{};
        }

        if(attrs.on_change&&attrs.on_change!=="0"&&!field.onChange){
            field.onChange="1";
        }

        //therelationaldataofinvisiblerelationalfieldsshouldnotbe
        //fetched(e.g.name_getsofinvisiblemany2ones),atleastthosethat
        //arealwaysinvisible.
        //theinvisibleattributeofafieldissupposedtobestatic("1"in
        //general),butnottotallyasitmayusekeysofthecontext
        //("context.get('some_key')").Itisevaluatedserver-side,andthe
        //resultisputinsidethemodifiersasavalueofthe'(column_)invisible'
        //key,andtherawvalueisleftintheinvisibleattribute(itisused
        //indebugmodeforinformationalpurposes).
        //thisshouldchange,forinstancetheservermightsettheevaluated
        //valueininvisible,whichcouldthenbeseenasstaticbytheclient,
        //andaddanotherkeyindebugmodecontainingtherawvalue.
        //fornow,welookinsidethemodifiersandconsiderthevalueonlyif
        //itisstatic(===true),
        if(attrs.modifiers.invisible===true||attrs.modifiers.column_invisible===true){
            attrs.__no_fetch=true;
        }

        if(!_.isEmpty(field.views)){
            //processtheinnerfields_viewaswelltofindthefieldstheyuse.
            //registerthosefields'descriptiondirectlyontheview.
            //forthoseinnerviews,thelistofallfieldsisn'tnecessary,so
            //basicallythefield_nameswillbethekeysofthefieldsobj.
            //don'tuse_toiterateonfieldsincasethereisa'length'field,
            //as_doesn'tbehavecorrectlywhenthereisalengthkeyintheobject
            attrs.views={};
            _.each(field.views,function(innerFieldsView,viewType){
                viewType=viewType==='tree'?'list':viewType;
                attrs.views[viewType]=self._processFieldsView(innerFieldsView,viewType);
            });
        }

        attrs.views=attrs.views||{};

        //Keepcompatibilitywith'tree'syntax
        attrs.mode=attrs.mode==='tree'?'list':attrs.mode;
        if(!attrs.views.list&&attrs.views.tree){
            attrs.views.list=attrs.views.tree;
        }

        if(field.type==='one2many'||field.type==='many2many'){
            if(attrs.Widget.prototype.useSubview){
                varmode=attrs.mode;
                if(!mode){
                    if(attrs.views.list&&!attrs.views.kanban){
                        mode='list';
                    }elseif(!attrs.views.list&&attrs.views.kanban){
                        mode='kanban';
                    }else{
                        mode='list,kanban';
                    }
                }
                if(mode.indexOf(',')!==-1){
                    mode=config.device.isMobile?'kanban':'list';
                }
                attrs.mode=mode;
                if(modeinattrs.views){
                    varview=attrs.views[mode];
                    this._processSubViewAttrs(view,attrs);
                }
            }
            if(attrs.Widget.prototype.fieldsToFetch){
                attrs.viewType='default';
                attrs.relatedFields=_.extend({},attrs.Widget.prototype.fieldsToFetch);
                attrs.fieldsInfo={
                    default:_.mapObject(attrs.Widget.prototype.fieldsToFetch,function(){
                        return{};
                    }),
                };
                if(attrs.options.color_field){
                    //usedbym2mtags
                    attrs.relatedFields[attrs.options.color_field]={type:'integer'};
                    attrs.fieldsInfo.default[attrs.options.color_field]={};
                }
            }
        }

        if(attrs.Widget.prototype.fieldDependencies){
            attrs.fieldDependencies=attrs.Widget.prototype.fieldDependencies;
        }

        returnattrs;
    },
    /**
     *Overridestoprocessthefields,andgeneratefieldsInfowhichcontains
     *thedescriptionofthefieldsinview,withtheirattrsinthearch.
     *
     *@override
     *@private
     *@param{Object}fieldsView
     *@param{string}fieldsView.arch
     *@param{Object}fieldsView.fields
     *@param{string}[viewType]bydefault,this.viewType
     *@returns{Object}theprocessedfieldsViewwithextrakey'fieldsInfo'
     */
    _processFieldsView:function(fieldsView,viewType){
        varfv=this._super.apply(this,arguments);

        viewType=viewType||this.viewType;
        fv.type=viewType;
        fv.fieldsInfo=Object.create(null);
        fv.fieldsInfo[viewType]=Object.create(null);

        this._processArch(fv.arch,fv);

        returnfv;
    },
    /**
     *Processesanodeofthearch(mainlynodeswithtagname'field').Can
     *beoverriddentohandleothertagnames.
     *
     *@private
     *@param{Object}node
     *@param{Object}fvthefieldsView
     *@param{Object}fv.fieldsInfo
     *@param{Object}fv.fieldsInfo[viewType]fieldsInfoofthecurrentviewType
     *@param{Object}fv.viewFieldstheresultofafields_getextendwiththe
     *  fieldsreturnedwiththefields_view_getforthecurrentviewType
     *@param{string}fv.viewType
     *@returns{boolean}falseiffsubnodesmustnotbevisited.
     */
    _processNode:function(node,fv){
        if(typeofnode==='string'){
            returnfalse;
        }
        if(!_.isObject(node.attrs.modifiers)){
            node.attrs.modifiers=node.attrs.modifiers?JSON.parse(node.attrs.modifiers):{};
        }
        if(!_.isObject(node.attrs.options)&&node.tag==='button'){
            node.attrs.options=node.attrs.options?JSON.parse(node.attrs.options):{};
        }
        if(node.tag==='field'){
            varviewType=fv.type;
            varfieldsInfo=fv.fieldsInfo[viewType];
            varfields=fv.viewFields;
            fieldsInfo[node.attrs.name]=this._processField(viewType,
                fields[node.attrs.name],node.attrs?_.clone(node.attrs):{});

            if(fieldsInfo[node.attrs.name].fieldDependencies){
                vardeps=fieldsInfo[node.attrs.name].fieldDependencies;
                for(vardependency_nameindeps){
                    vardependency_dict={name:dependency_name,type:deps[dependency_name].type};
                    if(!(dependency_nameinfieldsInfo)){
                        fieldsInfo[dependency_name]=_.extend({},dependency_dict,{
                            options:deps[dependency_name].options||{},
                        });
                    }
                    if(!(dependency_nameinfields)){
                        fields[dependency_name]=dependency_dict;
                    }

                    if(fv.fields&&!(dependency_nameinfv.fields)){
                        fv.fields[dependency_name]=dependency_dict;
                    }
                }
            }
            returnfalse;
        }
        returnnode.tag!=='arch';
    },
    /**
     *Processesinplacethesubviewattributes(inparticular,
     *`default_order``and`column_invisible`).
     *
     *@private
     *@param{Object}view-thefieldsubview
     *@param{Object}attrs-thefieldattributes(fromthexml)
     */
    _processSubViewAttrs:function(view,attrs){
        vardefaultOrder=view.arch.attrs.default_order;
        if(defaultOrder){
            //processthedefault_order,whichislike'name,iddesc'
            //butweneeditlike[{name:'name',asc:true},{name:'id',asc:false}]
            attrs.orderedBy=_.map(defaultOrder.split(','),function(order){
                order=order.trim().split('');
                return{name:order[0],asc:order[1]!=='desc'};
            });
        }else{
            //ifthereisafieldwithwidget`handle`,thex2many
            //needstobeorderedbythisfieldtocorrectlydisplay
            //therecords
            varhandleField=_.find(view.arch.children,function(child){
                returnchild.attrs&&child.attrs.widget==='handle';
            });
            if(handleField){
                attrs.orderedBy=[{name:handleField.attrs.name,asc:true}];
            }
        }

        attrs.columnInvisibleFields={};
        _.each(view.arch.children,function(child){
            if(child.attrs&&child.attrs.modifiers){
                attrs.columnInvisibleFields[child.attrs.name]=
                    child.attrs.modifiers.column_invisible||false;
            }
        });
    },
});

returnBasicView;

});
