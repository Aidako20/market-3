flectra.define('web.BasicController',function(require){
"usestrict";

/**
 *TheBasicControllerismostlyheretosharecodebetweenviewsthatwilluse
 *aBasicModel(orasubclass). Currently,theBasicViewsaretheform,list
 *andkanbanviews.
 */

varAbstractController=require('web.AbstractController');
varcore=require('web.core');
varDialog=require('web.Dialog');
varFieldManagerMixin=require('web.FieldManagerMixin');
varTranslationDialog=require('web.TranslationDialog');

var_t=core._t;

varBasicController=AbstractController.extend(FieldManagerMixin,{
    events:Object.assign({},AbstractController.prototype.events,{
        'click.o_content':'_onContentClicked',
    }),
    custom_events:_.extend({},AbstractController.prototype.custom_events,FieldManagerMixin.custom_events,{
        discard_changes:'_onDiscardChanges',
        pager_changed:'_onPagerChanged',
        reload:'_onReload',
        resequence_records:'_onResequenceRecords',
        set_dirty:'_onSetDirty',
        load_optional_fields:'_onLoadOptionalFields',
        save_optional_fields:'_onSaveOptionalFields',
        translate:'_onTranslate',
    }),
    /**
     *@override
     *@param{Object}params
     *@param{boolean}params.archiveEnabled
     *@param{boolean}params.confirmOnDelete
     *@param{boolean}params.hasButtons
     */
    init:function(parent,model,renderer,params){
        this._super.apply(this,arguments);
        this.archiveEnabled=params.archiveEnabled;
        this.confirmOnDelete=params.confirmOnDelete;
        this.hasButtons=params.hasButtons;
        FieldManagerMixin.init.call(this,this.model);
        this.mode=params.mode||'readonly';
        //savingDefisusedtoensurethatwealwayswaitforpendingsave
        //operationstocompletebeforecheckingiftherearechangesto
        //discardwhendiscardChangesiscalled
        this.savingDef=Promise.resolve();
        //discardingDefisusedtoensurethatwedon'tasktwicetheuserif
        //hewantstodiscardchanges,when'canBeDiscarded'iscalledseveral
        //times"inparallel"
        this.discardingDef=null;
        this.viewId=params.viewId;
    },
    /**
     *@override
     *@returns{Promise}
     */
    start:asyncfunction(){
        //addclassnametoreflectthe(absenceof)accessrights(usedto
        //correctlydisplaythenocontenthelper)
        this.$el.toggleClass('o_cannot_create',!this.activeActions.create);
        awaitthis._super(...arguments);
    },
    /**
     *CalledeachtimethecontrollerisdettachedintotheDOM
     */
    on_detach_callback(){
        this._super.apply(this,arguments);
        this.renderer.resetLocalState();
    },

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *Determinesifwecandiscardthecurrentchanges.Ifthemodelisnot
     *dirty,thatisnotaproblem.However,ifitisdirty,wehavetoask
     *theuserforconfirmation.
     *
     *@override
     *@param{string}[recordID]-defaulttomainrecordID
     *@returns{Promise<boolean>}
     *         resolvedifcanbediscarded,abooleanvalueisgiventotells
     *         ifthereissomethingtodiscardornot
     *         rejectedotherwise
     */
    canBeDiscarded:function(recordID){
        varself=this;
        if(this.discardingDef){
            //discarddialogisalreadyopen
            returnthis.discardingDef;
        }
        if(!this.isDirty(recordID)){
            returnPromise.resolve(false);
        }

        varmessage=_t("Therecordhasbeenmodified,yourchangeswillbediscarded.Doyouwanttoproceed?");
        this.discardingDef=newPromise(function(resolve,reject){
            vardialog=Dialog.confirm(self,message,{
                title:_t("Warning"),
                confirm_callback:()=>{
                    resolve(true);
                    self.discardingDef=null;
                },
                cancel_callback:()=>{
                    reject();
                    self.discardingDef=null;
                },
            });
            dialog.on('closed',self.discardingDef,reject);
        });
        returnthis.discardingDef;
    },
    /**
     *Asktherendererifallassociatedfieldwidgetareinavalidstatefor
     *saving(validvalueandnon-emptyvalueforrequiredfields).Ifthisis
     *notthecase,thisnotifiestheuserwithawarningcontainingthenames
     *oftheinvalidfields.
     *
     *Note:changingthestyleofinvalidfieldsistherenderer'sjob.
     *
     *@param{string}[recordID]-defaulttomainrecordID
     *@return{boolean}
     */
    canBeSaved:function(recordID){
        varfieldNames=this.renderer.canBeSaved(recordID||this.handle);
        if(fieldNames.length){
            this._notifyInvalidFields(fieldNames);
            returnfalse;
        }
        returntrue;
    },
    /**
     *Waitsforthemutextobeunlockedandforchangestobesaved,then
     *calls_.discardChanges.
     *Thisensuresthattheconfirmdialogisn'tdisplayeddirectlyifthereis
     *apending'write'rpc.
     *
     *@see_.discardChanges
     */
    discardChanges:function(recordID,options){
        returnPromise.all([this.mutex.getUnlockedDef(),this.savingDef])
            .then(this._discardChanges.bind(this,recordID||this.handle,options));
    },
    /**
     *Methodthatwillbeoverriddenbytheviewswiththeabilitytohaveselectedids
     *
     *@returns{Array}
     */
    getSelectedIds:function(){
        return[];
    },
    /**
     *ReturnstrueiffthegivenrecordID(orthemainrecordID)isdirty.
     *
     *@param{string}[recordID]-defaulttomainrecordID
     *@returns{boolean}
     */
    isDirty:function(recordID){
        returnthis.model.isDirty(recordID||this.handle);
    },
    /**
     *SavestherecordwhoseIDisgivenifnecessary(@see_saveRecord).
     *
     *@param{string}[recordID]-defaulttomainrecordID
     *@param{Object}[options]
     *@returns{Promise}
     *       Resolvedwiththelistoffieldnames(whosevaluehasbeenmodified)
     *       Rejectediftherecordcan'tbesaved
     */
    saveRecord:function(recordID,options){
        varself=this;
        //Somefieldwidgetscan'tdetect(all)theirchangesimmediatelyor
        //mayhavetovalidatethembeforenotifyingthem,soweaskthemto
        //committheircurrentvaluebeforesaving.Thishastobedoneoutside
        //ofthemutexprotectionofsavingbecausecommitChangeswilltrigger
        //changesandthesearealsoprotected.However,wemustwaitforthe
        //mutextobeidletoensurethatonchangeRPCsreturnedbeforeasking
        //fieldwidgetstocommittheirvalue(andvalidateit,forinstance
        //forone2manywithrequiredfields).Sotheactualsavinghastobe
        //doneafterthesechanges.AlsothecommitChangesoperationmightnot
        //besynchronousforotherreason(e.g.thex2mfieldswillaskthe
        //userifsomediscardinghastobemade).Thisoperationmustalsobe
        //mutex-protectedascommitChangesfunctionofx2mhastobeawareof
        //allfinalchangesmadetoarow.
        varunlockedMutex=this.mutex.getUnlockedDef()
            .then(function(){
                returnself.renderer.commitChanges(recordID||self.handle);
            })
            .then(function(){
                returnself.mutex.exec(self._saveRecord.bind(self,recordID,options));
            });
        this.savingDef=newPromise(function(resolve){
            unlockedMutex.then(resolve).guardedCatch(resolve);
        });

        returnunlockedMutex;
    },
    /**
     *@override
     *@returns{Promise}
     */
    update:asyncfunction(params,options){
        this.mode=params.mode||this.mode;
        returnthis._super(params,options);
    },
    /**
     *@override
     */
    reload:function(params){
        if(params&&params.controllerState){
            if(params.controllerState.currentId){
                params.currentId=params.controllerState.currentId;
            }
            params.ids=params.controllerState.resIds;
        }
        returnthis._super.apply(this,arguments);
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *Doesthenecessaryactionwhentryingto"abandon"agivenrecord(e.g.
     *whentryingtomakeanewrecordreadonlywithouthavingsavedit).By
     *default,iftheabandonedrecordisthemainviewone,theonlypossible
     *actionistoleavethecurrentview.Otherwise,itisax2mline,askthe
     *modeltoremoveit.
     *
     *@private
     *@param{string}[recordID]-defaulttomainrecordID
     */
    _abandonRecord:function(recordID){
        recordID=recordID||this.handle;
        if(recordID===this.handle){
            this.trigger_up('history_back');
        }else{
            this.model.removeLine(recordID);
        }
    },
    /**
     *WeoverrideapplyChanges(fromthefieldmanagermixin)toprotectit
     *withamutex.
     *
     *@override
     */
    _applyChanges:function(dataPointID,changes,event){
        var_super=FieldManagerMixin._applyChanges.bind(this);
        returnthis.mutex.exec(function(){
            return_super(dataPointID,changes,event);
        });
    },
    /**
     *Archivethecurrentselection
     *
     *@private
     *@param{number[]}ids
     *@param{boolean}archive
     *@returns{Promise}
     */
    _archive:asyncfunction(ids,archive){
        if(ids.length===0){
            returnPromise.resolve();
        }
        if(archive){
            awaitthis.model.actionArchive(ids,this.handle);
        }else{
            awaitthis.model.actionUnarchive(ids,this.handle);
        }
        returnthis.update({},{reload:false});
    },
    /**
     *Whentheuserclicksona'actionbutton',thisfunctiondetermineswhat
     *shouldhappen.
     *
     *@private
     *@param{Object}attrstheattrsofthebuttonclicked
     *@param{Object}[record]thecurrentstateoftheview
     *@returns{Promise}
     */
    _callButtonAction:function(attrs,record){
        record=record||this.model.get(this.handle);
        constactionData=Object.assign({},attrs,{
            context:record.getContext({additionalContext:attrs.context||{}})
        });
        constrecordData={
            context:record.getContext(),
            currentID:record.data.id,
            model:record.model,
            resIDs:record.res_ids,
        };
        returnthis._executeButtonAction(actionData,recordData);
    },
    /**
     *Calledbythefieldmanagermixintoconfirmthatachangejustoccured
     *(afterthatpotentialonchangeshavebeenapplied).
     *
     *Basically,thisonlyrelaysthenotificationtotherendererwiththe
     *newstate.
     *
     *@param{string}id-theidofoneoftheview'srecords
     *@param{string[]}fields-thechangedfields
     *@param{FlectraEvent}e-theeventthattriggeredthechange
     *@returns{Promise}
     */
    _confirmChange:function(id,fields,e){
        if(e.name==='discard_changes'&&e.target.reset){
            //thetargetofthediscardeventisafieldwidget. Inthat
            //case,wesimplywanttoresetthespecificfieldwidget,
            //notthefullview
            return e.target.reset(this.model.get(e.target.dataPointID),e,true);
        }

        varstate=this.model.get(this.handle);
        returnthis.renderer.confirmChange(state,id,fields,e);
    },
    /**
     *Asktheusertoconfirmhewantstosavetherecord
     *@private
     */
    _confirmSaveNewRecord:function(){
        varself=this;
        vardef=newPromise(function(resolve,reject){
            varmessage=_t("Youneedtosavethisnewrecordbeforeeditingthetranslation.Doyouwanttoproceed?");
            vardialog=Dialog.confirm(self,message,{
                title:_t("Warning"),
                confirm_callback:resolve.bind(self,true),
                cancel_callback:reject,
            });
            dialog.on('closed',self,reject);
        });
        returndef;
    },
    /**
     *Deleterecords(andaskforconfirmationifnecessary)
     *
     *@param{string[]}idslistoflocalrecordids
     */
    _deleteRecords:function(ids){
        varself=this;
        functiondoIt(){
            returnself.model
                .deleteRecords(ids,self.modelName)
                .then(self._onDeletedRecords.bind(self,ids));
        }
        if(this.confirmOnDelete){
            constmessage=ids.length>1?
                            _t("Areyousureyouwanttodeletetheserecords?"):
                            _t("Areyousureyouwanttodeletethisrecord?");
            Dialog.confirm(this,message,{confirm_callback:doIt});
        }else{
            doIt();
        }
    },
    /**
     *Disablesbuttonssothattheycan'tbeclickedanymore.
     *
     *@private
     */
    _disableButtons:function(){
        if(this.$buttons){
            this.$buttons.find('button').attr('disabled',true);
        }
    },
    /**
     *DiscardsthechangesmadetotherecordwhoseIDisgiven,ifnecessary.
     *Automaticallyleavestodefaultmodeforthegivenrecord.
     *
     *@private
     *@param{string}[recordID]-defaulttomainrecordID
     *@param{Object}[options]
     *@param{boolean}[options.readonlyIfRealDiscard=false]
     *       Afterdiscardingrecordchanges,theusualoptionistomakethe
     *       recordreadonly.However,theactionmanagercallsthisfunction
     *       atinappropriatetimesinthecurrentcodeandinthatcase,we
     *       don'twanttogobacktoreadonlyifthereisnothingtodiscard
     *       (e.g.whenswitchingrecordineditmodeinformview,weexpect
     *       thenewrecordtobeineditmodetoo,buttheviewmanagercalls
     *       thisfunctionastheURLchanges...)@todogetridofthiswhen
     *       thewebclient/action_manager'shashchangemechanismisimproved.
     *@param{boolean}[options.noAbandon=false]
     *@returns{Promise}
     */
    _discardChanges:function(recordID,options){
        varself=this;
        recordID=recordID||this.handle;
        options=options||{};
        returnthis.canBeDiscarded(recordID)
            .then(function(needDiscard){
                if(options.readonlyIfRealDiscard&&!needDiscard){
                    return;
                }
                self.model.discardChanges(recordID);
                if(options.noAbandon){
                    return;
                }
                if(self.model.canBeAbandoned(recordID)){
                    self._abandonRecord(recordID);
                    return;
                }
                returnself._confirmSave(recordID);
            });
    },
    /**
     *Enablesbuttonssotheycanbeclickedagain.
     *
     *@private
     */
    _enableButtons:function(){
        if(this.$buttons){
            this.$buttons.find('button').removeAttr('disabled');
        }
    },
    /**
     *Executestheactionassociatedwithabutton
     *
     *@private
     *@param{Object}actionData:thedescriptoroftheaction
     *@param{string}actionData.type:thebutton'saction'stype,accepts"object"or"action"
     *@param{string}actionData.name:thebutton'saction'sname
     *   eitherthemodelmethod'snamefortype"object"
     *   ortheaction'sidindatabase,orxml_id
     *@param{string}actionData.context:theaction'sexecutioncontext
     *
     *@param{Object}recordData:basicinformationonthecurrentrecord(s)
     *@param{number[]}recordData.resIDs:recordids:
     *    -onwhichanobjectmethodapplies
     *    -thatwillbeusedasactive_idstoloadanaction
     *@param{string}recordData.model:modelname
     *@param{Object}recordData.context:therecords'context,willbeusedtoload
     *    theaction,andmergedintoactionData.contextatexecutiontime
     *
     *@returns{Promise}
     */
    async_executeButtonAction(actionData,recordData){
        constprom=newPromise((resolve,reject)=>{
            this.trigger_up('execute_action',{
                action_data:actionData,
                env:recordData,
                on_closed:()=>this.isDestroyed()?Promise.resolve():this.reload(),
                on_success:resolve,
                on_fail:()=>this.update({},{reload:false}).then(reject).guardedCatch(reject)
            });
        });
        returnthis.alive(prom);
    },
    /**
     *OverridetoaddthecurrentrecordID(currentId)andthelistofids
     *(resIds)inthecurrentdataPointtotheexportedstate.
     *
     *@override
     */
    exportState:function(){
        varstate=this._super.apply(this,arguments);
        varenv=this.model.get(this.handle,{env:true});
        return_.extend(state,{
            currentId:env.currentId,
            resIds:env.ids,
        });
    },
    /**
     *Computetheoptionalfieldslocalstoragekeyusingthegivenparts.
     *
     *@param{Object}keyParts
     *@param{string}keyParts.viewTypeviewtype
     *@param{string}[keyParts.relationalField]nameofthefieldwithsubview
     *@param{integer}[keyParts.subViewId]subviewid
     *@param{string}[keyParts.subViewType]typeofthesubview
     *@param{Object}keyParts.fieldsfields
     *@param{string}keyParts.fields.namefieldname
     *@param{string}keyParts.fields.typefieldtype
     *@returns{string}localstoragekeyforoptionalfieldsinthisview
     *@private
     */
    _getOptionalFieldsLocalStorageKey:function(keyParts){
        keyParts.model=this.modelName;
        keyParts.viewType=this.viewType;
        keyParts.viewId=this.viewId;

        varparts=[
            'model',
            'viewType',
            'viewId',
            'relationalField',
            'subViewType',
            'subViewId',
        ];

        varviewIdentifier=parts.reduce(function(identifier,partName){
            if(partNameinkeyParts){
                returnidentifier+','+keyParts[partName];
            }
            returnidentifier;
        },'optional_fields');

        viewIdentifier=
            keyParts.fields.sort(this._nameSortComparer)
                           .reduce(function(identifier,field){
                                returnidentifier+','+field.name;
                            },viewIdentifier);

        returnviewIdentifier;
    },
    /**
     *Returntheparams(currentMinimum,limitandsize)topasstothepager,
     *accordingtothecurrentstate.
     *
     *@private
     *@returns{Object}
     */
    _getPagingInfo:function(state){
        constisGrouped=state.groupedBy&&state.groupedBy.length;
        return{
            currentMinimum:(isGrouped?state.groupsOffset:state.offset)+1,
            limit:isGrouped?state.groupsLimit:state.limit,
            size:isGrouped?state.groupsCount:state.count,
        };
    },
    /**
     *ReturnthenewactionMenusprops.
     *
     *@override
     *@private
     */
    _getActionMenuItems:function(state){
        return{
            activeIds:this.getSelectedIds(),
            context:state.getContext(),
        };
    },
    /**
     * Sortfunctionusedtosortthefieldsbynames,tocomputetheoptionalfieldskeys
     *
     * @param{Object}left
     * @param{Object}right
     * @private
      */
    _nameSortComparer:function(left,right){
        returnleft.name<right.name?-1:1;
    },
    /**
     *Helperfunctiontodisplayawarningthatsomefieldshaveaninvalid
     *value.Thisisusedwhenasaveoperationcannotbecompleted.
     *
     *@private
     *@param{string[]}invalidFields-listoffieldnames
     */
    _notifyInvalidFields:function(invalidFields){
        varrecord=this.model.get(this.handle,{raw:true});
        varfields=record.fields;
        varwarnings=invalidFields.map(function(fieldName){
            varfieldStr=fields[fieldName].string;
            return_.str.sprintf('<li>%s</li>',_.escape(fieldStr));
        });
        warnings.unshift('<ul>');
        warnings.push('</ul>');
        this.do_warn(_t("Invalidfields:"),warnings.join(''));
    },
    /**
     *Hookmethod,calledwhenrecord(s)hasbeendeleted.
     *
     *@see_deleteRecord
     *@param{string[]}idslistofdeletedids(basicmodellocalhandles)
     */
    _onDeletedRecords:function(ids){
        this.update({});
    },
    /**
     *SavestherecordwhoseIDisgiven,ifnecessary.Automaticallyleaves
     *editmodeforthegivenrecord,unlesstoldotherwise.
     *
     *@param{string}[recordID]-defaulttomainrecordID
     *@param{Object}[options]
     *@param{boolean}[options.stayInEdit=false]
     *       iftrue,leavetherecordineditmodeaftersave
     *@param{boolean}[options.reload=true]
     *       iftrue,reloadtherecordafter(real)save
     *@param{boolean}[options.savePoint=false]
     *       iftrue,therecordwillonlybe'locally'saved:itschanges
     *       willmovefromthe_changeskeytothedatakey
     *@returns{Promise}
     *       Resolvedwiththelistoffieldnames(whosevaluehasbeenmodified)
     *       Rejectediftherecordcan'tbesaved
     */
    _saveRecord:function(recordID,options){
        recordID=recordID||this.handle;
        options=_.defaults(options||{},{
            stayInEdit:false,
            reload:true,
            savePoint:false,
        });

        //Checkiftheviewisinavalidstateforsaving
        //Note:itisthemodel'sjobtodonothingifthereisnothingtosave
        if(this.canBeSaved(recordID)){
            varself=this;
            varsaveDef=this.model.save(recordID,{//Savethenleaveeditmode
                reload:options.reload,
                savePoint:options.savePoint,
                viewType:options.viewType,
            });
            if(!options.stayInEdit){
                saveDef=saveDef.then(function(fieldNames){
                    vardef=fieldNames.length?self._confirmSave(recordID):self._setMode('readonly',recordID);
                    returndef.then(function(){
                        returnfieldNames;
                    });
                });
            }
            returnsaveDef;
        }else{
            returnPromise.reject("SaveRecord:this.canBeSaveisfalse");//Cannotbesaved
        }
    },
    /**
     *ChangethemodefortherecordassociatedtothegivenID.
     *IfthegivenrecordIDistheview'smainone,thenthewholeviewmodeis
     *changed(@seeBasicController.update).
     *
     *@private
     *@param{string}mode-'readonly'or'edit'
     *@param{string}[recordID]
     *@returns{Promise}
     */
    _setMode:function(mode,recordID){
        if((recordID||this.handle)===this.handle){
            returnthis.update({mode:mode},{reload:false}).then(function(){
                //necessarytoallowallsubwidgetstousetheirdimensionsin
                //layoutrelatedactivities,suchasautoresizeonfieldtexts
                core.bus.trigger('DOM_updated');
            });
        }
        returnPromise.resolve();
    },
    /**
     *Tooverridesuchthatitreturnstrueifftheprimaryactionbuttonmust
     *bouncewhentheuserclickedonthegivenelement,accordingtothe
     *currentstateoftheview.
     *
     *@private
     *@param{HTMLElement}elementthenodetheuserclickedon
     *@returns{boolean}
     */
    _shouldBounceOnClick:function(/*element*/){
        returnfalse;
    },
    /**
     *Helpermethod,togetthecurrentenvironmentvariablesfromthemodel
     *andnotifiesthecomponentchain(bybubblinganeventup)
     *
     *@private
     *@param{Object}[newProps={}]
     */
    _updateControlPanel:function(newProps={}){
        conststate=this.model.get(this.handle);
        constprops=Object.assign(newProps,{
            actionMenus:this._getActionMenuItems(state),
            pager:this._getPagingInfo(state),
            title:this.getTitle(),
        });
        returnthis.updateControlPanel(props);
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *Calledwhentheuserclicksonthe'content'partofthecontroller
     *(typicallytherendererarea).Makesthefirstprimarybuttoninthe
     *controlpanelbounce,insomesituations(see_shouldBounceOnClick).
     *
     *@private
     *@param{MouseEvent}ev
     */
    _onContentClicked(ev){
        if(this.$buttons&&this._shouldBounceOnClick(ev.target)){
            this.$buttons.find('.btn-primary:visible:first').flectraBounce();
        }
    },
    /**
     *Calledwhenalistelementaskstodiscardthechangesmadetooneof
     *itsrows. Itcanhappenwithax2many(ifweareinaformview)orwith
     *alistview.
     *
     *@private
     *@param{FlectraEvent}ev
     */
    _onDiscardChanges:function(ev){
        varself=this;
        ev.stopPropagation();
        varrecordID=ev.data.recordID;
        this._discardChanges(recordID)
            .then(function(){
                //TODOthiswilltelltherenderertorerenderthewidgetthat
                //askedforthediscardbutwillunfortunatelylosetheclick
                //madeonanotherrowifany
                self._confirmChange(recordID,[ev.data.fieldName],ev)
                    .then(ev.data.onSuccess).guardedCatch(ev.data.onSuccess);
            })
            .guardedCatch(ev.data.onFailure);
    },
    /**
     *Forcestosavedirectlythechangesifthecontrollerisinreadonly,
     *becauseinthatcasethechangescomefromwidgetsthatareeditableeven
     *inreadonly(e.g.Priority).
     *
     *@private
     *@param{FlectraEvent}ev
     */
    _onFieldChanged:function(ev){
        if(this.mode==='readonly'&&!('force_save'inev.data)){
            ev.data.force_save=true;
        }
        FieldManagerMixin._onFieldChanged.apply(this,arguments);
    },
    /**
     *@private
     *@param{FlectraEvent}ev
     */
    _onPagerChanged:asyncfunction(ev){
        ev.stopPropagation();
        const{currentMinimum,limit}=ev.data;
        conststate=this.model.get(this.handle,{raw:true});
        constreloadParams=state.groupedBy&&state.groupedBy.length?{
                groupsLimit:limit,
                groupsOffset:currentMinimum-1,
            }:{
                limit,
                offset:currentMinimum-1,
            };
        awaitthis.reload(reloadParams);
        //resetthescrollpositiontothetoponpagechangedonly
        if(state.limit===limit){
            this.trigger_up('scrollTo',{top:0});
        }
    },
    /**
     *Whenareloadeventtriggersup,weneedtoreloadthefullview.
     *Forexample,afteraformviewdialogsavedsomedata.
     *
     *@todo:renamedb_idintohandle
     *
     *@param{FlectraEvent}ev
     *@param{Object}ev.data
     *@param{string}[ev.data.db_id]handleofthedatatoreloadand
     *  re-render(reloadthewholeformbydefault)
     *@param{string[]}[ev.data.fieldNames]listoftherecord'sfieldsto
     *  reload
     *@param{Function}[ev.data.onSuccess]callbackexecutedafterreloadisresolved
     *@param{Function}[ev.data.onFailure]callbackexecutedwhenreloadisrejected
     */
    _onReload:function(ev){
        ev.stopPropagation();//preventothercontrollersfromhandlingthisrequest
        vardata=ev&&ev.data||{};
        varhandle=data.db_id;
        varprom;
        if(handle){
            //reloadtherelationalfieldgivenitsdb_id
            prom=this.model.reload(handle).then(this._confirmSave.bind(this,handle));
        }else{
            //nodb_idgiven,soreloadthemainrecord
            prom=this.reload({
                fieldNames:data.fieldNames,
                keepChanges:data.keepChanges||false,
            });
        }
        prom.then(ev.data.onSuccess).guardedCatch(ev.data.onFailure);
    },
    /**
     *Resequencerecordsinthegivenorder.
     *
     *@private
     *@param{FlectraEvent}ev
     *@param{string[]}ev.data.recordIds
     *@param{integer}ev.data.offset
     *@param{string}ev.data.handleField
     */
    _onResequenceRecords:function(ev){
        ev.stopPropagation();//preventothercontrollersfromhandlingthisrequest
        this.trigger_up('mutexify',{
            action:async()=>{
                letstate=this.model.get(this.handle);
                constresIDs=ev.data.recordIds
                    .map(recordID=>state.data.find(d=>d.id===recordID).res_id);
                constoptions={
                    offset:ev.data.offset,
                    field:ev.data.handleField,
                };
                awaitthis.model.resequence(this.modelName,resIDs,this.handle,options);
                this._updateControlPanel();
                state=this.model.get(this.handle);
                returnthis._updateRendererState(state,{noRender:true});
            },
        });
    },
    /**
     *Loadtheoptionalcolumnssettingsinlocalstorageforthisview
     *
     *@param{FlectraEvent}ev
     *@param{Object}ev.data.keyPartssee_getLocalStorageKey
     *@param{function}ev.data.callbackfunctiontocallwiththeresult
     *@private
     */
    _onLoadOptionalFields:function(ev){
        varres=this.call(
            'local_storage',
            'getItem',
            this._getOptionalFieldsLocalStorageKey(ev.data.keyParts)
        );
        ev.data.callback(res);
    },
    /**
     *Savetheoptionalcolumnssettingsinlocalstorageforthisview
     *
     *@param{FlectraEvent}ev
     *@param{Object}ev.data.keyPartssee_getLocalStorageKey
     *@param{Array<string>}ev.data.optionalColumnsEnabledlistofoptional
     *  fieldnamesthathavebeenenabled
     *@private
     */
    _onSaveOptionalFields:function(ev){
        this.call(
            'local_storage',
            'setItem',
            this._getOptionalFieldsLocalStorageKey(ev.data.keyParts),
            ev.data.optionalColumnsEnabled
        );
    },
    /**
     *@private
     *@param{FlectraEvent}ev
     */
    _onSetDirty:function(ev){
        ev.stopPropagation();//preventothercontrollersfromhandlingthisrequest
        this.model.setDirty(ev.data.dataPointID);
    },
    /**
     *openthetranslationviewforthecurrentfield
     *
     *@private
     *@param{FlectraEvent}ev
     */
    _onTranslate:asyncfunction(ev){
        ev.stopPropagation();

        if(this.model.isNew(ev.data.id)){
            awaitthis._confirmSaveNewRecord();
            varupdatedFields=awaitthis.saveRecord(ev.data.id,{stayInEdit:true});
            awaitthis._confirmChange(ev.data.id,updatedFields,ev);
        }
        varrecord=this.model.get(ev.data.id,{raw:true});
        varres_id=record.res_id||record.res_ids[0];
        varresult=awaitthis._rpc({
            route:'/web/dataset/call_button',
            params:{
                model:'ir.translation',
                method:'translate_fields',
                args:[record.model,res_id,ev.data.fieldName],
                kwargs:{context:record.getContext()},
            }
        });

        this.translationDialog=newTranslationDialog(this,{
            domain:result.domain,
            searchName:result.context.search_default_name,
            fieldName:ev.data.fieldName,
            userLanguageValue:ev.target.value||'',
            dataPointID:record.id,
            isComingFromTranslationAlert:ev.data.isComingFromTranslationAlert,
            isText:result.context.translation_type==='text',
            showSrc:result.context.translation_show_src,
            node:ev.target&&ev.target.__node,
        });
        returnthis.translationDialog.open();
    },
});

returnBasicController;
});
