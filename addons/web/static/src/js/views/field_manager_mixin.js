flectra.define('web.FieldManagerMixin',function(require){
"usestrict";

/**
 *TheFieldManagerMixinisamixin,designedtodotheplumbingbetweenfield
 *widgetsandabasicmodel. Fieldwidgetscanbeusedoutsideofaview. In
 *thatcase,someoneneedstolistentoeventsbubblingupfromthewidgetsand
 *callingthecorrectmethodsonthemodel. Thisisthefield_manager'sjob.
 */

varBasicModel=require('web.BasicModel');
varconcurrency=require('web.concurrency');

varFieldManagerMixin={
    custom_events:{
        field_changed:'_onFieldChanged',
        load:'_onLoad',
        mutexify:'_onMutexify',
    },
    /**
     *AFieldManagerMixincanbeinitializedwithaninstanceofabasicModel.
     *Ifnot,itwillsimplyusesitsown.
     *
     *@param{BasicModel}[model]
     */
    init:function(model){
        this.model=model||newBasicModel(this);
        this.mutex=newconcurrency.Mutex();
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *Applychangesbynotifyingthebasicmodel,thensavingthedataif
     *necessary,andfinally,confirmingthechangestotheUI.
     *
     *@todofindawaytoremoveugly3rdargument...
     *
     *@param{string}dataPointID
     *@param{Object}changes
     *@param{FlectraEvent}event
     *@returns{Promise}resolveswhenthechangehasbeendone,andtheUI
     *  updated
     */
    _applyChanges:function(dataPointID,changes,event){
        varself=this;
        varoptions=_.pick(event.data,'context','doNotSetDirty','notifyChange','viewType','allowWarning');
        returnthis.model.notifyChanges(dataPointID,changes,options)
            .then(function(result){
                if(event.data.force_save){
                    returnself.model.save(dataPointID).then(function(){
                        returnself._confirmSave(dataPointID);
                    }).guardedCatch(function(){
                        returnself._rejectSave(dataPointID);
                    });
                }elseif(options.notifyChange!==false){
                    returnself._confirmChange(dataPointID,result,event);
                }
            });
    },
    /**
     *Thismethodwillbecalledwheneverafieldvaluehaschanged(andhas
     *beenconfirmedbythemodel).
     *
     *@abstract
     *@param{string}idbasicModelIdforthechangedrecord
     *@param{string[]}fieldsthefields(names)thathavebeenchanged
     *@param{FlectraEvent}eventtheeventthattriggeredthechange
     *@returns{Promise}
     */
    _confirmChange:function(id,fields,event){
        returnPromise.resolve();
    },
    /**
     *Thismethodwillbecalledwheneverasavehasbeentriggeredbyachange
     *insomecontrolledfieldvalue. Forexample,whenaprioritywidgetis
     *beingchangedinareadonlyform.
     *
     *@see_onFieldChanged
     *@abstract
     *@param{string}idThebasicModelIDforthesavedrecord
     *@returns{Promise}
     */
    _confirmSave:function(id){
        returnPromise.resolve();
    },
    /**
     *Thismethodwillbecalledwheneverasavehasbeentriggeredbyachange
     *andhasfailed.Forexample,whenastatusbarbuttonisclickedina
     *readonlyformview.
     *
     *@abstract
     *@private
     *@param{string}idThebasicModelIDforthesavedrecord
     *@returns{Deferred}
     */
    _rejectSave:function(id){
        returnPromise.resolve();
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *ThisisthemainjoboftheFMM:decidingwhattodowhenacontrolled
     *fieldchanges. Mostofthetime,itnotifiesthemodelthatachange
     *justoccurred,thenconfirmthechange.
     *
     *@param{FlectraEvent}event
     */
    _onFieldChanged:function(event){
        //incaseoffieldchangedinrelationalrecord(e.g.intheformview
        //ofaone2manysubrecord),thefield_changedeventmustbestoppedas
        //soonasisithandledbyafield_manager(i.e.theoneofthe
        //subrecord'sformview),otherwiseitbubblesuptothemainformview
        //butitsmodeldoesn'thaveanydatarelatedtothegivendataPointID
        event.stopPropagation();
        returnthis._applyChanges(event.data.dataPointID,event.data.changes,event)
            .then(event.data.onSuccess||function(){})
            .guardedCatch(event.data.onFailure||function(){});
    },
    /**
     *Somewidgetsneedtotriggerareloadoftheirdata. Forexample,a
     *one2manywithapagerneedstobeabletofetchthenextpage. Todo
     *that,itcantriggeraloadevent.Thiswillthenaskthemodelto
     *actuallyreloadthedata,thencalltheon_successcallback.
     *
     *@param{FlectraEvent}event
     *@param{number}[event.data.limit]
     *@param{number}[event.data.offset]
     *@param{function}[event.data.on_success]callback
     */
    _onLoad:function(event){
        varself=this;
        event.stopPropagation();//preventotherfieldmanagersfromhandlingthisrequest
        vardata=event.data;
        if(!data.on_success){return;}
        varparams={};
        if('limit'indata){
            params.limit=data.limit;
        }
        if('offset'indata){
            params.offset=data.offset;
        }
        this.mutex.exec(function(){
            returnself.model.reload(data.id,params).then(function(db_id){
                data.on_success(self.model.get(db_id));
            });
        });
    },
    /**
     *@private
     *@param{FlectraEvent}ev
     *@param{function}ev.data.actionthefunctiontoexecuteinthemutex
     */
    _onMutexify:function(ev){
        ev.stopPropagation();//preventotherfieldmanagersfromhandlingthisrequest
        this.mutex.exec(ev.data.action);
    },
};

returnFieldManagerMixin;
});
