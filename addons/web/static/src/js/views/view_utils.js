flectra.define('web.viewUtils',function(require){
"usestrict";

vardom=require('web.dom');
varutils=require('web.utils');

varviewUtils={
    /**
     *ReturnsthevalueofagroupdataPoint,i.e.thevalueofthegroupBy
     *fieldfortherecordsinthatgroup.
     *
     *@param{Object}groupdataPointoftypelist,correspondingtoagroup
     *@param{string}groupByFieldthenameofthegroupByfield
     *@returns{string|integer|false}
     */
    getGroupValue:function(group,groupByField){
        vargroupedByField=group.fields[groupByField];
        switch(groupedByField.type){
            case'many2one':
                returngroup.res_id||false;
            case'selection':
                vardescriptor=_.find(groupedByField.selection,function(option){
                    returnoption[1]===group.value;
                });
                returndescriptor&&descriptor[0];
            case'char':
            case'boolean':
                returngroup.value;
            default:
                returnfalse;//otherfieldtypesarenothandled
        }
    },
    /**
     *Stateswhetherornotthequickcreatefeatureisavailableforthegiven
     *datapoint,dependingonitsgroupByfield.
     *
     *@param{Object}listdataPointoftypelist
     *@returns{Boolean}trueiffthekanbanquickcreatefeatureisavailable
     */
    isQuickCreateEnabled:function(list){
        vargroupByField=list.groupedBy[0]&&list.groupedBy[0].split(':')[0];
        if(!groupByField){
            returnfalse;
        }
        varavailableTypes=['char','boolean','many2one','selection'];
        if(!_.contains(availableTypes,list.fields[groupByField].type)){
            returnfalse;
        }
        returntrue;
    },
    /**
     *@param{string}archviewarch
     *@returns{Object}parsedarch
     */
    parseArch:function(arch){
        vardoc=$.parseXML(arch).documentElement;
        varstripWhitespaces=doc.nodeName.toLowerCase()!=='kanban';
        returnutils.xml_to_json(doc,stripWhitespaces);
    },
    /**
     *Rendersabuttonaccordingtoagivenarchnodeelement.
     *
     *@param{Object}node
     *@param{Object}[options]
     *@param{string}[options.extraClass]
     *@param{boolean}[options.textAsTitle=false]
     *@returns{jQuery}
     */
    renderButtonFromNode:function(node,options){
        varbtnOptions={
            attrs:_.omit(node.attrs,'icon','string','type','attrs','modifiers','options','effect'),
            icon:node.attrs.icon,
        };
        if(options&&options.extraClass){
            varclasses=btnOptions.attrs.class?btnOptions.attrs.class.split(''):[];
            btnOptions.attrs.class=_.uniq(classes.concat(options.extraClass.split(''))).join('');
        }
        varstr=(node.attrs.string||'').replace(/_/g,'');
        if(str){
            if(options&&options.textAsTitle){
                btnOptions.attrs.title=str;
            }else{
                btnOptions.text=str;
            }
        }
        returndom.renderButton(btnOptions);
    },
};

returnviewUtils;

});
