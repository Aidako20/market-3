flectra.define('web.AbstractView',function(require){
"usestrict";

/**
 *Thisisthebaseclassinheritedbyall(JS)views.FlectraJSviewsarethe
 *widgetsusedtodisplayinformationinthemainareaofthewebclient
 *(note:thesearchviewisnota"JSview"inthatsense).
 *
 *Theabstractviewroleistotakeasetoffields,anarch(thexml
 *describingtheviewindb),andsomeparams,andthen,tocreatea
 *controller,arendererandamodel. ThisistheclassicalMVCpattern,but
 *theword'view'hashistoricalsignificanceinFlectracode,sowereplacedthe
 *VinMVCbythe'renderer'word.
 *
 *JSviewsaresupposedtobeusedlikethis:
 *1.instantiateaviewwithsomearch,fieldsandparams
 *2.callthegetControllermethodontheviewinstance.Thisreturnsa
 *   controller(withamodelandarendererassubwidgets)
 *3.appendthecontrollersomewhere
 *
 *Notethatonceacontrollerhasbeeninstantiated,theviewclassisno
 *longeruseful(unlessyouwanttocreateanothercontroller),andwillbe
 *inmostcasediscarded.
 */

constActionModel=require("web/static/src/js/views/action_model.js");
varAbstractModel=require('web.AbstractModel');
varAbstractRenderer=require('web.AbstractRenderer');
varAbstractController=require('web.AbstractController');
constControlPanel=require('web.ControlPanel');
constSearchPanel=require("web/static/src/js/views/search_panel.js");
varmvc=require('web.mvc');
varviewUtils=require('web.viewUtils');

const{Component}=owl;

varFactory=mvc.Factory;

varAbstractView=Factory.extend({
    //namedisplayedinviewswitchers
    display_name:'',
    //indicateswhetherornottheviewismobile-friendly
    mobile_friendly:false,
    //iconisthefont-awesomeicontodisplayintheviewswitcher
    icon:'fa-question',
    //multi_recordisusedtodistinguishviewsdisplayingasinglerecord
    //(e.g.FormView)fromthosethatdisplayseveralrecords(e.g.ListView)
    multi_record:true,
    //viewTypeisthetypeoftheview,like'form','kanban','list'...
    viewType:undefined,
    //determinesifasearchbarisavailable
    withSearchBar:true,
    //determinesthesearchmenusavailableandtheirorders
    searchMenuTypes:['filter','groupBy','favorite'],
    //determinesifacontrolpanelshouldbeinstantiated
    withControlPanel:true,
    //determinesifasearchpanelcouldbeinstantiated
    withSearchPanel:true,
    //determinestheMVCcomponentstouse
    config:_.extend({},Factory.prototype.config,{
        Model:AbstractModel,
        Renderer:AbstractRenderer,
        Controller:AbstractController,
        ControlPanel,
        SearchPanel,
    }),

    /**
     *Theconstructorfunctionissupposedtoset3variables:rendererParams,
     *controllerParamsandloadParams. Thesevalueswillbeusedtoinitialize
     *themodel,rendererandcontrollers.
     *
     *@constructsAbstractView
     *
     *@param{Object}viewInfo
     *@param{Object|string}viewInfo.arch
     *@param{Object}viewInfo.fields
     *@param{Object}viewInfo.fieldsInfo
     *@param{Object}params
     *@param{string}[params.modelName]
     *@param{Object}[params.action={}]
     *@param{Object}[params.context={}]
     *@param{string}[params.controllerID]
     *@param{number}[params.count]
     *@param{number}[params.currentId]
     *@param{Object}[params.controllerState]
     *@param{string}[params.displayName]
     *@param{Array[]}[params.domain=[]]
     *@param{Object[]}[params.dynamicFilters]transmittedtothe
     *  ControlPanel
     *@param{number[]}[params.ids]
     *@param{boolean}[params.isEmbedded=false]
     *@param{Object}[params.searchQuery={}]
     *@param{Object}[params.searchQuery.context={}]
     *@param{Array[]}[params.searchQuery.domain=[]]
     *@param{string[]}[params.searchQuery.groupBy=[]]
     *@param{Object}[params.userContext={}]
     *@param{boolean}[params.useSampleModel]
     *@param{boolean}[params.withControlPanel=AbstractView.prototype.withControlPanel]
     *@param{boolean}[params.withSearchPanel=AbstractView.prototype.withSearchPanel]
     */
    init:function(viewInfo,params){
        this._super.apply(this,arguments);

        varaction=params.action||{};
        params=_.defaults(params,this._extractParamsFromAction(action));

        //ingeneral,thefieldsViewhastobeprocessedbytheView(e.g.the
        //archisastringthatneedstobeparsed);theonlyexceptionisfor
        //inlineformviewsinsideformviews,astheyareprocessedalongside
        //themainview,buttheyareopenedinaFormViewDialogwhich
        //instantiatesanotherFormView(unlikekanbanorlistsubviewsfor
        //whichonlyaRendererisinstantiated)
        if(typeofviewInfo.arch==='string'){
            this.fieldsView=this._processFieldsView(viewInfo);
        }else{
            this.fieldsView=viewInfo;
        }
        this.arch=this.fieldsView.arch;
        this.fields=this.fieldsView.viewFields;
        this.userContext=params.userContext||{};

        //thebooleanparameter'isEmbedded'determinesiftheviewshouldbe
        //consideredasasubview.Fornowthisisonlyusedbythegraph
        //controllerthatappendsa'GroupBy'buttonbesidethe'Measures'
        //buttonwhenthegraphviewisembedded.
        varisEmbedded=params.isEmbedded||false;

        //ThenoContentHelper'smessagecanbeempty,i.e.eitherarealemptystring
        //oranemptyhtmltag.Inbothcases,weconsiderthehelperempty.
        varhelp=params.noContentHelp||"";
        varhtmlHelp=document.createElement("div");
        htmlHelp.innerHTML=help;
        this.rendererParams={
            arch:this.arch,
            isEmbedded:isEmbedded,
            noContentHelp:htmlHelp.innerText.trim()?help:"",
        };

        this.controllerParams={
            actionViews:params.actionViews,
            activeActions:{
                edit:this.arch.attrs.edit?!!JSON.parse(this.arch.attrs.edit):true,
                create:this.arch.attrs.create?!!JSON.parse(this.arch.attrs.create):true,
                delete:this.arch.attrs.delete?!!JSON.parse(this.arch.attrs.delete):true,
                duplicate:this.arch.attrs.duplicate?!!JSON.parse(this.arch.attrs.duplicate):true,
            },
            bannerRoute:this.arch.attrs.banner_route,
            controllerID:params.controllerID,
            displayName:params.displayName,
            isEmbedded:isEmbedded,
            modelName:params.modelName,
            viewType:this.viewType,
        };

        varcontrollerState=params.controllerState||{};
        varcurrentId=controllerState.currentId||params.currentId;
        this.loadParams={
            context:params.context,
            count:params.count||((this.controllerParams.ids!==undefined)&&
                   this.controllerParams.ids.length)||0,
            domain:params.domain,
            modelName:params.modelName,
            res_id:currentId,
            res_ids:controllerState.resIds||params.ids||(currentId?[currentId]:undefined),
        };

        constuseSampleModel='useSampleModel'inparams?
                                params.useSampleModel:
                                !!(this.arch.attrs.sample&&JSON.parse(this.arch.attrs.sample));

        this.modelParams={
            fields:this.fields,
            modelName:params.modelName,
            useSampleModel,
        };
        if(useSampleModel){
            this.modelParams.SampleModel=this.config.Model;
        }

        vardefaultOrder=this.arch.attrs.default_order;
        if(defaultOrder){
            this.loadParams.orderedBy=_.map(defaultOrder.split(','),function(order){
                order=order.trim().split('');
                return{name:order[0],asc:order[1]!=='desc'};
            });
        }
        if(params.searchQuery){
            this._updateMVCParams(params.searchQuery);
        }

        this.withControlPanel=this.withControlPanel&&params.withControlPanel;
        this.withSearchPanel=this.withSearchPanel&&
            this.multi_record&&params.withSearchPanel&&
            !('search_panel'inparams.context&&!params.search_panel);

        constsearchModelParams=Object.assign({},params,{action});
        if(this.withControlPanel||this.withSearchPanel){
            const{arch,fields,favoriteFilters}=params.controlPanelFieldsView||{};
            constarchInfo=ActionModel.extractArchInfo({search:arch},this.viewType);
            constcontrolPanelInfo=archInfo[this.config.ControlPanel.modelExtension];
            constsearchPanelInfo=archInfo[this.config.SearchPanel.modelExtension];
            this.withSearchPanel=this.withSearchPanel&&Boolean(searchPanelInfo);
            Object.assign(searchModelParams,{
                fields,
                favoriteFilters,
                controlPanelInfo,
                searchPanelInfo,
            });
        }
        constsearchModel=this._createSearchModel(searchModelParams);
        this.controllerParams.searchModel=searchModel;
        if(this.controllerParams.controlPanel){
            this.controllerParams.controlPanel.props.searchModel=searchModel;
        }
        if(this.controllerParams.searchPanel){
            this.controllerParams.searchPanel.props.searchModel=searchModel;
        }
    },

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *@param{Object}params
     *@param{Object}extraExtensions
     *@returns{ActionModel}
     */
    _createSearchModel:function(params,extraExtensions){
        //Searchmodel+commonconfig
        const{fields,favoriteFilters,controlPanelInfo,searchPanelInfo}=params;
        constextensions=Object.assign({},extraExtensions);
        constimportedState=params.controllerState||{};

        //Controlpanelparams
        if(this.withControlPanel){
            //Controlpanel(Model)
            constControlPanelComponent=this.config.ControlPanel;
            extensions[ControlPanelComponent.modelExtension]={
                actionId:params.action.id,
                //controlinitialization
                activateDefaultFavorite:params.activateDefaultFavorite,
                archNodes:controlPanelInfo.children,
                dynamicFilters:params.dynamicFilters,
                favoriteFilters,
                withSearchBar:params.withSearchBar,
            };
            this.controllerParams.withControlPanel=true;
            //Controlpanel(Component)
            constcontrolPanelProps={
                action:params.action,
                breadcrumbs:params.breadcrumbs,
                fields,
                searchMenuTypes:params.searchMenuTypes,
                view:this.fieldsView,
                views:params.action.views&&params.action.views.filter(
                    v=>v.multiRecord===this.multi_record
                ),
                withBreadcrumbs:params.withBreadcrumbs,
                withSearchBar:params.withSearchBar,
            };
            this.controllerParams.controlPanel={
                Component:ControlPanelComponent,
                props:controlPanelProps,
            };
        }

        //Searchpanelparams
        if(this.withSearchPanel){
            //Searchpanel(Model)
            constSearchPanelComponent=this.config.SearchPanel;
            extensions[SearchPanelComponent.modelExtension]={
                archNodes:searchPanelInfo.children,
            };
            this.controllerParams.withSearchPanel=true;
            this.rendererParams.withSearchPanel=true;
            //Searchpanel(Component)
            constsearchPanelProps={
                importedState:importedState.searchPanel,
            };
            if(searchPanelInfo.attrs.class){
                searchPanelProps.className=searchPanelInfo.attrs.class;
            }
            this.controllerParams.searchPanel={
                Component:SearchPanelComponent,
                props:searchPanelProps,
            };
        }

        constsearchModel=newActionModel(extensions,{
            env:Component.env,
            modelName:params.modelName,
            context:Object.assign({},this.loadParams.context),
            domain:this.loadParams.domain||[],
            importedState:importedState.searchModel,
            searchMenuTypes:params.searchMenuTypes,
            searchQuery:params.searchQuery,
            fields,
        });

        returnsearchModel;
    },

    /**
     *@override
     */
    getController:asyncfunction(){
        const_super=this._super.bind(this);
        const{searchModel}=this.controllerParams;
        awaitsearchModel.load();
        this._updateMVCParams(searchModel.get("query"));
        //gettheparentofthemodelifitalreadyexists,as_superwill
        //setthenewcontrollerasparent,whichwedon'twant
        constmodelParent=this.model&&this.model.getParent();
        const[controller]=awaitPromise.all([
            _super(...arguments),
            searchModel.isReady(),
        ]);
        if(modelParent){
            //ifwealreadyaddamodel,restoreitsparent
            this.model.setParent(modelParent);
        }
        returncontroller;
    },
    /**
     *EnsuresthatonlyoneinstanceofAbstractModeliscreated
     *
     *@override
     */
    getModel:function(){
        if(!this.model){
            this.model=this._super.apply(this,arguments);
        }
        returnthis.model;
    },
    /**
     *Thisisusefultocustomizetheactualclasstousebeforecalling
     *createView.
     *
     *@param{Controller}Controller
     */
    setController:function(Controller){
        this.Controller=Controller;
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *@private
     *@param{Object}[action]
     *@param{Object}[action.context||{}]
     *@param{boolean}[action.context.no_breadcrumbs=false]
     *@param{integer}[action.context.active_id]
     *@param{integer[]}[action.context.active_ids]
     *@param{Object}[action.controlPanelFieldsView]
     *@param{string}[action.display_name]
     *@param{Array[]}[action.domain=[]]
     *@param{string}[action.help]
     *@param{integer}[action.id]
     *@param{integer}[action.limit]
     *@param{string}[action.name]
     *@param{string}[action.res_model]
     *@param{string}[action.target]
     *@param{boolean}[action.useSampleModel]
     *@returns{Object}
     */
    _extractParamsFromAction:function(action){
        action=action||{};
        varcontext=action.context||{};
        varinline=action.target==='inline';
        constparams={
            actionId:action.id||false,
            actionViews:action.views||[],
            activateDefaultFavorite:!context.active_id&&!context.active_ids,
            context:action.context||{},
            controlPanelFieldsView:action.controlPanelFieldsView,
            currentId:action.res_id?action.res_id:undefined, //loadreturns0
            displayName:action.display_name||action.name,
            domain:action.domain||[],
            limit:action.limit,
            modelName:action.res_model,
            noContentHelp:action.help,
            searchMenuTypes:inline?[]:this.searchMenuTypes,
            withBreadcrumbs:'no_breadcrumbs'incontext?!context.no_breadcrumbs:true,
            withControlPanel:this.withControlPanel,
            withSearchBar:inline?false:this.withSearchBar,
            withSearchPanel:this.withSearchPanel,
        };
        if('useSampleModel'inaction){
            params.useSampleModel=action.useSampleModel;
        }
        returnparams;
    },
    /**
     *ProcessesafieldsView.Inparticular,parsesitsarch.
     *
     *@private
     *@param{Object}fieldsView
     *@param{string}fieldsView.arch
     *@returns{Object}theprocessedfieldsView
     */
    _processFieldsView:function(fieldsView){
        varfv=_.extend({},fieldsView);
        fv.arch=viewUtils.parseArch(fv.arch);
        fv.viewFields=_.defaults({},fv.viewFields,fv.fields);
        returnfv;
    },
    /**
     *Hooktoupdatetherenderer,controllerandloadparamswiththeresult
     *ofasearch(i.e.acontext,adomainandagroupBy).
     *
     *@private
     *@param{Object}searchQuery
     *@param{Object}searchQuery.context
     *@param{Object}[searchQuery.timeRanges]
     *@param{Array[]}searchQuery.domain
     *@param{string[]}searchQuery.groupBy
     */
    _updateMVCParams:function(searchQuery){
        this.loadParams=_.extend(this.loadParams,{
            context:searchQuery.context,
            domain:searchQuery.domain,
            groupedBy:searchQuery.groupBy,
        });
        this.loadParams.orderedBy=Array.isArray(searchQuery.orderedBy)&&searchQuery.orderedBy.length?
                                        searchQuery.orderedBy:
                                        this.loadParams.orderedBy;
        if(searchQuery.timeRanges){
            this.loadParams.timeRanges=searchQuery.timeRanges;
            this.rendererParams.timeRanges=searchQuery.timeRanges;
        }
    },
});

returnAbstractView;

});
