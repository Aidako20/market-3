flectra.define('web.GraphModel',function(require){
"usestrict";

varcore=require('web.core');
const{DEFAULT_INTERVAL,rankInterval}=require('web.searchUtils');

var_t=core._t;

/**
 *Thegraphmodelisresponsibleforfetchingandprocessingdatafromthe
 *server. Itbasicallyjustdoa(some)read_group(s)andformat/normalizedata.
 */
varAbstractModel=require('web.AbstractModel');

returnAbstractModel.extend({
    /**
     *@override
     *@param{Widget}parent
     */
    init:function(){
        this._super.apply(this,arguments);
        this.chart=null;
    },

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *
     *Wedefendagainstoutsidemodificationsbyextendingthechartdata.It
     *maybeoverkill.
     *
     *@override
     *@returns{Object}
     */
    __get:function(){
        returnObject.assign({isSample:this.isSampleModel},this.chart);
    },
    /**
     *Initialloading.
     *
     *@todoAlltheworktofallbackonthegraph_groupbyskeysinthecontext
     *shouldbedonebythegraphViewIthink.
     *
     *@param{Object}params
     *@param{Object}params.context
     *@param{Object}params.fields
     *@param{string[]}params.domain
     *@param{string[]}params.groupBysalistofvalidfieldnames
     *@param{string[]}params.groupedByalistofvalidfieldnames
     *@param{boolean}params.stacked
     *@param{string}params.measureavalidfieldname
     *@param{'pie'|'bar'|'line'}params.mode
     *@param{string}params.modelName
     *@param{Object}params.timeRanges
     *@returns{Promise}Thepromisedoesnotreturnahandle,wedon'tneed
     *  tokeeptrackofvariousentities.
     */
    __load:function(params){
        vargroupBys=params.context.graph_groupbys||params.groupBys;
        this.initialGroupBys=groupBys;
        this.fields=params.fields;
        this.modelName=params.modelName;
        this.chart=Object.assign({
            context:params.context,
            dataPoints:[],
            domain:params.domain,
            groupBy:params.groupedBy.length?params.groupedBy:groupBys,
            measure:params.context.graph_measure||params.measure,
            mode:params.context.graph_mode||params.mode,
            origins:[],
            stacked:params.stacked,
            timeRanges:params.timeRanges,
            orderBy:params.orderBy
        });

        this._computeDerivedParams();

        returnthis._loadGraph();
    },
    /**
     *Reloaddata. Itissimilartotheloadfunction.Notethatweignorethe
     *handleparameter,wealwaysexpectourdatatobeinthis.chartobject.
     *
     *@todoThismethodtakes'groupBy'andloadmethodtakes'groupedBy'.This
     *  isinsane.
     *
     *@param{any}handleignored!
     *@param{Object}params
     *@param{boolean}[params.stacked]
     *@param{Object}[params.context]
     *@param{string[]}[params.domain]
     *@param{string[]}[params.groupBy]
     *@param{string}[params.measure]avalidfieldname
     *@param{string}[params.mode]oneof'bar','pie','line'
     *@param{Object}[params.timeRanges]
     *@returns{Promise}
     */
    __reload:function(handle,params){
        if('context'inparams){
            this.chart.context=params.context;
            this.chart.groupBy=params.context.graph_groupbys||this.chart.groupBy;
            this.chart.measure=params.context.graph_measure||this.chart.measure;
            this.chart.mode=params.context.graph_mode||this.chart.mode;
        }
        if('domain'inparams){
            this.chart.domain=params.domain;
        }
        if('groupBy'inparams){
            this.chart.groupBy=params.groupBy.length?params.groupBy:this.initialGroupBys;
        }
        if('measure'inparams){
            this.chart.measure=params.measure;
        }
        if('timeRanges'inparams){
            this.chart.timeRanges=params.timeRanges;
        }

        this._computeDerivedParams();

        if('mode'inparams){
            this.chart.mode=params.mode;
            returnPromise.resolve();
        }
        if('stacked'inparams){
            this.chart.stacked=params.stacked;
            returnPromise.resolve();
        }
        if('orderBy'inparams){
            this.chart.orderBy=params.orderBy;
            returnPromise.resolve();
        }
        returnthis._loadGraph();
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *Computethis.chart.processedGroupBy,this.chart.domains,this.chart.origins,
     *andthis.chart.comparisonFieldIndex.
     *Thoseparametersaredeterminedbythis.chart.timeRanges,this.chart.groupBy,andthis.chart.domain.
     *
     *@private
     */
    _computeDerivedParams:function(){
        this.chart.processedGroupBy=this._processGroupBy(this.chart.groupBy);

        const{range,rangeDescription,comparisonRange,comparisonRangeDescription,fieldName}=this.chart.timeRanges;
        if(range){
            this.chart.domains=[
                this.chart.domain.concat(range),
                this.chart.domain.concat(comparisonRange),
            ];
            this.chart.origins=[rangeDescription,comparisonRangeDescription];
            constgroupBys=this.chart.processedGroupBy.map(function(gb){
                returngb.split(":")[0];
            });
            this.chart.comparisonFieldIndex=groupBys.indexOf(fieldName);
        }else{
            this.chart.domains=[this.chart.domain];
            this.chart.origins=[""];
            this.chart.comparisonFieldIndex=-1;
        }
    },
    /**
     *@override
     */
    _isEmpty(){
        returnthis.chart.dataPoints.length===0;
    },
    /**
     *Fetchandprocessgraphdata. Itisbasicallya(some)read_group(s)
     *withcorrectfieldsforeachdomain. Wehavetodosomelightprocessing
     *toseparatedategroupsinthefieldlist,becausetheycanbedefined
     *withanaggregationfunction,suchasmy_date:week.
     *
     *@private
     *@returns{Promise}
     */
    _loadGraph:function(){
        varself=this;
        this.chart.dataPoints=[];
        vargroupBy=this.chart.processedGroupBy;
        varfields=_.map(groupBy,function(groupBy){
            returngroupBy.split(':')[0];
        });
        constloadId=this.loadId?++this.loadId:1;
        this.loadId=loadId;

        if(this.chart.measure!=='__count__'){
            if(this.fields[this.chart.measure].type==='many2one'){
                fields=fields.concat(this.chart.measure+":count_distinct");
            }
            else{
                fields=fields.concat(this.chart.measure);
            }
        }

        varcontext=_.extend({fill_temporal:true},this.chart.context);

        varproms=[];
        this.chart.domains.forEach(function(domain,originIndex){
            proms.push(self._rpc({
                model:self.modelName,
                method:'read_group',
                context:context,
                domain:domain,
                fields:fields,
                groupBy:groupBy,
                lazy:false,
            }).then(self._processData.bind(self,originIndex,loadId)));
        });
        returnPromise.all(proms);
    },
    /**
     *Sinceread_groupisinsaneandreturnsitsresultondifferentkeys
     *dependingofsomeinput,wehavetonormalizetheresult.
     *Eachgroupcomingfromtheread_groupproducesadataPoint
     *
     *@private
     *@param{number}originIndex
     *@param{any}rawDataresultfromtheread_group
     */
    _processData:function(originIndex,loadId,rawData){
        if(loadId<this.loadId){
            return;
        }
        varself=this;
        varisCount=this.chart.measure==='__count__';
        varlabels;

        functiongetLabels(dataPt){
            returnself.chart.processedGroupBy.map(function(field){
                returnself._sanitizeValue(dataPt[field],field.split(":")[0]);
            });
        }
        rawData.forEach(function(dataPt){
            labels=getLabels(dataPt);
            varcount=dataPt.__count||dataPt[self.chart.processedGroupBy[0]+'_count']||0;
            varvalue=isCount?count:dataPt[self.chart.measure];
            if(valueinstanceofArray){
                //whenamany2onefieldisusedasameasureANDasagrouped
                //field,badthingshappen. Theserverwillonlyreturnthe
                //groupedvalueandwillnotaggregateit. Sincethereisa
                //nameclash,wearetheninthesituationwherethisvalueis
                //anarray. Fortunately,ifwegroupbyafield,thenwecan
                //sayforcertainthatthegroupcontainsexactlyonedistinct
                //valueforthatfield.
                value=1;
            }
            self.chart.dataPoints.push({
                resId:dataPt[self.chart.groupBy[0]]instanceofArray?dataPt[self.chart.groupBy[0]][0]:-1,
                count:count,
                domain:dataPt.__domain,
                value:value,
                labels:labels,
                originIndex:originIndex,
            });
        });
    },
    /**
     *ProcessthegroupByparameterinordertokeeponlythefinerintervaloptionfor
     *elementsbasedondate/datetimefield(e.g.'date:year').Thismeansthat
     *'week'ispreferedto'month'.Thefieldstaysattheplaceofitsfirstoccurence.
     *Forinstance,
     *['foo','date:month','bar','date:week']becomes['foo','date:week','bar'].
     *
     *@private
     *@param{string[]}groupBy
     *@returns{string[]}
     */
    _processGroupBy:function(groupBy){
        constgroupBysMap=newMap();
        for(constgbofgroupBy){
            let[fieldName,interval]=gb.split(':');
            constfield=this.fields[fieldName];
            if(['date','datetime'].includes(field.type)){
                interval=interval||DEFAULT_INTERVAL;
            }
            if(groupBysMap.has(fieldName)){
                constregisteredInterval=groupBysMap.get(fieldName);
                if(rankInterval(registeredInterval)<rankInterval(interval)){
                    groupBysMap.set(fieldName,interval);
                }
            }else{
                groupBysMap.set(fieldName,interval);
            }
        }
        return[...groupBysMap].map(([fieldName,interval])=>{
            if(interval){
                return`${fieldName}:${interval}`;
            }
            returnfieldName;
        });
    },
    /**
     *Helperfunction(for_processData),turnsvariousvaluesinausable
     *stringform,thatwecandisplayintheinterface.
     *
     *@private
     *@param{any}valuevalueforthefieldfieldNamereceivedbytheread_grouprpc
     *@param{string}fieldName
     *@returns{string}
     */
    _sanitizeValue:function(value,fieldName){
        if(value===false&&this.fields[fieldName].type!=='boolean'){
            return_t("Undefined");
        }
        if(valueinstanceofArray){
            returnvalue[1];
        }
        if(fieldName&&(this.fields[fieldName].type==='selection')){
            varselected=_.where(this.fields[fieldName].selection,{0:value})[0];
            returnselected?selected[1]:value;
        }
        returnvalue;
    },
});

});
