flectra.define('web.GraphController',function(require){
"usestrict";

/*---------------------------------------------------------
 *FlectraGraphview
 *---------------------------------------------------------*/

constAbstractController=require('web.AbstractController');
const{ComponentWrapper}=require('web.OwlCompatibility');
constDropdownMenu=require('web.DropdownMenu');
const{DEFAULT_INTERVAL,INTERVAL_OPTIONS}=require('web.searchUtils');
const{qweb}=require('web.core');
const{_t}=require('web.core');

classCarretDropdownMenuextendsDropdownMenu{
    /**
     *@override
     */
    getdisplayCaret(){
        returntrue;
    }
}

varGraphController=AbstractController.extend({
    custom_events:_.extend({},AbstractController.prototype.custom_events,{
        item_selected:'_onItemSelected',
        open_view:'_onOpenView',
    }),

    /**
     *@override
     *@param{Widget}parent
     *@param{GraphModel}model
     *@param{GraphRenderer}renderer
     *@param{Object}params
     *@param{string[]}params.measures
     *@param{boolean}params.isEmbedded
     *@param{string[]}params.groupableFields,
     */
    init:function(parent,model,renderer,params){
        this._super.apply(this,arguments);
        this.measures=params.measures;
        //thisparameterconditiontheappearanceofa'GroupBy'
        //buttoninthecontrolpanelownedbythegraphview.
        this.isEmbedded=params.isEmbedded;
        this.withButtons=params.withButtons;
        //viewstouseintheactiontriggeredwhenthegraphisclicked
        this.views=params.views;
        this.title=params.title;

        //thisparameterdetermineswhatisthelistoffields
        //thatmaybeusedwithinthegroupbymenuavailablewhen
        //theviewisembedded
        this.groupableFields=params.groupableFields;
        this.buttonDropdownPromises=[];
    },
    /**
     *@override
     */
    start:function(){
        this.$el.addClass('o_graph_controller');
        returnthis._super.apply(this,arguments);
    },
    /**
     *@todocheckifthiscanberemoved(mostlyduplicatewith
     *AbstractControllermethod)
     */
    destroy:function(){
        if(this.$buttons){
            //removejquery'stooltip()handlers
            this.$buttons.find('button').off().tooltip('dispose');
        }
        this._super.apply(this,arguments);
    },

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *Returnsthecurrentmode,measureandgroupbys,sowecanrestorethe
     *viewwhenwesavethecurrentstateinthesearchview,orwhenweaddit
     *tothedashboard.
     *
     *@override
     *@returns{Object}
     */
    getOwnedQueryParams:function(){
        varstate=this.model.get();
        return{
            context:{
                graph_measure:state.measure,
                graph_mode:state.mode,
                graph_groupbys:state.groupBy,
            }
        };
    },
    /**
     *@override
     */
    reload:asyncfunction(){
        constpromises=[this._super(...arguments)];
        if(this.withButtons){
            conststate=this.model.get();
            this.measures.forEach(m=>m.isActive=m.fieldName===state.measure);
            promises.push(this.measureMenu.update({items:this.measures}));
        }
        returnPromise.all(promises);
    },
    /**
     *RenderthebuttonsaccordingtotheGraphView.buttonsand
     *addlistenersonit.
     *Setthis.$buttonswiththeproducedjQueryelement
     *
     *@param{jQuery}[$node]ajQuerynodewheretherenderedbuttonsshould
     *beinserted$nodemaybeundefined,inwhichcasetheGraphViewdoes
     *nothing
     */
    renderButtons:function($node){
        this.$buttons=$(qweb.render('GraphView.buttons'));
        this.$buttons.find('button').tooltip();
        this.$buttons.click(ev=>this._onButtonClick(ev));

        if(this.withButtons){
            conststate=this.model.get();
            constfragment=document.createDocumentFragment();
            //InstantiateandappendMeasureMenu
            this.measures.forEach(m=>m.isActive=m.fieldName===state.measure);
            this.measureMenu=newComponentWrapper(this,CarretDropdownMenu,{
                title:_t("Measures"),
                items:this.measures,
            });
            this.buttonDropdownPromises=[this.measureMenu.mount(fragment)];
            if($node){
                if(this.isEmbedded){
                    //InstantiateandappendGroupBymenu
                    this.groupByMenu=newComponentWrapper(this,CarretDropdownMenu,{
                        title:_t("GroupBy"),
                        icon:'fafa-bars',
                        items:this._getGroupBys(state.groupBy),
                    });
                    this.buttonDropdownPromises.push(this.groupByMenu.mount(fragment));
                }
                this.$buttons.appendTo($node);
            }
        }
    },
    /**
     *Makessurethatthebuttonsinthecontrolpanelmatchesthecurrent
     *state(so,correctactivebuttonsandstufflikethat).
     *
     *@override
     */
    updateButtons:function(){
        if(!this.$buttons){
            return;
        }
        varstate=this.model.get();
        this.$buttons.find('.o_graph_button').removeClass('active');
        this.$buttons
            .find('.o_graph_button[data-mode="'+state.mode+'"]')
            .addClass('active');
        this.$buttons
            .find('.o_graph_button[data-mode="stack"]')
            .data('stacked',state.stacked)
            .toggleClass('active',state.stacked)
            .toggleClass('o_hidden',state.mode!=='bar');
        this.$buttons
            .find('.o_graph_button[data-order]')
            .toggleClass('o_hidden',state.mode==='pie'||!!Object.keys(state.timeRanges).length)
            .filter('.o_graph_button[data-order="'+state.orderBy+'"]')
            .toggleClass('active',!!state.orderBy);

        if(this.withButtons){
            this._attachDropdownComponents();
        }
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *Attachesthedifferentdropdowncomponentstothebuttonscontainer.
     *
     *@returns{Promise}
     */
    async_attachDropdownComponents(){
        awaitPromise.all(this.buttonDropdownPromises);
        constactionsContainer=this.$buttons[0];
        //Attach"measures"button
        actionsContainer.appendChild(this.measureMenu.el);
        this.measureMenu.el.classList.add('o_graph_measures_list');
        if(this.isEmbedded){
            //Attach"groupby"button
            actionsContainer.appendChild(this.groupByMenu.el);
            this.groupByMenu.el.classList.add('o_group_by_menu');
        }
        //Updatebuttonclassesaccordinglytothecurrentmode
        constbuttons=actionsContainer.querySelectorAll('.o_dropdown_toggler_btn');
        for(constbuttonofbuttons){
            button.classList.remove('o_dropdown_toggler_btn','btn-secondary');
            if(this.isEmbedded){
                button.classList.add('btn-outline-secondary');
            }else{
                button.classList.add('btn-primary');
                button.tabIndex=0;
            }
        }
    },

    /**
     *ReturnstheitemsusedbytheGroupBymenuinembeddedmode.
     *
     *@private
     *@param{string[]}activeGroupBys
     *@returns{Object[]}
     */
    _getGroupBys(activeGroupBys){
        constnormalizedGroupBys=this._normalizeActiveGroupBys(activeGroupBys);
        constgroupBys=Object.keys(this.groupableFields).map(fieldName=>{
            constfield=this.groupableFields[fieldName];
            constgroupByActivity=normalizedGroupBys.filter(gb=>gb.fieldName===fieldName);
            constgroupBy={
                id:fieldName,
                isActive:Boolean(groupByActivity.length),
                description:field.string,
                itemType:'groupBy',
            };
            if(['date','datetime'].includes(field.type)){
                groupBy.hasOptions=true;
                constactiveOptionIds=groupByActivity.map(gb=>gb.interval);
                groupBy.options=Object.values(INTERVAL_OPTIONS).map(o=>{
                    returnObject.assign({},o,{isActive:activeOptionIds.includes(o.id)});
                });
            }
            returngroupBy;
        }).sort((gb1,gb2)=>{
            returngb1.description.localeCompare(gb2.description);
        });
        returngroupBys;
    },

    /**
     *ThismethodputstheactivegroupBysinaconvenientform.
     *
     *@private
     *@param{string[]}activeGroupBys
     *@returns{Object[]}normalizedGroupBys
     */
    _normalizeActiveGroupBys(activeGroupBys){
        returnactiveGroupBys.map(groupBy=>{
            constfieldName=groupBy.split(':')[0];
            constfield=this.groupableFields[fieldName];
            constnormalizedGroupBy={fieldName};
            if(['date','datetime'].includes(field.type)){
                normalizedGroupBy.interval=groupBy.split(':')[1]||DEFAULT_INTERVAL;
            }
            returnnormalizedGroupBy;
        });
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *Dowhatneedtobedonewhenabuttonfromthecontrolpanelisclicked.
     *
     *@private
     *@param{MouseEvent}ev
     */
    _onButtonClick:function(ev){
        var$target=$(ev.target);
        if($target.hasClass('o_graph_button')){
            if(_.contains(['bar','line','pie'],$target.data('mode'))){
                this.update({mode:$target.data('mode')});
            }elseif($target.data('mode')==='stack'){
                this.update({stacked:!$target.data('stacked')});
            }elseif(['asc','desc'].includes($target.data('order'))){
                constorder=$target.data('order');
                conststate=this.model.get();
                this.update({orderBy:state.orderBy===order?false:order});
            }
        }
    },

    /**
     *@private
     *@param{FlectraEvent}ev
     */
    _onItemSelected(ev){
        constitem=ev.data.item;
        if(this.isEmbedded&&item.itemType==='groupBy'){
            constfieldName=item.id;
            constoptionId=ev.data.option&&ev.data.option.id;
            constactiveGroupBys=this.model.get().groupBy;
            if(optionId){
                constnormalizedGroupBys=this._normalizeActiveGroupBys(activeGroupBys);
                constindex=normalizedGroupBys.findIndex(ngb=>
                    ngb.fieldName===fieldName&&ngb.interval===optionId);
                if(index===-1){
                    activeGroupBys.push(fieldName+':'+optionId);
                }else{
                    activeGroupBys.splice(index,1);
                }
            }else{
                constgroupByFieldNames=activeGroupBys.map(gb=>gb.split(':')[0]);
                constindexOfGroupby=groupByFieldNames.indexOf(fieldName);
                if(indexOfGroupby===-1){
                    activeGroupBys.push(fieldName);
                }else{
                    activeGroupBys.splice(indexOfGroupby,1);
                }
            }
            this.update({groupBy:activeGroupBys});
            this.groupByMenu.update({
                items:this._getGroupBys(activeGroupBys),
            });
        }elseif(item.itemType==='measure'){
            this.update({measure:item.fieldName});
            this.measures.forEach(m=>m.isActive=m.fieldName===item.fieldName);
            this.measureMenu.update({items:this.measures});
        }
    },

    /**
     *@private
     *@param{FlectraEvent}ev
     *@param{Array[]}ev.data.domain
     */
    _onOpenView(ev){
        ev.stopPropagation();
        conststate=this.model.get();
        constcontext=Object.assign({},state.context);
        Object.keys(context).forEach(x=>{
            if(x==='group_by'||x.startsWith('search_default_')){
                deletecontext[x];
            }
        });
        this.do_action({
            context:context,
            domain:ev.data.domain,
            name:this.title,
            res_model:this.modelName,
            target:'current',
            type:'ir.actions.act_window',
            view_mode:'list',
            views:this.views,
        });
    },
});

returnGraphController;

});
