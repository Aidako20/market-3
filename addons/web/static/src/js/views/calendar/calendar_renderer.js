flectra.define('web.CalendarRenderer',function(require){
"usestrict";

varAbstractRenderer=require('web.AbstractRenderer');
varCalendarPopover=require('web.CalendarPopover');
varcore=require('web.core');
varDialog=require('web.Dialog');
varfield_utils=require('web.field_utils');
varFieldManagerMixin=require('web.FieldManagerMixin');
varrelational_fields=require('web.relational_fields');
varsession=require('web.session');
varWidget=require('web.Widget');
const{createYearCalendarView}=require('/web/static/src/js/libs/fullcalendar.js');

var_t=core._t;
varqweb=core.qweb;

varSidebarFilterM2O=relational_fields.FieldMany2One.extend({
    _getSearchBlacklist:function(){
        returnthis._super.apply(this,arguments).concat(this.filter_ids||[]);
    },
});

varSidebarFilter=Widget.extend(FieldManagerMixin,{
    template:'CalendarView.sidebar.filter',
    custom_events:_.extend({},FieldManagerMixin.custom_events,{
        field_changed:'_onFieldChanged',
    }),
    /**
     *@constructor
     *@param{Widget}parent
     *@param{Object}options
     *@param{string}options.fieldName
     *@param{Object[]}options.filtersAfilterisanobjectwiththe
     *  followingkeys:id,value,label,active,avatar_model,color,
     *  can_be_removed
     *@param{Object}[options.favorite]thisisanobjectwiththefollowing
     *  keys:fieldName,model,fieldModel
     */
    init:function(parent,options){
        this._super.apply(this,arguments);
        FieldManagerMixin.init.call(this);

        this.title=options.title;
        this.fields=options.fields;
        this.fieldName=options.fieldName;
        this.write_model=options.write_model;
        this.write_field=options.write_field;
        this.avatar_field=options.avatar_field;
        this.avatar_model=options.avatar_model;
        this.filters=options.filters;
        this.label=options.label;
        this.getColor=options.getColor;
    },
    /**
     *@override
     */
    willStart:function(){
        varself=this;
        vardefs=[this._super.apply(this,arguments)];

        if(this.write_model||this.write_field){
            vardef=this.model.makeRecord(this.write_model,[{
                name:this.write_field,
                relation:this.fields[this.fieldName].relation,
                type:'many2one',
            }]).then(function(recordID){
                self.many2one=newSidebarFilterM2O(self,
                    self.write_field,
                    self.model.get(recordID),
                    {
                        mode:'edit',
                        attrs:{
                            string:_t(self.fields[self.fieldName].string),
                            placeholder:"+"+_.str.sprintf(_t("Add%s"),self.title),
                            can_create:false
                        },
                    });
            });
            defs.push(def);
        }
        returnPromise.all(defs);

    },
    /**
     *@override
     */
    start:function(){
        this._super();
        if(this.many2one){
            this.many2one.appendTo(this.$el);
            this.many2one.filter_ids=_.without(_.pluck(this.filters,'value'),'all');
        }
        this.$el.on('click','.o_remove',this._onFilterRemove.bind(this));
        this.$el.on('click','.o_calendar_filter_itemsinput',this._onFilterActive.bind(this));
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *@private
     *@param{FlectraEvent}event
     */
    _onFieldChanged:function(event){
        varself=this;
        event.stopPropagation();
        varcreateValues={'user_id':session.uid};
        varvalue=event.data.changes[this.write_field].id;
        createValues[this.write_field]=value;
        this._rpc({
                model:this.write_model,
                method:'create',
                args:[createValues],
            })
            .then(function(){
                self.trigger_up('changeFilter',{
                    'fieldName':self.fieldName,
                    'value':value,
                    'active':true,
                });
            });
    },
    /**
     *@private
     *@param{MouseEvent}e
     */
    _onFilterActive:function(e){
        var$input=$(e.currentTarget);
        this.trigger_up('changeFilter',{
            'fieldName':this.fieldName,
            'value':$input.closest('.o_calendar_filter_item').data('value'),
            'active':$input.prop('checked'),
        });
    },
    /**
     *@private
     *@param{MouseEvent}e
     */
    _onFilterRemove:function(e){
        varself=this;
        var$filter=$(e.currentTarget).closest('.o_calendar_filter_item');
        Dialog.confirm(this,_t("Doyoureallywanttodeletethisfilterfromfavorites?"),{
            confirm_callback:function(){
                self._rpc({
                        model:self.write_model,
                        method:'unlink',
                        args:[[$filter.data('id')]],
                    })
                    .then(function(){
                        self.trigger_up('changeFilter',{
                            'fieldName':self.fieldName,
                            'id':$filter.data('id'),
                            'active':false,
                            'value':$filter.data('value'),
                        });
                    });
            },
        });
    },
});

returnAbstractRenderer.extend({
    template:"CalendarView",
    config:{
        CalendarPopover:CalendarPopover,
    },
    custom_events:_.extend({},AbstractRenderer.prototype.custom_events||{},{
        edit_event:'_onEditEvent',
        delete_event:'_onDeleteEvent',
    }),

    /**
     *@constructor
     *@param{Widget}parent
     *@param{Object}state
     *@param{Object}params
     */
    init:function(parent,state,params){
        this._super.apply(this,arguments);
        this.displayFields=params.displayFields;
        this.model=params.model;
        this.filters=[];
        this.color_map={};
        this.hideDate=params.hideDate;
        this.hideTime=params.hideTime;
        this.canDelete=params.canDelete;
        this.canCreate=params.canCreate;
        this.scalesInfo=params.scalesInfo;
        this._isInDOM=false;
    },
    /**
     *@override
     *@returns{Promise}
     */
    start:function(){
        this._initSidebar();
        this._initCalendar();
        returnthis._super();
    },
    /**
     *@override
     */
    on_attach_callback:function(){
        this._super(...arguments);
        this._isInDOM=true;
        //BUGTest????
        //this.$el.height($(window).height()-this.$el.offset().top);
        this.calendar.render();
        this._renderCalendar();
        window.addEventListener('click',this._onWindowClick.bind(this));
    },
    /**
     *CalledwhenthefieldisdetachedfromtheDOM.
     */
    on_detach_callback:function(){
        this._super(...arguments);
        this._isInDOM=false;
        window.removeEventListener('click',this._onWindowClick);
    },
    /**
     *@override
     */
    destroy:function(){
        if(this.calendar){
            this.calendar.destroy();
        }
        if(this.$small_calendar){
            this.$small_calendar.datepicker('destroy');
            $('#ui-datepicker-div:empty').remove();
        }
        this._super.apply(this,arguments);
    },

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *Note:thisisnotdeadcode,itiscalledbythecalendar-boxtemplate
     *
     *@param{any}record
     *@param{any}fieldName
     *@param{any}imageField
     *@returns{string[]}
     */
    getAvatars:function(record,fieldName,imageField){
        varfield=this.state.fields[fieldName];

        if(!record[fieldName]){
            return[];
        }
        if(field.type==='one2many'||field.type==='many2many'){
            return_.map(record[fieldName],function(id){
                return'<imgsrc="/web/image/'+field.relation+'/'+id+'/'+imageField+'"/>';
            });
        }elseif(field.type==='many2one'){
            return['<imgsrc="/web/image/'+field.relation+'/'+record[fieldName][0]+'/'+imageField+'"/>'];
        }else{
            varvalue=this._format(record,fieldName);
            varcolor=this.getColor(value);
            if(isNaN(color)){
                return['<spanclass="o_avatar_square"style="background-color:'+color+';"/>'];
            }
            else{
                return['<spanclass="o_avatar_squareo_calendar_color_'+color+'"/>'];
            }
        }
    },
    /**
     *Note:thisisnotdeadcode,itiscalledbytwotemplate
     *
     *@param{any}key
     *@returns{integer}
     */
    getColor:function(key){
        if(!key){
            return;
        }
        if(this.color_map[key]){
            returnthis.color_map[key];
        }
        //checkifthekeyisacsscolor
        if(typeofkey==='string'&&key.match(/^((#[A-F0-9]{3})|(#[A-F0-9]{6})|((hsl|rgb)a?\(\s*(?:(\s*\d{1,3}%?\s*),?){3}(\s*,[0-9.]{1,4})?\))|)$/i)){
            returnthis.color_map[key]=key;
        }
        if(typeofkey==='number'&&!(keyinthis.color_map)){
            returnthis.color_map[key]=key;
        }
        varindex=(((_.keys(this.color_map).length+1)*5)%24)+1;
        this.color_map[key]=index;
        returnindex;
    },
    /**
     *@override
     */
    getLocalState:function(){
        varfcScroller=this.calendarElement.querySelector('.fc-scroller');
        return{
            scrollPosition:fcScroller.scrollTop,
        };
    },
    /**
     *@override
     */
    setLocalState:function(localState){
        if(localState.scrollPosition){
            varfcScroller=this.calendarElement.querySelector('.fc-scroller');
            fcScroller.scrollTop=localState.scrollPosition;
        }
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *ConvertthenewformatofEventfromFullCalendarV4toaEventFullCalendarV3
     *@paramfc4Event
     *@return{Object}FullCalendarV3ObjectEvent
     *@private
     */
    _convertEventToFC3Event:function(fc4Event){
        varevent=fc4Event;
        if(!moment.isMoment(fc4Event.start)){
            event={
                id:fc4Event.id,
                title:fc4Event.title,
                start:moment(fc4Event.start).utcOffset(0,true),
                end:fc4Event.end&&moment(fc4Event.end).utcOffset(0,true),
                allDay:fc4Event.allDay,
                color:fc4Event.color,
            };
            if(fc4Event.extendedProps){
                event=Object.assign({},event,{
                    r_start:fc4Event.extendedProps.r_start&&moment(fc4Event.extendedProps.r_start).utcOffset(0,true),
                    r_end:fc4Event.extendedProps.r_end&&moment(fc4Event.extendedProps.r_end).utcOffset(0,true),
                    record:fc4Event.extendedProps.record,
                    attendees:fc4Event.extendedProps.attendees,
                });
            }
        }
        returnevent;
    },
    /**
     *@param{any}event
     *@returns{string}thehtmlfortherenderedevent
     */
    _eventRender:function(event){
        varqweb_context={
            event:event,
            record:event.extendedProps.record,
            color:this.getColor(event.extendedProps.color_index),
            showTime:!self.hideTime&&event.extendedProps.showTime,
        };
        this.qweb_context=qweb_context;
        if(_.isEmpty(qweb_context.record)){
            return'';
        }else{
            returnqweb.render("calendar-box",qweb_context);
        }
    },
    /**
     *@private
     *@param{any}record
     *@param{any}fieldName
     *@returns{string}
     */
    _format:function(record,fieldName){
        varfield=this.state.fields[fieldName];
        if(field.type==="one2many"||field.type==="many2many"){
            returnfield_utils.format[field.type]({data:record[fieldName]},field);
        }else{
            returnfield_utils.format[field.type](record[fieldName],field,{forceString:true});
        }
    },
    /**
     *ReturntheObjectoptionsforFullCalendar
     *
     *@private
     *@param{Object}fcOptions
     *@return{Object}
     */
    _getFullCalendarOptions:function(fcOptions){
        varself=this;
        constoptions=Object.assign({},this.state.fc_options,{
            plugins:[
                'moment',
                'interaction',
                'dayGrid',
                'timeGrid'
            ],
            eventDrop:function(eventDropInfo){
                varevent=self._convertEventToFC3Event(eventDropInfo.event);
                self.trigger_up('dropRecord',event);
            },
            eventResize:function(eventResizeInfo){
                self._unselectEvent();
                varevent=self._convertEventToFC3Event(eventResizeInfo.event);
                self.trigger_up('updateRecord',event);
            },
            eventClick:function(eventClickInfo){
                eventClickInfo.jsEvent.preventDefault();
                eventClickInfo.jsEvent.stopPropagation();
                vareventData=eventClickInfo.event;
                self._unselectEvent();
                $(self.calendarElement).find(_.str.sprintf('[data-event-id=%s]',eventData.id)).addClass('o_cw_custom_highlight');
                self._renderEventPopover(eventData,$(eventClickInfo.el));
            },
            yearDateClick:function(info){
                self._unselectEvent();
                info.view.unselect();
                if(!info.events.length){
                    if(info.selectable){
                        constdata={
                            start:info.date,
                            allDay:true,
                        };
                        if(self.state.context.default_name){
                            data.title=self.state.context.default_name;
                        }
                        self.trigger_up('openCreate',self._convertEventToFC3Event(data));
                    }
                }else{
                    self._renderYearEventPopover(info.date,info.events,$(info.dayEl));
                }
            },
            select:function(selectionInfo){
                //Clickingontheview,disposeanyvisiblepopover.Otherwisecreateanewevent.
                if(self.$('.o_cw_popover').length){
                    self._unselectEvent();
                }
                vardata={start:selectionInfo.start,end:selectionInfo.end,allDay:selectionInfo.allDay};
                if(self.state.context.default_name){
                    data.title=self.state.context.default_name;
                }
                self.trigger_up('openCreate',self._convertEventToFC3Event(data));
                if(self.state.scale==='year'){
                    self.calendar.view.unselect();
                }else{
                    self.calendar.unselect();
                }
            },
            eventRender:function(info){
                varevent=info.event;
                varelement=$(info.el);
                varview=info.view;
                element.attr('data-event-id',event.id);
                if(view.type==='dayGridYear'){
                    constcolor=this.getColor(event.extendedProps.color_index);
                    if(typeofcolor==='string'){
                        element.css({
                            backgroundColor:color,
                        });
                    }elseif(typeofcolor==='number'){
                        element.addClass(`o_calendar_color_${color}`);
                    }else{
                        element.addClass('o_calendar_color_1');
                    }
                }else{
                var$render=$(self._eventRender(event));
                element.find('.fc-content').html($render.html());
                element.addClass($render.attr('class'));

                //Addbackgroundifdoesn'texist
                if(!element.find('.fc-bg').length){
                    element.find('.fc-content').after($('<div/>',{class:'fc-bg'}));
                }

                if(view.type==='dayGridMonth'&&event.extendedProps.record){
                    varstart=event.extendedProps.r_start||event.start;
                    varend=event.extendedProps.r_end||event.end;
                    //Detectiftheeventoccursinjustoneday
                    //note:add&remove1mintoavoidissueswith00:00
                    varisSameDayEvent=moment(start).clone().add(1,'minute').isSame(moment(end).clone().subtract(1,'minute'),'day');
                    if(!event.allDay&&isSameDayEvent){
                        //Formonthview:donotshowbackgroundfornonallday,singledayevents
                        element.addClass('o_cw_nobg');
                        if(event.extendedProps.showTime&&!self.hideTime){
                            constdisplayTime=moment(start).clone().format(self._getDbTimeFormat());
                            element.find('.fc-content.fc-time').text(displayTime);
                        }
                    }
                }

                //Ondoubleclick,edittheevent
                element.on('dblclick',function(){
                    self.trigger_up('edit_event',{id:event.id});
                });
                }
            },
            datesRender:function(info){
                constviewToMode=Object.fromEntries(
                    Object.entries(self.scalesInfo).map(([k,v])=>[v,k])
                );
                self.trigger_up('viewUpdated',{
                    mode:viewToMode[info.view.type],
                    title:info.view.title,
                });
            },
            //Add/Removeaclassonhovertostylemultipledaysevents.
            //Thecss":hover"selectorcan'tbeusedbecausetheseevents
            //arerenderedusingmultipleelements.
            eventMouseEnter:function(mouseEnterInfo){
                $(self.calendarElement).find(_.str.sprintf('[data-event-id=%s]',mouseEnterInfo.event.id)).addClass('o_cw_custom_hover');
            },
            eventMouseLeave:function(mouseLeaveInfo){
                if(!mouseLeaveInfo.event.id){
                    return;
                }
                $(self.calendarElement).find(_.str.sprintf('[data-event-id=%s]',mouseLeaveInfo.event.id)).removeClass('o_cw_custom_hover');
            },
            eventDragStart:function(mouseDragInfo){
                mouseDragInfo.el.classList.add(mouseDragInfo.view.type);
                $(self.calendarElement).find(_.str.sprintf('[data-event-id=%s]',mouseDragInfo.event.id)).addClass('o_cw_custom_hover');
                self._unselectEvent();
            },
            eventResizeStart:function(mouseResizeInfo){
                $(self.calendarElement).find(_.str.sprintf('[data-event-id=%s]',mouseResizeInfo.event.id)).addClass('o_cw_custom_hover');
                self._unselectEvent();
            },
            eventLimitClick:function(){
                self._unselectEvent();
                return'popover';
            },
            windowResize:function(){
                self._render();
            },
            views:{
                timeGridDay:{
                    columnHeaderFormat:'LL'
                },
                timeGridWeek:{
                    columnHeaderFormat:'dddD'
                },
                dayGridMonth:{
                    columnHeaderFormat:'dddd'
                }
            },
            height:'parent',
            unselectAuto:false,
            dir:_t.database.parameters.direction,
            events:(info,successCB)=>{
                successCB(self.state.data);
            },
        },fcOptions);
        options.plugins.push(createYearCalendarView(FullCalendar,options));
        returnoptions;
    },
    /**
     *Initializethemaincalendar
     *
     *@private
     */
    _initCalendar:function(){
        this.calendarElement=this.$(".o_calendar_widget")[0];
        varlocale=moment.locale();

        varfcOptions=this._getFullCalendarOptions({
            locale:locale,//resetlocalewhenfullcalendarhasalreadybeeninstanciatedbeforenow
        });

        this.calendar=newFullCalendar.Calendar(this.calendarElement,fcOptions);
    },
    /**
     *Initializetheminicalendarinthesidebar
     *
     *@private
     */
    _initCalendarMini:function(){
        varself=this;
        this.$small_calendar=this.$(".o_calendar_mini");
        this.$small_calendar.datepicker({
            'onSelect':function(datum,obj){
                self.trigger_up('changeDate',{
                    date:moment(newDate(+obj.currentYear,+obj.currentMonth,+obj.currentDay))
                });
            },
            'showOtherMonths':true,
            'dayNamesMin':this.state.fc_options.dayNamesMin.map(x=>x[0]),
            'monthNames':this.state.fc_options.monthNamesShort,
            'firstDay':this.state.fc_options.firstDay,
        });
    },
    /**
     *Initializethesidebar
     *
     *@private
     */
    _initSidebar:function(){
        this.$sidebar=this.$('.o_calendar_sidebar');
        this.$sidebar_container=this.$(".o_calendar_sidebar_container");
        this._initCalendarMini();
    },
    /**
     *Finalisethepopover
     *
     *@param{jQueryElement}$popoverElement
     *@param{web.CalendarPopover}calendarPopover
     *@private
     */
    _onPopoverShown:function($popoverElement,calendarPopover){
        var$popover=$($popoverElement.data('bs.popover').tip);
        $popover.find('.o_cw_popover_close').on('click',this._unselectEvent.bind(this));
        $popover.find('.o_cw_body').replaceWith(calendarPopover.$el);
    },
    /**
     *Renderthecalendarview,thisisthemainentrypoint.
     *
     *@override
     */
    async_renderView(){
        this.$('.o_calendar_view')[0].prepend(this.calendarElement);
        if(this._isInDOM){
            this._renderCalendar();
        }
        this.$small_calendar.datepicker("setDate",this.state.highlight_date.toDate())
                            .find('.o_selected_range')
                            .removeClass('o_coloro_selected_range');
        var$a;
        switch(this.state.scale){
            case'year':$a=this.$small_calendar.find('td');break;
            case'month':$a=this.$small_calendar.find('td');break;
            case'week':$a=this.$small_calendar.find('tr:has(.ui-state-active)');break;
            case'day':$a=this.$small_calendar.find('a.ui-state-active');break;
        }
        $a.addClass('o_selected_range');
        setTimeout(function(){
            $a.not('.ui-state-active').addClass('o_color');
        });

        awaitthis._renderFilters();
    },
    /**
     *RenderthespecificcodefortheFullCalendarwhenit'sintheDOM
     *
     *@private
     */
    _renderCalendar(){
        this.calendar.unselect();

        if(this.scalesInfo[this.state.scale]!==this.calendar.view.type){
            this.calendar.changeView(this.scalesInfo[this.state.scale]);
        }

        if(this.target_date!==this.state.target_date.toString()){
            this.calendar.gotoDate(moment(this.state.target_date).toDate());
            this.target_date=this.state.target_date.toString();
        }else{
            //this.calendar.gotoDatealreadyrenderseventswhencalled
            //sorendereventsonlywhendomainchanges
            this._renderEvents();
        }

        this._unselectEvent();
        //this._scrollToScrollTime();
    },
    /**
     *Renderallevents
     *
     *@private
     */
    _renderEvents:function(){
        this.calendar.refetchEvents();
    },
    /**
     *Renderallfilters
     *
     *@private
     *@returns{Promise}resolvedwhenallfiltershavebeenrendered
     */
    _renderFilters:function(){
        //Disposeoffilterpopover
        this.$('.o_calendar_filter_item').popover('dispose');
        _.each(this.filters||(this.filters=[]),function(filter){
            filter.destroy();
        });
        if(this.state.fullWidth){
            returnPromise.resolve();
        }
        returnthis._renderFiltersOneByOne();
    },
    /**
     *Renderseachfilteronebyone,waitingforthefirstfilterfinishedto
     *berenderedandappendedtorenderthenextone.
     *Weneedtodolikethissincerenderafilterisasynchronous,wedon't
     *knowwhichonewillbeappenedatfirstandwewanttpforcethemtobe
     *renderedinorder.
     *
     *@param{number}filterIndexifnotset,0bydefault
     *@returns{Promise}resolvedwhenallfiltershavebeenrendered
     */
    _renderFiltersOneByOne:function(filterIndex){
        filterIndex=filterIndex||0;
        vararrFilters=_.toArray(this.state.filters);
        varprom;
        if(filterIndex<arrFilters.length){
            varoptions=arrFilters[filterIndex];
            if(!_.find(options.filters,function(f){returnf.display==null||f.display;})){
                returnthis._renderFiltersOneByOne(filterIndex+1);
            }

            varself=this;
            options.getColor=this.getColor.bind(this);
            options.fields=this.state.fields;
            varsidebarFilter=newSidebarFilter(self,options);
            prom=sidebarFilter.appendTo(this.$sidebar).then(function(){
                //Showfilterpopover
                if(options.avatar_field){
                    _.each(options.filters,function(filter){
                        if(!['all',false].includes(filter.value)){
                            varselector=_.str.sprintf('.o_calendar_filter_item[data-value=%s]',filter.value);
                            sidebarFilter.$el.find(selector).popover({
                                animation:false,
                                trigger:'hover',
                                html:true,
                                placement:'top',
                                title:filter.label,
                                delay:{show:300,hide:0},
                                content:function(){
                                    return$('<img>',{
                                        src:_.str.sprintf('/web/image/%s/%s/%s',options.avatar_model,filter.value,options.avatar_field),
                                        class:'mx-auto',
                                    });
                                },
                            });
                        }
                    });
                }
                returnself._renderFiltersOneByOne(filterIndex+1);
            });
            this.filters.push(sidebarFilter);
        }
        returnPromise.resolve(prom);
    },
    /**
     *Returnsthetimeformatfromdatabaseparameters(onlyhoursandminutes).
     *FIXME:thislookslikeaweakheuristic...
     *
     *@private
     *@returns{string}
     */
    _getDbTimeFormat:function(){
        return_t.database.parameters.time_format.search('%H')!==-1?'HH:mm':'hh:mma';
    },
    /**
     *Returnsevent'sformatteddateforpopovers.
     *
     *@private
     *@param{moment}start
     *@param{moment}end
     *@param{boolean}showDayName
     *@param{boolean}allDay
     */
    _getFormattedDate:function(start,end,showDayName,allDay){
        constisSameDayEvent=start.clone().add(1,'minute')
            .isSame(end.clone().subtract(1,'minute'),'day');
        if(allDay){
            //cancelcorrectiondonein_recordToCalendarEvent
            end=end.clone().subtract(1,'day');
        }
        if(!isSameDayEvent&&start.isSame(end,'month')){
            //Simplifydate-rangeifaneventoccursintothesamemonth(eg.'4-5August2019')
            returnstart.clone().format('MMMMD')+'-'+end.clone().format('D,YYYY');
        }else{
            returnisSameDayEvent?
                start.clone().format(showDayName?'dddd,LL':'LL'):
                start.clone().format('LL')+'-'+end.clone().format('LL');
        }
    },
    /**
     *Preparecontexttodisplayinthepopover.
     *
     *@private
     *@param{Object}eventData
     *@returns{Object}context
     */
    _getPopoverContext:function(eventData){
        varcontext={
            hideDate:this.hideDate,
            hideTime:this.hideTime,
            eventTime:{},
            eventDate:{},
            fields:this.state.fields,
            displayFields:this.displayFields,
            event:eventData,
            modelName:this.model,
            canDelete:this.canDelete,
        };

        varstart=moment((eventData.extendedProps&&eventData.extendedProps.r_start)||eventData.start);
        varend=moment((eventData.extendedProps&&eventData.extendedProps.r_end)||eventData.end);
        varisSameDayEvent=start.clone().add(1,'minute').isSame(end.clone().subtract(1,'minute'),'day');

        //Donotdisplaytimingiftheeventoccuracrossmultipledays.Otherwiseuseuser'stimingpreferences
        if(!this.hideTime&&!eventData.allDay&&isSameDayEvent){
            vardbTimeFormat=this._getDbTimeFormat();

            context.eventTime.time=start.clone().format(dbTimeFormat)+'-'+end.clone().format(dbTimeFormat);

            //Calculatedurationandformattext
            vardurationHours=moment.duration(end.diff(start)).hours();
            vardurationHoursKey=(durationHours===1)?'h':'hh';
            vardurationMinutes=moment.duration(end.diff(start)).minutes();
            vardurationMinutesKey=(durationMinutes===1)?'m':'mm';

            varlocaleData=moment.localeData();//i18nfor'hours'and"minutes"strings
            context.eventTime.duration=(durationHours>0?localeData.relativeTime(durationHours,true,durationHoursKey):'')
                    +(durationHours>0&&durationMinutes>0?',':'')
                    +(durationMinutes>0?localeData.relativeTime(durationMinutes,true,durationMinutesKey):'');
        }

        if(!this.hideDate){

            if(eventData.allDay&&isSameDayEvent){
                context.eventDate.duration=_t("Allday");
            }elseif(eventData.allDay&&!isSameDayEvent){
                vardaysLocaleData=moment.localeData();
                vardays=moment.duration(end.diff(start)).days();
                context.eventDate.duration=daysLocaleData.relativeTime(days,true,'dd');
            }

            context.eventDate.date=this._getFormattedDate(start,end,true,eventData.allDay);
        }

        returncontext;
    },
    /**
     *Preparetheparametersforthepopover.
     *Thisallowtheparameterstobeextensible.
     *
     *@private
     *@param{Object}eventData
     */
    _getPopoverParams:function(eventData){
        return{
            animation:false,
            delay:{
                show:50,
                hide:100
            },
            trigger:'manual',
            html:true,
            title:eventData.extendedProps.record.display_name,
            template:qweb.render('CalendarView.event.popover.placeholder',{color:this.getColor(eventData.extendedProps.color_index)}),
            container:eventData.allDay?'.fc-view':'.fc-scroller',
        }
    },
    /**
     *Rendereventpopover
     *
     *@private
     *@param{Object}eventData
     *@param{jQueryElement}$eventElement
     */
    _renderEventPopover:function(eventData,$eventElement){
        varself=this;

        //Initializepopoverwidget
        varcalendarPopover=newself.config.CalendarPopover(self,self._getPopoverContext(eventData));
        calendarPopover.appendTo($('<div>')).then(()=>{
            $eventElement.popover(
                self._getPopoverParams(eventData)
            ).on('shown.bs.popover',function(){
                self._onPopoverShown($(this),calendarPopover);
            }).popover('show');
        });
    },
    /**
     *Renderyeareventpopover
     *
     *@private
     *@param{Date}date
     *@param{Object[]}events
     *@param{jQueryElement}$el
     */
    _renderYearEventPopover:function(date,events,$el){
        constgroupKeys=[];
        constgroupedEvents={};
        constrecords={};
        for(constrecordofthis.state.data){
            records[record.id]=record;
        }
        for(consteventofevents){
            conststart=moment(event.extendedProps.r_start);
            constend=moment(event.extendedProps.r_end);
            //gettheoriginalrecordtogettherealallDayvalueas
            //thefullcalendaryearviewenforceallDaytotrue
            constrecord=records[event.extendedProps.record.id];
            constkey=this._getFormattedDate(start,end,false,record.allDay);
            if(!(keyingroupedEvents)){
                groupedEvents[key]=[];
                groupKeys.push({
                    key:key,
                    start:event.extendedProps.r_start,
                    end:event.extendedProps.r_end,
                    isSameDayEvent:start.clone().add(1,'minute')
                        .isSame(end.clone().subtract(1,'minute'),'day'),
                });
            }
            groupedEvents[key].push(event);
        }

        constpopoverContent=qweb.render('CalendarView.yearEvent.popover',{
            groupedEvents,
            groupKeys:groupKeys
                .sort((a,b)=>{
                    if(a.isSameDayEvent){
                        //ifisSameDayEventthenputitbeforetheothers
                        returnNumber.MIN_SAFE_INTEGER;
                    }elseif(b.isSameDayEvent){
                        returnNumber.MAX_SAFE_INTEGER;
                    }elseif(a.start.getTime()-b.start.getTime()===0){
                        returna.end.getTime()-b.end.getTime();
                    }
                    returna.start.getTime()-b.start.getTime();
                })
                .map(x=>x.key),
            canCreate:this.canCreate,
        });

        $el.popover({
            animation:false,
            delay:{
                show:50,
                hide:100
            },
            trigger:'manual',
            html:true,
            content:popoverContent,
            template:qweb.render('CalendarView.yearEvent.popover.placeholder'),
            container:'.fc-dayGridYear-view',
        }).on('shown.bs.popover',()=>{
            $('.o_cw_popover.o_cw_popover_close').on('click',()=>this._unselectEvent());
            $('.o_cw_popover.o_cw_popover_create').on('click',(e)=>{
                e.preventDefault();
                e.stopPropagation();
                this._unselectEvent();
                constdata={
                    start:date,
                    allDay:true,
                };
                if(this.state.context.default_name){
                    data.title=this.state.context.default_name;
                }
                this.trigger_up('openCreate',this._convertEventToFC3Event(data));
            });
            $('.o_cw_popover.o_cw_popover_link').on('click',(e)=>{
                e.preventDefault();
                e.stopPropagation();
                this._unselectEvent();
                this.trigger_up('openEvent',{
                    _id:parseInt(e.target.dataset.id,10),
                    title:e.target.dataset.title,
                });
            });
        }).popover('show');
    },
    /**
     *ScrolltothetimesetintheFullCalendarparameter
     *@private
     */
    _scrollToScrollTime:function(){
        varscrollTime=this.calendar.getOption('scrollTime');
        this.calendar.scrollToTime(scrollTime);
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *Removehighlightclassesanddisposeofpopovers
     *
     *@private
     */
    _unselectEvent:function(){
        this.$('.fc-event').removeClass('o_cw_custom_highlight');
        this.$('.o_cw_popover').popover('dispose');
    },
    /**
     *@private
     *@param{MouseEvent}e
     */
    _onWindowClick:function(e){
        constpopover=this.el.querySelector('.o_cw_popover');
        if(popover&&!popover.contains(e.target)){
            this._unselectEvent();
        }
    },
    /**
     *@private
     *@param{FlectraEvent}event
     */
    _onEditEvent:function(event){
        this._unselectEvent();
        this.trigger_up('openEvent',{
            _id:event.data.id,
            title:event.data.title,
        });
    },
    /**
     *@private
     *@param{FlectraEvent}event
     */
    _onDeleteEvent:function(event){
        this._unselectEvent();
        this.trigger_up('deleteRecord',{id:parseInt(event.data.id,10)});
    },
});

});
