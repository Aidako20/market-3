flectra.define('web.CalendarModel',function(require){
"usestrict";

varAbstractModel=require('web.AbstractModel');
varContext=require('web.Context');
varcore=require('web.core');
varfieldUtils=require('web.field_utils');
varsession=require('web.session');

var_t=core._t;

functiondateToServer(date){
    returndate.clone().utc().locale('en').format('YYYY-MM-DDHH:mm:ss');
}

returnAbstractModel.extend({
    /**
     *@override
     */
    init:function(){
        this._super.apply(this,arguments);
        this.end_date=null;
        varweek_start=_t.database.parameters.week_start;
        //calendarusesindex0forSundaybutFlectrastoresitas7
        this.week_start=week_start!==undefined&&week_start!==false?week_start%7:moment().startOf('week').day();
        this.week_stop=this.week_start+6;
    },

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *TransformfullcalendareventobjecttoOpenERPDataobject
     */
    calendarEventToRecord:function(event){
        //Normalizeevent_endwithoutchangingfullcalendarsevent.
        vardata={'name':event.title};
        varstart=event.start.clone();
        varend=event.end&&event.end.clone();

        //Setenddateifnotexisting
        if(!end||end.diff(start)<0){//undefinedorinvalidenddate
            if(event.allDay){
                end=start.clone();
            }else{
                //inweekmodeordaymode,convertalldayeventtoevent
                end=start.clone().add(2,'h');
            }
        }elseif(event.allDay){
            //Foran"allDay",FullCalendargivestheenddayasthe
            //nextdayatmidnight(insteadof23h59).
            end.add(-1,'days');
        }

        varisDateEvent=this.fields[this.mapping.date_start].type==='date';
        //An"allDay"eventwithoutthe"all_day"optionisnotconsidered
        //asa24hday.It'sjustapartoftheday(bydefault:7h-19h).
        if(event.allDay){
            if(!this.mapping.all_day&&!isDateEvent){
                if(event.r_start){
                    start.hours(event.r_start.hours())
                         .minutes(event.r_start.minutes())
                         .seconds(event.r_start.seconds())
                         .utc();
                    end.hours(event.r_end.hours())
                       .minutes(event.r_end.minutes())
                       .seconds(event.r_end.seconds())
                       .utc();
                }else{
                    //defaulthoursintheuser'stimezone
                    start.hours(7);
                    end.hours(19);
                }
                start.add(-this.getSession().getTZOffset(start),'minutes');
                end.add(-this.getSession().getTZOffset(end),'minutes');
            }
        }else{
            start.add(-this.getSession().getTZOffset(start),'minutes');
            end.add(-this.getSession().getTZOffset(end),'minutes');
        }

        if(this.mapping.all_day){
            if(event.record){
                data[this.mapping.all_day]=
                    (this.data.scale!=='month'&&event.allDay)||
                    event.record[this.mapping.all_day]&&
                    end.diff(start)<10||
                    false;
            }else{
                data[this.mapping.all_day]=event.allDay;
            }
        }

        data[this.mapping.date_start]=start;
        if(this.mapping.date_stop){
            data[this.mapping.date_stop]=end;
        }

        if(this.mapping.date_delay){
            if(this.data.scale!=='month'||(this.data.scale==='month'&&!event.drop)){
                data[this.mapping.date_delay]=(end.diff(start)<=0?end.endOf('day').diff(start):end.diff(start))/1000/3600;
            }
        }

        returndata;
    },
    /**
     *@param{Object}filter
     *@returns{boolean}
     */
    changeFilter:function(filter){
        varFilter=this.data.filters[filter.fieldName];
        if(filter.value==='all'){
            Filter.all=filter.active;
        }
        varf=_.find(Filter.filters,function(f){
            returnf.value===filter.value;
        });
        if(f){
            if(f.active!==filter.active){
                f.active=filter.active;
            }else{
                returnfalse;
            }
        }elseif(filter.active){
            Filter.filters.push({
                value:filter.value,
                active:true,
            });
        }
        returntrue;
    },
    /**
     *@param{FlectraEvent}event
     */
    createRecord:function(event){
        vardata=this.calendarEventToRecord(event.data.data);
        for(varkindata){
            if(data[k]&&data[k]._isAMomentObject){
                data[k]=dateToServer(data[k]);
            }
        }
        returnthis._rpc({
                model:this.modelName,
                method:'create',
                args:[data],
                context:event.data.options.context,
            });
    },
    /**
     *@todoIthinkthisisdeadcode
     *
     *@param{any}ids
     *@param{any}model
     *@returns
     */
    deleteRecords:function(ids,model){
        returnthis._rpc({
                model:model,
                method:'unlink',
                args:[ids],
                context:session.user_context,//todo:combinewithviewcontext
            });
    },
    /**
     *@override
     *@returns{Object}
     */
    __get:function(){
        return_.extend({},this.data,{
            fields:this.fields
        });
    },
    /**
     *@override
     *@param{any}params
     *@returns{Promise}
     */
    __load:function(params){
        varself=this;
        this.modelName=params.modelName;
        this.fields=params.fields;
        this.fieldNames=params.fieldNames;
        this.fieldsInfo=params.fieldsInfo;
        this.mapping=params.mapping;
        this.mode=params.mode;      //oneofmonth,weekorday
        this.scales=params.scales;  //oneofmonth,weekorday
        this.scalesInfo=params.scalesInfo;

        //Checkwhetherthedatefieldiseditable(i.e.iftheeventscanbe
        //draggedanddropped)
        this.editable=params.editable;
        this.creatable=params.creatable;

        //displaymorebuttonwhentherearetoomucheventononeday
        this.eventLimit=params.eventLimit;

        //fieldstodisplaycolor,e.g.:user_id.partner_id
        this.fieldColor=params.fieldColor;
        if(!this.preloadPromise){
            this.preloadPromise=newPromise(function(resolve,reject){
                Promise.all([
                    self._rpc({model:self.modelName,method:'check_access_rights',args:["write",false]}),
                    self._rpc({model:self.modelName,method:'check_access_rights',args:["create",false]})
                ]).then(function(result){
                    varwrite=result[0];
                    varcreate=result[1];
                    self.write_right=write;
                    self.create_right=create;
                    resolve();
                }).guardedCatch(reject);
            });
        }

        this.data={
            domain:params.domain,
            context:params.context,
            //getinarchthefiltertodisplayinthesidebarandthefieldtoread
            filters:params.filters,
        };

        this.setDate(params.initialDate);
        //Usemodeattributeinxmlfiletospecifyzoomtimeline(day,week,month)
        //bydefaultmonth.
        this.setScale(params.mode);

        _.each(this.data.filters,function(filter){
            if(filter.avatar_field&&!filter.avatar_model){
                filter.avatar_model=self.modelName;
            }
        });

        returnthis.preloadPromise.then(this._loadCalendar.bind(this));
    },
    /**
     *Movethecurrentdaterangetothenextperiod
     */
    next:function(){
        this.setDate(this.data.target_date.clone().add(1,this.data.scale));
    },
    /**
     *Movethecurrentdaterangetothepreviousperiod
     */
    prev:function(){
        this.setDate(this.data.target_date.clone().add(-1,this.data.scale));
    },
    /**
     *@override
     *@param{Object}[params.context]
     *@param{Array}[params.domain]
     *@returns{Promise}
     */
    __reload:function(handle,params){
        if(params.domain){
            this.data.domain=params.domain;
        }
        if(params.context){
            this.data.context=params.context;
        }
        returnthis._loadCalendar();
    },
    /**
     *@param{Moment}start.inlocalTZ
     */
    setDate:function(start){
        //keephighlight/target_dateinlocaltime
        this.data.highlight_date=this.data.target_date=start.clone();
        this.data.start_date=this.data.end_date=start;
        switch(this.data.scale){
            case'year':{
                constyearStart=this.data.start_date.clone().startOf('year');
                letyearStartDay=this.week_start;
                if(yearStart.day()<yearStartDay){
                    //the1stofJanuaryisbeforeourweekstart(e.g.weekstartisMonday,and
                    //01/01isSunday),sowegooneweekback
                    yearStartDay-=7;
                }
                this.data.start_date=yearStart.day(yearStartDay).startOf('day');
                this.data.end_date=this.data.end_date.clone()
                    .endOf('year').day(this.week_stop).endOf('day');
                break;
            }
            case'month':
                varmonthStart=this.data.start_date.clone().startOf('month');

                varmonthStartDay;
                if(monthStart.day()>=this.week_start){
                    //themonth'sfirstdayisafterourweekstart
                    //Thenweareintherightweek
                    monthStartDay=this.week_start;
                }else{
                    //Themonth'sfirstdayisbeforeourweekstart
                    //Thenweshouldgobacktothethepreviousweek
                    monthStartDay=this.week_start-7;
                }

                this.data.start_date=monthStart.day(monthStartDay).startOf('day');
                this.data.end_date=this.data.start_date.clone().add(5,'week').day(this.week_stop).endOf('day');
                break;
            case'week':
                varweekStart=this.data.start_date.clone().startOf('week');
                varweekStartDay=this.week_start;
                if(this.data.start_date.day()<this.week_start){
                    //Theweek'sfirstdayisafterourcurrentday
                    //Thenweshouldgobacktothepreviousweek
                    weekStartDay-=7;
                }
                this.data.start_date=this.data.start_date.clone().day(weekStartDay).startOf('day');
                this.data.end_date=this.data.end_date.clone().day(weekStartDay+6).endOf('day');
                break;
            default:
                this.data.start_date=this.data.start_date.clone().startOf('day');
                this.data.end_date=this.data.end_date.clone().endOf('day');
        }
        //Wehavesetstart/stopdatetimeasdefinitebegin/endboundariesofaperiod(month,week,day)
        //inlocalTZ(whatisthebeginingoftheweek*Iam*in?)
        //Thefollowingcode:
        //-convertsthosetoUTCusingourhomemademethod(testable)
        //-setsthemomentUTCflagtotrue,toensurecompatibilitywiththirdpartylibs
        varmanualUtcDateStart=this.data.start_date.clone().add(-this.getSession().getTZOffset(this.data.start_date),'minutes');
        varformattedUtcDateStart=manualUtcDateStart.format('YYYY-MM-DDTHH:mm:ss')+'Z';
        this.data.start_date=moment.utc(formattedUtcDateStart);

        varmanualUtcDateEnd=this.data.end_date.clone().add(-this.getSession().getTZOffset(this.data.start_date),'minutes');
        varformattedUtcDateEnd=manualUtcDateEnd.format('YYYY-MM-DDTHH:mm:ss')+'Z';
        this.data.end_date=moment.utc(formattedUtcDateEnd);
    },
    /**
     *@param{string}scalethescaletoset
     */
    setScale:function(scale){
        if(!_.contains(this.scales,scale)){
            scale="week";
        }
        this.data.scale=scale;
        this.setDate(this.data.target_date);
    },
    /**
     *Movethecurrentdaterangetotheperiodcontainingtoday
     */
    today:function(){
        this.setDate(moment(newDate()));
    },
    /**
     *@param{Object}record
     *@param{integer}record.id
     *@returns{Promise}
     */
    updateRecord:function(record){
        //Cannotmodifyactualnameyet
        vardata=_.omit(this.calendarEventToRecord(record),'name');
        for(varkindata){
            if(data[k]&&data[k]._isAMomentObject){
                data[k]=dateToServer(data[k]);
            }
        }
        varcontext=newContext(this.data.context,{from_ui:true});
        returnthis._rpc({
            model:this.modelName,
            method:'write',
            args:[[parseInt(record.id,10)],data],
            context:context
        });
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *Convertsthis.data.filtersintoadomain
     *
     *@private
     *@returns{Array}
     */
    _getFilterDomain:function(){
        //Listauthorizedvaluesforeveryfield
        //fieldswithanactive'all'filterareskipped
        varauthorizedValues={};
        varavoidValues={};

        _.each(this.data.filters,function(filter){
            //Skip'all'filtersbecausetheydonotaffectthedomain
            if(filter.all)return;

            //LoopoversubfilterstocompleteauthorizedValues
            _.each(filter.filters,function(f){
                if(filter.write_model){
                    if(!authorizedValues[filter.fieldName])
                        authorizedValues[filter.fieldName]=[];

                    if(f.active){
                        authorizedValues[filter.fieldName].push(f.value);
                    }
                }else{
                    if(!f.active){
                        if(!avoidValues[filter.fieldName])
                            avoidValues[filter.fieldName]=[];

                        avoidValues[filter.fieldName].push(f.value);
                    }
                }
            });
        });

        //Computethedomain
        vardomain=[];
        for(varfieldinauthorizedValues){
            domain.push([field,'in',authorizedValues[field]]);
        }
        for(varfieldinavoidValues){
            if(avoidValues[field].length>0){
                domain.push([field,'notin',avoidValues[field]]);
            }
        }

        returndomain;
    },
    /**
     *@private
     *@returns{Object}
     */
    _getFullCalendarOptions:function(){
        varformat12Hour={
            hour:'numeric',
            minute:'2-digit',
            omitZeroMinute:true,
            meridiem:'short'
        };
        varformat24Hour={
            hour:'numeric',
            minute:'2-digit',
            hour12:false,
        };
        return{
            defaultView:this.scalesInfo[this.mode||'week'],
            header:false,
            selectable:this.creatable&&this.create_right,
            selectMirror:true,
            editable:this.editable,
            droppable:true,
            navLinks:false,
            eventLimit:this.eventLimit,//allow"more"linkwhentoomanyevents
            snapMinutes:15,
            longPressDelay:500,
            eventResizableFromStart:true,
            nowIndicator:true,
            weekNumbers:true,
            weekNumbersWithinDays:true,
            weekNumberCalculation:function(date){
                //SinceFullCalendarv4ISO8601weekdateispreferredsoweforcetheoldsystem
                returnmoment(date).week();
            },
            weekLabel:_t("Week"),
            allDayText:_t("Allday"),
            monthNames:moment.months(),
            monthNamesShort:moment.monthsShort(),
            dayNames:moment.weekdays(),
            dayNamesShort:moment.weekdaysShort(),
            dayNamesMin:moment.weekdaysMin(),
            firstDay:this.week_start,
            slotLabelFormat:_t.database.parameters.time_format.search("%H")!==-1?format24Hour:format12Hour,
            allDaySlot:this.mapping.all_day||this.fields[this.mapping.date_start].type==='date',
        };
    },
    /**
     *Returnadomainfromthedaterange
     *
     *@private
     *@returns{Array}AdomaincontainingdatetimesstartandstopinUTC
     * thosedatetimesareformattedaccordingtoserver'sstandards
     */
    _getRangeDomain:function(){
        //BuildOpenERPDomaintofilterobjectbythis.mapping.date_startfield
        //betweengivenstart,enddates.
        vardomain=[[this.mapping.date_start,'<=',dateToServer(this.data.end_date)]];
        if(this.mapping.date_stop){
            domain.push([this.mapping.date_stop,'>=',dateToServer(this.data.start_date)]);
        }elseif(!this.mapping.date_delay){
            domain.push([this.mapping.date_start,'>=',dateToServer(this.data.start_date)]);
        }
        returndomain;
    },
    /**
     *@private
     *@returns{Promise}
     */
    _loadCalendar:function(){
        varself=this;
        this.data.fc_options=this._getFullCalendarOptions();

        vardefs=_.map(this.data.filters,this._loadFilter.bind(this));

        returnPromise.all(defs).then(function(){
            returnself._rpc({
                    model:self.modelName,
                    method:'search_read',
                    context:self.data.context,
                    fields:self.fieldNames,
                    domain:self.data.domain.concat(self._getRangeDomain()).concat(self._getFilterDomain())
            })
            .then(function(events){
                self._parseServerData(events);
                self.data.data=_.map(events,self._recordToCalendarEvent.bind(self));
                returnPromise.all([
                    self._loadColors(self.data,self.data.data),
                    self._loadRecordsToFilters(self.data,self.data.data)
                ]);
            });
        });
    },
    /**
     *@private
     *@param{any}element
     *@param{any}events
     *@returns{Promise}
     */
    _loadColors:function(element,events){
        if(this.fieldColor){
            varfieldName=this.fieldColor;
            _.each(events,function(event){
                varvalue=event.record[fieldName];
                event.color_index=_.isArray(value)?value[0]%30:value%30;
            });
            this.model_color=this.fields[fieldName].relation||element.model;
        }
        returnPromise.resolve();
    },
    /**
     *@private
     *@param{any}filter
     *@returns{Promise}
     */
    _loadFilter:function(filter){
        if(!filter.write_model){
            returnPromise.resolve();
        }

        varfield=this.fields[filter.fieldName];
        returnthis._rpc({
                model:filter.write_model,
                method:'search_read',
                domain:[["user_id","=",session.uid]],
                fields:[filter.write_field],
            })
            .then(function(res){
                varrecords=_.map(res,function(record){
                    var_value=record[filter.write_field];
                    varvalue=_.isArray(_value)?_value[0]:_value;
                    varf=_.find(filter.filters,function(f){returnf.value===value;});
                    varformater=fieldUtils.format[_.contains(['many2many','one2many'],field.type)?'many2one':field.type];
                    return{
                        'id':record.id,
                        'value':value,
                        'label':formater(_value,field),
                        'active':!f||f.active,
                    };
                });
                records.sort(function(f1,f2){
                    return_.string.naturalCmp(f2.label,f1.label);
                });

                //addmyprofile
                if(field.relation==='res.partner'||field.relation==='res.users'){
                    varvalue=field.relation==='res.partner'?session.partner_id:session.uid;
                    varme=_.find(records,function(record){
                        returnrecord.value===value;
                    });
                    if(me){
                        records.splice(records.indexOf(me),1);
                    }else{
                        varf=_.find(filter.filters,function(f){returnf.value===value;});
                        me={
                            'value':value,
                            'label':session.name+_t("[Me]"),
                            'active':!f||f.active,
                        };
                    }
                    records.unshift(me);
                }
                //addallselection
                records.push({
                    'value':'all',
                    'label':field.relation==='res.partner'||field.relation==='res.users'?_t("Everybody'scalendars"):_t("Everything"),
                    'active':filter.all,
                });

                filter.filters=records;
            });
    },
    /**
     *@private
     *@param{any}element
     *@param{any}events
     *@returns{Promise}
     */
    _loadRecordsToFilters:function(element,events){
        varself=this;
        varnew_filters={};
        varto_read={};
        vardefs=[];
        varcolor_filter={};

        _.each(this.data.filters,function(filter,fieldName){
            varfield=self.fields[fieldName];

            new_filters[fieldName]=filter;
            if(filter.write_model){
                if(field.relation===self.model_color){
                    _.each(filter.filters,function(f){
                        f.color_index=f.value;
                    });
                }
                return;
            }

            _.each(filter.filters,function(filter){
                filter.display=!filter.active;
            });

            varfs=[];
            varundefined_fs=[];
            _.each(events,function(event){
                vardata= event.record[fieldName];
                if(!_.contains(['many2many','one2many'],field.type)){
                    data=[data];
                }else{
                    to_read[field.relation]=(to_read[field.relation]||[]).concat(data);
                }
                _.each(data,function(_value){
                    varvalue=_.isArray(_value)?_value[0]:_value;
                    varf={
                        'color_index':self.model_color===(field.relation||element.model)?value%30:false,
                        'value':value,
                        'label':fieldUtils.format[field.type](_value,field)||_t("Undefined"),
                        'avatar_model':field.relation||element.model,
                    };
                    //iffieldusedascolordoesnothavevaluethenpushfilterinundefined_fs,
                    //suchfiltersshouldcomelastinfilterlistwithUndefinedstring,latermergeitwithfs
                    value?fs.push(f):undefined_fs.push(f);
                });
            });
            _.each(_.union(fs,undefined_fs),function(f){
                varf1=_.findWhere(filter.filters,_.omit(f,'color_index'));
                if(f1){
                    f1.display=true;
                }else{
                    f.display=f.active=true;
                    filter.filters.push(f);
                }
            });

            if(filter.color_model&&filter.field_color){
                varids=filter.filters.reduce((acc,f)=>{
                    if(!f.color_index&&f.value){
                        acc.push(f.value);
                    }
                    returnacc;
                },[]);
                if(!color_filter[filter.color_model]){
                    color_filter[filter.color_model]={};
                }
                if(ids.length){
                    defs.push(self._rpc({
                        model:filter.color_model,
                        method:'search_read',
                        args:[[['id','in',_.uniq(ids)]],[filter.field_color]],
                    })
                    .then(function(res){
                        _.each(res,function(c){
                            color_filter[filter.color_model][c.id]=c[filter.field_color];
                        });
                    }));
                }
            }
        });

        _.each(to_read,function(ids,model){
            defs.push(self._rpc({
                    model:model,
                    method:'name_get',
                    args:[_.uniq(ids)],
                })
                .then(function(res){
                    to_read[model]=_.object(res);
                }));
        });
        returnPromise.all(defs).then(function(){
            _.each(self.data.filters,function(filter){
                if(filter.write_model){
                    return;
                }
                if(filter.filters.length&&(filter.filters[0].avatar_modelinto_read)){
                    _.each(filter.filters,function(f){
                        f.label=to_read[f.avatar_model][f.value];
                    });
                }
                if(filter.color_model&&filter.field_color){
                    _.each(filter.filters,function(f){
                        if(!f.color_index){
                            f.color_index=color_filter[filter.color_model]&&color_filter[filter.color_model][f.value];
                        }
                    });
                }
            });
        });
    },
    /**
     *parsetheservervaluestojavascriptframwork
     *
     *@private
     *@param{Object}datatheserverdatatoparse
     */
    _parseServerData:function(data){
        varself=this;
        _.each(data,function(event){
            _.each(self.fieldNames,function(fieldName){
                event[fieldName]=self._parseServerValue(self.fields[fieldName],event[fieldName]);
            });
        });
    },
    /**
     *TransformOpenERPeventobjecttofullcalendareventobject
     *
     *@private
     *@param{Object}evt
     */
    _recordToCalendarEvent:function(evt){
        vardate_start;
        vardate_stop;
        vardate_delay=evt[this.mapping.date_delay]||1.0,
            all_day=this.fields[this.mapping.date_start].type==='date'||
                this.mapping.all_day&&evt[this.mapping.all_day]||false,
            the_title='',
            attendees=[];

        if(!all_day){
            date_start=evt[this.mapping.date_start].clone();
            date_stop=this.mapping.date_stop?evt[this.mapping.date_stop].clone():null;
        }else{
            date_start=evt[this.mapping.date_start].clone().startOf('day');
            date_stop=this.mapping.date_stop?evt[this.mapping.date_stop].clone().startOf('day'):null;
        }

        if(!date_stop&&date_delay){
            date_stop=date_start.clone().add(date_delay,'hours');
        }

        if(!all_day){
            date_start.add(this.getSession().getTZOffset(date_start),'minutes');
            date_stop.add(this.getSession().getTZOffset(date_stop),'minutes');
        }

        if(this.mapping.all_day&&evt[this.mapping.all_day]){
            date_stop.add(1,'days');
        }
        varr={
            'record':evt,
            'start':date_start.local(true).toDate(),
            'end':date_stop.local(true).toDate(),
            'r_start':date_start.clone().local(true).toDate(),
            'r_end':date_stop.clone().local(true).toDate(),
            'title':the_title,
            'allDay':all_day,
            'id':evt.id,
            'attendees':attendees,
        };

        if(!(this.mapping.all_day&&evt[this.mapping.all_day])&&this.data.scale==='month'&&this.fields[this.mapping.date_start].type!=='date'){
            r.showTime=true;
        }

        returnr;
    },
});

});
