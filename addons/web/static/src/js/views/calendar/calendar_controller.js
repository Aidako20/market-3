flectra.define('web.CalendarController',function(require){
"usestrict";

/**
 *CalendarController
 *
 *ThisisthecontrollerintheModel-Renderer-Controllerarchitectureofthe
 *calendarview. Itsroleistocoordinatethedatafromthecalendarmodel
 *withtherenderer,andwiththeoutsideworld(suchasasearchviewinput)
 */

varAbstractController=require('web.AbstractController');
varcore=require('web.core');
varDialog=require('web.Dialog');
vardialogs=require('web.view_dialogs');
varQuickCreate=require('web.CalendarQuickCreate');

var_t=core._t;
varQWeb=core.qweb;

functiondateToServer(date,fieldType){
    date=date.clone().locale('en');
    if(fieldType==="date"){
        returndate.local().format('YYYY-MM-DD');
    }
    returndate.utc().format('YYYY-MM-DDHH:mm:ss');
}

varCalendarController=AbstractController.extend({
    custom_events:_.extend({},AbstractController.prototype.custom_events,{
        changeDate:'_onChangeDate',
        changeFilter:'_onChangeFilter',
        deleteRecord:'_onDeleteRecord',
        dropRecord:'_onDropRecord',
        next:'_onNext',
        openCreate:'_onOpenCreate',
        openEvent:'_onOpenEvent',
        prev:'_onPrev',
        quickCreate:'_onQuickCreate',
        updateRecord:'_onUpdateRecord',
        viewUpdated:'_onViewUpdated',
    }),
    events:_.extend({},AbstractController.prototype.events,{
        'clickbutton.o_calendar_button_new':'_onButtonNew',
        'clickbutton.o_calendar_button_prev':'_onButtonNavigation',
        'clickbutton.o_calendar_button_today':'_onButtonNavigation',
        'clickbutton.o_calendar_button_next':'_onButtonNavigation',
        'clickbutton.o_calendar_button_day':'_onButtonScale',
        'clickbutton.o_calendar_button_week':'_onButtonScale',
        'clickbutton.o_calendar_button_month':'_onButtonScale',
        'clickbutton.o_calendar_button_year':'_onButtonScale',
    }),
    /**
     *@override
     *@param{Widget}parent
     *@param{AbstractModel}model
     *@param{AbstractRenderer}renderer
     *@param{Object}params
     */
    init:function(parent,model,renderer,params){
        this._super.apply(this,arguments);
        this.current_start=null;
        this.displayName=params.displayName;
        this.quickAddPop=params.quickAddPop;
        this.disableQuickCreate=params.disableQuickCreate;
        this.eventOpenPopup=params.eventOpenPopup;
        this.showUnusualDays=params.showUnusualDays;
        this.formViewId=params.formViewId;
        this.readonlyFormViewId=params.readonlyFormViewId;
        this.mapping=params.mapping;
        this.context=params.context;
        this.previousOpen=null;
        //ThequickCreatingattributeensuresthatwedon'tdoseveralcreate
        this.quickCreating=false;
        this.scales=params.scales;
    },

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *RenderthebuttonsaccordingtotheCalendarView.buttonstemplateand
     *addlistenersonit.Setthis.$buttonswiththeproducedjQueryelement
     *
     *@param{jQuery}[$node]ajQuerynodewheretherenderedbuttons
     *  shouldbeinserted.$nodemaybeundefined,inwhichcasetheCalendar
     *  insertsthemintothis.options.$buttonsorintoadivofitstemplate
     */
    renderButtons:function($node){
        this.$buttons=$(QWeb.render('CalendarView.buttons',this._renderButtonsParameters()));

        this.$buttons.find('.o_calendar_button_'+this.mode).addClass('active');

        if($node){
            this.$buttons.appendTo($node);
        }else{
            this.$('.o_calendar_buttons').replaceWith(this.$buttons);
        }
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *FindaclassNameinanarrayusingthestartofthisclassand
     *returnthelastpartofastring
     *@private
     *@param{string}startClassNamestartofstringtofindinthe"array"
     *@param{array|DOMTokenList}classListarrayofallclass
     *@return{string|undefined}
     */
    _extractLastPartOfClassName(startClassName,classList){
        varresult;
        classList.forEach(function(value){
            if(value&&value.indexOf(startClassName)===0){
                result=value.substring(startClassName.length);
            }
        });
        returnresult;
    },
    /**
     *Movetotherequesteddirectionandreloadtheview
     *
     *@private
     *@param{string}toeither'prev','next'or'today'
     *@returns{Promise}
     */
    _move:function(to){
        this.model[to]();
        returnthis.reload();
    },
    /**
     *ParametersendtoQWebtorenderthetemplateofButtons
     *
     *@private
     *@return{{}}
     */
    _renderButtonsParameters(){
        return{
            scales:this.scales,
        };
    },
    /**
     *@override
     *@private
     */
    _update:function(){
        varself=this;
        if(!this.showUnusualDays){
            returnthis._super.apply(this,arguments);
        }
        returnthis._super.apply(this,arguments).then(function(){
            self._rpc({
                model:self.modelName,
                method:'get_unusual_days',
                args:[dateToServer(self.model.data.start_date,'date'),dateToServer(self.model.data.end_date,'date')],
                context:self.context,
            }).then(function(data){
                _.each(self.$el.find('td.fc-day'),function(td){
                    var$td=$(td);
                    if(data[$td.data('date')]){
                        $td.addClass('o_calendar_disabled');
                    }
                });
            });
        });
    },
    /**
     *@private
     *@param{Object}record
     *@param{integer}record.id
     *@returns{Promise}
     */
    _updateRecord:function(record){
        varreload=this.reload.bind(this,{});
        returnthis.model.updateRecord(record).then(reload,reload);
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *Handlerwhenauserclicksonbuttontocreateevent
     *
     *@private
     */
    _onButtonNew(){
        this.trigger_up('switch_view',{view_type:'form'});
    },
    /**
     *Handlerwhenauserclickonnavigationbuttonlikeprev,next,...
     *
     *@private
     *@param{Event|jQueryEvent}jsEvent
     */
    _onButtonNavigation(jsEvent){
        constaction=this._extractLastPartOfClassName('o_calendar_button_',jsEvent.currentTarget.classList);
        if(action){
            this._move(action);
        }
    },
    /**
     *Handlerwhenauserclickonscalebuttonlikeday,month,...
     *
     *@private
     *@param{Event|jQueryEvent}jsEvent
     */
    _onButtonScale(jsEvent){
        constscale=this._extractLastPartOfClassName('o_calendar_button_',jsEvent.currentTarget.classList);
        if(scale){
            this.model.setScale(scale);
            this.reload();
        }
    },

    /**
     *@private
     *@param{FlectraEvent}event
     */
    _onChangeDate:function(event){
        varmodelData=this.model.get();
        if(modelData.target_date.format('YYYY-MM-DD')===event.data.date.format('YYYY-MM-DD')){
            //Whenclickingonsamedate,togglebetweenthetwoviews
            switch(modelData.scale){
                case'month':this.model.setScale('week');break;
                case'week':this.model.setScale('day');break;
                case'day':this.model.setScale('month');break;
            }
        }elseif(modelData.target_date.week()===event.data.date.week()){
            //Whenclickingonadateinthesameweek,switchtodayview
            this.model.setScale('day');
        }else{
            //Whenclickingonarandomdayofarandomotherweek,switchtoweekview
            this.model.setScale('week');
        }
        this.model.setDate(event.data.date);
        this.reload();
    },
    /**
     *@private
     *@param{FlectraEvent}event
     */
    _onChangeFilter:function(event){
        if(this.model.changeFilter(event.data)&&!event.data.no_reload){
            this.reload();
        }
    },
    /**
     *@private
     *@param{FlectraEvent}event
     */
    _onDeleteRecord:function(event){
        varself=this;
        Dialog.confirm(this,_t("Areyousureyouwanttodeletethisrecord?"),{
            confirm_callback:function(){
                self.model.deleteRecords([event.data.id],self.modelName).then(function(){
                    self.reload();
                });
            }
        });
    },
    /**
     *@private
     *@param{FlectraEvent}event
     */
    _onDropRecord:function(event){
        this._updateRecord(_.extend({},event.data,{
            'drop':true,
        }));
    },
    /**
     *@private
     *@param{FlectraEvent}event
     */
    _onNext:function(event){
        event.stopPropagation();
        this._move('next');
    },
    /**
     *@private
     *@param{FlectraEvent}event
     */
    _onOpenCreate:function(event){
        varself=this;
        if(["year","month"].includes(this.model.get().scale)){
            event.data.allDay=true;
        }
        vardata=this.model.calendarEventToRecord(event.data);

        varcontext=_.extend({},this.context,event.options&&event.options.context);
        //contextdefaulthasmorepriorityindefault_getsoifdata.nameisfalsethenitmay
        //leadtoerror/warningwhilesavingrecordinformviewasnamefieldcanberequired
        if(data.name){
            context.default_name=data.name;
        }
        context['default_'+this.mapping.date_start]=data[this.mapping.date_start]||null;
        if(this.mapping.date_stop){
            context['default_'+this.mapping.date_stop]=data[this.mapping.date_stop]||null;
        }
        if(this.mapping.date_delay){
            context['default_'+this.mapping.date_delay]=data[this.mapping.date_delay]||null;
        }
        if(this.mapping.all_day){
            context['default_'+this.mapping.all_day]=data[this.mapping.all_day]||null;
        }

        for(varkincontext){
            if(context[k]&&context[k]._isAMomentObject){
                context[k]=dateToServer(context[k]);
            }
        }

        varoptions=_.extend({},this.options,event.options,{
            context:context,
            title:_.str.sprintf(_t('Create:%s'),(this.displayName||this.renderer.arch.attrs.string))
        });

        if(this.quick!=null){
            this.quick.destroy();
            this.quick=null;
        }

        if(!options.disableQuickCreate&&!event.data.disableQuickCreate&&this.quickAddPop){
            this.quick=newQuickCreate(this,true,options,data,event.data);
            this.quick.open();
            this.quick.opened(function(){
                self.quick.focus();
            });
            return;
        }

        vartitle=_t("Create");
        if(this.renderer.arch.attrs.string){
            title+=':'+this.renderer.arch.attrs.string;
        }
        if(this.eventOpenPopup){
            if(this.previousOpen){this.previousOpen.close();}
            this.previousOpen=newdialogs.FormViewDialog(self,{
                res_model:this.modelName,
                context:context,
                title:title,
                view_id:this.formViewId||false,
                disable_multiple_selection:true,
                on_saved:function(){
                    if(event.data.on_save){
                        event.data.on_save();
                    }
                    self.reload();
                },
            });
            this.previousOpen.open();
        }else{
            this.do_action({
                type:'ir.actions.act_window',
                res_model:this.modelName,
                views:[[this.formViewId||false,'form']],
                target:'current',
                context:context,
            });
        }
    },
    /**
     *@private
     *@param{FlectraEvent}event
     */
    _onOpenEvent:function(event){
        varself=this;
        varid=event.data._id;
        id=id&&parseInt(id).toString()===id?parseInt(id):id;

        if(!this.eventOpenPopup){
            this._rpc({
                model:self.modelName,
                method:'get_formview_id',
                //Theeventcanbecalledbyaviewthatcanhaveanothercontextthanthedefaultone.
                args:[[id]],
                context:event.context||self.context,
            }).then(function(viewId){
                self.do_action({
                    type:'ir.actions.act_window',
                    res_id:id,
                    res_model:self.modelName,
                    views:[[viewId||false,'form']],
                    target:'current',
                    context:event.context||self.context,
                });
            });
            return;
        }

        varoptions={
            res_model:self.modelName,
            res_id:id||null,
            context:event.context||self.context,
            title:_t("Open:")+_.escape(event.data.title),
            on_saved:function(){
                if(event.data.on_save){
                    event.data.on_save();
                }
                self.reload();
            },
        };
        if(this.formViewId){
            options.view_id=parseInt(this.formViewId);
        }
        newdialogs.FormViewDialog(this,options).open();
    },
    /**
     *@private
     *@param{FlectraEvent}event
     */
    _onPrev:function(){
        event.stopPropagation();
        this._move('prev');
    },

    /**
     *Handlessavingdatacomingfromquickcreatebox
     *
     *@private
     *@param{FlectraEvent}event
     */
    _onQuickCreate:function(event){
        varself=this;
        if(this.quickCreating){
            return;
        }
        this.quickCreating=true;
        this.model.createRecord(event)
            .then(function(){
                self.quick.destroy();
                self.quick=null;
                self.reload();
                self.quickCreating=false;
            })
            .guardedCatch(function(result){
                varerrorEvent=result.event;
                //Thiswilloccursiftherearesomemorefieldsrequired
                //Preventdefaultingtheerroreventwillpreventthetracebackwindow
                errorEvent.preventDefault();
                event.data.options.disableQuickCreate=true;
                event.data.data.on_save=self.quick.destroy.bind(self.quick);
                self._onOpenCreate(event.data);
                self.quickCreating=false;
            });
    },
    /**
     *@private
     *@param{FlectraEvent}event
     */
    _onUpdateRecord:function(event){
        this._updateRecord(event.data);
    },
    /**
     *Theinternalstateofthecalendar(mode,perioddisplayed)haschanged,
     *soupdatethecontrolpanelbuttonsandbreadcrumbsaccordingly.
     *
     *@private
     *@param{FlectraEvent}event
     */
    _onViewUpdated:function(event){
        this.mode=event.data.mode;
        if(this.$buttons){
            this.$buttons.find('.active').removeClass('active');
            this.$buttons.find('.o_calendar_button_'+this.mode).addClass('active');
        }
        consttitle=`${this.displayName}(${event.data.title})`;
        returnthis.updateControlPanel({title});
    },
});

returnCalendarController;

});
