flectra.define('web.CalendarPopover',function(require){
"usestrict";

varfieldRegistry=require('web.field_registry');
constfieldRegistryOwl=require('web.field_registry_owl');
constFieldWrapper=require('web.FieldWrapper');
varStandaloneFieldManagerMixin=require('web.StandaloneFieldManagerMixin');
varWidget=require('web.Widget');
const{WidgetAdapterMixin}=require('web.OwlCompatibility');

varCalendarPopover=Widget.extend(WidgetAdapterMixin,StandaloneFieldManagerMixin,{
    template:'CalendarView.event.popover',
    events:{
        'click.o_cw_popover_edit':'_onClickPopoverEdit',
        'click.o_cw_popover_delete':'_onClickPopoverDelete',
    },
    /**
     *@constructor
     *@param{Widget}parent
     *@param{Object}eventInfo
     */
    init:function(parent,eventInfo){
        this._super.apply(this,arguments);
        StandaloneFieldManagerMixin.init.call(this);
        this.hideDate=eventInfo.hideDate;
        this.hideTime=eventInfo.hideTime;
        this.eventTime=eventInfo.eventTime;
        this.eventDate=eventInfo.eventDate;
        this.displayFields=eventInfo.displayFields;
        this.fields=eventInfo.fields;
        this.event=eventInfo.event;
        this.modelName=eventInfo.modelName;
        this._canDelete=eventInfo.canDelete;
    },
    /**
     *@override
     */
    willStart:function(){
        returnPromise.all([this._super.apply(this,arguments),this._processFields()]);
    },
    /**
     *@override
     */
    start:function(){
        varself=this;
        _.each(this.$fieldsList,function($field){
            $field.appendTo(self.$('.o_cw_popover_fields_secondary'));
        });
        returnthis._super.apply(this,arguments);
    },
    /**
     *@override
     */
    destroy:function(){
        this._super.apply(this,arguments);
        WidgetAdapterMixin.destroy.call(this);
    },
    /**
     *CalledeachtimethewidgetisattachedintotheDOM.
     */
    on_attach_callback:function(){
        WidgetAdapterMixin.on_attach_callback.call(this);
    },
    /**
     *CalledeachtimethewidgetisdetachedfromtheDOM.
     */
    on_detach_callback:function(){
        WidgetAdapterMixin.on_detach_callback.call(this);
    },

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *@return{boolean}
     */
    isEventDeletable(){
        returnthis._canDelete;;
    },
    /**
     *@return{boolean}
     */
    isEventDetailsVisible(){
        returntrue;
    },
    /**
     *@return{boolean}
     */
    isEventEditable(){
        returntrue;
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *Generatefieldstorenderintopopover
     *
     *@private
     *@returns{Promise}
     */
    _processFields:function(){
        varself=this;
        varfieldsToGenerate=[];
        varfields=_.keys(this.displayFields);
        for(vari=0;i<fields.length;i++){
            varfieldName=fields[i];
            vardisplayFieldInfo=self.displayFields[fieldName]||{attrs:{invisible:1}};
            varfieldInfo=self.fields[fieldName];
            varfield={
                name:fieldName,
                string:displayFieldInfo.attrs.string||fieldInfo.string,
                value:self.event.extendedProps.record[fieldName],
                type:fieldInfo.type,
                invisible:displayFieldInfo.attrs.invisible,
            };
            if(field.type==='selection'){
                field.selection=fieldInfo.selection;
            }
            if(field.type==='monetary'){
                varcurrencyField=field.currency_field||'currency_id';
                if(!fields.includes(currencyField)&&_.has(self.event.extendedProps.record,currencyField)){
                    fields.push(currencyField);
                }
            }
            if(fieldInfo.relation){
                field.relation=fieldInfo.relation;
            }
            if(displayFieldInfo.attrs.widget){
                field.widget=displayFieldInfo.attrs.widget;
            }elseif(_.contains(['many2many','one2many'],field.type)){
                field.widget='many2many_tags';
            }
            if(_.contains(['many2many','one2many'],field.type)){
                field.fields=[{
                    name:'id',
                    type:'integer',
                },{
                    name:'display_name',
                    type:'char',
                }];
            }
            fieldsToGenerate.push(field);
        };

        this.$fieldsList=[];
        returnthis.model.makeRecord(this.modelName,fieldsToGenerate).then(function(recordID){
            vardefs=[];

            varrecord=self.model.get(recordID);
            _.each(fieldsToGenerate,function(field){
                if(field.invisible)return;
                letisLegacy=true;
                letfieldWidget;
                letFieldClass=fieldRegistryOwl.getAny([field.widget,field.type]);
                if(FieldClass){
                    isLegacy=false;
                    fieldWidget=newFieldWrapper(this,FieldClass,{
                        fieldName:field.name,
                        record,
                        options:self.displayFields[field.name],
                    });
                }else{
                    FieldClass=fieldRegistry.getAny([field.widget,field.type]);
                    fieldWidget=newFieldClass(self,field.name,record,self.displayFields[field.name]);
                }
                if(fieldWidget.attrs&&!_.isObject(fieldWidget.attrs.modifiers)){
                    fieldWidget.attrs.modifiers=fieldWidget.attrs.modifiers?JSON.parse(fieldWidget.attrs.modifiers):{};
                }
                self._registerWidget(recordID,field.name,fieldWidget);

                var$field=$('<li>',{class:'list-group-itemflex-shrink-0d-flexflex-wrap'});
                var$fieldLabel=$('<strong>',{class:'mr-2',text:_.str.sprintf('%s:',field.string)});
                $fieldLabel.appendTo($field);
                var$fieldContainer=$('<div>',{class:'flex-grow-1'});
                $fieldContainer.appendTo($field);

                letdef;
                if(isLegacy){
                    def=fieldWidget.appendTo($fieldContainer);
                }else{
                    def=fieldWidget.mount($fieldContainer[0]);
                }
                self.$fieldsList.push($field);
                defs.push(def);
            });
            returnPromise.all(defs);
        });
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *@private
     *@param{jQueryEvent}ev
     */
    _onClickPopoverEdit:function(ev){
        ev.preventDefault();
        this.trigger_up('edit_event',{
            id:this.event.id,
            title:this.event.extendedProps.record.display_name,
        });
    },
    /**
     *@private
     *@param{jQueryEvent}ev
     */
    _onClickPopoverDelete:function(ev){
        ev.preventDefault();
        this.trigger_up('delete_event',{id:this.event.id});
    },
});

returnCalendarPopover;

});
