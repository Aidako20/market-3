flectra.define('web.SampleServer',function(require){
    "usestrict";

    constsession=require('web.session');
    constutils=require('web.utils');
    constRegistry=require('web.Registry');

    classUnimplementedRouteErrorextendsError{}

    /**
     *Helperfunctionreturningthevaluefromalistofsamplestrings
     *correspondingtothegivenID.
     *@param{number}id
     *@param{string[]}sampleTexts
     *@returns{string}
     */
    functiongetSampleFromId(id,sampleTexts){
        returnsampleTexts[(id-1)%sampleTexts.length];
    }

    /**
     *Helperfunctionreturningaregularexpressionspecificallymatching
     *agiven'term'inafieldName.Forexample`fieldNameRegex('abc')`:
     *willmatch:
     *-"abc"
     *-"field_abc__def"
     *willnotmatch:
     *-"aabc"
     *-"abcd_ef"
     *@param{...string}term
     *@returns{RegExp}
     */
    functionfieldNameRegex(...terms){
        returnnewRegExp(`\\b((\\w+)?_)?(${terms.join('|')})(_(\\w+)?)?\\b`);
    }

    constDESCRIPTION_REGEX=fieldNameRegex('description','label','title','subject','message');
    constEMAIL_REGEX=fieldNameRegex('email');
    constPHONE_REGEX=fieldNameRegex('phone');
    constURL_REGEX=fieldNameRegex('url');

    /**
     *Sampleserverclass
     *
     *RepresentsastaticinstanceoftheserverusedwhenaRPCcallsends
     *emptyvalues/groupswhiletheattribute'sample'issettotrueonthe
     *view.
     *
     *Thisserverwillgeneratefakedataandsendthemintheadequateformat
     *accordingtotheroute/methodusedintheRPC.
     */
    classSampleServer{

        /**
         *@param{string}modelName
         *@param{Object}fields
         */
        constructor(modelName,fields){
            this.mainModel=modelName;
            this.data={};
            this.data[modelName]={
                fields,
                records:[],
            };
            //Generaterelationalfields'comodels
            for(constfieldNameinfields){
                constfield=fields[fieldName];
                if(['many2one','one2many','many2many'].includes(field.type)){
                    this.data[field.relation]=this.data[field.relation]||{
                        fields:{
                            display_name:{type:'char'},
                            id:{type:'integer'},
                            color:{type:'integer'},
                        },
                        records:[],
                    };
                }
            }
            //Onsomemodels,emptygroupedKanbanorListviewstillcontain
            //real(empty)groups.Inthiscase,were-usetheresultofthe
            //web_read_grouprpctotweaksampledatas.t.thoserealgroups
            //containsamplerecords.
            this.existingGroups=null;
            //Samplerecordsgenerationisonlydoneifnecessary,sowedelay
            //ittothefirst"mockRPC"call.Theseflagsallowustoknowif
            //therecordshavebeengeneratedornot.
            this.populated=false;
            this.existingGroupsPopulated=false;
        }

        //---------------------------------------------------------------------
        //Public
        //---------------------------------------------------------------------

        /**
         *ThisisthemainentrypointoftheSampleServer.Mocksarequestto
         *theserverwithsampledata.
         *@param{Object}params
         *@returns{any}theresultobtainedwiththesampledata
         *@throws{Error}Ifcalledonaroute/methodwedonothandle
         */
        mockRpc(params){
            if(!(params.modelinthis.data)){
                thrownewError(`SampleServer:unknownmodel${params.model}`);
            }
            this._populateModels();
            switch(params.method||params.route){
                case'/web/dataset/search_read':
                    returnthis._mockSearchReadController(params);
                case'web_read_group':
                    returnthis._mockWebReadGroup(params);
                case'read_group':
                    returnthis._mockReadGroup(params);
                case'read_progress_bar':
                    returnthis._mockReadProgressBar(params);
                case'read':
                    returnthis._mockRead(params);
            }
            //thisrpccan'tbemockedbytheSampleServeritself,socheckifthereisanhandler
            //inthemockRegistry:eitherspecificforthismodel(withkey'model/method'),or
            //global(withkey'method')
            constmethod=params.method||params.route;
            constmockFunction=SampleServer.mockRegistry.get(`${params.model}/${method}`)||
                                 SampleServer.mockRegistry.get(method);
            if(mockFunction){
                returnmockFunction.call(this,params);
            }
            console.log(`SampleServer:unimplementedroute"${params.method||params.route}"`);
            thrownewSampleServer.UnimplementedRouteError();
        }

        setExistingGroups(groups){
            this.existingGroups=groups;
        }

        //---------------------------------------------------------------------
        //Private
        //---------------------------------------------------------------------

        /**
         *@param{Object[]}measures,eachmeasurehastheform{fieldName,type}
         *@param{Object[]}records
         *@returns{Object}
         */
        _aggregateFields(measures,records){
            constvalues={};
            for(const{fieldName,type}ofmeasures){
                if(['float','integer','monetary'].includes(type)){
                    if(records.length){
                        letvalue=0;
                        for(constrecordofrecords){
                            value+=record[fieldName];
                        }
                        values[fieldName]=this._sanitizeNumber(value);
                    }else{
                        values[fieldName]=null;
                    }
                }
                if(type==='many2one'){
                    constids=newSet(records.map(r=>r[fieldName]));
                    values.fieldName=ids.size||null;
                }
            }
            returnvalues;
        }

        /**
         *@param{any}value
         *@param{Object}options
         *@param{string}[options.interval]
         *@param{string}[options.relation]
         *@param{string}[options.type]
         *@returns{any}
         */
        _formatValue(value,options){
            if(!value){
                returnfalse;
            }
            const{type,interval,relation}=options;
            if(['date','datetime'].includes(type)){
                constfmt=SampleServer.FORMATS[interval];
                returnmoment(value).format(fmt);
            }elseif(type==='many2one'){
                constrec=this.data[relation].records.find(({id})=>id===value);
                return[value,rec.display_name];
            }else{
                returnvalue;
            }
        }

        /**
         *Generatesfieldvaluesbasedonheuristicsaccordingtofieldtypes
         *andnames.
         *
         *@private
         *@param{string}modelName
         *@param{string}fieldName
         *@param{number}idtherecordid
         *@returns{any}thefieldvalue
         */
        _generateFieldValue(modelName,fieldName,id){
            constfield=this.data[modelName].fields[fieldName];
            switch(field.type){
                case"boolean":
                    returnfieldName==='active'?true:this._getRandomBool();
                case"char":
                case"text":
                    if(["display_name","name"].includes(fieldName)){
                        if(SampleServer.PEOPLE_MODELS.includes(modelName)){
                            returngetSampleFromId(id,SampleServer.SAMPLE_PEOPLE);
                        }elseif(modelName==='res.country'){
                            returngetSampleFromId(id,SampleServer.SAMPLE_COUNTRIES);
                        }
                    }
                    if(fieldName==='display_name'){
                        returngetSampleFromId(id,SampleServer.SAMPLE_TEXTS);
                    }elseif(["name","reference"].includes(fieldName)){
                        return`REF${String(id).padStart(4,'0')}`;
                    }elseif(DESCRIPTION_REGEX.test(fieldName)){
                        returngetSampleFromId(id,SampleServer.SAMPLE_TEXTS);
                    }elseif(EMAIL_REGEX.test(fieldName)){
                        constemailName=getSampleFromId(id,SampleServer.SAMPLE_PEOPLE)
                            .replace(//,".")
                            .toLowerCase();
                        return`${emailName}@sample.demo`;
                    }elseif(PHONE_REGEX.test(fieldName)){
                        return`+1555754${String(id).padStart(4,'0')}`;
                    }elseif(URL_REGEX.test(fieldName)){
                        return`http://sample${id}.com`;
                    }
                    returnfalse;
                case"date":
                case"datetime":{
                    constformat=field.type==="date"?
                        "YYYY-MM-DD":
                        "YYYY-MM-DDHH:mm:ss";
                    returnthis._getRandomDate(format);
                }
                case"float":
                    returnthis._getRandomFloat(SampleServer.MAX_FLOAT);
                case"integer":{
                    letmax=SampleServer.MAX_INTEGER;
                    if(fieldName.includes('color')){
                        max=this._getRandomBool()?SampleServer.MAX_COLOR_INT:0;
                    }
                    returnthis._getRandomInt(max);
                }
                case"monetary":
                    returnthis._getRandomInt(SampleServer.MAX_MONETARY);
                case"many2one":
                    if(field.relation==='res.currency'){
                        returnsession.company_currency_id;
                    }
                    if(field.relation==='ir.attachment'){
                        returnfalse;
                    }
                    returnthis._getRandomSubRecordId();
                case"one2many":
                case"many2many":{
                    constids=[this._getRandomSubRecordId(),this._getRandomSubRecordId()];
                    return[...newSet(ids)];
                }
                case"selection":{
                    //Ihopedwewouldn'thavetoimplementsuchspecialcases,buthereitis.
                    //Ifthis(mail)fieldisset,'Warning'isdisplayedinsteadofthelast
                    //activity,andwedon'twanttoseeabunchof'Warning'sinalist.Inthe
                    //future,ifwehavetoimplementseveralspecialcaseslikethat,we'llsetup
                    //aproperhooktoallowexternalmodulestodefineextensionsofthisfunction.
                    //Fornow,aswehaveonlyoneusecase,Iguessthatdoingithereisfine.
                    if(fieldName==='activity_exception_decoration'){
                        returnfalse;
                    }
                    if(field.selection.length>0){
                        returnthis._getRandomArrayEl(field.selection)[0];
                    }
                    returnfalse;
                }
                default:
                    returnfalse;
            }
        }

        /**
         *@private
         *@param{any[]}array
         *@returns{any}
         */
        _getRandomArrayEl(array){
            returnarray[Math.floor(Math.random()*array.length)];
        }

        /**
         *@private
         *@returns{boolean}
         */
        _getRandomBool(){
            returnMath.random()<0.5;
        }

        /**
         *@private
         *@param{string}format
         *@returns{moment}
         */
        _getRandomDate(format){
            constdelta=Math.floor(
                (Math.random()-Math.random())*SampleServer.DATE_DELTA
            );
            returnnewmoment()
                .add(delta,"hour")
                .format(format);
        }

        /**
         *@private
         *@param{number}max
         *@returns{number}floatin[O,max[
         */
        _getRandomFloat(max){
            returnthis._sanitizeNumber(Math.random()*max);
        }

        /**
         *@private
         *@param{number}max
         *@returns{number}intin[0,max[
         */
        _getRandomInt(max){
            returnMath.floor(Math.random()*max);
        }

        /**
         *@private
         *@returns{number}idin[1,SUB_RECORDSET_SIZE]
         */
        _getRandomSubRecordId(){
            returnMath.floor(Math.random()*SampleServer.SUB_RECORDSET_SIZE)+1;
        }
        /**
         *Mockscallstothereadmethod.
         *@private
         *@param{Object}params
         *@param{string}params.model
         *@param{Array[]}params.args(args[0]isthelistofids,args[1]is
         *  thelistoffields)
         *@returns{Object[]}
         */
        _mockRead(params){
            constmodel=this.data[params.model];
            constids=params.args[0];
            constfieldNames=params.args[1];
            constrecords=[];
            for(constrofmodel.records){
                if(!ids.includes(r.id)){
                    continue;
                }
                constrecord={id:r.id};
                for(constfieldNameoffieldNames){
                    constfield=model.fields[fieldName];
                    if(!field){
                        record[fieldName]=false;//unknownfield
                    }elseif(field.type==='many2one'){
                        constrelModel=this.data[field.relation];
                        constrelRecord=relModel.records.find(
                            relR=>r[fieldName]===relR.id
                        );
                        record[fieldName]=relRecord?
                            [relRecord.id,relRecord.display_name]:
                            false;
                    }else{
                        record[fieldName]=r[fieldName];
                    }
                }
                records.push(record);
            }
            returnrecords;
        }

        /**
         *Mockscallstotheread_groupmethod.
         *
         *@param{Object}params
         *@param{string}params.model
         *@param{string[]}[params.fields]defaultstothelistofallfields
         *@param{string[]}params.groupBy
         *@param{boolean}[params.lazy=true]
         *@returns{Object[]}Objectwithkeysgroupsandlength
         */
        _mockReadGroup(params){
            constlazy='lazy'inparams?params.lazy:true;
            constmodel=params.model;
            constfields=this.data[model].fields;
            constrecords=this.data[model].records;

            constnormalizedGroupBys=[];
            letgroupBy=[];
            if(params.groupBy.length){
                groupBy=lazy?[params.groupBy[0]]:params.groupBy;
            }
            for(constgroupBySpecofgroupBy){
                let[fieldName,interval]=groupBySpec.split(':');
                interval=interval||'month';
                const{type,relation}=fields[fieldName];
                if(type){
                    constgb={fieldName,type,interval,relation,alias:groupBySpec};
                    normalizedGroupBys.push(gb);
                }
            }
            constgroups=utils.groupBy(records,(record)=>{
                constvals={};
                for(constgbofnormalizedGroupBys){
                    const{fieldName,type}=gb;
                    letvalue;
                    if(['date','datetime'].includes(type)){
                        value=this._formatValue(record[fieldName],gb);
                    }else{
                        value=record[fieldName];
                    }
                    vals[fieldName]=value;
                }
                returnJSON.stringify(vals);
            });
            constmeasures=[];
            for(constmeasureSpecof(params.fields||Object.keys(fields))){
                const[fieldName,aggregateFunction]=measureSpec.split(':');
                const{type}=fields[fieldName];
                if(!params.groupBy.includes(fieldName)&&type&&
                (type!=='many2one'||aggregateFunction!=='count_distinct')){
                    measures.push({fieldName,type});
                }
            }

            letresult=[];
            for(constidingroups){
                constrecords=groups[id];
                constgroup={__domain:[]};
                letcountKey=`__count`;
                if(normalizedGroupBys.length&&lazy){
                    countKey=`${normalizedGroupBys[0].fieldName}_count`;
                }
                group[countKey]=records.length;
                constfirstElem=records[0];
                for(constgbofnormalizedGroupBys){
                    const{alias,fieldName}=gb;
                    group[alias]=this._formatValue(firstElem[fieldName],gb);
                }
                Object.assign(group,this._aggregateFields(measures,records));
                result.push(group);
            }
            if(normalizedGroupBys.length>0){
                const{alias,interval,type}=normalizedGroupBys[0];
                result=utils.sortBy(result,(group)=>{
                    constval=group[alias];
                    if(['date','datetime'].includes(type)){
                        returnmoment(val,SampleServer.FORMATS[interval]);
                    }
                    returnval;
                });
            }
            returnresult;
        }

        /**
         *Mockscallstotheread_progress_barmethod.
         *@private
         *@param{Object}params
         *@param{string}params.model
         *@param{Object}params.kwargs
         *@return{Object}
         */
        _mockReadProgressBar(params){
            constgroupBy=params.kwargs.group_by;
            constprogress_bar=params.kwargs.progress_bar;
            constgroupByField=this.data[params.model].fields[groupBy];
            constdata={};
            for(constrecordofthis.data[params.model].records){
                letgroupByValue=record[groupBy];
                if(groupByField.type==="many2one"){
                    constrelatedRecords=this.data[groupByField.relation].records;
                    constrelatedRecord=relatedRecords.find(r=>r.id===groupByValue);
                    groupByValue=relatedRecord.display_name;
                }
                if(!(groupByValueindata)){
                    data[groupByValue]={};
                    for(constkeyinprogress_bar.colors){
                        data[groupByValue][key]=0;
                    }
                }
                constfieldValue=record[progress_bar.field];
                if(fieldValueindata[groupByValue]){
                    data[groupByValue][fieldValue]++;
                }
            }
            returndata;
        }

        /**
         *Mockscallstothe/web/dataset/search_readroutetoreturnsample
         *records.
         *@private
         *@param{Object}params
         *@param{string}params.model
         *@param{string[]}params.fields
         *@returns{{records:Object[],length:number}}
         */
        _mockSearchReadController(params){
            constmodel=this.data[params.model];
            constrawRecords=model.records.slice(0,SampleServer.SEARCH_READ_LIMIT);
            constrecords=this._mockRead({
                model:params.model,
                args:[rawRecords.map(r=>r.id),params.fields],
            });
            return{records,length:records.length};
        }

        /**
         *Mockscallstotheweb_read_groupmethodtoreturngroupspopulated
         *withsamplerecords.Onlyhandlesthecasewheretherealcallto
         *web_read_groupreturnedgroups,butnoneofthesegroupscontain
         *records.Inthiscase,wekeeptherealgroups,andpopulatethem
         *withsamplerecords.
         *@private
         *@param{Object}params
         *@param{Object}[result]theresultofarealcalltoweb_read_group
         *@returns{{groups:Object[],length:number}}
         */
        _mockWebReadGroup(params){
            letgroups;
            if(this.existingGroups){
                this._tweakExistingGroups(params);
                groups=this.existingGroups;
            }else{
                groups=this._mockReadGroup(params);
            }
            return{
                groups,
                length:groups.length,
            };
        }

        /**
         *Updatesthesampledatasuchthattheexistinggroups(indatabase)
         *alsoexistsinthesample,andsuchthattherearesamplerecordsin
         *thosegroups.
         *@private
         *@param{Object[]}groupsemptygroupsreturnedbytheserver
         *@param{Object}params
         *@param{string}params.model
         *@param{string[]}params.groupBy
         */
        _populateExistingGroups(params){
            if(!this.existingGroupsPopulated){
                constgroups=this.existingGroups;
                this.groupsInfo=groups;
                constgroupBy=params.groupBy[0];
                constvalues=groups.map(g=>g[groupBy]);
                constgroupByField=this.data[params.model].fields[groupBy];
                constgroupedByM2O=groupByField.type==='many2one';
                if(groupedByM2O){//re-populatecomodelwithrelevantrecords
                    this.data[groupByField.relation].records=values.map(v=>{
                        return{id:v[0],display_name:v[1]};
                    });
                }
                for(constrofthis.data[params.model].records){
                    constvalue=getSampleFromId(r.id,values);
                    r[groupBy]=groupedByM2O?value[0]:value;
                }
                this.existingGroupsPopulated=true;
            }
        }

        /**
         *Generatessamplerecordsforthemodelsinthis.data.Recordswillbe
         *generatedonce,andsubsequentcallstothisfunctionwillbeskipped.
         *@private
         */
        _populateModels(){
            if(!this.populated){
                for(constmodelNameinthis.data){
                    constmodel=this.data[modelName];
                    constfieldNames=Object.keys(model.fields).filter(f=>f!=='id');
                    constsize=modelName===this.mainModel?
                        SampleServer.MAIN_RECORDSET_SIZE:
                        SampleServer.SUB_RECORDSET_SIZE;
                    for(letid=1;id<=size;id++){
                        constrecord={id};
                        for(constfieldNameoffieldNames){
                            record[fieldName]=this._generateFieldValue(modelName,fieldName,id);
                        }
                        model.records.push(record);
                    }
                }
                this.populated=true;
            }
        }

        /**
         *Roundsthegivennumbervalueaccordingtotheconfiguredprecision.
         *@private
         *@param{number}value
         *@returns{number}
         */
        _sanitizeNumber(value){
            returnparseFloat(value.toFixed(SampleServer.FLOAT_PRECISION));
        }

        /**
         *Areal(web_)read_groupcallhasbeendone,andithasreturnedgroups,
         *buttheyareallempty.Thisfunctionupdatesthesampledatasuch
         *thatthosegroupvaluesexistandthosegroupscontainsamplerecords.
         *@private
         *@param{Object[]}groupsemptygroupsreturnedbytheserver
         *@param{Object}params
         *@param{string}params.model
         *@param{string[]}params.fields
         *@param{string[]}params.groupBy
         *@returns{Object[]}groupswithcountandaggregatevaluesupdated
         *
         *TODO:rename
         */
        _tweakExistingGroups(params){
            constgroups=this.existingGroups;
            this._populateExistingGroups(params);

            //updatecountandaggregatesforeachgroup
            constgroupBy=params.groupBy[0].split(':')[0];
            constgroupByField=this.data[params.model].fields[groupBy];
            constgroupedByM2O=groupByField.type==='many2one';
            constrecords=this.data[params.model].records;
            for(constgofgroups){
                constgroupValue=groupedByM2O?g[groupBy][0]:g[groupBy];
                constrecordsInGroup=records.filter(r=>r[groupBy]===groupValue);
                g[`${groupBy}_count`]=recordsInGroup.length;
                for(constfieldofparams.fields){
                    constfieldType=this.data[params.model].fields[field].type;
                    if(['integer,float','monetary'].includes(fieldType)){
                        g[field]=recordsInGroup.reduce((acc,r)=>acc+r[field],0);
                    }
                }
                g.__data={
                    records:this._mockRead({
                        model:params.model,
                        args:[recordsInGroup.map(r=>r.id),params.fields],
                    }),
                    length:recordsInGroup.length,
                };
            }
        }
    }

    SampleServer.FORMATS={
        day:'YYYY-MM-DD',
        week:'[W]wwYYYY',
        month:'MMMMYYYY',
        quarter:'[Q]QYYYY',
        year:'Y',
    };
    SampleServer.DISPLAY_FORMATS=Object.assign({},SampleServer.FORMATS,{day:'DDMMMYYYY'});

    SampleServer.MAIN_RECORDSET_SIZE=16;
    SampleServer.SUB_RECORDSET_SIZE=5;
    SampleServer.SEARCH_READ_LIMIT=10;

    SampleServer.MAX_FLOAT=100;
    SampleServer.MAX_INTEGER=50;
    SampleServer.MAX_COLOR_INT=7;
    SampleServer.MAX_MONETARY=100000;
    SampleServer.DATE_DELTA=24*60;//inhours->60days
    SampleServer.FLOAT_PRECISION=2;

    SampleServer.SAMPLE_COUNTRIES=["Belgium","France","Portugal","Singapore","Australia"];
    SampleServer.SAMPLE_PEOPLE=[
        "JohnMiller","HenryCampbell","CarrieHelle","WendiBaltz","ThomasPassot",
    ];
    SampleServer.SAMPLE_TEXTS=[
        "Laoreetid","Volutpatblandit","Integervitae","Viverranam","Inmassa",
    ];
    SampleServer.PEOPLE_MODELS=[
        'res.users','res.partner','hr.employee','mail.followers','mailing.contact'
    ];

    SampleServer.UnimplementedRouteError=UnimplementedRouteError;

    //mockRegistryallowstoregistermockversionofmethodsorroutes,
    //forallmodels:
    //  SampleServer.mockRegistry.add('some_route',()=>"abcd");
    //foraspecificmodel(e.g.'res.partner'):
    //  SampleServer.mockRegistry.add('res.partner/some_method',()=>23);
    SampleServer.mockRegistry=newRegistry();

    returnSampleServer;
});
