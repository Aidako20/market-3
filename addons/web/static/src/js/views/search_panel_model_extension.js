flectra.define("web/static/src/js/views/search_panel_model_extension.js",function(require){
    "usestrict";

    constActionModel=require("web/static/src/js/views/action_model.js");
    const{sortBy}=require("web.utils");
    constDomain=require("web.Domain");
    constpyUtils=require("web.py_utils");

    //DefaultViewTypesisthelistofviewtypesforwhichthesearchpanelis
    //presentbydefault(ifnotexplicitlystatedinthe"view_types"attribute
    //inthearch).
    constDEFAULT_VIEW_TYPES=["kanban","tree"];
    constDEFAULT_LIMIT=200;
    letnextSectionId=1;

    /**
     *@param{Filter}filter
     *@returns{boolean}
     */
    functionhasDomain(filter){
        returnfilter.domain!=="[]";
    }

    /**
     *@param{Section}section
     *@returns{boolean}
     */
    functionhasValues({errorMsg,groups,type,values}){
        if(errorMsg){
            returntrue;
        }elseif(groups){
            return[...groups.values()].some((g)=>g.values.size);
        }elseif(type==="category"){
            returnvalues&&values.size>1;//falseitemignored
        }else{
            returnvalues&&values.size>0;
        }
    }

    /**
     *Returnsaserialisedarrayofthegivenmapwithitsvaluesbeingthe
     *shallowcopiesoftheoriginalvalues.
     *@param{Map<any,Object>}map
     *@return{Array[]}
     */
    functionserialiseMap(map){
        return[...map].map(([key,val])=>[key,Object.assign({},val)]);
    }

    /**
     *@typedefSection
     *@prop{string}color
     *@prop{string}description
     *@prop{boolean}enableCounters
     *@prop{boolean}expand
     *@prop{string}fieldName
     *@prop{string}icon
     *@prop{number}id
     *@prop{number}index
     *@prop{number}limit
     *@prop{string}type
     */

    /**
     *@typedef{Section}Category
     *@prop{boolean}hierarchize
     */

    /**
     *@typedef{Section}Filter
     *@prop{string}domain
     *@prop{string}groupBy
     */

    /**
     *@functionsectionPredicate
     *@param{Section}section
     *@returns{boolean}
     */

    /**
     *@property{{sections:Map<number,Section>}}state
     *@extendsActionModel.Extension
     */
    classSearchPanelModelExtensionextendsActionModel.Extension{
        constructor(){
            super(...arguments);

            this.categoriesToLoad=[];
            this.defaultValues={};
            this.filtersToLoad=[];
            this.initialStateImport=false;
            this.searchDomain=[];
            for(constkeyinthis.config.context){
                constmatch=/^searchpanel_default_(.*)$/.exec(key);
                if(match){
                    this.defaultValues[match[1]]=this.config.context[key];
                }
            }
        }

        //---------------------------------------------------------------------
        //Public
        //---------------------------------------------------------------------

        /**
         *@override
         */
        asynccallLoad(params){
            constsearchDomain=this._getExternalDomain();
            params.searchDomainChanged=(
                JSON.stringify(this.searchDomain)!==JSON.stringify(searchDomain)
            );
            if(!this.shouldLoad&&!this.initialStateImport){
                constisFetchable=(section)=>section.enableCounters||
                    (params.searchDomainChanged&&!section.expand);
                this.categoriesToLoad=this.categories.filter(isFetchable);
                this.filtersToLoad=this.filters.filter(isFetchable);
                this.shouldLoad=params.searchDomainChanged||
                    Boolean(this.categoriesToLoad.length+this.filtersToLoad.length);
            }
            this.searchDomain=searchDomain;
            this.initialStateImport=false;
            awaitsuper.callLoad(params);
        }

        /**
         *@override
         */
        exportState(){
            conststate=Object.assign({},super.exportState());
            state.sections=serialiseMap(state.sections);
            for(const[id,section]ofstate.sections){
                section.values=serialiseMap(section.values);
                if(section.groups){
                    section.groups=serialiseMap(section.groups);
                    for(const[id,group]ofsection.groups){
                        group.values=serialiseMap(group.values);
                    }
                }
            }
            returnstate;
        }

        /**
         *@override
         *@returns{any}
         */
        get(property,...args){
            switch(property){
                case"domain":returnthis.getDomain();
                case"sections":returnthis.getSections(...args);
            }
        }

        /**
         *@override
         */
        importState(importedState){
            this.initialStateImport=Boolean(importedState&&!this.state.sections);
            super.importState(...arguments);
            if(importedState){
                this.state.sections=newMap(this.state.sections);
                for(constsectionofthis.state.sections.values()){
                    section.values=newMap(section.values);
                    if(section.groups){
                        section.groups=newMap(section.groups);
                        for(constgroupofsection.groups.values()){
                            group.values=newMap(group.values);
                        }
                    }
                }
            }
        }

        /**
         *@override
         */
        asyncisReady(){
            awaitthis.sectionsPromise;
        }

        /**
         *@override
         */
        asyncload(params){
            this.sectionsPromise=this._fetchSections(params.isInitialLoad);
            if(this._shouldWaitForData(params)){
                awaitthis.sectionsPromise;
            }
        }

        /**
         *@override
         */
        prepareState(){
            Object.assign(this.state,{sections:newMap()});
            this._createSectionsFromArch();
        }

        //---------------------------------------------------------------------
        //Actions/Getters
        //---------------------------------------------------------------------

        /**
         *Returnstheconcatenationofthecategorydomainadthefilter
         *domain.
         *@returns{Array[]}
         */
        getDomain(){
            returnDomain.prototype.normalizeArray([
                ...this._getCategoryDomain(),
                ...this._getFilterDomain(),
            ]);
        }

        /**
         *Returnsasortedlistofacopyofallsections.Thislistcanbe
         *filteredbyagivenpredicate.
         *@param{sectionPredicate}[predicate]usedtodetermine
         *     whichsubsetsofsectionsiswanted
         *@returns{Section[]}
         */
        getSections(predicate){
            letsections=[...this.state.sections.values()].map((section)=>
                Object.assign({},section,{empty:!hasValues(section)})
            );
            if(predicate){
                sections=sections.filter(predicate);
            }
            returnsections.sort((s1,s2)=>s1.index-s2.index);
        }

        /**
         *Setstheactivevalueidofagivencategory.
         *@param{number}sectionId
         *@param{number}valueId
         */
        toggleCategoryValue(sectionId,valueId){
            constcategory=this.state.sections.get(sectionId);
            category.activeValueId=valueId;
        }

        /**
         *Togglesathefiltervalueofagivensection.Thevaluewillbeset
         *to"forceTo"ifprovided,elseitwillbeitsownopposedvalue.
         *@param{number}sectionId
         *@param{number[]}valueIds
         *@param{boolean}[forceTo=null]
         */
        toggleFilterValues(sectionId,valueIds,forceTo=null){
            constsection=this.state.sections.get(sectionId);
            for(constvalueIdofvalueIds){
                constvalue=section.values.get(valueId);
                value.checked=forceTo===null?!value.checked:forceTo;
            }
        }

        //---------------------------------------------------------------------
        //Internalgetters
        //---------------------------------------------------------------------

        /**
         *Shorthandaccesstosectionsoftype"category".
         *@returns{Category[]}
         */
        getcategories(){
            return[...this.state.sections.values()].filter(s=>s.type==="category");
        }

        /**
         *Shorthandaccesstosectionsoftype"filter".
         *@returns{Filter[]}
         */
        getfilters(){
            return[...this.state.sections.values()].filter(s=>s.type==="filter");
        }

        //---------------------------------------------------------------------
        //Private
        //---------------------------------------------------------------------

        /**
         *Setsactivevaluesforeachfilter(comingfromcontext).Thisneeds
         *tobedoneonlyonceatinitialization.
         *@private
         */
        _applyDefaultFilterValues(){
            for(const{fieldName,values}ofthis.filters){
                constdefaultValues=this.defaultValues[fieldName]||[];
                for(constvalueIdofdefaultValues){
                    constvalue=values.get(valueId);
                    if(value){
                        value.checked=true;
                    }
                }
            }
        }

        /**
         *@private
         *@param{string}sectionId
         *@param{Object}result
         */
        _createCategoryTree(sectionId,result){
            constcategory=this.state.sections.get(sectionId);

            let{error_msg,parent_field:parentField,values,}=result;
            if(error_msg){
                category.errorMsg=error_msg;
                values=[];
            }
            if(category.hierarchize){
                category.parentField=parentField;
            }
            for(constvalueofvalues){
                category.values.set(
                    value.id,
                    Object.assign({},value,{
                        childrenIds:[],
                        parentId:value[parentField]||false,
                    })
                );
            }
            for(constvalueofvalues){
                const{parentId}=category.values.get(value.id);
                if(parentId&&category.values.has(parentId)){
                    category.values.get(parentId).childrenIds.push(value.id);
                }
            }
            //collectrootIds
            category.rootIds=[false];
            for(constvalueofvalues){
                const{parentId}=category.values.get(value.id);
                if(!parentId){
                    category.rootIds.push(value.id);
                }
            }
            //Setactivevaluefromcontext
            constvalueIds=[false,...values.map((val)=>val.id)];
            this._ensureCategoryValue(category,valueIds);
        }

        /**
         *@private
         *@param{string}sectionId
         *@param{Object}result
         */
        _createFilterTree(sectionId,result){
            constfilter=this.state.sections.get(sectionId);

            let{error_msg,values,}=result;
            if(error_msg){
                filter.errorMsg=error_msg;
                values=[];
            }

            //restorecheckedproperty
            values.forEach((value)=>{
                constoldValue=filter.values.get(value.id);
                value.checked=oldValue?oldValue.checked:false;
            });

            filter.values=newMap();
            constgroupIds=[];
            if(filter.groupBy){
                constgroups=newMap();
                for(constvalueofvalues){
                    constgroupId=value.group_id;
                    if(!groups.has(groupId)){
                        if(groupId){
                            groupIds.push(groupId);
                        }
                        groups.set(groupId,{
                            id:groupId,
                            name:value.group_name,
                            values:newMap(),
                            tooltip:value.group_tooltip,
                            sequence:value.group_sequence,
                            hex_color:value.group_hex_color,
                        });
                        //restoreformercheckedstate
                        constoldGroup=
                            filter.groups&&filter.groups.get(groupId);
                        groups.get(groupId).state=
                            (oldGroup&&oldGroup.state)||false;
                    }
                    groups.get(groupId).values.set(value.id,value);
                }
                filter.groups=groups;
                filter.sortedGroupIds=sortBy(
                    groupIds,
                    (id)=>groups.get(id).sequence||groups.get(id).name
                );
                for(constgroupoffilter.groups.values()){
                    for(const[valueId,value]ofgroup.values){
                        filter.values.set(valueId,value);
                    }
                }
            }else{
                for(constvalueofvalues){
                    filter.values.set(value.id,value);
                }
            }
        }

        /**
         *Addsasectioninthis.state.sectionsforeachvisiblefieldfound
         *inthesearchpanelarch.
         *@private
         */
        _createSectionsFromArch(){
            lethasCategoryWithCounters=false;
            lethasFilterWithDomain=false;
            this.config.archNodes.forEach(({attrs,tag},index)=>{
                if(tag!=="field"||attrs.invisible==="1"){
                    return;
                }
                consttype=attrs.select==="multi"?"filter":"category";
                constsection={
                    color:attrs.color,
                    description:
                        attrs.string||this.config.fields[attrs.name].string,
                    enableCounters:!!pyUtils.py_eval(
                        attrs.enable_counters||"0"
                    ),
                    expand:!!pyUtils.py_eval(attrs.expand||"0"),
                    fieldName:attrs.name,
                    icon:attrs.icon,
                    id:nextSectionId++,
                    index,
                    limit:pyUtils.py_eval(attrs.limit||String(DEFAULT_LIMIT)),
                    type,
                    values:newMap(),
                };
                if(type==="category"){
                    section.activeValueId=this.defaultValues[attrs.name];
                    section.icon=section.icon||"fa-folder";
                    section.hierarchize=!!pyUtils.py_eval(
                        attrs.hierarchize||"1"
                    );
                    section.values.set(false,{
                        childrenIds:[],
                        display_name:this.env._t("All"),
                        id:false,
                        bold:true,
                        parentId:false,
                    });
                    hasCategoryWithCounters=hasCategoryWithCounters||section.enableCounters;
                }else{
                    section.domain=attrs.domain||"[]";
                    section.groupBy=attrs.groupby;
                    section.icon=section.icon||"fa-filter";
                    hasFilterWithDomain=hasFilterWithDomain||section.domain!=="[]";
                }
                this.state.sections.set(section.id,section);
            });
            /**
             *Categorycountersareautomaticallydisabledifafilterdomainisfound
             *toavoidinconsistencieswiththecounters.Theunderlyingproblemcould
             *actuallybesolvedbyreworkingthesearchpanelandthewaythe
             *countersarecomputed,thoughthisisnotthecurrentpriority
             *consideringthetimeitwouldtake,hencethisquick"fix".
             */
            if(hasCategoryWithCounters&&hasFilterWithDomain){
                //Ifincompatibilitiesarefound->disablesallcategorycounters
                for(constcategoryofthis.categories){
                    category.enableCounters=false;
                }
                //...andtriggersawarning
                console.warn(
                    "Warning:categorieswithcountersareincompatiblewithfiltershavingadomainattribute.",
                    "Allcategorycountershavebeendisabledtoavoidinconsistencies.",
                );
            }
        }

        /**
         *Ensuresthattheactivevalueofacategoryisoneofitsown
         *existingvalues.
         *@private
         *@param{Category}category
         *@param{number[]}valueIds
         */
        _ensureCategoryValue(category,valueIds){
            if(!valueIds.includes(category.activeValueId)){
                category.activeValueId=valueIds[0];
            }
        }

        /**
         *Fetchesvaluesforeachcategoryatstartup.Atreloadacategoryis
         *onlyfetchedifneeded.
         *@private
         *@param{Category[]}categories
         *@returns{Promise}resolvedwhenallcategorieshavebeenfetched
         */
        async_fetchCategories(categories){
            constfilterDomain=this._getFilterDomain();
            awaitPromise.all(categories.map(async(category)=>{
                constresult=awaitthis.env.services.rpc({
                    method:"search_panel_select_range",
                    model:this.config.modelName,
                    args:[category.fieldName],
                    kwargs:{
                        category_domain:this._getCategoryDomain(category.id),
                        enable_counters:category.enableCounters,
                        expand:category.expand,
                        filter_domain:filterDomain,
                        hierarchize:category.hierarchize,
                        limit:category.limit,
                        search_domain:this.searchDomain,
                    },
                });
                this._createCategoryTree(category.id,result);
            }));
        }

        /**
         *Fetchesvaluesforeachfilter.Thisisdoneatstartupandateach
         *reloadifneeded.
         *@private
         *@param{Filter[]}filters
         *@returns{Promise}resolvedwhenallfiltershavebeenfetched
         */
        async_fetchFilters(filters){
            constevalContext={};
            for(constcategoryofthis.categories){
                evalContext[category.fieldName]=category.activeValueId;
            }
            constcategoryDomain=this._getCategoryDomain();
            awaitPromise.all(filters.map(async(filter)=>{
                constresult=awaitthis.env.services.rpc({
                    method:"search_panel_select_multi_range",
                    model:this.config.modelName,
                    args:[filter.fieldName],
                    kwargs:{
                        category_domain:categoryDomain,
                        comodel_domain:Domain.prototype.stringToArray(
                            filter.domain,
                            evalContext
                        ),
                        enable_counters:filter.enableCounters,
                        filter_domain:this._getFilterDomain(filter.id),
                        expand:filter.expand,
                        group_by:filter.groupBy||false,
                        group_domain:this._getGroupDomain(filter),
                        limit:filter.limit,
                        search_domain:this.searchDomain,
                    },
                });
                this._createFilterTree(filter.id,result);
            }));
        }

        /**
         *@private
         *@param{boolean}isInitialLoad
         *@returns{Promise}
         */
        async_fetchSections(isInitialLoad){
            awaitthis._fetchCategories(
                isInitialLoad?this.categories:this.categoriesToLoad
            );
            awaitthis._fetchFilters(
                isInitialLoad?this.filters:this.filtersToLoad
            );
            if(isInitialLoad){
                this._applyDefaultFilterValues();
            }
        }

        /**
         *Computesandreturnsthedomainbasedonthecurrentactive
         *categories.If"excludedCategoryId"isprovided,thecategorywith
         *thatidisnottakenintoaccountinthedomaincomputation.
         *@private
         *@param{string}[excludedCategoryId]
         *@returns{Array[]}
         */
        _getCategoryDomain(excludedCategoryId){
            constdomain=[];
            for(constcategoryofthis.categories){
                if(
                    category.id===excludedCategoryId||
                    !category.activeValueId
                ){
                    continue;
                }
                constfield=this.config.fields[category.fieldName];
                constoperator=
                    field.type==="many2one"&&category.parentField?"child_of":"=";
                domain.push([
                    category.fieldName,
                    operator,
                    category.activeValueId,
                ]);
            }
            returndomain;
        }

        /**
         *Returnsthedomainretrievedfromtheothermodelextensions.
         *@private
         *@returns{Array[]}
         */
        _getExternalDomain(){
            constdomains=this.config.get("domain");
            constdomain=domains.reduce((acc,dom)=>[...acc,...dom],[]);
            returnDomain.prototype.normalizeArray(domain);
        }

        /**
         *Computesandreturnsthedomainbasedonthecurrentchecked
         *filters.Thevaluesofasinglefilterarecombinedusingasimple
         *rule:checkedvalueswithinasamegrouparecombinedwithan"OR"
         *operator(thisisexpressedassingleconditionusingalist)and
         *groupsarecombinedwithan"AND"operator(expressedby
         *concatenationofconditions).
         *Ifafilterhasnogroup,itscheckedvaluesareimplicitely
         *consideredasformingagroup(andgroupedusingan"OR").
         *IfexcludedFilterIdisprovided,thefilterwiththatidisnot
         *takenintoaccountinthedomaincomputation.
         *@private
         *@param{string}[excludedFilterId]
         *@returns{Array[]}
         */
        _getFilterDomain(excludedFilterId){
            constdomain=[];

            functionaddCondition(fieldName,valueMap){
                constids=[];
                for(const[valueId,value]ofvalueMap){
                    if(value.checked){
                        ids.push(valueId);
                    }
                }
                if(ids.length){
                    domain.push([fieldName,"in",ids]);
                }
            }

            for(constfilterofthis.filters){
                if(filter.id===excludedFilterId){
                    continue;
                }
                const{fieldName,groups,values}=filter;
                if(groups){
                    for(constgroupofgroups.values()){
                        addCondition(fieldName,group.values);
                    }
                }else{
                    addCondition(fieldName,values);
                }
            }
            returndomain;
        }

        /**
         *Returnsadomainoranobjectofdomainsusedtocomplement
         *thefilterdomainstoaccuratelydescribetheconstrainson
         *recordswhencomputingrecordcountsassociatedtothefilter
         *values(ifagroupByisprovided).Theideaisthatthechecked
         *valueswithinagroupshouldnotimpactthecountsfortheother
         *valuesinthesamegroup.
         *@private
         *@param{string}filter
         *@returns{Object<string,Array[]>|Array[]|null}
         */
        _getGroupDomain(filter){
            const{fieldName,groups,enableCounters}=filter;
            const{type:fieldType}=this.config.fields[fieldName];

            if(!enableCounters||!groups){
                return{
                    many2one:[],
                    many2many:{},
                }[fieldType];
            }
            letgroupDomain=null;
            if(fieldType==="many2one"){
                for(constgroupofgroups.values()){
                    constvalueIds=[];
                    letactive=false;
                    for(const[valueId,value]ofgroup.values){
                        const{checked}=value;
                        valueIds.push(valueId);
                        if(checked){
                            active=true;
                        }
                    }
                    if(active){
                        if(groupDomain){
                            groupDomain=[[0,"=",1]];
                            break;
                        }else{
                            groupDomain=[[fieldName,"in",valueIds]];
                        }
                    }
                }
            }elseif(fieldType==="many2many"){
                constcheckedValueIds=newMap();
                groups.forEach(({values},groupId)=>{
                    values.forEach(({checked},valueId)=>{
                        if(checked){
                            if(!checkedValueIds.has(groupId)){
                                checkedValueIds.set(groupId,[]);
                            }
                            checkedValueIds.get(groupId).push(valueId);
                        }
                    });
                });
                groupDomain={};
                for(const[gId,ids]ofcheckedValueIds.entries()){
                    for(constgroupIdofgroups.keys()){
                        if(gId!==groupId){
                            constkey=JSON.stringify(groupId);
                            if(!groupDomain[key]){
                                groupDomain[key]=[];
                            }
                            groupDomain[key].push([fieldName,"in",ids]);
                        }
                    }
                }
            }
            returngroupDomain;
        }

        /**
         *Returnswhetherthequeryinformationsshouldbeconsideredasready
         *beforeorafterhaving(re-)fetchedthesectionsdata.
         *@private
         *@param{Object}params
         *@param{boolean}params.isInitialLoad
         *@param{boolean}params.searchDomainChanged
         *@returns{boolean}
         */
        _shouldWaitForData({isInitialLoad,searchDomainChanged}){
            if(isInitialLoad&&Object.keys(this.defaultValues).length){
                //Defaultvaluesneedtobecheckedoninitialload
                returntrue;
            }
            if(this.categories.length&&this.filters.some(hasDomain)){
                //Selectedcategoryvaluemightaffectthefiltervalues
                returntrue;
            }
            if(!this.searchDomain.length){
                //Nosearchdomain->noneedtocheckforexpand
                returnfalse;
            }
            return[...this.state.sections.values()].some(
                (section)=>!section.expand&&searchDomainChanged
            );
        }

        //---------------------------------------------------------------------
        //Static
        //---------------------------------------------------------------------

        /**
         *@override
         *@returns{{attrs:Object,children:Object[]}|null}
         */
        staticextractArchInfo(archs,viewType){
            const{children}=archs.search;
            constspNode=children.find(c=>c.tag==="searchpanel");
            constisObject=(obj)=>typeofobj==="object"&&obj!==null;
            if(spNode){
                constactualType=viewType==="list"?"tree":viewType;
                const{view_types}=spNode.attrs;
                constviewTypes=view_types?
                    view_types.split(","):
                    DEFAULT_VIEW_TYPES;
                if(viewTypes.includes(actualType)){
                    return{
                        attrs:spNode.attrs,
                        children:spNode.children.filter(isObject),
                    };
                }
            }
            returnnull;
        }
    }
    SearchPanelModelExtension.layer=1;

    ActionModel.registry.add("SearchPanel",SearchPanelModelExtension,30);

    returnSearchPanelModelExtension;
});
