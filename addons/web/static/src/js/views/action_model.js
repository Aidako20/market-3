flectra.define("web/static/src/js/views/action_model.js",function(require){
    "usestrict";

    constDomain=require("web.Domain");
    const{FACET_ICONS}=require("web.searchUtils");
    const{Model}=require("web/static/src/js/model.js");
    const{parseArch}=require("web.viewUtils");
    constpyUtils=require("web.py_utils");
    constRegistry=require("web.Registry");

    constisNotNull=(value)=>value!==null&&value!==undefined;
    constisObject=(obj)=>typeofobj==="object"&&obj!==null;

    /**
     *@extendsModel.Extension
     */
    classActionModelExtensionextendsModel.Extension{

        //---------------------------------------------------------------------
        //Public
        //---------------------------------------------------------------------

        /**
         *Initiatestheasynchronoustasksoftheextensionandreturnsa
         *promiseresolvedassoonasalltheinformationsnecessarytobuild
         *thesearchqueryareready.
         *@returns{Promise}
         */
        asynccallLoad(){
            this.loadPromise=super.callLoad(...arguments);
            awaitthis.loadPromise;
        }

        /**
         *Returnsapromiseresolvedwhentheextensioniscompletelyready.
         *@returns{Promise}
         */
        asyncisReady(){
            awaitthis.loadPromise;
        }

        //---------------------------------------------------------------------
        //Static
        //---------------------------------------------------------------------

        /**
         *@abstract
         *@param{Object}archs
         *@param{string|null}[viewType=null]
         *@returns{null}
         */
        staticextractArchInfo(){
            returnnull;
        }
    }

    /**
     *@extendsModel
     */
    classActionModelextendsModel{

        //---------------------------------------------------------------------
        //Public
        //---------------------------------------------------------------------

        /**
         *@override
         */
        get(property){
            switch(property){
                case"query":returnthis.config.searchQuery||this._getQuery();
                case"facets":returnthis._getFacets();
            }
            returnsuper.get(...arguments);
        }

        /**
         *Returnsapromiseresolvedwhenallextensionsarecompletelyready.
         *@returns{Promise}
         */
        asyncisReady(){
            awaitthis._awaitExtensions();
        }

        //---------------------------------------------------------------------
        //Private
        //---------------------------------------------------------------------

        /**
         *@private
         *@returns{Promise}
         */
        async_awaitExtensions(){
            awaitPromise.all(this.extensions.flat().map(
                (extension)=>extension.isReady()
            ));
        }

        /**
         *@override
         */
        __get(excluded,property){
            constresults=super.__get(...arguments);
            switch(property){
                case"domain":return[this.config.domain,...results];
                case"context":return[this.config.context,...results];
            }
            returnresults;
        }

        /**
         *Validatesandformatsallfacetsgivenbytheextensions.Thisis
         *donehereratherthaninthesearchbarbecausethesearchMenuTypes
         *areavailableonlytothemodel.
         *@private
         *@returns{Object[]}
         */
        _getFacets(){
            consttypes=this.config.searchMenuTypes||[];
            constisValidType=(type)=>(
                !['groupBy','comparison'].includes(type)||types.includes(type)
            );
            constfacets=[];
            for(constextensionofthis.extensions.flat()){
                for(constfacetofextension.get("facets")||[]){
                    if(!isValidType(facet.type)){
                        continue;
                    }
                    facet.separator=facet.type==='groupBy'?">":this.env._t("or");
                    if(facet.typeinFACET_ICONS){
                        facet.icon=FACET_ICONS[facet.type];
                    }
                    facets.push(facet);
                }
            }
            returnfacets;
        }

        /**
         *@typedefTimeRanges
         *@property{string}fieldName
         *@property{string}comparisonRangeId
         *@property{Array[]}range
         *@property{string}rangeDescription
         *@property{Array[]}comparisonRange
         *@property{string}comparisonRangeDescription
         */
        /**
         *@typedefQuery
         *@property{Object}context
         *@property{Array[]}domain
         *@property{string[]}groupBy
         *@property{string[]}orderedBy
         *@property{TimeRanges?}timeRanges
         */
        /**
         *@private
         *@returns{Query}
         */
        _getQuery(){
            constevalContext=this.env.session.user_context;
            constcontexts=this.__get(null,"context");
            constdomains=this.__get(null,"domain");
            constquery={
                context:pyUtils.eval("contexts",contexts,evalContext),
                domain:Domain.prototype.normalizeArray(
                    pyUtils.eval("domains",domains,evalContext)
                ),
                orderedBy:this.get("orderedBy")||[],
            };
            constsearchMenuTypes=this.config.searchMenuTypes||[];
            if(searchMenuTypes.includes("groupBy")){
                query.groupBy=this.get("groupBy")||[];
            }else{
                query.groupBy=[];
            }
            if(searchMenuTypes.includes("comparison")){
                query.timeRanges=this.get("timeRanges")||{};
            }
            returnquery;
        }

        /**
         *Overriddentotriggera"search"eventassoonasthequerydata
         *areready.
         *@override
         */
        async_loadExtensions({isInitialLoad}){
            awaitsuper._loadExtensions(...arguments);
            if(!isInitialLoad){
                this.trigger("search",this.get("query"));
                awaitthis._awaitExtensions();
            }
        }

        //---------------------------------------------------------------------
        //Static
        //---------------------------------------------------------------------

        /**
         *@param{Object}archs
         *@param{string|null}[viewType=null]
         *@returns{Object}
         */
        staticextractArchInfo(archs,viewType=null){
            constparsedArchs={};
            if(!archs.search){
                archs.search="<search/>";
            }
            for(constkeyinarchs){
                const{attrs,children}=parseArch(archs[key]);
                constobjectChildren=children.filter(isObject);
                parsedArchs[key]={
                    attrs,
                    children:objectChildren,
                };
            }
            constarchInfo={};
            for(constkeyofthis.registry.keys()){
                constextension=this.registry.get(key);
                constresult=extension.extractArchInfo(parsedArchs,viewType);
                if(isNotNull(result)){
                    archInfo[key]=result;
                }
            }
            returnarchInfo;
        }
    }

    ActionModel.Extension=ActionModelExtension;
    ActionModel.registry=newRegistry(null,
        (value)=>value.prototypeinstanceofActionModel.Extension
    );

    returnActionModel;
});
