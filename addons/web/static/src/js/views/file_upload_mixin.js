flectra.define('web.fileUploadMixin',function(require){
'usestrict';

/**
 *MixintobeusedinviewControllerstomanageuploadsandgenerateprogressbars.
 *supportedviews:kanban,list
 */

const{csrf_token,_t}=require('web.core');
constProgressBar=require('web.ProgressBar');
constProgressCard=require('web.ProgressCard');

constProgressBarMixin={

    custom_events:{
        progress_bar_abort:'_onProgressBarAbort',
    },

    init(){
        /**
         *Containstheuploadscurrentlyhappening,usedtoattachprogressbars.
         *e.g:{'fileUploadId45':{progressBar,progressCard,...params}}
         */
        this._fileUploads={};
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *usedtouseamockedversionofXhrinthetests.
     *
     *@private
     *@returns{XMLHttpRequest}
     */
    _createXhr(){
        returnnewwindow.XMLHttpRequest();
    },
    /**
     *@private
     */
    _getFileUploadRenderOptions(){
        return{
            predicate:()=>true,
            targetCallback:undefined,
        };
    },
    /**
     *@private
     *@returns{string}uploadroute
     */
    _getFileUploadRoute(){
        return'/web/binary/upload_attachment';
    },
    /**
     *@private
     *@param{Object}params
     *@param{Object[]}params.files
     *@param{XMLHttpRequest}params.xhr
     */
    _makeFileUpload(params){
        const{files,xhr}=params;
        constfileUploadId=_.uniqueId('fileUploadId');
        constformData=newFormData();
        constformDataKeys=this._makeFileUploadFormDataKeys(Object.assign({fileUploadId},params));

        formData.append('csrf_token',csrf_token);
        for(constkeyinformDataKeys){
            if(formDataKeys[key]!==undefined){
                formData.append(key,formDataKeys[key]);
            }
        }
        for(constfileoffiles){
            formData.append('ufile',file);
        }

        return{
            fileUploadId,
            xhr,
            title:files.length===1
                ?files[0].name
                :_.str.sprintf(_t("%sFiles"),files.length),
            type:files.length===1?files[0].type:undefined,
            formData,
        };
    },
    /**
     *@private
     *@param{Object}param0
     *@param{string}param0.fileUploadId
     *@returns{Object}thelistoftheformentriesofafileupload.
     */
    _makeFileUploadFormDataKeys({fileUploadId}){
        return{
            callback:fileUploadId,
        };
    },
    /**
     *@private
     *@param{integer}fileUploadId
     */
    async_removeFileUpload(fileUploadId){
        constupload=this._fileUploads[fileUploadId];
        upload.progressCard&&upload.progressCard.destroy();
        upload.progressBar&&upload.progressBar.destroy();
        deletethis._fileUploads[fileUploadId];
        awaitthis.reload();
    },
    /**
     *@private
     */
    async_renderFileUploads(){
        const{predicate,targetCallback}=this._getFileUploadRenderOptions();

        for(constfileUploadIdinthis._fileUploads){
            constupload=this._fileUploads[fileUploadId];
            if(!predicate(upload)){
                continue;
            }

            if(!upload.progressBar){
                if(!upload.recordId||this.viewType!=='kanban'){
                    upload.progressCard=newProgressCard(this,{
                        title:upload.title,
                        type:upload.type,
                        viewType:this.viewType,
                    });
                }
                upload.progressBar=newProgressBar(this,{
                    xhr:upload.xhr,
                    title:upload.title,
                    fileUploadId,
                });
            }

            let$targetCard;
            if(upload.progressCard){
                awaitupload.progressCard.prependTo(this.renderer.$el);
                $targetCard=upload.progressCard.$el;
            }elseif(targetCallback){
                $targetCard=targetCallback(upload);
            }
            awaitupload.progressBar.appendTo($targetCard);
        }
    },
    /**
     *@private
     *@param{Object[]}files
     *@param{Object}[params]optionaladditionaldata
     */
    async_uploadFiles(files,params={}){
        if(!files||!files.length){return;}

        awaitnewPromise(resolve=>{
            constxhr=this._createXhr();
            xhr.open('POST',this._getFileUploadRoute());
            constfileUploadData=this._makeFileUpload(Object.assign({files,xhr},params));
            const{fileUploadId,formData}=fileUploadData;
            this._fileUploads[fileUploadId]=fileUploadData;
            xhr.upload.addEventListener("progress",ev=>{
                this._updateFileUploadProgress(fileUploadId,ev);
            });
            constprogressPromise=this._onBeforeUpload();
            xhr.onload=async()=>{
                awaitprogressPromise;
                resolve();
                this._onUploadLoad({fileUploadId,xhr});
            };
            xhr.onerror=async()=>{
                awaitprogressPromise;
                resolve();
                this._onUploadError({fileUploadId,xhr});
            };
            xhr.send(formData);
        });
    },
    /**
     *@private
     *@param{string}fileUploadId
     *@param{ProgressEvent}ev
     */
    _updateFileUploadProgress(fileUploadId,ev){
        const{progressCard,progressBar}=this._fileUploads[fileUploadId];
        progressCard&&progressCard.update(ev.loaded,ev.total);
        progressBar&&progressBar.update(ev.loaded,ev.total);
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *Hooktocustomizethebehaviourof_uploadFiles()beforeanuploadismade.
     *
     *@private
     */
    async_onBeforeUpload(){
        awaitthis._renderFileUploads();
    },
    /**
     *@private
     *@param{FlectraEvent}ev
     *@param{integer}ev.data.fileUploadId
     */
    _onProgressBarAbort(ev){
        this._removeFileUpload(ev.data.fileUploadId);
    },
    /**
     *Hooktocustomizethebehaviourofthexhr.onloadofanupload.
     *
     *@private
     *@param{string}param0.fileUploadId
     */
    _onUploadLoad({fileUploadId}){
        this._removeFileUpload(fileUploadId);
    },
    /**
     *Hooktocustomizethebehaviourofthexhr.onerrorofanupload.
     *
     *@private
     *@param{string}param1.fileUploadId
     *@param{XMLHttpRequest}param0.xhr
     */
    _onUploadError({fileUploadId,xhr}){
        this.do_notify(xhr.status,_.str.sprintf(_t('message:%s'),xhr.reponseText),true);
        this._removeFileUpload(fileUploadId);
    },

};

returnProgressBarMixin;

});
