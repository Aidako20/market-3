flectra.define('web.AbstractModel',function(require){
"usestrict";

/**
 *AnAbstractModelistheMinMVC. WetendtothinkofMVCmoreontheserver
 *side,butwearetalkinghereonthewebclientside.
 *
 *ThedutiesoftheModelaretofetchallrelevantdata,andtomakethem
 *availablefortherestoftheview. Also,everymodificationtothatdata
 *shouldpassthroughthemodel.
 *
 *Notethatthemodelisnotawidget,itdoesnotneedtoberenderedor
 *appendedtothedom. However,itinheritsfromtheEventDispatcherMixin,
 *inordertobeabletonotifyitsparentbybubblingeventsup.
 *
 *Themodelisabletogeneratesample(fake)datawhenthereisnoactualdata
 *indatabase. Thisfeaturecanbeactivatedbyinstantiatingthemodelwith
 *param"useSampleModel"settotrue. Inthiscase,themodelinstantiatesa
 *duplicatedversionofitself,parametrizedtocallaSampleServer(JS)
 *insteadofdoingRPCs. Hereishowitworks:themainmodelfirstloadthe
 *datanormally(fromdatabase),andthencheckswhethertheresultisemptyor
 *not. Ifitis,itasksthesamplemodeltoloadwiththeexactsameparams,
 *anditthusentersin"sample"mode. Themodelkeepsdoingthisatreload,
 *butonlyifthe(re)loadparamshaven'tchanged:assoonasaparamchanges,
 *the"sample"modeisleft,anditneverentersitagaininthefuture(inthe
 *lifetimeofthemodelinstance). Toaccessthosesampledatafromtheoutside,
 *'get'mustbecalledwiththetheoption"withSampleData"settotrue. In
 *thiscase,ifthemainmodelisin"sample"mode,itredirectsthecalltothe
 *samplemodel.
 */

varfieldUtils=require('web.field_utils');
varmvc=require('web.mvc');
constSampleServer=require('web.SampleServer');


varAbstractModel=mvc.Model.extend({
    /**
     *@param{Widget}parent
     *@param{Object}[params={}]
     *@param{Object}[params.fields]
     *@param{string}[params.modelName]
     *@param{boolean}[params.isSampleModel=false]iftrue,willfetchdata
     *  fromaSampleServerinsteadofdoingRPCs
     *@param{boolean}[params.useSampleModel=false]iftrue,willuseasample
     *  modeltogeneratesampledatawhenthereisno"real"dataindatabase
     *@param{AbstractModel}[params.SampleModel]theAbstractModelclass
     *  toinstantiateassamplemodel.Thismodelwon'tdoanyrpc,butwill
     *  rathercallaSampleServerthatwillgeneratesampledata.Thisparam
     *  mustbesetwhenparams.useSampleModelistrue.
     */
    init(parent,params={}){
        this._super(...arguments);
        this.useSampleModel=params.useSampleModel||false;
        if(params.isSampleModel){
            this.isSampleModel=true;
            this.sampleServer=newSampleServer(params.modelName,params.fields);
        }elseif(this.useSampleModel){
            constsampleModelParams=Object.assign({},params,{
                isSampleModel:true,
                SampleModel:null,
                useSampleModel:false,
            });
            this.sampleModel=newparams.SampleModel(this,sampleModelParams);
            this._isInSampleMode=false;
        }
    },

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *OverridetocallgetonthesampleModelwhenweareinsamplemode,and
     *option'withSampleData'issettotrue.
     *
     *@override
     *@param{any}_
     *@param{Object}[options]
     *@param{boolean}[options.withSampleData=false]
     */
    get(_,options){
        letstate;
        if(options&&options.withSampleData&&this._isInSampleMode){
            state=this.sampleModel.__get(...arguments);
        }else{
            state=this.__get(...arguments);
        }
        returnstate;
    },
    /**
     *Undersomeconditions,themodelisdesignedtogeneratesampledataif
     *thereisnorealdataindatabase.Thisfunctionreturnsabooleanwhich
     *indicatesthemodeofthemodel:iftrue,wearein"sample"mode.
     *
     *@returns{boolean}
     */
    isInSampleMode(){
        return!!this._isInSampleMode;
    },
    /**
     *Disablesthesampledata(forever)onthismodelinstance.
     */
    leaveSampleMode(){
        if(this.useSampleModel){
            this.useSampleModel=false;
            this._isInSampleMode=false;
            this.sampleModel.destroy();
        }
    },
    /**
     *Overridetocheckifweneedtocallthesamplemodel(andifso,todo
     *it)afterloadingthedata,inthecasewherethereisnorealdatato
     *display.
     *
     *@override
     */
    asyncload(params){
        this.loadParams=params;
        consthandle=awaitthis.__load(...arguments);
        awaitthis._callSampleModel('__load',handle,...arguments);
        returnhandle;
    },
    /**
     *Whensomethingchanges,thedatamayneedtoberefetched. Thisisthe
     *jobforthismethod:reloading(onlyifnecessary)allthedataand
     *makingsurethattheyarereadytoberedisplayed.
     *Sometimes,wereloadthedatawiththe"same"paramsastheinitialload
     *params(see'_haveParamsChanged').Whenwedo,ifwewerein"sample"mode,
     *wecallagainthesampleserverafterthereloadifthereisstillnodata
     *todisplay.Whentheparameterschange,weautomaticallyleave"sample"
     *mode.
     *
     *@param{any}_
     *@param{Object}[params]
     *@returns{Promise}
     */
    asyncreload(_,params){
        consthandle=awaitthis.__reload(...arguments);
        if(this._isInSampleMode){
            if(!this._haveParamsChanged(params)){
                awaitthis._callSampleModel('__reload',handle,...arguments);
            }else{
                this.leaveSampleMode();
            }
        }
        returnhandle;
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *@private
     *@param{string}method
     *@param{any}handle
     *@param {...any}args
     *@returns{Promise}
     */
    async_callSampleModel(method,handle,...args){
        if(this.useSampleModel&&this._isEmpty(handle)){
            try{
                if(method==='__load'){
                    awaitthis.sampleModel.__load(...args);
                }elseif(method==='__reload'){
                    awaitthis.sampleModel.__reload(...args);
                }
                this._isInSampleMode=true;
            }catch(error){
                if(errorinstanceofSampleServer.UnimplementedRouteError){
                    this.leaveSampleMode();
                }else{
                    throwerror;
                }
            }
        }else{
            this.leaveSampleMode();
        }
    },
    /**
     *@private
     *@returns{Object}
     */
    __get(){
        return{};
    },
    /**
     *Thisfunctioncanbeoverridentodetermineiftheresultofaloador
     *areloadisempty.Intheaffirmative,wewilltrytogeneratesample
     *datatopreventfromhavinganemptystatetodisplay.
     *
     *@private
     *@params{any}handle,thevaluereturnedbyaloadorareload
     *@returns{boolean}
     */
    _isEmpty(/*handle*/){
        returnfalse;
    },
    /**
     *Tooverridetodotheinitialloadofthedata(thisfunctionissupposed
     *tobecalledonlyonce).
     *
     *@private
     *@returns{Promise}
     */
    async__load(){
        returnPromise.resolve();
    },
    /**
     *Processesdate(time)andselectionfieldvaluessentbytheserver.
     *Convertsdata(time)valuestomomentinstances.
     *Convertsfalsevaluesofselectionfieldsto0if0isavalidkey,
     *becausetheserverdoesn'tmakeadistinctionbetweenfalseand0,and
     *alwayssendsfalsewhenvalueis0.
     *
     *@param{Object}fieldthefielddescription
     *@param{*}value
     *@returns{*}theprocessedvalue
     */
    _parseServerValue:function(field,value){
        if(field.type==='date'||field.type==='datetime'){
            //processdate(time):convertintoamomentinstance
            value=fieldUtils.parse[field.type](value,field,{isUTC:true});
        }elseif(field.type==='selection'&&value===false){
            //processselection:convertfalseto0,if0isavalidkey
            varhasKey0=_.find(field.selection,function(option){
                returnoption[0]===0;
            });
            value=hasKey0?0:value;
        }
        returnvalue;
    },
    /**
     *Tooverridetoreloaddata(thisfunctionmaybecalledseveraltimes,
     *aftertheinitialloadhasbeendone).
     *
     *@private
     *@returns{Promise}
     */
    async__reload(){
        returnPromise.resolve();
    },
    /**
     *Determineswhetherornotthegivenparams(reloadparams)differfrom
     *theinitialones(this.loadParams).Thisisusedtoleave"sample"mode
     *assoonasaparameter(e.g.domain)changes.
     *
     *@private
     *@param{Object}[params={}]
     *@param{Object}[params.context]
     *@param{Array[]}[params.domain]
     *@param{Object}[params.timeRanges]
     *@param{string[]}[params.groupBy]
     *@returns{boolean}
     */
    _haveParamsChanged(params={}){
        for(constkeyof['context','domain','timeRanges']){
            if(keyinparams){
                constdiff=JSON.stringify(params[key])!==JSON.stringify(this.loadParams[key]);
                if(diff){
                    returntrue;
                }
            }
        }
        if(this.useSampleModel&&'groupBy'inparams){
            returnJSON.stringify(params.groupBy)!==JSON.stringify(this.loadParams.groupedBy);
        }
    },
    /**
     *OverridetoredirectallrpcstotheSampleServerifthis.isSampleModel
     *istrue.
     *
     *@override
     */
    async_rpc(){
        if(this.isSampleModel){
            returnthis.sampleServer.mockRpc(...arguments);
        }
        returnthis._super(...arguments);
    },
});

returnAbstractModel;

});
