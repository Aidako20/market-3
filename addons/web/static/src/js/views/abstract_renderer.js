flectra.define('web.AbstractRenderer',function(require){
"usestrict";

/**
 *Therenderershouldnothandlepagination,dataloading,orcoordination
 *withthecontrolpanel.Itisonlyconcernedwithrendering.
 *
 */

varmvc=require('web.mvc');

//Renderersmaydisplaysampledatawhenthereisnorealdatatodisplay.In
//thiscasethedataisdisplayedwithopacityandcan'tbeclicked.Moreover,
//wealsowanttopreventtheuserfromaccessingDOMelementswithTAB
//navigation.Thisisthelistofelementswewon'tallowtofocus.
constFOCUSABLE_ELEMENTS=[
    //focusablebydefault
    'a','button','input','select','textarea',
    //manuallyset
    '[tabindex="0"]'
].map((sel)=>`:scope${sel}`).join(',');

/**
 *@classAbstractRenderer
 */
returnmvc.Renderer.extend({
    //Definestheelementssuppressedwhenindemodata.Thismustbealist
    //ofDOMselectorsmatchingviewelementsthatwill:
    //1.receivethe'o_sample_data_disabled'class(greydout&nouserevents)
    //2.havethemselvesandanyoftheirfocusablechildrenremovedfromthe
    //   tabnavigation
    sampleDataTargets:[],

    /**
     *@override
     *@param{string}[params.noContentHelp]
     */
    init:function(parent,state,params){
        this._super.apply(this,arguments);
        this.arch=params.arch;
        this.noContentHelp=params.noContentHelp;
        this.withSearchPanel=params.withSearchPanel;
    },
    /**
     *Therenderingisasynchronous.Thestart
     *methodsimplymakessurethatwerendertheview.
     *
     *@returns{Promise}
     */
    asyncstart(){
        this.$el.addClass(this.arch.attrs.class);
        if(this.withSearchPanel){
            this.$el.addClass('o_renderer_with_searchpanel');
        }
        awaitPromise.all([this._render(),this._super()]);
    },
    /**
     *CalledeachtimetherendererisattachedintotheDOM.
     */
    on_attach_callback:function(){},
    /**
     *CalledeachtimetherendererisdetachedfromtheDOM.
     */
    on_detach_callback:function(){},

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *Returnsanyrelevantstatethattherenderermightwanttokeep.
     *
     *Theideaisthatarenderercanbedestroyed,thenbereplacedbyanother
     *oneinstantiatedwiththestatefromthemodelandthelocalStatefrom
     *therenderer,andtheendresultshouldbethesame.
     *
     *ThekindofstatethatweexpecttherenderertohaveismostlyDOMstate
     *suchasthescrollposition,thecurrentlyactivetabpage,...
     *
     *ThismethodiscalledbeforeeachupdateState,bythecontroller.
     *
     *@seesetLocalState
     *@returns{any}
     */
    getLocalState:function(){
    },
    /**
     *Ordertofocustobegiventothecontentofthecurrentview
     */
    giveFocus:function(){
    },
    /**
     *Resetsstatethatrendererkeeps,statemaycontainsscrollposition,
     *thecurrentlyactivetabpage,...
     *
     *@seegetLocalState
     *@seesetLocalState
     */
    resetLocalState(){
    },
    /**
     *ThisisthereverseoperationfromgetLocalState. Withthismethod,we
     *expecttherenderertorestoreallDOMstate,ifitisrelevant.
     *
     *ThismethodiscalledaftereachupdateState,bythecontroller.
     *
     *@seegetLocalState
     *@param{any}localStatetheresultofacalltogetLocalState
     */
    setLocalState:function(localState){
    },
    /**
     *Updatesthestateoftheview.Itretriggersafullrerender,unlesstold
     *otherwise(foroptimizationforexample).
     *
     *@param{any}state
     *@param{Object}params
     *@param{boolean}[params.noRender=false]
     *       iftrue,themethodonlyupdatesthestatewithoutrerendering
     *@returns{Promise}
     */
    asyncupdateState(state,params){
        this._setState(state);
        if(!params.noRender){
            awaitthis._render();
        }
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *Rendersthewidget.Thismethodcanbeoverridentoperformactions
     *beforeoraftertheviewhasbeenrendered.
     *
     *@private
     *@returns{Promise}
     */
    async_render(){
        awaitthis._renderView();
        this._suppressFocusableElements();
    },
    /**
     *@private
     *@param{Object}context
     */
    _renderNoContentHelper:function(context){
        lettemplateName;
        if(!context&&this.noContentHelp){
            templateName="web.ActionHelper";
            context={noContentHelp:this.noContentHelp};
        }else{
            templateName="web.NoContentHelper";
        }
        consttemplate=document.createElement('template');
        //FIXME:retrieveowlqwebinstanceviatheenvsetonComponents.t.
        //italsoworksinthetests(importing'web.env'wouldn't).This
        //won'tbenecessaryassoonasthiswillbewritteninowl.
        constowlQWeb=owl.Component.env.qweb;
        template.innerHTML=owlQWeb.renderToString(templateName,context);
        this.el.append(template.content.firstChild);
    },
    /**
     *Actualrendering.Thismethodismeanttobeoverriddenbyconcrete
     *renderers.
     *
     *@abstract
     *@private
     *@returns{Promise}
     */
    async_renderView(){},
    /**
     *Assignsanewstatetotherendererifnotfalse.
     *
     *@private
     *@param{any}[state=false]
     */
    _setState(state=false){
        if(state!==false){
            this.state=state;
        }
    },
    /**
     *Suppresses'tabindex'propertyonanyfocusableelementlocatedinside
     *rootelementsdefinedinthe`this.sampleDataTargets`objectandassigns
     *the'o_sample_data_disabled'classtotheserootelements.
     *
     *@private
     *@seesampleDataTargets
     */
    _suppressFocusableElements(){
        if(!this.state.isSample||this.isEmbedded){
            return;
        }
        constrootEls=[];
        for(constselectorofthis.sampleDataTargets){
            rootEls.push(...this.el.querySelectorAll(`:scope${selector}`));
        }
        constfocusableEls=newSet(rootEls);
        for(constrootElofrootEls){
            rootEl.classList.add('o_sample_data_disabled');
            for(constfocusableElofrootEl.querySelectorAll(FOCUSABLE_ELEMENTS)){
                focusableEls.add(focusableEl);
            }
        }
        for(constfocusableEloffocusableEls){
            focusableEl.setAttribute('tabindex',-1);
            if(focusableEl.classList.contains('dropdown-item')){
                //TellsBootstraptoignorethedropdowniteminkeynav
                focusableEl.classList.add('disabled');
            }
        }
    },
});

});
