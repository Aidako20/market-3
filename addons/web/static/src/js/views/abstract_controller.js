flectra.define('web.AbstractController',function(require){
"usestrict";

/**
 *TheControllerclassistheclasscoordinatingthemodelandtherenderer.
 *ItistheCinMVC,andiswhatwasformerlyknowninFlectraasaView.
 *
 *Itsroleistolistentoeventsbubblingupfromthemodel/renderer,andcall
 *theappropriatemethodsifnecessary. Italsorendercontrolpanelbuttons,
 *andreacttochangesinthesearchview. Basically,allinteractionsfrom
 *therenderer/modelwiththeoutsideworld(meaningserver/readinginsession/
 *readinglocalstorage,...)hastogothroughthecontroller.
 */

varActionMixin=require('web.ActionMixin');
varajax=require('web.ajax');
varconcurrency=require('web.concurrency');
constconfig=require('web.config');
const{ComponentWrapper}=require('web.OwlCompatibility');
varmvc=require('web.mvc');
varsession=require('web.session');


varAbstractController=mvc.Controller.extend(ActionMixin,{
    custom_events:_.extend({},ActionMixin.custom_events,{
        navigation_move:'_onNavigationMove',
        open_record:'_onOpenRecord',
        switch_view:'_onSwitchView',
    }),
    events:{
        'clicka[type="action"]':'_onActionClicked',
    },

    /**
     *@param{Object}param
     *@param{Object[]}params.actionViews
     *@param{string}params.activeActions
     *@param{string}params.bannerRoute
     *@param{Object}[params.controlPanel]
     *@param{string}params.controllerIDanidtoeasethecommunicationwith
     *     upstreamcomponents
     *@param{string}params.displayName
     *@param{Object}params.initialState
     *@param{string}params.modelName
     *@param{ActionModel}[params.searchModel]
     *@param{string}[params.searchPanel]
     *@param{string}params.viewType
     *@param{boolean}[params.withControlPanel]
     *@param{boolean}[params.withSearchPanel]
     */
    init:function(parent,model,renderer,params){
        this._super.apply(this,arguments);
        this._title=params.displayName;
        this.modelName=params.modelName;
        this.activeActions=params.activeActions;
        this.controllerID=params.controllerID;
        this.initialState=params.initialState;
        this.bannerRoute=params.bannerRoute;
        this.actionViews=params.actionViews;
        this.viewType=params.viewType;
        //useaDropPrevioustocorrectlyhandleconcurrentupdates
        this.dp=newconcurrency.DropPrevious();

        this.withControlPanel=params.withControlPanel;
        this.withSearchPanel=params.withSearchPanel;
        if(params.searchModel){
            this.searchModel=params.searchModel;
        }
        if(this.withControlPanel){
            const{Component,props}=params.controlPanel;
            this.ControlPanel=Component;
            this.controlPanelProps=props;
        }
        if(this.withSearchPanel){
            const{Component,props}=params.searchPanel;
            this.SearchPanel=Component;
            this.searchPanelProps=props;
        }
    },

    /**
     *Simplyrendersandupdatestheurl.
     *
     *@returns{Promise}
     */
    start:asyncfunction(){
        this.$el.addClass('o_view_controller');
        this.renderButtons();
        constpromises=[this._super(...arguments)];
        if(this.withControlPanel){
            this._updateControlPanelProps(this.initialState);
            this._controlPanelWrapper=newComponentWrapper(this,this.ControlPanel,this.controlPanelProps);
            this._controlPanelWrapper.env.bus.on('focus-view',this,()=>this._giveFocus());
            promises.push(this._controlPanelWrapper.mount(this.el,{position:'first-child'}));
        }
        if(this.withSearchPanel){
            this._searchPanelWrapper=newComponentWrapper(this,this.SearchPanel,this.searchPanelProps);
            constcontent=this.el.querySelector(':scope.o_content');
            content.classList.add('o_controller_with_searchpanel');
            promises.push(this._searchPanelWrapper.mount(content,{position:'first-child'}));
        }
        awaitPromise.all(promises);
        awaitthis._update(this.initialState,{shouldUpdateSearchComponents:false});
        this.updateButtons();
        this.el.classList.toggle('o_view_sample_data',this.model.isInSampleMode());
    },
    /**
     *@override
     */
    destroy:function(){
        if(this.$buttons){
            this.$buttons.off();
        }
        ActionMixin.destroy.call(this);
        this._super.apply(this,arguments);
    },
    /**
     *CalledeachtimethecontrollerisattachedintotheDOM.
     */
    on_attach_callback:function(){
        ActionMixin.on_attach_callback.call(this);
        this.searchModel.on('search',this,this._onSearch);
        if(!config.device.isMobileDevice){
            this.searchModel.trigger('focus-control-panel');
        }
        if(this.withControlPanel){
            this.searchModel.on('get-controller-query-params',this,this._onGetOwnedQueryParams);
        }
        if(!(this.rendererinstanceofowl.Component)){
            this.renderer.on_attach_callback();
        }
    },
    /**
     *CalledeachtimethecontrollerisdetachedfromtheDOM.
     */
    on_detach_callback:function(){
        ActionMixin.on_detach_callback.call(this);
        this.searchModel.off('search',this);
        if(this.withControlPanel){
            this.searchModel.off('get-controller-query-params',this);
        }
        if(!(this.rendererinstanceofowl.Component)){
            this.renderer.on_detach_callback();
        }
    },

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *@override
     */
    canBeRemoved:function(){
        //AAB:getridof'readonlyIfRealDiscard'optionwhenon_hashchangemechanismisimproved
        returnthis.discardChanges(undefined,{
            noAbandon:true,
            readonlyIfRealDiscard:true,
        });
    },
    /**
     *DiscardsthechangesmadeontherecordassociatedtothegivenID,or
     *allchangesmadebythecurrentcontrollerifnorecordIDisgiven.For
     *example,whentheuseropensthe'home'screen,theactionmanagercalls
     *thismethodontheactiveviewtomakesureitisoktoopenthehome
     *screen(andloseallcurrentstate).
     *
     *NotethatitreturnsaPromise,becausetheviewcouldchoosetoaskthe
     *userifheagreestodiscard.
     *
     *@param{string}[recordID]
     *       ifnotgiven,weconsiderallthechangesmadebythecontroller
     *@param{Object}[options]
     *@returns{Promise}resolvedifproperlydiscarded,rejectedotherwise
     */
    discardChanges:function(recordID,options){
        returnPromise.resolve();
    },
    /**
     *Exportthestateofthecontrollercontaininginformationthatisshared
     *betweendifferentcontrollersofasameaction(likethecurrentsearch
     *modelstateorthestatesofsomecomponents).
     *
     *@returns{Object}
     */
    exportState(){
        constexported={
            searchModel:this.searchModel.exportState(),
        };
        if(this.withSearchPanel){
            constsearchPanel=this._searchPanelWrapper.componentRef.comp;
            exported.searchPanel=searchPanel.exportState();
        }
        returnexported;
    },
    /**
     *Parsesandimportsapreviouslyexportedstate.
     *
     *@param{Object}state
     */
    importState(state){
        this.searchModel.importState(state.searchModel);
        if(this.withSearchPanel){
            constsearchPanel=this._searchPanelWrapper.componentRef.comp;
            searchPanel.importState(state.searchPanel);
        }
    },
    /**
     *Theuseofthismethodisdiscouraged. Itisstillsnakecased,because
     *itcurrentlyisusedinmanytemplates,butwewillmovetoasimpler
     *mechanismassoonaswecan.
     *
     *@deprecated
     *@param{string}actiontypeofaction,suchas'create','read',...
     *@returns{boolean}
     */
    is_action_enabled:function(action){
        returnthis.activeActions[action];
    },
    /**
     *Shorthelpermethodtoreloadtheview
     *
     *@param{Object}[params={}]
     *@param{Object}[params.controllerState={}]
     *@returns{Promise}
     */
    reload:asyncfunction(params={}){
        if(params.controllerState){
            this.importState(params.controllerState);
            Object.assign(params,this.searchModel.get('query'));
        }
        returnthis.update(params,{});
    },
    /**
     *Thisisthemainentrypointforthecontroller. Changesfromthesearch
     *viewarriveinthismethod,andinternalchangescansometimesalsocall
     *thismethod. Itisbasicallythewayeverythingnotifiesthecontroller
     *thatsomethinghaschanged.
     *
     *Theupdatemethodisresponsibleforfetchingnecessarydata,then
     *updatingtherendererandwaitfortherenderingtocomplete.
     *
     *@param{Object}paramswillbegiventothemodelandtotherenderer
     *@param{Object}[options={}]
     *@param{boolean}[options.reload=true]iftrue,themodelwillreloaddata
     *@returns{Promise}
     */
    asyncupdate(params,options={}){
        constshouldReload='reload'inoptions?options.reload:true;
        if(shouldReload){
            this.handle=awaitthis.dp.add(this.model.reload(this.handle,params));
        }
        constlocalState=this.renderer.getLocalState();
        conststate=this.model.get(this.handle,{withSampleData:true});
        constpromises=[
            this._updateRendererState(state,params).then(()=>{
                this.renderer.setLocalState(localState);
            }),
            this._update(this.model.get(this.handle),params)
        ];
        awaitthis.dp.add(Promise.all(promises));
        this.updateButtons();
        this.el.classList.toggle('o_view_sample_data',this.model.isInSampleMode());
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------


    /**
     *Meanttobeoverridentoreturnaproperobject.
     *@private
     *@param{Object}[state]
     *@return{(Object|null)}
     */
    _getPagingInfo:function(state){
        returnnull;
    },
    /**
     *Meanttobeoverridentoreturnaproperobject.
     *@private
     *@param{Object}[state]
     *@return{(Object|null)}
     */
    _getActionMenuItems:function(state){
        returnnull;
    },
    /**
     *Givesthefocustotherendererifnotinsamplemode.
     *
     *@private
     */
    _giveFocus(){
        if(!this.model.isInSampleMode()){
            this.renderer.giveFocus();
        }
    },
    /**
     *Thismethodisthewayaviewcannotifiestheoutsideworldthat
     *somethinghaschanged. Themainuseforthisistoupdatetheurl,for
     *examplewithanewid.
     *
     *@private
     */
    _pushState:function(){
        this.trigger_up('push_state',{
            controllerID:this.controllerID,
            state:this.getState(),
        });
    },
    /**
     *@private
     *@param{function}callbackfunctiontoexecutebeforeremovingclassname
     *  'o_view_sample_data'(maybeasync).Thisallowstoreloadand/or
     *  rerenderbeforeremovingtheclassName,thuspreventingtheviewfrom
     *  flickering.
     */
    async_removeSampleData(callback){
        this.model.leaveSampleMode();
        if(callback){
            awaitcallback();
        }
        this.el.classList.remove('o_view_sample_data');
    },
    /**
     *Rendersthehtmlprovidedbytheroutespecifiedbythe
     *bannerRouteattributeonthecontroller(banner_routeinthetemplate).
     *Rendersitbeforetheviewoutputandaddacssclass'o_has_banner'toit.
     *Therecanbeonlyonebannerdisplayedatatime.
     *
     *Ifthebannercontainsstylesheetlinksorjsfiles,theyaremovedto<head>
     *(andwillonlybefetchedonce).
     *
     *Routeexample:
     *@http.route('/module/hello',auth='user',type='json')
     *defhello(self):
     *    return{'html':'<h1>hello,world</h1>'}
     *
     *@private
     *@returns{Promise}
     */
    _renderBanner:asyncfunction(){
        if(this.bannerRoute!==undefined){
            constresponse=awaitthis._rpc({
                route:this.bannerRoute,
                params:{context:session.user_context},
            });
            if(!response.html){
                this.$el.removeClass('o_has_banner');
                returnPromise.resolve();
            }
            this.$el.addClass('o_has_banner');
            var$banner=$(response.html);
            //weshouldonlydisplayonebanneratatime
            if(this._$banner&&this._$banner.remove){
                this._$banner.remove();
            }
            //Cssandjsaremovedto<head>
            vardefs=[];
            $('link[rel="stylesheet"]',$banner).each(function(i,link){
                defs.push(ajax.loadCSS(link.href));
                link.remove();
            });
            $('script[type="text/javascript"]',$banner).each(function(i,js){
                defs.push(ajax.loadJS(js.src));
                js.remove();
            });
            awaitPromise.all(defs);
            $banner.insertBefore(this.$('>.o_content'));
            this._$banner=$banner;
        }
    },
    /**
     *@override
     *@private
     */
    _startRenderer:function(){
        if(this.rendererinstanceofowl.Component){
            returnthis.renderer.mount(this.$('.o_content')[0]);
        }
        returnthis.renderer.appendTo(this.$('.o_content'));
    },
    /**
     *Thismethodiscalledaftereachupdateorwhenthestartmethodis
     *completed.
     *
     *ItsprimaryuseistobeusedasahooktoupdateallpartsoftheUI,
     *besidestherenderer. Forexample,itmaybeusedtoenable/disable
     *somebuttonsinthecontrolpanel,suchasthecurrentgraphtypefora
     *graphview.
     *
     *FIXME:thishookshouldbesynchronous,andcalledonceasyncrendering
     *hasbeendone.
     *
     *@private
     *@param{Object}statethestategivenbythemodel
     *@param{Object}[params={}]
     *@param{Array}[params.breadcrumbs]
     *@param{Object}[params.shouldUpdateSearchComponents]
     *@returns{Promise}
     */
    async_update(state,params){
        //AAB:updatethecontrolpanel->thiswillbemovedelsewhereatsomepoint
        if(!this.$buttons){
            this.renderButtons();
        }
        constpromises=[this._renderBanner()];
        if(params.shouldUpdateSearchComponents!==false){
            if(this.withControlPanel){
                this._updateControlPanelProps(state);
                if(params.breadcrumbs){
                    this.controlPanelProps.breadcrumbs=params.breadcrumbs;
                }
                promises.push(this.updateControlPanel());
            }
            if(this.withSearchPanel){
                this._updateSearchPanel();
            }
        }
        this._pushState();
        awaitPromise.all(promises);
    },
    /**
     *Canbeusedtoupdatethekey'cp_content'.Thismethodiscalledinstartand_updatemethods.
     *
     *@private
     *@param{Object}statethestategivenbythemodel
     */
     _updateControlPanelProps(state){
        if(!this.controlPanelProps.cp_content){
            this.controlPanelProps.cp_content={};
        }
        if(this.$buttons){
            this.controlPanelProps.cp_content.$buttons=this.$buttons;
        }
        Object.assign(this.controlPanelProps,{
            actionMenus:this._getActionMenuItems(state),
            pager:this._getPagingInfo(state),
            title:this.getTitle(),
        });
    },
    /**
     *@private
     *@param{Object}state
     *@param{Object}newProps
     *@returns{Promise}
     */
    _updatePaging:asyncfunction(state,newProps){
        constpagingInfo=this._getPagingInfo(state);
        if(pagingInfo){
            Object.assign(pagingInfo,newProps);
            returnthis.updateControlPanel({pager:pagingInfo});
        }
    },
    /**
     *Updatesthestateoftherenderer(handlebothWidgetandComponent
     *renderers).
     *
     *@private
     *@param{Object}statethemodelstate
     *@param{Object}[params={}]willbegiventothemodelandtotherenderer
     *@return{Promise}
     */
    _updateRendererState(state,params={}){
        if(this.rendererinstanceofowl.Component){
            returnthis.renderer.update(state);
        }
        returnthis.renderer.updateState(state,params);
    },
    /**
     *@private
     *@param{Object}[newProps={}]
     *@return{Promise}
     */
    async_updateSearchPanel(newProps){
        Object.assign(this.searchPanelProps,newProps);
        awaitthis._searchPanelWrapper.update(this.searchPanelProps);
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *Whenauserclicksonan<a>linkwithtype="action",weneedtoactually
     *dotheaction.Thiskindoflinksisusedalotinno-contenthelpers.
     *
     **ifthelinkhasbothdata-modelanddata-methodattributes,the
     *  correspondingmethodiscalled,chainedtoanyactionitwould
     *  return.Anoptionaldata-reload-on-close(settoanon-falsyvalue)
     *  alsocausesthunderlyingviewtobereloadedafterthedialogis
     *  closed.
     **ifthelinkhasanameattribute,invoketheactionwiththat
     *  identifier(see:class:`ActionManager.doAction`tonotgetthe
     *  details)
     **otherwisean*actiondescriptor*isbuiltfromthelink'sdata-
     *  attributes(model,res-id,views,domainandcontext)
     *
     *@private
     *@paramev
     */
    _onActionClicked:function(ev){//FIXME:maybethisshouldalsoworkon<button>tags?
        ev.preventDefault();
        var$target=$(ev.currentTarget);
        varself=this;
        vardata=$target.data();

        if(data.method!==undefined&&data.model!==undefined){
            varoptions={};
            if(data.reloadOnClose){
                options.on_close=function(){
                    self.trigger_up('reload');
                };
            }
            this.dp.add(this._rpc({
                model:data.model,
                method:data.method,
                context:session.user_context,
            })).then(function(action){
                if(action!==undefined){
                    self.do_action(action,options);
                }
            });
        }elseif($target.attr('name')){
            this.do_action(
                $target.attr('name'),
                data.context&&{additional_context:data.context}
            );
        }else{
            this.do_action({
                name:$target.attr('title')||_.str.strip($target.text()),
                type:'ir.actions.act_window',
                res_model:data.model||this.modelName,
                res_id:data.resId,
                target:'current',//TODO:makecustomisable?
                views:data.views||(data.resId?[[false,'form']]:[[false,'list'],[false,'form']]),
                domain:data.domain||[],
            },{
                additional_context:_.extend({},data.context)
            });
        }
    },
    /**
     *Calledeitherfromthecontrolpaneltofocusthecontroller
     *orfromtheviewtofocusthesearchbar
     *
     *@private
     *@param{FlectraEvent}ev
     */
    _onNavigationMove:function(ev){
        switch(ev.data.direction){
            case'up':
                ev.stopPropagation();
                this.searchModel.trigger('focus-control-panel');
                break;
            case'down':
                ev.stopPropagation();
                this._giveFocus();
                break;
        }
    },
    /**
     *WhenanFlectraeventarrivesrequestingarecordtobeopened,thismethod
     *getstheres_id,andrequestaswitchviewintheappropriatemode
     *
     *Note:thismethodseemswrong,itreliesonthemodelbeingabasicmodel,
     *togettheres_id. Itshouldreceivetheres_idintheeventdata
     *@todomovethistobasiccontroller?
     *
     *@private
     *@param{FlectraEvent}ev
     *@param{number}ev.data.idThelocalmodelIDfortherecordtobe
     *  opened
     *@param{string}[ev.data.mode='readonly']
     */
    _onOpenRecord:function(ev){
        ev.stopPropagation();
        varrecord=this.model.get(ev.data.id,{raw:true});
        this.trigger_up('switch_view',{
            view_type:'form',
            res_id:record.res_id,
            mode:ev.data.mode||'readonly',
            model:this.modelName,
        });
    },
    /**
     *Calledwhenthereisachangeinthesearchview,sothecurrentaction's
     *environmentneedstobeupdatedwiththenewdomain,context,groupby,...
     *
     *@private
     *@param{Object}searchQuery
     */
    _onSearch:function(searchQuery){
        this.reload(_.extend({offset:0,groupsOffset:0},searchQuery));
    },
    /**
     *Interceptsthe'switch_view'eventtoaddthecontrollerIDintothedata,
     *andletstheeventbubbleup.
     *
     *@param{FlectraEvent}ev
     */
    _onSwitchView:function(ev){
        ev.data.controllerID=this.controllerID;
    },
});

returnAbstractController;

});
