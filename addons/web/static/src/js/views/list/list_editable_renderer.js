flectra.define('web.EditableListRenderer',function(require){
"usestrict";

/**
 *EditableListrenderer
 *
 *Thelistrendererisreasonablycomplex,sowesplititintwofiles.This
 *filesimply'includes'thebasicListRenderertoaddallthenecessary
 *behaviorstoenableeditingrecords.
 *
 *UnlikeFlectrav10andbefore,thislistrendererisindependantfromtheform
 *view.Itusesthesamewidgets,butthecodeistotallystandalone.
 */
varcore=require('web.core');
vardom=require('web.dom');
varListRenderer=require('web.ListRenderer');
varutils=require('web.utils');
const{WidgetAdapterMixin}=require('web.OwlCompatibility');
constconcurrency=require('web.concurrency');

var_t=core._t;

ListRenderer.include({
    RESIZE_DELAY:200,
    custom_events:_.extend({},ListRenderer.prototype.custom_events,{
        navigation_move:'_onNavigationMove',
    }),
    events:_.extend({},ListRenderer.prototype.events,{
        'click.o_field_x2many_list_row_adda':'_onAddRecord',
        'click.o_group_field_row_adda':'_onAddRecordToGroup',
        'keydown.o_field_x2many_list_row_adda':'_onKeyDownAddRecord',
        'clicktbodytd.o_data_cell':'_onCellClick',
        'clicktbodytr:not(.o_data_row)':'_onEmptyRowClick',
        'clicktfoot':'_onFooterClick',
        'clicktr.o_list_record_remove':'_onRemoveIconClick',
    }),
    /**
     *@override
     *@param{Object}params
     *@param{boolean}params.addCreateLine
     *@param{boolean}params.addCreateLineInGroups
     *@param{boolean}params.addTrashIcon
     *@param{boolean}params.isMany2Many
     *@param{boolean}params.isMultiEditable
     */
    init:function(parent,state,params){
        this._super.apply(this,arguments);

        this.editable=params.editable;
        this.isMultiEditable=params.isMultiEditable;
        this.columnWidths=false;

        //ifaddCreateLine(resp.addCreateLineInGroups)istrue,therenderer
        //willadda'Addaline'linkatthebottomofthelistview(resp.
        //atthebottomofeachgroup)
        this.addCreateLine=params.addCreateLine;
        this.addCreateLineInGroups=params.addCreateLineInGroups;

        //Controlsallowoverriding"addaline"bycustomcontrols.

        //Each<control>(onlyoneisactuallyneeded)isacontainerfor(multiple)<create>.
        //Each<create>willbea"addaline"buttonwithcustomtextandcontext.

        //Thefollowingcodewillbrowsethearchtofind
        //allthe<create>thatareinside<control>
        this.creates=[];
        this.arch.children.forEach(child=>{
            if(child.tag!=='control'){
                return;
            }
            child.children.forEach(child=>{
                if(child.tag!=='create'||child.attrs.invisible){
                    return;
                }
                this.creates.push({
                    context:child.attrs.context,
                    string:child.attrs.string,
                });
            });
        });

        //Addthedefaultbuttonifwedidn'tfindanycustombutton.
        if(this.creates.length===0){
            this.creates.push({
                string:_t("Addaline"),
            });
        }

        //ifaddTrashIconistrue,therewillbeasmalltrashiconattheend
        //ofeachline,sotheusercandeletearecord.
        this.addTrashIcon=params.addTrashIcon;

        //replacethetrashiconbyXincaseofmany2manyrelations
        //sothatitmeans'unlink'insteadof'remove'
        this.isMany2Many=params.isMany2Many;

        this.currentRow=null;
        this.currentFieldIndex=null;
        this.isResizing=false;
        this.eventListeners=[];

        this.rowModeChangeMutex=newconcurrency.Mutex();
    },
    /**
     *@override
     *@returns{Promise}
     */
    start:function(){
        core.bus.on('click',this,this._onWindowClicked.bind(this));
        core.bus.on('resize',this,_.debounce(this._onResize.bind(this),this.RESIZE_DELAY));
        core.bus.on('DOM_updated',this,()=>this._freezeColumnWidths());
        returnthis._super();
    },
    /**
     *Overridentounbindallattachedlisteners
     *
     *@override
     */
    destroy:function(){
        this.eventListeners.forEach(listener=>{
            const{type,el,callback,options}=listener;
            el.removeEventListener(type,callback,options);
        });
        returnthis._super.apply(this,arguments);
    },
    /**
     *ThelistrendererneedstoknowifitisintheDOM,andtobenotified
     *whenitisattachedtotheDOMtoproperlycomputecolumnwidths.
     *
     *@override
     */
    on_attach_callback:function(){
        this.isInDOM=true;
        this._super();
        //_freezeColumnWidthsrequestsstyleinformation,whichproducesa
        //repaint,sowecallitafter_supertopreventflickering(incase
        //othercodewouldalsomodifytheDOMpostrendering/beforerepaint)
        this._freezeColumnWidths();
    },
    /**
     *ThelistrendererneedstoknowifitisintheDOMtoproperlycompute
     *columnwidths.
     *
     *@override
     */
    on_detach_callback:function(){
        this.isInDOM=false;
        this._super();
    },

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *IfthegivenrecordIDisthelistmainone(orthatnorecordIDis
     *given),thenthewholeviewcanbesavedifoneofthetwofollowing
     *conditionsistrue:
     *-Thereisnolineinedition(alllinesaresavedsotheyareallvalid)
     *-Thelineineditioncanbesaved
     *
     *IfthegivenrecordIDisarecordinthelist,toggleaclassNameonits
     *row'scellsforinvalidfields,sothatwecanstylethosecells
     *differently.
     *
     *@override
     *@param{string}[recordID]
     *@returns{string[]}
     */
    canBeSaved:function(recordID){
        if((recordID||this.state.id)===this.state.id){
            recordID=this.getEditableRecordID();
            if(recordID===null){
                return[];
            }
        }
        varfieldNames=this._super(recordID);
        this.$('.o_selected_row.o_data_cell').removeClass('o_invalid_cell');
        this.$('.o_selected_row.o_data_cell:has(>.o_field_invalid)').addClass('o_invalid_cell');
        returnfieldNames;
    },
    /**
     *WeneedtooverridetheconfirmChangemethodfromBasicRendererto
     *reevaluatetherowdecorations. Sincetheydependsonthecurrentvalue
     *oftherow,theymighthavechangedbetweeneachedit.
     *
     *@override
     */
    confirmChange:function(state,recordID){
        varself=this;
        returnthis._super.apply(this,arguments).then(function(widgets){
            if(widgets.length){
                var$row=self._getRow(recordID);
                varrecord=self._getRecord(recordID);
                self._setDecorationClasses($row,self.rowDecorations,record);
                self._updateFooter();
            }
            returnwidgets;
        });
    },
    /**
     *ThisisaspecializedversionofconfirmChange,meanttobecalledwhen
     *thechangemayhaveaffectedmorethanoneline(so,forexample,an
     *onchangewhichadd/removeafewlinesinax2many. Thisdoesnotoccur
     *inanormallistview).
     *
     *Theupdateismoredifficultwhenotherrowscouldhavebeenchanged.We
     *needtopotentiallyremovesomelines,addsomeotherlines,updatesome
     *otherlinesandmaybereorderafewofthem. Thisproblemwouldneatly
     *besolvedbyusingavirtualdom,butwedonothavethisluxuryyet.
     *So,inthemeantime,whatwedoisbasicallyremoveeverycurrentrow
     *exceptthe'main'one(therowwhichcausedtheupdate),thenrerender
     *everynewrowandaddthembefore/afterthemainone.
     *
     *Notethatthisfunctionassumesthatthelistisn'tgrouped,whichis
     *fineasit'sneverthecaseforx2manylists.
     *
     *@param{Object}state
     *@param{string}id
     *@param{string[]}fields
     *@param{FlectraEvent}ev
     *@returns{Promise<AbstractField[]>}resolvedwiththelistofwidgets
     *                                     thathavebeenreset
     */
    confirmUpdate:function(state,id,fields,ev){
        varself=this;

        varoldData=this.state.data;
        this._setState(state);
        returnthis.confirmChange(state,id,fields,ev).then(function(){
            //Ifnorecordwith'id'canbefoundinthestate,the
            //confirmChangemethodwillhavererenderedthewholeviewalready,
            //sonofurtherworkisnecessary.
            varrecord=self._getRecord(id);
            if(!record){
                return;
            }

            _.each(oldData,function(rec){
                if(rec.id!==id){
                    self._destroyFieldWidgets(rec.id);
                }
            });

            //re-renderwholebody(outsidethedom)
            self.defs=[];
            var$newBody=self._renderBody();
            vardefs=self.defs;
            deleteself.defs;

            returnPromise.all(defs).then(function(){
                //updateregisteredmodifierstoedit'mode'becausethecallto
                //_renderBodysetbaseModeByRecordas'readonly'
                _.each(self.columns,function(node){
                    self._registerModifiers(node,record,null,{mode:'edit'});
                });

                //storetheselectionrangetorestoreitoncethetablewill
                //bere-rendered,andthecurrentcellre-selected
                varcurrentRowID;
                varcurrentWidget;
                varfocusedElement;
                varselectionRange;
                if(self.currentRow!==null){
                    currentRowID=self._getRecordID(self.currentRow);
                    currentWidget=self.allFieldWidgets[currentRowID][self.currentFieldIndex];
                    if(currentWidget){
                        focusedElement=currentWidget.getFocusableElement().get(0);
                        if(currentWidget.formatType!=='boolean'&&focusedElement){
                            selectionRange=dom.getSelectionRange(focusedElement);
                        }
                    }
                }

                //removealldatarowsexcepttheonebeingedited,andinsert
                //datarowsofthere-renderedbodybeforeandafterit
                var$editedRow=self._getRow(id);
                $editedRow.nextAll('.o_data_row').remove();
                $editedRow.prevAll('.o_data_row').remove();
                var$newRow=$newBody.find('.o_data_row[data-id="'+id+'"]');
                $newRow.prevAll('.o_data_row').get().reverse().forEach(function(row){
                    $(row).insertBefore($editedRow);
                });
                $newRow.nextAll('.o_data_row').get().reverse().forEach(function(row){
                    $(row).insertAfter($editedRow);
                });

                if(self.currentRow!==null){
                    varnewRowIndex=$editedRow.prop('rowIndex')-1;
                    self.currentRow=newRowIndex;
                    returnself._selectCell(newRowIndex,self.currentFieldIndex,{force:true})
                        .then(function(){
                            //restoretheselectionrange
                            currentWidget=self.allFieldWidgets[currentRowID][self.currentFieldIndex];
                            if(currentWidget){
                                focusedElement=currentWidget.getFocusableElement().get(0);
                                if(selectionRange){
                                    dom.setSelectionRange(focusedElement,selectionRange);
                                }
                            }
                        });
                }
            });
        });
    },
    /**
     *Editthefirstrecordinthelist
     */
    editFirstRecord:function(ev){
        const$borderRow=this._getBorderRow(ev.data.side||'first');
        this._selectCell($borderRow.prop('rowIndex')-1,ev.data.cellIndex||0);
    },
    /**
     *Editagivenrecordinthelist
     *
     *@param{string}recordID
     */
    editRecord:function(recordID){
        var$row=this._getRow(recordID);
        varrowIndex=$row.prop('rowIndex')-1;
        returnthis._selectCell(rowIndex,0);
    },
    /**
     *Givesfocustoaspecificcell,givenitsrowanditsrelatedcolumn.
     *
     *@param{string}recordId
     *@param{Object}column
     */
    focusCell:function(recordId,column){
        var$row=this._getRow(recordId);
        varcellIndex=this.columns.indexOf(column);
        $row.find('.o_data_cell')[cellIndex].focus();
    },
    /**
     *ReturnstherecordIDassociatedtothelinewhichiscurrentlyinedition
     *ornullifthereisnolineinedition.
     *
     *@returns{string|null}
     */
    getEditableRecordID:function(){
        if(this.currentRow!==null){
            returnthis._getRecordID(this.currentRow);
        }
        returnnull;
    },
    /**
     *Returnswhetherthelistisinmultiplerecordeditionfromagivenrecord.
     *
     *@private
     *@param{string}recordId
     *@returns{boolean}
     */
    isInMultipleRecordEdition:function(recordId){
        returnthis.isEditable()&&this.isMultiEditable&&this.selection.includes(recordId);
    },
    /**
     *Returnswhetherthelistcanbeedited.
     *It'struewhen:
     *-thelist`editable`propertyisset,
     *-oratleastonerecordisselected(becomespartiallyeditable)
     *
     *@returns{boolean}
     */
    isEditable:function(){
        returnthis.editable||(this.isMultiEditable&&this.selection.length);
    },
    /**
     *RemovesthelineassociatedtothegivenrecordID(theindexoftherow
     *isfoundthankstotheoldstate),thenupdatesthestate.
     *
     *@param{Object}state
     *@param{string}recordID
     */
    removeLine:function(state,recordID){
        this._setState(state);
        var$row=this._getRow(recordID);
        if($row.length===0){
            return;
        }
        if($row.prop('rowIndex')-1===this.currentRow){
            this.currentRow=null;
            this._enableRecordSelectors();
        }

        //destroywidgetsfirst
        this._destroyFieldWidgets(recordID);
        //removetherow
        if(this.state.count>=4){
            $row.remove();
        }else{
            //wewanttoalwayskeepatleast4(possiblyempty)rows
            var$emptyRow=this._renderEmptyRow();
            $row.replaceWith($emptyRow);
            //movetheemptyrowwejustinsertedafterlastdatarow
            const$lastDataRow=this.$('.o_data_row:last');
            if($lastDataRow.length){
                $emptyRow.insertAfter($lastDataRow);
            }
        }
    },
    /**
     *UpdatesthealreadyrenderedrowassociatedtothegivenrecordIDsothat
     *itfitsthegivenmode.
     *
     *@param{string}recordID
     *@param{string}mode
     *@returns{Promise}
     */
    setRowMode:function(recordID,mode){
        //Useamutexbecausewedon'twanttorerenderarowbeforethepreviousrenderisfinished
        returnthis.rowModeChangeMutex.exec(this._setRowMode.bind(this,recordID,mode));
    },

    _setRowMode:asyncfunction(recordID,mode){
        constself=this;
        varrecord=self._getRecord(recordID);
        if(!record){
            returnPromise.resolve();
        }

        vareditMode=(mode==='edit');
        var$row=this._getRow(recordID);
        this.currentRow=editMode?$row.prop('rowIndex')-1:null;
        var$tds=$row.children('.o_data_cell');
        varoldWidgets=_.clone(this.allFieldWidgets[record.id]);

        //Prepareoptionsforcellrendering(thisdependsonthemode)
        varoptions={
            renderInvisible:editMode,
            renderWidgets:editMode,
        };
        options.mode=editMode?'edit':'readonly';

        //Switcheachcelltothenewmode;note:the'_renderBodyCell'
        //functionmightfillthe'this.defs'variableswithmultiplepromise
        //sowecreatethearrayanddeleteitaftertherendering.
        vardefs=[];
        this.defs=defs;
        _.each(this.columns,function(node,colIndex){
            var$td=$tds.eq(colIndex);
            var$newTd=self._renderBodyCell(record,node,colIndex,options);

            //Widgetsareunregisteredofmodifiersdatawhentheyare
            //destroyed.Thisisnotthecaseforsimplebuttonssowehaveto
            //doithere.
            if($td.hasClass('o_list_button')){
                self._unregisterModifiersElement(node,recordID,$td.children());
            }

            //Foreditmodeweonlyreplacethecontentofthecellwithits
            //newcontent(invisiblefields,editablefields,...).
            //Forreadonlymode,wereplacethewholecellsothatthe
            //dimensionsofthecellarenotforcedanymore.
            if(editMode){
                $td.empty().append($newTd.contents());
            }else{
                self._unregisterModifiersElement(node,recordID,$td);
                $td.replaceWith($newTd);
            }
        });
        deletethis.defs;

        //Destroyoldfieldwidgets
        _.each(oldWidgets,this._destroyFieldWidget.bind(this,recordID));

        //Toggleselectedclassheresothatstyleisappliedattheend
        $row.toggleClass('o_selected_row',editMode);
        if(editMode){
            this._disableRecordSelectors();
        }else{
            this._enableRecordSelectors();
        }

        returnPromise.all(defs).then(function(){
            //markOwlsubcomponentsasmounted
            WidgetAdapterMixin.on_attach_callback.call(self);

            //necessarytotriggerresizeonfieldtexts
            core.bus.trigger('DOM_updated');
        });
    },

    /**
     *Thismethodiscalledwheneverweclick/moveoutsideofarowthatwas
     *ineditmode.Thisisthemomentwesaveallaccumulatedchangesonthat
     *row,ifneeded(@seeBasicController.saveRecord).
     *
     *Notethatwehavetodisablethefocusableelements(inputs,...)to
     *preventsubsequenteditions.Theseeditswouldbelost,becausethelist
     *viewonlysavesrecordswhenunselectingarow.
     *
     *@returns{Promise}Thepromiseresolvesiftherowwasunselected(and
     *  possiblyremoved).Ifmayberejected,whentherowisdirtyandthe
     *  userrefusestodiscarditschanges.
     */
    unselectRow:function(){
        //Protectagainstcallingthismethodwhennorowisselected
        if(this.currentRow===null){
            returnPromise.resolve();
        }
        varrecordID=this._getRecordID(this.currentRow);
        varrecordWidgets=this.allFieldWidgets[recordID];
        functiontoggleWidgets(disabled){
            _.each(recordWidgets,function(widget){
                var$el=widget.getFocusableElement();
                $el.prop('disabled',disabled);
            });
        }

        toggleWidgets(true);
        returnnewPromise((resolve,reject)=>{
            this.trigger_up('save_line',{
                recordID:recordID,
                onSuccess:resolve,
                onFailure:reject,
            });
        }).then(selectNextRow=>{
            this._enableRecordSelectors();
            //Ifanyfieldhaschangedandifthelistisinmultipleedition,
            //wesendatruthybooleanto_selectRowtotellitnottoselect
            //thefollowingrecord.
            returnselectNextRow;
        }).guardedCatch(()=>{
            toggleWidgets(false);
        });
    },
    /**
     *@override
     */
    updateState:function(state,params){
        //Therearesomecaseswherearecordisaddedtoaninvisiblelist
        //e.g.setaquotationtemplatewithoptionnalproducts
        if(params.keepWidths&&this.$el.is(':visible')){
            this._storeColumnWidths();
        }
        if(params.noRender){
            //thestatechanged,butwewon'tdoare-renderingrightnow,so
            //removecomputedmodifiersdata(astheyareobsolete)toforce
            //themtoberecomputedatnext(sub-)rendering
            this.allModifiersData=[];
        }
        if('addTrashIcon'inparams){
            if(this.addTrashIcon!==params.addTrashIcon){
                this.columnWidths=false;//columnschanged,soforgetstoredwidths
            }
            this.addTrashIcon=params.addTrashIcon;
        }
        if('addCreateLine'inparams){
            this.addCreateLine=params.addCreateLine;
        }
        returnthis._super.apply(this,arguments);
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *Usedtobindeventlistenerssothattheycanbeunboundwhenthelist
     *isdestroyed.
     *Thereisnoreversemethod(list._removeEventListener)becausethereis
     *noissuewithremovingannon-existinglistener.
     *
     *@private
     *@param{string}typeeventname
     *@param{EventTarget}eleventtarget
     *@param{Function}callbackcallbackfunctiontoattach
     *@param{Object}optionseventlisteneroptions
     */
    _addEventListener:function(type,el,callback,options){
        el.addEventListener(type,callback,options);
        this.eventListeners.push({type,el,callback,options});
    },
    /**
     *Handlestheassignationofdefaultwidthsforeachcolumnheader.
     *Ifthelistisempty,anarbitraryabsoluteorrelativewidthwillbe
     *giventotheheader
     *
     *@see_getColumnWidthfordetailedinformationaboutwhichwidthis
     *giventoacertainfieldtype.
     *
     *@private
     */
    _computeDefaultWidths:function(){
        constisListEmpty=!this._hasVisibleRecords(this.state);
        constrelativeWidths=[];
        this.columns.forEach(column=>{
            constth=this._getColumnHeader(column);
            if(th.offsetParent===null){
                relativeWidths.push(false);
            }else{
                constwidth=this._getColumnWidth(column);
                if(width.match(/[a-zA-Z]/)){//absolutewidthwithmeasureunit(e.g.100px)
                    if(isListEmpty){
                        th.style.width=width;
                    }else{
                        //Iftherearerecords,weforceamin-widthforfieldswithanabsolute
                        //widthtoensureacorrectrenderinginedition
                        th.style.minWidth=width;
                    }
                    relativeWidths.push(false);
                }else{//relativewidthexpressedasaweight(e.g.1.5)
                    relativeWidths.push(parseFloat(width,10));
                }
            }
        });

        //Assignationofrelativewidths
        if(isListEmpty){
            consttotalWidth=this._getColumnsTotalWidth(relativeWidths);
            for(letiinthis.columns){
                if(relativeWidths[i]){
                    constth=this._getColumnHeader(this.columns[i]);
                    th.style.width=(relativeWidths[i]/totalWidth*100)+'%';
                }
            }
            //Manualyassignstrashiconheaderwidthsinceit'snotinthecolumns
            consttrashHeader=this.el.getElementsByClassName('o_list_record_remove_header')[0];
            if(trashHeader){
                trashHeader.style.width='32px';
            }
        }
    },
    /**
     *Destroyallfieldwidgetscorrespondingtoarecord. Usefulwhenweare
     *removingauselessrow.
     *
     *@param{string}recordID
     */
    _destroyFieldWidgets:function(recordID){
        if(recordIDinthis.allFieldWidgets){
            varwidgetsToDestroy=this.allFieldWidgets[recordID].slice();
            _.each(widgetsToDestroy,this._destroyFieldWidget.bind(this,recordID));
            deletethis.allFieldWidgets[recordID];
        }
    },
    /**
     *Wheneditingarow,wewanttodisableallrecordselectors.
     *
     *@private
     */
    _disableRecordSelectors:function(){
        this.$('.o_list_record_selectorinput').attr('disabled','disabled');
    },
    /**
     *@private
     */
    _enableRecordSelectors:function(){
        this.$('.o_list_record_selectorinput').attr('disabled',false);
    },
    /**
     *Thisfunctionfreezesthecolumnwidthsandforcesafixedtable-layout,
     *oncethebrowserhascomputedtheoptimalwidthofeachcolumnaccording
     *tothedisplayedrecords.Wewanttofreezewidthss.t.itdoesn't
     *flickerwhenweswitcharowinedition.
     *
     *Weskipthiswhenthereisnorecordaswedon'twanttofixwidths
     *accordingtocolumn'slabels.Inthiscase,wefallbackonthe'weight'
     *heuristic,whichassignstoeachcolumnafixedorrelativewidth
     *dependingonthewidgetorfieldtype.
     *
     *NotethatthelistmustbeintheDOMwhenthisfunctioniscalled.
     *
     *@private
     */
    _freezeColumnWidths:function(){
        if(!this.columnWidths&&this.el.offsetParent===null){
            //thereisnorecordnorwidthstorestoreorthelistisnotvisible
            //->don'tforcecolumn'swidthsw.r.t.theirlabel
            return;
        }
        constthElements=[...this.el.querySelectorAll('tabletheadth')];
        if(!thElements.length){
            return;
        }
        consttable=this.el.getElementsByClassName('o_list_table')[0];
        letcolumnWidths=this.columnWidths;

        if(!columnWidths||!columnWidths.length){//nocolumnwidthstorestore
            //Settablelayoutautoandremoveinlinestyletomakesurethatcss
            //rulesapply(e.g.fixedwidthofrecordselector)
            table.style.tableLayout='auto';
            thElements.forEach(th=>{
                th.style.width=null;
                th.style.maxWidth=null;
            });

            //Resetsthedefaultwidthscomputationnowthatthetableisvisible.
            this._computeDefaultWidths();

            //Squeezethetablebyapplyingamax-widthonlargestcolumnsto
            //ensurethatitdoesn'toverflow
            columnWidths=this._squeezeTable();
        }

        thElements.forEach((th,index)=>{
            //Widthalreadysetbydefaultrelativewidthcomputation
            if(!th.style.width){
                th.style.width=`${columnWidths[index]}px`;
            }
        });

        //Setthetablelayouttofixed
        table.style.tableLayout='fixed';
    },
    /**
     *Returnsthefirstorlasteditablerowofthelist
     *
     *@private
     *@returns{integer}
     */
    _getBorderRow:function(side){
        let$borderDataRow=this.$(`.o_data_row:${side}`);
        if(!this._isRecordEditable($borderDataRow.data('id'))){
            $borderDataRow=this._getNearestEditableRow($borderDataRow,side==='first');
        }
        return$borderDataRow;
    },
    /**
     *Computethesumoftheweightsforeachcolumn,givenanarraycontaining
     *allrelativewidths.param`$thead`isusefulforstudio,inorderto
     *showcolumnhooks.
     *
     *@private
     *@param{jQuery}$thead
     *@param{number[]}relativeWidths
     *@return{integer}
     */
    _getColumnsTotalWidth(relativeWidths){
        returnrelativeWidths.reduce((acc,width)=>acc+width,0);
    },
    /**
     *Returnsthewidthofacolumnaccordingthe'width'attributesetinthe
     *arch,thewidgetorthefieldtype.Afixedwidthisharcodedforsome
     *fieldtypes(e.g.dateandnumericfields).Bydefault,theremaining
     *spaceisevenlydistributedbetweentheotherfields(withafactor'1').
     *
     *Thisisonlyusedwhenthereisnorecordinthelist(i.e.whenwecan't
     *letthebrowsercomputetheoptimalwidthofeachcolumn).
     *
     *@see_renderHeader
     *@private
     *@param{Object}columnanarchnode
     *@returns{string}eitheraweightfactor(e.g.'1.5')oracsswidth
     *  description(e.g.'120px')
     */
    _getColumnWidth:function(column){
        if(column.attrs.width){
            returncolumn.attrs.width;
        }
        constfieldsInfo=this.state.fieldsInfo.list;
        constname=column.attrs.name;
        if(!fieldsInfo[name]){
            //Unnamedcolumnsgetdefaultvalue
            return'1';
        }
        constwidget=fieldsInfo[name].Widget.prototype;
        if('widthInList'inwidget){
            returnwidget.widthInList;
        }
        constfield=this.state.fields[name];
        if(!field){
            //thisisnotafield.Probablyabuttonorsomethingofunknown
            //width.
            return'1';
        }
        constfixedWidths={
            boolean:'70px',
            date:'92px',
            datetime:'146px',
            float:'92px',
            integer:'74px',
            monetary:'104px',
        };
        lettype=field.type;
        if(fieldsInfo[name].widgetinfixedWidths){
            type=fieldsInfo[name].widget;
        }
        returnfixedWidths[type]||'1';
    },
    /**
     *Getsthethelementcorrespondingtoagivencolumn.
     *
     *@private
     *@param{Object}column
     *@returns{HTMLElement}
     */
    _getColumnHeader:function(column){
        const{icon,name,string}=column.attrs;
        if(name){
            returnthis.el.querySelector(`theadth[data-name="${name}"]`);
        }elseif(string){
            returnthis.el.querySelector(`theadth[data-string="${string}"]`);
        }elseif(icon){
            returnthis.el.querySelector(`theadth[data-icon="${icon}"]`);
        }
    },
    /**
     *Returnsthenearesteditablerowstartingfromagiventablerow.
     *Ifthelistisgrouped,jumpstothenextunfoldedgroup
     *
     *@private
     *@param{jQuery}$rowstartingpoint
     *@param{boolean}nextwhethertherequestedrowshouldbethenextorthepreviousone
     *@return{jQuery|null}
     */
    _getNearestEditableRow:function($row,next){
        constdirection=next?'next':'prev';
        let$nearestRow;
        if(this.editable){
            $nearestRow=$row[direction]();
            if(!$nearestRow.hasClass('o_data_row')){
                var$nextBody=$row.closest('tbody')[direction]();
                while($nextBody.length&&!$nextBody.find('.o_data_row').length){
                    $nextBody=$nextBody[direction]();
                }
                $nearestRow=$nextBody.find(`.o_data_row:${next?'first':'last'}`);
            }
        }else{
            //Inreadonlylists,lookdirectlyintoselectedrecords
            constrecordId=$row.data('id');
            constrowSelectionIndex=this.selection.indexOf(recordId);
            letnextRowIndex;
            if(rowSelectionIndex<0){
                nextRowIndex=next?0:this.selection.length-1;
            }else{
                nextRowIndex=rowSelectionIndex+(next?1:-1);
            }
            //Indexmightbeoutofrange,willthenreturnanemptyjQueryobject
            $nearestRow=this._getRow(this.selection[nextRowIndex]);
        }
        return$nearestRow;
    },
    /**
     *Returnsthecurrentnumberofcolumns. Theeditablerenderermayadda
     *trashiconontherightofarecord,soweneedtotakethisintoaccount
     *
     *@override
     *@returns{number}
     */
    _getNumberOfCols:function(){
        varn=this._super();
        if(this.addTrashIcon){
            n++;
        }
        returnn;
    },
    /**
     *Traversethis.statetofindandreturntherecordwithgivendataPointid
     *(forgroupedlistviews,therecordcouldbedeepdowninstatetree).
     *
     *@override
     *@private
     */
    _getRecord:function(recordId){
        varrecord;
        utils.traverse_records(this.state,function(r){
            if(r.id===recordId){
                record=r;
            }
        });
        returnrecord;
    },
    /**
     *RetrievetherecorddataPointidfromarowIndexastherowDOMelement
     *storestherecordidindata.
     *
     *@private
     *@param{integer}rowIndex
     *@returns{string}recorddataPointid
     */
    _getRecordID:function(rowIndex){
        var$tr=this.$('table.o_list_table>tbody>tr').eq(rowIndex);
        return$tr.data('id');
    },
    /**
     *ReturnthejQuerytrelementcorrespondingtothegivenrecorddataPoint
     *id.
     *
     *@private
     *@param{string}[recordId]
     *@returns{jQueryElement}
     */
    _getRow:function(recordId){
        returnthis.$('.o_data_row[data-id="'+recordId+'"]');
    },
    /**
     *Thisfunctionreturnstrueiffrecordsarevisibleinthelist,i.e.
     *  ifthelistisungrouped:trueiffthelistisn'tempty;
     *  ifthelistisgrouped:trueiffthereisatleastoneunfoldedgroup
     *    containingrecords.
     *
     *@param{Object}listadatapoint
     *@returns{boolean}
     */
    _hasVisibleRecords:function(list){
        if(!list.groupedBy.length){
            return!!list.data.length;
        }else{
            varhasVisibleRecords=false;
            for(vari=0;i<list.data.length;i++){
                hasVisibleRecords=hasVisibleRecords||this._hasVisibleRecords(list.data[i]);
            }
            returnhasVisibleRecords;
        }
    },
    /**
     *ReturnswhetherarecordIDiscurrentlyeditable.
     *
     *@param{string}recordID
     *@returns{boolean}
     */
    _isRecordEditable:function(recordID){
        returnthis.editable||(this.isMultiEditable&&this.selection.includes(recordID));
    },
    /**
     *Movestothenextrowinthelist
     *
     *@private
     *@params{Object}[options]see@_moveToSideLine
     */
    _moveToNextLine:function(options){
        this._moveToSideLine(true,options);
    },
    /**
     *Movestothepreviousrowinthelist
     *
     *@private
     *@params{Object}[options]see@_moveToSideLine
     */
    _moveToPreviousLine:function(options){
        this._moveToSideLine(false,options);
    },
    /**
     *Movesthefocustothenearesteditablerowbeforeorafterthecurrentone.
     *Ifwearriveattheendofthelist(orofagroupinthegroupedcase)andthelist
     *iseditable="bottom",wecreateanewrecord,otherwise,wemovethe
     *cursortothefirstrow(ofthenextgroupinthegroupedcase).
     *
     *@private
     *@param{number}nextwhethertomovetothenextorpreviousrow
     *@param{Object}[options]
     *@param{boolean}[options.forceCreate=false]typicallysettotruewhen
     *  navigatingwithENTER;inthiscase,ifthenextrowisthe'Adda
     *  row'one,alwayscreateanewrecord(neverskipit,likeTABdoes
     *  undersomeconditions)
     */
    _moveToSideLine:function(next,options){
        options=options||{};
        constrecordID=this._getRecordID(this.currentRow);
        this.commitChanges(recordID).then(()=>{
            constrecord=this._getRecord(recordID);
            constmultiEdit=this.isInMultipleRecordEdition(recordID);
            if(!multiEdit){
                constfieldNames=this.canBeSaved(recordID);
                if(fieldNames.length&&(record.isDirty()||options.forceCreate)){
                    //thecurrentrowisinvalid,weonlyleaveitifitisnotdirty
                    //(wedidn'tmakeanychangeonthisrow,whichisanewone)and
                    //wearenavigatingwithTAB(forceCreate=false)
                    return;
                }
            }
            //computetheindexofthenext(record)rowtoselect,ifany
            constside=next?'first':'last';
            constborderRowIndex=this._getBorderRow(side).prop('rowIndex')-1;
            constcellIndex=next?0:this.allFieldWidgets[recordID].length-1;
            constcellOptions={inc:next?1:-1,force:true};
            const$currentRow=this._getRow(recordID);
            const$nextRow=this._getNearestEditableRow($currentRow,next);
            letnextRowIndex=null;
            letgroupId;

            if(!this.isGrouped){
                //ungroupedcase
                if($nextRow.length){
                    nextRowIndex=$nextRow.prop('rowIndex')-1;
                }elseif(!this.editable){
                    nextRowIndex=borderRowIndex;
                }elseif(!options.forceCreate&&!record.isDirty()){
                    this.trigger_up('discard_changes',{
                        recordID:recordID,
                        onSuccess:this.trigger_up.bind(this,'activate_next_widget',{side:side}),
                    });
                    return;
                }
            }else{
                //groupedcase
                var$directNextRow=$currentRow.next();
                if(next&&this.editable==="bottom"&&$directNextRow.hasClass('o_add_record_row')){
                    //thenextrowisthe'Addaline'row(i.e.thecurrentoneisthelastrecord
                    //rowofthegroup)
                    if(options.forceCreate||record.isDirty()){
                        //ifwemodifiedthecurrentrecord,addarowtocreateanewrecord
                        groupId=$directNextRow.data('group-id');
                    }else{
                        //ifwedidn'tchangeanythingtothecurrentline(e.g.wepressedTABon
                        //eachcellwithoutmodifying/enteringanydata),wediscardthatline(if
                        //itwasanewone)andmovetothefirstrecordofthenextgroup
                        nextRowIndex=($nextRow.prop('rowIndex')-1)||null;
                        this.trigger_up('discard_changes',{
                            recordID:recordID,
                            onSuccess:()=>{
                                if(nextRowIndex!==null){
                                    if(!record.res_id){
                                        //thecurrentrecordwasanewone,sowedecrement
                                        //nextRowIndexasthatrowhasbeenremovedmeanwhile
                                        nextRowIndex--;
                                    }
                                    this._selectCell(nextRowIndex,cellIndex,cellOptions);
                                }else{
                                    //wewereinthelastgroup,sogobacktothetop
                                    this._selectCell(borderRowIndex,cellIndex,cellOptions);
                                }
                            },
                        });
                        return;
                    }
                }else{
                    //thereisno'Addaline'row(i.e.thecreatefeatureisdisabled),orthe
                    //listiseditable="top",wefocusthefirstrecordofthenextgroupifany,
                    //orwegobacktothetopofthelist
                    nextRowIndex=$nextRow.length?
                        ($nextRow.prop('rowIndex')-1):
                        borderRowIndex;
                }
            }

            //ifthereisa(record)rowtoselect,selectit,otherwise,addanewrecord(inthe
            //correctgroup,iftheviewisgrouped)
            if(nextRowIndex!==null){
                //cellOptions.force=true;
                this._selectCell(nextRowIndex,cellIndex,cellOptions);
            }elseif(this.editable){
                //ifforsomereason(e.g.createfeatureisdisabled)wecan'taddanew
                //record,selectthefirstrecordrow
                this.unselectRow().then(this.trigger_up.bind(this,'add_record',{
                    groupId:groupId,
                    onFail:this._selectCell.bind(this,borderRowIndex,cellIndex,cellOptions),
                }));
            }
        });
    },
    /**
     *Overridetocomputethe(relativeorabsolute)widthofeachcolumn.
     *
     *@override
     *@private
     */
    _processColumns:function(){
        constoldColumns=this.columns;
        this._super.apply(this,arguments);
        //checkifstoredwidthsstillapply
        if(this.columnWidths&&oldColumns&&oldColumns.length===this.columns.length){
            for(leti=0;i<oldColumns.length;i++){
                if(oldColumns[i]!==this.columns[i]){
                    this.columnWidths=false;//columnschanged,soforgetstoredwidths
                    break;
                }
            }
        }else{
            this.columnWidths=false;//columnschanged,soforgetstoredwidths
        }
    },
    /**
     *@override
     *@returns{Promise}
     */
    _render:function(){
        this.currentRow=null;
        this.currentFieldIndex=null;
        returnthis._super.apply(this,arguments);
    },
    /**
     *Overridetoaddthe'Addanitem'linktotheendoflast-levelopened
     *groups.
     *
     *@override
     *@private
     */
    _renderGroup:function(group){
        varresult=this._super.apply(this,arguments);
        if(!group.groupedBy.length&&this.addCreateLineInGroups){
            var$groupBody=result[0];
            var$a=$('<ahref="#"role="button">')
                .text(_t("Addaline"))
                .attr('data-group-id',group.id);
            var$td=$('<td>')
                        .attr('colspan',this._getNumberOfCols())
                        .addClass('o_group_field_row_add')
                        .attr('tabindex',-1)
                        .append($a);
            var$tr=$('<tr>',{class:'o_add_record_row'})
                        .attr('data-group-id',group.id)
                        .append($td);
            $groupBody.append($tr.prepend($('<td>').html('&nbsp;')));
        }
        returnresult;
    },
    /**
     *Therendererneedstosupportreorderinglines. Thisisonlyactivein
     *editmode.ThehandleFieldattributeissetwhenthereisasequence
     *widget.
     *
     *@override
     */
    _renderBody:function(){
        varself=this;
        var$body=this._super.apply(this,arguments);
        if(this.hasHandle){
            $body.sortable({
                axis:'y',
                items:'>tr.o_data_row',
                helper:'clone',
                handle:'.o_row_handle',
                stop:function(event,ui){
                    //updatecurrentIDtakingmovedlineintoaccount
                    if(self.currentRow!==null){
                        varcurrentID=self.state.data[self.currentRow].id;
                        self.currentRow=self._getRow(currentID).index();
                    }
                    self.unselectRow().then(function(){
                        self._moveRecord(ui.item.data('id'),ui.item.index());
                    });
                },
            });
        }
        return$body;
    },
    /**
     *@override
     *@private
     */
    _renderFooter:function(){
        const$footer=this._super.apply(this,arguments);
        if(this.addTrashIcon){
            $footer.find('tr').append($('<td>'));
        }
        return$footer;
    },
    /**
     *Overridetooptionallyaddathintheheaderfortheremoveiconcolumn.
     *
     *@override
     *@private
     */
    _renderHeader:function(){
        var$thead=this._super.apply(this,arguments);
        if(this.addTrashIcon){
            $thead.find('tr').append($('<th>',{class:'o_list_record_remove_header'}));
        }
        return$thead;
    },
    /**
     *Overridentoaddaresizehandleineditablelistcolumnheaders.
     *Onlyappliestoheaderscontainingtext.
     *
     *@override
     *@private
     */
    _renderHeaderCell:function(){
        const$th=this._super.apply(this,arguments);
        if($th[0].innerHTML.length&&this._hasVisibleRecords(this.state)){
            constresizeHandle=document.createElement('span');
            resizeHandle.classList='o_resize';
            resizeHandle.onclick=this._onClickResize.bind(this);
            resizeHandle.onmousedown=this._onStartResize.bind(this);
            $th.append(resizeHandle);
        }
        return$th;
    },
    /**
     *Editablerowsarepossiblyextendedwithatrashiconontheirright,to
     *allowdeletingthecorrespondingrecord.
     *Formany2manyeditablelists,thetrashbinisreplacedbyX.
     *
     *@override
     *@param{any}record
     *@param{any}index
     *@returns{jQueryElement}
     */
    _renderRow:function(record,index){
        var$row=this._super.apply(this,arguments);
        if(this.addTrashIcon){
            var$icon=this.isMany2Many?
                $('<button>',{'class':'fafa-times','name':'unlink','aria-label':_t('Unlinkrow')+(index+1)}):
                $('<button>',{'class':'fafa-trash-o','name':'delete','aria-label':_t('Deleterow')+(index+1)});
            var$td=$('<td>',{class:'o_list_record_remove'}).append($icon);
            $row.append($td);
        }
        return$row;
    },
    /**
     *IftheeditablelistviewhastheparameteraddCreateLine,weneedto
     *addalastrowwiththenecessarycontrol.
     *
     *IfthelisthasahandleField,wewanttoleft-alignthefirstbutton
     *onthefirstrealcolumn.
     *
     *@override
     *@returns{jQueryElement[]}
     */
    _renderRows:function(){
        var$rows=this._super();
        if(this.addCreateLine){
            var$tr=$('<tr>');
            varcolspan=this._getNumberOfCols();

            if(this.handleField){
                colspan=colspan-1;
                $tr.append('<td>');
            }

            var$td=$('<td>')
                .attr('colspan',colspan)
                .addClass('o_field_x2many_list_row_add');
            $tr.append($td);
            $rows.push($tr);

            if(this.addCreateLine){
                _.each(this.creates,function(create,index){
                    var$a=$('<ahref="#"role="button">')
                        .attr('data-context',create.context)
                        .text(create.string);
                    if(index>0){
                        $a.addClass('ml16');
                    }
                    $td.append($a);
                });
            }
        }
        return$rows;
    },
    /**
     *@override
     *@private
     *@returns{Promise}thispromiseisresolvedimmediately
     */
    _renderView:function(){
        this.currentRow=null;
        returnthis._super.apply(this,arguments).then(()=>{
            consttable=this.el.getElementsByClassName('o_list_table')[0];
            if(table){
                table.classList.toggle('o_empty_list',!this._hasVisibleRecords(this.state));
                this._freezeColumnWidths();
            }
        });
    },
    /**
     *Thisisoneofthetrickiestmethodintheeditablerenderer. Ithasto
     *doalotofstuff:ithastodeterminewhichcellshouldbeselected(if
     *thetargetcellisreadonly,weneedtofindanothersuitablecell),then
     *unselectthecurrentrow,andactivatethelinewheretheselectedcell
     *is,ifnecessary.
     *
     *@param{integer}rowIndex
     *@param{integer}fieldIndex
     *@param{Object}[options]
     *@param{Event}[options.event]originaltargetoftheeventwhich
     *@param{boolean}[options.wrap=true]iftrueandnowidgetcouldbe
     *  triggeredthecellselection
     *  selectedfromthefieldIndextothelastcolumn,thenwewraparoundand
     *  trytoselectawidgetstartingfromthebeginning
     *@param{boolean}[options.force=false]iftrue,forceselectingthecell
     *  evenifseemstobealreadytheselectedone(usefulafterare-
     *  rendering,toresetthefocusonthecorrectfield)
     *@param{integer}[options.inc=1]theincrementtousewhensearchingfor
     *  the"next"possiblecell(ifthecelltoselectcan'tbeselected)
     *@return{Promise}failsifnocellcouldbeselected
     */
    _selectCell:function(rowIndex,fieldIndex,options){
        options=options||{};
        //Donothingiftheusertriestoselectcurrentcell
        if(!options.force&&rowIndex===this.currentRow&&fieldIndex===this.currentFieldIndex){
            returnPromise.resolve();
        }
        varwrap=options.wrap===undefined?true:options.wrap;
        varrecordID=this._getRecordID(rowIndex);

        //Selecttherowthenactivatethewidgetinthecorrectcell
        varself=this;
        returnthis._selectRow(rowIndex).then(function(){
            varrecord=self._getRecord(recordID);
            if(fieldIndex>=(self.allFieldWidgets[record.id]||[]).length){
                returnPromise.reject();
            }
            //_activateFieldWidgetmighttriggeranonchange,
            //whichrequirescurrentFieldIndextobeset
            //sothatthecursorcanberestored
            varoldFieldIndex=self.currentFieldIndex;
            self.currentFieldIndex=fieldIndex;
            fieldIndex=self._activateFieldWidget(record,fieldIndex,{
                inc:options.inc||1,
                wrap:wrap,
                event:options&&options.event,
            });
            if(fieldIndex<0){
                self.currentFieldIndex=oldFieldIndex;
                returnPromise.reject();
            }
            self.currentFieldIndex=fieldIndex;
        });
    },
    /**
     *Activatestherowatthegivenrowindex.
     *
     *@param{integer}rowIndex
     *@returns{Promise}
     */
    _selectRow:function(rowIndex){
        //Donothingifalreadyselected
        if(rowIndex===this.currentRow){
            returnPromise.resolve();
        }
        if(!this.columnWidths){
            //wedon'twantthecolumnwidthstochangewhenselectingrows
            this._storeColumnWidths();
        }
        varrecordId=this._getRecordID(rowIndex);
        //Toselectarow,thecurrentlyselectedonemustbeunselectedfirst
        varself=this;
        returnthis.unselectRow().then((selectNextRow=true)=>{
            if(!selectNextRow){
                returnPromise.resolve();
            }
            if(!recordId){
                //Therowtoselecteddoesn'texistanymore(probablybecause
                //anonchangetriggeredwhenunselectingthepreviousone
                //removesrows)
                returnPromise.reject();
            }
            //Notifythecontrollerwewanttomakearecordeditable
            returnnewPromise(function(resolve){
                self.trigger_up('edit_line',{
                    recordId:recordId,
                    onSuccess:function(){
                        self._disableRecordSelectors();
                        resolve();
                    },
                });
            });
        });
    },
    /**
     *Setamaximumwidthonthelargestcolumnsinthelistincasethetable
     *isoverflowing.Theideaistoshrinklargestcolumnsfirst,butto
     *ensurethattheyarestillthelargestattheend(maybeinequalmeasure
     *withothercolumns).Buttoncolumnsaren'timpactedbythisfunction,as
     *weassumethattheycan'tbesqueezed(wewantallbuttonstoalwaysbe
     *available,notbeingreplacedbyellipsis).
     *
     *@private
     *@returns{integer[]}width(inpx)ofeachcolumns.t.thetabledoesn't
     *  overflow
     */
    _squeezeTable:function(){
        consttable=this.el.getElementsByClassName('o_list_table')[0];

        //ToggleaclassNameusedtoremovestylethatcouldinterferwiththeidealwidth
        //computationalgorithm(e.g.preventtextfieldsfrombeingwrappedduringthe
        //computation,topreventthemfrombeingcompletelycrushed)
        table.classList.add('o_list_computing_widths');

        constthead=table.getElementsByTagName('thead')[0];
        constthElements=[...thead.getElementsByTagName('th')];
        constcolumnWidths=thElements.map(th=>th.offsetWidth);
        constgetWidth=th=>columnWidths[thElements.indexOf(th)]||0;
        constgetTotalWidth=()=>thElements.reduce((tot,th,i)=>tot+columnWidths[i],0);
        constshrinkColumns=(columns,width)=>{
            letthresholdReached=false;
            columns.forEach(th=>{
                constindex=thElements.indexOf(th);
                letmaxWidth=columnWidths[index]-Math.ceil(width/columns.length);
                if(maxWidth<92){//preventthecolumnsfromshrinkingunder92px(~datefield)
                    maxWidth=92;
                    thresholdReached=true;
                }
                th.style.maxWidth=`${maxWidth}px`;
                columnWidths[index]=maxWidth;
            });
            returnthresholdReached;
        };
        //Sortcolumns,largestfirst
        constsortedThs=[...thead.querySelectorAll('th:not(.o_list_button)')]
            .sort((a,b)=>getWidth(b)-getWidth(a));
        constallowedWidth=table.parentNode.offsetWidth;

        lettotalWidth=getTotalWidth();
        letstop=false;
        letindex=0;
        while(totalWidth>allowedWidth&&!stop){
            //Findthelargestcolumns
            index++;
            constlargests=sortedThs.slice(0,index);
            while(getWidth(largests[0])===getWidth(sortedThs[index])){
                largests.push(sortedThs[index]);
                index++;
            }

            //Computethenumberofpxtoremovefromthelargestcolumns
            constnextLargest=sortedThs[index];//largestcolumnwhenomittingthoseinlargests
            consttotalToRemove=totalWidth-allowedWidth;
            constcanRemove=(getWidth(largests[0])-getWidth(nextLargest))*largests.length;

            //Shrinkthelargestscolumns
            stop=shrinkColumns(largests,Math.min(totalToRemove,canRemove));

            totalWidth=getTotalWidth();
        }

        //Wearenolongercomputingwidths,sorestorethenormalstyle
        table.classList.remove('o_list_computing_widths');

        returncolumnWidths;
    },
    /**
     *@private
     */
    _storeColumnWidths:function(){
        this.columnWidths=this.$('theadth').toArray().map(function(th){
            return$(th).outerWidth();
        });
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *Thismethodiscalledwhenweclickonthe'Addaline'buttoninagroupby
     *listview.
     *
     *@param{MouseEvent}ev
     */
    _onAddRecordToGroup:function(ev){
        ev.preventDefault();
        //wedon'twanttheclicktocauseothereffects,suchasunselecting
        //therowthatwearecreating,becauseitcountsasaclickonatr
        ev.stopPropagation();

        varself=this;
        //Thismethodcanbecalledwhenselectingtheparentofthelink.
        //Weneedtoensurethatthelinkistheactualtarget
        consttarget=ev.target.tagName!=='A'?ev.target.getElementsByTagName('A')[0]:ev.target;
        constgroupId=target.dataset.groupId;
        this.currentGroupId=groupId;
        this.unselectRow().then(function(){
            self.trigger_up('add_record',{
                groupId:groupId,
            });
        });
    },
    /**
     *Thismethodiscalledwhenweclickonthe'Addaline'buttoninasub
     *listsuchasaone2manyinaformview.
     *
     *@private
     *@param{MouseEvent}ev
     */
    _onAddRecord:function(ev){
        //wedon'twantthebrowsertonavigatetoathe#url
        ev.preventDefault();

        //wedon'twanttheclicktocauseothereffects,suchasunselecting
        //therowthatwearecreating,becauseitcountsasaclickonatr
        ev.stopPropagation();

        //butwedowanttounselectcurrentrow
        varself=this;
        this.unselectRow().then(function(){
            self.trigger_up('add_record',{context:ev.currentTarget.dataset.context&&[ev.currentTarget.dataset.context]});//TODOwriteatest,thepromisewasnotconsidered
        });
    },
    /**
     *Whentheuserclicksonacell,wesimplyselectit.
     *
     *@private
     *@param{MouseEvent}event
     */
    _onCellClick:function(event){
        //Thespecial_clickpropertyexplicitelyalloweventstobubbleall
        //thewayuptobootstrap'slevelratherthanbeingstoppedearlier.
        var$td=$(event.currentTarget);
        var$tr=$td.parent();
        varrowIndex=$tr.prop('rowIndex')-1;
        if(!this._isRecordEditable($tr.data('id'))||$(event.target).prop('special_click')){
            return;
        }
        varfieldIndex=Math.max($tr.find('.o_field_cell').index($td),0);
        this._selectCell(rowIndex,fieldIndex,{event:event});
    },
    /**
     *Wewanttooverrideanydefaultmousebehaviourwhenclickingontheresizehandles
     *
     *@private
     *@param{MouseEvent}ev
     */
    _onClickResize:function(ev){
        ev.stopPropagation();
        ev.preventDefault();
    },
    /**
     *Weneedtomanuallyunselectrow,becausenooneelsewoulddoit
     */
    _onEmptyRowClick:function(){
        this.unselectRow();
    },
    /**
     *Clickingonafootershouldunselect(andsave)thecurrentlyselected
     *row.Ithastobedonethisway,becausethisisaclickinsidethis.el,
     *and_onWindowClickedignorethoseclicks.
     */
    _onFooterClick:function(){
        this.unselectRow();
    },
    /**
     *Managesthekeyboardeventsonthelist.Ifthelistisnoteditable,whentheusernavigatesto
     *acellusingthekeyboard,ifhepressesenter,enterthemodelrepresentedbytheline
     *
     *@private
     *@param{KeyboardEvent}ev
     *@override
     */
    _onKeyDown:function(ev){
        const$target=$(ev.currentTarget);
        const$tr=$target.closest('tr');
        constrecordEditable=this._isRecordEditable($tr.data('id'));

        if(recordEditable&&ev.keyCode===$.ui.keyCode.ENTER&&$tr.hasClass('o_selected_row')){
            //enteronatextareaforexample,letitbubble
            return;
        }

        if(recordEditable&&ev.keyCode===$.ui.keyCode.ENTER&&
            !$tr.hasClass('o_selected_row')&&!$tr.hasClass('o_group_header')){
            ev.stopPropagation();
            ev.preventDefault();
            if($target.closest('td').hasClass('o_group_field_row_add')){
                this._onAddRecordToGroup(ev);
            }else{
                this._onCellClick(ev);
            }
        }else{
            this._super.apply(this,arguments);
        }
    },
    /**
     *@private
     *@param{KeyDownEvent}e
     */
    _onKeyDownAddRecord:function(e){
        switch(e.keyCode){
            case$.ui.keyCode.ENTER:
                e.stopPropagation();
                e.preventDefault();
                this._onAddRecord(e);
                break;
        }
    },
    /**
     *Handlesthekeyboardnavigationaccordingtoeventstriggeredbyfield
     *widgets.
     *-previous:movetothefirstactivablecellontheleftifany,ifnot
     *         movetotherightmostactivablecellontherowabove.
     *-next:movetothefirstactivablecellontherightifany,ifnotmove
     *         totheleftmostactivablecellontherowbelow.
     *-next_line:movetoleftmostactivablecellontherowbelow.
     *
     *Note:movingtoalinebelowifonthelastlineormovingtoaline
     *aboveifonthefirstlineautomaticallycreatesanewline.
     *
     *@private
     *@param{FlectraEvent}ev
     */
    _onNavigationMove:function(ev){
        varself=this;
        //Don'tstopthepropagationwhennavigatingupwhilenoteditinganyrow
        if(this.currentRow===null&&ev.data.direction==='up'){
            return;
        }
        ev.stopPropagation();//stoptheevent,theactionisdonebythisrenderer
        if(ev.data.originalEvent&&['next','previous'].includes(ev.data.direction)){
            ev.data.originalEvent.preventDefault();
            ev.data.originalEvent.stopPropagation();
        }
        switch(ev.data.direction){
            case'previous':
                if(this.currentFieldIndex>0){
                    this._selectCell(this.currentRow,this.currentFieldIndex-1,{inc:-1,wrap:false})
                        .guardedCatch(this._moveToPreviousLine.bind(this));
                }else{
                    this._moveToPreviousLine();
                }
                break;
            case'next':
                if(this.currentFieldIndex+1<this.columns.length){
                    this._selectCell(this.currentRow,this.currentFieldIndex+1,{wrap:false})
                        .guardedCatch(this._moveToNextLine.bind(this));
                }else{
                    this._moveToNextLine();
                }
                break;
            case'next_line':
                //Ifthelistisreadonlyandthecurrentistheonlyrecordeditable,weunselecttheline
                if(!this.editable&&this.selection.length===1&&
                    this._getRecordID(this.currentRow)===ev.target.dataPointID){
                    this.unselectRow();
                }else{
                    this._moveToNextLine({forceCreate:true});
                }
                break;
            case'cancel':
                //stoptheoriginalevent(typicallyanESCAPEkeydown),to
                //preventfromclosingthepotentialdialogcontainingthislist
                //alsoauto-focusthe1stcontrol,ifany.
                ev.data.originalEvent.stopPropagation();
                varrowIndex=this.currentRow;
                varcellIndex=this.currentFieldIndex+1;
                this.trigger_up('discard_changes',{
                    recordID:ev.target.dataPointID,
                    onSuccess:function(){
                        self._enableRecordSelectors();
                        varrecordId=self._getRecordID(rowIndex);
                        if(recordId){
                            varcorrespondingRow=self._getRow(recordId);
                            correspondingRow.children().eq(cellIndex).focus();
                        }elseif(self.currentGroupId){
                            self.$('a[data-group-id="'+self.currentGroupId+'"]').focus();
                        }else{
                            self.$('.o_field_x2many_list_row_adda:first').focus();//FIXME
                        }
                    }
                });
                break;
        }
    },
    /**
     *Triggersaremoveevent.Idon'tknowwhywestopthepropagationofthe
     *event.
     *
     *@param{MouseEvent}event
     */
    _onRemoveIconClick:function(event){
        event.stopPropagation();
        var$row=$(event.target).closest('tr');
        varid=$row.data('id');
        if($row.hasClass('o_selected_row')){
            this.trigger_up('list_record_remove',{id:id});
        }else{
            varself=this;
            this.unselectRow().then(function(){
                self.trigger_up('list_record_remove',{id:id});
            });
        }
    },
    /**
     *Reacttowindowresizeeventsbyrecomputingthewidthofeachcolumn.
     *
     *@private
     */
    _onResize:function(){
        this.columnWidths=false;
        this._freezeColumnWidths();
    },
    /**
     *Ifthelistvieweditable,justlettheeventbubble.Wedon'twantto
     *opentherecordinthiscaseanyway.
     *
     *@override
     *@private
     */
    _onRowClicked:function(ev){
        if(!this._isRecordEditable(ev.currentTarget.dataset.id)){
            //Ifthereisaneditedrecord,triestosaveitanddonotopentheclickedrecord
            if(this.getEditableRecordID()){
                this.unselectRow();
            }else{
                this._super.apply(this,arguments);
            }
        }
    },
    /**
     *Overridestopreventfromsortingifwearecurrentlyeditingarecord.
     *
     *@override
     *@private
     */
    _onSortColumn:function(){
        if(this.currentRow===null&&!this.isResizing){
            this._super.apply(this,arguments);
        }
    },
    /**
     *Handlestheresizefeatureonthecolumnheaders
     *
     *@private
     *@param{MouseEvent}ev
     */
    _onStartResize:function(ev){
        //Onlytriggeredbyleftmousebutton
        if(ev.which!==1){
            return;
        }
        ev.preventDefault();
        ev.stopPropagation();

        this.isResizing=true;

        consttable=this.el.getElementsByClassName('o_list_table')[0];
        constth=ev.target.closest('th');
        table.style.width=`${table.offsetWidth}px`;
        constthPosition=[...th.parentNode.children].indexOf(th);
        constresizingColumnElements=[...table.getElementsByTagName('tr')]
            .filter(tr=>tr.children.length===th.parentNode.children.length)
            .map(tr=>tr.children[thPosition]);
        constoptionalDropdown=this.el.getElementsByClassName('o_optional_columns')[0];
        constinitialX=ev.pageX;
        constinitialWidth=th.offsetWidth;
        constinitialTableWidth=table.offsetWidth;
        constinitialDropdownX=optionalDropdown?optionalDropdown.offsetLeft:null;
        constresizeStoppingEvents=[
            'keydown',
            'mousedown',
            'mouseup',
        ];

        //Fixcontainerwidthtopreventthetablefromoverflowingwhenbeingresized
        if(!this.el.style.width){
            this.el.style.width=`${this.el.offsetWidth}px`;
        }

        //Applyclassestotableandselectedcolumn
        table.classList.add('o_resizing');
        resizingColumnElements.forEach(el=>el.classList.add('o_column_resizing'));

        //Mousemoveevent:resizeheader
        constresizeHeader=ev=>{
            ev.preventDefault();
            ev.stopPropagation();
            constdelta=ev.pageX-initialX;
            constnewWidth=Math.max(10,initialWidth+delta);
            consttableDelta=newWidth-initialWidth;
            th.style.width=`${newWidth}px`;
            th.style.maxWidth=`${newWidth}px`;
            table.style.width=`${initialTableWidth+tableDelta}px`;
            if(optionalDropdown){
                optionalDropdown.style.left=`${initialDropdownX+tableDelta}px`;
            }
        };
        this._addEventListener('mousemove',window,resizeHeader);

        //Mouseorkeyboardevents:stopresize
        conststopResize=ev=>{
            //Ignorestheinitial'leftmousebuttondown'eventinorder
            //tonotinstantlyremovethelistener
            if(ev.type==='mousedown'&&ev.which===1){
                return;
            }
            ev.preventDefault();
            ev.stopPropagation();
            //Weneedasmalltimeouttonottriggeraclickoncolumnheader
            clearTimeout(this.resizeTimeout);
            this.resizeTimeout=setTimeout(()=>{
                this.isResizing=false;
            },100);
            window.removeEventListener('mousemove',resizeHeader);
            table.classList.remove('o_resizing');
            resizingColumnElements.forEach(el=>el.classList.remove('o_column_resizing'));
            resizeStoppingEvents.forEach(stoppingEvent=>{
                window.removeEventListener(stoppingEvent,stopResize);
            });

            //weremovethefocustomakesurethatthethereisnofocusinside
            //thetr. Ifthatisthecase,thereissomecsstodarkenthewhole
            //thead,anditlooksquiteweirdwiththesmallcsshovereffect.
            document.activeElement.blur();
        };
        //Wehavetolistentoseveraleventstoproperlystoptheresizingfunction.Thoseare:
        //-mousedown(e.g.pressingrightclick)
        //-mouseup:logicalflowoftheresizingfeature(drag&drop)
        //-keydown:(e.g.pressing'Alt'+'Tab'or'Windows'key)
        resizeStoppingEvents.forEach(stoppingEvent=>{
            this._addEventListener(stoppingEvent,window,stopResize);
        });
    },
    /**
     *Unselecttherowbeforeaddingtheoptionalcolumntothelistview
     *
     *@override
     *@private
     */
    _onToggleOptionalColumnDropdown:function(ev){
        this.unselectRow().then(this._super.bind(this,ev));
    },
    /**
     *Whenaclickhappensoutsidethelistview,oroutsideacurrently
     *selectedrow,wewanttounselectit.
     *
     *Thisisquitetricky,becauseinmanycases,suchasanautocomplete
     *dropdownopenedbyamany2oneinalisteditablerow,weactuallydon't
     *wanttounselect(andsave)thecurrentrow.
     *
     *So,wetrytoignoreclicksonsubelementsoftherendererthatare
     *appendedinthebody,outsidethetable)
     *
     *@param{MouseEvent}event
     */
    _onWindowClicked:function(event){
        //ignoreclicksonreadonlylistswithnoselectedrows
        if(!this.isEditable()){
            return;
        }

        //ignoreclicksifthisrendererisnotinthedom.
        if(!document.contains(this.el)){
            return;
        }

        //thereiscurrentlynoselectedrow
        if(this.currentRow===null){
            return;
        }

        //ignoreclicksinautocompletedropdowns
        if($(event.target).closest('.ui-autocomplete').length){
            return;
        }

        //ignoreclicksifthereisamodal,exceptifthelistisinthelast
        //(active)modal
        var$modal=$('body>.modal:last');
        if($modal.length){
            var$listModal=this.$el.closest('.modal');
            if($modal.prop('id')!==$listModal.prop('id')){
                return;
            }
        }

        //ignoreclicksiftargetisnolongerindom. Forexample,aclickon
        //the'delete'trashiconofam2mtag.
        if(!document.contains(event.target)){
            return;
        }

        //ignoreclicksiftargetisinsidethelist.Inthatcase,theyare
        //handleddirectlybytherenderer.
        if(this.el.contains(event.target)&&this.el!==event.target){
            return;
        }

        //ignoreclickifsearchfacetisremovedasitwillre-renderwhole
        //listviewagain
        if($(event.target).hasClass('o_facet_remove')){
            return;
        }

        this.unselectRow();
    },
});

});
