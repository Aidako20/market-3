flectra.define('web.ListConfirmDialog',function(require){
"usestrict";

constcore=require('web.core');
constDialog=require('web.Dialog');
constFieldWrapper=require('web.FieldWrapper');
const{WidgetAdapterMixin}=require('web.OwlCompatibility');
constutils=require('web.utils');

const_t=core._t;
constqweb=core.qweb;

/**
 *Multieditionconfirmationmodalforlistviews.
 *
 *Handlesthedisplayoftheamountofchangedrecords(+validones)and
 *ofthewidgetrepresentingthenewvalue.
 *
 *@class
 */
constListConfirmDialog=Dialog.extend(WidgetAdapterMixin,{
    /**
     *@constructor
     *@override
     *@param{Widget}parent
     *@param{Object}recordeditedrecordwithupdatedvalue
     *@param{Object}changeschangesregisteredbythelistcontroller
     *@param{Object}changesisDomainSelectedtrueifftheuserselectedthe
     *  wholedomain
     *@param{string}changes.fieldLabellabelofthechangedfield
     *@param{string}changes.fieldNametechnicalnameofthechangedfield
     *@param{number}changes.nbRecordsnumberofrecords(total)
     *@param{number}changes.nbValidRecordsnumberofvalidrecords
     *@param{Object}[options]
     */
    init:function(parent,record,changes,options){
        options=Object.assign({},options,{
            $content:$(qweb.render('ListView.confirmModal',{changes})),
            buttons:options.buttons||[{
                text:_t("Ok"),
                classes:'btn-primary',
                close:true,
                click:options.confirm_callback,
            },{
                text:_t("Cancel"),
                close:true,
                click:options.cancel_callback,
            }],
            onForceClose:options.cancel_callback,
            size:options.size||'medium',
            title:options.title||_t("Confirmation"),
        });

        this._super(parent,options);

        constWidget=record.fieldsInfo.list[changes.fieldName].Widget;
        constwidgetOptions={
            mode:'readonly',
            viewType:'list',
            noOpen:true,
        };
        this.isLegacyWidget=!utils.isComponent(Widget);
        if(this.isLegacyWidget){
            this.fieldWidget=newWidget(this,changes.fieldName,record,widgetOptions);
        }else{
            this.fieldWidget=newFieldWrapper(this,Widget,{
                fieldName:changes.fieldName,
                record,
                options:widgetOptions,
            });
        }
    },
    /**
     *@override
     */
    willStart:function(){
        letwidgetProm;
        if(this.isLegacyWidget){
            widgetProm=this.fieldWidget._widgetRenderAndInsert(function(){});
        }else{
            widgetProm=this.fieldWidget.mount(document.createDocumentFragment());
        }
        returnPromise.all([widgetProm,this._super.apply(this,arguments)]);
    },
    /**
     *@override
     */
    start:function(){
        this.$content.find('.o_changes_widget').replaceWith(this.fieldWidget.$el);
        this.fieldWidget.el.style.pointerEvents='none';
        returnthis._super.apply(this,arguments);
    },
    /**
     *@override
     */
    destroy:function(){
        WidgetAdapterMixin.destroy.call(this);
        this._super();
    },
});

returnListConfirmDialog;

});
