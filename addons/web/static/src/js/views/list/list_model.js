flectra.define('web.ListModel',function(require){
    "usestrict";

    varBasicModel=require('web.BasicModel');

    varListModel=BasicModel.extend({

        /**
         *@override
         *@param{Object}params.groupbys
         */
        init:function(parent,params){
            this._super.apply(this,arguments);

            this.groupbys=params.groupbys;
        },

        //--------------------------------------------------------------------------
        //Public
        //--------------------------------------------------------------------------

        /**
         *overriddentoadd`groupData`whenperforminggetonlistdatapoints.
         *
         *@override
         *@see_readGroupExtraFields
         */
        __get:function(){
            varresult=this._super.apply(this,arguments);
            vardp=result&&this.localData[result.id];
            if(dp&&dp.groupData){
                result.groupData=this.get(dp.groupData);
            }
            returnresult;
        },
        /**
         *Foralistofrecords,performsawritewithallchangesandfetches
         *alldata.
         *
         *@param{string}listDatapointIdidoftheparentlist
         *@param{string}referenceRecordIdtherecorddatapointusedto
         * generatethechangestoapplytorecordIds
         *@param{string[]}recordIdsalistofrecorddatapointids
         *@param{string}fieldNamethefieldtowrite
         */
        saveRecords:function(listDatapointId,referenceRecordId,recordIds,fieldName){
            varself=this;
            varreferenceRecord=this.localData[referenceRecordId];
            varlist=this.localData[listDatapointId];
            //generateallrecordvaluestoensurethatwe'llwritesomething
            //(e.g.2recordsselected,editamany2oneinthefirstone,but
            //resetsamevalue,westillwanttosavethisvalueontheother
            //record)
            varallChanges=this._generateChanges(referenceRecord,{changesOnly:false});
            varchanges=_.pick(allChanges,fieldName);
            varrecords=recordIds.map(function(recordId){
                returnself.localData[recordId];
            });
            varmodel=records[0].model;
            varrecordResIds=_.pluck(records,'res_id');
            varfieldNames=records[0].getFieldNames();
            varcontext=records[0].getContext();

            returnthis._rpc({
                model:model,
                method:'write',
                args:[recordResIds,changes],
                context:context,
            }).then(function(){
                returnself._rpc({
                    model:model,
                    method:'read',
                    args:[recordResIds,fieldNames],
                    context:context,
                });
            }).then(function(results){
                results.forEach(function(data){
                    varrecord=_.findWhere(records,{res_id:data.id});
                    record.data=_.extend({},record.data,data);
                    record._changes={};
                    record._isDirty=false;
                    self._parseServerData(fieldNames,record,record.data);
                });
            }).then(function(){
                if(!list.groupedBy.length){
                    returnPromise.all([
                        self._fetchX2ManysBatched(list),
                        self._fetchReferencesBatched(list)
                    ]);
                }else{
                    returnPromise.all([
                        self._fetchX2ManysSingleBatch(list),
                        self._fetchReferencesSingleBatch(list)
                    ]);
                }
            });
        },

        //--------------------------------------------------------------------------
        //Private
        //--------------------------------------------------------------------------

        /**
         *
         *@override
         *@private
         */
        _readGroup:function(list,options){
            varself=this;
            options=options||{};
            options.fetchRecordsWithGroups=true;
            returnthis._super(list,options).then(function(result){
                returnself._readGroupExtraFields(list).then(_.constant(result));
            });
        },
        /**
         *Fetchesgroupspecificfieldsonthegroupbyrelationandstoresit
         *inthecolumndatapointinaspecialkey`groupData`.
         *Dataforthegroupsarefetchedinbatchforallgroups,toavoid
         *doingmultiplecalls.
         *Notethattheoptionisonlyform2ofields.
         *
         *@private
         *@param{Object}list
         *@returns{Promise}
         */
        _readGroupExtraFields:function(list){
            varself=this;
            vargroupByFieldName=list.groupedBy[0].split(':')[0];
            vargroupedByField=list.fields[groupByFieldName];
            if(groupedByField.type!=='many2one'||!this.groupbys[groupByFieldName]){
                returnPromise.resolve();
            }
            vargroupIds=_.reduce(list.data,function(groupIds,id){
                varresId=self.get(id,{raw:true}).res_id;
                if(resId){//thefieldmightbeundefinedwhengrouping
                    groupIds.push(resId);
                }
                returngroupIds;
            },[]);
            vargroupFields=Object.keys(this.groupbys[groupByFieldName].viewFields);
            varprom;
            if(groupIds.length&&groupFields.length){
                prom=this._rpc({
                    model:groupedByField.relation,
                    method:'read',
                    args:[groupIds,groupFields],
                    context:list.context,
                });
            }
            returnPromise.resolve(prom).then(function(result){
                varfvg=self.groupbys[groupByFieldName];
                _.each(list.data,function(id){
                    vardp=self.localData[id];
                    vargroupData=result&&_.findWhere(result,{
                        id:dp.res_id,
                    });
                    vargroupDp=self._makeDataPoint({
                        context:dp.context,
                        data:groupData,
                        fields:fvg.fields,
                        fieldsInfo:fvg.fieldsInfo,
                        modelName:groupedByField.relation,
                        parentID:dp.id,
                        res_id:dp.res_id,
                        viewType:'groupby',
                    });
                    dp.groupData=groupDp.id;
                    self._parseServerData(groupFields,groupDp,groupDp.data);
                });
            });
        },
    });
    returnListModel;
});
