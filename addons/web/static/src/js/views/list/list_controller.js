flectra.define('web.ListController',function(require){
"usestrict";

/**
 *TheListControllercontrolsthelistrendererandthelistmodel. Itsrole
 *istoallowthesetwocomponentstocommunicateproperly,andalso,torender
 *andbindallextrabuttons/pagerinthecontrolpanel.
 */

varcore=require('web.core');
varBasicController=require('web.BasicController');
varDataExport=require('web.DataExport');
varDialog=require('web.Dialog');
varListConfirmDialog=require('web.ListConfirmDialog');
varsession=require('web.session');
constviewUtils=require('web.viewUtils');

var_t=core._t;
varqweb=core.qweb;

varListController=BasicController.extend({
    /**
     *Thiskeycontainsthenameofthebuttonstemplatetorenderontopof
     *thelistview.Itcanbeoverriddentoaddbuttonsinspecificchildviews.
     */
    buttons_template:'ListView.buttons',
    events:_.extend({},BasicController.prototype.events,{
        'click.o_list_export_xlsx':'_onDirectExportData',
        'click.o_list_select_domain':'_onSelectDomain',
    }),
    custom_events:_.extend({},BasicController.prototype.custom_events,{
        activate_next_widget:'_onActivateNextWidget',
        add_record:'_onAddRecord',
        button_clicked:'_onButtonClicked',
        group_edit_button_clicked:'_onEditGroupClicked',
        edit_line:'_onEditLine',
        save_line:'_onSaveLine',
        selection_changed:'_onSelectionChanged',
        toggle_column_order:'_onToggleColumnOrder',
        toggle_group:'_onToggleGroup',
    }),
    /**
     *@constructor
     *@override
     *@param{Object}params
     *@param{boolean}params.editable
     *@param{boolean}params.hasActionMenus
     *@param{Object[]}[params.headerButtons=[]]:alistofnodedescriptors
     *   forcontrolPanel'sactionbuttons
     *@param{Object}params.toolbarActions
     *@param{boolean}params.noLeaf
     */
    init:function(parent,model,renderer,params){
        this._super.apply(this,arguments);
        this.hasActionMenus=params.hasActionMenus;
        this.headerButtons=params.headerButtons||[];
        this.toolbarActions=params.toolbarActions||{};
        this.editable=params.editable;
        this.noLeaf=params.noLeaf;
        this.selectedRecords=params.selectedRecords||[];
        this.multipleRecordsSavingPromise=null;
        this.fieldChangedPrevented=false;
        this.lastFieldChangedEvent=null;
        this.isPageSelected=false;//trueiffallrecordsofthepageareselected
        this.isDomainSelected=false;//trueifftheuserselectedallrecordsmatchingthedomain
        this.isExportEnable=false;
    },

    willStart(){
        constsup=this._super(...arguments);
        constacl=session.user_has_group('base.group_allow_export').then(hasGroup=>{
            this.isExportEnable=hasGroup;
        });
        returnPromise.all([sup,acl]);
    },

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /*
     *@override
     */
    getOwnedQueryParams:function(){
        varstate=this._super.apply(this,arguments);
        varorderedBy=this.model.get(this.handle,{raw:true}).orderedBy||[];
        return_.extend({},state,{orderedBy:orderedBy});
    },
    /**
     *Returnsthelistofcurrentlyselectedres_ids(withthecheckboxeson
     *theleft)
     *
     *@override
     *
     *@returns{number[]}listofres_ids
     */
    getSelectedIds:function(){
        return_.map(this.getSelectedRecords(),function(record){
            returnrecord.res_id;
        });
    },

    /**
     *Returnsthelistofcurrentlyselectedres_ids(withthecheckboxeson
     *theleft)orthewholedomainres_idsifitisselected
     *
     *ThismethodshouldbetheimplementationofgetSelectedIdsbutitiskeptforcompatibilityreasons
     *
     *@returns{Promise<integer[]>}
     */
    getSelectedIdsWithDomain:asyncfunction(){
        if(this.isDomainSelected){
            conststate=this.model.get(this.handle,{raw:true});
            returnawaitthis._domainToResIds(state.getDomain(),session.active_ids_limit);
        }else{
            returnPromise.resolve(this.model.localIdsToResIds(this.selectedRecords));
        }
    },

    /**
     *Returnsthelistofcurrentlyselectedrecords(withthecheckboxeson
     *theleft)
     *
     *@returns{Object[]}listofrecords
     */
    getSelectedRecords:function(){
        varself=this;
        return_.map(this.selectedRecords,function(db_id){
            returnself.model.get(db_id,{raw:true});
        });
    },
    /**
     *Returnsthelistofcurrentlyselectedrecords(withthecheckboxeson
     *theleft)orthewholedomainrecordsifitisselected
     *
     *@returns{Promise<{id,display_name}[]>}
     */
    getSelectedRecordsWithDomain:asyncfunction(){
        if(this.isDomainSelected){
            conststate=this.model.get(this.handle,{raw:true});
            returnawaitthis._domainToRecords(state.getDomain(),session.active_ids_limit);
        }else{
            returnPromise.resolve(this.selectedRecords.map(localId=>{
                constdata=this.model.localData[localId].data;
                return{id:data.id,display_name:data.display_name};
            }));
        }
    },
    /**
     *Displayandbindallbuttonsinthecontrolpanel
     *
     *Note:clickingonthe"Save"buttondoesnothingspecial.Indeed,all
     *editablerowsaresavedonceleftandclickingonthe"Save"buttondoes
     *inducetheleavingofthecurrentrow.
     *
     *@override
     */
    renderButtons:function($node){
        if(this.noLeaf||!this.hasButtons){
            this.hasButtons=false;
            this.$buttons=$('<div>');
        }else{
            this.$buttons=$(qweb.render(this.buttons_template,{widget:this}));
            this.$buttons.on('click','.o_list_button_add',this._onCreateRecord.bind(this));
            this._assignCreateKeyboardBehavior(this.$buttons.find('.o_list_button_add'));
            this.$buttons.find('.o_list_button_add').tooltip({
                delay:{show:200,hide:0},
                title:function(){
                    returnqweb.render('CreateButton.tooltip');
                },
                trigger:'manual',
            });
            this.$buttons.on('mousedown','.o_list_button_discard',this._onDiscardMousedown.bind(this));
            this.$buttons.on('click','.o_list_button_discard',this._onDiscard.bind(this));
        }
        if($node){
            this.$buttons.appendTo($node);
        }
    },
    /**
     *Renders(andupdates)thebuttonsthataredescribedinsidethe`header`
     *nodeofthelistviewarch.Thosebuttonsarevisiblewhenselectingsome
     *records.TheywillbeappendedtothecontrolPanel'sbuttons.
     *
     *@private
     */
    _renderHeaderButtons(){
        if(this.$headerButtons){
            this.$headerButtons.remove();
            this.$headerButtons=null;
        }
        if(!this.headerButtons.length||!this.selectedRecords.length){
            return;
        }
        constbtnClasses='btn-primarybtn-secondarybtn-linkbtn-successbtn-infobtn-warningbtn-danger'.split('');
        let$elms=$();
        this.headerButtons.forEach(node=>{
            const$btn=viewUtils.renderButtonFromNode(node);
            $btn.addClass('btn');
            if(!btnClasses.some(cls=>$btn.hasClass(cls))){
                $btn.addClass('btn-secondary');
            }
            $btn.on("click",this._onHeaderButtonClicked.bind(this,node));
            $elms=$elms.add($btn);
        });
        this.$headerButtons=$elms;
        this.$headerButtons.appendTo(this.$buttons);
    },
    /**
     *Overridestoupdatethelistofselectedrecords
     *
     *@override
     */
    update:function(params,options){
        varself=this;
        letres_ids;
        if(options&&options.keepSelection){
            //filteroutremovedrecordsfromselection
            res_ids=this.model.get(this.handle).res_ids;
            this.selectedRecords=_.filter(this.selectedRecords,function(id){
                return_.contains(res_ids,self.model.get(id).res_id);
            });
        }else{
            this.selectedRecords=[];
        }
        if(this.selectedRecords.length===0||this.selectedRecords.length<res_ids.length){
            this.isDomainSelected=false;
            this.isPageSelected=false;
        }

        params.selectedRecords=this.selectedRecords;
        returnthis._super.apply(this,arguments);
    },
    /**
     *Thishelpersimplymakessurethatthecontrolpanelbuttonsmatchesthe
     *currentmode.
     *
     *@override
     *@param{string}modeeither'readonly'or'edit'
     */
    updateButtons:function(mode){
        if(this.hasButtons){
            this.$buttons.toggleClass('o-editing',mode==='edit');
            conststate=this.model.get(this.handle,{raw:true});
            if(state.count){
                this.$buttons.find('.o_list_export_xlsx').show();
            }else{
                this.$buttons.find('.o_list_export_xlsx').hide();
            }
        }
        this._updateSelectionBox();
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *@seeBasicController._abandonRecord
     *Ifthegivenabandonedrecordisnotthemainone,notifiestherenderer
     *toremovetheappropriatesubrecord(line).
     *
     *@override
     *@private
     *@param{string}[recordID]-defaulttothemainrecordID
     */
    _abandonRecord:function(recordID){
        this._super.apply(this,arguments);
        if((recordID||this.handle)!==this.handle){
            varstate=this.model.get(this.handle);
            this.renderer.removeLine(state,recordID);
            this._updatePaging(state);
        }
    },
    /**
     *AddsanewrecordtotheadataPointoftype'list'.
     *Disablesthebuttonstopreventconcurrentrecordcreationoredition.
     *
     *@todomakerecordcreationabasiccontrollerfeature
     *@private
     *@param{string}dataPointIdadataPointoftype'list'(maybegrouped)
     *@return{Promise}
     */
    _addRecord:function(dataPointId){
        varself=this;
        this._disableButtons();
        returnthis._removeSampleData(()=>{
            returnthis.renderer.unselectRow().then(function(){
                returnself.model.addDefaultRecord(dataPointId,{
                    position:self.editable,
                });
            }).then(function(recordID){
                varstate=self.model.get(self.handle);
                self._updateRendererState(state,{keepWidths:true})
                    .then(function(){
                        self.renderer.editRecord(recordID);
                    })
                    .then(()=>{
                        self._updatePaging(state);
                    });
            }).then(this._enableButtons.bind(this)).guardedCatch(this._enableButtons.bind(this));
        });
    },
    /**
     *Assignonthebuttonscreateadditionnalbehaviortofacilitatetheworkoftheusersdoinginputonlyusingthekeyboard
     *
     *@param{jQueryElement}$createButton Thecreatebuttonitself
     */
    _assignCreateKeyboardBehavior:function($createButton){
        varself=this;
        $createButton.on('keydown',function(e){
            $createButton.tooltip('hide');
            switch(e.which){
                case$.ui.keyCode.ENTER:
                    e.preventDefault();
                    self._onCreateRecord.apply(self);
                    break;
                case$.ui.keyCode.DOWN:
                    e.preventDefault();
                    self._giveFocus();
                    break;
                case$.ui.keyCode.TAB:
                    if(
                        !e.shiftKey&&
                        e.target.classList.contains("btn-primary")&&
                        !self.model.isInSampleMode()
                    ){
                        e.preventDefault();
                        $createButton.tooltip('show');
                    }
                    break;
            }
        });
    },
    /**
     *Thisfunctionisthehookcalledbythefieldmanagermixintoconfirm
     *thatarecordhasbeensaved.
     *
     *@override
     *@param{string}idabasicmodelvalidresourcehandle. Itissupposedto
     *  bearecordfromthelistview.
     *@returns{Promise}
     */
    _confirmSave:function(id){
        varstate=this.model.get(this.handle);
        returnthis._updateRendererState(state,{noRender:true})
            .then(this._setMode.bind(this,'readonly',id));
    },
    /**
     *Deletesrecordsmatchingthecurrentdomain.Welimitthenumberof
     *deletedrecordstothe'active_ids_limit'configparameter.
     *
     *@private
     */
    _deleteRecordsInCurrentDomain:function(){
        constdoIt=async()=>{
            conststate=this.model.get(this.handle,{raw:true});
            constresIds=awaitthis._domainToResIds(state.getDomain(),session.active_ids_limit);
            awaitthis._rpc({
                model:this.modelName,
                method:'unlink',
                args:[resIds],
                context:state.getContext(),
            });
            if(resIds.length===session.active_ids_limit){
                constmsg=_.str.sprintf(
                    _t("Onlythefirst%drecordshavebeendeleted(outof%dselected)"),
                    resIds.length,state.count
                );
                this.do_notify(false,msg);
            }
            this.reload();
        };
        if(this.confirmOnDelete){
            Dialog.confirm(this,_t("Areyousureyouwanttodeletetheserecords?"),{
                confirm_callback:doIt,
            });
        }else{
            doIt();
        }
    },
    /**
     *Toimproveperformance,listviewmustnotbererenderedifitisasked
     *todiscardallitschanges.Indeed,onlythein-editionrowneedstobe
     *discardedinthatcase.
     *
     *@override
     *@private
     *@param{string}[recordID]-defaulttomainrecordID
     *@returns{Promise}
     */
    _discardChanges:function(recordID){
        if((recordID||this.handle)===this.handle){
            recordID=this.renderer.getEditableRecordID();
            if(recordID===null){
                returnPromise.resolve();
            }
        }
        varself=this;
        returnthis._super(recordID).then(function(){
            self.updateButtons('readonly');
        });
    },
    /**
     *Returnstherecordsmatchingthegivendomain.
     *
     *@private
     *@param{Array[]}domain
     *@param{integer}[limit]
     *@returns{Promise<{id,display_name}[]>}
     */
    _domainToRecords:function(domain,limit){
        returnthis._rpc({
            model:this.modelName,
            method:'search_read',
            args:[domain],
            kwargs:{
                fields:['display_name'],
                limit:limit,
            },
        });
    },
    /**
     *Returnstheidsofrecordsmatchingthegivendomain.
     *
     *@private
     *@param{Array[]}domain
     *@param{integer}[limit]
     *@returns{integer[]}
     */
    _domainToResIds:function(domain,limit){
        returnthis._rpc({
            model:this.modelName,
            method:'search',
            args:[domain],
            kwargs:{
                limit:limit,
            },
        });
    },
    /**
     *@returns{DataExport}theexportdialogwidget
     *@private
     */
    _getExportDialogWidget(){
        letstate=this.model.get(this.handle);
        letdefaultExportFields=this.renderer.columns.filter(field=>field.tag==='field'&&state.fields[field.attrs.name].exportable!==false).map(field=>field.attrs.name);
        letgroupedBy=this.renderer.state.groupedBy;
        constdomain=this.isDomainSelected&&state.getDomain();
        returnnewDataExport(this,state,defaultExportFields,groupedBy,
            domain,this.getSelectedIds());
    },
    /**
     *Onlydisplaythepagerwhentherearedatatodisplay.
     *
     *@override
     *@private
     */
    _getPagingInfo:function(state){
        if(!state.count){
            returnnull;
        }
        returnthis._super(...arguments);
    },
    /**
     *@override
     *@private
     */
    _getActionMenuItems:function(state){
        if(!this.hasActionMenus||!this.selectedRecords.length){
            returnnull;
        }
        constprops=this._super(...arguments);
        constotherActionItems=[];
        if(this.isExportEnable){
            otherActionItems.push({
                description:_t("Export"),
                callback:()=>this._onExportData()
            });
        }
        if(this.archiveEnabled){
            otherActionItems.push({
                description:_t("Archive"),
                callback:()=>{
                    Dialog.confirm(this,_t("Areyousurethatyouwanttoarchivealltheselectedrecords?"),{
                        confirm_callback:()=>this._toggleArchiveState(true),
                    });
                }
            },{
                description:_t("Unarchive"),
                callback:()=>this._toggleArchiveState(false)
            });
        }
        if(this.activeActions.delete){
            otherActionItems.push({
                description:_t("Delete"),
                callback:()=>this._onDeleteSelectedRecords()
            });
        }
        returnObject.assign(props,{
            items:Object.assign({},this.toolbarActions,{other:otherActionItems}),
            context:state.getContext(),
            domain:state.getDomain(),
            isDomainSelected:this.isDomainSelected,
        });
    },
    _isValueSet(fieldType,value){
        switch(fieldType){
            case'boolean':
            case'one2many':
            case'many2many':
            case'integer':
            case'monetary':
            case'float':
                returntrue;
            case'selection':
                returnvalue!==false;
            default:
                return!!value;
        }
    },
    /**
     *Savesmultiplerecordsatonce.Thismethodiscalledbythe_onFieldChangedmethod
     *sincetherecordmustbeconfirmedassoonasthefocusleavesadirtycell.
     *Pseudo-validationisperformedwithregisteredmodifiers.
     *Returnsapromisethatisresolvedwhenconfirmingandrejectedinanyothercase.
     *
     *@private
     *@param{string}recordId
     *@param{Object}node
     *@param{Object}changes
     *@returns{Promise}
     */
    _saveMultipleRecords:function(recordId,node,changes){
        varfieldName=Object.keys(changes)[0];
        varvalue=Object.values(changes)[0];
        varrecordIds=_.union([recordId],this.selectedRecords);
        varvalidRecordIds=recordIds.reduce((result,nextRecordId)=>{
            varrecord=this.model.get(nextRecordId);
            varmodifiers=this.renderer._registerModifiers(node,record);
            constfieldType=record.fields[fieldName].type;
            if(!modifiers.readonly&&(!modifiers.required||this._isValueSet(fieldType,value))){
                result.push(nextRecordId);
            }
            returnresult;
        },[]);
        returnnewPromise((resolve,reject)=>{
            constsaveRecords=()=>{
                this.model.saveRecords(this.handle,recordId,validRecordIds,fieldName)
                    .then(async()=>{
                        this.updateButtons('readonly');
                        conststate=this.model.get(this.handle);
                        //Weneedtocheckthecurrentmulti-editablestatehere
                        //incasetheselectionischanged.Iftherearechanges
                        //andthelistwasmulti-editable,wedonotwanttoselect
                        //thenextrow.
                        this.selectedRecords=[];
                        awaitthis._updateRendererState(state,{
                            keepWidths:true,
                            selectedRecords:[],
                        });
                        this._updateSelectionBox();
                        this.renderer.focusCell(recordId,node);
                        resolve(!Object.keys(changes).length);
                    })
                    .guardedCatch(discardAndReject);
            };
            constdiscardAndReject=()=>{
                this.model.discardChanges(recordId);
                this._confirmSave(recordId).then(()=>{
                    this.renderer.focusCell(recordId,node);
                    reject();
                });
            };
            if(validRecordIds.length>0){
                if(recordIds.length===1){
                    //Savewithoutprompt
                    returnsaveRecords();
                }
                constdialogOptions={
                    confirm_callback:saveRecords,
                    cancel_callback:discardAndReject,
                };
                constrecord=this.model.get(recordId);
                constdialogChanges={
                    isDomainSelected:this.isDomainSelected,
                    fieldLabel:node.attrs.string||record.fields[fieldName].string,
                    fieldName:node.attrs.name,
                    nbRecords:recordIds.length,
                    nbValidRecords:validRecordIds.length,
                };
                newListConfirmDialog(this,record,dialogChanges,dialogOptions)
                    .open({shouldFocusButtons:true});
            }else{
                Dialog.alert(this,_t("Novalidrecordtosave"),{
                    confirm_callback:discardAndReject,
                });
            }
        });
    },
    /**
     *Overriddentodealwitheditionofmultipleline.
     *
     *@override
     *@param{string}recordId
     */
    _saveRecord:function(recordId){
        varrecord=this.model.get(recordId,{raw:true});
        if(record.isDirty()&&this.renderer.isInMultipleRecordEdition(recordId)){
            if(!this.multipleRecordsSavingPromise&&this.lastFieldChangedEvent){
                this._onFieldChanged(this.lastFieldChangedEvent);
                this.lastFieldChangedEvent=null;
            }
            //donotsavetherecord(see_saveMultipleRecords)
            constprom=this.multipleRecordsSavingPromise||Promise.reject();
            this.multipleRecordsSavingPromise=null;
            returnprom;
        }
        returnthis._super.apply(this,arguments);
    },
    /**
     *Allowstochangethemodeofasinglerow.
     *
     *@override
     *@private
     *@param{string}mode
     *@param{string}[recordID]-defaulttomainrecordID
     *@returns{Promise}
     */
    _setMode:function(mode,recordID){
        if((recordID||this.handle)!==this.handle){
            this.mode=mode;
            this.updateButtons(mode);
            returnthis.renderer.setRowMode(recordID,mode);
        }else{
            returnthis._super.apply(this,arguments);
        }
    },
    /**
     *@override
     */
    _shouldBounceOnClick(){
        conststate=this.model.get(this.handle,{raw:true});
        return!state.count||state.isSample;
    },
    /**
     *Calledwhenclickingon'Archive'or'Unarchive'inthesidebar.
     *
     *@private
     *@param{boolean}archive
     *@returns{Promise}
     */
    _toggleArchiveState:asyncfunction(archive){
        constresIds=awaitthis.getSelectedIdsWithDomain()
        constnotif=this.isDomainSelected;
        awaitthis._archive(resIds,archive);
        consttotal=this.model.get(this.handle,{raw:true}).count;
        if(notif&&resIds.length===session.active_ids_limit&&resIds.length<total){
            constmsg=_.str.sprintf(
                _t("Ofthe%drecordsselected,onlythefirst%dhavebeenarchived/unarchived."),
                total,resIds.length
            );
            this.do_notify(_t('Warning'),msg);
        }
    },
    /**
     *Hidethecreatebuttoninnon-emptygroupededitablelistviews,asan
     *'Addanitem'linkisavailableineachgroup.
     *
     *@private
     */
    _toggleCreateButton:function(){
        if(this.hasButtons){
            varstate=this.model.get(this.handle);
            varcreateHidden=this.editable&&state.groupedBy.length&&state.data.length;
            this.$buttons.find('.o_list_button_add').toggleClass('o_hidden',!!createHidden);
        }
    },
    /**
     *@override
     *@returns{Promise}
     */
    _update:asyncfunction(){
        awaitthis._super(...arguments);
        this._toggleCreateButton();
        this.updateButtons('readonly');
    },
    /**
     *Whenrecordsareselected,aboxisdisplayedinthecontrolpanel(next
     *tothebuttons).Itindicatesthenumberofselectedrecords,andallows
     *theusertoselectthewholedomaininsteadofthecurrentpage(whenthe
     *pageisselected).Thisfunctionrendersanddisplaysthisboxwhenat
     *leastonerecordisselected.
     *Sinceheaderactionbuttons'displayisdependentontheselection,we
     *refreshthemeachtimetheselectionisupdated.
     *
     *@private
     */
    _updateSelectionBox(){
        if(this.$selectionBox){
            this.$selectionBox.remove();
            this.$selectionBox=null;
        }
        if(this.selectedRecords.length){
            conststate=this.model.get(this.handle,{raw:true});
            this.$selectionBox=$(qweb.render('ListView.selection',{
                isDomainSelected:this.isDomainSelected,
                isPageSelected:this.isPageSelected,
                nbSelected:this.selectedRecords.length,
                nbTotal:state.count,
            }));
            this.$selectionBox.appendTo(this.$buttons);
        }
        this._renderHeaderButtons();
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *TriggeredwhennavigatingwithTAB,whentheendofthelisthasbeen
     *reached.Gobacktothefirstrowinthatcase.
     *
     *@private
     *@param{FlectraEvent}ev
     */
    _onActivateNextWidget:function(ev){
        ev.stopPropagation();
        this.renderer.editFirstRecord(ev);
    },
    /**
     *Addarecordtothelist
     *
     *@private
     *@param{FlectraEvent}ev
     *@param{string}[ev.data.groupId=this.handle]theidofadataPointof
     *  typelisttowhichtherecordmustbeadded(default:mainlist)
     */
    _onAddRecord:function(ev){
        ev.stopPropagation();
        vardataPointId=ev.data.groupId||this.handle;
        if(this.activeActions.create){
            this._addRecord(dataPointId);
        }elseif(ev.data.onFail){
            ev.data.onFail();
        }
    },
    /**
     *Handlesaclickonabuttonbyperformingitsaction.
     *
     *@private
     *@param{FlectraEvent}ev
     */
    _onButtonClicked:function(ev){
        ev.stopPropagation();
        this._callButtonAction(ev.data.attrs,ev.data.record);
    },
    /**
     *Whentheuserclicksonthe'create'button,twothingscanhappen.We
     *canswitchtotheformviewwithnoactiveres_id,soitisin'create'
     *mode,orwecaneditinline.
     *
     *@private
     *@param{MouseEvent}ev
     */
    _onCreateRecord:function(ev){
        //wepreventtheeventpropagationbecausewedon'twantthiseventto
        //triggeraclickonthemainbus,whichwouldbethencaughtbythe
        //listeditablerendererandwouldunselectthenewlycreatedrow
        if(ev){
            ev.stopPropagation();
        }
        varstate=this.model.get(this.handle,{raw:true});
        if(this.editable&&!state.groupedBy.length){
            this._addRecord(this.handle);
        }else{
            this.trigger_up('switch_view',{view_type:'form',res_id:undefined});
        }
    },
    /**
     *Calledwhenthe'delete'actionisclickedoninthesidebar.
     *
     *@private
     */
    _onDeleteSelectedRecords:asyncfunction(){
        if(this.isDomainSelected){
            this._deleteRecordsInCurrentDomain();
        }else{
            this._deleteRecords(this.selectedRecords);
        }
    },
    /**
     *Handlercalledwhentheuserclickedonthe'Discard'button.
     *
     *@param{Event}ev
     */
    _onDiscard:function(ev){
        ev.stopPropagation();//Sothatitisnotconsideredasarowleaving
        this._discardChanges().then(()=>{
            this.lastFieldChangedEvent=null;
        });
    },
    /**
     *Usedtodetectifthediscardbuttonisabouttobeclicked.
     *Somefocusouteventsmightoccurandtriggerasavewhich
     *isnotalwayswantedwhenclicking"Discard".
     *
     *@param{MouseEvent}ev
     *@private
     */
    _onDiscardMousedown:function(ev){
        varself=this;
        this.fieldChangedPrevented=true;
        window.addEventListener('mouseup',function(mouseupEvent){
            varpreventedEvent=self.fieldChangedPrevented;
            self.fieldChangedPrevented=false;
            //Iftheuserstartsclicking(mousedown)onthebuttonandstopsclicking
            //(mouseup)outsideofthebutton,wewanttotriggertheoriginalonFieldChanged
            //Eventthatwaspreventedinthemeantime.
            if(ev.target!==mouseupEvent.target&&preventedEvent.constructor.name==='FlectraEvent'){
                self._onFieldChanged(preventedEvent);
            }
        },{capture:true,once:true});
    },
    /**
     *Calledwhentheuseraskstoeditarow->Updatesthecontrollerbuttons
     *
     *@param{FlectraEvent}ev
     */
    _onEditLine:function(ev){
        varself=this;
        ev.stopPropagation();
        this.trigger_up('mutexify',{
            action:function(){
                self._setMode('edit',ev.data.recordId)
                    .then(ev.data.onSuccess);
            },
        });
    },
    /**
     *OpenstheExportDialog
     *
     *@private
     */
    _onExportData:function(){
        this._getExportDialogWidget().open();
    },
    /**
     *ExportRecordsinaxlsfile
     *
     *@private
     */
    _onDirectExportData(){
        //accessrightscheckbeforeexportingdata
        returnthis._rpc({
            model:'ir.exports',
            method:'search_read',
            args:[[],['id']],
            limit:1,
        }).then(()=>this._getExportDialogWidget().export())
    },
    /**
     *Openstherelatedformview.
     *
     *@private
     *@param{FlectraEvent}ev
     */
    _onEditGroupClicked:function(ev){
        ev.stopPropagation();
        this.do_action({
            context:{create:false},
            type:'ir.actions.act_window',
            views:[[false,'form']],
            res_model:ev.data.record.model,
            res_id:ev.data.record.res_id,
            flags:{mode:'edit'},
        });
    },
    /**
     *Overriddentodealwiththeeditionofmultiplerecords.
     *
     *Notethatwedon'tmanagesavingmultiplerecordsonsaveLine
     *becausewedon'twanttheonchangestobeapplied.
     *
     *@private
     *@override
     */
    _onFieldChanged:function(ev){
        ev.stopPropagation();
        constrecordId=ev.data.dataPointID;
        this.lastFieldChangedEvent=ev;

        if(this.fieldChangedPrevented){
            this.fieldChangedPrevented=ev;
        }elseif(this.renderer.isInMultipleRecordEdition(recordId)){
            constsaveMulti=()=>{
                //ifev.data.__originalComponentisset,itisthefieldComponent
                //thattriggeredtheevent,otherwiseev.targetisthelegacyfield
                //Widgetthattriggeredtheevent
                consttarget=ev.data.__originalComponent||ev.target;
                constnode=target.__node||ev.data.node;
                this.multipleRecordsSavingPromise=
                    this._saveMultipleRecords(ev.data.dataPointID,node,ev.data.changes);
            };
            //dealwitheditionofmultiplelines
            ev.data.onSuccess=saveMulti;//willaskconfirmation,andsave
            ev.data.onFailure=saveMulti;//willshowtheappropriatedialog
            //disableonchangesaswe'llsavedirectly
            ev.data.notifyChange=false;
            //Inmultieditmode,wewillbeaskedifwewanttowriteontheselected
            //records,sotheforce_saveforreadonlyisnotnecessary.
            ev.data.force_save=false;
        }
        this._super.apply(this,arguments);
    },
    /**
     *@private
     *@param{Object}nodethebutton'snodeinthexml
     *@returns{Promise}
     */
    async_onHeaderButtonClicked(node){
        this._disableButtons();
        conststate=this.model.get(this.handle);
        try{
            constresIds=awaitthis.getSelectedIdsWithDomain();
            //addthecontextofthebuttonnode(inthexml)andourcustomone
            //(active_idsanddomain)totheaction'sexecutioncontext
            constactionData=Object.assign({},node.attrs,{
                context:state.getContext({additionalContext:node.attrs.context}),
            });
            Object.assign(actionData.context,{
                active_domain:state.getDomain(),
                active_id:resIds[0],
                active_ids:resIds,
                active_model:state.model,
            });
            //loadtheactionwiththecorrectcontextandrecordparameters(resIDs,modeletc...)
            constrecordData={
                context:state.getContext(),
                model:state.model,
                resIDs:resIds,
            };
            awaitthis._executeButtonAction(actionData,recordData);
        }finally{
            this._enableButtons();
        }
    },
    /**
     *Calledwhentherendererdisplaysaneditablerowandtheusertriesto
     *leaveit->Savestherecordassociatedtothatline.
     *
     *@param{FlectraEvent}ev
     */
    _onSaveLine:function(ev){
        this.saveRecord(ev.data.recordID)
            .then(ev.data.onSuccess)
            .guardedCatch(ev.data.onFailure);
    },
    /**
     *@private
     */
    _onSelectDomain:function(ev){
        ev.preventDefault();
        this.isDomainSelected=true;
        this._updateSelectionBox();
        this._updateControlPanel();
    },
    /**
     *Whenthecurrentselectionchanges(byclickingonthecheckboxesonthe
     *left),weneedtodisplay(orhide)the'sidebar'.
     *
     *@private
     *@param{FlectraEvent}ev
     */
    _onSelectionChanged:function(ev){
        this.selectedRecords=ev.data.selection;
        this.isPageSelected=ev.data.allChecked;
        this.isDomainSelected=false;
        this.$('.o_list_export_xlsx').toggle(!this.selectedRecords.length);
        this._updateSelectionBox();
        this._updateControlPanel();
    },
    /**
     *Iftherecordissetasdirtywhileinmultiplerecordedition,
     *wewanttoimmediatlydiscardthechange.
     *
     *@private
     *@override
     *@param{FlectraEvent}ev
     */
    _onSetDirty:function(ev){
        varrecordId=ev.data.dataPointID;
        if(this.renderer.isInMultipleRecordEdition(recordId)){
            ev.stopPropagation();
            Dialog.alert(this,_t("Novalidrecordtosave"),{
                confirm_callback:async()=>{
                    this.model.discardChanges(recordId);
                    awaitthis._confirmSave(recordId);
                    this.renderer.focusCell(recordId,ev.target.__node);
                },
            });
        }else{
            this._super.apply(this,arguments);
        }
    },
    /**
     *Whentheuserclicksononeofthesortablecolumnheaders,weneedto
     *tellthemodeltosortitselfproperly,toupdatethepagerandto
     *rerendertheview.
     *
     *@private
     *@param{FlectraEvent}ev
     */
    _onToggleColumnOrder:function(ev){
        ev.stopPropagation();
        varstate=this.model.get(this.handle);
        if(!state.groupedBy){
            this._updatePaging(state,{currentMinimum:1});
        }
        varself=this;
        this.model.setSort(state.id,ev.data.name).then(function(){
            self.update({});
        });
    },
    /**
     *Inagroupedlistview,eachgroupcanbeclickedontoopen/closethem.
     *Thismethodjusttransfertherequesttothemodel,thenupdatethe
     *renderer.
     *
     *@private
     *@param{FlectraEvent}ev
     */
    _onToggleGroup:function(ev){
        ev.stopPropagation();
        varself=this;
        this.model
            .toggleGroup(ev.data.group.id)
            .then(function(){
                self.update({},{keepSelection:true,reload:false}).then(function(){
                    if(ev.data.onSuccess){
                        ev.data.onSuccess();
                    }
                });
            });
    },
});

returnListController;

});
