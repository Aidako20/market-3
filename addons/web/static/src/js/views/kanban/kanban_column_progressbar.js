flectra.define('web.KanbanColumnProgressBar',function(require){
'usestrict';

constcore=require('web.core');
varsession=require('web.session');
varutils=require('web.utils');
varWidget=require('web.Widget');

const_t=core._t;

varKanbanColumnProgressBar=Widget.extend({
    template:'KanbanView.ColumnProgressBar',
    events:{
        'click.o_kanban_counter_progress':'_onProgressBarParentClick',
        'click.progress-bar':'_onProgressBarClick',
    },
    /**
     *Allowstodisableanimationsfortests.
     *@type{boolean}
     */
    ANIMATE:true,

    /**
     *@constructor
     */
    init:function(parent,options,columnState){
        this._super.apply(this,arguments);

        this.columnID=options.columnID;
        this.columnState=columnState;

        //<progressbar/>attributes
        this.fieldName=columnState.progressBarValues.field;
        this.colors=_.extend({},columnState.progressBarValues.colors,{
            __false:'muted',//colortouseforfalsevalue
        });
        this.sumField=columnState.progressBarValues.sum_field;

        //PreviousprogressBarstate
        varstate=options.progressBarStates[this.columnID];
        if(state){
            this.groupCount=state.groupCount;
            this.subgroupCounts=state.subgroupCounts;
            this.totalCounterValue=state.totalCounterValue;
            this.activeFilter=state.activeFilter;
        }

        //Preparecurrency(TODOthisshouldbeautomatic...useafield?)
        varsumFieldInfo=this.sumField&&columnState.fieldsInfo.kanban[this.sumField];
        varcurrencyField=sumFieldInfo&&sumFieldInfo.options&&sumFieldInfo.options.currency_field;
        if(currencyField&&columnState.data.length){
            this.currency=session.currencies[columnState.data[0].data[currencyField].res_id];
        }
    },
    /**
     *@override
     */
    start:function(){
        varself=this;

        this.$bars={};
        _.each(this.colors,function(val,key){
            self.$bars[key]=self.$(`.progress-bar[data-filter=${key}]`);
        });
        this.$counter=this.$('.o_kanban_counter_side');
        this.$number=this.$counter.find('b');

        if(this.currency){
            var$currency=$('<span/>',{
                text:this.currency.symbol,
            });
            if(this.currency.position==='before'){
                $currency.prependTo(this.$counter);
            }else{
                $currency.appendTo(this.$counter);
            }
        }

        returnthis._super.apply(this,arguments).then(function(){
            //Thisshouldbeexecutedwhentheprogressbarisfullyrendered
            //andisintheDOM,thishappenstobealwaysthecasewith
            //currentuseofprogressbars
            self.computeCounters();
            self._notifyState();
            self._render();
        });
    },
    /**
     *Computesthecountofeachsubgroupandthetotalcount
     */
    computeCounters(){
        constsubgroupCounts={};
        letallSubgroupCount=0;
        for(constkeyofObject.keys(this.colors)){
            constsubgroupCount=this.columnState.progressBarValues.counts[key]||0;
            if(this.activeFilter===key&&subgroupCount===0){
                this.activeFilter=false;
            }
            subgroupCounts[key]=subgroupCount;
            allSubgroupCount+=subgroupCount;
        };
        subgroupCounts.__false=this.columnState.count-allSubgroupCount;

        this.groupCount=this.columnState.count;
        this.subgroupCounts=subgroupCounts;
        this.prevTotalCounterValue=this.totalCounterValue;
        this.totalCounterValue=this.sumField?(this.columnState.aggregateValues[this.sumField]||0):this.columnState.count;
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *Updatestherenderingaccordingtointernaldata.Thisisdonewithout
     *qwebrenderingbecausethereareanimations.
     *
     *@private
     */
    _render:function(){
        varself=this;

        //Updatecolumndisplayaccordingtoactivefilter
        this.trigger_up('tweak_column',{
            callback:function($el){
                $el.removeClass('o_kanban_group_show');
                _.each(self.colors,function(val,key){
                    $el.removeClass('o_kanban_group_show_'+val);
                });
                if(self.activeFilter){
                    $el.addClass('o_kanban_group_showo_kanban_group_show_'+self.colors[self.activeFilter]);
                }
            },
        });
        this.trigger_up('tweak_column_records',{
            callback:function($el,recordData){
                varcategoryValue=recordData[self.fieldName]?recordData[self.fieldName]:'__false';
                _.each(self.colors,function(val,key){
                    $el.removeClass('oe_kanban_card_'+val);
                });
                if(self.colors[categoryValue]){
                    $el.addClass('oe_kanban_card_'+self.colors[categoryValue]);
                }
            },
        });

        //Displayandanimatetheprogressbars
        varbarNumber=0;
        varbarMinWidth=6;//In%
        constselection=self.columnState.fields[self.fieldName].selection;
        _.each(self.colors,function(val,key){
            var$bar=self.$bars[key];
            varcount=self.subgroupCounts&&self.subgroupCounts[key]||0;

            if(!$bar){
                return;
            }

            //Adapttooltip
            letvalue;
            if(selection){//progressbaronafieldoftypeselection
                constoption=selection.find(option=>option[0]===key);
                value=option&&option[1]||_t('Other');
            }else{
                value=key;
            }
            $bar.attr('data-original-title',count+''+value);
            $bar.tooltip({
                delay:0,
                trigger:'hover',
            });

            //Adaptactivestate
            $bar.toggleClass('progress-bar-animatedprogress-bar-striped',key===self.activeFilter);

            //Adaptwidth
            $bar.removeClass('o_bar_has_recordstransition-off');
            window.getComputedStyle($bar[0]).getPropertyValue('width');//Forcereflowsothatanimationswork
            if(count>0){
                $bar.addClass('o_bar_has_records');
                //Makesureeverybarthathasrecordshassomespace
                //andthateverythingaddsupto100%
                varmaxWidth=100-barMinWidth*barNumber;
                self.$('.progress-bar.o_bar_has_records').css('max-width',maxWidth+'%');
                $bar.css('width',(count*100/self.groupCount)+'%');
                barNumber++;
                $bar.attr('aria-valuemin',0);
                $bar.attr('aria-valuemax',self.groupCount);
                $bar.attr('aria-valuenow',count);
            }else{
                $bar.css('width','');
            }
        });
        this.$('.progress-bar').css('min-width','');
        this.$('.progress-bar.o_bar_has_records').css('min-width',barMinWidth+'%');

        //Displayandanimatethecounternumber
        varstart=this.prevTotalCounterValue;
        varend=this.totalCounterValue;

        if(this.activeFilter){
            if(this.sumField){
                end=0;
                _.each(self.columnState.data,function(record){
                    varrecordData=record.data;
                    if(self.activeFilter===recordData[self.fieldName]||
                        (self.activeFilter==='__false'&&!recordData[self.fieldName])){
                        end+=parseFloat(recordData[self.sumField]);
                    }
                });
            }else{
                end=this.subgroupCounts[this.activeFilter];
            }
        }
        this.prevTotalCounterValue=end;
        varanimationClass=start>999?'o_kanban_grow':'o_kanban_grow_huge';

        if(start!==undefined&&(end>start||this.activeFilter)&&this.ANIMATE){
            $({currentValue:start}).animate({currentValue:end},{
                duration:1000,
                start:function(){
                    self.$counter.addClass(animationClass);
                },
                step:function(){
                    self.$number.html(_getCounterHTML(this.currentValue));
                },
                complete:function(){
                    self.$number.html(_getCounterHTML(this.currentValue));
                    self.$counter.removeClass(animationClass);
                },
            });
        }else{
            this.$number.html(_getCounterHTML(end));
        }

        function_getCounterHTML(value){
            returnutils.human_number(value,0,3);
        }
    },
    /**
     *NotifiesthenewprogressBarstatesothatifafullrerenderoccurs,the
     *newprogressBarthatwouldreplacethisonewillbeinitializedwith
     *currentstate,sothatanimationsarecorrect.
     *
     *@private
     */
    _notifyState:function(){
        this.trigger_up('set_progress_bar_state',{
            columnID:this.columnID,
            values:{
                groupCount:this.groupCount,
                subgroupCounts:this.subgroupCounts,
                totalCounterValue:this.totalCounterValue,
                activeFilter:this.activeFilter,
            },
        });
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *@private
     *@param{Event}ev
     */
    _onProgressBarClick:function(ev){
        this.$clickedBar=$(ev.currentTarget);
        varfilter=this.$clickedBar.data('filter');
        this.activeFilter=(this.activeFilter===filter?false:filter);
        this._notifyState();
        this._render();
    },
    /**
     *@private
     *@param{Event}ev
     */
    _onProgressBarParentClick:function(ev){
        if(ev.target!==ev.currentTarget){
            return;
        }
        this.activeFilter=false;
        this._notifyState();
        this._render();
    },
});
returnKanbanColumnProgressBar;
});
