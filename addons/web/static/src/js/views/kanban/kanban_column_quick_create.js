flectra.define('web.kanban_column_quick_create',function(require){
"usestrict";

/**
 *ThisfiledefinestheColumnQuickCreatewidgetforKanban.Itallowsto
 *createkanbancolumnsdirectlyfromtheKanbanview.
 */

varcore=require('web.core');
varDialog=require('web.Dialog');
varWidget=require('web.Widget');

var_t=core._t;
varQWeb=core.qweb;

varColumnQuickCreate=Widget.extend({
    template:'KanbanView.ColumnQuickCreate',
    events:{
        'click.o_quick_create_folded':'_onUnfold',
        'click.o_kanban_add':'_onAddClicked',
        'click.o_kanban_examples':'_onShowExamples',
        'keydown':'_onKeydown',
        'keypressinput':'_onKeypress',
        'blurinput':'_onInputBlur',
        'focusinput':'_onInputFocus',
    },

    /**
     *@override
     *@param{Object}[options]
     *@param{Object}[options.examples]
     */
    init:function(parent,options){
        this._super.apply(this,arguments);
        this.applyExamplesText=options.applyExampleText||_t("UseThisForMyKanban");
        this.examples=options.examples;
        this.folded=true;
        this.isMobile=false;
    },
    /**
     *@override
     */
    start:function(){
        this.$quickCreateFolded=this.$('.o_quick_create_folded');
        this.$quickCreateUnfolded=this.$('.o_quick_create_unfolded');
        this.$input=this.$('input');

        //destroythequickcreatewhentheuserclicksoutside
        core.bus.on('click',this,this._onWindowClicked);

        this._update();

        returnthis._super.apply(this,arguments);
    },
    /**
     *CalledeachtimethequickcreateisattachedintotheDOM
     */
    on_attach_callback:function(){
        if(!this.folded){
            this.$input.focus();
        }
    },

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *Folds/unfoldstheColumnquickcreatewidget
     */
    toggleFold:function(){
        this.folded=!this.folded;
        this._update();
        if(!this.folded){
            this.$input.focus();
            this.trigger_up('scrollTo',{selector:'.o_column_quick_create'});
        }
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *Clearstheinputvalueandnotifytheenvironmenttocreateacolumn
     *
     *@private
     */
    _add:function(){
        varvalue=this.$input.val().trim();
        if(!value.length){
            this._cancel();
            return;
        }
        this.$input.val('');
        this.trigger_up('quick_create_add_column',{value:value});
        this.$input.focus();
    },
    /**
     *Cancelsthequickcreation
     *
     *@private
     */
    _cancel:function(){
        if(!this.folded){
            this.$input.val('');
            this.folded=true;
            this._update();
        }
    },
    /**
     *Updatestherenderingaccordingtothecurrentstate(folded/unfolded)
     *
     *@private
     */
    _update:function(){
        this.$quickCreateFolded.toggle(this.folded);
        this.$quickCreateUnfolded.toggle(!this.folded);
        this.trigger_up('quick_create_column_updated');
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *@private
     *@param{MouseEvent}event
     */
    _onAddClicked:function(event){
        event.stopPropagation();
        this._add();
    },
    /**
     *Whentheinputisnotfocused,nokeyeventmayoccurinthecolumn,so
     *thediscardfeaturewillnotworkbypressingESC.Wesimplyhidethe
     *helpmessageinthatcase,sowedonotmisleadourusers.
     *
     *@private
     *@param{KeyboardEvent}event
     */
    _onInputBlur:function(){
        this.$('.o_discard_msg').hide();
    },
    /**
     *Whentheinputisfocused,weneedtoshowthediscardhelpmessage(it
     *mighthavebeenhidden,@see_onInputBlur)
     *
     *@private
     *@param{KeyboardEvent}event
     */
    _onInputFocus:function(){
        this.$('.o_discard_msg').show();
    },
    /**
     *Cancelsquickcreationonescapekeydownevent
     *
     *@private
     *@param{KeyEvent}event
     */
    _onKeydown:function(event){
        if(event.keyCode===$.ui.keyCode.ESCAPE){
            this._cancel();
        }
    },
    /**
     *Validatesquickcreationonenterkeypressevent
     *
     *@private
     *@param{KeyEvent}event
     */
    _onKeypress:function(event){
        if(event.keyCode===$.ui.keyCode.ENTER){
            this._add();
        }
    },
    /**
     *OpensadialogcontainingexamplesofKanbanprocesses
     *
     *@private
     */
    _onShowExamples:function(){
        varself=this;
        vardialog=newDialog(this,{
            $content:$(QWeb.render('KanbanView.ExamplesDialog',{
                examples:this.examples,
            })),
            buttons:[{
                classes:'btn-primaryfloat-right',
                text:this.applyExamplesText,
                close:true,
                click:function(){
                    constactiveExample=self.examples[this.$('.nav-link.active').data("exampleIndex")];
                    activeExample.columns.forEach(column=>{
                        self.trigger_up('quick_create_add_column',{value:column.toString(),foldQuickCreate:true});
                    });
                }
            },{
                classes:'btn-secondaryfloat-right',
                close:true,
                text:_t('Close'),
            }],
            size:"large",
            title:"KanbanExamples",
        }).open();
        dialog.on('closed',this,function(){
            self.$input.focus();
        });
    },
    /**
     *@private
     */
    _onUnfold:function(){
        if(this.folded){
            this.toggleFold();
        }
    },
    /**
     *Whenaclickhappensoutsidethequickcreate,wewanttocloseit.
     *
     *@private
     *@param{MouseEvent}event
     */
    _onWindowClicked:function(event){
        //ignoreclicksifthequickcreateisnotinthedom
        if(!document.contains(this.el)){
            return;
        }

        //ignoreclicksinmodals
        if($(event.target).closest('.modal').length){
            return;
        }

        //ignoreclicksiftargetisinsidethequickcreate
        if(this.el.contains(event.target)){
            return;
        }

        this._cancel();
    },
});

returnColumnQuickCreate;

});
