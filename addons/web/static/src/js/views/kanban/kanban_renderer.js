flectra.define('web.KanbanRenderer',function(require){
"usestrict";

varBasicRenderer=require('web.BasicRenderer');
varColumnQuickCreate=require('web.kanban_column_quick_create');
varconfig=require('web.config');
varcore=require('web.core');
varKanbanColumn=require('web.KanbanColumn');
varKanbanRecord=require('web.KanbanRecord');
varQWeb=require('web.QWeb');
varsession=require('web.session');
varutils=require('web.utils');
varviewUtils=require('web.viewUtils');

varqweb=core.qweb;
var_t=core._t;

functionfindInNode(node,predicate){
    if(predicate(node)){
        returnnode;
    }
    if(!node.children){
        returnundefined;
    }
    for(vari=0;i<node.children.length;i++){
        if(findInNode(node.children[i],predicate)){
            returnnode.children[i];
        }
    }
}

functionqwebAddIf(node,condition){
    if(node.attrs[qweb.prefix+'-if']){
        condition=_.str.sprintf("(%s)and(%s)",node.attrs[qweb.prefix+'-if'],condition);
    }
    node.attrs[qweb.prefix+'-if']=condition;
}

functiontransformQwebTemplate(node,fields){
    //Processmodifiers
    if(node.tag&&node.attrs.modifiers){
        varmodifiers=node.attrs.modifiers||{};
        if(modifiers.invisible){
            qwebAddIf(node,_.str.sprintf("!kanban_compute_domain(%s)",JSON.stringify(modifiers.invisible)));
        }
    }
    switch(node.tag){
        case'button':
        case'a':
            vartype=node.attrs.type||'';
            if(_.indexOf('action,object,edit,open,delete,url,set_cover'.split(','),type)!==-1){
                _.each(node.attrs,function(v,k){
                    if(_.indexOf('icon,type,name,args,string,context,states,kanban_states'.split(','),k)!==-1){
                        node.attrs['data-'+k]=v;
                        delete(node.attrs[k]);
                    }
                });
                if(node.attrs['data-string']){
                    node.attrs.title=node.attrs['data-string'];
                }
                if(node.tag==='a'&&node.attrs['data-type']!=="url"){
                    node.attrs.href='#';
                }else{
                    node.attrs.type='button';
                }

                varaction_classes="oe_kanban_actionoe_kanban_action_"+node.tag;
                if(node.attrs['t-attf-class']){
                    node.attrs['t-attf-class']+=action_classes;
                }elseif(node.attrs['t-att-class']){
                    node.attrs['t-att-class']+="+'"+action_classes+"'";
                }else{
                    node.attrs['class']=(node.attrs['class']||'')+action_classes;
                }
            }
            break;
    }
    if(node.children){
        for(vari=0,ii=node.children.length;i<ii;i++){
            transformQwebTemplate(node.children[i],fields);
        }
    }
}

varKanbanRenderer=BasicRenderer.extend({
    className:'o_kanban_view',
    config:{//theKanbanRecordandKanbanColumnclassestouse(maybeoverridden)
        KanbanColumn:KanbanColumn,
        KanbanRecord:KanbanRecord,
    },
    custom_events:_.extend({},BasicRenderer.prototype.custom_events||{},{
        close_quick_create:'_onCloseQuickCreate',
        cancel_quick_create:'_onCancelQuickCreate',
        set_progress_bar_state:'_onSetProgressBarState',
        start_quick_create:'_onStartQuickCreate',
        quick_create_column_updated:'_onQuickCreateColumnUpdated',
    }),
    events:_.extend({},BasicRenderer.prototype.events||{},{
        'keydown.o_kanban_record':'_onRecordKeyDown'
    }),
    sampleDataTargets:[
        '.o_kanban_counter',
        '.o_kanban_record',
        '.o_kanban_toggle_fold',
        '.o_column_folded',
        '.o_column_archive_records',
        '.o_column_unarchive_records',
    ],

    /**
     *@override
     *@param{Object}params
     *@param{boolean}params.quickCreateEnabledsettofalsetodisablethe
     *  quickcreatefeature
     */
    init:function(parent,state,params){
        this._super.apply(this,arguments);

        this.widgets=[];
        this.qweb=newQWeb(config.isDebug(),{_s:session.origin},false);
        vartemplates=findInNode(this.arch,function(n){returnn.tag==='templates';});
        transformQwebTemplate(templates,state.fields);
        this.qweb.add_template(utils.json_node_to_xml(templates));
        this.examples=params.examples;
        this.recordOptions=_.extend({},params.record_options,{
            qweb:this.qweb,
            viewType:'kanban',
        });
        this.columnOptions=_.extend({KanbanRecord:this.config.KanbanRecord},params.column_options);
        if(this.columnOptions.hasProgressBar){
            this.columnOptions.progressBarStates={};
        }
        this.quickCreateEnabled=params.quickCreateEnabled;
        if(!params.readOnlyMode){
            varhandleField=_.findWhere(this.state.fieldsInfo.kanban,{widget:'handle'});
            this.handleField=handleField&&handleField.name;
        }
        this._setState(state);
    },
    /**
     *CalledeachtimetherendererisattachedintotheDOM.
     */
    on_attach_callback:function(){
        this._super(...arguments);
        if(this.quickCreate){
            this.quickCreate.on_attach_callback();
        }
    },

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *Displaysthequickcreaterecordintherequestedcolumn(firstoneby
     *default)
     *
     *@params{string}[groupId]localidofthegroupinwhichthequickcreate
     *  mustbeinserted
     *@returns{Promise}
     */
    addQuickCreate:function(groupId){
        letkanbanColumn;
        if(groupId){
            kanbanColumn=this.widgets.find(column=>column.db_id===groupId);
        }
        kanbanColumn=kanbanColumn||this.widgets[0];
        returnkanbanColumn.addQuickCreate();
    },
    /**
     *Focusesthefirstkanbanrecord
     */
    giveFocus:function(){
        this.$('.o_kanban_record:first').focus();
    },
    /**
     *Togglefold/unfoldtheColumnquickcreatewidget
     */
    quickCreateToggleFold:function(){
        this.quickCreate.toggleFold();
        this._toggleNoContentHelper();
    },
    /**
     *Updatesagivencolumnwithitsnewstate.
     *
     *@param{string}localIDthecolumnid
     *@param{Object}columnState
     *@param{Object}[options]
     *@param{Object}[options.state]ifset,thisrepresentsthenewstate
     *@param{boolean}[options.openQuickCreate]iftrue,directlyopensthe
     *  QuickCreatewidgetintheupdatedcolumn
     *
     *@returns{Promise}
     */
    updateColumn:function(localID,columnState,options){
        varself=this;
        varKanbanColumn=this.config.KanbanColumn;
        varnewColumn=newKanbanColumn(this,columnState,this.columnOptions,this.recordOptions);
        varindex=_.findIndex(this.widgets,{db_id:localID});
        varcolumn=this.widgets[index];
        this.widgets[index]=newColumn;
        if(options&&options.state){
            this._setState(options.state);
        }
        returnnewColumn.appendTo(document.createDocumentFragment()).then(function(){
            vardef;
            if(options&&options.openQuickCreate){
                def=newColumn.addQuickCreate();
            }
            returnPromise.resolve(def).then(function(){
                newColumn.$el.insertAfter(column.$el);
                self._toggleNoContentHelper();
                //Whenarecordhasbeenquickcreated,thenewcolumndirectly
                //rendersthequickcreatewidget(toallowquickcreatingseveral
                //recordsinarow).However,aswerenderthiscolumnina
                //fragment,thequickcreatewidgetcan'tbecorrectlyfocused.So
                //wemanuallycallon_attach_callbacktofocusitonceintheDOM.
                newColumn.on_attach_callback();
                column.destroy();
            });
        });
    },
    /**
     *Updatesagivenrecordwithitsnewstate.
     *
     *@param{Object}recordState
     *@returns{Promise}
     */
    updateRecord:function(recordState){
        varisGrouped=!!this.state.groupedBy.length;
        varrecord;

        if(isGrouped){
            //ifgrouped,this.widgetsarekanbancolumnssoweneedtofind
            //thekanbanrecordinside
            _.each(this.widgets,function(widget){
                record=record||_.findWhere(widget.records,{
                    db_id:recordState.id,
                });
            });
        }else{
            record=_.findWhere(this.widgets,{db_id:recordState.id});
        }

        if(record){
            returnrecord.update(recordState);
        }
        returnPromise.resolve();
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *@private
     *@param{DOMElement}currentColumn
     */
    _focusOnNextCard:function(currentCardElement){
        varnextCard=currentCardElement.nextElementSibling;
        if(nextCard){
            nextCard.focus();
        }
    },
    /**
     *Triestogivefocustothepreviouscard,andreturnstrueifsuccessful
     *
     *@private
     *@param{DOMElement}currentColumn
     *@returns{boolean}
     */
    _focusOnPreviousCard:function(currentCardElement){
        varpreviousCard=currentCardElement.previousElementSibling;
        if(previousCard&&previousCard.classList.contains("o_kanban_record")){//previouselementmightbecolumntitle
            previousCard.focus();
            returntrue;
        }
    },
    /**
     *Returnsthedefaultcolumnsforthekanbanviewexamplebackground.
     *Youcanoverridethismethodtoeasilycustomizethecolumnnames.
     *
     *@private
     */
    _getGhostColumns:function(){
        if(this.examples&&this.examples.ghostColumns){
            returnthis.examples.ghostColumns;
        }
        return_.map(_.range(1,5),function(num){
            return_.str.sprintf(_t("Column%s"),num);
        });
    },
    /**
     *RendertheExampleGhostKanbancardonthebackground
     *
     *@private
     *@param{DocumentFragment}fragment
     */
    _renderExampleBackground:function(fragment){
        var$background=$(qweb.render('KanbanView.ExamplesBackground',{ghostColumns:this._getGhostColumns()}));
        $background.appendTo(fragment);
    },
    /**
     *Rendersemptyinvisibledivsinadocumentfragment.
     *
     *@private
     *@param{DocumentFragment}fragment
     *@param{integer}nbDivsthenumberofdivstoappend
     *@param{Object}[options]
     *@param{string}[options.inlineStyle]
     */
    _renderGhostDivs:function(fragment,nbDivs,options){
        varghostDefs=[];
        for(var$ghost,i=0;i<nbDivs;i++){
            $ghost=$('<div>').addClass('o_kanban_recordo_kanban_ghost');
            if(options&&options.inlineStyle){
                $ghost.attr('style',options.inlineStyle);
            }
            vardef=$ghost.appendTo(fragment);
            ghostDefs.push(def);
        }
        returnPromise.all(ghostDefs);
    },
    /**
     *Rendersangroupedkanbanviewinafragment.
     *
     *@private
     *@param{DocumentFragment}fragment
     */
    _renderGrouped:function(fragment){
        varself=this;

        //Rendercolumns
        varKanbanColumn=this.config.KanbanColumn;
        _.each(this.state.data,function(group){
            varcolumn=newKanbanColumn(self,group,self.columnOptions,self.recordOptions);
            vardef;
            if(!group.value){
                def=column.prependTo(fragment);//displaythe'Undefined'groupfirst
                self.widgets.unshift(column);
            }else{
                def=column.appendTo(fragment);
                self.widgets.push(column);
            }
            self.defs.push(def);
        });

        //removeprevioussorting
        if(this.$el.sortable('instance')!==undefined){
            this.$el.sortable('destroy');
        }
        if(this.groupedByM2O){
            //Enablecolumnsorting
            this.$el.sortable({
                axis:'x',
                items:'>.o_kanban_group',
                handle:'.o_column_title',
                cursor:'move',
                revert:150,
                delay:100,
                tolerance:'pointer',
                forcePlaceholderSize:true,
                stop:function(){
                    varids=[];
                    self.$('.o_kanban_group').each(function(index,u){
                        //Ignore'Undefined'column
                        if(_.isNumber($(u).data('id'))){
                            ids.push($(u).data('id'));
                        }
                    });
                    self.trigger_up('resequence_columns',{ids:ids});
                },
            });

            if(this.createColumnEnabled){
                this.quickCreate=newColumnQuickCreate(this,{
                    applyExamplesText:this.examples&&this.examples.applyExamplesText,
                    examples:this.examples&&this.examples.examples,
                });
                this.defs.push(this.quickCreate.appendTo(fragment).then(function(){
                    //Openitdirectlyifthereisnocolumnyet
                    if(!self.state.data.length){
                        self.quickCreate.toggleFold();
                        self._renderExampleBackground(fragment);
                    }
                }));
            }
        }
    },
    /**
     *Rendersanungroupedkanbanviewinafragment.
     *
     *@private
     *@param{DocumentFragment}fragment
     */
    _renderUngrouped:function(fragment){
        varself=this;
        varKanbanRecord=this.config.KanbanRecord;
        varkanbanRecord;
        _.each(this.state.data,function(record){
            kanbanRecord=newKanbanRecord(self,record,self.recordOptions);
            self.widgets.push(kanbanRecord);
            vardef=kanbanRecord.appendTo(fragment);
            self.defs.push(def);
        });

        //enablerecordresequencingifthereisafieldwithwidget='handle'
        //andifthereisnoorderBy(inthiscaseweassumethatthewidget
        //hasbeenputonthefirstdefaultorderfieldofthemodel),orif
        //thefirstorderByfieldistheonewithwidget='handle'
        varorderedBy=this.state.orderedBy;
        varhasHandle=this.handleField&&
                        (orderedBy.length===0||orderedBy[0].name===this.handleField);
        if(hasHandle){
            this.$el.sortable({
                items:'.o_kanban_record:not(.o_kanban_ghost)',
                cursor:'move',
                revert:0,
                delay:0,
                tolerance:'pointer',
                forcePlaceholderSize:true,
                stop:function(event,ui){
                    self._moveRecord(ui.item.data('record').db_id,ui.item.index());
                },
            });
        }

        //appendghostdivstoensurethatallkanbanrecordsareleftaligned
        varprom=Promise.all(self.defs).then(function(){
            varoptions={};
            if(kanbanRecord){
                options.inlineStyle=kanbanRecord.$el.attr('style');
            }
            returnself._renderGhostDivs(fragment,6,options);
        });
        this.defs.push(prom);
    },
    /**
     *@override
     *@private
     */
    _renderView:function(){
        varself=this;

        //renderthekanbanview
        varisGrouped=!!this.state.groupedBy.length;
        varfragment=document.createDocumentFragment();
        vardefs=[];
        this.defs=defs;
        if(isGrouped){
            this._renderGrouped(fragment);
        }else{
            this._renderUngrouped(fragment);
        }
        deletethis.defs;

        returnthis._super.apply(this,arguments).then(function(){
            returnPromise.all(defs).then(function(){
                self.$el.empty();
                self.$el.toggleClass('o_kanban_grouped',isGrouped);
                self.$el.toggleClass('o_kanban_ungrouped',!isGrouped);
                self.$el.append(fragment);
                self._toggleNoContentHelper();
            });
        });
    },
    /**
     *@param{boolean}[remove]iftrue,thenocontenthelperisalwaysremoved
     *@private
     */
    _toggleNoContentHelper:function(remove){
        vardisplayNoContentHelper=
            !remove&&
            !this._hasContent()&&
            !!this.noContentHelp&&
            !(this.quickCreate&&!this.quickCreate.folded)&&
            !this.state.isGroupedByM2ONoColumn;

        var$noContentHelper=this.$('.o_view_nocontent');

        if(displayNoContentHelper&&!$noContentHelper.length){
            this._renderNoContentHelper();
        }
        if(!displayNoContentHelper&&$noContentHelper.length){
            $noContentHelper.remove();
        }
    },
    /**
     *Setsthecurrentstateandupdatessomeinternalattributesaccordingly.
     *
     *@override
     */
    _setState:function(){
        this._super(...arguments);

        vargroupByField=this.state.groupedBy[0];
        varcleanGroupByField=this._cleanGroupByField(groupByField);
        vargroupByFieldAttrs=this.state.fields[cleanGroupByField];
        vargroupByFieldInfo=this.state.fieldsInfo.kanban[cleanGroupByField];
        //Deactivatethedrag'n'dropifthegroupedByfield:
        //-isadateordatetimesincewegroupbymonthor
        //-isreadonly(onthefieldattrsorintheview)
        vardraggable=true;
        vargrouped_by_date=false;
        if(groupByFieldAttrs){
            if(groupByFieldAttrs.type==="date"||groupByFieldAttrs.type==="datetime"){
                draggable=false;
                grouped_by_date=true;
            }elseif(groupByFieldAttrs.readonly!==undefined){
                draggable=!(groupByFieldAttrs.readonly);
            }
        }
        if(groupByFieldInfo){
            if(draggable&&groupByFieldInfo.readonly!==undefined){
                draggable=!(groupByFieldInfo.readonly);
            }
        }
        this.groupedByM2O=groupByFieldAttrs&&(groupByFieldAttrs.type==='many2one');
        varrelation=this.groupedByM2O&&groupByFieldAttrs.relation;
        vargroupByTooltip=groupByFieldInfo&&groupByFieldInfo.options.group_by_tooltip;
        this.columnOptions=_.extend(this.columnOptions,{
            draggable:draggable,
            group_by_tooltip:groupByTooltip,
            groupedBy:groupByField,
            grouped_by_m2o:this.groupedByM2O,
            grouped_by_date:grouped_by_date,
            relation:relation,
            quick_create:this.quickCreateEnabled&&viewUtils.isQuickCreateEnabled(this.state),
        });
        this.createColumnEnabled=this.groupedByM2O&&this.columnOptions.group_creatable;
    },
    /**
     *Removedate/datetimemagicgroupinginfotogetproperfieldattrs/infofromstate
     *ex:sent_date:monthwillbecomesent_date
     *
     *@private
     *@param{string}groupByField
     *@returns{string}
     */
    _cleanGroupByField:function(groupByField){
        varcleanGroupByField=groupByField;
        if(cleanGroupByField&&cleanGroupByField.indexOf(':')>-1){
            cleanGroupByField=cleanGroupByField.substring(0,cleanGroupByField.indexOf(':'));
        }

        returncleanGroupByField;
    },
    /**
     *Movesthefocusonthefirstcardofthenextcolumninagivendirection
     *Thisignoresthefoldedcolumnsandskipsovertheemptycolumns.
     *Inungroupedkanban,movesthefocustothenext/previouscard
     *
     *@param{DOMElement}eventTarget thetargetofthekeydownevent
     *@param{string}direction containseither'LEFT'or'RIGHT'
     */
    _focusOnCardInColumn:function(eventTarget,direction){
        varcurrentColumn=eventTarget.parentElement;
        varhasSelectedACard=false;
        varcannotSelectAColumn=false;
        while(!hasSelectedACard&&!cannotSelectAColumn){
            varcandidateColumn=direction==='LEFT'?
                                    currentColumn.previousElementSibling:
                                    currentColumn.nextElementSibling;
            currentColumn=candidateColumn;
            if(candidateColumn){
                varallCardsOfCandidateColumn=
                    candidateColumn.getElementsByClassName('o_kanban_record');
                if(allCardsOfCandidateColumn.length){
                    allCardsOfCandidateColumn[0].focus();
                    hasSelectedACard=true;
                }
            }
            else{//eithertherearenomorecolumnsinthedirectionor
                   //thisisnotagroupedkanban
                direction==='LEFT'?
                    this._focusOnPreviousCard(eventTarget):
                    this._focusOnNextCard(eventTarget);
                cannotSelectAColumn=true;
            }
        }
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *@private
     */
    _onCancelQuickCreate:function(){
        this._toggleNoContentHelper();
    },
    /**
     *Closestheopenedquickcreatewidgetsincolumns
     *
     *@private
     */
    _onCloseQuickCreate:function(){
        if(this.state.groupedBy.length){
            _.invoke(this.widgets,'cancelQuickCreate');
        }
        this._toggleNoContentHelper();
    },
    /**
     *@private
     *@param{FlectraEvent}ev
     */
    _onQuickCreateColumnUpdated:function(ev){
        ev.stopPropagation();
        this._toggleNoContentHelper();
        this._updateExampleBackground();
    },
    /**
     *@private
     *@param{KeyboardEvent}e
     */
    _onRecordKeyDown:function(e){
        switch(e.which){
            case$.ui.keyCode.DOWN:
                this._focusOnNextCard(e.currentTarget);
                e.stopPropagation();
                e.preventDefault();
                break;
            case$.ui.keyCode.UP:
                constpreviousFocused=this._focusOnPreviousCard(e.currentTarget);
                if(!previousFocused){
                    this.trigger_up('navigation_move',{direction:'up'});
                }
                e.stopPropagation();
                e.preventDefault();
                break;
            case$.ui.keyCode.RIGHT:
                this._focusOnCardInColumn(e.currentTarget,'RIGHT');
                e.stopPropagation();
                e.preventDefault();
                break;
            case$.ui.keyCode.LEFT:
                this._focusOnCardInColumn(e.currentTarget,'LEFT');
                e.stopPropagation();
                e.preventDefault();
                break;
        }
    },
    /**
     *Updatesprogressbarinternalstates(necessaryforanimations)with
     *receiveddata.
     *
     *@private
     *@param{FlectraEvent}ev
     */
    _onSetProgressBarState:function(ev){
        if(!this.columnOptions.progressBarStates[ev.data.columnID]){
            this.columnOptions.progressBarStates[ev.data.columnID]={};
        }
        _.extend(this.columnOptions.progressBarStates[ev.data.columnID],ev.data.values);
    },
    /**
     *Closestheopenedquickcreatewidgetsincolumns
     *
     *@private
     */
    _onStartQuickCreate:function(){
        this._toggleNoContentHelper(true);
    },
    /**
     *Hideordisplaythebackgroundexample:
     * -displayedwhenquickcreatecolumnisdisplayandthereisnocolumnelse
     * -hiddenotherwise
     *
     *@private
     **/
    _updateExampleBackground:function(){
        var$elem=this.$('.o_kanban_example_background_container');
        if(!this.state.data.length&&!$elem.length){
            this._renderExampleBackground(this.$el);
        }else{
            $elem.remove();
        }
    },
});

returnKanbanRenderer;

});
