flectra.define('web.KanbanRecord',function(require){
"usestrict";

/**
 *ThisfiledefinestheKanbanRecordwidget,whichcorrespondstoacardin
 *aKanbanview.
 */
varconfig=require('web.config');
varcore=require('web.core');
varDomain=require('web.Domain');
varDialog=require('web.Dialog');
varfield_utils=require('web.field_utils');
constFieldWrapper=require('web.FieldWrapper');
varutils=require('web.utils');
varWidget=require('web.Widget');
varwidgetRegistry=require('web.widget_registry');

var_t=core._t;
varQWeb=core.qweb;

varKANBAN_RECORD_COLORS=require('web.basic_fields').FieldColorPicker.prototype.RECORD_COLORS;
varNB_KANBAN_RECORD_COLORS=KANBAN_RECORD_COLORS.length;

varKanbanRecord=Widget.extend({
    events:{
        'click.oe_kanban_action':'_onKanbanActionClicked',
        'click.o_kanban_manage_toggle_button':'_onManageTogglerClicked',
    },
    /**
     *@override
     */
    init:function(parent,state,options){
        this._super(parent);

        this.fields=state.fields;
        this.fieldsInfo=state.fieldsInfo.kanban;
        this.modelName=state.model;

        this.options=options;
        this.editable=options.editable;
        this.deletable=options.deletable;
        this.read_only_mode=options.read_only_mode;
        this.selectionMode=options.selectionMode;
        this.qweb=options.qweb;
        this.subWidgets={};

        this._setState(state);
        //avoidquickmultipleclicks
        this._onKanbanActionClicked=_.debounce(this._onKanbanActionClicked,300,true);
    },
    /**
     *@override
     */
    start:function(){
        returnPromise.all([this._super.apply(this,arguments),this._render()]);
    },
    /**
     *CalledeachtimetherecordisattachedtotheDOM.
     */
    on_attach_callback:function(){
        this.isInDOM=true;
        _.invoke(this.subWidgets,'on_attach_callback');
    },
    /**
     *CalledeachtimetherecordisdetachedfromtheDOM.
     */
    on_detach_callback:function(){
        this.isInDOM=false;
        _.invoke(this.subWidgets,'on_detach_callback');
    },

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *Re-renderstherecordwithanewstate
     *
     *@param{Object}state
     *@returns{Promise}
     */
    update:function(state){
        //detachthewidgetsbecausetherecordwillemptyits$el,whichwill
        //removealleventhandlersonitsdescendants,andwewanttokeep
        //thosehandlersaliveaswewillre-usethesewidgets
        _.invoke(_.pluck(this.subWidgets,'$el'),'detach');
        this._setState(state);
        returnthis._render();
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *@private
     */
    _attachTooltip:function(){
        varself=this;
        this.$('[tooltip]').each(function(){
            var$el=$(this);
            vartooltip=$el.attr('tooltip');
            if(tooltip){
                $el.tooltip({
                    title:self.qweb.render(tooltip,self.qweb_context)
                });
            }
        });
    },
    /**
     *@private
     *@param{string}dastringifieddomain
     *@returns{boolean}thedomainevalutedwiththecurrentvalues
     */
    _computeDomain:function(d){
        returnnewDomain(d).compute(this.state.evalContext);
    },
    /**
     *Generatesthecolorclassnamefromagivenvariable
     *
     *@private
     *@param{number|string}variable
     *@return{string}theclassname
     */
    _getColorClassname:function(variable){
        varcolor=this._getColorID(variable);
        return'oe_kanban_color_'+color;
    },
    /**
     *Computesacoloridbetween0and10fromagivenvalue
     *
     *@private
     *@param{number|string}variable
     *@returns{integer}thecolorid
     */
    _getColorID:function(variable){
        if(typeofvariable==='number'){
            returnMath.round(variable)%NB_KANBAN_RECORD_COLORS;
        }
        if(typeofvariable==='string'){
            varindex=0;
            for(vari=0;i<variable.length;i++){
                index+=variable.charCodeAt(i);
            }
            returnindex%NB_KANBAN_RECORD_COLORS;
        }
        return0;
    },
    /**
     *Computesacolornamefromvalue
     *
     *@private
     *@param{number|string}variable
     *@returns{integer}thecolorname
     */
    _getColorname:function(variable){
        varcolorID=this._getColorID(variable);
        returnKANBAN_RECORD_COLORS[colorID];
    },
    file_type_magic_word:{
        '/':'jpg',
        'R':'gif',
        'i':'png',
        'P':'svg+xml',
    },
    /**
     *@private
     *@param{string}modelthenameofthemodel
     *@param{string}fieldthenameofthefield
     *@param{integer}idtheidoftheresource
     *@param{string}placeholder
     *@returns{string}theurloftheimage
     */
    _getImageURL:function(model,field,id,placeholder){
        id=(_.isArray(id)?id[0]:id)||null;
        varisCurrentRecord=this.modelName===model&&(this.recordData.id===id||(!this.recordData.id&&!id));
        varurl;
        if(isCurrentRecord&&this.record[field]&&this.record[field].raw_value&&!utils.is_bin_size(this.record[field].raw_value)){
            //Usemagic-wordtechniquefordetectingimagetype
            url='data:image/'+this.file_type_magic_word[this.record[field].raw_value[0]]+';base64,'+this.record[field].raw_value;
        }elseif(placeholder&&(!model||!field||!id||(isCurrentRecord&&this.record[field]&&!this.record[field].raw_value))){
            url=placeholder;
        }else{
            varsession=this.getSession();
            varparams={
                model:model,
                field:field,
                id:id
            };
            if(isCurrentRecord){
                params.unique=this.record.__last_update&&this.record.__last_update.value.replace(/[^0-9]/g,'');
            }
            url=session.url('/web/image',params);
        }
        returnurl;
    },
    /**
     *Triggersupaneventtoopentherecord
     *
     *@private
     */
    _openRecord:function(){
        if(this.$el.hasClass('o_currently_dragged')){
            //thisrecordiscurrentlybeingdraggedanddropped,sowedonot
            //wanttoopenit.
            return;
        }
        vareditMode=this.$el.hasClass('oe_kanban_global_click_edit');
        this.trigger_up('open_record',{
            id:this.db_id,
            mode:editMode?'edit':'readonly',
        });
    },
    /**
     *Processeseach'field'tagandreplacesitbythespecifiedwidget,if
     *any,ordirectlybytheformattedvalue
     *
     *@private
     */
    _processFields:function(){
        varself=this;
        this.$("field").each(function(){
            var$field=$(this);
            varfield_name=$field.attr("name");
            varfield_widget=$field.attr("widget");

            //awidgetisspecifiedforthatfieldorafieldisamany2many;
            //inthislatestcase,wewanttodisplaythewidgetmany2manytags
            //evenifitisnotspecifiedintheview.
            if(field_widget||self.fields[field_name].type==='many2many'){
                varwidget=self.subWidgets[field_name];
                if(!widget){
                    //thewidgetdoesn'texistyet,soinstanciateit
                    varWidget=self.fieldsInfo[field_name].Widget;
                    if(Widget){
                        widget=self._processWidget($field,field_name,Widget);
                        self.subWidgets[field_name]=widget;
                    }elseif(config.isDebug()){
                        //thewidgetisnotimplemented
                        $field.replaceWith($('<span>',{
                            text:_.str.sprintf(_t('[Nowidget%s]'),field_widget),
                        }));
                    }
                }else{
                    //awidgetalreadyexistsforthatfield,soresetitwiththenewstate
                    widget.reset(self.state);
                    $field.replaceWith(widget.$el);
                    if(self.isInDOM&&widget.on_attach_callback){
                        widget.on_attach_callback();
                    }
                }
            }else{
                self._processField($field,field_name);
            }
        });
    },
    /**
     *Replaceafieldbyitsformattedvalue.
     *
     *@private
     *@param{JQuery}$field
     *@param{String}field_name
     *@returns{Jquery}themodifiednode
     */
    _processField:function($field,field_name){
        //nowidgetspecifiedforthatfield,sosimplyuseaformatter
        //note:wecouldhaveusedthewidgetcorrespondingtothefield'stype,but
        //itismuchmoreefficienttouseaformatter
        varfield=this.fields[field_name];
        varvalue=this.recordData[field_name];
        varoptions={data:this.recordData,forceString:true};
        varformatted_value=field_utils.format[field.type](value,field,options);
        var$result=$('<span>',{
            text:formatted_value,
        });
        $field.replaceWith($result);
        this._setFieldDisplay($result,field_name);
        return$result;
    },
    /**
     *Replaceafieldbyitscorrespondingwidget.
     *
     *@private
     *@param{JQuery}$field
     *@param{String}field_name
     *@param{Class}Widget
     *@returns{Widget}thewidgetinstance
     */
    _processWidget:function($field,field_name,Widget){
        //somefield'sattrsmightberecorddependent(theystartwith
        //'t-att-')andshouldthusbeevaluated,whichisdonebyqweb
        //weherereplacethoseattrsinthedictofattrsofthestate
        //bytheirevalutedvalue,tomakeittransparentfromthe
        //field'swidgetspointofview
        //thatdictbeingsharedbetweenrecords,wedon'tmodifyit
        //inplace
        varself=this;
        varattrs=Object.create(null);
        _.each(this.fieldsInfo[field_name],function(value,key){
            if(_.str.startsWith(key,'t-att-')){
                key=key.slice(6);
                value=$field.attr(key);
            }
            attrs[key]=value;
        });
        varoptions=_.extend({},this.options,{attrs:attrs});
        letwidget;
        letdef;
        if(utils.isComponent(Widget)){
            widget=newFieldWrapper(this,Widget,{
                fieldName:field_name,
                record:this.state,
                options:options,
            });
            def=widget.mount(document.createDocumentFragment())
                .then(()=>{
                    $field.replaceWith(widget.$el);
                });
        }else{
            widget=newWidget(this,field_name,this.state,options);
            def=widget.replace($field);
        }
        this.defs.push(def);
        def.then(function(){
            self._setFieldDisplay(widget.$el,field_name);
        });
        returnwidget;
    },
    _processWidgets:function(){
        varself=this;
        this.$("widget").each(function(){
            var$field=$(this);
            varWidget=widgetRegistry.get($field.attr('name'));
            varwidget=newWidget(self,self.state);

            vardef=widget._widgetRenderAndInsert(function(){});
            self.defs.push(def);
            def.then(function(){
                $field.replaceWith(widget.$el);
                widget.$el.addClass('o_widget');
            });
        });
    },
    /**
     *Renderstherecord
     *
     *@returns{Promise}
     */
    _render:function(){
        this.defs=[];
        //call'on_detach_callback'oneachsubwidgetastheywillberemoved
        //fromtheDOMatthenextline
        _.invoke(this.subWidgets,'on_detach_callback');
        this._replaceElement(this.qweb.render('kanban-box',this.qweb_context));
        this.$el.addClass('o_kanban_record').attr("tabindex",0);
        this.$el.attr('role','article');
        this.$el.data('record',this);
        //forcefullyaddclassoe_kanban_global_clicktohaveclickablerecordalwaystoselectit
        if(this.selectionMode){
            this.$el.addClass('oe_kanban_global_click');
        }
        if(this.$el.hasClass('oe_kanban_global_click')||
            this.$el.hasClass('oe_kanban_global_click_edit')){
            this.$el.on('click',this._onGlobalClick.bind(this));
            this.$el.on('keydown',this._onKeyDownCard.bind(this));
        }else{
            this.$el.on('keydown',this._onKeyDownOpenFirstLink.bind(this));
        }
        this._processFields();
        this._processWidgets();
        this._setupColor();
        this._setupColorPicker();
        this._attachTooltip();

        //Weuseboostraptooltipsforbetterandfasterdisplay
        this.$('span.o_tag').tooltip({delay:{'show':50}});

        returnPromise.all(this.defs);
    },
    /**
     *Setscoverimageonakanbancardthroughanattachmentdialog.
     *
     *@private
     *@param{string}fieldNamefieldusedtosetcoverimage
     *@param{boolean}autoOpenautomaticallyopenthefilechoseriftherearenoattachments
     */
    _setCoverImage:function(fieldName,autoOpen){
        varself=this;
        this._rpc({
            model:'ir.attachment',
            method:'search_read',
            domain:[
                ['res_model','=',this.modelName],
                ['res_id','=',this.id],
                ['mimetype','ilike','image']
            ],
            fields:['id','name'],
        }).then(function(attachmentIds){
            self.imageUploadID=_.uniqueId('o_cover_image_upload');
            self.accepted_file_extensions='image/*'; //preventuploadingofotherfiletypes
            self.attachment_count=attachmentIds.length;
            varcoverId=self.record[fieldName]&&self.record[fieldName].raw_value;
            var$content=$(QWeb.render('KanbanView.SetCoverModal',{
                coverId:coverId,
                attachmentIds:attachmentIds,
                widget:self,
            }));
            var$imgs=$content.find('.o_kanban_cover_image');
            vardialog=newDialog(self,{
                title:_t("SetaCoverImage"),
                $content:$content,
                buttons:[{
                    text:_t("Select"),
                    classes:attachmentIds.length?'btn-primary':'d-none',
                    close:true,
                    disabled:!coverId,
                    click:function(){
                        var$img=$imgs.filter('.o_selected').find('img');
                        vardata={};
                        data[fieldName]={
                            id:$img.data('id'),
                            display_name:$img.data('name')
                        };
                        self.trigger_up('kanban_record_update',data);
                    },
                },{
                    text:_t('UploadandSet'),
                    classes:attachmentIds.length?'':'btn-primary',
                    close:false,
                    click:function(){
                        $content.find('input.o_input_file').click();
                    },
                },{
                    text:_t("RemoveCoverImage"),
                    classes:coverId?'':'d-none',
                    close:true,
                    click:function(){
                        vardata={};
                        data[fieldName]=false;
                        self.trigger_up('kanban_record_update',data);
                    },
                },{
                    text:_t("Discard"),
                    close:true,
                }],
            });
            dialog.opened().then(function(){
                var$selectBtn=dialog.$footer.find('.btn-primary');
                if(autoOpen&&!self.attachment_count){
                    $selectBtn.click();
                }

                $content.on('click','.o_kanban_cover_image',function(ev){
                    $imgs.not(ev.currentTarget).removeClass('o_selected');
                    $selectBtn.prop('disabled',!$(ev.currentTarget).toggleClass('o_selected').hasClass('o_selected'));
                });

                $content.on('dblclick','.o_kanban_cover_image',function(ev){
                    var$img =$(ev.currentTarget).find('img');
                    vardata={};
                    data[fieldName]={
                        id:$img.data('id'),
                        display_name:$img.data('name')
                    };
                    self.trigger_up('kanban_record_update',data);
                    dialog.close();
                });
                $content.on('change','input.o_input_file',function(){
                    $content.find('form.o_form_binary_form').submit();
                });
                $(window).on(self.imageUploadID,function(){
                    varimages=Array.prototype.slice.call(arguments,1);
                    vardata={};
                    data[fieldName]={
                        id:images[0].id,
                        display_name:images[0].filename
                    };
                    self.trigger_up('kanban_record_update',data);
                    dialog.close();
                });
            });
            dialog.open();
        });
    },
    /**
     *Setsparticularclassnamesonafield$elaccordingtothe
     *field'sattrs(displayorboldattributes)
     *
     *@private
     *@param{JQuery}$el
     *@param{string}fieldName
     */
    _setFieldDisplay:function($el,fieldName){
        //attributedisplay
        if(this.fieldsInfo[fieldName].display==='right'){
            $el.addClass('float-right');
        }elseif(this.fieldsInfo[fieldName].display==='full'){
            $el.addClass('o_text_block');
        }

        //attributebold
        if(this.fieldsInfo[fieldName].bold){
            $el.addClass('o_text_bold');
        }
    },
    /**
     *Setsinternalvaluesofthekanbanrecordaccordingtothegivenstate
     *
     *@private
     *@param{Object}recordState
     */
    _setState:function(recordState){
        this.state=recordState;
        this.id=recordState.res_id;
        this.db_id=recordState.id;
        this.recordData=recordState.data;
        this.record=this._transformRecord(recordState.data);
        this.qweb_context={
            context:this.state.getContext(),
            kanban_image:this._getImageURL.bind(this),
            kanban_color:this._getColorClassname.bind(this),
            kanban_getcolor:this._getColorID.bind(this),
            kanban_getcolorname:this._getColorname.bind(this),
            kanban_compute_domain:this._computeDomain.bind(this),
            selection_mode:this.selectionMode,
            read_only_mode:this.read_only_mode,
            record:this.record,
            user_context:this.getSession().user_context,
            widget:this,
        };
    },
    /**
     *Ifanattribute`color`issetonthekanbanrecord,addsthe
     *correspondingcolorclassname.
     *
     *@private
     */
    _setupColor:function(){
        varcolor_field=this.$el.attr('color');
        if(color_field&&color_fieldinthis.fields){
            varcolorHelp=_.str.sprintf(_t("Cardcolor:%s"),this._getColorname(this.recordData[color_field]));
            varcolorClass=this._getColorClassname(this.recordData[color_field]);
            this.$el.addClass(colorClass);
            this.$el.prepend('<spantitle="'+colorHelp+'"aria-label="'+colorHelp+'"role="img"class="oe_kanban_color_help"/>');
        }
    },
    /**
     *Rendersthecolorpickerinthekanbanrecord,andbindstheeventhandler
     *
     *@private
     */
    _setupColorPicker:function(){
        var$colorpicker=this.$('ul.oe_kanban_colorpicker');
        if(!$colorpicker.length){
            return;
        }
        $colorpicker.html(QWeb.render('KanbanColorPicker',{colors:KANBAN_RECORD_COLORS}));
        $colorpicker.on('click','a',this._onColorChanged.bind(this));
    },
    /**
     *Buildsanobjectcontainingtheformattedrecorddatausedinthe
     *template
     *
     *@private
     *@param{Object}recordData
     *@returns{Object}transformedrecorddata
     */
    _transformRecord:function(recordData){
        varself=this;
        varnew_record={};
        _.each(this.state.getFieldNames(),function(name){
            varvalue=recordData[name];
            varr=_.clone(self.fields[name]||{});

            if((r.type==='date'||r.type==='datetime')&&value){
                r.raw_value=value.toDate();
            }elseif(r.type==='one2many'||r.type==='many2many'){
                r.raw_value=value.count?value.res_ids:[];
            }elseif(r.type==='many2one'){
                r.raw_value=value&&value.res_id||false;
            }else{
                r.raw_value=value;
            }

            if(r.type){
                varformatter=field_utils.format[r.type];
                r.value=formatter(value,self.fields[name],recordData,self.state);
            }else{
                r.value=value;
            }

            new_record[name]=r;
        });
        returnnew_record;
    },
    /**
     *Notifiesthecontrollerthattherecordhaschanged
     *
     *@private
     *@param{Object}datathenewvalues
     */
    _updateRecord:function(data){
        this.trigger_up('kanban_record_update',data);
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *@private
     *@param{MouseEvent}event
     */
    _onColorChanged:function(event){
        event.preventDefault();
        vardata={};
        varcolor_field=$(event.delegateTarget).data('field')||'color';
        data[color_field]=$(event.currentTarget).data('color');
        this.trigger_up('kanban_record_update',data);
    },
    /**
     *@private
     *@param{MouseEvent}event
     */
    _onGlobalClick:function(event){
        if($(event.target).parents('.o_dropdown_kanban').length){
            return;
        }
        vartrigger=true;
        varelem=event.target;
        varischild=true;
        varchildren=[];
        while(elem){
            varevents=$._data(elem,'events');
            if(elem===event.currentTarget){
                ischild=false;
            }
            vartest_event=events&&events.click&&(events.click.length>1||events.click[0].namespace!=='bs.tooltip');
            vartestLinkWithHref=elem.nodeName.toLowerCase()==='a'&&elem.href;
            if(ischild){
                children.push(elem);
                if(test_event||testLinkWithHref){
                    //Donottriggerglobalclickifonechildhasaclick
                    //eventregistered(oritisalinkwithhref)
                    trigger=false;
                }
            }
            if(trigger&&test_event){
                _.each(events.click,function(click_event){
                    if(click_event.selector){
                        //Foreachparentoforiginaltarget,checkifa
                        //delegatedclickisboundtoanypreviouslyfoundchildren
                        _.each(children,function(child){
                            if($(child).is(click_event.selector)){
                                trigger=false;
                            }
                        });
                    }
                });
            }
            elem=elem.parentElement;
        }
        if(trigger){
            this._openRecord();
        }
    },
    /**
     *@private
     *@param{MouseEvent}event
     */
    _onKanbanActionClicked:function(event){
        event.preventDefault();

        var$action=$(event.currentTarget);
        vartype=$action.data('type')||'button';

        switch(type){
            case'edit':
                this.trigger_up('open_record',{id:this.db_id,mode:'edit'});
                break;
            case'open':
                this.trigger_up('open_record',{id:this.db_id});
                break;
            case'delete':
                this.trigger_up('kanban_record_delete',{id:this.db_id,record:this});
                break;
            case'action':
            case'object':
                varattrs=$action.data();
                attrs.confirm=$action.attr('confirm');
                this.trigger_up('button_clicked',{
                    attrs:attrs,
                    record:this.state,
                });
                break;
            case'set_cover':
                varfieldName=$action.data('field');
                varautoOpen=$action.data('auto-open');
                if(this.fields[fieldName].type==='many2one'&&
                    this.fields[fieldName].relation==='ir.attachment'&&
                    this.fieldsInfo[fieldName].widget==='attachment_image'){
                    this._setCoverImage(fieldName,autoOpen);
                }else{
                    varwarning=_.str.sprintf(_t('Couldnotsetthecoverimage:incorrectfield("%s")isprovidedintheview.'),fieldName);
                    this.do_warn(warning);
                }
                break;
            default:
                this.do_warn(false,_t("Kanban:noactionfortype:")+type);
        }
    },
    /**
     *Thiseventislinkedtothekanbancardwhenthereisaglobal_click
     *classonthiscard
     *
     *@private
     *@param{KeyDownEvent}event
     */
    _onKeyDownCard:function(event){
        switch(event.keyCode){
            case$.ui.keyCode.ENTER:
                if($(event.target).hasClass('oe_kanban_global_click')){
                    event.preventDefault();
                    this._onGlobalClick(event);
                    break;
                }
        }
    },
    /**
     *Thiseventislinkedotthekanbancardwhenthereisnoglobal_click
     *classonthecard
     *
     *@private
     *@param{KeyDownEvent}event
     */
    _onKeyDownOpenFirstLink:function(event){
        switch(event.keyCode){
            case$.ui.keyCode.ENTER:
                event.preventDefault();
                $(event.target).find('a,button').first().click();
                break;
        }
    },
    /**
     *Togglestheconfigurationpaneloftherecord
     *
     *@private
     *@param{MouseEvent}event
     */
    _onManageTogglerClicked:function(event){
        event.preventDefault();
        this.$el.parent().find('.o_kanban_record').not(this.$el).removeClass('o_dropdown_open');
        this.$el.toggleClass('o_dropdown_open');
        varcolorClass=this._getColorClassname(this.recordData.color||0);
        this.$('.o_kanban_manage_button_section').toggleClass(colorClass);
    },
});

returnKanbanRecord;

});
