flectra.define('web.kanban_record_quick_create',function(require){
"usestrict";

/**
 *ThisfiledefinestheRecordQuickCreatewidgetforKanban.Itallowsto
 *createkanbanrecordsdirectlyfromtheKanbanview.
 */

varcore=require('web.core');
varQuickCreateFormView=require('web.QuickCreateFormView');
constsession=require('web.session');
varWidget=require('web.Widget');

varRecordQuickCreate=Widget.extend({
    className:'o_kanban_quick_create',
    custom_events:{
        add:'_onAdd',
        cancel:'_onCancel',
    },
    events:{
        'click.o_kanban_add':'_onAddClicked',
        'click.o_kanban_edit':'_onEditClicked',
        'click.o_kanban_cancel':'_onCancelClicked',
        'mousedown':'_onMouseDown',
    },
    mouseDownInside:false,

    /**
     *@override
     *@param{Widget}parent
     *@param{Object}options
     *@param{Object}options.context
     *@param{string|null}options.formViewRef
     *@param{string}options.model
     */
    init:function(parent,options){
        this._super.apply(this,arguments);
        this.context=options.context;
        this.formViewRef=options.formViewRef;
        this.model=options.model;
        this._disabled=false;//topreventfromcreatingmultiplerecords(e.g.ondouble-clicks)
    },
    /**
     *LoadstheformfieldsView(ifnotprovided),instantiatestheformview
     *andstartstheformcontroller.
     *
     *@override
     */
    willStart:function(){
        varself=this;
        varsuperWillStart=this._super.apply(this,arguments);
        varviewsLoaded;
        if(this.formViewRef){
            varviews=[[false,'form']];
            varcontext=_.extend({},this.context,{
                form_view_ref:this.formViewRef,
            });
            viewsLoaded=this.loadViews(this.model,context,views);
        }else{
            varfieldsView={};
            fieldsView.arch='<form>'+
                '<fieldname="display_name"placeholder="Title"modifiers=\'{"required":true}\'/>'+
            '</form>';
            varfields={
                display_name:{string:'Displayname',type:'char'},
            };
            fieldsView.fields=fields;
            fieldsView.viewFields=fields;
            viewsLoaded=Promise.resolve({form:fieldsView});
        }
        viewsLoaded=viewsLoaded.then(function(fieldsViews){
            varformView=newQuickCreateFormView(fieldsViews.form,{
                context:self.context,
                modelName:self.model,
                userContext:session.user_context,
            });
            returnformView.getController(self).then(function(controller){
                self.controller=controller;
                returnself.controller.appendTo(document.createDocumentFragment());
            });
        });
        returnPromise.all([superWillStart,viewsLoaded]);
    },
    /**
     *@override
     */
    start:function(){
        this.$el.append(this.controller.$el);
        this.controller.renderButtons(this.$el);

        //focusthefirstfield
        this.controller.autofocus();

        //destroythequickcreatewhentheuserclicksoutside
        core.bus.on('click',this,this._onWindowClicked);

        returnthis._super.apply(this,arguments);
    },
    /**
     *CalledwhenthequickcreateisappendedintotheDOM.
     */
    on_attach_callback:function(){
        if(this.controller){
            this.controller.autofocus();
        }
    },

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *Cancelsthequickcreationiftherecordisn'tdirty,i.e.ifnochanges
     *havebeenmadeyet
     *
     *@private
     *@returns{Promise}
     */
    cancel:function(){
        varself=this;
        returnthis.controller.commitChanges().then(function(){
            if(!self.controller.isDirty()){
                self._cancel();
            }
        });
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *@private
     *@param{Object}[options]
     *@param{boolean}[options.openRecord]settotruetodirectlyopenthe
     *  newlycreatedrecordinaformview(ineditmode)
     */
    _add:function(options){
        varself=this;
        if(this._disabled){
            //don'tdoanythingifwearealreadycreatingarecord
            return;
        }
        //disablethewidgettopreventtheuserfromcreatingmultiplerecords
        //withthecurrentvalues;ifthecreateworks,thewidgetwillbe
        //destroyedandanotheronewillbeinstantiated,sothereisnoneed
        //tore-enableitinthatcase
        this._disableQuickCreate();
        this.controller.commitChanges().then(function(){
            varcanBeSaved=self.controller.canBeSaved();
            if(canBeSaved){
                self.trigger_up('quick_create_add_record',{
                    openRecord:options&&options.openRecord||false,
                    values:self.controller.getChanges(),
                    onFailure:self._enableQuickCreate.bind(self),
                });
            }else{
                self._enableQuickCreate();
            }
        }).guardedCatch(this._enableQuickCreate.bind(this));
    },
    /**
     *Notifiestheenvironmentthatthequickcreationmustbecancelled
     *
     *@private
     *@returns{Promise}
     */
    _cancel:function(){
        this.trigger_up('cancel_quick_create');
    },
    /**
     *Disablethewidgettoindicatetheuserthatitcan'tinteractwithit.
     *Thisfunctionmustbecalledwhenarecordisbeingcreated,toprevent
     *itfrombeingcreatedtwice.
     *
     *Notethatiftherecordcreationworksasexpected,thereisnoneedto
     *re-enablethewidgetasitwillbedestroyedanyway(andreplacedbya
     *newinstance).
     *
     *@private
     */
    _disableQuickCreate:function(){
        this._disabled=true;//ensuresthattherecordwon'tbecreatedtwice
        this.$el.addClass('o_disabled');
        this.$('input:not(:disabled)')
            .addClass('o_temporarily_disabled')
            .attr('disabled','disabled');
    },
    /**
     *Re-enablethewidgettoallowtheusertocreateagain.
     *
     *@private
     */
    _enableQuickCreate:function(){
        this._disabled=false;//allowstocreateagain
        this.$el.removeClass('o_disabled');
        this.$('input.o_temporarily_disabled')
            .removeClass('o_temporarily_disabled')
            .attr('disabled',false);
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *@private
     *@param{FlectraEvent}ev
     */
    _onAdd:function(ev){
        ev.stopPropagation();
        this._add();
    },
    /**
     *@private
     *@param{MouseEvent}ev
     */
    _onAddClicked:function(ev){
        ev.stopPropagation();
        this._add();
    },
    /**
     *@private
     *@param{FlectraEvent}ev
     */
    _onCancel:function(ev){
        ev.stopPropagation();
        this._cancel();
    },
    /**
     *@private
     *@param{MouseEvent}ev
     */
    _onCancelClicked:function(ev){
        ev.stopPropagation();
        this._cancel();
    },
    /**
     *Validatesthequickcreationanddirectlyopenstherecordinaform
     *viewineditmode.
     *
     *@private
     *@param{MouseEvent}ev
     */
    _onEditClicked:function(ev){
        ev.stopPropagation();
        this._add({openRecord:true});
    },
    /**
     *Whenaclickhappensoutsidethequickcreate,wewanttoclosethequick
     *create.
     *
     *Thisisquitetricky,becauseinsomecasesaclickisperformedoutside
     *thequickcreate,butisstillrelatedtoit(e.g.clickinadialog
     *openedfromthequickcreate).
     *
     *@param{MouseEvent}ev
     */
    _onWindowClicked:function(ev){
        varmouseDownInside=this.mouseDownInside;

        this.mouseDownInside=false;
        //ignoreclicksifthequickcreateisnotinthedom
        if(!document.contains(this.el)){
            return;
        }

        //ignoreclicksonelementsthatopenthequickcreatewidget,to
        //preventfromclosingquickcreatewidgetthathasjustbeenopened
        if($(ev.target).closest('.o-kanban-button-new,.o_kanban_quick_add').length){
            return;
        }

        //ignoreclicksinautocompletedropdowns
        if($(ev.target).parents('.ui-autocomplete').length){
            return;
        }

        //ignoreclicksinmodals
        if($(ev.target).closest('.modal').length){
            return;
        }

        //ignoreclickswhileamodalisjustabouttoopen
        if($(document.body).hasClass('modal-open')){
            return;
        }

        //ignoreclicksiftargetisnolongerindom(e.g.,aclickonthe
        //'delete'trashiconofam2mtag)
        if(!document.contains(ev.target)){
            return;
        }

        //ignoreclicksiftargetisinsidethequickcreate
        if(this.el.contains(ev.target)||this.el===ev.target||mouseDownInside){
            return;
        }

        this.cancel();
    },
    /**
     *Detectsiftheclickisoriginallyfromthequickcreate
     *
     *@private
     *@param{MouseEvent}ev
     */
    _onMouseDown:function(ev){
        this.mouseDownInside=true;
    }
});

returnRecordQuickCreate;

});
