flectra.define('web.KanbanColumn',function(require){
"usestrict";

varconfig=require('web.config');
varcore=require('web.core');
varsession=require('web.session');
varDialog=require('web.Dialog');
varKanbanRecord=require('web.KanbanRecord');
varRecordQuickCreate=require('web.kanban_record_quick_create');
varview_dialogs=require('web.view_dialogs');
varviewUtils=require('web.viewUtils');
varWidget=require('web.Widget');
varKanbanColumnProgressBar=require('web.KanbanColumnProgressBar');

var_t=core._t;
varQWeb=core.qweb;

varKanbanColumn=Widget.extend({
    template:'KanbanView.Group',
    custom_events:{
        cancel_quick_create:'_onCancelQuickCreate',
        quick_create_add_record:'_onQuickCreateAddRecord',
        tweak_column:'_onTweakColumn',
        tweak_column_records:'_onTweakColumnRecords',
    },
    events:{
        'click.o_column_edit':'_onEditColumn',
        'click.o_column_delete':'_onDeleteColumn',
        'click.o_kanban_quick_add':'_onAddQuickCreate',
        'click.o_kanban_load_more':'_onLoadMore',
        'click.o_kanban_toggle_fold':'_onToggleFold',
        'click.o_column_archive_records':'_onArchiveRecords',
        'click.o_column_unarchive_records':'_onUnarchiveRecords',
        'click.o_kanban_config.dropdown-menu':'_onConfigDropdownClicked',
    },
    /**
     *@override
     */
    init:function(parent,data,options,recordOptions){
        this._super(parent);
        this.db_id=data.id;
        this.data_records=data.data;
        this.data=data;

        varvalue=data.value;
        this.id=data.res_id;
        this.folded=!data.isOpen;
        this.has_active_field='active'indata.fields;
        this.fields=data.fields;
        this.records=[];
        this.modelName=data.model;

        this.quick_create=options.quick_create;
        this.quickCreateView=options.quickCreateView;
        this.groupedBy=options.groupedBy;
        this.grouped_by_m2o=options.grouped_by_m2o;
        this.editable=options.editable;
        this.deletable=options.deletable;
        this.archivable=options.archivable;
        this.draggable=options.draggable;
        this.KanbanRecord=options.KanbanRecord||KanbanRecord;//theKanbanRecordclasstouse
        this.records_editable=options.records_editable;
        this.records_deletable=options.records_deletable;
        this.recordsDraggable=options.recordsDraggable;
        this.relation=options.relation;
        this.offset=0;
        this.remaining=data.count-this.data_records.length;
        this.canBeFolded=this.folded;

        if(options.hasProgressBar){
            this.barOptions={
                columnID:this.db_id,
                progressBarStates:options.progressBarStates,
            };
        }

        this.record_options=_.clone(recordOptions);

        if(options.grouped_by_m2o||options.grouped_by_date){
            //Formany2oneanddatetime,afalsevaluemeansthatthefieldisnotset.
            this.title=value?value:_t('Undefined');
        }else{
            //Falseand0mightbevalidvaluesforthesefields.
            this.title=value===undefined?_t('Undefined'):value;
        }

        if(options.group_by_tooltip){
            this.tooltipInfo=_.compact(_.map(options.group_by_tooltip,function(help,field){
                help=help?help+"</br>":'';
                return(data.tooltipData&&data.tooltipData[field]&&"<div>"+help+data.tooltipData[field]+"</div>")||'';
            }));
            this.tooltipInfo=this.tooltipInfo.join("<divclass='dropdown-divider'role='separator'/>");
        }
    },
    /**
     *@override
     */
    start:function(){
        varself=this;
        vardefs=[this._super.apply(this,arguments)];
        this.$header=this.$('.o_kanban_header');

        for(vari=0;i<this.data_records.length;i++){
            defs.push(this._addRecord(this.data_records[i]));
        }

        if(this.recordsDraggable){
            this.$el.sortable({
                connectWith:'.o_kanban_group',
                containment:this.draggable?false:'parent',
                revert:0,
                delay:0,
                items:'>.o_kanban_record:not(.o_updating)',
                cursor:'move',
                over:function(){
                    self.$el.addClass('o_kanban_hover');
                },
                out:function(){
                    self.$el.removeClass('o_kanban_hover');
                },
                start:function(event,ui){
                    ui.item.addClass('o_currently_dragged');
                },
                stop:function(event,ui){
                    varitem=ui.item;
                    setTimeout(function(){
                        item.removeClass('o_currently_dragged');
                    });
                },
                update:function(event,ui){
                    varrecord=ui.item.data('record');
                    varindex=self.records.indexOf(record);
                    record.$el.removeAttr('style'); //jqueryuisortableadddisplay:blockinline
                    if(index>=0){
                        if($.contains(self.$el[0],record.$el[0])){
                            //resequencingrecords
                            self.trigger_up('kanban_column_resequence',{ids:self._getIDs()});
                        }
                    }else{
                        //addingrecordtothiscolumn
                        ui.item.addClass('o_updating');
                        self.trigger_up('kanban_column_add_record',{record:record,ids:self._getIDs()});
                    }
                }
            });
        }
        this.$el.click(function(event){
            if(self.folded){
                self._onToggleFold(event);
            }
        });
        if(this.barOptions){
            this.$el.addClass('o_kanban_has_progressbar');
            this.progressBar=newKanbanColumnProgressBar(this,this.barOptions,this.data);
            defs.push(this.progressBar.appendTo(this.$header));
        }

        vartitle=this.folded?this.title+'('+this.data.count+')':this.title;
        this.$header.find('.o_column_title').text(title);

        this.$el.toggleClass('o_column_folded',this.canBeFolded);
        if(this.tooltipInfo){
            this.$header.find('.o_kanban_header_title').tooltip({}).attr('data-original-title',this.tooltipInfo);
        }
        if(!this.remaining){
            this.$('.o_kanban_load_more').remove();
        }else{
            this.$('.o_kanban_load_more').html(QWeb.render('KanbanView.LoadMore',{widget:this}));
        }

        returnPromise.all(defs);
    },
    /**
     *Calledwhenarecordhasbeenquickcreated,asanewcolumnisrendered
     *andappendedintoafragment,beforereplacingtheoldcolumnintheDOM.
     *Whenthishappens,thequickcreatewidgetisinsertedintothenew
     *columndirectly,anditshouldbefocused.However,asitisrendered
     *intoafragment,thefocushastobesetmanuallyonceintheDOM.
     */
    on_attach_callback:function(){
        _.invoke(this.records,'on_attach_callback');
        if(this.quickCreateWidget){
            this.quickCreateWidget.on_attach_callback();
        }
    },

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *Addsthequickcreaterecordtothetopofthecolumn.
     *
     *@returns{Promise}
     */
    addQuickCreate:asyncfunction(){
        if(this.folded){
            //firstopenthecolumn,andthenaddthequickcreate
            this.trigger_up('column_toggle_fold',{
                openQuickCreate:true,
            });
            return;
        }

        if(this.quickCreateWidget){
            returnPromise.reject();
        }
        this.trigger_up('close_quick_create');//closeotherquickcreatewidgets
        varcontext=this.data.getContext();
        context['default_'+this.groupedBy]=viewUtils.getGroupValue(this.data,this.groupedBy);
        this.quickCreateWidget=newRecordQuickCreate(this,{
            context:context,
            formViewRef:this.quickCreateView,
            model:this.modelName,
        });
        awaitthis.quickCreateWidget.appendTo(document.createDocumentFragment());
        this.trigger_up('start_quick_create');
        this.quickCreateWidget.$el.insertAfter(this.$header);
        this.quickCreateWidget.on_attach_callback();
    },
    /**
     *Closesthequickcreatewidgetifitisn'tdirty.
     */
    cancelQuickCreate:function(){
        if(this.quickCreateWidget){
            this.quickCreateWidget.cancel();
        }
    },
    /**
     *@returns{Boolean}trueiffthecolumnisempty
     */
    isEmpty:function(){
        return!this.records.length;
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *Addsarecordinthecolumn.
     *
     *@private
     *@param{Object}recordState
     *@param{Object}[options]
     *@param{string}[options.position]
     *       'before'toaddatthetop,addatthebottombydefault
     *@return{Promise}
     */
    _addRecord:function(recordState,options){
        varrecord=newthis.KanbanRecord(this,recordState,this.record_options);
        this.records.push(record);
        if(options&&options.position==='before'){
            returnrecord.insertAfter(this.quickCreateWidget?this.quickCreateWidget.$el:this.$header);
        }else{
            var$load_more=this.$('.o_kanban_load_more');
            if($load_more.length){
                returnrecord.insertBefore($load_more);
            }else{
                returnrecord.appendTo(this.$el);
            }
        }
    },
    /**
     *DestroystheQuickCreatewidget.
     *
     *@private
     */
    _cancelQuickCreate:function(){
        this.quickCreateWidget.destroy();
        this.quickCreateWidget=undefined;
    },
    /**
     *@returns{integer[]}theres_idsoftherecordsinthecolumn
     */
    _getIDs:function(){
        varids=[];
        this.$('.o_kanban_record').each(function(index,r){
            ids.push($(r).data('record').id);
        });
        returnids;
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *@private
     */
    _onAddQuickCreate:function(){
        this.trigger_up('add_quick_create',{groupId:this.db_id});
    },
    /**
     *@private
     */
    _onCancelQuickCreate:function(){
        this._cancelQuickCreate();
    },
    /**
     *Preventfromclosingtheconfigdropdownwhentheuserclicksona
     *disableditem(e.g.'Fold'insamplemode).
     *
     *@private
     */
    _onConfigDropdownClicked(ev){
        ev.stopPropagation();
    },
    /**
     *@private
     *@param{MouseEvent}event
     */
    _onDeleteColumn:function(event){
        event.preventDefault();
        varbuttons=[
            {
                text:_t("Ok"),
                classes:'btn-primary',
                close:true,
                click:this.trigger_up.bind(this,'kanban_column_delete'),
            },
            {text:_t("Cancel"),close:true}
        ];
        newDialog(this,{
            size:'medium',
            buttons:buttons,
            $content:$('<div>',{
                text:_t("Areyousurethatyouwanttoremovethiscolumn?")
            }),
        }).open();
    },
    /**
     *@private
     *@param{MouseEvent}event
     */
    _onEditColumn:function(event){
        event.preventDefault();
        newview_dialogs.FormViewDialog(this,{
            res_model:this.relation,
            res_id:this.id,
            context:session.user_context,
            title:_t("EditColumn"),
            on_saved:this.trigger_up.bind(this,'reload'),
        }).open();
    },
    /**
     *@private
     *@param{MouseEvent}event
     */
    _onLoadMore:function(event){
        event.preventDefault();
        this.trigger_up('kanban_load_more');
    },
    /**
     *@private
     *@param{FlectraEvent}event
     */
    _onQuickCreateAddRecord:function(event){
        this.trigger_up('quick_create_record',event.data);
    },
    /**
     *@private
     *@param{MouseEvent}event
     */
    _onToggleFold:function(event){
        event.preventDefault();
        this.trigger_up('column_toggle_fold');
    },
    /**
     *@private
     *@param{FlectraEvent}ev
     */
    _onTweakColumn:function(ev){
        ev.data.callback(this.$el);
    },
    /**
     *@private
     *@param{FlectraEvent}ev
     */
    _onTweakColumnRecords:function(ev){
        _.each(this.records,function(record){
            ev.data.callback(record.$el,record.state.data);
        });
    },
    /**
     *@private
     *@param{MouseEvent}event
     */
    _onArchiveRecords:function(event){
        event.preventDefault();
        Dialog.confirm(this,_t("Areyousurethatyouwanttoarchivealltherecordsfromthiscolumn?"),{
            confirm_callback:this.trigger_up.bind(this,'kanban_column_records_toggle_active',{
                archive:true,
            }),
        });
    },
    /**
     *@private
     *@param{MouseEvent}event
     */
    _onUnarchiveRecords:function(event){
        event.preventDefault();
        this.trigger_up('kanban_column_records_toggle_active',{
            archive:false,
        });
    }
});

returnKanbanColumn;

});
