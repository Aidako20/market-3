flectra.define('web.KanbanController',function(require){
"usestrict";

/**
 *TheKanbanControlleristheclassthatcoordinatesthekanbanmodelandthe
 *kanbanrenderer. Italsomakessurethatupdatefromthesearchvieware
 *properlyinterpreted.
 */

varBasicController=require('web.BasicController');
varContext=require('web.Context');
varcore=require('web.core');
varDialog=require('web.Dialog');
varDomain=require('web.Domain');
varview_dialogs=require('web.view_dialogs');
varviewUtils=require('web.viewUtils');

var_t=core._t;
varqweb=core.qweb;

varKanbanController=BasicController.extend({
    buttons_template:'KanbanView.buttons',
    custom_events:_.extend({},BasicController.prototype.custom_events,{
        add_quick_create:'_onAddQuickCreate',
        quick_create_add_column:'_onAddColumn',
        quick_create_record:'_onQuickCreateRecord',
        resequence_columns:'_onResequenceColumn',
        button_clicked:'_onButtonClicked',
        kanban_record_delete:'_onRecordDelete',
        kanban_record_update:'_onUpdateRecord',
        kanban_column_delete:'_onDeleteColumn',
        kanban_column_add_record:'_onAddRecordToColumn',
        kanban_column_resequence:'_onColumnResequence',
        kanban_load_more:'_onLoadMore',
        column_toggle_fold:'_onToggleColumn',
        kanban_column_records_toggle_active:'_onToggleActiveRecords',
    }),
    /**
     *@override
     *@param{Object}params
     *@param{boolean}params.quickCreateEnabledsettofalsetodisablethe
     *  quickcreatefeature
     *@param{SearchPanel}[params.searchPanel]
     *@param{Array[]}[params.controlPanelDomain=[]]initialdomaincoming
     *  fromthecontrolPanel
     */
    init:function(parent,model,renderer,params){
        this._super.apply(this,arguments);
        this.on_create=params.on_create;
        this.hasButtons=params.hasButtons;
        this.quickCreateEnabled=params.quickCreateEnabled;
    },

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *@param{jQuery}[$node]
     */
    renderButtons:function($node){
        if(!this.hasButtons||!this.is_action_enabled('create')){
            return;
        }
        this.$buttons=$(qweb.render(this.buttons_template,{
            btnClass:'btn-primary',
            widget:this,
        }));
        this.$buttons.on('click','button.o-kanban-button-new',this._onButtonNew.bind(this));
        this.$buttons.on('keydown',this._onButtonsKeyDown.bind(this));
        if($node){
            this.$buttons.appendTo($node);
        }
    },
    /**
     *Ingroupedmode,set'Create'buttonasbtn-secondaryifthereisnocolumn
     *(exceptifwecan'tcreatenewcolumns)
     *
     *@override
     */
    updateButtons:function(){
        if(!this.$buttons){
            return;
        }
        varstate=this.model.get(this.handle,{raw:true});
        varcreateHidden=this.is_action_enabled('group_create')&&state.isGroupedByM2ONoColumn;
        this.$buttons.find('.o-kanban-button-new').toggleClass('o_hidden',createHidden);
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *Displaystherecordquickcreatewidgetintherequestedcolumn,givenits
     *id(inthefirstcolumnbydefault).Ensuresthatweremovedsampledata
     *ifany,beforedisplayingthequickcreate.
     *
     *@private
     *@param{string}[groupId]
     */
    _addQuickCreate(groupId){
        this._removeSampleData(async()=>{
            awaitthis.update({shouldUpdateSearchComponents:false},{reload:false});
            returnthis.renderer.addQuickCreate(groupId);
        });
    },
    /**
     *@overridemethodcomesfromfieldmanagermixin
     *@private
     *@param{string}idlocalidfromthebasicrecorddata
     *@returns{Promise}
     */
    _confirmSave:function(id){
        vardata=this.model.get(this.handle,{raw:true});
        vargrouped=data.groupedBy.length;
        if(grouped){
            varcolumnState=this.model.getColumn(id);
            returnthis.renderer.updateColumn(columnState.id,columnState);
        }
        returnthis.renderer.updateRecord(this.model.get(id));
    },
    /**
     *Onlydisplaythepagerintheungroupedcase,withdata.
     *
     *@override
     *@private
     */
    _getPagingInfo:function(state){
        if(!(state.count&&!state.groupedBy.length)){
            returnnull;
        }
        returnthis._super(...arguments);
    },
    /**
     *@private
     *@param{Widget}kanbanRecord
     *@param{Object}params
     */
    _reloadAfterButtonClick:function(kanbanRecord,params){
        varself=this;
        varrecordModel=this.model.localData[params.record.id];
        vargroup=this.model.localData[recordModel.parentID];
        varparent=this.model.localData[group.parentID];

        this.model.reload(params.record.id).then(function(db_id){
            vardata=self.model.get(db_id);
            kanbanRecord.update(data);

            //Checkifwestillneedtodisplaytherecord.Somefieldsofthedomainare
            //notguaranteedtobeindata.Thisisforexamplethecaseiftheaction
            //containsadomainonafieldwhichisnotintheKanbanview.Therefore,
            //weneedtohandlemultiplecasesbasedon3variables:
            //domInData:alldomainfieldsareinthedata
            //activeInDomain:'active'isalreadyinthedomain
            //activeInData:'active'isavailableinthedata

            vardomain=(parent?parent.domain:group.domain)||[];
            vardomInData=_.every(domain,function(d){
                returnd[0]indata.data;
            });
            varactiveInDomain=_.pluck(domain,0).indexOf('active')!==-1;
            varactiveInData='active'indata.data;

            //Case#|domInData|activeInDomain|activeInData
            //  1   |  true   |     true     |     true    =>nodomainchange
            //  2   |  true   |     true     |     false   =>notpossible
            //  3   |  true   |     false    |     true    =>addactiveindomain
            //  4   |  true   |     false    |     false   =>nodomainchange
            //  5   |  false  |     true     |     true    =>noevaluation
            //  6   |  false  |     true     |     false   =>noevaluation
            //  7   |  false  |     false    |     true    =>replacedomain
            //  8   |  false  |     false    |     false   =>noevaluation

            //Thereare3caseswhichcannotbeevaluatedsincewedon'thaveallthe
            //necessaryinformation.ThecompletesolutionwouldbetoperformaRPCin
            //thesecases,butthisisoutofscope.Asimpleroneistodoatry/catch.

            if(domInData&&!activeInDomain&&activeInData){
                domain=domain.concat([['active','=',true]]);
            }elseif(!domInData&&!activeInDomain&&activeInData){
                domain=[['active','=',true]];
            }
            try{
                varvisible=newDomain(domain).compute(data.evalContext);
            }catch(e){
                return;
            }
            if(!visible){
                kanbanRecord.destroy();
            }
        });
    },
    /**
     *@param{number[]}ids
     *@private
     *@returns{Promise}
     */
    _resequenceColumns:function(ids){
        varstate=this.model.get(this.handle,{raw:true});
        varmodel=state.fields[state.groupedBy[0]].relation;
        returnthis.model.resequence(model,ids,this.handle);
    },
    /**
     *Thismethodcallstheservertoaskforaresequence. Notethatthis
     *doesnotrerendertheuserinterface,becauseinmostcase,the
     *resequencingoperationhasalreadybeendisplayedbytherenderer.
     *
     *@private
     *@param{string}column_id
     *@param{string[]}ids
     *@returns{Promise}
     */
    _resequenceRecords:function(column_id,ids){
        varself=this;
        returnthis.model.resequence(this.modelName,ids,column_id);
    },
    /**
     *@override
     */
    _shouldBounceOnClick(element){
        conststate=this.model.get(this.handle,{raw:true});
        if(!state.count||state.isSample){
            constclassesList=[
                'o_kanban_view',
                'o_kanban_group',
                'o_kanban_header',
                'o_column_quick_create',
                'o_view_nocontent_smiling_face',
            ];
            returnclassesList.some(c=>element.classList.contains(c));
        }
        returnfalse;
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *Thishandleriscalledwhenanevent(fromthequickcreateaddcolumn)
     *eventbubblesup.Whenthathappens,weneedtoaskthemodeltocreate
     *agroupandtoupdatetherenderer
     *
     *@private
     *@param{FlectraEvent}ev
     */
    _onAddColumn:function(ev){
        varself=this;
        this.mutex.exec(function(){
            returnself.model.createGroup(ev.data.value,self.handle).then(function(){
                varstate=self.model.get(self.handle,{raw:true});
                varids=_.pluck(state.data,'res_id').filter(_.isNumber);
                returnself._resequenceColumns(ids);
            }).then(function(){
                returnself.update({},{reload:false});
            }).then(function(){
                letquickCreateFolded=self.renderer.quickCreate.folded;
                if(ev.data.foldQuickCreate?!quickCreateFolded:quickCreateFolded){
                    self.renderer.quickCreateToggleFold();
                }
                self.renderer.trigger_up("quick_create_column_created");
            });
        });
    },
    /**
     *@private
     *@param{FlectraEvent}ev
     */
    _onAddRecordToColumn:function(ev){
        varself=this;
        varrecord=ev.data.record;
        varcolumn=ev.target;
        this.alive(this.model.moveRecord(record.db_id,column.db_id,this.handle))
            .then(function(column_db_ids){
                returnself._resequenceRecords(column.db_id,ev.data.ids)
                    .then(function(){
                        _.each(column_db_ids,function(db_id){
                            vardata=self.model.get(db_id);
                            self.renderer.updateColumn(db_id,data);
                        });
                    });
            }).guardedCatch(this.reload.bind(this));
    },
    /**
     *@private
     *@param{FlectraEvent}ev
     *@returns{string}ev.data.groupId
     */
    _onAddQuickCreate(ev){
        ev.stopPropagation();
        this._addQuickCreate(ev.data.groupId);
    },
    /**
     *@private
     *@param{FlectraEvent}ev
     */
    _onButtonClicked:function(ev){
        varself=this;
        ev.stopPropagation();
        varattrs=ev.data.attrs;
        varrecord=ev.data.record;
        vardef=Promise.resolve();
        if(attrs.context){
            attrs.context=newContext(attrs.context)
                .set_eval_context({
                    active_id:record.res_id,
                    active_ids:[record.res_id],
                    active_model:record.model,
                });
        }
        if(attrs.confirm){
            def=newPromise(function(resolve,reject){
                Dialog.confirm(this,attrs.confirm,{
                    confirm_callback:resolve,
                    cancel_callback:reject,
                }).on("closed",null,reject);
            });
        }
        def.then(function(){
            self.trigger_up('execute_action',{
                action_data:attrs,
                env:{
                    context:record.getContext(),
                    currentID:record.res_id,
                    model:record.model,
                    resIDs:record.res_ids,
                },
                on_closed:self._reloadAfterButtonClick.bind(self,ev.target,ev.data),
            });
        });
    },
    /**
     *@private
     */
    _onButtonNew:function(){
        varstate=this.model.get(this.handle,{raw:true});
        varquickCreateEnabled=this.quickCreateEnabled&&viewUtils.isQuickCreateEnabled(state);
        if(this.on_create==='quick_create'&&quickCreateEnabled&&state.data.length){
            //activatethequickcreateinthefirstcolumnwhenthemutexis
            //unlocked,toensurethatthereisnopendingre-renderingthat
            //wouldremoveit(e.g.ifwearecurrentlyaddinganewcolumn)
            this.mutex.getUnlockedDef().then(this._addQuickCreate.bind(this,null));
        }elseif(this.on_create&&this.on_create!=='quick_create'){
            //Executethegivenaction
            this.do_action(this.on_create,{
                on_close:this.reload.bind(this,{}),
                additional_context:state.context,
            });
        }else{
            //Opentheformview
            this.trigger_up('switch_view',{
                view_type:'form',
                res_id:undefined
            });
        }
    },
    /**
     *Movesthefocusfromthecontrollerbuttonstothefirstkanbanrecord
     *
     *@private
     *@param{jQueryEvent}ev
     */
    _onButtonsKeyDown:function(ev){
        switch(ev.keyCode){
            case$.ui.keyCode.DOWN:
                this._giveFocus();
        }
    },
    /**
     *@private
     *@param{FlectraEvent}ev
     */
    _onColumnResequence:function(ev){
        this._resequenceRecords(ev.target.db_id,ev.data.ids);
    },
    /**
     *@private
     *@param{FlectraEvent}ev
     */
    _onDeleteColumn:function(ev){
        varcolumn=ev.target;
        varstate=this.model.get(this.handle,{raw:true});
        varrelatedModelName=state.fields[state.groupedBy[0]].relation;
        this.model
            .deleteRecords([column.db_id],relatedModelName)
            .then(this.update.bind(this,{},{}));
    },
    /**
     *@private
     *@param{FlectraEvent}ev
     */
    _onLoadMore:function(ev){
        varself=this;
        varcolumn=ev.target;
        this.model.loadMore(column.db_id).then(function(db_id){
            vardata=self.model.get(db_id);
            self.renderer.updateColumn(db_id,data);
        });
    },
    /**
     *@private
     *@param{FlectraEvent}ev
     *@param{KanbanColumn}ev.targetthecolumninwhichtherecordshould
     *  beadded
     *@param{Object}ev.data.valuesthefieldvaluesoftherecordto
     *  create;ifvaluesonlycontainsthevalueofthe'display_name',a
     *  'name_create'isperformedinsteadof'create'
     *@param{function}[ev.data.onFailure]calledwhenthequickcreation
     *  failed
     */
    _onQuickCreateRecord:function(ev){
        varself=this;
        varvalues=ev.data.values;
        varcolumn=ev.target;
        varonFailure=ev.data.onFailure||function(){};

        //functionthatupdatesthekanbanviewoncetherecordhasbeenadded
        //itreceivesthelocalidofthecreatedrecordinarguments
        varupdate=function(db_id){

            varcolumnState=self.model.getColumn(db_id);
            varstate=self.model.get(self.handle);
            returnself.renderer
                .updateColumn(columnState.id,columnState,{openQuickCreate:true,state:state})
                .then(function(){
                    if(ev.data.openRecord){
                        self.trigger_up('open_record',{id:db_id,mode:'edit'});
                    }
                });
        };

        this.model.createRecordInGroup(column.db_id,values)
            .then(update)
            .guardedCatch(function(reason){
                reason.event.preventDefault();
                varcolumnState=self.model.get(column.db_id,{raw:true});
                varcontext=columnState.getContext();
                varstate=self.model.get(self.handle,{raw:true});
                vargroupedBy=state.groupedBy[0];
                context['default_'+groupedBy]=viewUtils.getGroupValue(columnState,groupedBy);
                newview_dialogs.FormViewDialog(self,{
                    res_model:state.model,
                    context:_.extend({default_name:values.name||values.display_name},context),
                    title:_t("Create"),
                    disable_multiple_selection:true,
                    on_saved:function(record){
                        self.model.addRecordToGroup(column.db_id,record.res_id)
                            .then(update);
                    },
                }).open().opened(onFailure);
            });
    },
    /**
     *@private
     *@param{FlectraEvent}ev
     */
    _onRecordDelete:function(ev){
        this._deleteRecords([ev.data.id]);
    },
    /**
     *@private
     *@param{FlectraEvent}ev
     */
    _onResequenceColumn:function(ev){
        varself=this;
        this._resequenceColumns(ev.data.ids);
    },
    /**
     *@private
     *@param{FlectraEvent}ev
     *@param{boolean}[ev.data.openQuickCreate=false]iftrue,opensthe
     *  QuickCreateinthetoggledcolumn(itassumesthatweareopeningit)
     */
    _onToggleColumn:function(ev){
        varself=this;
        constcolumnID=ev.target.db_id||ev.data.db_id;
        this.model.toggleGroup(columnID)
            .then(function(db_id){
                vardata=self.model.get(db_id);
                varoptions={
                    openQuickCreate:!!ev.data.openQuickCreate,
                };
                returnself.renderer.updateColumn(db_id,data,options);
            })
            .then(function(){
                if(ev.data.onSuccess){
                    ev.data.onSuccess();
                }
            });
    },
    /**
     *@todoshouldsimplyusefield_changedevent...
     *
     *@private
     *@param{FlectraEvent}ev
     *@param{function}[ev.data.onSuccess]callbacktoexecuteafterapplying
     *  changes
     */
    _onUpdateRecord:function(ev){
        varonSuccess=ev.data.onSuccess;
        deleteev.data.onSuccess;
        varchanges=_.clone(ev.data);
        ev.data.force_save=true;
        this._applyChanges(ev.target.db_id,changes,ev).then(onSuccess);
    },
    /**
     *Allowtheusertoarchive/restorealltherecordsofacolumn.
     *
     *@private
     *@param{FlectraEvent}ev
     */
    _onToggleActiveRecords:function(ev){
        varself=this;
        vararchive=ev.data.archive;
        varcolumn=ev.target;
        varrecordIds=_.pluck(column.records,'id');
        if(recordIds.length){
            varprom=archive?
              this.model.actionArchive(recordIds,column.db_id):
              this.model.actionUnarchive(recordIds,column.db_id);
            prom.then(function(dbID){
                vardata=self.model.get(dbID);
                if(data){ //Couldbenullifawizardisreturnedforexample
                    self.model.reload(self.handle).then(function(){
                        conststate=self.model.get(self.handle);
                        self.renderer.updateColumn(dbID,data,{state});
                    });
                }
            });
        }
    },
});

returnKanbanController;

});
