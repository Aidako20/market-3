flectra.define('web.FormRenderer',function(require){
"usestrict";

varBasicRenderer=require('web.BasicRenderer');
varconfig=require('web.config');
varcore=require('web.core');
vardom=require('web.dom');
varviewUtils=require('web.viewUtils');

var_t=core._t;
varqweb=core.qweb;

//symbolusedaskeytosetthe<field>nodeidonitswidget
constsymbol=Symbol('form');

varFormRenderer=BasicRenderer.extend({
    className:"o_form_view",
    events:_.extend({},BasicRenderer.prototype.events,{
        'click.o_notification_box.oe_field_translate':'_onTranslate',
        'click.o_notification_box.close':'_onTranslateNotificationClose',
        'shown.bs.taba[data-toggle="tab"]':'_onNotebookTabChanged',
    }),
    custom_events:_.extend({},BasicRenderer.prototype.custom_events,{
        'navigation_move':'_onNavigationMove',
        'activate_next_widget':'_onActivateNextWidget',
    }),
    //defaultcolattributesfortherenderingofgroups
    INNER_GROUP_COL:2,
    OUTER_GROUP_COL:2,

    /**
     *@override
     *@param{Object}params.fieldIdsToNamesmaps<field>nodeidstofieldnames
     *  (usefulwhenthereareseveraloccurrencesofthesamefieldinthearch)
     */
    init:function(parent,state,params){
        this._super.apply(this,arguments);
        this.fieldIdsToNames=params.fieldIdsToNames;
        this.idsForLabels={};
        this.lastActivatedFieldIndex=-1;
        this.alertFields={};
        //Theformrendererdoesn'trenderinvsiblefields(invisible="1")by
        //default,tospeeduptherendering.However,wesometimeshaveto
        //displaythem(e.g.inStudio,in"showinvisible"mode).Thisflag
        //allowstodisablethisoptimization.
        this.renderInvisible=false;
    },
    /**
     *@override
     */
    start:function(){
        this._applyFormSizeClass();
        returnthis._super.apply(this,arguments);
    },

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *Focusesthefieldhavingattribute'default_focus'set,ifany,orthe
     *firstfocusablefieldotherwise.
     *Inreadmode,delegatewhichbuttontogivethefocusto,totheform_renderer
     *
     *@returns{int|undefined}theindexofthewidgetactivatedelse
     *undefined
     */
    autofocus:function(){
        if(this.mode==='readonly'){
            varfirstPrimaryFormButton= this.$el.find('button.btn-primary:enabled:visible:first()');
            if(firstPrimaryFormButton.length>0){
                returnfirstPrimaryFormButton.focus();
            }else{
                return;
            }
        }
        varfocusWidget=this.defaultFocusField;
        if(!focusWidget||!focusWidget.isFocusable()){
            varwidgets=this.allFieldWidgets[this.state.id];
            for(vari=0;i<(widgets?widgets.length:0);i++){
                varwidget=widgets[i];
                if(widget.isFocusable()){
                    focusWidget=widget;
                    break;
                }
            }
        }
        if(focusWidget){
            returnfocusWidget.activate({noselect:true,noAutomaticCreate:true});
        }
    },
    /**
     *Extendthemethodsothatlabelsalsoreceivethe'o_field_invalid'class
     *ifnecessary.
     *
     *@override
     *@seeBasicRenderer.canBeSaved
     *@param{string}recordID
     *@returns{string[]}
     */
    canBeSaved:function(){
        varfieldNames=this._super.apply(this,arguments);

        var$labels=this.$('label');
        $labels.removeClass('o_field_invalid');

        constallWidgets=this.allFieldWidgets[this.state.id]||[];
        constwidgets=allWidgets.filter(w=>fieldNames.includes(w.name));
        for(constwidgetofwidgets){
            constidForLabel=this.idsForLabels[widget[symbol]];
            if(idForLabel){
                $labels
                    .filter('[for='+idForLabel+']')
                    .addClass('o_field_invalid');
            }
        }
        returnfieldNames;
    },
    /*
     *Updatestranslationalertfieldsforthecurrentstateanddisplayupdatedfields
     *
     * @param{Object}alertFields
     */
    updateAlertFields:function(alertFields){
        this.alertFields[this.state.res_id]=_.extend(this.alertFields[this.state.res_id]||{},alertFields);
        this.displayTranslationAlert();
    },
    /**
     *Showawarningmessageiftheusermodifiedatranslatedfield. Foreach
     *field,thenotificationprovidesalinktoeditthefield'stranslations.
     */
    displayTranslationAlert:function(){
        this.$('.o_notification_box').remove();
        if(this.alertFields[this.state.res_id]){
            var$notification=$(qweb.render('notification-box',{type:'info'}))
                .append(qweb.render('translation-alert',{
                    fields:this.alertFields[this.state.res_id],
                    lang:_t.database.parameters.name
                }));
            if(this.$('.o_form_statusbar').length){
                this.$('.o_form_statusbar').after($notification);
            }elseif(this.$('.o_form_sheet_bg').length){
                this.$('.o_form_sheet_bg').prepend($notification);
            }else{
                this.$el.prepend($notification);
            }
        }
    },
    /**
     *@seeBasicRenderer.confirmChange
     *
     *WeneedtoreapplytheidForLabelpostprocessingsincesomewidgetsmay
     *haverecomputedtheirdomentirely.
     *
     *@override
     */
    confirmChange:function(){
        varself=this;
        returnthis._super.apply(this,arguments).then(function(resetWidgets){
            _.each(resetWidgets,function(widget){
                self._setIDForLabel(widget,self.idsForLabels[widget[symbol]]);
            });
            if(self.$('.o_field_invalid').length){
                self.canBeSaved(self.state.id);
            }
            returnresetWidgets;
        });
    },
    /**
     *Disablestatusbarbuttonsandstatbuttonssothattheycan'tbeclickedanymore
     *
     */
    disableButtons:function(){
        this.$('.o_statusbar_buttonsbutton,.oe_button_boxbutton')
            .attr('disabled',true);
    },
    /**
     *Enablestatusbarbuttonsandstatbuttonssotheycanbeclickedagain
     *
     */
    enableButtons:function(){
        this.$('.o_statusbar_buttonsbutton,.oe_button_boxbutton')
            .removeAttr('disabled');
    },
    /**
     *Putthefocusonthelastactivatedwidget.
     *Thisfunctionisusedwhenclosingadialogtogivethefocusbacktothe
     *formthathasopeneditandensuresthatthefocusisinthecorrect
     *field.
     */
    focusLastActivatedWidget:function(){
        if(this.lastActivatedFieldIndex!==-1){
            returnthis._activateNextFieldWidget(this.state,this.lastActivatedFieldIndex-1,
                {noAutomaticCreate:true});
        }
        returnfalse;
    },
    /**
     *returnstheactivetabpagesforeachnotebook
     *
     *@todocurrently,thismethodisunused...
     *
     *@seesetLocalState
     *@returns{Object}amapfromnotebooknametotheactivetabindex
     */
    getLocalState:function(){
        conststate={};
        for(constnotebookofthis.el.querySelectorAll(':scopediv.o_notebook')){
            constname=notebook.dataset.name;
            constnavs=notebook.querySelectorAll(':scope.o_notebook_headers.nav-item>.nav-link');
            state[name]=Math.max([...navs].findIndex(
                nav=>nav.classList.contains('active')
            ),0);
        }
        returnstate;
    },
    /**
     *Resetthetrackingofthelastactivatedfield.Thefastentrywith
     *keyboardnavigationneedstotrackthelastactivatedfieldinorderto
     *setthefocus.
     *
     *Inparticular,whentherearechangesofmode(e.g.edit->readonly->
     *edit),wedonotwanttoauto-setthefocusonthepreviouslylast
     *activatedfield.Toavoidthisissue,thismethodshouldbecalled
     *wheneverthereisachangeofmode.
     */
    resetLastActivatedField:function(){
        this.lastActivatedFieldIndex=-1;
    },
    /**
     *Resetsstatewhichstoresinformationlikescrollposition,curently
     *activepage,...
     *
     *@override
     */
    resetLocalState(){
        for(constnotebookofthis.el.querySelectorAll(':scopediv.o_notebook')){
            [...notebook.querySelectorAll(':scope.o_notebook_headers.nav-item.nav-link')]
                .map(nav=>nav.classList.remove('active'));
            [...notebook.querySelectorAll(':scope.tab-content>.tab-pane')]
                .map(tab=>tab.classList.remove('active'));
        }

    },
    /**
     *Restoreactivetabpagesforeachnotebook.Itreliesontheimplicitfact
     *thateachnavheadercorrespondstoatabpage.
     *
     *@param{Object}statetheresultfromagetLocalStatecall
     */
    setLocalState:function(state){
        for(constnotebookofthis.el.querySelectorAll(':scopediv.o_notebook')){
            if(notebook.closest(".o_field_widget")){
                continue;
            }
            constname=notebook.dataset.name;
            if(nameinstate){
                constnavs=notebook.querySelectorAll(':scope.o_notebook_headers.nav-item');
                constpages=notebook.querySelectorAll(':scope>.tab-content>.tab-pane');
                //Wecan'tbasetheamountonthe'navs'lengthsincesomeoverrides
                //areaddingpagelessnavitems.
                constvalidTabsAmount=pages.length;
                if(!validTabsAmount){
                    continue;//Nopagedefinedonthenotebook.
                }
                letactiveIndex=state[name];
                if(navs[activeIndex].classList.contains('o_invisible_modifier')){
                    activeIndex=[...navs].findIndex(
                        nav=>!nav.classList.contains('o_invisible_modifier')
                    );
                }
                if(activeIndex<=0){
                    continue;//NovisibletabORfirsttab=activetab(nochangetomake).
                }
                for(leti=0;i<validTabsAmount;i++){
                    navs[i].querySelector('.nav-link').classList.toggle('active',activeIndex===i);
                    pages[i].classList.toggle('active',activeIndex===i);
                }
                core.bus.trigger('DOM_updated');
            }
        }
    },
    /**
     *@overridemethodfromAbstractRenderer
     *@param{Object}stateavalidstategivenbythemodel
     *@param{Object}params
     *@param{string}[params.mode]newmode,either'edit'or'readonly'
     *@param{string[]}[params.fieldNames]ifgiven,therendererwillonly
     *  updatethefieldsinthislist
     *@returns{Promise}
     */
    updateState:function(state,params){
        this._setState(state);
        this.mode=(params&&'mode'inparams)?params.mode:this.mode;

        //iffieldNamesaregiven,weupdatethecorrespondingfieldwidget.
        //Ithinkthisiswrong,andthecallercoulddirectlycallthe
        //confirmChangemethod
        if(params.fieldNames){
            //onlyupdatethegivenfields
            returnthis.confirmChange(this.state,this.state.id,params.fieldNames);
        }
        returnthis._super.apply(this,arguments);
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *Activatesthefirstvisibletabfromagivenlistoftabobjects.The
     *firsttabhavingan"autofocus"attributesetwillbefocusedin
     *priority.
     *
     *@private
     *@param{Object[]}tabs
     */
    _activateFirstVisibleTab(tabs){
        constvisibleTabs=tabs.filter(
            (tab)=>!tab.$header.hasClass("o_invisible_modifier")
        );
        constautofocusTab=visibleTabs.findIndex(
            (tab)=>tab.node.attrs.autofocus==="autofocus"
        );
        consttabToFocus=visibleTabs[Math.max(0,autofocusTab)];
        if(tabToFocus){
            tabToFocus.$header.find('.nav-link').addClass('active');
            tabToFocus.$page.addClass('active');
        }
    },
    /**
     *@override
     */
    _activateNextFieldWidget:function(record,currentIndex){
        //ifwearethelastwidget,weshouldgivethefocustothefirstPrimaryButtonintheform
        //elsedothedefaultbehavior
        if((currentIndex+1)>=(this.allFieldWidgets[record.id]||[]).length){
            this.trigger_up('focus_control_button');
            this.lastActivatedFieldIndex=-1;
        }else{
            varactivatedIndex= this._super.apply(this,arguments);
            if(activatedIndex===-1){//nowidgethavebeenactivated,weshouldgototheedit/savebuttons
                this.trigger_up('focus_control_button');
                this.lastActivatedFieldIndex=-1;
            }
            else{
                this.lastActivatedFieldIndex=activatedIndex;
            }
        }
        returnthis.lastActivatedFieldIndex;
    },
    /**
     *Addatooltiponabutton
     *
     *@private
     *@param{Object}node
     *@param{jQuery}$button
     */
    _addButtonTooltip:function(node,$button){
        varself=this;
        $button.tooltip({
            title:function(){
                returnqweb.render('WidgetButton.tooltip',{
                    debug:config.isDebug(),
                    state:self.state,
                    node:node,
                });
            },
        });
    },
    /**
     *@private
     *@param{jQueryElement}$el
     *@param{Object}node
     */
    _addOnClickAction:function($el,node){
        if(node.attrs.special||node.attrs.confirm||node.attrs.type||$el.hasClass('oe_stat_button')){
            varself=this;
            $el.on("click",function(){
                self.trigger_up('button_clicked',{
                    attrs:node.attrs,
                    record:self.state,
                });
            });
        }
    },
    _applyFormSizeClass:function(){
        constformEl=this.$el[0];
        if(config.device.size_class<=config.device.SIZES.XS){
            formEl.classList.add('o_xxs_form_view');
        }else{
            formEl.classList.remove('o_xxs_form_view');
        }
        if(config.device.size_class===config.device.SIZES.XXL){
            formEl.classList.add('o_xxl_form_view');
        }else{
            formEl.classList.remove('o_xxl_form_view');
        }
    },
    /**
     *@private
     *@param{string}uida<field>nodeid
     *@returns{string}
     */
    _getIDForLabel:function(uid){
        if(!this.idsForLabels[uid]){
            this.idsForLabels[uid]=_.uniqueId('o_field_input_');
        }
        returnthis.idsForLabels[uid];
    },
    /**
     *@override
     *@private
     */
    _getRecord:function(recordId){
        returnthis.state.id===recordId?this.state:null;
    },
    /**
     *@override
     *@private
     */
    _postProcessField:function(widget,node){
        this._super.apply(this,arguments);
        //setthenodeidonthewidget,asitmightbenecessarylater(tooltips,confirmChange...)
        widget[symbol]=node.attrs.id;
        this._setIDForLabel(widget,this._getIDForLabel(node.attrs.id));
        if(JSON.parse(node.attrs.default_focus||"0")){
            this.defaultFocusField=widget;
        }
    },
    /**
     *@private
     *@param{Object}node
     *@returns{jQueryElement}
     */
    _renderButtonBox:function(node){
        varself=this;
        var$result=$('<'+node.tag+'>',{class:'o_not_full'});

        //Therenderingofbuttonsmaybeasync(seerenderFieldWidget),sowe
        //mustwaitforthebuttonstobeready(andtheirmodifierstobe
        //applied)beforemanipulatingthem,aswecheckiftheyarevisibleor
        //not.Todoso,weextractfromthis.defsthepromisescorresponding
        //tothebuttonboxbuttons,andwaitforthemtoberesolved.
        varnextDefIndex=this.defs.length;
        varbuttons=_.map(node.children,function(child){
            if(child.tag==='button'){
                returnself._renderStatButton(child);
            }else{
                returnself._renderNode(child);
            }
        });

        //Atthispoint,eachbuttonisanemptydivthatwillbereplacedby
        //thereal$elofthebuttonwhenitisready(withreplaceWith).
        //However,thisonlyworksiftheemptydivisappendedsomewhere,so
        //wehereappendthemintoawrapper,andunwrapthemoncetheyhave
        //beenreplaced.
        var$tempWrapper=$('<div>');
        _.each(buttons,function($button){
            $button.appendTo($tempWrapper);
        });
        vardefs=this.defs.slice(nextDefIndex);
        Promise.all(defs).then(function(){
            buttons=$tempWrapper.children();
            varbuttons_partition=_.partition(buttons,function(button){
                return$(button).is('.o_invisible_modifier');
            });
            varinvisible_buttons=buttons_partition[0];
            varvisible_buttons=buttons_partition[1];

            //Gettheunfoldedbuttonsaccordingtowindowsize
            varnb_buttons=self._renderButtonBoxNbButtons();
            varunfolded_buttons=visible_buttons.slice(0,nb_buttons).concat(invisible_buttons);

            //Getthefoldedbuttons
            varfolded_buttons=visible_buttons.slice(nb_buttons);
            if(folded_buttons.length===1){
                unfolded_buttons=buttons;
                folded_buttons=[];
            }

            //Toggleclasstotellifthebuttonboxisfull(CSSrequirement)
            varfull=(visible_buttons.length>nb_buttons);
            $result.toggleClass('o_full',full).toggleClass('o_not_full',!full);

            //Addtheunfoldedbuttons
            _.each(unfolded_buttons,function(button){
                $(button).appendTo($result);
            });

            //Addthedropdownwithfoldedbuttonsifany
            if(folded_buttons.length){
                $result.append(dom.renderButton({
                    attrs:{
                        'class':'oe_stat_buttono_button_moredropdown-toggle',
                        'data-toggle':'dropdown',
                    },
                    text:_t("More"),
                }));

                var$dropdown=$("<div>",{class:"dropdown-menuo_dropdown_more",role:"menu"});
                _.each(folded_buttons,function(button){
                    $(button).addClass('dropdown-item').appendTo($dropdown);
                });
                $dropdown.appendTo($result);
            }
        });

        this._handleAttributes($result,node);
        this._registerModifiers(node,this.state,$result);
        return$result;
    },
    /**
    *@private
    *@returns{integer}
    */
    _renderButtonBoxNbButtons:function(){
        return[2,2,2,4][config.device.size_class]||7;
    },
    /**
     *Donotrenderafieldwidgetifitisalwaysinvisible.
     *
     *@override
     */
    _renderFieldWidget(node){
        if(!this.renderInvisible&&node.attrs.modifiers.invisible===true){
            return$();
        }
        returnthis._super(...arguments);
    },
    /**
     *@private
     *@param{Object}node
     *@returns{jQueryElement}
     */
    _renderGenericTag:function(node){
        var$result=$('<'+node.tag+'>',_.omit(node.attrs,'modifiers'));
        this._handleAttributes($result,node);
        this._registerModifiers(node,this.state,$result);
        $result.append(_.map(node.children,this._renderNode.bind(this)));
        return$result;
    },
    /**
     *@private
     *@param{Object}node
     *@returns{jQueryElement}
     */
    _renderHeaderButton:function(node){
        var$button=viewUtils.renderButtonFromNode(node);

        //CurrentAPIofflectraforrenderingbuttonsis"ifclassesaregiven
        //usethoseontopofthe'btn'and'btn-{size}'classes,otherwiseact
        //asif'btn-secondary'classwasgiven".Theproblemisthat,for
        //headerbuttonsonly,wealloweduserstoonlyindicatetheircustom
        //classeswithouthavingtoexplicitelyaskforthe'btn-secondary'
        //classtobeadded.Weforceitsoherewhennobootstrapbtntype
        //classisfound.
        if($button.not('.btn-primary,.btn-secondary,.btn-link,.btn-success,.btn-info,.btn-warning,.btn-danger').length){
            $button.addClass('btn-secondary');
        }

        this._addOnClickAction($button,node);
        this._handleAttributes($button,node);
        this._registerModifiers(node,this.state,$button);

        //Displaytooltip
        if(config.isDebug()||node.attrs.help){
            this._addButtonTooltip(node,$button);
        }
        return$button;
    },
    /**
     *@private
     *@param{Object}node
     *@returns{jQueryElement}
     */
    _renderHeaderButtons:function(node){
        varself=this;
        varbuttons=[];
        _.each(node.children,function(child){
            if(child.tag==='button'){
                buttons.push(self._renderHeaderButton(child));
            }
            if(child.tag==='widget'){
                buttons.push(self._renderTagWidget(child));
            }
        });
        returnthis._renderStatusbarButtons(buttons);
    },
    /**
     *@private
     *@param{Object}node
     *@returns{jQueryElement}
     */
    _renderInnerGroup:function(node){
        varself=this;
        var$result=$('<table/>',{class:'o_groupo_inner_group'});
        var$tbody=$('<tbody/>').appendTo($result);
        this._handleAttributes($result,node);
        this._registerModifiers(node,this.state,$result);

        varcol=parseInt(node.attrs.col,10)||this.INNER_GROUP_COL;

        if(node.attrs.string){
            var$sep=$('<tr><tdcolspan="'+col+'"style="width:100%;"><divclass="o_horizontal_separator">'+node.attrs.string+'</div></td></tr>');
            $result.append($sep);
        }

        varrows=[];
        var$currentRow=$('<tr/>');
        varcurrentColspan=0;
        node.children.forEach(function(child){
            if(child.tag==='newline'){
                rows.push($currentRow);
                $currentRow=$('<tr/>');
                currentColspan=0;
                return;
            }

            varcolspan=parseInt(child.attrs.colspan,10);
            varisLabeledField=(child.tag==='field'&&child.attrs.nolabel!=='1');
            if(!colspan){
                if(isLabeledField){
                    colspan=2;
                }else{
                    colspan=1;
                }
            }
            varfinalColspan=colspan-(isLabeledField?1:0);
            currentColspan+=colspan;

            if(currentColspan>col){
                rows.push($currentRow);
                $currentRow=$('<tr/>');
                currentColspan=colspan;
            }

            var$tds;
            if(child.tag==='field'){
                $tds=self._renderInnerGroupField(child);
            }elseif(child.tag==='label'){
                $tds=self._renderInnerGroupLabel(child);
            }else{
                var$td=$('<td/>');
                var$child=self._renderNode(child);
                if($child.hasClass('o_td_label')){//transferclassnametooutertdforcssreasons
                    $td.addClass('o_td_label');
                    $child.removeClass('o_td_label');
                }
                $tds=$td.append($child);
            }
            if(finalColspan>1){
                $tds.last().attr('colspan',finalColspan);
            }
            $currentRow.append($tds);
        });
        rows.push($currentRow);

        _.each(rows,function($tr){
            varnonLabelColSize=100/(col-$tr.children('.o_td_label').length);
            _.each($tr.children(':not(.o_td_label)'),function(el){
                var$el=$(el);
                $el.css('width',((parseInt($el.attr('colspan'),10)||1)*nonLabelColSize)+'%');
            });
            $tbody.append($tr);
        });

        return$result;
    },
    /**
     *@private
     *@param{Object}node
     *@returns{jQueryElement}
     */
    _renderInnerGroupField:function(node){
        var$el=this._renderFieldWidget(node,this.state);
        var$tds=$('<td/>').append($el);

        if(node.attrs.nolabel!=='1'){
            var$labelTd=this._renderInnerGroupLabel(node);
            $tds=$labelTd.add($tds);

            //applytheoe_(edit|read)_onlyclassNameonthelabelaswell
            if(/\boe_edit_only\b/.test(node.attrs.class)){
                $tds.addClass('oe_edit_only');
            }
            if(/\boe_read_only\b/.test(node.attrs.class)){
                $tds.addClass('oe_read_only');
            }
        }

        return$tds;
    },
    /**
     *@private
     *@param{Object}node
     *@returns{jQueryElement}
     */
    _renderInnerGroupLabel:function(node){
        return$('<td/>',{class:'o_td_label'})
            .append(this._renderTagLabel(node));
    },
    /**
     *Renderanode,fromthearchoftheview.Itisagenericmethod,that
     *willdispatchonspecificothermethods. Therenderingofanodeisa
     *jQueryelement(orastring),withthecorrectclasses,attrs,and
     *content.
     *
     *Forfields,itwillreturnthe$elofthefieldwidget.Notethatthis
     *methodissynchronous,fieldwidgetsareinstantiatedandappended,but
     *iftheyareasynchronous,theyregistertheirpromisesinthis.defs,and
     *the_renderViewmethodwillproperlywait.
     *
     *@private
     *@param{Object}node
     *@returns{jQueryElement|string}
     */
    _renderNode:function(node){
        varrenderer=this['_renderTag'+_.str.capitalize(node.tag)];
        if(renderer){
            returnrenderer.call(this,node);
        }
        if(node.tag==='div'&&node.attrs.name==='button_box'){
            returnthis._renderButtonBox(node);
        }
        if(_.isString(node)){
            returnnode;
        }
        returnthis._renderGenericTag(node);
    },
    /**
     *Rendersa'group'node,whichcontains'group'nodesinitschildren.
     *
     *@param{Object}node]
     *@returns{JQueryElement}
     */
    _renderOuterGroup:function(node){
        varself=this;
        var$result=$('<div/>',{class:'o_group'});
        varnbCols=parseInt(node.attrs.col,10)||this.OUTER_GROUP_COL;
        varcolSize=Math.max(1,Math.round(12/nbCols));
        if(node.attrs.string){
            var$sep=$('<div/>',{class:'o_horizontal_separator'}).text(node.attrs.string);
            $result.append($sep);
        }
        $result.append(_.map(node.children,function(child){
            if(child.tag==='newline'){
                return$('<br/>');
            }
            var$child=self._renderNode(child);
            $child.addClass('o_group_col_'+(colSize*(parseInt(child.attrs.colspan,10)||1)));
            return$child;
        }));
        this._handleAttributes($result,node);
        this._registerModifiers(node,this.state,$result);
        return$result;
    },
    /**
     *@private
     *@param{Object}node
     *@returns{jQueryElement}
     */
    _renderStatButton:function(node){
        var$button=viewUtils.renderButtonFromNode(node,{
            extraClass:'oe_stat_button',
        });
        $button.append(_.map(node.children,this._renderNode.bind(this)));
        if(node.attrs.help){
            this._addButtonTooltip(node,$button);
        }
        this._addOnClickAction($button,node);
        this._handleAttributes($button,node);
        this._registerModifiers(node,this.state,$button);
        return$button;
    },
    /**
     *@private
     *@param{Array}buttons
     *@return{jQueryElement}
     */
    _renderStatusbarButtons:function(buttons){
        var$statusbarButtons=$('<div>',{class:'o_statusbar_buttons'});
        buttons.forEach(button=>$statusbarButtons.append(button));
        return$statusbarButtons;
    },
    /**
     *@private
     *@param{Object}page
     *@param{string}page_id
     *@returns{jQueryElement}
     */
    _renderTabHeader:function(page,page_id){
        var$a=$('<a>',{
            'data-toggle':'tab',
            disable_anchor:'true',
            href:'#'+page_id,
            class:'nav-link',
            role:'tab',
            text:page.attrs.string,
        });
        return$('<li>',{class:'nav-item'}).append($a);
    },
    /**
     *@private
     *@param{Object}page
     *@param{string}page_id
     *@returns{jQueryElement}
     */
    _renderTabPage:function(page,page_id){
        var$result=$('<divclass="tab-pane"id="'+page_id+'">');
        $result.append(_.map(page.children,this._renderNode.bind(this)));
        return$result;
    },
    /**
     *@private
     *@param{Object}node
     *@returns{jQueryElement}
     */
    _renderTagButton:function(node){
        var$button=viewUtils.renderButtonFromNode(node);
        $button.append(_.map(node.children,this._renderNode.bind(this)));
        this._addOnClickAction($button,node);
        this._handleAttributes($button,node);
        this._registerModifiers(node,this.state,$button);

        //Displaytooltip
        if(config.isDebug()||node.attrs.help){
            this._addButtonTooltip(node,$button);
        }

        return$button;
    },
    /**
     *@private
     *@param{Object}node
     *@returns{jQueryElement}
     */
    _renderTagField:function(node){
        returnthis._renderFieldWidget(node,this.state);
    },
    /**
     *@private
     *@param{Object}node
     *@returns{jQueryElement}
     */
    _renderTagForm:function(node){
        var$result=$('<div/>');
        if(node.attrs.class){
            $result.addClass(node.attrs.class);
        }
        varallNodes=node.children.map(this._renderNode.bind(this));
        $result.append(allNodes);
        return$result;
    },
    /**
     *@private
     *@param{Object}node
     *@returns{jQueryElement}
     */
    _renderTagGroup:function(node){
        varisOuterGroup=_.some(node.children,function(child){
            returnchild.tag==='group';
        });
        if(!isOuterGroup){
            returnthis._renderInnerGroup(node);
        }
        returnthis._renderOuterGroup(node);
    },
    /**
     *@private
     *@param{Object}node
     *@returns{jQueryElement}
     */
    _renderTagHeader:function(node){
        varself=this;
        var$statusbar=$('<div>',{class:'o_form_statusbar'});
        $statusbar.append(this._renderHeaderButtons(node));
        _.each(node.children,function(child){
            if(child.tag==='field'){
                var$el=self._renderFieldWidget(child,self.state);
                $statusbar.append($el);
            }
        });
        this._handleAttributes($statusbar,node);
        this._registerModifiers(node,this.state,$statusbar);
        return$statusbar;
    },
    /**
     *@private
     *@param{Object}node
     *@returns{jQueryElement}
     */
    _renderTagLabel:function(node){
        if(!this.renderInvisible&&node.tag==='field'&&
            node.attrs.modifiers.invisible===true){
            //skiprenderingofinvisiblefields/labels
            return$();
        }
        varself=this;
        vartext;
        letfieldName;
        if(node.tag==='label'){
            fieldName=this.fieldIdsToNames[node.attrs.for];//'for'referencesa<field>nodeid
        }else{
            fieldName=node.attrs.name;
        }
        if('string'innode.attrs){//allowemptystring
            text=node.attrs.string;
        }elseif(fieldName){
            text=this.state.fields[fieldName].string;
        }else{
            returnthis._renderGenericTag(node);
        }
        var$result=$('<label>',{
            class:'o_form_label',
            for:this._getIDForLabel(node.tag==='label'?node.attrs.for:node.attrs.id),
            text:text,
        });
        if(node.tag==='label'){
            this._handleAttributes($result,node);
        }
        varmodifiersOptions;
        if(fieldName){
            modifiersOptions={
                callback:function(element,modifiers,record){
                    varwidgets=self.allFieldWidgets[record.id];
                    varwidget=_.findWhere(widgets,{name:fieldName});
                    if(!widget){
                        return;//FIXMEthisoccursifthewidgetiscreated
                                //afterthelabel(explicit<label/>taginthe
                                //arch),sothiswon'tworkonfirstrendering
                                //onlyonreevaluation
                    }
                    element.$el.toggleClass('o_form_label_empty',!!(//FIXMEconditionisevaluatedtwice(labelANDwidget...)
                        record.data.id
                        &&(modifiers.readonly||self.mode==='readonly')
                        &&!widget.isSet()
                    ));
                },
            };
        }
        //FIXMEifthefunctioniscalledwitha<label/>node,theregistered
        //modifierswillbethoseonthisnode.Maybethedesiredbehavior
        //wouldbetomergethemwithassociatedfieldnodeifany...note:
        //thisworkedin10.0for"o_form_label_empty"reevaluationbutnotfor
        //"o_invisible_modifier"reevaluationonlabels...
        this._registerModifiers(node,this.state,$result,modifiersOptions);
        return$result;
    },
    /**
     *@private
     *@param{Object}node
     *@returns{jQueryElement}
     */
    _renderTagNotebook:function(node){
        varself=this;
        var$headers=$('<ulclass="navnav-tabs">');
        var$pages=$('<divclass="tab-content">');
        //renderedTabsisusedtoaggregatethegenerated$headersand$pages
        //alongsidetheirnode,sothattheirmodifierscanberegisteredonce
        //alltabshavebeenrendered,toensurethatthefirstvisibletab
        //iscorrectlyactivated
        varrenderedTabs=_.map(node.children,function(child,index){
            varpageID=_.uniqueId('notebook_page_');
            var$header=self._renderTabHeader(child,pageID);
            var$page=self._renderTabPage(child,pageID);
            self._handleAttributes($header,child);
            $headers.append($header);
            $pages.append($page);
            return{
                $header:$header,
                $page:$page,
                node:child,
            };
        });
        //registerthemodifiersforeachtab
        _.each(renderedTabs,function(tab){
            self._registerModifiers(tab.node,self.state,tab.$header,{
                callback:function(element,modifiers){
                    //iftheactivetabisinvisible,activatethefirstvisibletabinstead
                    var$link=element.$el.find('.nav-link');
                    if(modifiers.invisible&&$link.hasClass('active')){
                        $link.removeClass('active');
                        tab.$page.removeClass('active');
                        self.inactiveNotebooks.push(renderedTabs);
                    }
                    if(!modifiers.invisible){
                        //makefirstpageactiveifthereisonlyonepagetodisplay
                        var$visibleTabs=$headers.find('li:not(.o_invisible_modifier)');
                        if($visibleTabs.length===1){
                            self.inactiveNotebooks.push(renderedTabs);
                        }
                    }
                },
            });
        });
        this._activateFirstVisibleTab(renderedTabs);
        var$notebookHeaders=$('<divclass="o_notebook_headers">').append($headers);
        var$notebook=$('<divclass="o_notebook">').append($notebookHeaders,$pages);
        $notebook[0].dataset.name=node.attrs.name||'_default_';
        this._registerModifiers(node,this.state,$notebook);
        this._handleAttributes($notebook,node);
        return$notebook;
    },
    /**
     *@private
     *@param{Object}node
     *@returns{jQueryElement}
     */
    _renderTagSeparator:function(node){
        var$separator=$('<div/>').addClass('o_horizontal_separator').text(node.attrs.string);
        this._handleAttributes($separator,node);
        this._registerModifiers(node,this.state,$separator);
        return$separator;
    },
    /**
     *@private
     *@param{Object}node
     *@returns{jQueryElement}
     */
    _renderTagSheet:function(node){
        this.has_sheet=true;
        var$sheet=$('<div>',{class:'clearfixposition-relativeo_form_sheet'});
        $sheet.append(node.children.map(this._renderNode.bind(this)));
        return$sheet;
    },
    /**
     *Instantiatecustomwidgets
     *
     *@private
     *@param{Object}node
     *@returns{jQueryElement}
     */
    _renderTagWidget:function(node){
        returnthis._renderWidget(this.state,node);
    },
    /**
     *Mainentrypointfortherendering. Fromhere,wecall_renderNodeon
     *therootofthearch,then,wheneverypromise(fromthefieldwidgets)
     *aredone,itwillresolvesitself.
     *
     *@private
     *@overridemethodfromBasicRenderer
     *@returns{Promise}
     */
    _renderView:function(){
        varself=this;

        //rendertheformandevaluatethemodifiers
        vardefs=[];
        this.defs=defs;
        this.inactiveNotebooks=[];
        var$form=this._renderNode(this.arch).addClass(this.className);
        deletethis.defs;

        returnPromise.all(defs).then(()=>this.__renderView()).then(function(){
            self._updateView($form.contents());
            if(self.state.res_idinself.alertFields){
                self.displayTranslationAlert();
            }
        }).then(function(){
            if(self.lastActivatedFieldIndex>=0){
                self._activateNextFieldWidget(self.state,self.lastActivatedFieldIndex);
            }
        }).guardedCatch(function(){
            $form.remove();
        });
    },
    /**
     *Meanttobeoverriddenifasynchronousworkneedstobedonewhen
     *renderingtheview.Thisiscalledrightbeforeattachingthenewview
     *content.
     *@private
     *@returns{Promise<any>}
     */
    async__renderView(){},
    /**
     *Thismethodisoverriddentoactivatethefirstnotebookpageifthe
     *currentactivepageisinvisibleduetomodifiers.Thisisdoneafter
     *allmodifiersareappliedonallpageelements.
     *
     *@override
     */
    async_updateAllModifiers(){
        awaitthis._super(...arguments);
        for(consttabsofthis.inactiveNotebooks){
            this._activateFirstVisibleTab(tabs);
        }
        this.inactiveNotebooks=[];
    },
    /**
     *Updatestheform's$elwithnewcontent.
     *
     *@private
     *@see_renderView
     *@param{JQuery}$newContent
     */
    _updateView:function($newContent){
        varself=this;

        //Setthenewcontentoftheformview,andtoggleclassnames
        this.$el.html($newContent);
        this.$el.toggleClass('o_form_nosheet',!this.has_sheet);
        if(this.has_sheet){
            this.$el.children().not('.o_FormRenderer_chatterContainer')
                .wrapAll($('<div/>',{class:'o_form_sheet_bg'}));
        }
        this.$el.toggleClass('o_form_editable',this.mode==='edit');
        this.$el.toggleClass('o_form_readonly',this.mode==='readonly');

        //Attachthetooltipsonthefields'label
        _.each(this.allFieldWidgets[this.state.id],function(widget){
            constidForLabel=self.idsForLabels[widget[symbol]];
            var$label=idForLabel?self.$('.o_form_label[for='+idForLabel+']'):$();
            self._addFieldTooltip(widget,$label);
            if(widget.attrs.widget==='upgrade_boolean'){
                //thiswidgetneedsareferencetoits$labeltobecorrectly
                //rendered
                widget.renderWithLabel($label);
            }
        });
    },
    /**
     *SetsidattributeofgivenwidgettoidForLabel
     *
     *@private
     *@param{AbstractField}widget
     *@param{idForLabel}string
     */
    _setIDForLabel:function(widget,idForLabel){
        widget.setIDForLabel(idForLabel);
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *@private
     *@param{FlectraEvent}ev
     */
    _onActivateNextWidget:function(ev){
        ev.stopPropagation();
        varindex=this.allFieldWidgets[this.state.id].indexOf(ev.data.target);
        this._activateNextFieldWidget(this.state,index);
    },
    /**
     *@override
     *@private
     *@param{FlectraEvent}ev
     */
    _onNavigationMove:function(ev){
        ev.stopPropagation();
        //Wepreventthedefaultbehaviourandstopthepropagationofthe
        //originalEventwhentheoriginalEventisatabkeydowntonotlet
        //thebrowserdoit.Theactionisdonebythisrenderer.
        if(ev.data.originalEvent&&['next','previous'].includes(ev.data.direction)){
            ev.data.originalEvent.preventDefault();
            ev.data.originalEvent.stopPropagation();
        }
        varindex;
        lettarget=ev.data.target||ev.target;
        if(target.__owl__){
            target=target.__owl__.parent;//OwlfieldsarewrappedbytheFieldWrapper
        }
        if(ev.data.direction==="next"){
            index=this.allFieldWidgets[this.state.id].indexOf(target);
            this._activateNextFieldWidget(this.state,index);
        }elseif(ev.data.direction==="previous"){
            index=this.allFieldWidgets[this.state.id].indexOf(target);
            this._activatePreviousFieldWidget(this.state,index);
        }
    },
    /**
     *ListentonotebooktabchangesandtriggeraDOM_updatedeventsuchthat
     *widgetsinthevisibletabcancorrectlycomputetheirdimensions(e.g.
     *autoresizeonfieldtext)
     *
     *@private
     */
    _onNotebookTabChanged:function(){
        core.bus.trigger('DOM_updated');
    },
    /**
     *openthetranslationviewforthecurrentfield
     *
     *@private
     *@param{MouseEvent}ev
     */
    _onTranslate:function(ev){
        ev.preventDefault();
        this.trigger_up('translate',{
            fieldName:ev.target.name,
            id:this.state.id,
            isComingFromTranslationAlert:true,
        });
    },
    /**
     *removealertfieldsofrecordfromalertFieldsobject
     *
     *@private
     *@param{MouseEvent}ev
     */
    _onTranslateNotificationClose:function(ev){
        deletethis.alertFields[this.state.res_id];
    },
});

returnFormRenderer;
});
