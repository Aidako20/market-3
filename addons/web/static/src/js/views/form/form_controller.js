flectra.define('web.FormController',function(require){
"usestrict";

varBasicController=require('web.BasicController');
varcore=require('web.core');
varDialog=require('web.Dialog');
vardialogs=require('web.view_dialogs');

var_t=core._t;
varqweb=core.qweb;

varFormController=BasicController.extend({
    custom_events:_.extend({},BasicController.prototype.custom_events,{
        button_clicked:'_onButtonClicked',
        edited_list:'_onEditedList',
        open_one2many_record:'_onOpenOne2ManyRecord',
        open_record:'_onOpenRecord',
        toggle_column_order:'_onToggleColumnOrder',
        focus_control_button:'_onFocusControlButton',
        form_dialog_discarded:'_onFormDialogDiscarded',
    }),
    /**
     *@override
     *
     *@param{boolean}params.hasActionMenus
     *@param{Object}params.toolbarActions
     */
    init:function(parent,model,renderer,params){
        this._super.apply(this,arguments);

        this.actionButtons=params.actionButtons;
        this.disableAutofocus=params.disableAutofocus;
        this.footerToButtons=params.footerToButtons;
        this.defaultButtons=params.defaultButtons;
        this.hasActionMenus=params.hasActionMenus;
        this.toolbarActions=params.toolbarActions||{};
    },
    /**
     *CalledeachtimetheformviewisattachedintotheDOM
     *
     *@todoconverttonewstyle
     */
    on_attach_callback:function(){
        this._super.apply(this,arguments);
        this.autofocus();
    },
    /**
     *Thishookiscalledwhenaformviewisrestored(byclickingonthe
     *breadcrumbs).Ingeneral,weforcemodebacktoreadonly,because
     *wheneverweleaveaformviewbystackinganotheractiononthetopof
     *it,itissaved,andshouldnolongerbeineditmode.However,thereis
     *aspecialcasefornewrecordsforwhichwestillwanttobein'edit'
     *asnorecordhasbeencreated(changeshavebeendiscardedbefore
     *leaving).
     *
     *@override
     */
    willRestore:function(){
        this.mode=this.model.isNew(this.handle)?'edit':'readonly';
    },

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *Callsautofocusontherenderer
     */
    autofocus:function(){
        if(!this.disableAutofocus){
            varisControlActivted=this.renderer.autofocus();
            if(!isControlActivted){
                //thiscanhappeninreadmodeiftherearenobuttonswith
                //btn-primaryclass
                if(this.$buttons&&this.mode==='readonly'){
                    returnthis.$buttons.find('.o_form_button_edit').focus();
                }
            }
        }
    },
    /**
     *Thismethodswitchestheformviewineditmode,withanewrecord.
     *
     *@todomakerecordcreationabasiccontrollerfeature
     *@param{string}[parentID]ifgiven,theparentIDwillbeusedasparent
     *                           forthenewrecord.
     *@param{Object}[additionalContext]
     *@returns{Promise}
     */
    createRecord:asyncfunction(parentID,additionalContext){
        constrecord=this.model.get(this.handle,{raw:true});
        consthandle=awaitthis.model.load({
            context:record.getContext({additionalContext:additionalContext}),
            fields:record.fields,
            fieldsInfo:record.fieldsInfo,
            modelName:this.modelName,
            parentID:parentID,
            res_ids:record.res_ids,
            type:'record',
            viewType:'form',
        });
        this.handle=handle;
        this._updateControlPanel();
        returnthis._setMode('edit');
    },
    /**
     *Returnsthecurrentres_id,wrappedinalist.Thisisonlyusedbythe
     *actionmenus(andthedebugmanager)
     *
     *@override
     *
     *@returns{number[]}either[currentres_id]or[]
     */
    getSelectedIds:function(){
        varenv=this.model.get(this.handle,{env:true});
        returnenv.currentId?[env.currentId]:[];
    },
    /**
     *@overridemethodfromAbstractController
     *@returns{string}
     */
    getTitle:function(){
        returnthis.model.getName(this.handle);
    },
    /**
     *AddthecurrentIDtothestatepushedintheurl.
     *
     *@override
     */
    getState:function(){
        conststate=this._super.apply(this,arguments);
        constenv=this.model.get(this.handle,{env:true});
        state.id=env.currentId;
        returnstate;
    },
    /**
     *Renderbuttonsforthecontrolpanel. Theformviewcanberenderedin
     *adialog,andinthatcase,ifwehavebuttonsdefinedinthefooter,we
     *havetousetheminsteadofthestandardbuttons.
     *
     *@overridemethodfromAbstractController
     *@param{jQuery}[$node]
     */
    renderButtons:function($node){
        var$footer=this.footerToButtons?this.renderer.$el&&this.renderer.$('footer'):null;
        varmustRenderFooterButtons=$footer&&$footer.length;
        if((this.defaultButtons&&!this.$buttons)||mustRenderFooterButtons){
            this.$buttons=$('<div/>');
            if(mustRenderFooterButtons){
                this.$buttons.append($footer);
            }else{
                this.$buttons.append(qweb.render("FormView.buttons",{widget:this}));
                this.$buttons.on('click','.o_form_button_edit',this._onEdit.bind(this));
                this.$buttons.on('click','.o_form_button_create',this._onCreate.bind(this));
                this.$buttons.on('click','.o_form_button_save',this._onSave.bind(this));
                this.$buttons.on('click','.o_form_button_cancel',this._onDiscard.bind(this));
                this._assignSaveCancelKeyboardBehavior(this.$buttons.find('.o_form_buttons_edit'));
                this.$buttons.find('.o_form_buttons_edit').tooltip({
                    delay:{show:200,hide:0},
                    title:function(){
                        returnqweb.render('SaveCancelButton.tooltip');
                    },
                    trigger:'manual',
                });
            }
        }
        if(this.$buttons&&$node){
            this.$buttons.appendTo($node);
        }
    },
    /**
     *Theformviewhastopreventaclickonthepageriftheformisdirty
     *
     *@overridemethodfromBasicController
     *@param{jQueryElement}$node
     *@param{Object}options
     *@returns{Promise}
     */
    _getPagingInfo:function(){
        //Onlydisplaythepagerifwearenotonanewrecord.
        if(this.model.isNew(this.handle)){
            returnnull;
        }
        returnObject.assign(this._super(...arguments),{
            validate:this.canBeDiscarded.bind(this),
        });
    },
    /**
     *@override
     *@private
     **/
    _getActionMenuItems:function(state){
        if(!this.hasActionMenus||this.mode==='edit'){
            returnnull;
        }
        constprops=this._super(...arguments);
        constactiveField=this.model.getActiveField(state);
        constotherActionItems=[];
        if(this.archiveEnabled&&activeFieldinstate.data){
            if(state.data[activeField]){
                otherActionItems.push({
                    description:_t("Archive"),
                    callback:()=>{
                        Dialog.confirm(this,_t("Areyousurethatyouwanttoarchivethisrecord?"),{
                            confirm_callback:()=>this._toggleArchiveState(true),
                        });
                    },
                });
            }else{
                otherActionItems.push({
                    description:_t("Unarchive"),
                    callback:()=>this._toggleArchiveState(false),
                });
            }
        }
        if(this.activeActions.create&&this.activeActions.duplicate){
            otherActionItems.push({
                description:_t("Duplicate"),
                callback:()=>this._onDuplicateRecord(this),
            });
        }
        if(this.activeActions.delete){
            otherActionItems.push({
                description:_t("Delete"),
                callback:()=>this._onDeleteRecord(this),
            });
        }
        returnObject.assign(props,{
            items:Object.assign(this.toolbarActions,{other:otherActionItems}),
        });
    },
    /**
     *Showawarningmessageiftheusermodifiedatranslatedfield. Foreach
     *field,thenotificationprovidesalinktoeditthefield'stranslations.
     *
     *@override
     */
    saveRecord:asyncfunction(){
        constchangedFields=awaitthis._super(...arguments);
        //thetitlecouldhavebeenchanged
        this._updateControlPanel();

        if(_t.database.multi_lang&&changedFields.length){
            //needtomakesurechangedfieldsthatshouldbetranslated
            //aredisplayedwithanalert
            varfields=this.renderer.state.fields;
            vardata=this.renderer.state.data;
            varalertFields={};
            for(vark=0;k<changedFields.length;k++){
                varfield=fields[changedFields[k]];
                varfieldData=data[changedFields[k]];
                if(field.translate&&fieldData&&fieldData!=='<p><br></p>'){
                    alertFields[changedFields[k]]=field;
                }
            }
            if(!_.isEmpty(alertFields)){
                this.renderer.updateAlertFields(alertFields);
            }
        }
        returnchangedFields;
    },
    /**
     *OverridestoforcetheviewTypeto'form',sothatweensurethatthe
     *correctfieldsarereloaded(thisisonlyusefulforone2manyformviews).
     *
     *@override
     */
    update:asyncfunction(params,options){
        if('currentId'inparams&&!params.currentId){
            this.mode='edit';//ifthereisnorecord,wearein'edit'mode
        }
        params=_.extend({viewType:'form',mode:this.mode},params);
        awaitthis._super(params,options);
        this.autofocus();
    },
    /**
     *@override
     */
    updateButtons:function(){
        if(!this.$buttons){
            return;
        }
        if(this.footerToButtons){
            var$footer=this.renderer.$el&&this.renderer.$('footer');
            if($footer&&$footer.length){
                this.$buttons.empty().append($footer);
            }
        }
        varedit_mode=(this.mode==='edit');
        this.$buttons.find('.o_form_buttons_edit')
            .toggleClass('o_hidden',!edit_mode);
        this.$buttons.find('.o_form_buttons_view')
            .toggleClass('o_hidden',edit_mode);
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *@override
     */
    _applyChanges:asyncfunction(){
        constresult=awaitthis._super.apply(this,arguments);
        core.bus.trigger('DOM_updated');
        returnresult;
    },
    /**
     *Assignonthebuttonssaveanddiscardadditionnalbehaviortofacilitate
     *theworkoftheusersdoinginputonlyusingthekeyboard
     *
     *@param{jQueryElement}$saveCancelButtonContainer Thedivcontainingthe
     *saveandcancelbuttons
     *@private
     */
    _assignSaveCancelKeyboardBehavior:function($saveCancelButtonContainer){
        varself=this;
        $saveCancelButtonContainer.children().on('keydown',function(e){
            switch(e.which){
                case$.ui.keyCode.ENTER:
                    e.preventDefault();
                    self.saveRecord();
                    break;
                case$.ui.keyCode.ESCAPE:
                    e.preventDefault();
                    self._discardChanges();
                    break;
                case$.ui.keyCode.TAB:
                    if(!e.shiftKey&&e.target.classList.contains('btn-primary')){
                        $saveCancelButtonContainer.tooltip('show');
                        e.preventDefault();
                    }
                    break;
            }
        });
    },
    /**
     *Whenasaveoperationhasbeenconfirmedfromthemodel,thismethodis
     *called.
     *
     *@private
     *@overridemethodfromfieldmanagermixin
     *@param{string}id-idofthepreviouslychangedrecord
     *@returns{Promise}
     */
    _confirmSave:function(id){
        if(id===this.handle){
            if(this.mode==='readonly'){
                returnthis.reload();
            }else{
                returnthis._setMode('readonly');
            }
        }else{
            //Asubrecordhaschanged,soupdatethecorrespondingrelationalfield
            //i.e.theonewhosevalueisarecordwiththegivenidoralist
            //havingarecordwiththegivenidinitsdata
            varrecord=this.model.get(this.handle);

            //Callbackfunctionwhichreturnstrue
            //ifavaluerecursivelycontainsarecordwiththegivenid.
            //Thiswillbeusedtodeterminethelistoffieldstoreload.
            varcontainsChangedRecord=function(value){
                return_.isObject(value)&&
                    (value.id===id||_.find(value.data,containsChangedRecord));
            };

            varchangedFields=_.findKey(record.data,containsChangedRecord);
            returnthis.renderer.confirmChange(record,record.id,[changedFields]);
        }
    },
    /**
     *Overridetodisablebuttonsintherenderer.
     *
     *@override
     *@private
     */
    _disableButtons:function(){
        this._super.apply(this,arguments);
        this.renderer.disableButtons();
    },
    /**
     *Overridetoenablebuttonsintherenderer.
     *
     *@override
     *@private
     */
    _enableButtons:function(){
        this._super.apply(this,arguments);
        this.renderer.enableButtons();
    },
    /**
     *Hookmethod,calledwhenrecord(s)hasbeendeleted.
     *
     *@override
     */
    _onDeletedRecords:function(){
        varstate=this.model.get(this.handle,{raw:true});
        if(!state.res_ids.length){
            this.trigger_up('history_back');
        }else{
            this._super.apply(this,arguments);
        }
    },
    /**
     *Overridestoreloadtheformwhensavingfailedinreadonly(e.g.after
     *achangeonawidgetlikepriorityorstatusbar).
     *
     *@override
     *@private
     */
    _rejectSave:function(){
        if(this.mode==='readonly'){
            returnthis.reload();
        }
        returnthis._super.apply(this,arguments);
    },
    /**
     *CallsunfreezeOrderwhenchangingthemode.
     *Also,whenthereisachangeofmode,thetrackingoflastactivated
     *fieldisreset,sothatthefollowingfieldactivationprocessstarts
     *withthe1stfield.
     *
     *@override
     */
    _setMode:function(mode,recordID){
        if((recordID||this.handle)===this.handle){
            this.model.unfreezeOrder(this.handle);
        }
        if(this.mode!==mode){
            this.renderer.resetLastActivatedField();
        }
        returnthis._super.apply(this,arguments);
    },
    /**
     *@override
     */
    _shouldBounceOnClick(element){
        returnthis.mode==='readonly'&&!!element.closest('.oe_title,.o_inner_group');
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *@private
     *@param{FlectraEvent}ev
     */
    _onButtonClicked:function(ev){
        //stoptheevent'spropagationasaformcontrollermighthaveother
        //formcontrollersinitsdescendants(e.g.inaFormViewDialog)
        ev.stopPropagation();
        varself=this;
        vardef;

        this._disableButtons();

        functionsaveAndExecuteAction(){
            returnself.saveRecord(self.handle,{
                stayInEdit:true,
            }).then(function(){
                //weneedtoregettherecordtomakesurewehavechangesmade
                //bythebasicmodel,suchasthenewres_id,iftherecordis
                //new.
                varrecord=self.model.get(ev.data.record.id);
                returnself._callButtonAction(attrs,record);
            });
        }
        varattrs=ev.data.attrs;
        if(attrs.confirm){
            def=newPromise(function(resolve,reject){
                Dialog.confirm(self,attrs.confirm,{
                    confirm_callback:saveAndExecuteAction,
                }).on("closed",null,resolve);
            });
        }elseif(attrs.special==='cancel'){
            def=this._callButtonAction(attrs,ev.data.record);
        }elseif(!attrs.special||attrs.special==='save'){
            //savetherecordbutdon'tswitchtoreadonlymode
            def=saveAndExecuteAction();
        }else{
            console.warn('Unhandledbuttonevent',ev);
            return;
        }

        //KindofhackforFormViewDialog:buttononfootershouldtriggerthedialogclosing
        //ifthe`close`attributeisset
        def.then(function(){
            self._enableButtons();
            if(attrs.close){
                self.trigger_up('close_dialog');
            }
        }).guardedCatch(this._enableButtons.bind(this));
    },
    /**
     *Calledwhentheuserwantstocreateanewrecord->@seecreateRecord
     *
     *@private
     */
    _onCreate:function(){
        this.createRecord();
    },
    /**
     *Deletesthecurrentrecord
     *
     *@private
     */
    _onDeleteRecord:function(){
        this._deleteRecords([this.handle]);
    },
    /**
     *Calledwhentheuserwantstodiscardthechangesmadetothecurrent
     *record->@seediscardChanges
     *
     *@private
     */
    _onDiscard:function(){
        this._disableButtons();
        this._discardChanges()
            .then(this._enableButtons.bind(this))
            .guardedCatch(this._enableButtons.bind(this));
    },
    /**
     *Calledwhentheuserclickson'DuplicateRecord'intheactionmenus
     *
     *@private
     */
    _onDuplicateRecord:asyncfunction(){
        consthandle=awaitthis.model.duplicateRecord(this.handle);
        this.handle=handle;
        this._updateControlPanel();
        this._setMode('edit');
    },
    /**
     *Calledwhentheuserwantstoeditthecurrentrecord->@see_setMode
     *
     *@private
     */
    _onEdit:function(){
        this._disableButtons();
        //waitforpotentialpendingchangestobesaved(donewithwidgets
        //allowingtoeditinreadonly)
        this.mutex.getUnlockedDef()
            .then(this._setMode.bind(this,'edit'))
            .then(this._enableButtons.bind(this))
            .guardedCatch(this._enableButtons.bind(this));
    },
    /**
     *Thismethodiscalledwhensomeonetriestofreezetheorder,mostlikely
     *inax2manylistview
     *
     *@private
     *@param{FlectraEvent}ev
     *@param{integer}ev.idofthelisttofreezewhileeditingaline
     */
    _onEditedList:function(ev){
        ev.stopPropagation();
        if(ev.data.id){
            this.model.save(ev.data.id,{savePoint:true});
        }
        this.model.freezeOrder(ev.data.id);
    },
    /**
     *Setthefocusonthefirstprimarybuttonofthecontroller(likelyEdit)
     *
     *@private
     *@param{FlectraEvent}event
     */
    _onFocusControlButton:function(e){
        if(this.$buttons){
            e.stopPropagation();
            this.$buttons.find('.btn-primary:visible:first()').focus();
        }
    },
    /**
     *ResetthefocusonthecontrolthatopennedaDialogafteritwasclosed
     *
     *@private
     *@param{FlectraEvent}event
     */
    _onFormDialogDiscarded:function(ev){
        ev.stopPropagation();
        varisFocused=this.renderer.focusLastActivatedWidget();
        if(ev.data.callback){
            ev.data.callback(_.str.toBool(isFocused));
        }
    },
    /**
     *Opensaone2manyrecord(potentiallynew)inadialog.Thishandleris
     *o2mspecificasinthiscase,thechangesdoneontherelatedrecord
     *shouldn'tbesavedinDBwhentheuserclickson'Save'inthedialog,
     *butlateronwhenheclickson'Save'inthemainformview.Forthisto
     *workcorrectly,themainmodelandthelocalidoftheopenedrecordmust
     *begiventothedialog,whichwillcompletetheviewInfooftherecord
     *withtheoneoftheformview.
     *
     *@private
     *@param{FlectraEvent}ev
     */
    _onOpenOne2ManyRecord:asyncfunction(ev){
        ev.stopPropagation();
        vardata=ev.data;
        varrecord;
        if(data.id){
            record=this.model.get(data.id,{raw:true});
        }

        //Syncwiththemutextowaitforpotentialonchanges
        awaitthis.model.mutex.getUnlockedDef();

        newdialogs.FormViewDialog(this,{
            context:data.context,
            domain:data.domain,
            fields_view:data.fields_view,
            model:this.model,
            on_saved:data.on_saved,
            on_remove:data.on_remove,
            parentID:data.parentID,
            readonly:data.readonly,
            deletable:record?data.deletable:false,
            recordID:record&&record.id,
            res_id:record&&record.res_id,
            res_model:data.field.relation,
            shouldSaveLocally:true,
            title:(record?_t("Open:"):_t("Create"))+(ev.target.string||data.field.string),
        }).open();
    },
    /**
     *Openanexistingrecordinaformviewdialog
     *
     *@private
     *@param{FlectraEvent}ev
     */
    _onOpenRecord:function(ev){
        ev.stopPropagation();
        varself=this;
        varrecord=this.model.get(ev.data.id,{raw:true});
        newdialogs.FormViewDialog(self,{
            context:ev.data.context,
            fields_view:ev.data.fields_view,
            on_saved:ev.data.on_saved,
            on_remove:ev.data.on_remove,
            readonly:ev.data.readonly,
            deletable:ev.data.deletable,
            res_id:record.res_id,
            res_model:record.model,
            title:_t("Open:")+ev.data.string,
        }).open();
    },
    /**
     *Calledwhentheuserwantstosavethecurrentrecord->@seesaveRecord
     *
     *@private
     *@param{MouseEvent}ev
     */
    _onSave:function(ev){
        ev.stopPropagation();//Preventx2mlinestobeauto-saved
        this._disableButtons();
        this.saveRecord().then(this._enableButtons.bind(this)).guardedCatch(this._enableButtons.bind(this));
    },
    /**
     *Thismethodiscalledwhensomeonetriestosortacolumn,mostlikely
     *inax2manylistview
     *
     *@private
     *@param{FlectraEvent}ev
     */
    _onToggleColumnOrder:function(ev){
        ev.stopPropagation();
        varself=this;
        this.model.setSort(ev.data.id,ev.data.name).then(function(){
            varfield=ev.data.field;
            varstate=self.model.get(self.handle);
            self.renderer.confirmChange(state,state.id,[field]);
        });
    },
    /**
     *Calledwhenclickingon'Archive'or'Unarchive'intheactionmenus.
     *
     *@private
     *@param{boolean}archive
     */
    _toggleArchiveState:function(archive){
        constresIds=this.model.localIdsToResIds([this.handle]);
        this._archive(resIds,archive);
    },
});

returnFormController;

});
