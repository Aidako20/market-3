flectra.define('web.ActWindowActionManager',function(require){
"usestrict";

/**
 *ThepurposeofthisfileistoaddthesupportofFlectraactionsoftype
 *'ir.actions.act_window'totheActionManager.
 */

varActionManager=require('web.ActionManager');
varconfig=require('web.config');
varContext=require('web.Context');
varcore=require('web.core');
varpyUtils=require('web.py_utils');
varview_registry=require('web.view_registry');

ActionManager.include({
    custom_events:_.extend({},ActionManager.prototype.custom_events,{
        execute_action:'_onExecuteAction',
        switch_view:'_onSwitchView',
    }),

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *Overridetohandlethecaseoflazy-loadedcontrollers,whichmaybethe
     *lastcontrollerinthestack,butwhichshouldnotbeconsideredas
     *currentcontrollerastheydon'thaveanalivewidget.
     *
     *Note:thisfunctionassumesthattherecanbeatmostonelazyloaded
     *controllerinthestack
     *
     *@override
     */
    getCurrentController:function(){
        varcurrentController=this._super.apply(this,arguments);
        varaction=currentController&&this.actions[currentController.actionID];
        if(action&&action.type==='ir.actions.act_window'&&!currentController.widget){
            varlastControllerID=this.controllerStack.pop();
            currentController=this._super.apply(this,arguments);
            this.controllerStack.push(lastControllerID);
        }
        returncurrentController;
    },
    /**
     *Overridestohandlethecasewherean'ir.actions.act_window'hastobe
     *loaded.
     *
     *@override
     *@param{Object}state
     *@param{integer|string}[state.action]theIDorxmlIDoftheactionto
     *  execute
     *@param{integer}[state.active_id]
     *@param{string}[state.active_ids]
     *@param{integer}[state.id]
     *@param{integer}[state.view_id=false]
     *@param{string}[state.view_type]
     */
    loadState:function(state){
        var_super=this._super.bind(this);
        varaction;
        varoptions={
            clear_breadcrumbs:true,
            pushState:false,
        };
        if(state.action){
            varcurrentController=this.getCurrentController();
            varcurrentAction=currentController&&this.actions[currentController.actionID];
            if(currentAction&&currentAction.id===state.action&&
                currentAction.type==='ir.actions.act_window'){
                //theactiontoloadisalreadythecurrentone,soupdateit
                this._closeDialog(true);//theremaybeacurrentlyopeneddialog,closeit
                varviewOptions={currentId:state.id};
                varviewType=state.view_type||currentController.viewType;
                returnthis._switchController(currentAction,viewType,viewOptions);
            }elseif(!core.action_registry.contains(state.action)){
                //theactiontoloadisn'tthecurrentone,soexecuteit
                varcontext={};
                if(state.active_id){
                    context.active_id=state.active_id;
                }
                if(state.active_ids){
                    //jQuery'sBBQplugindoessomeparsingonvaluesthatarevalidintegers
                    //whichmeansthatifthere'sonlyoneitem,itwilldoparseInt()onit,
                    //otherwiseitwillkeepthecommaseperatedlistasstring
                    context.active_ids=state.active_ids.toString().split(',').map(function(id){
                        returnparseInt(id,10)||id;
                    });
                }elseif(state.active_id){
                    context.active_ids=[state.active_id];
                }
                context.params=state;
                action=state.action;
                options=_.extend(options,{
                    additional_context:context,
                    resID:state.id||undefined, //emptystringwithbbq
                    viewType:state.view_type,
                });
            }
        }elseif(state.model&&state.id){
            action={
                res_model:state.model,
                res_id:state.id,
                type:'ir.actions.act_window',
                views:[[state.view_id||false,'form']],
            };
        }elseif(state.model&&state.view_type){
            //thisisawindowactiononamulti-recordview,sorestoreit
            //fromthesessionstorage
            varstoredAction=this.call('session_storage','getItem','current_action');
            varlastAction=JSON.parse(storedAction||'{}');
            if(lastAction.res_model===state.model){
                action=lastAction;
                options.viewType=state.view_type;
            }
        }
        if(action){
            returnthis.doAction(action,options);
        }
        return_super.apply(this,arguments);
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *Instantiatesthecontrollerforagivenactionandviewtype,andaddsit
     *tothelistofcontrollersintheaction.
     *
     *@private
     *@param{Object}action
     *@param{AbstractController[]}action.controllersthealreadycreated
     *  controllersforthisaction
     *@param{Object[]}action.viewstheviewsavailablefortheaction,each
     *  onecontainingitsfieldsView
     *@param{Object}action.env
     *@param{string}viewType
     *@param{Object}[viewOptions]dictofoptionspassedtotheinitialization
     *  ofthecontroller'swidget
     *@param{Object}[options]
     *@param{string}[options.controllerID=false]whenthecontrollerhas
     *  previouslybeenlazy-loaded,wewanttokeepitsjsIDwhenloadingit
     *@param{integer}[options.index=0]thecontroller'sindexinthestack
     *@param{boolean}[options.lazy=false]settotruetodifferthe
     *  initializationofthecontroller'swidget
     *@returns{Promise<Object>}resolvedwiththecreatedcontroller
     */
    _createViewController:function(action,viewType,viewOptions,options){
        varself=this;
        varviewDescr=_.findWhere(action.views,{type:viewType});
        if(!viewDescr){
            //therequestedviewtypeisn'tspecifiedintheaction(e.g.
            //actionwithlistviewonly,userclicksonarowinthelist,it
            //triestoswitchtoformview)
            returnPromise.reject();
        }

        options=options||{};
        varindex=options.index||0;
        varcontrollerID=options.controllerID||_.uniqueId('controller_');
        varcontroller={
            actionID:action.jsID,
            className:'o_act_window',//usedtoremovethepaddingindialogs
            index:index,
            jsID:controllerID,
            viewType:viewType,
        };
        Object.defineProperty(controller,'title',{
            get:function(){
                //handlethecasewherethewidgetislazyloaded
                returncontroller.widget?
                       controller.widget.getTitle():
                       (action.display_name||action.name);
            },
        });
        this.controllers[controllerID]=controller;

        if(!options.lazy){
            //buildtheviewoptionsfromdifferentsources
            varflags=action.flags||{};
            viewOptions=_.extend({},flags,flags[viewType],viewOptions,{
                action:action,
                breadcrumbs:this._getBreadcrumbs(this.controllerStack.slice(0,index)),
                //passthecontrollerIDtotheviewsasanhookforfurther
                //communicationwithtrigger_up
                controllerID:controllerID,
            });
            varrejection;
            varview=newviewDescr.Widget(viewDescr.fieldsView,viewOptions);
            vardef=newPromise(function(resolve,reject){
                rejection=reject;
                view.getController(self).then(function(widget){
                    if(def.rejected){
                        //thepromisehasbeenrejectedmeanwhile,meaningthat
                        //theactionhasbeenremoved,sosimplydestroythewidget
                        widget.destroy();
                    }else{
                        controller.widget=widget;
                        resolve(controller);
                    }
                }).guardedCatch(reject);
            });
            //Needtodefineanrejectpropertytocallitinto_destroyWindowAction
            def.reject=rejection;
            def.guardedCatch(function(){
                def.rejected=true;
                deleteself.controllers[controllerID];
            });
            action.controllers[viewType]=def;
        }else{
            action.controllers[viewType]=Promise.resolve(controller);
        }
        returnaction.controllers[viewType];
    },
    /**
     *Destroysthecontrollersandsearchviewofagivenactionoftype
     *'ir.actions.act_window'.
     *
     *@private
     *@param{Object}action
     */
    _destroyWindowAction:function(action){
        varself=this;
        for(varcinaction.controllers){
            varcontrollerDef=action.controllers[c];
            controllerDef.then(function(controller){
                deleteself.controllers[controller.jsID];
                if(controller.widget){
                    controller.widget.destroy();
                }
            });
            //IfcontrollerDefisnotresolvedyet,rejectitsothatthe
            //controllerwillbecorrectlydestroyedassoonasit'llbeready,
            //anditsreferencewillberemoved.Lazy-loadedcontrollersdo
            //nothavearejectfunctionontheirpromise
            if(controllerDef.reject){
                controllerDef.reject();
            }
        }
    },
    /**
     *Executesactionsoftype'ir.actions.act_window'.
     *
     *@private
     *@param{Object}actionthedescriptionoftheactiontoexecute
     *@param{Array}action.viewslistoftuples[viewID,viewType]
     *@param{Object}options@seedoActionfordetails
     *@param{integer}[options.resID]thecurrentresID
     *@param{string}[options.viewType]theviewtoopen
     *@returns{Promise}resolvedwhentheactionisappendedtotheDOM
     */
    _executeWindowAction:function(action,options){
        varself=this;
        returnthis.dp.add(this._loadViews(action)).then(function(fieldsViews){
            varviews=self._generateActionViews(action,fieldsViews);
            action._views=action.views;//savetheinitialattribute
            action.views=views;
            action.controlPanelFieldsView=fieldsViews.search;
            action.controllers={};

            //selectthecurrentviewtodisplay,andoptionallythemainview
            //oftheactionwhichwillbelazyloaded
            varcurView=options.viewType&&_.findWhere(views,{type:options.viewType});
            varlazyView;
            if(curView){
                if(!curView.multiRecord&&views[0].multiRecord){
                    lazyView=views[0];
                }
            }else{
                curView=views[0];
            }

            //usemobile-friendlyviewbydefaultinmobile,ifpossible
            if(config.device.isMobile){
                if(!curView.isMobileFriendly){
                    curView=self._findMobileView(views,curView.multiRecord)||curView;
                }
                if(lazyView&&!lazyView.isMobileFriendly){
                    lazyView=self._findMobileView(views,lazyView.multiRecord)||lazyView;
                }
            }

            varlazyViewDef;
            varlazyControllerID;
            if(lazyView){
                //ifthemainviewislazy-loaded,its(lazy-loaded)controllerisinserted
                //intothecontrollerstack(sothatbreadcrumbscanbecorrectlycomputed),
                //soweforceclear_breadcrumbstofalsesothatitwon'tberemovedwhenthe
                //currentcontrollerwillbeinsertedafterwards
                options.clear_breadcrumbs=false;
                //thiscontrollerbeinglazy-loaded,thiscallisactuallysync
                lazyViewDef=self._createViewController(action,lazyView.type,{},{lazy:true})
                    .then(function(lazyLoadedController){
                        lazyControllerID=lazyLoadedController.jsID;
                        self.controllerStack.push(lazyLoadedController.jsID);
                    });
            }
            returnself.dp.add(Promise.resolve(lazyViewDef))
                .then(function(){
                    varviewOptions={
                        controllerState:options.controllerState,
                        currentId:options.resID,
                    };
                    varcurViewDef=self._createViewController(action,curView.type,viewOptions,{
                        index:self._getControllerStackIndex(options),
                    });
                    returnself.dp.add(curViewDef);
                })
                .then(function(controller){
                    action.controllerID=controller.jsID;
                    returnself._executeAction(action,options);
                })
                .guardedCatch(function(){
                    if(lazyControllerID){
                        varindex=self.controllerStack.indexOf(lazyControllerID);
                        self.controllerStack=self.controllerStack.slice(0,index);
                    }
                    self._destroyWindowAction(action);
                });
        });
    },
    /**
     *Helperfunctiontofindthefirstmobile-friendlyview,ifany.
     *
     *@private
     *@param{Array}viewsanarrayofviews
     *@param{boolean}multiRecordsettotrueiffwesearchforamultiRecord
     *  view
     *@returns{Object|undefined}amobile-friendlyviewoftherequested
     *  multiRecordtype,undefinedifthereisnosuchview
     */
    _findMobileView:function(views,multiRecord){
        return_.findWhere(views,{
            isMobileFriendly:true,
            multiRecord:multiRecord,
        });
    },
    /**
     *Generatethedescriptionoftheviewsofagivenaction.Foreachview,
     *itgeneratesadictwithinformationlikethefieldsView,theviewtype,
     *theWidgettouse...
     *
     *@private
     *@param{Object}action
     *@param{Object}fieldsViews
     *@returns{Object}
     */
    _generateActionViews:function(action,fieldsViews){
        varviews=[];
        _.each(action.views,function(view){
            varviewType=view[1];
            varfieldsView=fieldsViews[viewType];
            varparsedXML=newDOMParser().parseFromString(fieldsView.arch,"text/xml");
            varkey=parsedXML.documentElement.getAttribute('js_class');
            varView=view_registry.get(key||viewType);
            if(View){
                views.push({
                    accessKey:View.prototype.accessKey||View.prototype.accesskey,
                    displayName:View.prototype.display_name,
                    fieldsView:fieldsView,
                    icon:View.prototype.icon,
                    isMobileFriendly:View.prototype.mobile_friendly,
                    multiRecord:View.prototype.multi_record,
                    type:viewType,
                    viewID:view[0],
                    Widget:View,
                });
            }elseif(config.isDebug('assets')){
                console.log("Viewtype'"+viewType+"'isnotpresentintheviewregistry.");
            }
        });
        returnviews;
    },
    /**
     *Overridestoaddspecificinformationforcontrollersfromactionsof
     *type'ir.actions.act_window',liketheres_modelandtheview_type.
     *
     *@override
     *@private
     */
    _getControllerState:function(controllerID){
        varstate=this._super.apply(this,arguments);
        varcontroller=this.controllers[controllerID];
        varaction=this.actions[controller.actionID];
        if(action.type==='ir.actions.act_window'){
            state.model=action.res_model;
            state.view_type=controller.viewType;
        }
        returnstate;
    },
    /**
     *Overridestohandlethe'ir.actions.act_window'actions.
     *
     *@override
     *@private
     */
    _handleAction:function(action,options){
        if(action.type==='ir.actions.act_window'){
            returnthis._executeWindowAction(action,options);
        }
        returnthis._super.apply(this,arguments);
    },
    /**
     *Loadsthefields_viewsandfieldsforthegivenaction.
     *
     *@private
     *@param{Object}action
     *@returns{Promise}
     */
    _loadViews:function(action){
        varinDialog=action.target==='new';
        varinline=action.target==='inline';
        varoptions={
            action_id:action.id,
            toolbar:!inDialog&&!inline,
        };
        varviews=action.views.slice();
        if(!inline&&!(inDialog&&action.views[0][1]==='form')){
            options.load_filters=true;
            varsearchviewID=action.search_view_id&&action.search_view_id[0];
            views.push([searchviewID||false,'search']);
        }
        returnthis.loadViews(action.res_model,action.context,views,options);
    },
    /**
     *Overridestohandlethecaseof'ir.actions.act_window'actions,i.e.
     *destroysallcontrollersassociatedtothegivenaction,anditssearch
     *view.
     *
     *@override
     *@private
     */
    _removeAction:function(actionID){
        varaction=this.actions[actionID];
        if(action.type==='ir.actions.act_window'){
            deletethis.actions[action.jsID];
            this._destroyWindowAction(action);
        }else{
            this._super.apply(this,arguments);
        }
    },
    /**
     *Overridestohandlethecasewherethecontrollertorestoreisfroman
     *'ir.actions.act_window'action.Inthiscase,onlythecontrollers
     *stackedovertheonetorestore*thatarenotfromthesameaction*are
     *destroyed.
     *Forinstance,whengoingbacktothelistcontrollerfromaform
     *controllerofthesameactionusingthebreadcrumbs,theformcontroller
     *isn'tdestroyed,asitmightbereusedinthefuture.
     *
     *@override
     *@private
     */
    _restoreController:function(controllerID){
        varself=this;
        varcontroller=this.controllers[controllerID];
        varaction=this.actions[controller.actionID];
        if(action.type==='ir.actions.act_window'){
            returnthis.clearUncommittedChanges().then(function(){
                //AAB:thiswillbedonedirectlyinAbstractAction'srestore
                //function
                vardef=Promise.resolve();
                if(action.on_reverse_breadcrumb){
                    def=action.on_reverse_breadcrumb();
                }
                returnPromise.resolve(def).then(function(){
                    returnself._switchController(action,controller.viewType);
                });
            });
        }
        returnthis._super.apply(this,arguments);
    },
    /**
     *Handlestheswitchfromacontrollertoanother(eitherinsidethesame
     *windowaction,orfromawindowactiontoanotherusingthebreadcrumbs).
     *
     *@private
     *@param{Object}controllerthecontrollertoswitchto
     *@param{Object}[viewOptions]
     *@return{Promise}resolvedwhenthenewcontrollerisintheDOM
     */
    _switchController:function(action,viewType,viewOptions){
        varself=this;
        varview=_.findWhere(action.views,{type:viewType});
        if(!view){
            //can'tswitchtoanunknownview
            returnPromise.reject();
        }

        varcurrentController=this.getCurrentController();
        varindex;
        if(currentController.actionID!==action.jsID){
            //therequestedcontrollerisfromanotheraction,sowewentback
            //toapreviousactionusingthebreadcrumbs
            varcontroller=_.findWhere(this.controllers,{
                actionID:action.jsID,
                viewType:viewType,
            });
            index=_.indexOf(this.controllerStack,controller.jsID);
        }else{
            //therequestedcontrollerisfromthesameactionasthecurrent
            //one,soweeither
            //  1)goonestepbackfromamonorecordviewtoamultirecord
            //     oneusingthebreadcrumbs
            //  2)orweswitchedfromaviewtoanother usingtheview
            //     switcher
            //  3)orweopenedarecordfromamultirecordview
            if(view.multiRecord){
                //cases1)and2)(withmultirecordviews):replacethefirst
                //controllerlinkedtothesameactioninthestack
                index=_.findIndex(this.controllerStack,function(controllerID){
                    returnself.controllers[controllerID].actionID===action.jsID;
                });
            }elseif(!_.findWhere(action.views,{type:currentController.viewType}).multiRecord){
                //case2)(withmonorecordviews):replacethelast
                //controllerbythenewoneiftheyarefromthesameaction
                //andiftheybotharemonorecord
                index=this.controllerStack.length-1;
            }else{
                //case3):insertthecontrolleronthetopofthecontroller
                //stack
                index=this.controllerStack.length;
            }
        }

        varnewController=function(controllerID){
            varoptions={
                controllerID:controllerID,
                index:index,
            };
            returnself
                ._createViewController(action,viewType,viewOptions,options)
                .then(function(controller){
                    returnself._startController(controller);
                });
        };

        varcontrollerDef=action.controllers[viewType];
        if(controllerDef){
            controllerDef=controllerDef.then(function(controller){
                if(!controller.widget){
                    //lazyloaded->loaditnow(withsamejsID)
                    returnnewController(controller.jsID);
                }else{
                    returnPromise.resolve(controller.widget.willRestore()).then(function(){
                        viewOptions=_.extend({},viewOptions,{
                            breadcrumbs:self._getBreadcrumbs(self.controllerStack.slice(0,index)),
                            shouldUpdateSearchComponents:true,
                        });
                        returncontroller.widget.reload(viewOptions).then(function(){
                            returncontroller;
                        });
                    });
                }
            },function(){
                //ifthecontrollerDefisrejected,itprobablymeansthatthejs
                //codeortherequestsmadetotheservercrashed. Inthatcase,
                //ifwereusethesamepromise,thentheswitchtotheviewis
                //definitelyblocked. Wewanttouseanewcontroller,eventhough
                //itisverylikelythatitwillrecrashagain. Atleast,itwill
                //givemorefeedbacktotheuser,anditcouldhappenthatone
                //recordcrashes,butnotanother.
                returnnewController();
            });
        }else{
            controllerDef=newController();
        }

        returnthis.dp.add(controllerDef).then(function(controller){
            returnself._pushController(controller);
        });
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *Handlerforevent'execute_action',whichistypicallycalledwhena
     *buttonisclicked.Thebuttonmaybeoftype'object'(callagiven
     *methodofagivenmodel)or'action'(executeagivenaction).
     *Alternatively,thebuttonmayhavetheattribute'special',andinthis
     *casean'ir.actions.act_window_close'isexecuted.
     *
     *@private
     *@param{FlectraEvent}ev
     *@param{Object}ev.data.action_datatypically,thehtmlattributesofthe
     *  buttonextendedwithadditionalinformationlikethecontext
     *@param{Object}[ev.data.action_data.special=false]
     *@param{Object}[ev.data.action_data.type]'object'or'action',ifset
     *@param{Object}ev.data.env
     *@param{function}[ev.data.on_closed]
     *@param{function}[ev.data.on_fail]
     *@param{function}[ev.data.on_success]
     */
    _onExecuteAction:function(ev){
        ev.stopPropagation();
        varself=this;
        varactionData=ev.data.action_data;
        varenv=ev.data.env;
        varcontext=newContext(env.context,actionData.context||{});
        varrecordID=env.currentID||null;//pyUtilshandlesnullvalue,notundefined
        vardef;

        //determinetheactiontoexecuteaccordingtotheactionData
        if(actionData.special){
            def=Promise.resolve({
                type:'ir.actions.act_window_close',
                infos:{special:true},
            });
        }elseif(actionData.type==='object'){
            //callaPythonObjectmethod,whichmayreturnanactiontoexecute
            varargs=recordID?[[recordID]]:[env.resIDs];
            if(actionData.args){
                try{
                    //warning:quotesanddoublequotesproblemduetojsonandxmlclash
                    //maybeweshouldforceescapinginxmlordoabetterparseoftheargsarray
                    varadditionalArgs=JSON.parse(actionData.args.replace(/'/g,'"'));
                    args=args.concat(additionalArgs);
                }catch(e){
                    console.error("CouldnotJSON.parsearguments",actionData.args);
                }
            }
            def=this._rpc({
                route:'/web/dataset/call_button',
                params:{
                    args:args,
                    kwargs:{context:context.eval()},
                    method:actionData.name,
                    model:env.model,
                },
            });
        }elseif(actionData.type==='action'){
            //executeagivenaction,soloaditfirst
            def=this._loadAction(actionData.name,_.extend(pyUtils.eval('context',context),{
                active_model:env.model,
                active_ids:env.resIDs,
                active_id:recordID,
            }));
        }else{
            def=Promise.reject();
        }

        //usetheDropPrevioustopreventfromexecutingthehandlerifanother
        //request(doAction,switchView...)hasbeendonemeanwhile;execute
        //thefailhandlerifthe'call_button'or'loadAction'failedbutnot
        //iftherequestfailedduetotheDropPrevious,
        def.guardedCatch(ev.data.on_fail);
        this.dp.add(def).then(function(action){
            //showeffectifbuttonhaveeffectattribute
            //rainbowmancanbedisplayedfromtwoplaces:fromattributeonabuttonorfrompython
            //codebelowhandlesthefirstcasei.e'effect'attributeonbutton.
            vareffect=false;
            if(actionData.effect){
                effect=pyUtils.py_eval(actionData.effect);
            }

            if(action&&action.constructor===Object){
                //filteroutcontextkeysthatarespecifictothecurrentaction,because:
                // -wrongdefault_*andsearch_default_*valueswon'tgivetheexpectedresult
                // -wronggroup_byvalueswillfailandforbidrenderingofthedestinationview
                varctx=newContext(
                    _.object(_.reject(_.pairs(env.context),function(pair){
                        returnpair[0].match('^(?:(?:default_|search_default_|show_).+|'+
                                             '.+_view_ref|group_by|group_by_no_leaf|active_id|'+
                                             'active_ids|orderedBy)$')!==null;
                    }))
                );
                ctx.add(actionData.context||{});
                ctx.add({active_model:env.model});
                if(recordID){
                    ctx.add({
                        active_id:recordID,
                        active_ids:[recordID],
                    });
                }
                ctx.add(action.context||{});
                action.context=ctx;
                //incaseaneffectisreturnedfrompythonandthereisalreadyaneffect
                //attributeonthebutton,thepriorityisgiventothebuttonattribute
                action.effect=effect||action.effect;
            }else{
                //ifactiondoesn'treturnanything,butthereisaneffect
                //attributeonthebutton,displayrainbowman
                action={
                    effect:effect,
                    type:'ir.actions.act_window_close',
                };
            }
            varoptions={on_close:ev.data.on_closed};
            if(config.device.isMobile&&actionData.mobile){
                options=Object.assign({},options,actionData.mobile);
            }
            returnself.doAction(action,options).then(ev.data.on_success,ev.data.on_fail);
        });
    },
    /**
     *@private
     *@param{FlectraEvent}ev
     *@param{string}ev.data.controllerIDtheidofthecontrollerthat
     *  triggeredtheevent
     *@param{string}ev.data.viewTypethetypeofviewtoswitchto
     *@param{integer}[ev.data.res_id]theidoftherecordtoopen(for
     *  mono-recordviews)
     *@param{mode}[ev.data.mode]themodetoopen,i.e.'edit'or'readonly'
     *  (onlyrelevantforformviews)
     */
    _onSwitchView:function(ev){
        ev.stopPropagation();
        constviewType=ev.data.view_type;
        constcurrentController=this.getCurrentController();
        if(currentController.jsID===ev.data.controllerID){
            //onlyswitchtotherequestedviewifthecontrollerthat
            //triggeredtherequestisthecurrentcontroller
            constaction=this.actions[currentController.actionID];
            constcurrentControllerState=currentController.widget.exportState();
            action.controllerState=_.extend({},action.controllerState,currentControllerState);
            constoptions={
                controllerState:action.controllerState,
                currentId:ev.data.res_id,
            };
            if(ev.data.mode){
                options.mode=ev.data.mode;
            }
            this._switchController(action,viewType,options);
        }
    },
});

});
