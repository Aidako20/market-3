flectra.define('web.KeyboardNavigationMixin',function(require){
    "usestrict";
    varBrowserDetection=require('web.BrowserDetection');
    constcore=require('web.core');

    /**
     *listofthekeythatshouldnotbeusedasaccesskeys.EitherbecausewewanttoreservethemforaspecificbehaviorinFlectraor
     *becausetheywillnotworkincertainbrowser/OS
     */
    varknownUnusableAccessKeys=['',
        'A',//reservedforFlectraEdit
        'B',//reservedforFlectraPreviousBreadcrumb(Back)
        'C',//reservedforFlectraCreate
        'H',//reservedforFlectraHome
        'J',//reservedforFlectraDiscard
        'K',//reservedforFlectraKanbanview
        'L',//reservedforFlectraListview
        'N',//reservedforFlectrapagerNext
        'P',//reservedforFlectrapagerPrevious
        'S',//reservedforFlectraSave
        'Q',//reservedforFlectraSearch
        'E',//chromedoesnotsupport'E'accesskey-->gotoaddressbartosearchgoogle
        'F',//chromedoesnotsupport'F'accesskey-->gotomenu
        'D',//chromedoesnotsupport'D'accesskey-->gotoaddressbar
        '0','1','2','3','4','5','6','7','8','9'//reservedforFlectramenus
    ];

    varKeyboardNavigationMixin={
        events:{
            'keydown':'_onKeyDown',
            'keyup':'_onKeyUp',
        },

        /**
         *@constructor
         *@param{object}[options]
         *@param{boolean}[options.autoAccessKeys=true]
         *     Whetheraccesskeysshouldbecreatedautomaticallyforbuttons
         *     withouttheminthepage.
         */
        init:function(options){
            this.options=Object.assign({
                autoAccessKeys:true,
            },options);
            this._areAccessKeyVisible=false;
            this.BrowserDetection=newBrowserDetection();
        },
        /**
         *@override
         */
        start:function(){
            consttemp=this._hideAccessKeyOverlay.bind(this);
            this._hideAccessKeyOverlay=()=>temp();
            window.addEventListener('blur',this._hideAccessKeyOverlay);
            core.bus.on('click',null,this._hideAccessKeyOverlay);
        },
        /**
         *@destructor
         */
        destroy:function(){
            window.removeEventListener('blur',this._hideAccessKeyOverlay);
            core.bus.off('click',null,this._hideAccessKeyOverlay);
        },

        //--------------------------------------------------------------------------
        //Private
        //--------------------------------------------------------------------------

        /**
         *@private
         */
        _addAccessKeyOverlays:function(){
            varaccesskeyElements=$(document).find('[accesskey]').filter(':visible');
            _.each(accesskeyElements,function(elem){
                varoverlay=$(_.str.sprintf("<divclass='o_web_accesskey_overlay'>%s</div>",$(elem).attr('accesskey').toUpperCase()));

                var$overlayParent;
                if(elem.tagName.toUpperCase()==="INPUT"){
                    //specialcaseforthesearchinputthathasanaccesskey
                    //defined.Wecannotsettheoverlayontheinputitself,
                    //onlyonitsparent.
                    $overlayParent=$(elem).parent();
                }else{
                    $overlayParent=$(elem);
                }

                if($overlayParent.css('position')!=='absolute'){
                    $overlayParent.css('position','relative');
                }
                overlay.appendTo($overlayParent);
            });
        },
        /**
         *@private
         *@return{jQuery[]}
         */
        _getAllUsedAccessKeys:function(){
            varusedAccessKeys=knownUnusableAccessKeys.slice();
            this.$el.find('[accesskey]').each(function(_,elem){
                usedAccessKeys.push(elem.accessKey.toUpperCase());
            });
            returnusedAccessKeys;
        },
        /**
         *hidestheoverlaythatshowstheaccesskeys.
         *
         *@private
         *@param$parent{jQueryElemen}theparentoftheDOMelementtowhichshorcutsoverlayhavebeenadded
         *@return{undefined|jQuery}
         */
        _hideAccessKeyOverlay:function(){
            this._areAccessKeyVisible=false;
            varoverlays=this.$el.find('.o_web_accesskey_overlay');
            if(overlays.length){
                returnoverlays.remove();
            }
        },
        /**
         *@private
         */
        _setAccessKeyOnTopNavigation:function(){
            this.$el.find('.o_menu_sections>li>a').each(function(number,item){
                item.accessKey=number+1;
            });
        },

        //--------------------------------------------------------------------------
        //Handlers
        //--------------------------------------------------------------------------

        /**
         *Assignaccesskeystoallbuttonsinside$elandsetsanoverlaytoshowtheaccesskey
         *Theaccesskeyswillbeassignedusingfirstthenameofthebutton,letterbyletteruntilwefindoneavailable,
         *afterthatwewillassignanyavailableletters.
         *Notalllettersshouldbeusedasaccesskeys,someoftheshouldbereservedforstandardflectrabehaviororbrowserbehavior
         *
         *@private
         *@paramkeyDownEvent{jQueryKeyboardEvent}thekeyboardeventtriggered
         *return{undefined|false}
         */
        _onKeyDown:function(keyDownEvent){
            if($('body.o_ui_blocked').length&&
            (keyDownEvent.altKey||keyDownEvent.key==='Alt')&&
            !keyDownEvent.ctrlKey){
                if(keyDownEvent.preventDefault)keyDownEvent.preventDefault();elsekeyDownEvent.returnValue=false;
                if(keyDownEvent.stopPropagation)keyDownEvent.stopPropagation();
                if(keyDownEvent.cancelBubble)keyDownEvent.cancelBubble=true;
                returnfalse;
            }
            if(!this._areAccessKeyVisible&&
                (keyDownEvent.altKey||keyDownEvent.key==='Alt')&&
                !keyDownEvent.ctrlKey){

                this._areAccessKeyVisible=true;

                this._setAccessKeyOnTopNavigation();

                varusedAccessKey=this._getAllUsedAccessKeys();

                if(this.options.autoAccessKeys){
                    varbuttonsWithoutAccessKey=this.$el.find('button.btn:visible')
                        .not('[accesskey]')
                        .not('[disabled]')
                        .not('[tabindex="-1"]');
                    _.each(buttonsWithoutAccessKey,function(elem){
                        varbuttonString=[elem.innerText,elem.title,"ABCDEFGHIJKLMNOPQRSTUVWXYZ"].join('');
                        for(varletterIndex=0;letterIndex<buttonString.length;letterIndex++){
                            varcandidateAccessKey=buttonString[letterIndex].toUpperCase();
                            if(candidateAccessKey>='A'&&candidateAccessKey<='Z'&&
                                !_.includes(usedAccessKey,candidateAccessKey)){
                                elem.accessKey=candidateAccessKey;
                                usedAccessKey.push(candidateAccessKey);
                                break;
                            }
                        }
                    });
                }

                varelementsWithoutAriaKeyshortcut=this.$el.find('[accesskey]').not('[aria-keyshortcuts]');
                _.each(elementsWithoutAriaKeyshortcut,function(elem){
                    elem.setAttribute('aria-keyshortcuts','Alt+Shift+'+elem.accessKey);
                });
                this._addAccessKeyOverlays();
            }
            //onmac,thereareanumberofkeysthatareonlyaccessiblethoughtheusageof
            //theALTkey(likethe@signinmostkeyboards)
            //forthemwedonotfacilitatetheaccesskeys,sotheywillneedtobeactivatedclassically
            //thoughControl+Alt+key(casesensitive),seehttps://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/accesskey
            if(this.BrowserDetection.isOsMac())
                return;

            if(keyDownEvent.altKey&&!keyDownEvent.ctrlKey&&keyDownEvent.key.length===1){//wedon'twanttocatchtheAltkeydown,onlythecharactersAtoZandnumberkeys
                varelementWithAccessKey=[];
                if(keyDownEvent.keyCode>=65&&keyDownEvent.keyCode<=90||keyDownEvent.keyCode>=97&&keyDownEvent.keyCode<=122){
                    //65=A,90=Z,97=a,122=z
                    elementWithAccessKey=document.querySelectorAll('[accesskey="'+String.fromCharCode(keyDownEvent.keyCode).toLowerCase()+
                        '"],[accesskey="'+String.fromCharCode(keyDownEvent.keyCode).toUpperCase()+'"]');
                    if(elementWithAccessKey.length){
                        if(this.BrowserDetection.isOsMac()||
                            !this.BrowserDetection.isBrowserChrome()){//onwindowsandlinux,chromedoesnotpreventthedefaultoftheaccesskeys
                            elementWithAccessKey[0].focus();
                            elementWithAccessKey[0].click();
                            if(keyDownEvent.preventDefault)keyDownEvent.preventDefault();elsekeyDownEvent.returnValue=false;
                            if(keyDownEvent.stopPropagation)keyDownEvent.stopPropagation();
                            if(keyDownEvent.cancelBubble)keyDownEvent.cancelBubble=true;
                            returnfalse;
                        }
                    }
                }
                else{
                    //identifyiftheuserhastappedonthenumberkeysabovethetextkeys.
                    //thisisnottrivialbecausealtisamodifierandwillnotinputtheactualnumberinmostkeyboardlayouts
                    varnumberKey;
                    if(keyDownEvent.originalEvent.code&&keyDownEvent.originalEvent.code.indexOf('Digit')===0){
                        //chrome&FFhavethekeyDigitsetcorrectlyforthenumbers
                        numberKey=keyDownEvent.originalEvent.code[keyDownEvent.originalEvent.code.length-1];
                    }elseif(keyDownEvent.originalEvent.key&&
                        keyDownEvent.originalEvent.key.length===1&&
                        keyDownEvent.originalEvent.key>='0'&&
                        keyDownEvent.originalEvent.key<='9'){
                        //edgedoesnotuse'code'ontheoriginalevent,butthe'key'issetcorrectly
                        numberKey=keyDownEvent.originalEvent.key;
                    }elseif(keyDownEvent.keyCode>=48&&keyDownEvent.keyCode<=57){
                        //fallbackonkeyCodeifbothcodeandkeyareeithernotsetornotdigits
                        numberKey=keyDownEvent.keyCode-48;
                    }

                    if(numberKey>='0'&&numberKey<='9'){
                        elementWithAccessKey=document.querySelectorAll('[accesskey="'+numberKey+'"]');
                        if(elementWithAccessKey.length){
                            elementWithAccessKey[0].click();
                            if(keyDownEvent.preventDefault)keyDownEvent.preventDefault();elsekeyDownEvent.returnValue=false;
                            if(keyDownEvent.stopPropagation)keyDownEvent.stopPropagation();
                            if(keyDownEvent.cancelBubble)keyDownEvent.cancelBubble=true;
                            returnfalse;
                        }
                    }
                }
            }
        },
        /**
         *hidestheshortcutoverlayswhenkeyupeventistriggeredontheALTkey
         *
         *@private
         *@paramkeyUpEvent{jQueryKeyboardEvent}thekeyboardeventtriggered
         *@return{undefined|false}
         */
        _onKeyUp:function(keyUpEvent){
            if((keyUpEvent.altKey||keyUpEvent.key==='Alt')&&!keyUpEvent.ctrlKey){
                this._hideAccessKeyOverlay();
                if(keyUpEvent.preventDefault)keyUpEvent.preventDefault();elsekeyUpEvent.returnValue=false;
                if(keyUpEvent.stopPropagation)keyUpEvent.stopPropagation();
                if(keyUpEvent.cancelBubble)keyUpEvent.cancelBubble=true;
                returnfalse;
            }
        },
    };

    returnKeyboardNavigationMixin;

});
