flectra.define('web.data',function(require){
"usestrict";

varClass=require('web.Class');
varContext=require('web.Context');
varconcurrency=require('web.concurrency');
varmixins=require('web.mixins');
varsession=require('web.session');
vartranslation=require('web.translation');
varpyUtils=require('web.py_utils');

var_t=translation._t;

/**
 *Serializesthesortcriterionarrayofadatasetintoaformwhichcanbe
 *consumedbyOpenERP'sRPCAPIs.
 *
 *@param{Array}criterionarrayoffields,fromfirsttolastcriteria,prefixedwith'-'forreversesorting
 *@returns{String}SQL-likesortingstring(``ORDERBY``)clause
 */
functionserialize_sort(criterion){
    return_.map(criterion,
        function(criteria){
            if(criteria[0]==='-'){
                returncriteria.slice(1)+'DESC';
            }
            returncriteria+'ASC';
        }).join(',');
}

/**
 *Reverseoftheserialize_sortfunction:convertanarrayofSQL-likesort
 *descriptorsintoalistoffieldsprefixedwith'-'ifnecessary.
 */
functiondeserialize_sort(criterion){
    return_.map(criterion,function(criteria){
        varsplit=_.without(criteria.split(''),'');
        return(split[1]&&split[1].toLowerCase()==='desc'?'-':'')+split[0];
    });
}

varQuery=Class.extend({
    init:function(model,fields){
        this._model=model;
        this._fields=fields;
        this._filter=[];
        this._context={};
        this._lazy=true;
        this._limit=false;
        this._offset=0;
        this._order_by=[];
    },
    clone:function(to_set){
        to_set=to_set||{};
        varq=newQuery(this._model,this._fields);
        q._context=this._context;
        q._filter=this._filter;
        q._lazy=this._lazy;
        q._limit=this._limit;
        q._offset=this._offset;
        q._order_by=this._order_by;

        for(varkeyinto_set){
            if(!to_set.hasOwnProperty(key)){continue;}
            switch(key){
            case'filter':
                q._filter=(q._filter||[]).concat(to_set.filter||[]);
                break;
            case'context':
                q._context=newContext(
                        q._context,to_set.context);
                break;
            case'lazy':
            case'limit':
            case'offset':
            case'order_by':
                q['_'+key]=to_set[key];
            }
        }
        returnq;
    },
    _execute:function(options){
        varself=this;
        options=options||{};
        returnsession.rpc('/web/dataset/search_read',{
            model:this._model.name,
            fields:this._fields||false,
            domain:pyUtils.eval('domains',
                    [this._model.domain(this._filter)]),
            context:pyUtils.eval('contexts',
                    [this._model.context(this._context)]),
            offset:this._offset,
            limit:this._limit,
            sort:serialize_sort(this._order_by)
        },options).then(function(results){
            self._count=results.length;
            returnresults.records;
        },null);
    },
    /**
     *Fetchesthefirstrecordmatchingthequery,ornull
     *
     *@param{Object}[options]additionaloptionsfortherpc()method
     *@returns{Promise<Object|null>}
     */
    first:function(options){
        varself=this;
        returnthis.clone({limit:1})._execute(options).then(function(records){
            deleteself._count;
            if(records.length){returnrecords[0];}
            returnnull;
        });
    },
    /**
     *Fetchesallrecordsmatchingthequery
     *
     *@param{Object}[options]additionaloptionsfortherpc()method
     *@returns{Promise<Array<>>}
     */
    all:function(options){
        returnthis._execute(options);
    },
    /**
     *Fetchesthenumberofrecordsmatchingthequeryinthedatabase
     *
     *@returns{Promise<Number>}
     */
    count:function(){
        if(this._count!==undefined){returnPromise.resolve(this._count);}
        returnthis._model.call(
            'search_count',[this._filter],{
                context:this._model.context(this._context)});
    },
    /**
     *Performsagroupsreadaccordingtotheprovidedgroupingcriterion
     *
     *@param{String|Array<String>}grouping
     *@returns{jQuery.Deferred<Array<openerp.web.QueryGroup>>|null}
     */
    group_by:function(grouping){
        varctx=pyUtils.eval(
            'context',this._model.context(this._context));

        //undefinedpassedinexplicitly(!)
        if(_.isUndefined(grouping)){
            grouping=[];
        }

        if(!(groupinginstanceofArray)){
            grouping=_.toArray(arguments);
        }
        if(_.isEmpty(grouping)&&!ctx.group_by_no_leaf){
            returnnull;
        }
        varraw_fields=_.map(grouping.concat(this._fields||[]),function(field){
            returnfield.split(':')[0];
        });

        varself=this;
        returnthis._model.call('read_group',{
            groupby:grouping,
            fields:_.uniq(raw_fields),
            domain:this._model.domain(this._filter),
            context:ctx,
            offset:this._offset,
            lazy:this._lazy,
            limit:this._limit,
            orderby:serialize_sort(this._order_by)||false
        }).then(function(results){
            return_(results).map(function(result){
                //FIX:querygroupinitialization
                result.__context=result.__context||{};
                result.__context.group_by=result.__context.group_by||[];
                _.defaults(result.__context,ctx);
                vargrouping_fields=self._lazy?[grouping[0]]:grouping;
                returnnewQueryGroup(
                    self._model.name,grouping_fields,result);
            });
        });
    },
    /**
     *Createsanewquerywiththeunionofthecurrentquery'scontextand
     *thenewcontext.
     *
     *@paramcontextcontextdatatoaddtothequery
     *@returns{openerp.web.Query}
     */
    context:function(context){
        if(!context){returnthis;}
        returnthis.clone({context:context});
    },
    /**
     *Createsanewquerywiththeunionofthecurrentquery'sfilterand
     *thenewdomain.
     *
     *@paramdomaindomaindatatoANDwiththecurrentqueryfilter
     *@returns{openerp.web.Query}
     */
    filter:function(domain){
        if(!domain){returnthis;}
        returnthis.clone({filter:domain});
    },
    /**
     *Createsanewquerywiththeprovidedparameterlazyreplacingthecurrent
     *query'sown.
     *
     *@param{Boolean}lazyindicatesiftheread_groupshouldreturnonlythe
     *firstlevelofgroupbyrecords,orshouldreturntherecordsgroupedby
     *alllevelsatonce(so,itmakesonly1dbrequest).
     *@returns{openerp.web.Query}
     */
    lazy:function(lazy){
        returnthis.clone({lazy:lazy});
    },
    /**
     *Createsanewquerywiththeprovidedlimitreplacingthecurrent
     *query'sownlimit
     *
     *@param{Number}limitmaximumnumberofrecordsthequeryshouldretrieve
     *@returns{openerp.web.Query}
     */
    limit:function(limit){
        returnthis.clone({limit:limit});
    },
    /**
     *Createsanewquerywiththeprovidedoffsetreplacingthecurrent
     *query'sownoffset
     *
     *@param{Number}offsetnumberofrecordsthequeryshouldskipbeforestartingitsretrieval
     *@returns{openerp.web.Query}
     */
    offset:function(offset){
        returnthis.clone({offset:offset});
    },
    /**
     *Createsanewquerywiththeprovidedorderingparametersreplacing
     *thoseofthecurrentquery
     *
     *@param{String...}fieldsorderingclauses
     *@returns{openerp.web.Query}
     */
    order_by:function(fields){
        if(fields===undefined){returnthis;}
        if(!(fieldsinstanceofArray)){
            fields=_.toArray(arguments);
        }
        if(_.isEmpty(fields)){returnthis;}
        returnthis.clone({order_by:fields});
    }
});

varQueryGroup=Class.extend({
    init:function(model,grouping_fields,read_group_group){
        //Incaseswheregroup_by_no_leafandnogroup_by,theresultof
        //read_grouphasaggregatefieldsbutno__contextor__domain.
        //Createdefault(empty)valuesforthosesothatthingsdon'tbreak
        varfixed_group=_.extend(
            {__context:{group_by:[]},__domain:[]},
            read_group_group);

        varcount_key=(grouping_fields[0]&&grouping_fields[0].split(':')[0])+'_count';
        varaggregates={};
        for(varkeyinfixed_group){
            if(fixed_group.hasOwnProperty(key)){
                if(!(key.indexOf('__')===0
                    ||_.contains(grouping_fields,key)
                    ||(key===count_key))){
                    aggregates[key]=fixed_group[key]||0;
                }
            }
        }

        this.model=newModel(
            model,fixed_group.__context,fixed_group.__domain);

        vargroup_size=fixed_group[count_key]||fixed_group.__count||0;
        varleaf_group=fixed_group.__context.group_by.length===0;

        varvalue=(grouping_fields.length===1)
                ?fixed_group[grouping_fields[0]]
                :_.map(grouping_fields,function(field){returnfixed_group[field];});
        vargrouped_on=(grouping_fields.length===1)
                ?grouping_fields[0]
                :grouping_fields;
        this.attributes={
            folded:!!(fixed_group.__fold),
            grouped_on:grouped_on,
            //ifterminalgroup(ornogroup)andgroup_by_no_leaf=>usegroup.__count
            length:group_size,
            value:value,
            //Agroupisopen-ableifit'snotaleafingroup_by_no_leafmode
            has_children:!(leaf_group&&fixed_group.__context.group_by_no_leaf),

            aggregates:aggregates
        };
    },
    get:function(key){
        returnthis.attributes[key];
    },
    subgroups:function(){
        returnthis.model.query().group_by(this.model.context().group_by);
    },
    query:function(){
        returnthis.model.query.apply(this.model,arguments);
    }
});

varDataSet= Class.extend(mixins.PropertiesMixin,{
    /**
     *CollectionofOpenERPrecords,usedtosharerecordsandthecurrentselectionbetweenviews.
     *
     *@constructsinstance.web.DataSet
     *
     *@param{String}modeltheOpenERPmodelthisdatasetwillmanage
     */
    init:function(parent,model,context){
        mixins.PropertiesMixin.init.call(this);
        this.setParent(parent);
        this.model=model;
        this.context=context||{};
        this.index=null;
        this._sort=[];
        this._model=newModel(model,context);
        this.orderer=newconcurrency.DropMisordered();
    },
    previous:function(){
        this.index-=1;
        if(!this.ids.length){
            this.index=null;
        }elseif(this.index<0){
            this.index=this.ids.length-1;
        }
        returnthis;
    },
    next:function(){
        this.index+=1;
        if(!this.ids.length){
            this.index=null;
        }elseif(this.index>=this.ids.length){
            this.index=0;
        }
        returnthis;
    },
    select_id:function(id){
        varidx=this.get_id_index(id);
        if(idx===null){
            returnfalse;
        }else{
            this.index=idx;
            returntrue;
        }
    },
    get_id_index:function(id){
        for(vari=0,ii=this.ids.length;i<ii;i++){
            //Hereweusetypecoercionbecauseofthemesspotentiallycausedby
            //OpenERPidsfetchedfromtheDOMasstring.(eg:dhtmlxcalendar)
            //OpenERPidscanbenon-numerictoo!(eg:recursiveeventsincalendar)
            if(id==this.ids[i]){
                returni;
            }
        }
        returnnull;
    },
    /**
     *Readrecords.
     *
     *@param{Array}idsidentifiersoftherecordstoread
     *@param{Array}[fields]fieldstoreadandreturn,bydefaultallfieldsarereturned
     *@param{Object}[options]
     *@returns{Promise}
     */
    read_ids:function(ids,fields,options){
        if(_.isEmpty(ids)){
            returnPromise.resolve([]);
        }

        options=options||{};
        varmethod='read';
        varids_arg=ids;
        varcontext=this.get_context(options.context);
        if(options.check_access_rule===true){
            method='search_read';
            ids_arg=[['id','in',ids]];
            context=newContext(context,{active_test:false});
        }
        returnthis._model.call(method,
                [ids_arg,fields||false],
                {context:context})
            .then(function(records){
                if(records.length<=1){returnrecords;}
                varindexes={};
                for(vari=0;i<ids.length;i++){
                    indexes[ids[i]]=i;
                }
                records.sort(function(a,b){
                    returnindexes[a.id]-indexes[b.id];
                });
                returnrecords;
        });
    },
    /**
     *ReadasliceoftherecordsrepresentedbythisDataSet,basedonits
     *domainandcontext.
     *
     *@param{Array}[fields]fieldstoreadandreturn,bydefaultallfieldsarereturned
     *@params{Object}[options]
     *@param{Number}[options.offset=0]Theindexfromwhichselectedrecordsshouldbereturned
     *@param{Number}[options.limit=null]Themaximumnumberofrecordstoreturn
     *@returns{Promise}
     */
    read_slice:function(fields,options){
        varself=this;
        options=options||{};
        varquery=this._model.query(fields)
                .limit(options.limit||false)
                .offset(options.offset||0)
                .all();
        varprom=this.orderer.add(query);
        prom.then(function(records){
            self.ids=_(records).pluck('id');
        });
        returnprom;
    },
    /**
     *Readsthecurrentdatasetrecord(fromitsindex)
     *
     *@params{Array}[fields]fieldstoreadandreturn,bydefaultallfieldsarereturned
     *@param{Object}[options.context]contextdatatoaddtotherequestpayload,ontopoftheDataSet'sowncontext
     *@returns{Promise}
     */
    read_index:function(fields,options){
        options=options||{};
        returnthis.read_ids([this.ids[this.index]],fields,options).then(function(records){
            if(_.isEmpty(records)){returnPromise.reject();}
            returnrecords[0];
        });
    },
    /**
     *Readsdefaultvaluesforthecurrentmodel
     *
     *@param{Array}[fields]fieldstogetdefaultvaluesfor,bydefaultalldefaultsareread
     *@param{Object}[options.context]contextdatatoaddtotherequestpayload,ontopoftheDataSet'sowncontext
     *@returns{Promise}
     */
    default_get:function(fields,options){
        options=options||{};
        returnthis._model.call('default_get',
            [fields],{context:this.get_context(options.context)});
    },
    /**
     *Createsanewrecordindb
     *
     *@param{Object}datafieldvaluestosetonthenewrecord
     *@param{Object}optionsDictionarythatcancontainthefollowingkeys:
     *  -readonly_fields:Valuesfromreadonlyfieldsthatwereupdatedby
     *    on_changes.OnlyusedbytheBufferedDataSettomaketheo2mworkcorrectly.
     *@returns{Promise}
     */
    create:function(data,options){
        varself=this;
        varprom=this._model.call('create',[data],{
            context:this.get_context()
        });
        prom.then(function(){
            self.trigger('dataset_changed',data,options);
        });
        returnprom;
    },
    /**
     *Savestheprovideddatainanexistingdbrecord
     *
     *@param{Number|String}ididentifierfortherecordtoalter
     *@param{Object}datafieldvaluestowriteintotherecord
     *@param{Object}optionsDictionarythatcancontainthefollowingkeys:
     *  -context:Thecontexttouseintheserver-sidecall.
     *  -readonly_fields:Valuesfromreadonlyfieldsthatwereupdatedby
     *    on_changes.OnlyusedbytheBufferedDataSettomaketheo2mworkcorrectly.
     *@returns{Promise}
     */
    write:function(id,data,options){
        options=options||{};
        varself=this;
        varprom=this._model.call('write',[[id],data],{
            context:this.get_context(options.context)
        });
        prom.then(function(){
            self.trigger('dataset_changed',id,data,options);
        });
        returnprom;
    },
    /**
     *Deletesanexistingrecordfromthedatabase
     *
     *@param{Number|String}idsidentifieroftherecordtodelete
     */
    unlink:function(ids){
        varself=this;
        varprom=this._model.call('unlink',[ids],{
            context:this.get_context()
        });
        prom.then(function(){
            self.trigger('dataset_changed',ids);
        });
        returnprom;
    },
    /**
     *CallsanarbitraryRPCmethod
     *
     *@param{String}methodnameofthemethod(onthecurrentmodel)tocall
     *@param{Array}[args]argumentstopasstothemethod
     *@param{Function}callback
     *@param{Function}error_callback
     *@returns{Promise}
     */
    call:function(method,args){
        returnthis._model.call(method,args);
    },
    /**
     *Callsabuttonmethod,usuallyreturningsomesortofaction
     *
     *@param{String}method
     *@param{Array}[args]
     *@returns{Promise}
     */
    call_button:function(method,args){
        returnthis._model.call_button(method,args);
    },
    /**
     *Fetchesthe"readablename"forrecords,basedonintrinsicrules
     *
     *@param{Array}ids
     *@returns{Promise}
     */
    name_get:function(ids){
        returnthis._model.call('name_get',[ids],{context:this.get_context()});
    },
    /**
     *
     *@param{String}namenametoperformasearchfor/on
     *@param{Array}[domain=[]]filtersfortheobjectsreturned,OpenERPdomain
     *@param{String}[operator='ilike']matchingoperatortousewiththeprovidednamevalue
     *@param{Number}[limit=0]maximumnumberofmatchestoreturn
     *@param{Function}callbackfunctiontocallwithname_searchresult
     *@returns{Promise}
     */
    name_search:function(name,domain,operator,limit){
        returnthis._model.call('name_search',{
            name:name||'',
            args:domain||false,
            operator:operator||'ilike',
            context:this._model.context(),
            limit:limit||0
        });
    },
    /**
     *@paramname
     */
    name_create:function(name,context){
        returnthis._model.call('name_create',[name],{context:this.get_context(context)});
    },
    get_context:function(request_context){
        returnthis._model.context(request_context);
    },
    /**
     *Readsorchangessortcriteriaonthedataset.
     *
     *Ifnotprovidedwithanyargument,serializesthesortcriteriato
     *anSQL-likeformusablebyOpenERP'sORM.
     *
     *Ifgivenafield,willsetthatfieldasfirstsortingcriteriaor,
     *ifthefieldisalreadythefirstsortingcriteria,willreverseit.
     *
     *@param{String}[field]fieldtosorton,reversesit(togglefromASCtoDESC)ifalreadythemainsortcriteria
     *@param{Boolean}[force_reverse=false]forcesinsertingthefieldasDESC
     *@returns{String|undefined}
     */
    sort:function(field,force_reverse){
        if(!field){
            returnserialize_sort(this._sort);
        }
        varreverse=force_reverse||(this._sort[0]===field);
        this._sort.splice.apply(
            this._sort,[0,this._sort.length].concat(
                _.without(this._sort,field,'-'+field)));

        this._sort.unshift((reverse?'-':'')+field);
        returnundefined;
    },
    /**
     *Setthesortcriteriaonthedataset.
     *
     *@param{Array}fields_list:listoffieldsorderdescriptors,asusedby
     *Flectra'sORM(suchas'namedesc','product_id','order_dateasc')
     */
    set_sort:function(fields_list){
        this._sort=deserialize_sort(fields_list);
    },
    size:function(){
        returnthis.ids.length;
    },
    alter_ids:function(n_ids){
        this.ids=n_ids;
    },
    remove_ids:function(ids){
        this.alter_ids(_(this.ids).difference(ids));
    },
    add_ids:function(ids,at){
        varargs=[at,0].concat(_.difference(ids,this.ids));
        this.ids.splice.apply(this.ids,args);
    },
    /**
     *Resequencerecords.
     *
     *@param{Array}idsidentifiersoftherecordstoresequence
     *@returns{Promise}
     */
    resequence:function(ids,options){
        options=options||{};
        returnsession.rpc('/web/dataset/resequence',{
            model:this.model,
            ids:ids,
            context:pyUtils.eval(
                'context',this.get_context(options.context)),
        }).then(function(results){
            returnresults;
        });
    },
});

varDataSetStatic= DataSet.extend({
    init:function(parent,model,context,ids){
        this._super(parent,model,context);
        //alllocalrecords
        this.ids=ids||[];
    },
    read_slice:function(fields,options){
        options=options||{};
        fields=fields||{};
        varoffset=options.offset||0,
            limit=options.limit||false;
        varend_pos=limit&&limit!==-1?offset+limit:this.ids.length;
        returnthis.read_ids(this.ids.slice(offset,end_pos),fields,options);
    },
    set_ids:function(ids){
        this.ids=ids;
        if(ids.length===0){
            this.index=null;
        }elseif(this.index>=ids.length-1){
            this.index=ids.length-1;
        }
    },
    unlink:function(ids){
        this.set_ids(_.without.apply(null,[this.ids].concat(ids)));
        this.trigger('unlink',ids);
        returnPromise.resolve({result:true});
    },
});

varDataSetSearch=DataSet.extend({
    /**
     *@constructsinstance.web.DataSetSearch
     *@extendsinstance.web.DataSet
     *
     *@param{Object}parent
     *@param{String}model
     *@param{Object}context
     *@param{Array}domain
     */
    init:function(parent,model,context,domain){
        this._super(parent,model,context);
        this.domain=domain||[];
        this._length=null;
        this.ids=[];
        this._model=newModel(model,context,domain);
    },
    /**
     *ReadasliceoftherecordsrepresentedbythisDataSet,basedonits
     *domainandcontext.
     *
     *@params{Object}options
     *@param{Array}[options.fields]fieldstoreadandreturn,bydefaultallfieldsarereturned
     *@param{Object}[options.context]contextdatatoaddtotherequestpayload,ontopoftheDataSet'sowncontext
     *@param{Array}[options.domain]domaindatatoaddtotherequestpayload,ANDedwiththedataset'sdomain
     *@param{Number}[options.offset=0]Theindexfromwhichselectedrecordsshouldbereturned
     *@param{Number}[options.limit=null]Themaximumnumberofrecordstoreturn
     *@returns{Promise}
     */
    read_slice:function(fields,options){
        options=options||{};
        varself=this;
        varq=this._model.query(fields||false)
            .filter(options.domain)
            .context(options.context)
            .offset(options.offset||0)
            .limit(options.limit||false);
        q=q.order_by.apply(q,this._sort);

        varprom=this.orderer.add(q.all());
        prom.then(function(records){
            //FIXME:notsureaboutthatone,*could*havediscardedcount
            q.count().then(function(count){self._length=count;});
            self.ids=_(records).pluck('id');
        });
        returnprom;
    },
    get_domain:function(other_domain){
        returnthis._model.domain(other_domain);
    },
    alter_ids:function(ids){
        this._super(ids);
        if(this.index!==null&&this.index>=this.ids.length){
            this.index=this.ids.length>0?this.ids.length-1:0;
        }
    },
    remove_ids:function(ids){
        varbefore=this.ids.length;
        this._super(ids);
        if(this._length){
            this._length-=(before-this.ids.length);
        }
    },
    add_ids:function(ids,at){
        varbefore=this.ids.length;
        this._super(ids,at);
        if(this._length){
            this._length+=(this.ids.length-before);
        }
    },
    unlink:function(ids,callback,error_callback){
        varself=this;
        varprom=this._super(ids);
        prom.then(function(){
            self.remove_ids(ids);
            self.trigger("dataset_changed",ids,callback,error_callback);
        });
        returnprom;
    },
    size:function(){
        if(this._length!==null){
            returnthis._length;
        }
        returnthis._super();
    }
});

vardata={
    Query:Query,
    DataSet:DataSet,
    DataSetStatic:DataSetStatic,
    DataSetSearch:DataSetSearch,
    /**@typeString*/
    noDisplayContent:"<emclass=\"text-warning\">"+_t("Unnamed")+"</em>",
};


varModel=Class.extend({
    /**
    newopenerp.web.Model(name[,context[,domain]])

    @constructsinstance.web.Model
    @extendsinstance.web.Class

    @param{String}namenameoftheOpenERPmodelthisobjectisboundto
    @param{Object}[context]
    @param{Array}[domain]
    */
    init:function(name,context,domain){
        this.name=name;
        this._context=context||{};
        this._domain=domain||[];
    },
    /**
     *@deprecateddoesnotallowtospecifykwargs,directlyusecall()instead
     */
    get_func:function(method_name){
        varself=this;
        returnfunction(){
            returnself.call(method_name,_.toArray(arguments));
        };
    },
    /**
     *FetchesaQueryinstanceboundtothismodel,forsearching
     *
     *@param{Array<String>}[fields]fieldstoultimatelyfetchduringthesearch
     *@returns{instance.web.Query}
     */
    query:function(fields){
        returnnewdata.Query(this,fields);
    },
    /**
     *Fetchesthemodel'sdomain,combinedwiththeprovideddomainifany
     *
     *@param{Array}[domain]tocombinewiththemodel'sinternaldomain
     *@returns{Array}Themodel'sinternaldomain,ortheAND-edunionofthemodel'sinternaldomainandtheprovideddomain
     */
    domain:function(domain){
        if(!domain){returnthis._domain;}
        returnthis._domain.concat(domain);
    },
    /**
     *Fetchesthecombinationoftheuser'scontextandthedomaincontext,
     *combinedwiththeprovidedcontextifany
     *
     *@param{Object}[context]tocombinewiththemodel'sinternalcontext
     *@returns{web.Context}Theunionoftheuser'scontextandthemodel'sinternalcontext,aswellastheprovidedcontextifany.Inthatorder.
     */
    context:function(context){
        returnnewContext(session.user_context,this._context,context||{});
    },
    /**
     *Callamethod(overRPC)ontheboundOpenERPmodel.
     *
     *@param{String}methodnameofthemethodtocall
     *@param{Array}[args]positipyEvalonalarguments
     *@param{Object}[kwargs]keywordarguments
     *@param{Object}[options]additionaloptionsfortherpc()method
     *@returns{Promise<>}callresult
     */
    call:function(method,args,kwargs,options){
        args=args||[];
        kwargs=kwargs||{};
        if(!_.isArray(args)){
            //call(method,kwargs)
            kwargs=args;
            args=[];
        }
        pyUtils.ensure_evaluated(args,kwargs);
        varcall_kw='/web/dataset/call_kw/'+this.name+'/'+method;
        returnsession.rpc(call_kw,{
            model:this.name,
            method:method,
            args:args,
            kwargs:kwargs
        },options);
    },
    call_button:function(method,args){
        pyUtils.ensure_evaluated(args,{});
        //contextshouldbethelastargument
        varcontext=(args||[]).length>0?args.pop():{};
        returnsession.rpc('/web/dataset/call_button',{
            model:this.name,
            method:method,
            args:args||[],
            kwargs:{context:context},
        });
    },
});


returndata;

});
