#-*-coding:utf-8-*-
fromfreezegunimportfreeze_time

fromflectra.addons.account.tests.commonimportAccountTestInvoicingCommon
fromflectra.tests.commonimportForm
fromflectra.testsimporttagged
fromflectraimportfields
fromflectra.exceptionsimportUserError,ValidationError

fromcollectionsimportdefaultdict

@tagged('post_install','-at_install')
classTestAccountMoveInInvoiceOnchanges(AccountTestInvoicingCommon):

    @classmethod
    defsetUpClass(cls,chart_template_ref=None):
        super().setUpClass(chart_template_ref=chart_template_ref)

        cls.invoice=cls.init_invoice('in_invoice',products=cls.product_a+cls.product_b)

        cls.product_line_vals_1={
            'name':cls.product_a.name,
            'product_id':cls.product_a.id,
            'account_id':cls.product_a.property_account_expense_id.id,
            'partner_id':cls.partner_a.id,
            'product_uom_id':cls.product_a.uom_id.id,
            'quantity':1.0,
            'discount':0.0,
            'price_unit':800.0,
            'price_subtotal':800.0,
            'price_total':920.0,
            'tax_ids':cls.product_a.supplier_taxes_id.ids,
            'tax_line_id':False,
            'currency_id':cls.company_data['currency'].id,
            'amount_currency':800.0,
            'debit':800.0,
            'credit':0.0,
            'date_maturity':False,
            'tax_exigible':True,
        }
        cls.product_line_vals_2={
            'name':cls.product_b.name,
            'product_id':cls.product_b.id,
            'account_id':cls.product_b.property_account_expense_id.id,
            'partner_id':cls.partner_a.id,
            'product_uom_id':cls.product_b.uom_id.id,
            'quantity':1.0,
            'discount':0.0,
            'price_unit':160.0,
            'price_subtotal':160.0,
            'price_total':208.0,
            'tax_ids':cls.product_b.supplier_taxes_id.ids,
            'tax_line_id':False,
            'currency_id':cls.company_data['currency'].id,
            'amount_currency':160.0,
            'debit':160.0,
            'credit':0.0,
            'date_maturity':False,
            'tax_exigible':True,
        }
        cls.tax_line_vals_1={
            'name':cls.tax_purchase_a.name,
            'product_id':False,
            'account_id':cls.company_data['default_account_tax_purchase'].id,
            'partner_id':cls.partner_a.id,
            'product_uom_id':False,
            'quantity':1.0,
            'discount':0.0,
            'price_unit':144.0,
            'price_subtotal':144.0,
            'price_total':144.0,
            'tax_ids':[],
            'tax_line_id':cls.tax_purchase_a.id,
            'currency_id':cls.company_data['currency'].id,
            'amount_currency':144.0,
            'debit':144.0,
            'credit':0.0,
            'date_maturity':False,
            'tax_exigible':True,
        }
        cls.tax_line_vals_2={
            'name':cls.tax_purchase_b.name,
            'product_id':False,
            'account_id':cls.company_data['default_account_tax_purchase'].id,
            'partner_id':cls.partner_a.id,
            'product_uom_id':False,
            'quantity':1.0,
            'discount':0.0,
            'price_unit':24.0,
            'price_subtotal':24.0,
            'price_total':24.0,
            'tax_ids':[],
            'tax_line_id':cls.tax_purchase_b.id,
            'currency_id':cls.company_data['currency'].id,
            'amount_currency':24.0,
            'debit':24.0,
            'credit':0.0,
            'date_maturity':False,
            'tax_exigible':True,
        }
        cls.term_line_vals_1={
            'name':'',
            'product_id':False,
            'account_id':cls.company_data['default_account_payable'].id,
            'partner_id':cls.partner_a.id,
            'product_uom_id':False,
            'quantity':1.0,
            'discount':0.0,
            'price_unit':-1128.0,
            'price_subtotal':-1128.0,
            'price_total':-1128.0,
            'tax_ids':[],
            'tax_line_id':False,
            'currency_id':cls.company_data['currency'].id,
            'amount_currency':-1128.0,
            'debit':0.0,
            'credit':1128.0,
            'date_maturity':fields.Date.from_string('2019-01-01'),
            'tax_exigible':True,
        }
        cls.move_vals={
            'partner_id':cls.partner_a.id,
            'currency_id':cls.company_data['currency'].id,
            'journal_id':cls.company_data['default_journal_purchase'].id,
            'date':fields.Date.from_string('2019-01-01'),
            'fiscal_position_id':False,
            'payment_reference':'',
            'invoice_payment_term_id':cls.pay_terms_a.id,
            'amount_untaxed':960.0,
            'amount_tax':168.0,
            'amount_total':1128.0,
        }

    defsetUp(self):
        super(TestAccountMoveInInvoiceOnchanges,self).setUp()
        self.assertInvoiceValues(self.invoice,[
            self.product_line_vals_1,
            self.product_line_vals_2,
            self.tax_line_vals_1,
            self.tax_line_vals_2,
            self.term_line_vals_1,
        ],self.move_vals)

    deftest_in_invoice_onchange_invoice_date(self):
        fortax_date,invoice_date,accounting_datein[
            ('2019-03-31','2019-05-12','2019-05-31'),
            ('2019-03-31','2019-02-10','2019-04-30'),
            ('2019-05-31','2019-06-15','2019-06-30'),
        ]:
            self.invoice.company_id.tax_lock_date=tax_date
            withForm(self.invoice)asmove_form:
                move_form.invoice_date=invoice_date
            self.assertEqual(self.invoice.date,fields.Date.to_date(accounting_date))

    @freeze_time('2021-09-16')
    deftest_in_invoice_onchange_invoice_date_2(self):
        invoice_form=Form(self.env['account.move'].with_context(default_move_type='in_invoice',account_predictive_bills_disable_prediction=True))
        invoice_form.partner_id=self.partner_a
        invoice_form.invoice_payment_term_id=self.env.ref('account.account_payment_term_30days')
        withinvoice_form.invoice_line_ids.new()asline_form:
            line_form.product_id=self.product_a
        invoice_form.invoice_date=fields.Date.from_string('2021-09-01')
        invoice=invoice_form.save()

        self.assertRecordValues(invoice,[{
            'date':fields.Date.from_string('2021-09-16'),
            'invoice_date':fields.Date.from_string('2021-09-01'),
            'invoice_date_due':fields.Date.from_string('2021-10-01'),
        }])

    deftest_in_invoice_line_onchange_product_1(self):
        move_form=Form(self.invoice)
        withmove_form.invoice_line_ids.edit(0)asline_form:
            line_form.product_id=self.product_b
        move_form.save()

        self.assertInvoiceValues(self.invoice,[
            {
                **self.product_line_vals_1,
                'name':self.product_b.name,
                'product_id':self.product_b.id,
                'product_uom_id':self.product_b.uom_id.id,
                'account_id':self.product_b.property_account_expense_id.id,
                'price_unit':160.0,
                'price_subtotal':160.0,
                'price_total':208.0,
                'tax_ids':self.product_b.supplier_taxes_id.ids,
                'amount_currency':160.0,
                'debit':160.0,
            },
            self.product_line_vals_2,
            {
                **self.tax_line_vals_1,
                'price_unit':48.0,
                'price_subtotal':48.0,
                'price_total':48.0,
                'amount_currency':48.0,
                'debit':48.0,
            },
            {
                **self.tax_line_vals_2,
                'price_unit':48.0,
                'price_subtotal':48.0,
                'price_total':48.0,
                'amount_currency':48.0,
                'debit':48.0,
            },
            {
                **self.term_line_vals_1,
                'price_unit':-416.0,
                'price_subtotal':-416.0,
                'price_total':-416.0,
                'amount_currency':-416.0,
                'credit':416.0,
            },
        ],{
            **self.move_vals,
            'amount_untaxed':320.0,
            'amount_tax':96.0,
            'amount_total':416.0,
        })

    deftest_in_invoice_line_onchange_product_2_with_fiscal_pos(self):
        '''Testmappingaprice-includedtax(10%)withaprice-excludedtax(20%)onaprice_unitof110.0.
        Theprice_unitshouldbe100.0afterapplyingthefiscalposition.
        '''
        tax_price_include=self.env['account.tax'].create({
            'name':'10%incl',
            'type_tax_use':'purchase',
            'amount_type':'percent',
            'amount':10,
            'price_include':True,
            'include_base_amount':True,
        })
        tax_price_exclude=self.env['account.tax'].create({
            'name':'15%excl',
            'type_tax_use':'purchase',
            'amount_type':'percent',
            'amount':15,
        })

        fiscal_position=self.env['account.fiscal.position'].create({
            'name':'fiscal_pos_a',
            'tax_ids':[
                (0,None,{
                    'tax_src_id':tax_price_include.id,
                    'tax_dest_id':tax_price_exclude.id,
                }),
            ],
        })

        product=self.env['product.product'].create({
            'name':'product',
            'uom_id':self.env.ref('uom.product_uom_unit').id,
            'standard_price':110.0,
            'supplier_taxes_id':[(6,0,tax_price_include.ids)],
        })

        move_form=Form(self.env['account.move'].with_context(default_move_type='in_invoice'))
        move_form.partner_id=self.partner_a
        move_form.invoice_date=fields.Date.from_string('2019-01-01')
        move_form.currency_id=self.currency_data['currency']
        move_form.fiscal_position_id=fiscal_position
        withmove_form.invoice_line_ids.new()asline_form:
            line_form.product_id=product
        invoice=move_form.save()

        self.assertInvoiceValues(invoice,[
            {
                'product_id':product.id,
                'price_unit':200.0,
                'price_subtotal':200.0,
                'price_total':230.0,
                'tax_ids':tax_price_exclude.ids,
                'tax_line_id':False,
                'currency_id':self.currency_data['currency'].id,
                'amount_currency':200.0,
                'debit':100.0,
                'credit':0.0,
            },
            {
                'product_id':False,
                'price_unit':30.0,
                'price_subtotal':30.0,
                'price_total':30.0,
                'tax_ids':[],
                'tax_line_id':tax_price_exclude.id,
                'currency_id':self.currency_data['currency'].id,
                'amount_currency':30.0,
                'debit':15.0,
                'credit':0.0,
            },
            {
                'product_id':False,
                'price_unit':-230.0,
                'price_subtotal':-230.0,
                'price_total':-230.0,
                'tax_ids':[],
                'tax_line_id':False,
                'currency_id':self.currency_data['currency'].id,
                'amount_currency':-230.0,
                'debit':0.0,
                'credit':115.0,
            },
        ],{
            'currency_id':self.currency_data['currency'].id,
            'fiscal_position_id':fiscal_position.id,
            'amount_untaxed':200.0,
            'amount_tax':30.0,
            'amount_total':230.0,
        })

        uom_dozen=self.env.ref('uom.product_uom_dozen')
        withForm(invoice)asmove_form:
            withmove_form.invoice_line_ids.edit(0)asline_form:
                line_form.product_uom_id=uom_dozen

        self.assertInvoiceValues(invoice,[
            {
                'product_id':product.id,
                'product_uom_id':uom_dozen.id,
                'price_unit':2400.0,
                'price_subtotal':2400.0,
                'price_total':2760.0,
                'tax_ids':tax_price_exclude.ids,
                'tax_line_id':False,
                'currency_id':self.currency_data['currency'].id,
                'amount_currency':2400.0,
                'debit':1200.0,
                'credit':0.0,
            },
            {
                'product_id':False,
                'product_uom_id':False,
                'price_unit':360.0,
                'price_subtotal':360.0,
                'price_total':360.0,
                'tax_ids':[],
                'tax_line_id':tax_price_exclude.id,
                'currency_id':self.currency_data['currency'].id,
                'amount_currency':360.0,
                'debit':180.0,
                'credit':0.0,
            },
            {
                'product_id':False,
                'product_uom_id':False,
                'price_unit':-2760.0,
                'price_subtotal':-2760.0,
                'price_total':-2760.0,
                'tax_ids':[],
                'tax_line_id':False,
                'currency_id':self.currency_data['currency'].id,
                'amount_currency':-2760.0,
                'debit':0.0,
                'credit':1380.0,
            },
        ],{
            'currency_id':self.currency_data['currency'].id,
            'fiscal_position_id':fiscal_position.id,
            'amount_untaxed':2400.0,
            'amount_tax':360.0,
            'amount_total':2760.0,
        })

    deftest_in_invoice_line_onchange_product_2_with_fiscal_pos_2(self):
        '''Testmappingaprice-includedtax(10%)withanotherprice-includedtax(20%)onaprice_unitof110.0.
        Theprice_unitshouldbe120.0afterapplyingthefiscalposition.
        '''
        tax_price_include_1=self.env['account.tax'].create({
            'name':'10%incl',
            'type_tax_use':'purchase',
            'amount_type':'percent',
            'amount':10,
            'price_include':True,
            'include_base_amount':True,
        })
        tax_price_include_2=self.env['account.tax'].create({
            'name':'20%incl',
            'type_tax_use':'purchase',
            'amount_type':'percent',
            'amount':20,
            'price_include':True,
            'include_base_amount':True,
        })

        fiscal_position=self.env['account.fiscal.position'].create({
            'name':'fiscal_pos_a',
            'tax_ids':[
                (0,None,{
                    'tax_src_id':tax_price_include_1.id,
                    'tax_dest_id':tax_price_include_2.id,
                }),
            ],
        })

        product=self.env['product.product'].create({
            'name':'product',
            'uom_id':self.env.ref('uom.product_uom_unit').id,
            'standard_price':110.0,
            'supplier_taxes_id':[(6,0,tax_price_include_1.ids)],
        })

        move_form=Form(self.env['account.move'].with_context(default_move_type='in_invoice'))
        move_form.partner_id=self.partner_a
        move_form.invoice_date=fields.Date.from_string('2019-01-01')
        move_form.currency_id=self.currency_data['currency']
        move_form.fiscal_position_id=fiscal_position
        withmove_form.invoice_line_ids.new()asline_form:
            line_form.product_id=product
        invoice=move_form.save()

        self.assertInvoiceValues(invoice,[
            {
                'product_id':product.id,
                'price_unit':240.0,
                'price_subtotal':200.0,
                'price_total':240.0,
                'tax_ids':tax_price_include_2.ids,
                'tax_line_id':False,
                'currency_id':self.currency_data['currency'].id,
                'amount_currency':200.0,
                'debit':100.0,
                'credit':0.0,
            },
            {
                'product_id':False,
                'price_unit':40.0,
                'price_subtotal':40.0,
                'price_total':40.0,
                'tax_ids':[],
                'tax_line_id':tax_price_include_2.id,
                'currency_id':self.currency_data['currency'].id,
                'amount_currency':40.0,
                'debit':20.0,
                'credit':0.0,
            },
            {
                'product_id':False,
                'price_unit':-240.0,
                'price_subtotal':-240.0,
                'price_total':-240.0,
                'tax_ids':[],
                'tax_line_id':False,
                'currency_id':self.currency_data['currency'].id,
                'amount_currency':-240.0,
                'debit':0.0,
                'credit':120.0,
            },
        ],{
            'currency_id':self.currency_data['currency'].id,
            'fiscal_position_id':fiscal_position.id,
            'amount_untaxed':200.0,
            'amount_tax':40.0,
            'amount_total':240.0,
        })

        uom_dozen=self.env.ref('uom.product_uom_dozen')
        withForm(invoice)asmove_form:
            withmove_form.invoice_line_ids.edit(0)asline_form:
                line_form.product_uom_id=uom_dozen

        self.assertInvoiceValues(invoice,[
            {
                'product_id':product.id,
                'product_uom_id':uom_dozen.id,
                'price_unit':2880.0,
                'price_subtotal':2400.0,
                'price_total':2880.0,
                'tax_ids':tax_price_include_2.ids,
                'tax_line_id':False,
                'currency_id':self.currency_data['currency'].id,
                'amount_currency':2400.0,
                'debit':1200.0,
                'credit':0.0,
            },
            {
                'product_id':False,
                'product_uom_id':False,
                'price_unit':480.0,
                'price_subtotal':480.0,
                'price_total':480.0,
                'tax_ids':[],
                'tax_line_id':tax_price_include_2.id,
                'currency_id':self.currency_data['currency'].id,
                'amount_currency':480.0,
                'debit':240.0,
                'credit':0.0,
            },
            {
                'product_id':False,
                'product_uom_id':False,
                'price_unit':-2880.0,
                'price_subtotal':-2880.0,
                'price_total':-2880.0,
                'tax_ids':[],
                'tax_line_id':False,
                'currency_id':self.currency_data['currency'].id,
                'amount_currency':-2880.0,
                'debit':0.0,
                'credit':1440.0,
            },
        ],{
            'currency_id':self.currency_data['currency'].id,
            'fiscal_position_id':fiscal_position.id,
            'amount_untaxed':2400.0,
            'amount_tax':480.0,
            'amount_total':2880.0,
        })

    deftest_in_invoice_line_onchange_business_fields_1(self):
        move_form=Form(self.invoice)
        withmove_form.invoice_line_ids.edit(0)asline_form:
            #Currentprice_unitis800.
            #Wesetquantity=4,discount=50%,price_unit=400.Thedebit/creditfieldsdon'tchangebecause(4*400)*0.5=800.
            line_form.quantity=4
            line_form.discount=50
            line_form.price_unit=400
        move_form.save()

        self.assertInvoiceValues(self.invoice,[
            {
                **self.product_line_vals_1,
                'quantity':4,
                'discount':50.0,
                'price_unit':400.0,
            },
            self.product_line_vals_2,
            self.tax_line_vals_1,
            self.tax_line_vals_2,
            self.term_line_vals_1,
        ],self.move_vals)

        move_form=Form(self.invoice)
        withmove_form.line_ids.edit(2)asline_form:
            #Resetfieldexceptthediscountthatbecomes100%.
            #/!\Themodificationismadeontheaccountingtab.
            line_form.quantity=1
            line_form.discount=100
            line_form.price_unit=800
        move_form.save()

        self.assertInvoiceValues(self.invoice,[
            {
                **self.product_line_vals_1,
                'discount':100.0,
                'price_subtotal':0.0,
                'price_total':0.0,
                'amount_currency':0.0,
                'debit':0.0,
            },
            self.product_line_vals_2,
            {
                **self.tax_line_vals_1,
                'price_unit':24.0,
                'price_subtotal':24.0,
                'price_total':24.0,
                'amount_currency':24.0,
                'debit':24.0,
            },
            self.tax_line_vals_2,
            {
                **self.term_line_vals_1,
                'price_unit':-208.0,
                'price_subtotal':-208.0,
                'price_total':-208.0,
                'amount_currency':-208.0,
                'credit':208.0,
            },
        ],{
            **self.move_vals,
            'amount_untaxed':160.0,
            'amount_tax':48.0,
            'amount_total':208.0,
        })

    deftest_in_invoice_line_onchange_accounting_fields_1(self):
        move_form=Form(self.invoice)
        withmove_form.line_ids.edit(2)asline_form:
            #Customdebitonthefirstproductline.
            line_form.debit=3000
        withmove_form.line_ids.edit(3)asline_form:
            #Customcreditonthesecondproductline.Creditshouldberesetbyonchange.
            #/!\It'sanegativeline.
            line_form.credit=500
        withmove_form.line_ids.edit(0)asline_form:
            #Customdebitonthefirsttaxline.
            line_form.debit=800
        withmove_form.line_ids.edit(4)asline_form:
            #Customdebitonthesecondtaxline.
            line_form.debit=250
        move_form.save()

        self.assertInvoiceValues(self.invoice,[
            {
                **self.product_line_vals_1,
                'price_unit':3000.0,
                'price_subtotal':3000.0,
                'price_total':3450.0,
                'amount_currency':3000.0,
                'debit':3000.0,
            },
            {
                **self.product_line_vals_2,
                'price_unit':-500.0,
                'price_subtotal':-500.0,
                'price_total':-650.0,
                'amount_currency':-500.0,
                'debit':0.0,
                'credit':500.0,
            },
            {
                **self.tax_line_vals_1,
                'price_unit':800.0,
                'price_subtotal':800.0,
                'price_total':800.0,
                'amount_currency':800.0,
                'debit':800.0,
            },
            {
                **self.tax_line_vals_2,
                'price_unit':250.0,
                'price_subtotal':250.0,
                'price_total':250.0,
                'amount_currency':250.0,
                'debit':250.0,
            },
            {
                **self.term_line_vals_1,
                'price_unit':-3550.0,
                'price_subtotal':-3550.0,
                'price_total':-3550.0,
                'amount_currency':-3550.0,
                'credit':3550.0,
            },
        ],{
            **self.move_vals,
            'amount_untaxed':2500.0,
            'amount_tax':1050.0,
            'amount_total':3550.0,
        })

    deftest_in_invoice_line_onchange_partner_1(self):
        move_form=Form(self.invoice)
        move_form.partner_id=self.partner_b
        move_form.payment_reference='turlututu'
        move_form.save()

        self.assertInvoiceValues(self.invoice,[
            {
                **self.product_line_vals_1,
                'partner_id':self.partner_b.id,
            },
            {
                **self.product_line_vals_2,
                'partner_id':self.partner_b.id,
            },
            {
                **self.tax_line_vals_1,
                'partner_id':self.partner_b.id,
            },
            {
                **self.tax_line_vals_2,
                'partner_id':self.partner_b.id,
            },
            {
                **self.term_line_vals_1,
                'name':'turlututu',
                'partner_id':self.partner_b.id,
                'account_id':self.partner_b.property_account_payable_id.id,
                'price_unit':-789.6,
                'price_subtotal':-789.6,
                'price_total':-789.6,
                'amount_currency':-789.6,
                'credit':789.6,
                'date_maturity':fields.Date.from_string('2019-02-28'),
            },
            {
                **self.term_line_vals_1,
                'name':'turlututu',
                'partner_id':self.partner_b.id,
                'account_id':self.partner_b.property_account_payable_id.id,
                'price_unit':-338.4,
                'price_subtotal':-338.4,
                'price_total':-338.4,
                'amount_currency':-338.4,
                'credit':338.4,
            },
        ],{
            **self.move_vals,
            'partner_id':self.partner_b.id,
            'payment_reference':'turlututu',
            'fiscal_position_id':self.fiscal_pos_a.id,
            'invoice_payment_term_id':self.pay_terms_b.id,
            'amount_untaxed':960.0,
            'amount_tax':168.0,
            'amount_total':1128.0,
        })

        #Removelinesandrecreatethemtoapplythefiscalposition.
        move_form=Form(self.invoice)
        move_form.invoice_line_ids.remove(0)
        move_form.invoice_line_ids.remove(0)
        withmove_form.invoice_line_ids.new()asline_form:
            line_form.product_id=self.product_a
        withmove_form.invoice_line_ids.new()asline_form:
            line_form.product_id=self.product_b
        move_form.save()

        self.assertInvoiceValues(self.invoice,[
            {
                **self.product_line_vals_1,
                'account_id':self.product_b.property_account_expense_id.id,
                'partner_id':self.partner_b.id,
                'tax_ids':self.tax_purchase_b.ids,
            },
            {
                **self.product_line_vals_2,
                'partner_id':self.partner_b.id,
                'price_total':184.0,
                'tax_ids':self.tax_purchase_b.ids,
            },
            {
                **self.tax_line_vals_1,
                'name':self.tax_purchase_b.name,
                'partner_id':self.partner_b.id,
                'tax_line_id':self.tax_purchase_b.id,
            },
            {
                **self.term_line_vals_1,
                'name':'turlututu',
                'account_id':self.partner_b.property_account_payable_id.id,
                'partner_id':self.partner_b.id,
                'price_unit':-772.8,
                'price_subtotal':-772.8,
                'price_total':-772.8,
                'amount_currency':-772.8,
                'credit':772.8,
                'date_maturity':fields.Date.from_string('2019-02-28'),
            },
            {
                **self.term_line_vals_1,
                'name':'turlututu',
                'account_id':self.partner_b.property_account_payable_id.id,
                'partner_id':self.partner_b.id,
                'price_unit':-331.2,
                'price_subtotal':-331.2,
                'price_total':-331.2,
                'amount_currency':-331.2,
                'credit':331.2,
            },
        ],{
            **self.move_vals,
            'partner_id':self.partner_b.id,
            'payment_reference':'turlututu',
            'fiscal_position_id':self.fiscal_pos_a.id,
            'invoice_payment_term_id':self.pay_terms_b.id,
            'amount_untaxed':960.0,
            'amount_tax':144.0,
            'amount_total':1104.0,
        })

    deftest_in_invoice_line_onchange_taxes_1(self):
        move_form=Form(self.invoice)
        withmove_form.invoice_line_ids.edit(0)asline_form:
            line_form.price_unit=960
            line_form.tax_ids.add(self.tax_armageddon)
        move_form.save()

        child_tax_1=self.tax_armageddon.children_tax_ids[0]
        child_tax_2=self.tax_armageddon.children_tax_ids[1]

        self.assertInvoiceValues(self.invoice,[
            {
                **self.product_line_vals_1,
                'price_unit':960.0,
                'price_subtotal':800.0,
                'price_total':1176.0,
                'tax_ids':(self.tax_purchase_a+self.tax_armageddon).ids,
                'tax_exigible':False,
            },
            self.product_line_vals_2,
            self.tax_line_vals_1,
            self.tax_line_vals_2,
            {
                'name':child_tax_1.name,
                'product_id':False,
                'account_id':self.company_data['default_account_tax_sale'].id,
                'partner_id':self.partner_a.id,
                'product_uom_id':False,
                'quantity':1.0,
                'discount':0.0,
                'price_unit':64.0,
                'price_subtotal':64.0,
                'price_total':70.4,
                'tax_ids':child_tax_2.ids,
                'tax_line_id':child_tax_1.id,
                'currency_id':self.company_data['currency'].id,
                'amount_currency':64.0,
                'debit':64.0,
                'credit':0.0,
                'date_maturity':False,
                'tax_exigible':False,
            },
            {
                'name':child_tax_1.name,
                'product_id':False,
                'account_id':self.company_data['default_account_expense'].id,
                'partner_id':self.partner_a.id,
                'product_uom_id':False,
                'quantity':1.0,
                'discount':0.0,
                'price_unit':96.0,
                'price_subtotal':96.0,
                'price_total':105.6,
                'tax_ids':child_tax_2.ids,
                'tax_line_id':child_tax_1.id,
                'currency_id':self.company_data['currency'].id,
                'amount_currency':96.0,
                'debit':96.0,
                'credit':0.0,
                'date_maturity':False,
                'tax_exigible':False,
            },
            {
                'name':child_tax_2.name,
                'product_id':False,
                'account_id':child_tax_2.cash_basis_transition_account_id.id,
                'partner_id':self.partner_a.id,
                'product_uom_id':False,
                'quantity':1.0,
                'discount':0.0,
                'price_unit':96.0,
                'price_subtotal':96.0,
                'price_total':96.0,
                'tax_ids':[],
                'tax_line_id':child_tax_2.id,
                'currency_id':self.company_data['currency'].id,
                'amount_currency':96.0,
                'debit':96.0,
                'credit':0.0,
                'date_maturity':False,
                'tax_exigible':False,
            },
            {
                **self.term_line_vals_1,
                'price_unit':-1384.0,
                'price_subtotal':-1384.0,
                'price_total':-1384.0,
                'amount_currency':-1384.0,
                'credit':1384.0,
            },
        ],{
            **self.move_vals,
            'amount_untaxed':960.0,
            'amount_tax':424.0,
            'amount_total':1384.0,
        })

    deftest_in_invoice_line_onchange_cash_rounding_1(self):
        #Test'add_invoice_line'rounding
        move_form=Form(self.invoice)
        #Addacashroundinghaving'add_invoice_line'.
        move_form.invoice_cash_rounding_id=self.cash_rounding_a
        move_form.save()

        #Thecashroundingdoesnothingasthetotalisalreadyrounded.
        self.assertInvoiceValues(self.invoice,[
            self.product_line_vals_1,
            self.product_line_vals_2,
            self.tax_line_vals_1,
            self.tax_line_vals_2,
            self.term_line_vals_1,
        ],self.move_vals)

        move_form=Form(self.invoice)
        withmove_form.invoice_line_ids.edit(0)asline_form:
            line_form.price_unit=799.99
        move_form.save()

        self.assertInvoiceValues(self.invoice,[
            {
                'name':'add_invoice_line',
                'product_id':False,
                'account_id':self.cash_rounding_a.loss_account_id.id,
                'partner_id':self.partner_a.id,
                'product_uom_id':False,
                'quantity':1.0,
                'discount':0.0,
                'price_unit':0.01,
                'price_subtotal':0.01,
                'price_total':0.01,
                'tax_ids':[],
                'tax_line_id':False,
                'currency_id':self.company_data['currency'].id,
                'amount_currency':0.01,
                'debit':0.01,
                'credit':0.0,
                'date_maturity':False,
                'tax_exigible':True,
            },
            {
                **self.product_line_vals_1,
                'price_unit':799.99,
                'price_subtotal':799.99,
                'price_total':919.99,
                'amount_currency':799.99,
                'debit':799.99,
            },
            self.product_line_vals_2,
            self.tax_line_vals_1,
            self.tax_line_vals_2,
            self.term_line_vals_1,
        ],self.move_vals)

        #Test'biggest_tax'rounding

        self.company_data['company'].country_id=self.env.ref('base.us')

        #Addatagtoproduct_a'sdefaulttax
        tax_line_tag=self.env['account.account.tag'].create({
            'name':"Taxtag",
            'applicability':'taxes',
            'country_id':self.company_data['company'].country_id.id,
        })

        repartition_line=self.tax_purchase_a.invoice_repartition_line_ids.filtered(lambdax:x.repartition_type=='tax')
        repartition_line.write({'tag_ids':[(4,tax_line_tag.id,0)]})

        #Createtheinvoice
        biggest_tax_invoice=self.env['account.move'].create({
            'move_type':'in_invoice',
            'invoice_date':'2019-01-01',
            'partner_id':self.partner_a.id,
            'invoice_cash_rounding_id':self.cash_rounding_b.id,
            'invoice_payment_term_id':self.pay_terms_a.id,
            'invoice_line_ids':[
                (0,0,{
                    'product_id':self.product_a.id,
                    'price_unit':799.99,
                    'tax_ids':[(6,0,self.product_a.supplier_taxes_id.ids)],
                    'product_uom_id': self.product_a.uom_id.id,
                }),

                (0,0,{
                    'product_id':self.product_b.id,
                    'price_unit':self.product_b.standard_price,
                    'tax_ids':[(6,0,self.product_b.supplier_taxes_id.ids)],
                    'product_uom_id': self.product_b.uom_id.id,
                }),
            ],
        })

        self.assertInvoiceValues(biggest_tax_invoice,[
            {
                **self.product_line_vals_1,
                'price_unit':799.99,
                'price_subtotal':799.99,
                'price_total':919.99,
                'amount_currency':799.99,
                'debit':799.99,
                'tax_repartition_line_id':None,
                'tax_tag_ids':[],
            },
            {
                **self.product_line_vals_2,
                'tax_repartition_line_id':None,
                'tax_tag_ids':[],
            },
            {
                **self.tax_line_vals_1,
                'tax_repartition_line_id':repartition_line.id,
                'tax_tag_ids':tax_line_tag.ids,
            },
            {
                **self.tax_line_vals_2,
                'tax_repartition_line_id':self.tax_purchase_b.invoice_repartition_line_ids.filtered(lambdax:x.repartition_type=='tax').id,
                'tax_tag_ids':[],
            },
            {
                'name':'%s(rounding)'%self.tax_purchase_a.name,
                'product_id':False,
                'account_id':self.company_data['default_account_tax_purchase'].id,
                'partner_id':self.partner_a.id,
                'product_uom_id':False,
                'quantity':1.0,
                'discount':0.0,
                'price_unit':-0.04,
                'price_subtotal':-0.04,
                'price_total':-0.04,
                'tax_ids':[],
                'tax_line_id':self.tax_purchase_a.id,
                'tax_repartition_line_id':repartition_line.id,
                'tax_tag_ids':tax_line_tag.ids,
                'currency_id':self.company_data['currency'].id,
                'amount_currency':-0.04,
                'debit':0.0,
                'credit':0.04,
                'date_maturity':False,
                'tax_exigible':True,
            },
            {
                **self.term_line_vals_1,
                'price_unit':-1127.95,
                'price_subtotal':-1127.95,
                'price_total':-1127.95,
                'amount_currency':-1127.95,
                'credit':1127.95,
                'tax_repartition_line_id':None,
                'tax_tag_ids':[],
            },
        ],{
            **self.move_vals,
            'amount_untaxed':959.99,
            'amount_tax':167.96,
            'amount_total':1127.95,
        })

    deftest_in_invoice_line_onchange_currency_1(self):
        move_form=Form(self.invoice)
        move_form.currency_id=self.currency_data['currency']
        move_form.save()

        self.assertInvoiceValues(self.invoice,[
            {
                **self.product_line_vals_1,
                'currency_id':self.currency_data['currency'].id,
                'amount_currency':800.0,
                'debit':400.0,
            },
            {
                **self.product_line_vals_2,
                'currency_id':self.currency_data['currency'].id,
                'amount_currency':160.0,
                'debit':80.0,
            },
            {
                **self.tax_line_vals_1,
                'currency_id':self.currency_data['currency'].id,
                'amount_currency':144.0,
                'debit':72.0,
            },
            {
                **self.tax_line_vals_2,
                'currency_id':self.currency_data['currency'].id,
                'amount_currency':24.0,
                'debit':12.0,
            },
            {
                **self.term_line_vals_1,
                'currency_id':self.currency_data['currency'].id,
                'amount_currency':-1128.0,
                'credit':564.0,
            },
        ],{
            **self.move_vals,
            'currency_id':self.currency_data['currency'].id,
        })

        move_form=Form(self.invoice)
        #Changethedatetogetanotherrate:1/3insteadof1/2.
        move_form.date=fields.Date.from_string('2016-01-01')
        move_form.save()

        self.assertInvoiceValues(self.invoice,[
            {
                **self.product_line_vals_1,
                'currency_id':self.currency_data['currency'].id,
                'amount_currency':800.0,
                'debit':266.67,
            },
            {
                **self.product_line_vals_2,
                'currency_id':self.currency_data['currency'].id,
                'amount_currency':160.0,
                'debit':53.33,
            },
            {
                **self.tax_line_vals_1,
                'currency_id':self.currency_data['currency'].id,
                'amount_currency':144.0,
                'debit':48.0,
            },
            {
                **self.tax_line_vals_2,
                'currency_id':self.currency_data['currency'].id,
                'amount_currency':24.0,
                'debit':8.0,
            },
            {
                **self.term_line_vals_1,
                'currency_id':self.currency_data['currency'].id,
                'amount_currency':-1128.0,
                'credit':376.0,
            },
        ],{
            **self.move_vals,
            'currency_id':self.currency_data['currency'].id,
            'date':fields.Date.from_string('2016-01-01'),
        })

        move_form=Form(self.invoice)
        withmove_form.invoice_line_ids.edit(0)asline_form:
            #0.045*0.1=0.0045.Astheforeigncurrencyhasa0.001rounding,
            #theresultshouldbe0.005afterrounding.
            line_form.quantity=0.1
            line_form.price_unit=0.045
        move_form.save()

        self.assertInvoiceValues(self.invoice,[
            {
                **self.product_line_vals_1,
                'quantity':0.1,
                'price_unit':0.05,
                'price_subtotal':0.005,
                'price_total':0.006,
                'currency_id':self.currency_data['currency'].id,
                'amount_currency':0.005,
                'debit':0.0,
            },
            {
                **self.product_line_vals_2,
                'currency_id':self.currency_data['currency'].id,
                'amount_currency':160.0,
                'debit':53.33,
            },
            {
                **self.tax_line_vals_1,
                'price_unit':24.0,
                'price_subtotal':24.001,
                'price_total':24.001,
                'currency_id':self.currency_data['currency'].id,
                'amount_currency':24.001,
                'debit':8.0,
            },
            {
                **self.tax_line_vals_2,
                'currency_id':self.currency_data['currency'].id,
                'amount_currency':24.0,
                'debit':8.0,
            },
            {
                **self.term_line_vals_1,
                'currency_id':self.currency_data['currency'].id,
                'price_unit':-208.01,
                'price_subtotal':-208.006,
                'price_total':-208.006,
                'amount_currency':-208.006,
                'credit':69.33,
            },
        ],{
            **self.move_vals,
            'currency_id':self.currency_data['currency'].id,
            'date':fields.Date.from_string('2016-01-01'),
            'amount_untaxed':160.005,
            'amount_tax':48.001,
            'amount_total':208.006,
        })

        #Exitthemulti-currencies.
        move_form=Form(self.invoice)
        move_form.currency_id=self.company_data['currency']
        move_form.save()

        self.assertInvoiceValues(self.invoice,[
            {
                **self.product_line_vals_1,
                'quantity':0.1,
                'price_unit':0.05,
                'price_subtotal':0.01,
                'price_total':0.01,
                'amount_currency':0.01,
                'debit':0.01,
            },
            self.product_line_vals_2,
            {
                **self.tax_line_vals_1,
                'price_unit':24.0,
                'price_subtotal':24.0,
                'price_total':24.0,
                'amount_currency':24.0,
                'debit':24.0,
            },
            self.tax_line_vals_2,
            {
                **self.term_line_vals_1,
                'price_unit':-208.01,
                'price_subtotal':-208.01,
                'price_total':-208.01,
                'amount_currency':-208.01,
                'credit':208.01,
            },
        ],{
            **self.move_vals,
            'currency_id':self.company_data['currency'].id,
            'date':fields.Date.from_string('2016-01-01'),
            'amount_untaxed':160.01,
            'amount_tax':48.0,
            'amount_total':208.01,
        })

    deftest_in_invoice_onchange_past_invoice_1(self):
        copy_invoice=self.invoice.copy()

        move_form=Form(self.invoice)
        move_form.invoice_line_ids.remove(0)
        move_form.invoice_line_ids.remove(0)
        move_form.invoice_vendor_bill_id=copy_invoice
        move_form.save()

        self.assertInvoiceValues(self.invoice,[
            self.product_line_vals_1,
            self.product_line_vals_2,
            self.tax_line_vals_1,
            self.tax_line_vals_2,
            self.term_line_vals_1,
        ],self.move_vals)

    deftest_in_invoice_create_refund(self):
        self.invoice.action_post()

        move_reversal=self.env['account.move.reversal'].with_context(active_model="account.move",active_ids=self.invoice.ids).create({
            'date':fields.Date.from_string('2019-02-01'),
            'reason':'noreason',
            'refund_method':'refund',
        })
        reversal=move_reversal.reverse_moves()
        reverse_move=self.env['account.move'].browse(reversal['res_id'])

        self.assertEqual(self.invoice.payment_state,'not_paid',"Refundingwithadraftcreditnoteshouldkeeptheinvoice'not_paid'.")
        self.assertInvoiceValues(reverse_move,[
            {
                **self.product_line_vals_1,
                'amount_currency':-800.0,
                'debit':0.0,
                'credit':800.0,
            },
            {
                **self.product_line_vals_2,
                'amount_currency':-160.0,
                'debit':0.0,
                'credit':160.0,
            },
            {
                **self.tax_line_vals_1,
                'amount_currency':-144.0,
                'debit':0.0,
                'credit':144.0,
            },
            {
                **self.tax_line_vals_2,
                'amount_currency':-24.0,
                'debit':0.0,
                'credit':24.0,
            },
            {
                **self.term_line_vals_1,
                'name':'',
                'amount_currency':1128.0,
                'debit':1128.0,
                'credit':0.0,
                'date_maturity':move_reversal.date,
            },
        ],{
            **self.move_vals,
            'invoice_payment_term_id':None,
            'date':move_reversal.date,
            'state':'draft',
            'ref':'Reversalof:%s,%s'%(self.invoice.name,move_reversal.reason),
            'payment_state':'not_paid',
        })

        move_reversal=self.env['account.move.reversal'].with_context(active_model="account.move",active_ids=self.invoice.ids).create({
            'date':fields.Date.from_string('2019-02-01'),
            'reason':'noreasonagain',
            'refund_method':'cancel',
        })
        reversal=move_reversal.reverse_moves()
        reverse_move=self.env['account.move'].browse(reversal['res_id'])

        self.assertEqual(self.invoice.payment_state,'reversed',"Aftercancellingitwithareverseinvoice,aninvoiceshouldbein'reversed'state.")
        self.assertInvoiceValues(reverse_move,[
            {
                **self.product_line_vals_1,
                'amount_currency':-800.0,
                'debit':0.0,
                'credit':800.0,
            },
            {
                **self.product_line_vals_2,
                'amount_currency':-160.0,
                'debit':0.0,
                'credit':160.0,
            },
            {
                **self.tax_line_vals_1,
                'amount_currency':-144.0,
                'debit':0.0,
                'credit':144.0,
            },
            {
                **self.tax_line_vals_2,
                'amount_currency':-24.0,
                'debit':0.0,
                'credit':24.0,
            },
            {
                **self.term_line_vals_1,
                'name':'',
                'amount_currency':1128.0,
                'debit':1128.0,
                'credit':0.0,
                'date_maturity':move_reversal.date,
            },
        ],{
            **self.move_vals,
            'invoice_payment_term_id':None,
            'date':move_reversal.date,
            'state':'posted',
            'ref':'Reversalof:%s,%s'%(self.invoice.name,move_reversal.reason),
            'payment_state':'paid',
        })

    deftest_in_invoice_create_refund_multi_currency(self):
        '''Testtheaccount.move.reversaltakescareaboutthecurrencyrateswhensetting
        acustomreversaldate.
        '''
        move_form=Form(self.invoice)
        move_form.date='2016-01-01'
        move_form.currency_id=self.currency_data['currency']
        move_form.save()

        self.invoice.action_post()

        #Thecurrencyratechangedfrom1/3to1/2.
        move_reversal=self.env['account.move.reversal'].with_context(active_model="account.move",active_ids=self.invoice.ids).create({
            'date':fields.Date.from_string('2017-01-01'),
            'reason':'noreason',
            'refund_method':'refund',
        })
        reversal=move_reversal.reverse_moves()
        reverse_move=self.env['account.move'].browse(reversal['res_id'])

        self.assertEqual(self.invoice.payment_state,'not_paid',"Refundingwithadraftcreditnoteshouldkeeptheinvoice'not_paid'.")
        self.assertInvoiceValues(reverse_move,[
            {
                **self.product_line_vals_1,
                'amount_currency':-800.0,
                'currency_id':self.currency_data['currency'].id,
                'debit':0.0,
                'credit':400.0,
            },
            {
                **self.product_line_vals_2,
                'amount_currency':-160.0,
                'currency_id':self.currency_data['currency'].id,
                'debit':0.0,
                'credit':80.0,
            },
            {
                **self.tax_line_vals_1,
                'amount_currency':-144.0,
                'currency_id':self.currency_data['currency'].id,
                'debit':0.0,
                'credit':72.0,
            },
            {
                **self.tax_line_vals_2,
                'amount_currency':-24.0,
                'currency_id':self.currency_data['currency'].id,
                'debit':0.0,
                'credit':12.0,
            },
            {
                **self.term_line_vals_1,
                'name':'',
                'amount_currency':1128.0,
                'currency_id':self.currency_data['currency'].id,
                'debit':564.0,
                'credit':0.0,
                'date_maturity':move_reversal.date,
            },
        ],{
            **self.move_vals,
            'invoice_payment_term_id':None,
            'currency_id':self.currency_data['currency'].id,
            'date':move_reversal.date,
            'state':'draft',
            'ref':'Reversalof:%s,%s'%(self.invoice.name,move_reversal.reason),
            'payment_state':'not_paid',
        })

        move_reversal=self.env['account.move.reversal'].with_context(active_model="account.move",active_ids=self.invoice.ids).create({
            'date':fields.Date.from_string('2017-01-01'),
            'reason':'noreasonagain',
            'refund_method':'cancel',
        })
        reversal=move_reversal.reverse_moves()
        reverse_move=self.env['account.move'].browse(reversal['res_id'])

        self.assertEqual(self.invoice.payment_state,'reversed',"Aftercancellingitwithareverseinvoice,aninvoiceshouldbein'reversed'state.")
        self.assertInvoiceValues(reverse_move,[
            {
                **self.product_line_vals_1,
                'amount_currency':-800.0,
                'currency_id':self.currency_data['currency'].id,
                'debit':0.0,
                'credit':400.0,
            },
            {
                **self.product_line_vals_2,
                'amount_currency':-160.0,
                'currency_id':self.currency_data['currency'].id,
                'debit':0.0,
                'credit':80.0,
            },
            {
                **self.tax_line_vals_1,
                'amount_currency':-144.0,
                'currency_id':self.currency_data['currency'].id,
                'debit':0.0,
                'credit':72.0,
            },
            {
                **self.tax_line_vals_2,
                'amount_currency':-24.0,
                'currency_id':self.currency_data['currency'].id,
                'debit':0.0,
                'credit':12.0,
            },
            {
                **self.term_line_vals_1,
                'name':'',
                'amount_currency':1128.0,
                'currency_id':self.currency_data['currency'].id,
                'debit':564.0,
                'credit':0.0,
                'date_maturity':move_reversal.date,
            },
        ],{
            **self.move_vals,
            'invoice_payment_term_id':None,
            'currency_id':self.currency_data['currency'].id,
            'date':move_reversal.date,
            'state':'posted',
            'ref':'Reversalof:%s,%s'%(self.invoice.name,move_reversal.reason),
            'payment_state':'paid',
        })

    deftest_in_invoice_create_1(self):
        #Testcreatinganaccount_movewiththeleastinformation.
        move=self.env['account.move'].create({
            'move_type':'in_invoice',
            'partner_id':self.partner_a.id,
            'invoice_date':fields.Date.from_string('2019-01-01'),
            'currency_id':self.currency_data['currency'].id,
            'invoice_payment_term_id':self.pay_terms_a.id,
            'invoice_line_ids':[
                (0,None,self.product_line_vals_1),
                (0,None,self.product_line_vals_2),
            ]
        })

        self.assertInvoiceValues(move,[
            {
                **self.product_line_vals_1,
                'currency_id':self.currency_data['currency'].id,
                'amount_currency':800.0,
                'debit':400.0,
            },
            {
                **self.product_line_vals_2,
                'currency_id':self.currency_data['currency'].id,
                'amount_currency':160.0,
                'debit':80.0,
            },
            {
                **self.tax_line_vals_1,
                'currency_id':self.currency_data['currency'].id,
                'amount_currency':144.0,
                'debit':72.0,
            },
            {
                **self.tax_line_vals_2,
                'currency_id':self.currency_data['currency'].id,
                'amount_currency':24.0,
                'debit':12.0,
            },
            {
                **self.term_line_vals_1,
                'currency_id':self.currency_data['currency'].id,
                'amount_currency':-1128.0,
                'credit':564.0,
            },
        ],{
            **self.move_vals,
            'currency_id':self.currency_data['currency'].id,
        })

    deftest_in_invoice_write_1(self):
        #Testcreatinganaccount_movewiththeleastinformation.
        move=self.env['account.move'].create({
            'move_type':'in_invoice',
            'partner_id':self.partner_a.id,
            'invoice_date':fields.Date.from_string('2019-01-01'),
            'currency_id':self.currency_data['currency'].id,
            'invoice_payment_term_id':self.pay_terms_a.id,
            'invoice_line_ids':[
                (0,None,self.product_line_vals_1),
            ]
        })
        move.write({
            'invoice_line_ids':[
                (0,None,self.product_line_vals_2),
            ]
        })

        self.assertInvoiceValues(move,[
            {
                **self.product_line_vals_1,
                'currency_id':self.currency_data['currency'].id,
                'amount_currency':800.0,
                'debit':400.0,
            },
            {
                **self.product_line_vals_2,
                'currency_id':self.currency_data['currency'].id,
                'amount_currency':160.0,
                'debit':80.0,
            },
            {
                **self.tax_line_vals_1,
                'currency_id':self.currency_data['currency'].id,
                'amount_currency':144.0,
                'debit':72.0,
            },
            {
                **self.tax_line_vals_2,
                'currency_id':self.currency_data['currency'].id,
                'amount_currency':24.0,
                'debit':12.0,
            },
            {
                **self.term_line_vals_1,
                'currency_id':self.currency_data['currency'].id,
                'amount_currency':-1128.0,
                'credit':564.0,
            },
        ],{
            **self.move_vals,
            'currency_id':self.currency_data['currency'].id,
        })

    deftest_in_invoice_duplicate_supplier_reference(self):
        '''Ensuretwovendorbillscan'tsharethesamevendorreference.'''
        self.invoice.ref='asupplierreference'
        invoice2=self.invoice.copy(default={'invoice_date':self.invoice.invoice_date})
        invoice2.ref='asupplierreference'
        withself.assertRaises(ValidationError):
            invoice2.action_post()

    deftest_in_invoice_switch_in_refund_1(self):
        #Testcreatinganaccount_movewithanin_invoice_typeandswitchitinanin_refund.
        move=self.env['account.move'].create({
            'move_type':'in_invoice',
            'partner_id':self.partner_a.id,
            'invoice_date':fields.Date.from_string('2019-01-01'),
            'currency_id':self.currency_data['currency'].id,
            'invoice_payment_term_id':self.pay_terms_a.id,
            'invoice_line_ids':[
                (0,None,self.product_line_vals_1),
                (0,None,self.product_line_vals_2),
            ]
        })
        move.action_switch_invoice_into_refund_credit_note()

        self.assertRecordValues(move,[{'move_type':'in_refund'}])
        self.assertInvoiceValues(move,[
            {
                **self.product_line_vals_1,
                'currency_id':self.currency_data['currency'].id,
                'amount_currency':-800.0,
                'credit':400.0,
                'debit':0,
            },
            {
                **self.product_line_vals_2,
                'currency_id':self.currency_data['currency'].id,
                'amount_currency':-160.0,
                'credit':80.0,
                'debit':0,
            },
            {
                **self.tax_line_vals_1,
                'currency_id':self.currency_data['currency'].id,
                'amount_currency':-144.0,
                'credit':72.0,
                'debit':0,
            },
            {
                **self.tax_line_vals_2,
                'currency_id':self.currency_data['currency'].id,
                'amount_currency':-24.0,
                'credit':12.0,
                'debit':0,
            },
            {
                **self.term_line_vals_1,
                'currency_id':self.currency_data['currency'].id,
                'amount_currency':1128.0,
                'debit':564.0,
                'credit':0,
            },
        ],{
            **self.move_vals,
            'currency_id':self.currency_data['currency'].id,
        })

    deftest_in_invoice_switch_in_refund_2(self):
        #Testcreatinganaccount_movewithanin_invoice_typeandswitchitinanin_refundandanegativequantity.
        modified_product_line_vals_1=self.product_line_vals_1.copy()
        modified_product_line_vals_1.update({'quantity':-modified_product_line_vals_1['quantity']})
        modified_product_line_vals_2=self.product_line_vals_2.copy()
        modified_product_line_vals_2.update({'quantity':-modified_product_line_vals_2['quantity']})
        move=self.env['account.move'].create({
            'move_type':'in_invoice',
            'partner_id':self.partner_a.id,
            'invoice_date':fields.Date.from_string('2019-01-01'),
            'currency_id':self.currency_data['currency'].id,
            'invoice_payment_term_id':self.pay_terms_a.id,
            'invoice_line_ids':[
                (0,None,modified_product_line_vals_1),
                (0,None,modified_product_line_vals_2),
            ]
        })

        self.assertInvoiceValues(move,[
            {
                **self.product_line_vals_1,
                'currency_id':self.currency_data['currency'].id,
                'amount_currency':-800.0,
                'price_subtotal':-800.0,
                'price_total':-920.0,
                'credit':400.0,
                'debit':0,
                'quantity':-1.0,
            },
            {
                **self.product_line_vals_2,
                'currency_id':self.currency_data['currency'].id,
                'amount_currency':-160.0,
                'price_subtotal':-160.0,
                'price_total':-208.0,
                'credit':80.0,
                'debit':0,
                'quantity':-1.0,
            },
            {
                **self.tax_line_vals_1,
                'currency_id':self.currency_data['currency'].id,
                'amount_currency':-144.0,
                'price_subtotal':-144.0,
                'price_total':-144.0,
                'price_unit':-144.0,
                'credit':72.0,
                'debit':0,
            },
            {
                **self.tax_line_vals_2,
                'currency_id':self.currency_data['currency'].id,
                'amount_currency':-24.0,
                'price_subtotal':-24.0,
                'price_total':-24.0,
                'price_unit':-24.0,
                'credit':12.0,
                'debit':0,
            },
            {
                **self.term_line_vals_1,
                'currency_id':self.currency_data['currency'].id,
                'amount_currency':1128.0,
                'price_subtotal':1128.0,
                'price_total':1128.0,
                'price_unit':1128.0,
                'debit':564.0,
                'credit':0,
            },
        ],{
            **self.move_vals,
            'currency_id':self.currency_data['currency'].id,
            'amount_tax':-self.move_vals['amount_tax'],
            'amount_total':-self.move_vals['amount_total'],
            'amount_untaxed':-self.move_vals['amount_untaxed'],
        })
        move.action_switch_invoice_into_refund_credit_note()

        self.assertRecordValues(move,[{'move_type':'in_refund'}])
        self.assertInvoiceValues(move,[
            {
                **self.product_line_vals_1,
                'currency_id':self.currency_data['currency'].id,
                'amount_currency':-800.0,
                'credit':400.0,
                'debit':0,
            },
            {
                **self.product_line_vals_2,
                'currency_id':self.currency_data['currency'].id,
                'amount_currency':-160.0,
                'credit':80.0,
                'debit':0,
            },
            {
                **self.tax_line_vals_1,
                'currency_id':self.currency_data['currency'].id,
                'amount_currency':-144.0,
                'credit':72.0,
                'debit':0,
            },
            {
                **self.tax_line_vals_2,
                'currency_id':self.currency_data['currency'].id,
                'amount_currency':-24.0,
                'credit':12.0,
                'debit':0,
            },
            {
                **self.term_line_vals_1,
                'currency_id':self.currency_data['currency'].id,
                'amount_currency':1128.0,
                'debit':564.0,
                'credit':0,
            },
        ],{
            **self.move_vals,
            'currency_id':self.currency_data['currency'].id,
            'amount_tax':self.move_vals['amount_tax'],
            'amount_total':self.move_vals['amount_total'],
            'amount_untaxed':self.move_vals['amount_untaxed'],
        })

    deftest_in_invoice_change_period_accrual_1(self):
        move=self.env['account.move'].create({
            'move_type':'in_invoice',
            'date':'2017-01-01',
            'partner_id':self.partner_a.id,
            'invoice_date':fields.Date.from_string('2017-01-01'),
            'currency_id':self.currency_data['currency'].id,
            'invoice_payment_term_id':self.pay_terms_a.id,
            'invoice_line_ids':[
                (0,None,{
                    'name':self.product_line_vals_1['name'],
                    'product_id':self.product_line_vals_1['product_id'],
                    'product_uom_id':self.product_line_vals_1['product_uom_id'],
                    'quantity':self.product_line_vals_1['quantity'],
                    'price_unit':self.product_line_vals_1['price_unit'],
                    'tax_ids':self.product_line_vals_1['tax_ids'],
                }),
                (0,None,{
                    'name':self.product_line_vals_2['name'],
                    'product_id':self.product_line_vals_2['product_id'],
                    'product_uom_id':self.product_line_vals_2['product_uom_id'],
                    'quantity':self.product_line_vals_2['quantity'],
                    'price_unit':self.product_line_vals_2['price_unit'],
                    'tax_ids':self.product_line_vals_2['tax_ids'],
                }),
            ]
        })
        move.action_post()

        wizard=self.env['account.automatic.entry.wizard']\
            .with_context(active_model='account.move.line',active_ids=move.invoice_line_ids.ids).create({
            'action':'change_period',
            'date':'2018-01-01',
            'percentage':60,
            'journal_id':self.company_data['default_journal_misc'].id,
            'expense_accrual_account':self.env['account.account'].create({
                'name':'AccrualExpenseAccount',
                'code':'234567',
                'user_type_id':self.env.ref('account.data_account_type_expenses').id,
                'reconcile':True,
            }).id,
            'revenue_accrual_account':self.env['account.account'].create({
                'name':'AccrualRevenueAccount',
                'code':'765432',
                'user_type_id':self.env.ref('account.data_account_type_expenses').id,
                'reconcile':True,
            }).id,
        })
        wizard_res=wizard.do_action()

        self.assertInvoiceValues(move,[
            {
                **self.product_line_vals_1,
                'currency_id':self.currency_data['currency'].id,
                'amount_currency':800.0,
                'debit':400.0,
                'credit':0.0,
            },
            {
                **self.product_line_vals_2,
                'currency_id':self.currency_data['currency'].id,
                'amount_currency':160.0,
                'debit':80.0,
                'credit':0.0,
            },
            {
                **self.tax_line_vals_1,
                'currency_id':self.currency_data['currency'].id,
                'amount_currency':144.0,
                'debit':72.0,
                'credit':0.0,
            },
            {
                **self.tax_line_vals_2,
                'currency_id':self.currency_data['currency'].id,
                'amount_currency':24.0,
                'debit':12.0,
                'credit':0.0,
            },
            {
                **self.term_line_vals_1,
                'currency_id':self.currency_data['currency'].id,
                'amount_currency':-1128.0,
                'debit':0.0,
                'credit':564.0,
                'date_maturity':fields.Date.from_string('2017-01-01'),
            },
        ],{
            **self.move_vals,
            'currency_id':self.currency_data['currency'].id,
            'date':fields.Date.from_string('2017-01-01'),
        })

        accrual_lines=self.env['account.move'].browse(wizard_res['domain'][0][2]).line_ids.sorted('date')
        self.assertRecordValues(accrual_lines,[
            {'amount_currency':-480.0,'debit':0.0,  'credit':240.0,   'account_id':self.product_line_vals_1['account_id'],  'reconciled':False},
            {'amount_currency':480.0, 'debit':240.0,'credit':0.0,     'account_id':wizard.expense_accrual_account.id,       'reconciled':True},
            {'amount_currency':-96.0, 'debit':0.0,  'credit':48.0,    'account_id':self.product_line_vals_2['account_id'],  'reconciled':False},
            {'amount_currency':96.0,  'debit':48.0, 'credit':0.0,     'account_id':wizard.expense_accrual_account.id,       'reconciled':True},
            {'amount_currency':480.0, 'debit':240.0,'credit':0.0,     'account_id':self.product_line_vals_1['account_id'],  'reconciled':False},
            {'amount_currency':-480.0,'debit':0.0,  'credit':240.0,   'account_id':wizard.expense_accrual_account.id,       'reconciled':True},
            {'amount_currency':96.0,  'debit':48.0, 'credit':0.0,     'account_id':self.product_line_vals_2['account_id'],  'reconciled':False},
            {'amount_currency':-96.0, 'debit':0.0,  'credit':48.0,    'account_id':wizard.expense_accrual_account.id,       'reconciled':True},
        ])

    deftest_in_invoice_reverse_caba(self):
        tax_waiting_account=self.env['account.account'].create({
            'name':'TAX_WAIT',
            'code':'TWAIT',
            'user_type_id':self.env.ref('account.data_account_type_current_liabilities').id,
            'reconcile':True,
            'company_id':self.company_data['company'].id,
        })
        tax_final_account=self.env['account.account'].create({
            'name':'TAX_TO_DEDUCT',
            'code':'TDEDUCT',
            'user_type_id':self.env.ref('account.data_account_type_current_assets').id,
            'company_id':self.company_data['company'].id,
        })
        tax_base_amount_account=self.env['account.account'].create({
            'name':'TAX_BASE',
            'code':'TBASE',
            'user_type_id':self.env.ref('account.data_account_type_current_assets').id,
            'company_id':self.company_data['company'].id,
        })
        self.env.company.account_cash_basis_base_account_id=tax_base_amount_account
        self.env.company.tax_exigibility=True
        tax_tags=defaultdict(dict)
        forline_type,repartition_typein[(l,r)forlin('invoice','refund')forrin('base','tax')]:
            tax_tags[line_type][repartition_type]=self.env['account.account.tag'].create({
                'name':'%s%stag'%(line_type,repartition_type),
                'applicability':'taxes',
                'country_id':self.env.ref('base.us').id,
            })
        tax=self.env['account.tax'].create({
            'name':'cashbasis10%',
            'type_tax_use':'purchase',
            'amount':10,
            'tax_exigibility':'on_payment',
            'cash_basis_transition_account_id':tax_waiting_account.id,
            'invoice_repartition_line_ids':[
                (0,0,{
                    'factor_percent':100,
                    'repartition_type':'base',
                    'tag_ids':[(6,0,tax_tags['invoice']['base'].ids)],
                }),
                (0,0,{
                    'factor_percent':100,
                    'repartition_type':'tax',
                    'account_id':tax_final_account.id,
                    'tag_ids':[(6,0,tax_tags['invoice']['tax'].ids)],
                }),
            ],
            'refund_repartition_line_ids':[
                (0,0,{
                    'factor_percent':100,
                    'repartition_type':'base',
                    'tag_ids':[(6,0,tax_tags['refund']['base'].ids)],
                }),
                (0,0,{
                    'factor_percent':100,
                    'repartition_type':'tax',
                    'account_id':tax_final_account.id,
                    'tag_ids':[(6,0,tax_tags['refund']['tax'].ids)],
                }),
            ],
        })
        #createinvoice
        move_form=Form(self.env['account.move'].with_context(default_move_type='in_invoice'))
        move_form.partner_id=self.partner_a
        move_form.invoice_date=fields.Date.from_string('2017-01-01')
        withmove_form.invoice_line_ids.new()asline_form:
            line_form.product_id=self.product_a
            line_form.tax_ids.clear()
            line_form.tax_ids.add(tax)
        invoice=move_form.save()
        invoice.action_post()
        #makepayment
        self.env['account.payment.register'].with_context(active_model='account.move',active_ids=invoice.ids).create({
            'payment_date':invoice.date,
        })._create_payments()
        #checkcabamove
        partial_rec=invoice.mapped('line_ids.matched_debit_ids')
        caba_move=self.env['account.move'].search([('tax_cash_basis_rec_id','=',partial_rec.id)])
        expected_values=[
            {
                'tax_line_id':False,
                'tax_repartition_line_id':False,
                'tax_ids':[],
                'tax_tag_ids':[],
                'account_id':tax_base_amount_account.id,
                'debit':0.0,
                'credit':800.0,
            },
            {
                'tax_line_id':False,
                'tax_repartition_line_id':False,
                'tax_ids':tax.ids,
                'tax_tag_ids':tax_tags['invoice']['base'].ids,
                'account_id':tax_base_amount_account.id,
                'debit':800.0,
                'credit':0.0,
            },
            {
                'tax_line_id':False,
                'tax_repartition_line_id':False,
                'tax_ids':[],
                'tax_tag_ids':[],
                'account_id':tax_waiting_account.id,
                'debit':0.0,
                'credit':80.0,
            },
            {
                'tax_line_id':tax.id,
                'tax_repartition_line_id':tax.invoice_repartition_line_ids.filtered(lambdax:x.repartition_type=='tax').id,
                'tax_ids':[],
                'tax_tag_ids':tax_tags['invoice']['tax'].ids,
                'account_id':tax_final_account.id,
                'debit':80.0,
                'credit':0.0,
            },
        ]
        self.assertRecordValues(caba_move.line_ids,expected_values)
        #unreconcile
        credit_aml=invoice.line_ids.filtered('credit')
        credit_aml.remove_move_reconcile()
        #checkcabamovereverseissameascabamovewithonlydebit/creditinverted
        reversed_caba_move=self.env['account.move'].search([('reversed_entry_id','=',caba_move.id)])
        forvalueinexpected_values:
            value.update({
                'debit':value['credit'],
                'credit':value['debit'],
            })
        self.assertRecordValues(reversed_caba_move.line_ids,expected_values)

    deftest_in_invoice_line_tax_line_delete(self):
        withForm(self.invoice)asinvoice_form:
            lines_count=len(invoice_form.line_ids)
            withinvoice_form.line_ids.edit(0)asline_form:
                tax=line_form.tax_line_id
            invoice_form.line_ids.remove(0)
            #checkthatthetaxlineisrecreated
            self.assertEqual(len(invoice_form.line_ids),lines_count)

        #Assertthetaxlineisrecreatedforthetax
        self.assertIn(tax,self.invoice.line_ids.tax_line_id)

    deftest_bill_amount_should_be_editable(self):
        tax0=self.env['account.tax'].create({
            'name':'test_tax_0',
            'amount_type':'percent',
            'amount':0.0,
            'type_tax_use':'purchase',
        })
        invoice_form=Form(self.env['account.move'].with_context(default_move_type='in_invoice'))
        invoice_form.partner_id=self.partner_a
        #Both15%defaulttaxand0%tax,willhaveonlyonetaxlineforthe15%
        withinvoice_form.invoice_line_ids.new()asline:
            line.name='test_line_1'
            line.account_id=self.company_data['default_account_expense']
            line.tax_ids.add(tax0)
            line.price_unit=200.0
        #onlythedefault15%taxisset
        withinvoice_form.invoice_line_ids.new()asline:
            line.name='test_line_2'
            line.account_id=self.company_data['default_account_expense']
            line.price_unit=100.0
        #notaxbecauseofzeroprice
        withinvoice_form.invoice_line_ids.new()asline:
            line.name='test_line_3'
            line.account_id=self.company_data['default_account_expense']
            line.price_unit=0.0

        invoice=invoice_form.save()

        #mimicthebehavioreditingtaxeswith`tax_group_widget`
        withinvoice_form:
            withinvoice_form.line_ids.edit(0)astax_line_form:
                tax_line_form.debit=500.0

        #makesuretaxesarenotrecompute
        self.assertRecordValues(invoice.line_ids.filtered(lambdaline:line.tax_line_id),
                                [{
                                    'debit':500,
                                    'tax_line_id':self.company_data['default_tax_purchase'].id,
                                }])

    deftest_invoice_sent_to_additional_partner(self):
        """
        Makesurethatwhenaninvoiceisapartnertoapartnerwhoisnot
        theinvoicedcustomer,theyreceivealinkcontaininganaccesstoken,
        allowingthemtoviewtheinvoicewithoutneedingtologin.
        """

        #Createasimpleinvoiceforthepartner
        invoice=self.init_invoice(
            'out_invoice',partner=self.partner_a,invoice_date='2023-04-17',amounts=[100])

        #Settheinvoicetothe'posted'state
        invoice.action_post()

        #Createapartnernotrelatedtotheinvoice
        additional_partner=self.env["res.partner"].create({
            "name":"AdditionalPartner",
            "email":"additional@example.com",
        })

        #Sendtheinvoice
        action=invoice.action_invoice_sent()
        action_context=action["context"]

        #Createtheemailusingthewizardandaddtheadditionalpartnerasarecipient
        invoice_send_wizard=self.env["account.invoice.send"].with_context(
            action_context,
            active_ids=[invoice.id]
        ).create({'is_print':False})
        invoice_send_wizard.partner_ids|=additional_partner

        invoice_send_wizard.template_id.auto_delete=False

        invoice_send_wizard.send_and_print_action()

        #Findtheemailsenttotheadditionalpartner
        additional_partner_mail=self.env["mail.mail"].search([
            ("res_id","=",invoice.id),
            ('recipient_ids','=',additional_partner.id)
        ])

        self.assertIn('access_token=',additional_partner_mail.body_html,
                      "Theadditionalpartnershouldbesentthelinkincludingthetoken")
