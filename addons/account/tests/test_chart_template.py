importlogging

fromflectra.addons.account.models.chart_templateimportupdate_taxes_from_templates
fromflectra.testsimporttagged
fromflectra.tests.commonimportSavepointCase


@tagged('post_install','-at_install')
classTestChartTemplate(SavepointCase):

    @classmethod
    defsetUpClass(cls):
        """Setupacompanywiththegenericcharttemplate,containingtwotaxesandafiscalposition.
        Weneedtoaddxml_idstothetemplatesbecausetheyareloadedfromtheirxml_ids
        """
        super().setUpClass()

        us_country_id=cls.env.ref('base.us').id
        cls.company=cls.env['res.company'].create({
            'name':'TestCompany1',
            'country_id':us_country_id,
            'account_tax_fiscal_country_id':us_country_id,
        })

        cls.chart_template_xmlid='l10n_test.test_chart_template_xmlid'
        cls.chart_template=cls.env['account.chart.template']._load_records([{
            'xml_id':cls.chart_template_xmlid,
            'values':{
                'name':'TestChartTemplateUS',
                'currency_id':cls.env.ref('base.USD').id,
                'bank_account_code_prefix':1000,
                'cash_account_code_prefix':2000,
                'transfer_account_code_prefix':3000,
            }
        }])
        account_templates=cls.env['account.account.template']._load_records([{
            'xml_id':'account.test_account_income_template',
            'values':
                {
                    'name':'property_income_account',
                    'code':'222221',
                    'user_type_id':cls.env.ref('account.data_account_type_revenue').id,
                    'chart_template_id':cls.chart_template.id,
                }
        },{
            'xml_id':'account.test_account_expense_template',
            'values':
                {
                    'name':'property_expense_account',
                    'code':'222222',
                    'user_type_id':cls.env.ref('account.data_account_type_expenses').id,
                    'chart_template_id':cls.chart_template.id,
                }
        }])
        cls.chart_template.property_account_income_categ_id=account_templates[0].id
        cls.chart_template.property_account_expense_categ_id=account_templates[1].id

        cls.fiscal_position_template=cls._create_fiscal_position_template('account.test_fiscal_position_template',
                                                                            'USfiscalpositiontest',us_country_id)
        cls.tax_template_1=cls._create_tax_template('account.test_tax_template_1','Taxname1',1,'tag_name_1')
        cls.tax_template_2=cls._create_tax_template('account.test_tax_template_2','Taxname2',2,'tag_name_2')
        cls.fiscal_position_tax_template_1=cls._create_fiscal_position_tax_template(
            cls.fiscal_position_template,'account.test_fp_tax_template_1',cls.tax_template_1,cls.tax_template_2
        )

        cls.chart_template.try_loading(company=cls.company)
        cls.chart_template_xmlid=cls.chart_template.get_external_id()[cls.chart_template.id]
        cls.fiscal_position=cls.env['account.fiscal.position'].search([
            ('company_id','=',cls.company.id),
            ('name','=',cls.fiscal_position_template.name),
        ])

    @classmethod
    defcreate_tax_template(cls,name,template_name,amount):
        #TODOtoremoveinmaster
        logging.warning("Deprecatedmethod,pleaseuse_create_tax_template()instead")
        returncls._create_tax_template(template_name,name,amount,tag_name=None)

    @classmethod
    def_create_group_tax_template(cls,tax_template_xmlid,name,chart_template_id=None,active=True):
        children_1=cls._create_tax_template(f'{tax_template_xmlid}_children1',f'{name}_children_1',10,
                                              active=active)
        children_2=cls._create_tax_template(f'{tax_template_xmlid}_children2',f'{name}_children_2',15,
                                              active=active)
        returncls.env['account.tax.template']._load_records([{
            'xml_id':tax_template_xmlid,
            'values':{
                'name':name,
                'amount_type':'group',
                'type_tax_use':'none',
                'active':active,
                'chart_template_id':chart_template_idifchart_template_idelsecls.chart_template.id,
                'children_tax_ids':[(6,0,(children_1+children_2).ids)],
            },
        }])

    @classmethod
    def_create_tax_template(cls,tax_template_xmlid,name,amount,tag_name=None,account_data=None,active=True):
        iftag_name:
            tag=cls.env['account.account.tag'].create({
                'name':tag_name,
                'applicability':'taxes',
                'country_id':cls.company.account_tax_fiscal_country_id.id,
            })
        ifaccount_data:
            account_vals={
                'name':account_data['name'],
                'code':account_data['code'],
                'user_type_id':cls.env.ref('account.data_account_type_current_liabilities').id,
            }
            #Wehavetoinstantiateboththetemplateandtherecordsincewesupposeaccountsarealreadycreated.
            account_template=cls.env['account.account.template'].create(account_vals)
            account_vals.update({'company_id':cls.company.id})
            cls.env['account.account'].create(account_vals)
        returncls.env['account.tax.template']._load_records([{
            'xml_id':tax_template_xmlid,
            'values':{
                'name':name,
                'amount':amount,
                'type_tax_use':'none',
                'active':active,
                'chart_template_id':cls.chart_template.id,
                'invoice_repartition_line_ids':[
                    (0,0,{
                        'factor_percent':100,
                        'repartition_type':'base',
                        'tag_ids':[(6,0,tag.ids)]iftag_nameelseNone,
                    }),
                    (0,0,{
                        'factor_percent':100,
                        'account_id':account_template.idifaccount_dataelseNone,
                        'repartition_type':'tax',
                    }),
                ],
                'refund_repartition_line_ids':[
                    (0,0,{
                        'factor_percent':100,
                        'repartition_type':'base',
                        'tag_ids':[(6,0,tag.ids)]iftag_nameelseNone,
                    }),
                    (0,0,{
                        'factor_percent':100,
                        'account_id':account_template.idifaccount_dataelseNone,
                        'repartition_type':'tax',
                    }),
                ],
            },
        }])

    @classmethod
    def_create_fiscal_position_template(cls,fp_template_xmlid,fp_template_name,country_id):
        returncls.env['account.fiscal.position.template']._load_records([{
            'xml_id':fp_template_xmlid,
            'values':{
                'name':fp_template_name,
                'chart_template_id':cls.chart_template.id,
                'country_id':country_id,
                'auto_apply':True,
            },
        }])

    @classmethod
    def_create_fiscal_position_tax_template(cls,fiscal_position_template,fiscal_position_tax_template_xmlid,tax_template_src,tax_template_dest):
        returncls.env['account.fiscal.position.tax.template']._load_records([{
            'xml_id':fiscal_position_tax_template_xmlid,
            'values':{
                'tax_src_id':tax_template_src.id,
                'tax_dest_id':tax_template_dest.id,
                'position_id':fiscal_position_template.id,
            },
        }])

    deftest_update_taxes_new_template(self):
        """Teststhataddinganewtaxtemplateandafiscalpositiontaxtemplate
        createsthisnewtaxandfiscalpositionlinewhenupdating
        """
        tax_template_3=self._create_tax_template('account.test_tax_3_template','Taxname3',3,'tag_name_3')
        tax_template_4=self._create_tax_template('account.test_tax_4_template','Taxname4',4,account_data={'name':'account_name_4','code':'TACT'})
        self._create_fiscal_position_tax_template(self.fiscal_position_template,'account.test_fiscal_position_tax_template',tax_template_3,tax_template_4)
        update_taxes_from_templates(self.env.cr,self.chart_template_xmlid)

        taxes=self.env['account.tax'].search([
            ('company_id','=',self.company.id),
            ('name','in',[tax_template_3.name,tax_template_4.name]),
        ])
        self.assertRecordValues(taxes,[
            {'name':'Taxname3','amount':3},
            {'name':'Taxname4','amount':4},
        ])
        self.assertEqual(taxes.invoice_repartition_line_ids.tag_ids.name,'tag_name_3')
        self.assertEqual(taxes.invoice_repartition_line_ids.account_id.name,'account_name_4')
        self.assertRecordValues(self.fiscal_position.tax_ids.tax_src_id,[
            {'name':'Taxname1'},
            {'name':'Taxname3'},
        ])
        self.assertRecordValues(self.fiscal_position.tax_ids.tax_dest_id,[
            {'name':'Taxname2'},
            {'name':'Taxname4'},
        ])

    deftest_update_taxes_existing_template_update(self):
        """Whenatemplateiscloseenoughfromthecorrespondingexistingtaxwewanttoupdate
        thattaxwiththetemplatevalues.
        """
        self.tax_template_1.invoice_repartition_line_ids.tag_ids.name+="[DUP]"
        update_taxes_from_templates(self.env.cr,self.chart_template_xmlid)

        tax=self.env['account.tax'].search([
            ('company_id','=',self.company.id),
            ('name','=',self.tax_template_1.name),
        ])
        #Checkthattaxwasnotrecreated
        self.assertEqual(len(tax),1)
        #Checkthattagshavebeenupdated
        self.assertEqual(tax.invoice_repartition_line_ids.tag_ids.name,self.tax_template_1.invoice_repartition_line_ids.tag_ids.name)

    deftest_update_taxes_existing_template_recreation(self):
        """Whenatemplateistoodifferentfromthecorrespondingexistingtaxwewanttorecreate
        anewtaxesfromtemplate.
        """
        #Weincrementtheamountsothetemplategetsslightlydifferentfromthe
        #correspondingtaxandtriggersrecreation
        old_tax_name=self.tax_template_1.name
        old_tax_amount=self.tax_template_1.amount
        self.tax_template_1.name="Taxname1modified"
        self.tax_template_1.amount+=1
        update_taxes_from_templates(self.env.cr,self.chart_template_xmlid)

        #Checkthatoldtaxhasnotbeenchanged
        old_tax=self.env['account.tax'].search([
            ('company_id','=',self.company.id),
            ('name','=',old_tax_name),
        ],limit=1)
        self.assertEqual(old_tax[0].amount,old_tax_amount)

        #Checkthatnewtaxhasbeenrecreated
        tax=self.env['account.tax'].search([
            ('company_id','=',self.company.id),
            ('name','=',self.tax_template_1.name),
        ],limit=1)
        self.assertEqual(tax[0].amount,self.tax_template_1.amount)

    deftest_update_taxes_remove_fiscal_position_from_tax(self):
        """Teststhatwhenweremovethetaxfromthefiscalpositionmappingitisnot
        recreatedafterupdateoftaxes.
        """
        self.fiscal_position.tax_ids.unlink()
        update_taxes_from_templates(self.env.cr,self.chart_template_xmlid)
        self.assertEqual(len(self.fiscal_position.tax_ids),0)

    deftest_update_taxes_conflict_name(self):
        """Whenrecreatingataxduringupdateaconflictnamecanoccursince
        weneedtorespectuniqueconstrainton(name,company_id,type_tax_use,tax_scope).
        Todoso,theoldtaxneedstobeprefixedwith'[old]'.
        """
        #Weincrementtheamountsothetemplategetsslightlydifferentfromthe
        #correspondingtaxandtriggersrecreation
        old_amount=self.tax_template_1.amount
        self.tax_template_1.amount+=1
        update_taxes_from_templates(self.env.cr,self.chart_template_xmlid)

        taxes_from_template_1=self.env['account.tax'].search([
            ('company_id','=',self.company.id),
            ('name','like',f"%{self.tax_template_1.name}"),
        ])
        self.assertRecordValues(taxes_from_template_1,[
            {'name':f"[old]{self.tax_template_1.name}",'amount':old_amount},
            {'name':f"{self.tax_template_1.name}",'amount':self.tax_template_1.amount},
        ])

    deftest_update_taxes_multi_company(self):
        """Inamulti-companyenvironmentallcompaniesshouldbecorrectlyupdated."""
        company_2=self.env['res.company'].create({
            'name':'TestCompany2',
            'country_id':self.env.ref('base.be').id,
            'account_tax_fiscal_country_id':self.env.ref('base.be').id,
        })
        self.chart_template.try_loading(company=company_2)

        #triggersrecreationoftaxesrelatedtotemplate1
        self.tax_template_1.amount+=1
        update_taxes_from_templates(self.env.cr,self.chart_template_xmlid)

        taxes_from_template_1=self.env['account.tax'].search([
            ('name','like',f"%{self.tax_template_1.name}"),
            ('company_id','in',[self.company.id,company_2.id]),
        ])
        #weshouldhave4records:2companies*(1originaltax+1recreatedtax)
        self.assertEqual(len(taxes_from_template_1),4)

    deftest_message_to_accountants(self):
        """Whenweduplicateataxbecauseitwastoodifferentfromtheexistingonewesend
        amessagetoaccountantadvisors.Thismessageshouldonlybesenttoadvisors
        andnottoregularusers.
        """
        #create1normaluser,2accountantsmanagers
        accountant_manager_group=self.env.ref('account.group_account_manager')
        advisor_users=self.env['res.users'].create([{
            'name':'AccountAdvisorTest1',
            'login':'aat1',
            'password':'aat1aat1',
            'groups_id':[(4,accountant_manager_group.id)],
        },{
            'name':'AccountAdvisorTest2',
            'login':'aat2',
            'password':'aat2aat2',
            'groups_id':[(4,accountant_manager_group.id)],
        }])
        normal_user=self.env['res.users'].create([{
            'name':'AccountUserTest1',
            'login':'aut1',
            'password':'aut1aut1',
            'groups_id':[(4,self.env.ref('account.group_account_user').id)],
        }])
        #createsituationwhereweneedtorecreatethetaxduringupdatetogetnotification(s)sent
        self.tax_template_1.amount+=1
        update_taxes_from_templates(self.env.cr,self.chart_template_xmlid)

        #accountantsreceivedthemessage
        self.assertEqual(self.env['mail.message'].search_count([
            ('partner_ids','in',advisor_users.partner_id.ids),
            ('body','like',f"%{self.tax_template_1.name}%"), #welookfortaxes'namethathavebeensentinthemessage'sbody
        ]),1)
        #normaluserdidn't
        self.assertEqual(self.env['mail.message'].search_count([
            ('partner_ids','in',normal_user.partner_id.ids),
            ('body','like',f"%{self.tax_template_1.name}%"), #welookfortaxes'namethathavebeensentinthemessage'sbody
        ]),0)

    deftest_update_taxes_children_tax_ids(self):
        """Ensureschildren_tax_idsarecorrectlygeneratedwhenupdatingtaxeswith
        amount_type='group'.
        """
        #Bothparentanditstwochildrenshouldbecreated.
        group_tax_name='GroupTaxname1TEST'
        self._create_group_tax_template('account.test_group_tax_test_template',group_tax_name,
                                        chart_template_id=self.chart_template.id)
        update_taxes_from_templates(self.env.cr,self.chart_template_xmlid)

        parent_tax=self.env['account.tax'].search([
            ('company_id','=',self.company.id),
            ('name','=',group_tax_name),
        ])
        children_taxes=self.env['account.tax'].search([
            ('company_id','=',self.company.id),
            ('name','like',f'{group_tax_name}_%'),
        ])
        self.assertEqual(len(parent_tax),1,"Theparenttaxshouldhavebeencreated.")
        self.assertEqual(len(children_taxes),2,"Twochildrenshouldhavebeencreated.")
        self.assertEqual(parent_tax.children_tax_ids.ids,children_taxes.ids,
                         "Theparentanditschildrentaxesshouldbelinkedtogether.")

        #Parentexists-onlythetwochildrenshouldbecreated.
        children_taxes.unlink()
        update_taxes_from_templates(self.env.cr,self.chart_template_xmlid)
        children_taxes=self.env['account.tax'].search([
            ('company_id','=',self.company.id),
            ('name','like',f'{group_tax_name}_%'),
        ])
        self.assertEqual(len(children_taxes),2,"Twochildrenshouldbere-created.")
        self.assertEqual(parent_tax.children_tax_ids.ids,children_taxes.ids,
                         "Theparentanditschildrentaxesshouldbelinkedtogether.")

        #Childrenexist-onlytheparentshouldbecreated.
        parent_tax.unlink()
        update_taxes_from_templates(self.env.cr,self.chart_template_xmlid)
        parent_tax=self.env['account.tax'].search([
            ('company_id','=',self.company.id),
            ('name','=',group_tax_name),
        ])
        self.assertEqual(len(parent_tax),1,"Theparenttaxshouldhavebeenre-created.")
        self.assertEqual(parent_tax.children_tax_ids.ids,children_taxes.ids,
                         "Theparentanditschildrentaxesshouldbelinkedtogether.")

    deftest_update_taxes_children_tax_ids_inactive(self):
        """Ensuretaxtemplatesarecorrectlygeneratedwhenupdatingtaxeswithchildrentaxes,
        eveniftemplatesareinactive.
        """
        group_tax_name='GroupTaxname1inactiveTEST'
        self._create_group_tax_template('account.test_group_tax_test_template_inactive',group_tax_name,
                                        chart_template_id=self.chart_template.id,active=False)
        update_taxes_from_templates(self.env.cr,self.chart_template_xmlid)

        parent_tax=self.env['account.tax'].with_context(active_test=False).search([
            ('company_id','=',self.company.id),
            ('name','=',group_tax_name),
        ])
        children_taxes=self.env['account.tax'].with_context(active_test=False).search([
            ('company_id','=',self.company.id),
            ('name','like',f'{group_tax_name}_%'),
        ])
        self.assertEqual(len(parent_tax),1,"Theparenttaxshouldhavebeencreated,evenifitisinactive.")
        self.assertFalse(parent_tax.active,"Theparenttaxshouldbeinactive.")
        self.assertEqual(len(children_taxes),2,"Twochildrenshouldhavebeencreated,eveniftheyareinactive.")
        self.assertEqual(children_taxes.mapped('active'),[False]*2,"Childrentaxesshouldbeinactive.")
