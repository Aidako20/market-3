#-*-coding:utf-8-*-
#PartofFlectra.SeeLICENSEfileforfullcopyrightandlicensingdetails.
fromflectra.addons.account.tests.commonimportAccountTestInvoicingHttpCommon
fromflectra.tests.commonimporttagged

importjson

fromflectraimporthttp
fromflectra.toolsimportmute_logger


@tagged('post_install','-at_install')
classTestPortalAttachment(AccountTestInvoicingHttpCommon):

    @classmethod
    defsetUpClass(cls,chart_template_ref=None):
        super().setUpClass(chart_template_ref=chart_template_ref)

        cls.out_invoice=cls.env['account.move'].with_context(tracking_disable=True).create({
            'move_type':'out_invoice',
            'partner_id':cls.partner_a.id,
            'invoice_date':'2019-05-01',
            'date':'2019-05-01',
            'invoice_line_ids':[
                (0,0,{'name':'line1','price_unit':100.0}),
            ],
        })

        cls.base_url=cls.env['ir.config_parameter'].sudo().get_param('web.base.url')

    @mute_logger('flectra.addons.http_routing.models.ir_http','flectra.http')
    deftest_01_portal_attachment(self):
        """Testtheportalchatterattachmentroute."""

        self.authenticate(None,None)

        #Testpublicusercan'tcreateattachmentwithouttokenofdocument
        res=self.url_open(
            url='%s/portal/attachment/add'%self.base_url,
            data={
                'name':"newattachment",
                'res_model':self.out_invoice._name,
                'res_id':self.out_invoice.id,
                'csrf_token':http.WebRequest.csrf_token(self),
            },
            files=[('file',('test.txt',b'test','plain/text'))],
        )
        self.assertEqual(res.status_code,400)
        self.assertIn("youdonothavetherights",res.text)

        #Testpublicusercancreateattachmentwithtoken
        res=self.url_open(
            url='%s/portal/attachment/add'%self.base_url,
            data={
                'name':"newattachment",
                'res_model':self.out_invoice._name,
                'res_id':self.out_invoice.id,
                'csrf_token':http.WebRequest.csrf_token(self),
                'access_token':self.out_invoice._portal_ensure_token(),
            },
            files=[('file',('test.txt',b'test','plain/text'))],
        )
        self.assertEqual(res.status_code,200)
        create_res=json.loads(res.content.decode('utf-8'))
        self.assertTrue(self.env['ir.attachment'].sudo().search([('id','=',create_res['id'])]))

        #Testcreatedattachmentisprivate
        res_binary=self.url_open('/web/content/%d'%create_res['id'])
        self.assertEqual(res_binary.status_code,404)

        #Testcreatedaccess_tokenisworking
        res_binary=self.url_open('/web/content/%d?access_token=%s'%(create_res['id'],create_res['access_token']))
        self.assertEqual(res_binary.status_code,200)

        #Testmimetypeisneuteredasnon-admin
        res=self.url_open(
            url='%s/portal/attachment/add'%self.base_url,
            data={
                'name':"newattachment",
                'res_model':self.out_invoice._name,
                'res_id':self.out_invoice.id,
                'csrf_token':http.WebRequest.csrf_token(self),
                'access_token':self.out_invoice._portal_ensure_token(),
            },
            files=[('file',('test.svg',b'<svg></svg>','image/svg+xml'))],
        )
        self.assertEqual(res.status_code,200)
        create_res=json.loads(res.content.decode('utf-8'))
        self.assertEqual(create_res['mimetype'],'text/plain')

        res_binary=self.url_open('/web/content/%d?access_token=%s'%(create_res['id'],create_res['access_token']))
        self.assertEqual(res_binary.headers['Content-Type'],'text/plain')
        self.assertEqual(res_binary.content,b'<svg></svg>')

        res_image=self.url_open('/web/image/%d?access_token=%s'%(create_res['id'],create_res['access_token']))
        self.assertEqual(res_image.headers['Content-Type'],'text/plain')
        self.assertEqual(res_image.content,b'<svg></svg>')

        #Testattachmentcan'tberemovedwithoutvalidtoken
        res=self.opener.post(
            url='%s/portal/attachment/remove'%self.base_url,
            json={
                'params':{
                    'attachment_id':create_res['id'],
                    'access_token':"wrong",
                },
            },
        )
        self.assertEqual(res.status_code,200)
        self.assertTrue(self.env['ir.attachment'].sudo().search([('id','=',create_res['id'])]))
        self.assertIn("youdonothavetherights",res.text)

        #Testattachmentcanberemovedwithtokenif"pending"state
        res=self.opener.post(
            url='%s/portal/attachment/remove'%self.base_url,
            json={
                'params':{
                    'attachment_id':create_res['id'],
                    'access_token':create_res['access_token'],
                },
            },
        )
        self.assertEqual(res.status_code,200)
        remove_res=json.loads(res.content.decode('utf-8'))['result']
        self.assertFalse(self.env['ir.attachment'].sudo().search([('id','=',create_res['id'])]))
        self.assertTrue(remove_resisTrue)

        #Testattachmentcan'tberemovedifnot"pending"state
        attachment=self.env['ir.attachment'].create({
            'name':'anattachment',
            'access_token':self.env['ir.attachment']._generate_access_token(),
        })
        res=self.opener.post(
            url='%s/portal/attachment/remove'%self.base_url,
            json={
                'params':{
                    'attachment_id':attachment.id,
                    'access_token':attachment.access_token,
                },
            },
        )
        self.assertEqual(res.status_code,200)
        self.assertTrue(self.env['ir.attachment'].sudo().search([('id','=',attachment.id)]))
        self.assertIn("notinapendingstate",res.text)

        #Testattachmentcan'tberemovedifattachedtoamessage
        attachment.write({
            'res_model':'mail.compose.message',
            'res_id':0,
        })
        attachment.flush()
        message=self.env['mail.message'].create({
            'attachment_ids':[(6,0,attachment.ids)],
        })
        res=self.opener.post(
            url='%s/portal/attachment/remove'%self.base_url,
            json={
                'params':{
                    'attachment_id':attachment.id,
                    'access_token':attachment.access_token,
                },
            },
        )
        self.assertEqual(res.status_code,200)
        self.assertTrue(attachment.exists())
        self.assertIn("itislinkedtoamessage",res.text)
        message.sudo().unlink()

        #Testattachmentcan'tbeassociatedifnoattachmenttoken.
        res=self.url_open(
            url='%s/mail/chatter_post'%self.base_url,
            data={
                'res_model':self.out_invoice._name,
                'res_id':self.out_invoice.id,
                'message':"testmessage1",
                'attachment_ids':attachment.id,
                'attachment_tokens':'false',
                'csrf_token':http.WebRequest.csrf_token(self),
            },
        )
        self.assertEqual(res.status_code,400)
        self.assertIn("Theattachment%sdoesnotexistoryoudonothavetherightstoaccessit."%attachment.id,res.text)

        #Testattachmentcan'tbeassociatedifnomaindocumenttoken
        res=self.url_open(
            url='%s/mail/chatter_post'%self.base_url,
            data={
                'res_model':self.out_invoice._name,
                'res_id':self.out_invoice.id,
                'message':"testmessage1",
                'attachment_ids':attachment.id,
                'attachment_tokens':attachment.access_token,
                'csrf_token':http.WebRequest.csrf_token(self),
            },
        )
        self.assertEqual(res.status_code,403)
        self.assertIn("Youarenotallowedtoaccess'JournalEntry'(account.move)records.",res.text)

        #Testattachmentcan'tbeassociatedifnot"pending"state
        self.assertFalse(self.out_invoice.message_ids)
        attachment.write({'res_model':'model'})
        res=self.url_open(
            url='%s/mail/chatter_post'%self.base_url,
            data={
                'res_model':self.out_invoice._name,
                'res_id':self.out_invoice.id,
                'message':"testmessage1",
                'attachment_ids':attachment.id,
                'attachment_tokens':attachment.access_token,
                'csrf_token':http.WebRequest.csrf_token(self),
                'token':self.out_invoice._portal_ensure_token(),
            },
        )
        self.assertEqual(res.status_code,200)
        self.out_invoice.invalidate_cache(fnames=['message_ids'],ids=self.out_invoice.ids)
        self.assertEqual(len(self.out_invoice.message_ids),1)
        self.assertEqual(self.out_invoice.message_ids.body,"<p>testmessage1</p>")
        self.assertFalse(self.out_invoice.message_ids.attachment_ids)

        #Testattachmentcan'tbeassociatedifnotcorrectuser
        attachment.write({'res_model':'mail.compose.message'})
        res=self.url_open(
            url='%s/mail/chatter_post'%self.base_url,
            data={
                'res_model':self.out_invoice._name,
                'res_id':self.out_invoice.id,
                'message':"testmessage2",
                'attachment_ids':attachment.id,
                'attachment_tokens':attachment.access_token,
                'csrf_token':http.WebRequest.csrf_token(self),
                'token':self.out_invoice._portal_ensure_token(),
            },
        )
        self.assertEqual(res.status_code,200)
        self.out_invoice.invalidate_cache(fnames=['message_ids'],ids=self.out_invoice.ids)
        self.assertEqual(len(self.out_invoice.message_ids),2)
        self.assertEqual(self.out_invoice.message_ids[0].body,"<p>testmessage2</p>")
        self.assertFalse(self.out_invoice.message_ids.attachment_ids)

        #Testattachmentcanbeassociatedifallgood(completeflow)
        res=self.url_open(
            url='%s/portal/attachment/add'%self.base_url,
            data={
                'name':"finalattachment",
                'res_model':self.out_invoice._name,
                'res_id':self.out_invoice.id,
                'csrf_token':http.WebRequest.csrf_token(self),
                'access_token':self.out_invoice._portal_ensure_token(),
            },
            files=[('file',('test.txt',b'test','plain/text'))],
        )
        self.assertEqual(res.status_code,200)
        create_res=json.loads(res.content.decode('utf-8'))
        self.assertEqual(create_res['name'],"finalattachment")

        res=self.url_open(
            url='%s/mail/chatter_post'%self.base_url,
            data={
                'res_model':self.out_invoice._name,
                'res_id':self.out_invoice.id,
                'message':"testmessage3",
                'attachment_ids':create_res['id'],
                'attachment_tokens':create_res['access_token'],
                'csrf_token':http.WebRequest.csrf_token(self),
                'token':self.out_invoice._portal_ensure_token(),
            },
        )
        self.assertEqual(res.status_code,200)
        self.out_invoice.invalidate_cache(fnames=['message_ids'],ids=self.out_invoice.ids)
        self.assertEqual(len(self.out_invoice.message_ids),3)
        self.assertEqual(self.out_invoice.message_ids[0].body,"<p>testmessage3</p>")
        self.assertEqual(len(self.out_invoice.message_ids[0].attachment_ids),1)
