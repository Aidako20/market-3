flectra.define('account.tax_group',function(require){
    "usestrict";

    varcore=require('web.core');
    varsession=require('web.session');
    varfieldRegistry=require('web.field_registry');
    varAbstractField=require('web.AbstractField');
    varfieldUtils=require('web.field_utils');
    varQWeb=core.qweb;

    varTaxGroupCustomField=AbstractField.extend({
        events:{
            'click.tax_group_edit':'_onClick',
            'keydown.oe_tax_group_editable.tax_group_edit_inputinput':'_onKeydown',
            'blur.oe_tax_group_editable.tax_group_edit_inputinput':'_onBlur',
        },

        //--------------------------------------------------------------------------
        //Private
        //--------------------------------------------------------------------------

        /**
         *Thismethodiscalledby"_setTaxGroups".Itis
         *responsibleforcalculatingtaxesbasedon
         *taxgroupsandtriggeringaneventto
         *notifytheORMofachange.
         *
         *@param{Id}taxGroupId
         *@param{Float}deltaAmount
         */
         _changeTaxValueByTaxGroup:function(taxGroupId,deltaAmount){
            constself=this;

            //Searchforthefirsttaxlinewiththesametaxgroupandmodifyitsvalue
            functionapplyChange(line_id){
                letdebitAmount=0;
                letcreditAmount=0;
                letamount_currency=0;
                if(line_id.data.currency_id){//Ifmulticurrencyenable
                    if(self.record.data.move_type==="in_invoice"){
                        amount_currency=line_id.data.amount_currency-deltaAmount;
                    }else{
                        amount_currency=line_id.data.amount_currency+deltaAmount;
                    }
                }else{
                    letbalance=line_id.data.price_subtotal;
                    balance-=deltaAmount;
                    if(self.record.data.move_type==="in_invoice"){//Forvendorbill
                        if(balance>0){
                            debitAmount=balance;
                        }elseif(balance<0){
                            creditAmount=-balance;
                        }
                    }else{//Forrefund
                        if(balance>0){
                            creditAmount=balance;
                        }elseif(balance<0){
                            debitAmount=-balance;
                        }
                    }
                }

                //TriggerORM
                self.trigger_up('field_changed',{
                    dataPointID:self.record.id,
                    changes:{line_ids:{operation:"UPDATE",id:line_id.id,data:{amount_currency:amount_currency,debit:debitAmount,credit:creditAmount}}},//account.movechange
                    initialEvent:{dataPointID:line_id.id,changes:{amount_currency:amount_currency,debit:debitAmount,credit:creditAmount},},//account.move.linechange
                });
            }

            letline_id=self.record.data.line_ids.data.find(elem=>elem.data.tax_group_id&&elem.data.tax_group_id.data.id===taxGroupId);

            if(line_id){
                applyChange(line_id);
            }else{
                const{limit,id,count}=self.record.data.line_ids;
                letoffset=count-limit;
                self.trigger_up('load',{
                    id,
                    limit,
                    offset,
                    on_success:value=>{
                        line_id=value.data.find(elem=>elem.data.tax_group_id&&elem.data.tax_group_id.data.id===taxGroupId);
                        applyChange(line_id);
                    },
                });
            }
        },

        /**
         *Thismethodchecksthatthedocumentwherethewidget
         *islocatedisofthe"in_invoice"or"in_refund"type.
         *Thismakesitpossibletoknowifitisapurchase
         *document.
         *
         *@returnsboolean(trueiftheinvoiceisapurchasedocument)
         */
        _isPurchaseDocument:function(){
            returnthis.record.data.move_type==="in_invoice"||this.record.data.move_type==='in_refund';
        },

        /**
         *Thismethodispartofthewidgetlifecycleandallowsyoutorender
         *thewidget.
         *
         *@private
         *@override
         */
        _render:function(){
            varself=this;
            //Displaythepencilandallowtheeventtoclickandeditonlyonpurchasethatarenotpostedandineditmode.
            //sincethefieldisreadonlyitsmodewillalwaysbereadonly.Thereforewehavetouseatrickbycheckingthe
            //formRenderer(theparent)andcheckifitisineditinordertoknowthecorrectmode.
            vardisplayEditWidget=self._isPurchaseDocument()&&this.record.data.state==='draft'&&this.getParent().mode==='edit';
            this.$el.html($(QWeb.render('AccountTaxGroupTemplate',{
                lines:self.value,
                displayEditWidget:displayEditWidget,
            })));
        },

        //--------------------------------------------------------------------------
        //Handler
        //--------------------------------------------------------------------------

        /**
         *Thismethodiscalledwhentheuserisineditmodeand
         *leavesthe<input>field.Then,weexecutethecodethat
         *modifiestheinformation.
         *
         *@param{event}ev
         */
        _onBlur:function(ev){
            ev.preventDefault();
            var$input=$(ev.target);
            varnewValue=$input.val();
            varcurrency=session.get_currency(this.record.data.currency_id.data.id);
            try{
                newValue=fieldUtils.parse.float(newValue);   //Needafloatforformatthevalue.            
                newValue=fieldUtils.format.float(newValue,null,{digits:currency.digits});//returnastringroundedtocurrencyprecision
                newValue=fieldUtils.parse.float(newValue);//convertbacktoFloattocomparewitholdValuetoknowifvaluehaschanged
            }catch(err){
                $input.addClass('o_field_invalid');
                return;
            }
            varoldValue=$input.data('originalValue');
            if(newValue===oldValue||newValue===0){
                returnthis._render();
            }
            vartaxGroupId=$input.parents('.oe_tax_group_editable').data('taxGroupId');
            this._changeTaxValueByTaxGroup(taxGroupId,oldValue-newValue);
        },

        /**
         *Thismethodiscalledwhentheuserclicksonaspecific<td>.
         *itwillhidetheeditbuttonanddisplaythefieldtobeedited.
         *
         *@param{event}ev
         */
        _onClick:function(ev){
            ev.preventDefault();
            var$taxGroupElement=$(ev.target).parents('.oe_tax_group_editable');
            //Showinputandhidepreviouselement
            $taxGroupElement.find('.tax_group_edit').addClass('d-none');
            $taxGroupElement.find('.tax_group_edit_input').removeClass('d-none');
            var$input=$taxGroupElement.find('.tax_group_edit_inputinput');
            //Getoriginalvalueanddisplayitinuserlocaleintheinput
            varformatedOriginalValue=fieldUtils.format.float($input.data('originalValue'),{},{});
            $input.focus();//Focustheinput
            $input.val(formatedOriginalValue);//addvalueinuserlocaletotheinput
        },

        /**
         *Thismethodiscalledwhentheuserisineditmodeandpressing
         *akeyonhiskeyboard.IfthiskeycorrespondstoENTERorTAB,
         *thecodethatmodifiestheinformationisexecuted.
         *
         *@param{event}ev
         */
        _onKeydown:function(ev){
            switch(ev.which){
                //TriggeronlyiftheuserclicksonENTERoronTAB.
                case$.ui.keyCode.ENTER:
                case$.ui.keyCode.TAB:
                    //triggerblurtopreventthecodebeingexecutedtwice
                    $(ev.target).blur();
            }
        },

    });
    fieldRegistry.add('tax-group-custom-field',TaxGroupCustomField)
});
