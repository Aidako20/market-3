#-*-coding:utf-8-*-
#PartofFlectra.SeeLICENSEfileforfullcopyrightandlicensingdetails.

fromflectraimportapi,fields,models,_


classResConfigSettings(models.TransientModel):
    _inherit='res.config.settings'

    has_accounting_entries=fields.Boolean(compute='_compute_has_chart_of_accounts')
    currency_id=fields.Many2one('res.currency',related="company_id.currency_id",required=True,readonly=False,
        string='Currency',help="Maincurrencyofthecompany.")
    currency_exchange_journal_id=fields.Many2one(
        comodel_name='account.journal',
        related='company_id.currency_exchange_journal_id',readonly=False,
        string="CurrencyExchangeJournal",
        domain="[('company_id','=',company_id),('type','=','general')]",
        help='Theaccountingjournalwhereautomaticexchangedifferenceswillberegistered')
    income_currency_exchange_account_id=fields.Many2one(
        comodel_name="account.account",
        related="company_id.income_currency_exchange_account_id",
        string="GainAccount",
        readonly=False,
        domain=lambdaself:"[('internal_type','=','other'),('deprecated','=',False),('company_id','=',company_id),\
                             ('user_type_id','in',%s)]"%[self.env.ref('account.data_account_type_revenue').id,
                                                             self.env.ref('account.data_account_type_other_income').id])
    expense_currency_exchange_account_id=fields.Many2one(
        comodel_name="account.account",
        related="company_id.expense_currency_exchange_account_id",
        string="LossAccount",
        readonly=False,
        domain=lambdaself:"[('internal_type','=','other'),('deprecated','=',False),('company_id','=',company_id),\
                             ('user_type_id','=',%s)]"%self.env.ref('account.data_account_type_expenses').id)
    has_chart_of_accounts=fields.Boolean(compute='_compute_has_chart_of_accounts',string='Companyhasachartofaccounts')
    chart_template_id=fields.Many2one('account.chart.template',string='Template',default=lambdaself:self.env.company.chart_template_id,
        domain="[('visible','=',True)]")
    sale_tax_id=fields.Many2one('account.tax',string="DefaultSaleTax",related='company_id.account_sale_tax_id',readonly=False)
    purchase_tax_id=fields.Many2one('account.tax',string="DefaultPurchaseTax",related='company_id.account_purchase_tax_id',readonly=False)
    tax_calculation_rounding_method=fields.Selection(
        related='company_id.tax_calculation_rounding_method',string='Taxcalculationroundingmethod',readonly=False)
    module_account_accountant=fields.Boolean(string='Accounting')
    group_analytic_accounting=fields.Boolean(string='AnalyticAccounting',
        implied_group='analytic.group_analytic_accounting')
    group_analytic_tags=fields.Boolean(string='AnalyticTags',implied_group='analytic.group_analytic_tags')
    group_warning_account=fields.Boolean(string="WarningsinInvoices",implied_group='account.group_warning_account')
    group_cash_rounding=fields.Boolean(string="CashRounding",implied_group='account.group_cash_rounding')
    #group_show_line_subtotals_tax_excludedandgroup_show_line_subtotals_tax_includedareopposite,
    #sowecanassumeexactlyoneofthemwillbeset,andnottheother.
    #Weneedbothofthemtocoexistsowecantakeadvantageofautomaticgroupassignation.
    group_show_line_subtotals_tax_excluded=fields.Boolean(
        "Showlinesubtotalswithouttaxes(B2B)",
        implied_group='account.group_show_line_subtotals_tax_excluded',
        group='base.group_portal,base.group_user,base.group_public')
    group_show_line_subtotals_tax_included=fields.Boolean(
        "Showlinesubtotalswithtaxes(B2C)",
        implied_group='account.group_show_line_subtotals_tax_included',
        group='base.group_portal,base.group_user,base.group_public')
    group_show_sale_receipts=fields.Boolean(string='SaleReceipt',
        implied_group='account.group_sale_receipts')
    group_show_purchase_receipts=fields.Boolean(string='PurchaseReceipt',
        implied_group='account.group_purchase_receipts')
    show_line_subtotals_tax_selection=fields.Selection([
        ('tax_excluded','Tax-Excluded'),
        ('tax_included','Tax-Included')],string="LineSubtotalsTaxDisplay",
        required=True,default='tax_excluded',
        config_parameter='account.show_line_subtotals_tax_selection')
    module_account_budget=fields.Boolean(string='BudgetManagement')
    module_account_payment=fields.Boolean(string='InvoiceOnlinePayment')
    module_account_reports=fields.Boolean("DynamicReports")
    module_account_check_printing=fields.Boolean("Allowcheckprintinganddeposits")
    module_account_batch_payment=fields.Boolean(string='Usebatchpayments',
        help='Thisallowsyougroupingpaymentsintoasinglebatchandeasesthereconciliationprocess.\n'
             '-Thisinstallstheaccount_batch_paymentmodule.')
    module_account_sepa=fields.Boolean(string='SEPACreditTransfer(SCT)')
    module_account_sepa_direct_debit=fields.Boolean(string='UseSEPADirectDebit')
    module_account_plaid=fields.Boolean(string="PlaidConnector")
    module_account_yodlee=fields.Boolean("BankInterface-Syncyourbankfeedsautomatically")
    module_account_bank_statement_import_qif=fields.Boolean("Import.qiffiles")
    module_account_bank_statement_import_ofx=fields.Boolean("Importin.ofxformat")
    module_account_bank_statement_import_csv=fields.Boolean("Importin.csvformat")
    module_account_bank_statement_import_camt=fields.Boolean("ImportinCAMT.053format")
    module_currency_rate_live=fields.Boolean(string="AutomaticCurrencyRates")
    module_account_intrastat=fields.Boolean(string='Intrastat')
    module_product_margin=fields.Boolean(string="AllowProductMargin")
    module_l10n_eu_service=fields.Boolean(string="EUIntra-communityDistanceSelling")
    module_account_taxcloud=fields.Boolean(string="AccountTaxCloud")
    module_account_invoice_extract=fields.Boolean(string="BillDigitalization")
    module_snailmail_account=fields.Boolean(string="Snailmail")
    tax_exigibility=fields.Boolean(string='CashBasis',related='company_id.tax_exigibility',readonly=False)
    tax_cash_basis_journal_id=fields.Many2one('account.journal',related='company_id.tax_cash_basis_journal_id',string="TaxCashBasisJournal",readonly=False)
    account_cash_basis_base_account_id=fields.Many2one(
        comodel_name='account.account',
        string="BaseTaxReceivedAccount",
        readonly=False,
        related='company_id.account_cash_basis_base_account_id',
        domain=[('deprecated','=',False)])

    qr_code=fields.Boolean(string='DisplaySEPAQR-code',related='company_id.qr_code',readonly=False)
    invoice_is_print=fields.Boolean(string='Print',related='company_id.invoice_is_print',readonly=False)
    invoice_is_email=fields.Boolean(string='SendEmail',related='company_id.invoice_is_email',readonly=False)
    incoterm_id=fields.Many2one('account.incoterms',string='Defaultincoterm',related='company_id.incoterm_id',help='InternationalCommercialTermsareaseriesofpredefinedcommercialtermsusedininternationaltransactions.',readonly=False)
    invoice_terms=fields.Text(related='company_id.invoice_terms',string="Terms&Conditions",readonly=False)
    use_invoice_terms=fields.Boolean(
        string='DefaultTerms&Conditions',
        config_parameter='account.use_invoice_terms')

    #Technicalfieldtohidecountryspecificfieldsfromaccountingconfiguration
    country_code=fields.Char(related='company_id.country_id.code',readonly=True)

    defset_values(self):
        super(ResConfigSettings,self).set_values()
        ifself.group_multi_currency:
            self.env.ref('base.group_user').write({'implied_ids':[(4,self.env.ref('product.group_sale_pricelist').id)]})
        #installachartofaccountsforthegivencompany(ifrequired)
        ifself.env.company==self.company_idandself.chart_template_idandself.chart_template_id!=self.company_id.chart_template_id:
            self.chart_template_id._load(15.0,15.0,self.env.company)

    @api.depends('company_id')
    def_compute_has_chart_of_accounts(self):
        self.has_chart_of_accounts=bool(self.company_id.chart_template_id)
        self.has_accounting_entries=self.env['account.chart.template'].existing_accounting(self.company_id)

    @api.onchange('show_line_subtotals_tax_selection')
    def_onchange_sale_tax(self):
        ifself.show_line_subtotals_tax_selection=="tax_excluded":
            self.update({
                'group_show_line_subtotals_tax_included':False,
                'group_show_line_subtotals_tax_excluded':True,
            })
        else:
            self.update({
                'group_show_line_subtotals_tax_included':True,
                'group_show_line_subtotals_tax_excluded':False,
            })

    @api.onchange('group_analytic_accounting')
    defonchange_analytic_accounting(self):
        ifself.group_analytic_accounting:
            self.module_account_accountant=True

    @api.onchange('module_account_budget')
    defonchange_module_account_budget(self):
        ifself.module_account_budget:
            self.group_analytic_accounting=True

    @api.onchange('module_account_yodlee')
    defonchange_account_yodlee(self):
        ifself.module_account_yodlee:
            self.module_account_plaid=True

    @api.onchange('tax_exigibility')
    def_onchange_tax_exigibility(self):
        res={}
        tax=self.env['account.tax'].search([
            ('company_id','=',self.env.company.id),('tax_exigibility','=','on_payment')
        ],limit=1)
        ifnotself.tax_exigibilityandtax:
            self.tax_exigibility=True
            res['warning']={
                'title':_('Error!'),
                'message':_('Youcannotdisablethissettingbecausesomeofyourtaxesarecashbasis.'
                             'Modifyyourtaxesfirstbeforedisablingthissetting.')
            }
        returnres
