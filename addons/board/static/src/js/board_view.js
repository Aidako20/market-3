flectra.define('board.BoardView',function(require){
"usestrict";

varContext=require('web.Context');
varconfig=require('web.config');
varcore=require('web.core');
vardataManager=require('web.data_manager');
varDialog=require('web.Dialog');
varDomain=require('web.Domain');
varFormController=require('web.FormController');
varFormRenderer=require('web.FormRenderer');
varFormView=require('web.FormView');
varpyUtils=require('web.py_utils');
varsession =require('web.session');
varviewRegistry=require('web.view_registry');

var_t=core._t;
var_lt=core._lt;
varQWeb=core.qweb;

varBoardController=FormController.extend({
    custom_events:_.extend({},FormController.prototype.custom_events,{
        change_layout:'_onChangeLayout',
        enable_dashboard:'_onEnableDashboard',
        save_dashboard:'_saveDashboard',
        switch_view:'_onSwitchView',
    }),

    /**
     *@override
     */
    init:function(parent,model,renderer,params){
        this._super.apply(this,arguments);
        this.customViewID=params.customViewID;
    },

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *@override
     */
    getTitle:function(){
        return_t("MyDashboard");
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *Actuallysaveadashboard
     *
     *@returns{Promise}
     */
    _saveDashboard:function(){
        varboard=this.renderer.getBoard();
        vararch=QWeb.render('DashBoard.xml',_.extend({},board));
        returnthis._rpc({
                route:'/web/view/edit_custom',
                params:{
                    custom_id:this.customViewID,
                    arch:arch,
                }
            }).then(dataManager.invalidate.bind(dataManager));
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *@private
     *@param{FlectraEvent}event
     */
    _onChangeLayout:function(event){
        varself=this;
        vardialog=newDialog(this,{
            title:_t("EditLayout"),
            $content:QWeb.render('DashBoard.layouts',_.clone(event.data))
        });
        dialog.opened().then(function(){
            dialog.$('li').click(function(){
                varlayout=$(this).attr('data-layout');
                self.renderer.changeLayout(layout);
                self._saveDashboard();
                dialog.close();
            });
        });
        dialog.open();
    },
    /**
     *Weneedtointerceptswitch_vieweventcomingfromsubviews,becausewe
     *don'tactuallywanttoswitchviewindashboard,wewanttodoa
     *do_action(whichwillopentherecordinadifferentbreadcrumb).
     *
     *@private
     *@param{FlectraEvent}event
     */
    _onSwitchView:function(event){
        event.stopPropagation();
        this.do_action({
            type:'ir.actions.act_window',
            res_model:event.data.model,
            views:[[event.data.formViewID||false,'form']],
            res_id:event.data.res_id,
        });
    },
});

varBoardRenderer=FormRenderer.extend({
    custom_events:_.extend({},FormRenderer.prototype.custom_events,{
        update_filters:'_onUpdateFilters',
        switch_view:'_onSwitchView',
    }),
    events:_.extend({},FormRenderer.prototype.events,{
        'click.oe_dashboard_column.oe_fold':'_onFoldClick',
        'click.oe_dashboard_link_change_layout':'_onChangeLayout',
        'click.oe_dashboard_column.oe_close':'_onCloseAction',
    }),

    /**
     *@override
     */
    init:function(parent,state,params){
        this._super.apply(this,arguments);
        this.noContentHelp=params.noContentHelp;
        this.actionsDescr={};
        this._boardSubcontrollers=[];//forboard:controllersofsubviews
        this._boardFormViewIDs={};//forboard:mappingsubviewcontrollertoformviewid
    },
    /**
     *@override
     *@return{Promise<void>}
     */
    asyncstart(){
        awaitthis._super.apply(this,arguments);
        if(config.device.isMobile){
            this.changeLayout("1");
        }
    },
    /**
     *Call`on_attach_callback`foreachsubview
     *
     *@override
     */
    on_attach_callback:function(){
        _.each(this._boardSubcontrollers,function(controller){
            if('on_attach_callback'incontroller){
                controller.on_attach_callback();
            }
        });
    },
    /**
     *Call`on_detach_callback`foreachsubview
     *
     *@override
     */
    on_detach_callback:function(){
        _.each(this._boardSubcontrollers,function(controller){
            if('on_detach_callback'incontroller){
                controller.on_detach_callback();
            }
        });
    },

    //--------------------------------------------------------------------------
    //Public
    //--------------------------------------------------------------------------

    /**
     *@param{string}layout
     */
    changeLayout:function(layout){
        var$dashboard=this.$('.oe_dashboard');
        if(!$dashboard.length){
            return;
        }
        varcurrent_layout=$dashboard.attr('data-layout');
        if(current_layout!==layout){
            varclayout=current_layout.split('-').length,
                nlayout=layout.split('-').length,
                column_diff=clayout-nlayout;
            if(column_diff>0){
                var$last_column=$();
                $dashboard.find('.oe_dashboard_column').each(function(k,v){
                    if(k>=nlayout){
                        $(v).find('.oe_action').appendTo($last_column);
                    }else{
                        $last_column=$(v);
                    }
                });
            }
            $dashboard.toggleClass('oe_dashboard_layout_'+current_layout+'oe_dashboard_layout_'+layout);
            $dashboard.attr('data-layout',layout);
        }
    },
    /**
     *Returnsarepresentationofthecurrentdashboard
     *
     *@returns{Object}
     */
    getBoard:function(){
        varself=this;
        varboard={
            form_title:this.arch.attrs.string,
            style:this.$('.oe_dashboard').attr('data-layout'),
            columns:[],
        };
        this.$('.oe_dashboard_column').each(function(){
            varactions=[];
            $(this).find('.oe_action').each(function(){
                varactionID=$(this).attr('data-id');
                varnewAttrs=_.clone(self.actionsDescr[actionID]);

                /*prepareattributesastheyshouldbesaved*/
                if(newAttrs.modifiers){
                    newAttrs.modifiers=JSON.stringify(newAttrs.modifiers);
                }
                actions.push(newAttrs);
            });
            board.columns.push(actions);
        });
        returnboard;
    },

    //--------------------------------------------------------------------------
    //Private
    //--------------------------------------------------------------------------

    /**
     *@private
     *@param{Object}params
     *@param{jQueryElement}params.$node
     *@param{integer}params.actionID
     *@param{Object}params.context
     *@param{any[]}params.domain
     *@param{string}params.viewType
     *@returns{Promise}
     */
    _createController:function(params){
        varself=this;
        returnthis._rpc({
                route:'/web/action/load',
                params:{action_id:params.actionID}
            })
            .then(function(action){
                if(!action){
                    //theactiondoesnotexistanymore
                    returnPromise.resolve();
                }
                varevalContext=newContext(session.user_context,params.context).eval();
                if(evalContext.group_by&&evalContext.group_by.length===0){
                    deleteevalContext.group_by;
                }
                //tzandlangaresavedinthecustomview
                //overridethelanguagetotakethecurrentone
                varrawContext=newContext(action.context,evalContext,{lang:session.user_context.lang});
                varcontext=pyUtils.eval('context',rawContext,evalContext);
                vardomain=params.domain||pyUtils.eval('domain',action.domain||'[]',action.context);

                action.context=context;
                action.domain=domain;

                //Whencreatingaview,`action.views`isexpectedtobeanarrayofdicts,while
                //'/web/action/load'returnsanarrayofarrays.
                action._views=action.views;
                action.views=$.map(action.views,function(view){return{viewID:view[0],type:view[1]}});

                varviewType=params.viewType||action._views[0][1];
                varview=_.find(action._views,function(descr){
                    returndescr[1]===viewType;
                })||[false,viewType];
                returnself.loadViews(action.res_model,context,[view])
                           .then(function(viewsInfo){
                    varviewInfo=viewsInfo[viewType];
                    varView=viewRegistry.get(viewType);

                    constsearchQuery={
                        context:context,
                        domain:domain,
                        groupBy:typeofcontext.group_by==='string'&&context.group_by?
                                    [context.group_by]:
                                    context.group_by||[],
                        orderedBy:context.orderedBy||[],
                    };

                    if(View.prototype.searchMenuTypes.includes('comparison')){
                        searchQuery.timeRanges=context.comparison||{};
                    }

                    varview=newView(viewInfo,{
                        action:action,
                        hasSelectors:false,
                        modelName:action.res_model,
                        searchQuery,
                        withControlPanel:false,
                        withSearchPanel:false,
                    });
                    returnview.getController(self).then(function(controller){
                        self._boardFormViewIDs[controller.handle]=_.first(
                            _.find(action._views,function(descr){
                                returndescr[1]==='form';
                            })
                        );
                        self._boardSubcontrollers.push(controller);
                        returncontroller.appendTo(params.$node);
                    });
                });
            });
    },
    /**
     *@private
     *@param{Object}node
     *@returns{jQueryElement}
     */
    _renderTagBoard:function(node){
        varself=this;
        //weaddtheo_dashboardclasstotherenderer's$el.Thismeansthat
        //thisfunctionhasasideeffect. Thisisokbecauseweassumethat
        //oncewehavea'<board>'tag,weareinaspecialdashboardmode.
        this.$el.addClass('o_dashboard');

        varhasAction=_.detect(node.children,function(column){
            return_.detect(column.children,function(element){
                returnelement.tag==="action"?element:false;
            });
        });
        if(!hasAction){
            return$(QWeb.render('DashBoard.NoContent'));
        }

        //Weshouldstartwiththreecolumnsavailable
        node=$.extend(true,{},node);

        //noideawhymasterworkswithoutthis,butwhatever
        if(!('layout'innode.attrs)){
            node.attrs.layout=node.attrs.style;
        }
        for(vari=node.children.length;i<3;i++){
            node.children.push({
                tag:'column',
                attrs:{},
                children:[]
            });
        }

        //registeractions,alongsideagenerateduniqueID
        _.each(node.children,function(column,column_index){
            _.each(column.children,function(action,action_index){
                action.attrs.id='action_'+column_index+'_'+action_index;
                self.actionsDescr[action.attrs.id]=action.attrs;
            });
        });

        var$html=$('<div>').append($(QWeb.render('DashBoard',{node:node,isMobile:config.device.isMobile})));
        this._boardSubcontrollers=[];//dashboardcontrollersareresetonre-render

        //rendereachview
        _.each(this.actionsDescr,function(action){
            self.defs.push(self._createController({
                $node:$html.find('.oe_action[data-id='+action.id+'].oe_content'),
                actionID:_.str.toNumber(action.name),
                context:action.context,
                domain:Domain.prototype.stringToArray(action.domain,{}),
                viewType:action.view_mode,
            }));
        });
        $html.find('.oe_dashboard_column').sortable({
            connectWith:'.oe_dashboard_column',
            handle:'.oe_header',
            scroll:false
        }).bind('sortstop',function(){
            self.trigger_up('save_dashboard');
        });

        return$html;
    },

    //--------------------------------------------------------------------------
    //Handlers
    //--------------------------------------------------------------------------

    /**
     *@private
     */
    _onChangeLayout:function(){
        varcurrentLayout=this.$('.oe_dashboard').attr('data-layout');
        this.trigger_up('change_layout',{currentLayout:currentLayout});
    },
    /**
     *@private
     *@param{MouseEvent}event
     */
    _onCloseAction:function(event){
        varself=this;
        var$container=$(event.currentTarget).parents('.oe_action:first');
        Dialog.confirm(this,(_t("Areyousureyouwanttoremovethisitem?")),{
            confirm_callback:function(){
                $container.remove();
                if(!config.device.isMobile){
                    self.trigger_up('save_dashboard');
                }
            },
        });
    },
    /**
     *@private
     *@param{MouseEvent}event
     */
    _onFoldClick:function(event){
        var$e=$(event.currentTarget);
        var$action=$e.closest('.oe_action');
        varid=$action.data('id');
        varactionAttrs=this.actionsDescr[id];

        if($e.is('.oe_minimize')){
            actionAttrs.fold='1';
        }else{
            delete(actionAttrs.fold);
        }
        $e.toggleClass('oe_minimizeoe_maximize');
        $action.find('.oe_content').toggle();
        if(!config.device.isMobile){
            this.trigger_up('save_dashboard');
        }
    },
    /**
     *LetFormControllerknowwhichformviewitshoulddisplaybasedonthe
     *windowactionofthesubcontrollerthatisswitchingview
     *
     *@private
     *@param{FlectraEvent}event
     */
    _onSwitchView:function(event){
        event.data.formViewID=this._boardFormViewIDs[event.target.handle];
    },
    /**
     *Stopsthepropagationof'update_filters'eventstriggeredbythe
     *controllersinstantiatedbythedashboardtopreventthemfrom
     *interferingwiththeActionManager.
     *
     *@private
     *@param{FlectraEvent}event
     */
    _onUpdateFilters:function(event){
        event.stopPropagation();
    },
});

varBoardView=FormView.extend({
    config:_.extend({},FormView.prototype.config,{
        Controller:BoardController,
        Renderer:BoardRenderer,
    }),
    display_name:_lt('Board'),

    /**
     *@override
     */
    init:function(viewInfo){
        this._super.apply(this,arguments);
        this.controllerParams.customViewID=viewInfo.custom_view_id;
    },
});

returnBoardView;

});


flectra.define('board.viewRegistry',function(require){
"usestrict";

varBoardView=require('board.BoardView');

varviewRegistry=require('web.view_registry');

viewRegistry.add('board',BoardView);

});
