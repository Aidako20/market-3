flectra.define("board.dashboard_tests",function(require){
    "usestrict";

    varBoardView=require("board.BoardView");
    vartestUtils=require("web.test_utils");
    varcreateView=testUtils.createView;

    QUnit.module("Boardview",{
        beforeEach:function(){
            this.data={
                board:{
                    fields:{},
                    records:[],
                },
                partner:{
                    fields:{
                        foo:{
                            string:"Foo",
                            type:"char",
                            default:"MylittleFooValue",
                            searchable:true,
                        },
                    },
                    records:[
                        {
                            id:1,
                            foo:"yop",
                        },
                    ],
                },
            };
        },
    });

    QUnit.test("can'tswitchviewsinthedashboard",asyncfunction(assert){
        assert.expect(3);

        vartarget=awaitcreateView({
            View:BoardView,
            model:"board",
            data:this.data,
            arch:`<formstring="MyDashboard">
                <boardstyle="2-1">
                    <column>
                        <actioncontext="{}"domain="[]"view_mode="list"string="ABC"name="51"/>
                    </column>
                </board>
            </form>`,
            mockRPC:function(route){
                if(route==="/web/action/load"){
                    returnPromise.resolve({
                        res_model:"partner",
                        views:[
                            [4,"list"],
                            [5,"form"],
                        ],
                    });
                }
                returnthis._super.apply(this,arguments);
            },
            archs:{
                "partner,4,list":`<treestring="Partner"><fieldname="foo"/></tree>`,
            },
        });

        assert.containsNone(target,".oe_dashboard_links","Couldn'tallowusertoChangelayout");
        assert.containsOnce(target,".oe_dashboard_layout_1","Thedisplaylayoutisforceto1");
        assert.containsNone(
            target,
            ".o_action.o_control_panel",
            "viewsinthedashboarddonothaveacontrolpanel"
        );

        target.destroy();
    });

    QUnit.test("Correctlysoftswitchto'1'layoutonsmallscreen",asyncfunction(assert){
        assert.expect(2);

        vartarget=awaitcreateView({
            View:BoardView,
            model:"board",
            data:this.data,
            arch:`<form>
                <boardstyle="2-1">
                        <column>
                            <actioncontext="{}"domain="[]"view_mode="list"string="ABC"name="51"/>
                        </column>
                        <column>
                            <actioncontext="{}"domain="[]"view_mode="list"string="ABC"name="51"/>
                        </column>
                    </board>
            </form>`,
            mockRPC:function(route){
                if(route==="/web/action/load"){
                    returnPromise.resolve({
                        res_model:"partner",
                        views:[
                            [4,"list"],
                            [5,"form"],
                        ],
                    });
                }
                returnthis._super.apply(this,arguments);
            },
            archs:{
                "partner,4,list":'<treestring="Partner"><fieldname="foo"/></tree>',
            },
        });

        assert.containsOnce(target,".oe_dashboard_layout_1","Thedisplaylayoutisforceto1");
        assert.containsN(target,".oe_action",2,"Thedisplayshouldcontainsthe2actions");

        target.destroy();
    });

    QUnit.test("emptyboardview",asyncfunction(assert){
        assert.expect(2);
        consttarget=awaitcreateView({
            View:BoardView,
            debug:1,
            model:"board",
            data:this.data,
            arch:`<formstring="MyDashboard">
                <boardstyle="2-1">
                    <column/>
                </board>
            </form>`,
            archs:{
                "partner,4,list":'<treestring="Partner"><fieldname="foo"/></tree>',
            },
        });

        assert.hasClass(
            target.renderer.$el,
            "o_dashboard",
            "withadashboard,therenderershouldhavethepropercssclass"
        );
        assert.containsOnce(
            target,
            ".o_dashboard.o_view_nocontent",
            "shouldhaveanocontenthelper"
        );

        target.destroy();
    });
});
