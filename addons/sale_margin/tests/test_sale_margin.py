#-*-coding:utf-8-*-
#PartofFlectra.SeeLICENSEfileforfullcopyrightandlicensingdetails.

fromflectra.testsimportcommon
fromdatetimeimportdatetime


classTestSaleMargin(common.TransactionCase):

    defsetUp(self):
        super(TestSaleMargin,self).setUp()
        self.SaleOrder=self.env['sale.order']

        self.product_uom_id=self.ref('uom.product_uom_unit')
        self.product=self.env['product.product'].create({'name':'IndividualWorkplace'})
        self.product_id=self.product.id
        self.partner_id=self.env['res.partner'].create({'name':'Atestpartner'}).id
        self.partner_invoice_address_id=self.env['res.partner'].create({
            'name':'Atestpartneraddress',
            'parent_id':self.partner_id,
        }).id
        self.pricelist_id=self.ref('product.list0')
        self.pricelist=self.env.ref('product.list0')

    deftest_sale_margin(self):
        """Testthesale_marginmoduleinFlectra."""
        self.pricelist.currency_id=self.env.company.currency_id
        self.product.standard_price=700.0
        sale_order_so11=self.SaleOrder.create({
            'date_order':datetime.today(),
            'name':'Test_SO011',
            'order_line':[
                (0,0,{
                    'name':'[CARD]IndividualWorkplace',
                    'price_unit':1000.0,
                    'product_uom':self.product_uom_id,
                    'product_uom_qty':10.0,
                    'state':'draft',
                    'product_id':self.product_id}),
                (0,0,{
                    'name':'Linewithoutproduct_uom',
                    'price_unit':1000.0,
                    'product_uom_qty':10.0,
                    'state':'draft',
                    'product_id':self.product_id})],
            'partner_id':self.partner_id,
            'partner_invoice_id':self.partner_invoice_address_id,
            'partner_shipping_id':self.partner_invoice_address_id,
            'pricelist_id':self.pricelist_id})
        #Confirmthesalesorder.
        sale_order_so11.action_confirm()
        #Verifythatmarginfieldgetsbindwiththevalue.
        self.assertEqual(sale_order_so11.margin,6000.00,"Salesorderprofitshouldbe6000.00")
        self.assertEqual(sale_order_so11.margin_percent,0.3,"Salesordermarginshouldbe30%")
        sale_order_so11.order_line[1].purchase_price=800
        self.assertEqual(sale_order_so11.margin,5000.00,"Salesordermarginshouldbe5000.00")

    deftest_sale_margin1(self):
        """Testthemarginwhensalespriceislessthencost."""
        sale_order_so12=self.SaleOrder.create({
            'date_order':datetime.today(),
            'name':'Test_SO012',
            'order_line':[
                (0,0,{
                    'name':'[CARD]IndividualWorkplace',
                    'purchase_price':40.0,
                    'price_unit':20.0,
                    'product_uom':self.product_uom_id,
                    'product_uom_qty':1.0,
                    'state':'draft',
                    'product_id':self.product_id}),
                (0,0,{
                    'name':'Linewithoutproduct_uom',
                    'price_unit':-100.0,
                    'purchase_price':0.0,
                    'product_uom_qty':1.0,
                    'state':'draft',
                    'product_id':self.product_id})],
            'partner_id':self.partner_id,
            'partner_invoice_id':self.partner_invoice_address_id,
            'partner_shipping_id':self.partner_invoice_address_id,
            'pricelist_id':self.pricelist_id})
        #Confirmthesalesorder.
        sale_order_so12.action_confirm()
        #VerifythatmarginfieldofSaleOrderLinesgetsbindwiththevalue.
        self.assertEqual(sale_order_so12.order_line[0].margin,-20.00,"Salesorderprofitshouldbe-20.00")
        self.assertEqual(sale_order_so12.order_line[0].margin_percent,-1,"Salesordermarginpercentageshouldbe-100%")
        self.assertEqual(sale_order_so12.order_line[1].margin,-100.00,"Salesorderprofitshouldbe-100.00")
        self.assertEqual(sale_order_so12.order_line[1].margin_percent,1.00,"Salesordermarginshouldbe100%whenthecostiszeroandpricedefined")
        #Verifythatmarginfieldgetsbindwiththevalue.
        self.assertEqual(sale_order_so12.margin,-120.00,"Salesordermarginshouldbe-120.00")
        self.assertEqual(sale_order_so12.margin_percent,1.5,"Salesordermarginshouldbe150%")

    deftest_sale_margin2(self):
        """Testthemarginwhencostis0marginpercentageshouldalwaysbe100%."""
        sale_order_so13=self.SaleOrder.create({
            'date_order':datetime.today(),
            'name':'Test_SO013',
            'order_line':[
                (0,0,{
                    'name':'[CARD]IndividualWorkplace',
                    'purchase_price':0.0,
                    'price_unit':70.0,
                    'product_uom':self.product_uom_id,
                    'product_uom_qty':1.0,
                    'state':'draft',
                    'product_id':self.product_id})],
            'partner_id':self.partner_id,
            'partner_invoice_id':self.partner_invoice_address_id,
            'partner_shipping_id':self.partner_invoice_address_id,
            'pricelist_id':self.pricelist_id})
        #VerifythatmarginfieldofSaleOrderLinesgetsbindwiththevalue.
        self.assertEqual(sale_order_so13.order_line[0].margin,70.00,"Salesorderprofitshouldbe70.00")
        self.assertEqual(sale_order_so13.order_line[0].margin_percent,1.0,"Salesordermarginpercentageshouldbe100.00")
        #Verifythatmarginfieldgetsbindwiththevalue.
        self.assertEqual(sale_order_so13.margin,70.00,"Salesorderprofitshouldbe70.00")
        self.assertEqual(sale_order_so13.margin_percent,1.00,"Salesordermarginpercentageshouldbe100.00")

    deftest_sale_margin3(self):
        """Testthemarginandmarginpercentagewhenproductwithmultiplequantity"""
        sale_order_so14=self.SaleOrder.create({
            'date_order':datetime.today(),
            'name':'Test_SO014',
            'order_line':[
                (0,0,{
                    'name':'[CARD]IndividualWorkplace',
                    'purchase_price':50.0,
                    'price_unit':100.0,
                    'product_uom':self.product_uom_id,
                    'product_uom_qty':3.0,
                    'state':'draft',
                    'product_id':self.product_id}),
                (0,0,{
                    'name':'Linewithoutproduct_uom',
                    'price_unit':-50.0,
                    'purchase_price':0.0,
                    'product_uom_qty':1.0,
                    'state':'draft',
                    'product_id':self.product_id})],
            'partner_id':self.partner_id,
            'partner_invoice_id':self.partner_invoice_address_id,
            'partner_shipping_id':self.partner_invoice_address_id,
            'pricelist_id':self.pricelist_id})
        #Confirmthesalesorder.
        sale_order_so14.action_confirm()
        #VerifythatmarginfieldofSaleOrderLinesgetsbindwiththevalue.
        self.assertEqual(sale_order_so14.order_line[0].margin,150.00,"Salesorderprofitshouldbe150.00")
        self.assertEqual(sale_order_so14.order_line[0].margin_percent,0.5,"Salesordermarginshouldbe100%")
        self.assertEqual(sale_order_so14.order_line[1].margin,-50.00,"Salesorderprofitshouldbe-50.00")
        self.assertEqual(sale_order_so14.order_line[1].margin_percent,1.0,"Salesordermarginshouldbe100%")
        #Verifythatmarginfieldgetsbindwiththevalue.
        self.assertEqual(sale_order_so14.margin,100.00,"Salesorderprofitshouldbe100.00")
        self.assertEqual(sale_order_so14.margin_percent,0.4,"Salesordermarginshouldbe40%")
