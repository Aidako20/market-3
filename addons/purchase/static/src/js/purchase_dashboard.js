flectra.define('purchase.dashboard',function(require){
"usestrict";

/**
 *ThisfiledefinesthePurchaseDashboardview(alongsideitsrenderer,model
 *andcontroller).ThisDashboardisaddedtothetopoflistandkanbanPurchase
 *views,itextendsbothviewswithessentiallythesamecodeexceptfor
 *_onDashboardActionClickedfunctionsowecanapplyfilterswithoutchangingour
 *currentview.
 */

varcore=require('web.core');
varListController=require('web.ListController');
varListModel=require('web.ListModel');
varListRenderer=require('web.ListRenderer');
varListView=require('web.ListView');
varKanbanController=require('web.KanbanController');
varKanbanModel=require('web.KanbanModel');
varKanbanRenderer=require('web.KanbanRenderer');
varKanbanView=require('web.KanbanView');
varSampleServer=require('web.SampleServer');
varview_registry=require('web.view_registry');

varQWeb=core.qweb;

//Addmockofmethod'retrieve_dashboard'inSampleServer,sothatwecanhave
//thesampledatainemptypurchasekanbanandlistview
letdashboardValues;
SampleServer.mockRegistry.add('purchase.order/retrieve_dashboard',()=>{
    returnObject.assign({},dashboardValues);
});


//--------------------------------------------------------------------------
//ListView
//--------------------------------------------------------------------------

varPurchaseListDashboardRenderer=ListRenderer.extend({
    events:_.extend({},ListRenderer.prototype.events,{
        'click.o_dashboard_action':'_onDashboardActionClicked',
    }),
    /**
     *@override
     *@private
     *@returns{Promise}
     */
    _renderView:function(){
        varself=this;
        returnthis._super.apply(this,arguments).then(function(){
            varvalues=self.state.dashboardValues;
            varpurchase_dashboard=QWeb.render('purchase.PurchaseDashboard',{
                values:values,
            });
            self.$el.prepend(purchase_dashboard);
        });
    },

    /**
     *@private
     *@param{MouseEvent}
     */
    _onDashboardActionClicked:function(e){
        e.preventDefault();
        var$action=$(e.currentTarget);
        this.trigger_up('dashboard_open_action',{
            action_name:$action.attr('name')+"_list",
            action_context:$action.attr('context'),
        });
    },
});

varPurchaseListDashboardModel=ListModel.extend({
    /**
     *@override
     */
    init:function(){
        this.dashboardValues={};
        this._super.apply(this,arguments);
    },

    /**
     *@override
     */
    __get:function(localID){
        varresult=this._super.apply(this,arguments);
        if(_.isObject(result)){
            result.dashboardValues=this.dashboardValues[localID];
        }
        returnresult;
    },
    /**
     *@override
     *@returns{Promise}
     */
    __load:function(){
        returnthis._loadDashboard(this._super.apply(this,arguments));
    },
    /**
     *@override
     *@returns{Promise}
     */
    __reload:function(){
        returnthis._loadDashboard(this._super.apply(this,arguments));
    },

    /**
     *@private
     *@param{Promise}super_defapromisethatresolveswithadataPointid
     *@returns{Promise->string}resolvestothedataPointid
     */
    _loadDashboard:function(super_def){
        varself=this;
        vardashboard_def=this._rpc({
            model:'purchase.order',
            method:'retrieve_dashboard',
        });
        returnPromise.all([super_def,dashboard_def]).then(function(results){
            varid=results[0];
            dashboardValues=results[1];
            self.dashboardValues[id]=dashboardValues;
            returnid;
        });
    },
});

varPurchaseListDashboardController=ListController.extend({
    custom_events:_.extend({},ListController.prototype.custom_events,{
        dashboard_open_action:'_onDashboardOpenAction',
    }),

    /**
     *@private
     *@param{FlectraEvent}e
     */
    _onDashboardOpenAction:function(e){
        returnthis.do_action(e.data.action_name,
            {additional_context:JSON.parse(e.data.action_context)});
    },
});

varPurchaseListDashboardView=ListView.extend({
    config:_.extend({},ListView.prototype.config,{
        Model:PurchaseListDashboardModel,
        Renderer:PurchaseListDashboardRenderer,
        Controller:PurchaseListDashboardController,
    }),
});

//--------------------------------------------------------------------------
//KanbanView
//--------------------------------------------------------------------------

varPurchaseKanbanDashboardRenderer=KanbanRenderer.extend({
    events:_.extend({},KanbanRenderer.prototype.events,{
        'click.o_dashboard_action':'_onDashboardActionClicked',
    }),
    /**
     *@override
     *@private
     *@returns{Promise}
     */
    _render:function(){
        varself=this;
        returnthis._super.apply(this,arguments).then(function(){
            varvalues=self.state.dashboardValues;
            varpurchase_dashboard=QWeb.render('purchase.PurchaseDashboard',{
                values:values,
            });
            self.$el.parent().find(".o_purchase_dashboard").remove();
            self.$el.before(purchase_dashboard);
        });
    },

    /**
     *@private
     *@param{MouseEvent}
     */
    _onDashboardActionClicked:function(e){
        e.preventDefault();
        var$action=$(e.currentTarget);
        this.trigger_up('dashboard_open_action',{
            action_name:$action.attr('name')+"_kanban",
            action_context:$action.attr('context'),
        });
    },
});

varPurchaseKanbanDashboardModel=KanbanModel.extend({
    /**
     *@override
     */
    init:function(){
        this.dashboardValues={};
        this._super.apply(this,arguments);
    },

    /**
     *@override
     */
    __get:function(localID){
        varresult=this._super.apply(this,arguments);
        if(_.isObject(result)){
            result.dashboardValues=this.dashboardValues[localID];
        }
        returnresult;
    },
    /**
     *@override
     *@returns{Promise}
     */
    __load:function(){
        returnthis._loadDashboard(this._super.apply(this,arguments));
    },
    /**
     *@override
     *@returns{Promise}
     */
    __reload:function(){
        returnthis._loadDashboard(this._super.apply(this,arguments));
    },

    /**
     *@private
     *@param{Promise}super_defapromisethatresolveswithadataPointid
     *@returns{Promise->string}resolvestothedataPointid
     */
    _loadDashboard:function(super_def){
        varself=this;
        vardashboard_def=this._rpc({
            model:'purchase.order',
            method:'retrieve_dashboard',
        });
        returnPromise.all([super_def,dashboard_def]).then(function(results){
            varid=results[0];
            dashboardValues=results[1];
            self.dashboardValues[id]=dashboardValues;
            returnid;
        });
    },
});

varPurchaseKanbanDashboardController=KanbanController.extend({
    custom_events:_.extend({},KanbanController.prototype.custom_events,{
        dashboard_open_action:'_onDashboardOpenAction',
    }),

    /**
     *@private
     *@param{FlectraEvent}e
     */
    _onDashboardOpenAction:function(e){
        returnthis.do_action(e.data.action_name,
            {additional_context:JSON.parse(e.data.action_context)});
    },
});

varPurchaseKanbanDashboardView=KanbanView.extend({
    config:_.extend({},KanbanView.prototype.config,{
        Model:PurchaseKanbanDashboardModel,
        Renderer:PurchaseKanbanDashboardRenderer,
        Controller:PurchaseKanbanDashboardController,
    }),
});

view_registry.add('purchase_list_dashboard',PurchaseListDashboardView);
view_registry.add('purchase_kanban_dashboard',PurchaseKanbanDashboardView);

return{
    PurchaseListDashboardModel:PurchaseListDashboardModel,
    PurchaseListDashboardRenderer:PurchaseListDashboardRenderer,
    PurchaseListDashboardController:PurchaseListDashboardController,
    PurchaseKanbanDashboardModel:PurchaseKanbanDashboardModel,
    PurchaseKanbanDashboardRenderer:PurchaseKanbanDashboardRenderer,
    PurchaseKanbanDashboardController:PurchaseKanbanDashboardController
};

});
