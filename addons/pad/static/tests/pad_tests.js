flectra.define('pad.pad_tests',function(require){
"usestrict";

varFieldPad=require('pad.pad');
varFormView=require('web.FormView');
vartestUtils=require('web.test_utils');

varcreateView=testUtils.createView;

QUnit.module('padwidget',{
    beforeEach:function(){
        this.data={
            task:{
                fields:{
                    description:{string:"Description",type:"char"},
                    use_pad:{string:"Usepad",type:"boolean"},
                },
                records:[
                    {id:1,description:false},
                    {id:2,description:"https://pad.flectra.pad/p/test-03AK6RCJT"},
                ],
                pad_is_configured:function(){
                    returntrue;
                },
                pad_generate_url:function(route,args){
                    return{
                        url:'https://pad.flectra.pad/p/test/'+args.context.object_id
                    };
                },
                pad_get_content:function(){
                    return"weshouldrewritethisserverinhaskell";
                },
            },
        };
    },
});

    QUnit.test('padwidgetdisplayhelpifservernotconfigured',asyncfunction(assert){
        assert.expect(4);

        varform=awaitcreateView({
            View:FormView,
            model:'task',
            data:this.data,
            arch:'<form>'+
                    '<sheet>'+
                        '<group>'+
                            '<fieldname="description"widget="pad"/>'+
                        '</group>'+
                    '</sheet>'+
                '</form>',
            res_id:1,
            mockRPC:function(route,args){
                if(args.method==='pad_is_configured'){
                    returnPromise.resolve(false);
                }
                returnthis._super.apply(this,arguments);
            },
        });
        assert.isVisible(form.$('p.oe_unconfigured'),
            "helpmessageshouldbevisible");
        assert.containsNone(form,'p.oe_pad_content',
            "contentshouldnotbedisplayed");
        awaittestUtils.form.clickEdit(form);
        assert.isVisible(form.$('p.oe_unconfigured'),
            "helpmessageshouldbevisible");
        assert.containsNone(form,'p.oe_pad_content',
            "contentshouldnotbedisplayed");
        form.destroy();
        deleteFieldPad.prototype.isPadConfigured;
    });

    QUnit.test('padwidgetworks,basiccase',asyncfunction(assert){
        assert.expect(5);

        varform=awaitcreateView({
            View:FormView,
            model:'task',
            data:this.data,
            arch:'<form>'+
                    '<sheet>'+
                        '<group>'+
                            '<fieldname="description"widget="pad"/>'+
                        '</group>'+
                    '</sheet>'+
                '</form>',
            res_id:1,
            mockRPC:function(route,args){
                if(route==='https://pad.flectra.pad/p/test/1?showChat=false&userName=batman'){
                    assert.ok(true,"shouldhaveaniframewithcorrectsrc");
                    returnPromise.resolve(true);
                }
                returnthis._super.apply(this,arguments);
            },
            session:{
                name:"batman",
            },
        });
        assert.isNotVisible(form.$('p.oe_unconfigured'),
            "helpmessageshouldnotbevisible");
        assert.isVisible(form.$('.oe_pad_content'),
            "contentshouldbevisible");
        assert.containsOnce(form,'.oe_pad_content:contains(Thispadwillbe)',
            "contentshoulddisplayamessagewhennotinitialized");

        awaittestUtils.form.clickEdit(form);

        assert.containsOnce(form,'.oe_pad_contentiframe',
            "shouldhaveaniframe");

        form.destroy();
        deleteFieldPad.prototype.isPadConfigured;
    });

    QUnit.test('padwidgetworks,withexistingdata',asyncfunction(assert){
        assert.expect(3);

        varcontentDef=testUtils.makeTestPromise();

        varform=awaitcreateView({
            View:FormView,
            model:'task',
            data:this.data,
            arch:'<form>'+
                    '<sheet>'+
                        '<group>'+
                            '<fieldname="description"widget="pad"/>'+
                        '</group>'+
                    '</sheet>'+
                '</form>',
            res_id:2,
            mockRPC:function(route,args){
                if(_.str.startsWith(route,'http')){
                    returnPromise.resolve(true);
                }
                varresult=this._super.apply(this,arguments);
                if(args.method==='pad_get_content'){
                    returncontentDef.then(_.constant(result));
                }
                if(args.method==='write'){
                    assert.ok('description'inargs.args[1],
                        "shouldalwayssendthedescriptionvalue");
                }
                returnresult;
            },
            session:{
                name:"batman",
            },
        });
        assert.strictEqual(form.$('.oe_pad_content').text(),"Loading",
            "shoulddisplayloadingmessage");
        contentDef.resolve();
        awaittestUtils.nextTick();
        assert.strictEqual(form.$('.oe_pad_content').text(),"weshouldrewritethisserverinhaskell",
            "shoulddisplaypropervalue");

        awaittestUtils.form.clickEdit(form);
        awaittestUtils.form.clickSave(form);
        form.destroy();
        deleteFieldPad.prototype.isPadConfigured;
    });

    QUnit.test('padwidgetisnotconsidereddirtyatcreation',asyncfunction(assert){
        assert.expect(2);

        varform=awaitcreateView({
            View:FormView,
            model:'task',
            data:this.data,
            arch:'<form>'+
                    '<sheet>'+
                        '<group>'+
                            '<fieldname="description"widget="pad"/>'+
                        '</group>'+
                    '</sheet>'+
                '</form>',
            mockRPC:function(route,args){
                if(!args.method){
                    returnPromise.resolve(true);
                }
                returnthis._super.apply(this,arguments);
            },
            session:{
                name:"batman",
            },
        });
        vardef=form.canBeDiscarded();
        vardefState='unresolved';
        def.then(function(){
            defState='resolved';
        });

        assert.strictEqual($('.modal').length,0,
            "shouldhavenoconfirmationmodalopened");
        awaittestUtils.nextTick();
        assert.strictEqual(defState,'resolved',
            "canbediscardedwassuccessfullyresolved");
        form.destroy();
        deleteFieldPad.prototype.isPadConfigured;
    });

    QUnit.test('padwidgetisnotconsidereddirtyatedition',asyncfunction(assert){
        assert.expect(2);

        varform=awaitcreateView({
            View:FormView,
            model:'task',
            data:this.data,
            arch:'<form>'+
                    '<sheet>'+
                        '<group>'+
                            '<fieldname="description"widget="pad"/>'+
                        '</group>'+
                    '</sheet>'+
                '</form>',
            res_id:2,
            mockRPC:function(route,args){
                if(!args.method){
                    returnPromise.resolve(true);
                }
                returnthis._super.apply(this,arguments);
            },
            session:{
                name:"batman",
            },
        });
        awaittestUtils.form.clickEdit(form);
        vardef=form.canBeDiscarded();
        vardefState='unresolved';
        def.then(function(){
            defState='resolved';
        });

        assert.strictEqual($('.modal').length,0,
            "shouldhavenoconfirmationmodalopened");
        awaittestUtils.nextTick();
        assert.strictEqual(defState,'resolved',
            "canbediscardedwassuccessfullyresolved");
        form.destroy();
        deleteFieldPad.prototype.isPadConfigured;
    });

    QUnit.test('recordshouldbediscardedproperlyevenifonlypadhaschanged',asyncfunction(assert){
        assert.expect(1);

        varform=awaitcreateView({
            View:FormView,
            model:'task',
            data:this.data,
            arch:'<form>'+
                    '<sheet>'+
                        '<group>'+
                            '<fieldname="description"widget="pad"/>'+
                        '</group>'+
                    '</sheet>'+
                '</form>',
            res_id:2,
            mockRPC:function(route,args){
                if(!args.method){
                    returnPromise.resolve(true);
                }
                returnthis._super.apply(this,arguments);
            },
            session:{
                name:"batman",
            },
        });
        awaittestUtils.form.clickEdit(form);
        awaittestUtils.form.clickDiscard(form);
        assert.strictEqual(form.$('.oe_pad_readonly').text(),this.data.task.pad_get_content(),
            "padcontentshouldnothavechanged");
        form.destroy();
        deleteFieldPad.prototype.isPadConfigured;
    });

    QUnit.test('nopaddeadlockonformchangemodifyingpadreadonlymodifier',asyncfunction(assert){
        assert.expect(1);

        varform=awaitcreateView({
            View:FormView,
            model:'task',
            data:this.data,
            arch:'<form>'+
                    '<sheet>'+
                        '<group>'+
                            '<fieldname="use_pad"widget="toggle_button"/>'+
                            '<fieldname="description"widget="pad"attrs="{\'readonly\':[(\'use_pad\',\'=\',False)]}"/>'+
                        '</group>'+
                    '</sheet>'+
                '</form>',
            res_id:2,
            mockRPC:function(route,args){
                if(!args.method){
                    returnPromise.resolve(true);
                }
                if(args.method==="write"){
                    assert.strictEqual(args.args[1].description,
                        "https://pad.flectra.pad/p/test-03AK6RCJT");
                }
                returnthis._super.apply(this,arguments);
            },
        });
        awaittestUtils.form.clickEdit(form);
        awaittestUtils.dom.click(form.$('.o_field_widget[name="use_pad"]'));
        awaittestUtils.form.clickSave(form);
        form.destroy();
        deleteFieldPad.prototype.isPadConfigured;
    });

});
